- en: UNet2DModel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UNet2DModel
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/models/unet2d](https://huggingface.co/docs/diffusers/api/models/unet2d)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '原文链接: [https://huggingface.co/docs/diffusers/api/models/unet2d](https://huggingface.co/docs/diffusers/api/models/unet2d)'
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet](https://huggingface.co/papers/1505.04597) model was originally introduced
    by Ronneberger et al. for biomedical image segmentation, but it is also commonly
    used in 🤗 Diffusers because it outputs images that are the same size as the input.
    It is one of the most important components of a diffusion system because it facilitates
    the actual diffusion process. There are several variants of the UNet model in
    🤗 Diffusers, depending on it’s number of dimensions and whether it is a conditional
    model or not. This is a 2D UNet model.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[UNet](https://huggingface.co/papers/1505.04597) 模型最初由Ronneberger等人提出，用于生物医学图像分割，但它也常用于🤗
    Diffusers，因为它输出与输入相同大小的图像。它是扩散系统中最重要的组件之一，因为它促进了实际的扩散过程。在🤗 Diffusers中有几个UNet模型的变体，取决于其维度数量以及是否是条件模型。这是一个2D
    UNet模型。'
- en: 'The abstract from the paper is:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '论文摘要如下:'
- en: '*There is large consent that successful training of deep networks requires
    many thousand annotated training samples. In this paper, we present a network
    and training strategy that relies on the strong use of data augmentation to use
    the available annotated samples more efficiently. The architecture consists of
    a contracting path to capture context and a symmetric expanding path that enables
    precise localization. We show that such a network can be trained end-to-end from
    very few images and outperforms the prior best method (a sliding-window convolutional
    network) on the ISBI challenge for segmentation of neuronal structures in electron
    microscopic stacks. Using the same network trained on transmitted light microscopy
    images (phase contrast and DIC) we won the ISBI cell tracking challenge 2015 in
    these categories by a large margin. Moreover, the network is fast. Segmentation
    of a 512x512 image takes less than a second on a recent GPU. The full implementation
    (based on Caffe) and the trained networks are available at [http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net](http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net).*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*有很大的共识，成功训练深度网络需要成千上万个注释的训练样本。在本文中，我们提出了一种依赖于强大数据增强的网络和训练策略，以更有效地利用可用的注释样本。该架构由一个收缩路径和一个对称扩展路径组成，用于捕获上下文和实现精确的定位。我们展示了这样一个网络可以从很少的图像中进行端到端的训练，并且在ISBI挑战中（用于电子显微镜堆中神经元结构的分割）上胜过先前最佳方法（滑动窗口卷积网络）。使用相同的网络在透射光学显微镜图像（相差和DIC）上训练，我们在这些类别上以很大的优势赢得了2015年的ISBI细胞跟踪挑战。此外，该网络速度很快。对512x512图像的分割在最新的GPU上不到一秒。完整的实现（基于Caffe）和训练的网络可在[http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net](http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net)上获得。*'
- en: UNet2DModel
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UNet2DModel
- en: '### `class diffusers.UNet2DModel`'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.UNet2DModel`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d.py#L40)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d.py#L40)'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample_size` (`int` or `Tuple[int, int]`, *optional*, defaults to `None`)
    — Height and width of input/output sample. Dimensions must be a multiple of `2
    ** (len(block_out_channels) - 1)`.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample_size` (`int` 或 `Tuple[int, int]`, *可选*, 默认为`None`) — 输入/输出样本的高度和宽度。维度必须是`2
    ** (len(block_out_channels) - 1)`的倍数。'
- en: '`in_channels` (`int`, *optional*, defaults to 3) — Number of channels in the
    input sample.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_channels` (`int`, *可选*, 默认为3) — 输入样本中的通道数。'
- en: '`out_channels` (`int`, *optional*, defaults to 3) — Number of channels in the
    output.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`out_channels` (`int`, *可选*, 默认为3) — 输出中的通道数。'
- en: '`center_input_sample` (`bool`, *optional*, defaults to `False`) — Whether to
    center the input sample.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center_input_sample` (`bool`, *可选*, 默认为`False`) — 是否将输入样本居中。'
- en: '`time_embedding_type` (`str`, *optional*, defaults to `"positional"`) — Type
    of time embedding to use.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_embedding_type` (`str`, *可选*, 默认为`"positional"`) — 要使用的时间嵌入类型。'
- en: '`freq_shift` (`int`, *optional*, defaults to 0) — Frequency shift for Fourier
    time embedding.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`freq_shift` (`int`, *可选*, 默认为0) — 傅立叶时间嵌入的频移。'
- en: '`flip_sin_to_cos` (`bool`, *optional*, defaults to `True`) — Whether to flip
    sin to cos for Fourier time embedding.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flip_sin_to_cos` (`bool`, *可选*, 默认为`True`) — 是否将正弦翻转为余弦以用于傅立叶时间嵌入。'
- en: '`down_block_types` (`Tuple[str]`, *optional*, defaults to `("DownBlock2D",
    "AttnDownBlock2D", "AttnDownBlock2D", "AttnDownBlock2D")`) — Tuple of downsample
    block types.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`down_block_types` (`Tuple[str]`, *可选*, 默认为`("DownBlock2D", "AttnDownBlock2D",
    "AttnDownBlock2D", "AttnDownBlock2D")`) — 下采样块类型的元组。'
- en: '`mid_block_type` (`str`, *optional*, defaults to `"UNetMidBlock2D"`) — Block
    type for middle of UNet, it can be either `UNetMidBlock2D` or `UnCLIPUNetMidBlock2D`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mid_block_type` (`str`, *可选*, 默认为`"UNetMidBlock2D"`) — UNet中间块的类型，可以是`UNetMidBlock2D`或`UnCLIPUNetMidBlock2D`。'
- en: '`up_block_types` (`Tuple[str]`, *optional*, defaults to `("AttnUpBlock2D",
    "AttnUpBlock2D", "AttnUpBlock2D", "UpBlock2D")`) — Tuple of upsample block types.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`up_block_types` (`Tuple[str]`, *可选*, 默认为`("AttnUpBlock2D", "AttnUpBlock2D",
    "AttnUpBlock2D", "UpBlock2D")`) — 上采样块类型的元组。'
- en: '`block_out_channels` (`Tuple[int]`, *optional*, defaults to `(224, 448, 672,
    896)`) — Tuple of block output channels.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`block_out_channels` (`Tuple[int]`, *可选*, 默认为`(224, 448, 672, 896)`) — 块输出通道的元组。'
- en: '`layers_per_block` (`int`, *optional*, defaults to `2`) — The number of layers
    per block.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layers_per_block` (`int`, *可选*, 默认为`2`) — 每个块的层数。'
- en: '`mid_block_scale_factor` (`float`, *optional*, defaults to `1`) — The scale
    factor for the mid block.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mid_block_scale_factor` (`float`, *可选*, 默认为`1`) — 中间块的比例因子。'
- en: '`downsample_padding` (`int`, *optional*, defaults to `1`) — The padding for
    the downsample convolution.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`downsample_padding` (`int`, *可选*, 默认为`1`) — 下采样卷积的填充。'
- en: '`downsample_type` (`str`, *optional*, defaults to `conv`) — The downsample
    type for downsampling layers. Choose between “conv” and “resnet”'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`downsample_type` (`str`, *可选*, 默认为`conv`) — 下采样层的下采样类型。选择“conv”或“resnet”之间。'
- en: '`upsample_type` (`str`, *optional*, defaults to `conv`) — The upsample type
    for upsampling layers. Choose between “conv” and “resnet”'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upsample_type` (`str`, *可选*, 默认为`conv`) — 上采样层的上采样类型。选择“conv”或“resnet”之间。'
- en: '`dropout` (`float`, *optional*, defaults to 0.0) — The dropout probability
    to use.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dropout` (`float`, *optional*, defaults to 0.0) — 要使用的 dropout 概率。'
- en: '`act_fn` (`str`, *optional*, defaults to `"silu"`) — The activation function
    to use.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`act_fn` (`str`, *optional*, defaults to `"silu"`) — 要使用的激活函数。'
- en: '`attention_head_dim` (`int`, *optional*, defaults to `8`) — The attention head
    dimension.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_head_dim` (`int`, *optional*, defaults to `8`) — 注意力头维度。'
- en: '`norm_num_groups` (`int`, *optional*, defaults to `32`) — The number of groups
    for normalization.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`norm_num_groups` (`int`, *optional*, defaults to `32`) — 规范化的组数。'
- en: '`attn_norm_num_groups` (`int`, *optional*, defaults to `None`) — If set to
    an integer, a group norm layer will be created in the mid block’s `Attention`
    layer with the given number of groups. If left as `None`, the group norm layer
    will only be created if `resnet_time_scale_shift` is set to `default`, and if
    created will have `norm_num_groups` groups.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attn_norm_num_groups` (`int`, *optional*, defaults to `None`) — 如果设置为整数，则在中间块的
    `Attention` 层中创建一个组规范化层，具有给定的组数。如果保持为 `None`，则仅当 `resnet_time_scale_shift` 设置为
    `default` 时才会创建组规范化层，如果创建，将具有 `norm_num_groups` 组。'
- en: '`norm_eps` (`float`, *optional*, defaults to `1e-5`) — The epsilon for normalization.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`norm_eps` (`float`, *optional*, defaults to `1e-5`) — 规范化的 epsilon。'
- en: '`resnet_time_scale_shift` (`str`, *optional*, defaults to `"default"`) — Time
    scale shift config for ResNet blocks (see `ResnetBlock2D`). Choose from `default`
    or `scale_shift`.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resnet_time_scale_shift` (`str`, *optional*, defaults to `"default"`) — ResNet
    块的时间尺度偏移配置（参见 `ResnetBlock2D`）。可选择 `default` 或 `scale_shift`。'
- en: '`class_embed_type` (`str`, *optional*, defaults to `None`) — The type of class
    embedding to use which is ultimately summed with the time embeddings. Choose from
    `None`, `"timestep"`, or `"identity"`.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_embed_type` (`str`, *optional*, defaults to `None`) — 要使用的类别嵌入类型，最终将与时间嵌入相加。可选择
    `None`、`"timestep"` 或 `"identity"`。'
- en: '`num_class_embeds` (`int`, *optional*, defaults to `None`) — Input dimension
    of the learnable embedding matrix to be projected to `time_embed_dim` when performing
    class conditioning with `class_embed_type` equal to `None`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_class_embeds` (`int`, *optional*, defaults to `None`) — 当执行类别条件化时，可学习嵌入矩阵的输入维度，将被投影到
    `time_embed_dim`，并且 `class_embed_type` 等于 `None`。'
- en: A 2D UNet model that takes a noisy sample and a timestep and returns a sample
    shaped output.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一个接受嘈杂样本和时间步长并返回一个形状为样本的 UNet 模型。
- en: This model inherits from [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin).
    Check the superclass documentation for it’s generic methods implemented for all
    models (such as downloading or saving).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型继承自 [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin)。查看超类文档以了解为所有模型实现的通用方法（如下载或保存）。
- en: '#### `forward`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d.py#L243)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d.py#L243)'
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parameters
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample` (`torch.FloatTensor`) — The noisy input tensor with the following
    shape `(batch, channel, height, width)`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`） — 具有以下形状的嘈杂输入张量 `(batch, channel, height, width)`。'
- en: '`timestep` (`torch.FloatTensor` or `float` or `int`) — The number of timesteps
    to denoise an input.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep` (`torch.FloatTensor` 或 `float` 或 `int`) — 用于去噪输入的时间步数。'
- en: '`class_labels` (`torch.FloatTensor`, *optional*, defaults to `None`) — Optional
    class labels for conditioning. Their embeddings will be summed with the timestep
    embeddings.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_labels` (`torch.FloatTensor`, *optional*, defaults to `None`) — 用于条件化的可选类别标签。它们的嵌入将与时间步嵌入相加。'
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a `~models.unet_2d.UNet2DOutput` instead of a plain tuple.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *optional*, defaults to `True`) — 是否返回一个 `~models.unet_2d.UNet2DOutput`
    而不是一个普通的 tuple。'
- en: Returns
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`~models.unet_2d.UNet2DOutput` or `tuple`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`~models.unet_2d.UNet2DOutput` 或 `tuple`'
- en: If `return_dict` is True, an `~models.unet_2d.UNet2DOutput` is returned, otherwise
    a `tuple` is returned where the first element is the sample tensor.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `return_dict` 为 True，则返回一个 `~models.unet_2d.UNet2DOutput`，否则返回一个 `tuple`，其中第一个元素是样本张量。
- en: The [UNet2DModel](/docs/diffusers/v0.26.3/en/api/models/unet2d#diffusers.UNet2DModel)
    forward method.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[UNet2DModel](/docs/diffusers/v0.26.3/en/api/models/unet2d#diffusers.UNet2DModel)
    的前向方法。'
- en: UNet2DOutput
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UNet2DOutput
- en: '### `class diffusers.models.unets.unet_2d.UNet2DOutput`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.models.unets.unet_2d.UNet2DOutput`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d.py#L27)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d.py#L27)'
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — The hidden states output from the last layer of the model.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`，形状为 `(batch_size, num_channels, height, width)`）
    — 模型最后一层的隐藏状态输出。'
- en: The output of [UNet2DModel](/docs/diffusers/v0.26.3/en/api/models/unet2d#diffusers.UNet2DModel).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[UNet2DModel](/docs/diffusers/v0.26.3/en/api/models/unet2d#diffusers.UNet2DModel)
    的输出。'
