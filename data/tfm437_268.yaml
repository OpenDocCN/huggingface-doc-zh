- en: EfficientNet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EfficientNet
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/efficientnet](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/efficientnet)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '原文链接: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/efficientnet](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/efficientnet)'
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'The EfficientNet model was proposed in [EfficientNet: Rethinking Model Scaling
    for Convolutional Neural Networks](https://arxiv.org/abs/1905.11946) by Mingxing
    Tan and Quoc V. Le. EfficientNets are a family of image classification models,
    which achieve state-of-the-art accuracy, yet being an order-of-magnitude smaller
    and faster than previous models.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 'EfficientNet模型是由Mingxing Tan和Quoc V. Le在[EfficientNet: Rethinking Model Scaling
    for Convolutional Neural Networks](https://arxiv.org/abs/1905.11946)中提出的。EfficientNets是一系列图像分类模型，实现了最先进的准确性，同时比以前的模型小一个数量级且更快。'
- en: 'The abstract from the paper is the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 从论文中摘录的如下：
- en: '*Convolutional Neural Networks (ConvNets) are commonly developed at a fixed
    resource budget, and then scaled up for better accuracy if more resources are
    available. In this paper, we systematically study model scaling and identify that
    carefully balancing network depth, width, and resolution can lead to better performance.
    Based on this observation, we propose a new scaling method that uniformly scales
    all dimensions of depth/width/resolution using a simple yet highly effective compound
    coefficient. We demonstrate the effectiveness of this method on scaling up MobileNets
    and ResNet. To go even further, we use neural architecture search to design a
    new baseline network and scale it up to obtain a family of models, called EfficientNets,
    which achieve much better accuracy and efficiency than previous ConvNets. In particular,
    our EfficientNet-B7 achieves state-of-the-art 84.3% top-1 accuracy on ImageNet,
    while being 8.4x smaller and 6.1x faster on inference than the best existing ConvNet.
    Our EfficientNets also transfer well and achieve state-of-the-art accuracy on
    CIFAR-100 (91.7%), Flowers (98.8%), and 3 other transfer learning datasets, with
    an order of magnitude fewer parameters.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*卷积神经网络（ConvNets）通常在固定的资源预算下开发，如果有更多资源可用，则会扩展以获得更好的准确性。在本文中，我们系统地研究了模型的缩放，并确定了仔细平衡网络深度、宽度和分辨率可以带来更好的性能。基于这一观察，我们提出了一种新的缩放方法，使用简单但非常有效的复合系数均匀缩放深度/宽度/分辨率的所有维度。我们展示了这种方法在扩展MobileNets和ResNet时的有效性。为了更进一步，我们使用神经架构搜索设计了一个新的基准网络，并将其扩展为一系列模型，称为EfficientNets，这些模型在准确性和效率方面比以前的ConvNets要好得多。特别是，我们的EfficientNet-B7在ImageNet上实现了最先进的84.3%的top-1准确性，同时比最佳现有ConvNet在推理时小8.4倍，快6.1倍。我们的EfficientNets也具有良好的迁移性能，并在CIFAR-100（91.7%）、Flowers（98.8%）和其他3个迁移学习数据集上实现了最先进的准确性，参数数量少一个数量级。*'
- en: This model was contributed by [adirik](https://huggingface.co/adirik). The original
    code can be found [here](https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型由[adirik](https://huggingface.co/adirik)贡献。原始代码可在[此处](https://github.com/tensorflow/tpu/tree/master/models/official/efficientnet)找到。
- en: EfficientNetConfig
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EfficientNetConfig
- en: '### `class transformers.EfficientNetConfig`'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.EfficientNetConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/configuration_efficientnet.py#L34)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/configuration_efficientnet.py#L34)'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`num_channels` (`int`, *optional*, defaults to 3) — The number of input channels.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_channels` (`int`, *optional*, 默认为 3) — 输入通道数。'
- en: '`image_size` (`int`, *optional*, defaults to 600) — The input image size.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_size` (`int`, *optional*, 默认为 600) — 输入图像大小。'
- en: '`width_coefficient` (`float`, *optional*, defaults to 2.0) — Scaling coefficient
    for network width at each stage.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width_coefficient` (`float`, *optional*, 默认为 2.0) — 每个阶段网络宽度的缩放系数。'
- en: '`depth_coefficient` (`float`, *optional*, defaults to 3.1) — Scaling coefficient
    for network depth at each stage.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`depth_coefficient` (`float`, *optional*, 默认为 3.1) — 每个阶段网络深度的缩放系数。'
- en: '`depth_divisor` `int`, *optional*, defaults to 8) — A unit of network width.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`depth_divisor` `int`, *optional*, 默认为 8) — 网络宽度的一个单位。'
- en: '`kernel_sizes` (`List[int]`, *optional*, defaults to `[3, 3, 5, 3, 5, 5, 3]`)
    — List of kernel sizes to be used in each block.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kernel_sizes` (`List[int]`, *optional*, 默认为 `[3, 3, 5, 3, 5, 5, 3]`) — 用于每个块的内核大小列表。'
- en: '`in_channels` (`List[int]`, *optional*, defaults to `[32, 16, 24, 40, 80, 112,
    192]`) — List of input channel sizes to be used in each block for convolutional
    layers.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_channels` (`List[int]`, *optional*, 默认为 `[32, 16, 24, 40, 80, 112, 192]`)
    — 用于卷积层中每个块的输入通道大小列表。'
- en: '`out_channels` (`List[int]`, *optional*, defaults to `[16, 24, 40, 80, 112,
    192, 320]`) — List of output channel sizes to be used in each block for convolutional
    layers.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`out_channels` (`List[int]`, *optional*, 默认为 `[16, 24, 40, 80, 112, 192, 320]`)
    — 用于卷积层中每个块的输出通道大小列表。'
- en: '`depthwise_padding` (`List[int]`, *optional*, defaults to `[]`) — List of block
    indices with square padding.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`depthwise_padding` (`List[int]`, *optional*, 默认为 `[]`) — 具有方形填充的块索引列表。'
- en: '`strides` (`List[int]`, *optional*, defaults to `[1, 2, 2, 2, 1, 2, 1]`) —
    List of stride sizes to be used in each block for convolutional layers.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strides` (`List[int]`, *optional*, 默认为 `[1, 2, 2, 2, 1, 2, 1]`) — 用于卷积层中每个块的步幅大小列表。'
- en: '`num_block_repeats` (`List[int]`, *optional*, defaults to `[1, 2, 2, 3, 3,
    4, 1]`) — List of the number of times each block is to repeated.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_block_repeats` (`List[int]`, *optional*, 默认为 `[1, 2, 2, 3, 3, 4, 1]`)
    — 每个块重复的次数列表。'
- en: '`expand_ratios` (`List[int]`, *optional*, defaults to `[1, 6, 6, 6, 6, 6, 6]`)
    — List of scaling coefficient of each block.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expand_ratios` (`List[int]`, *optional*, 默认为 `[1, 6, 6, 6, 6, 6, 6]`) — 每个块的缩放系数列表。'
- en: '`squeeze_expansion_ratio` (`float`, *optional*, defaults to 0.25) — Squeeze
    expansion ratio.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`squeeze_expansion_ratio` (`float`, *optional*, 默认为 0.25) — 挤压扩展比率。'
- en: '`hidden_act` (`str` or `function`, *optional*, defaults to `"silu"`) — The
    non-linear activation function (function or string) in each block. If string,
    `"gelu"`, `"relu"`, `"selu",` “gelu_new”`,` “silu”`and`“mish”` are supported.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_act` (`str` 或 `function`, *optional*, 默认为 `"silu"`) — 每个块中的非线性激活函数（函数或字符串）。如果是字符串，支持`"gelu"`、`"relu"`、`"selu"`、`"gelu_new"`、`"silu"`和`"mish"`。'
- en: '`hiddem_dim` (`int`, *optional*, defaults to 1280) — The hidden dimension of
    the layer before the classification head.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hiddem_dim` (`int`, *optional*, defaults to 1280) — 分类头之前的隐藏维度。'
- en: '`pooling_type` (`str` or `function`, *optional*, defaults to `"mean"`) — Type
    of final pooling to be applied before the dense classification head. Available
    options are [`"mean"`, `"max"`]'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pooling_type` (`str` or `function`, *optional*, defaults to `"mean"`) — 在密集分类头之前应用的最终池化类型。可用选项为[`"mean"`,
    `"max"`]'
- en: '`initializer_range` (`float`, *optional*, defaults to 0.02) — The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_range` (`float`, *optional*, defaults to 0.02) — 用于初始化所有权重矩阵的截断正态初始化器的标准差。'
- en: '`batch_norm_eps` (`float`, *optional*, defaults to 1e-3) — The epsilon used
    by the batch normalization layers.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch_norm_eps` (`float`, *optional*, defaults to 1e-3) — 批量归一化层使用的epsilon。'
- en: '`batch_norm_momentum` (`float`, *optional*, defaults to 0.99) — The momentum
    used by the batch normalization layers.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`batch_norm_momentum` (`float`, *optional*, defaults to 0.99) — 批量归一化层使用的动量。'
- en: '`dropout_rate` (`float`, *optional*, defaults to 0.5) — The dropout rate to
    be applied before final classifier layer.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dropout_rate` (`float`, *optional*, defaults to 0.5) — 应用于最终分类器层之前的丢弃率。'
- en: '`drop_connect_rate` (`float`, *optional*, defaults to 0.2) — The drop rate
    for skip connections.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drop_connect_rate` (`float`, *optional*, defaults to 0.2) — 跳跃连接的丢弃率。'
- en: This is the configuration class to store the configuration of a [EfficientNetModel](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetModel).
    It is used to instantiate an EfficientNet model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the EfficientNet [google/efficientnet-b7](https://huggingface.co/google/efficientnet-b7)
    architecture.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于存储[EfficientNetModel](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetModel)配置的配置类。它用于根据指定的参数实例化一个EfficientNet模型，定义模型架构。使用默认值实例化配置将产生类似于EfficientNet
    [google/efficientnet-b7](https://huggingface.co/google/efficientnet-b7)架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)的文档以获取更多信息。
- en: 'Example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: EfficientNetImageProcessor
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EfficientNetImageProcessor
- en: '### `class transformers.EfficientNetImageProcessor`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.EfficientNetImageProcessor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/image_processing_efficientnet.py#L45)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/image_processing_efficientnet.py#L45)'
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) — Whether to resize the
    image’s (height, width) dimensions to the specified `size`. Can be overridden
    by `do_resize` in `preprocess`.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`, *optional*, defaults to `True`) — 是否将图像的（高度，宽度）尺寸调整为指定的`size`。可以被`preprocess`中的`do_resize`覆盖。'
- en: '`size` (`Dict[str, int]` *optional*, defaults to `{"height" -- 346, "width":
    346}`): Size of the image after `resize`. Can be overridden by `size` in `preprocess`.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]` *optional*, defaults to `{"height" -- 346, "width":
    346}`): `resize`后的图像大小。可以被`preprocess`中的`size`覆盖。'
- en: '`resample` (`PILImageResampling` filter, *optional*, defaults to 0) — Resampling
    filter to use if resizing the image. Can be overridden by `resample` in `preprocess`.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`PILImageResampling` filter, *optional*, defaults to 0) — 如果调整图像大小，则使用的重采样滤波器。可以被`preprocess`中的`resample`覆盖。'
- en: '`do_center_crop` (`bool`, *optional*, defaults to `False`) — Whether to center
    crop the image. If the input size is smaller than `crop_size` along any edge,
    the image is padded with 0’s and then center cropped. Can be overridden by `do_center_crop`
    in `preprocess`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_center_crop` (`bool`, *optional*, defaults to `False`) — 是否中心裁剪图像。如果输入尺寸沿任何边小于`crop_size`，则图像将填充0，然后进行中心裁剪。可以被`preprocess`中的`do_center_crop`覆盖。'
- en: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `{"height" -- 289, "width":
    289}`): Desired output size when applying center-cropping. Can be overridden by
    `crop_size` in `preprocess`.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `{"height" -- 289, "width":
    289}`): 应用中心裁剪时的期望输出大小。可以被`preprocess`中的`crop_size`覆盖。'
- en: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) — Scale
    factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) — 如果重新调整图像，则使用的比例因子。可以被`preprocess`方法中的`rescale_factor`参数覆盖。'
- en: '`rescale_offset` (`bool`, *optional*, defaults to `False`) — Whether to rescale
    the image between [-scale_range, scale_range] instead of [0, scale_range]. Can
    be overridden by the `rescale_factor` parameter in the `preprocess` method.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_offset` (`bool`, *optional*, defaults to `False`) — 是否将图像重新调整到[-scale_range,
    scale_range]而不是[0, scale_range]。可以被`preprocess`方法中的`rescale_factor`参数覆盖。'
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) — Whether to rescale
    the image by the specified scale `rescale_factor`. Can be overridden by the `do_rescale`
    parameter in the `preprocess` method.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale` (`bool`, *optional*, defaults to `True`) — 是否按照指定的比例`rescale_factor`重新调整图像。可以被`preprocess`方法中的`do_rescale`参数覆盖。'
- en: '`do_normalize` (`bool`, *optional*, defaults to `True`) — Whether to normalize
    the image. Can be overridden by the `do_normalize` parameter in the `preprocess`
    method.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize` (`bool`, *optional*, defaults to `True`) — 是否对图像进行归一化。可以被`preprocess`方法中的`do_normalize`参数覆盖。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_STANDARD_MEAN`)
    — Mean to use if normalizing the image. This is a float or list of floats the
    length of the number of channels in the image. Can be overridden by the `image_mean`
    parameter in the `preprocess` method.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean` (`float` 或 `List[float]`, *可选*, 默认为 `IMAGENET_STANDARD_MEAN`)
    — 如果对图像进行归一化，则使用的均值。这是一个浮点数或与图像通道数相同长度的浮点数列表。可以通过 `preprocess` 方法中的 `image_mean`
    参数覆盖。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_STANDARD_STD`)
    — Standard deviation to use if normalizing the image. This is a float or list
    of floats the length of the number of channels in the image. Can be overridden
    by the `image_std` parameter in the `preprocess` method.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` 或 `List[float]`, *可选*, 默认为 `IMAGENET_STANDARD_STD`) —
    如果对图像进行归一化，则使用的标准差。这是一个浮点数或与图像通道数相同长度的浮点数列表。可以通过 `preprocess` 方法中的 `image_std`
    参数覆盖。'
- en: '`include_top` (`bool`, *optional*, defaults to `True`) — Whether to rescale
    the image again. Should be set to True if the inputs are used for image classification.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_top` (`bool`, *可选*, 默认为 `True`) — 是否再次对图像进行重新缩放。如果输入用于图像分类，则应设置为 True。'
- en: Constructs a EfficientNet image processor.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 EfficientNet 图像处理器。
- en: '#### `preprocess`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `preprocess`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/image_processing_efficientnet.py#L210)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/image_processing_efficientnet.py#L210)'
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`images` (`ImageInput`) — Image to preprocess. Expects a single or batch of
    images with pixel values ranging from 0 to 255\. If passing in images with pixel
    values between 0 and 1, set `do_rescale=False`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images` (`ImageInput`) — 要预处理的图像。期望单个图像或批次的图像，像素值范围为 0 到 255。如果传入像素值在 0 到
    1 之间的图像，请将 `do_rescale=False`。'
- en: '`do_resize` (`bool`, *optional*, defaults to `self.do_resize`) — Whether to
    resize the image.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`, *可选*, 默认为 `self.do_resize`) — 是否对图像进行调整大小。'
- en: '`size` (`Dict[str, int]`, *optional*, defaults to `self.size`) — Size of the
    image after `resize`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]`, *可选*, 默认为 `self.size`) — `resize` 后的图像大小。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `self.resample`)
    — PILImageResampling filter to use if resizing the image Only has an effect if
    `do_resize` is set to `True`.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`PILImageResampling`, *可选*, 默认为 `self.resample`) — 调整图像大小时要使用的
    PILImageResampling 过滤器。仅在 `do_resize` 设置为 `True` 时有效。'
- en: '`do_center_crop` (`bool`, *optional*, defaults to `self.do_center_crop`) —
    Whether to center crop the image.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_center_crop` (`bool`, *可选*, 默认为 `self.do_center_crop`) — 是否对图像进行中心裁剪。'
- en: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `self.crop_size`) —
    Size of the image after center crop. If one edge the image is smaller than `crop_size`,
    it will be padded with zeros and then cropped'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crop_size` (`Dict[str, int]`, *可选*, 默认为 `self.crop_size`) — 居中裁剪后的图像大小。如果图像的一条边小于
    `crop_size`，则会用零填充，然后裁剪。'
- en: '`do_rescale` (`bool`, *optional*, defaults to `self.do_rescale`) — Whether
    to rescale the image values between [0 - 1].'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale` (`bool`, *可选*, 默认为 `self.do_rescale`) — 是否将图像值重新缩放在 [0 - 1] 之间。'
- en: '`rescale_factor` (`float`, *optional*, defaults to `self.rescale_factor`) —
    Rescale factor to rescale the image by if `do_rescale` is set to `True`.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor` (`float`, *可选*, 默认为 `self.rescale_factor`) — 如果 `do_rescale`
    设置为 `True`，则重新缩放图像的重新缩放因子。'
- en: '`rescale_offset` (`bool`, *optional*, defaults to `self.rescale_offset`) —
    Whether to rescale the image between [-scale_range, scale_range] instead of [0,
    scale_range].'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_offset` (`bool`, *可选*, 默认为 `self.rescale_offset`) — 是否将图像重新缩放在 [-scale_range,
    scale_range] 范围内，而不是 [0, scale_range]。'
- en: '`do_normalize` (`bool`, *optional*, defaults to `self.do_normalize`) — Whether
    to normalize the image.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize` (`bool`, *可选*, 默认为 `self.do_normalize`) — 是否对图像进行归一化。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `self.image_mean`)
    — Image mean.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean` (`float` 或 `List[float]`, *可选*, 默认为 `self.image_mean`) — 图像均值。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `self.image_std`)
    — Image standard deviation.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` 或 `List[float]`, *可选*, 默认为 `self.image_std`) — 图像标准差。'
- en: '`include_top` (`bool`, *optional*, defaults to `self.include_top`) — Rescales
    the image again for image classification if set to True.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_top` (`bool`, *可选*, 默认为 `self.include_top`) — 如果设置为 True，则再次对图像进行图像分类的重新缩放。'
- en: '`return_tensors` (`str` or `TensorType`, *optional*) — The type of tensors
    to return. Can be one of:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors` (`str` 或 `TensorType`, *可选*) — 要返回的张量类型。可以是以下之一：'
- en: '`None`: Return a list of `np.ndarray`.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`None`: 返回一个 `np.ndarray` 列表。'
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.TENSORFLOW` 或 `''tf''`: 返回类型为 `tf.Tensor` 的批次。'
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.PYTORCH` 或 `''pt''`: 返回类型为 `torch.Tensor` 的批次。'
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.NUMPY` 或 `''np''`: 返回类型为 `np.ndarray` 的批次。'
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.JAX` 或 `''jax''`: 返回类型为 `jax.numpy.ndarray` 的批次。'
- en: '`data_format` (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`)
    — The channel dimension format for the output image. Can be one of:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_format` (`ChannelDimension` 或 `str`, *可选*, 默认为 `ChannelDimension.FIRST`)
    — 输出图像的通道维度格式。可以是以下之一：'
- en: '`ChannelDimension.FIRST`: image in (num_channels, height, width) format.'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ChannelDimension.FIRST`: 图像格式为 (通道数, 高度, 宽度)。'
- en: '`ChannelDimension.LAST`: image in (height, width, num_channels) format.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ChannelDimension.LAST`: 图像格式为 (高度, 宽度, 通道数)。'
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) — The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_data_format` (`ChannelDimension` 或 `str`, *可选*) — 输入图像的通道维度格式。如果未设置，则从输入图像中推断通道维度格式。可以是以下之一：'
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_first"` 或 `ChannelDimension.FIRST`: 图像格式为 (通道数, 高度, 宽度)。'
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_last"` 或 `ChannelDimension.LAST`: 图像格式为 (高度, 宽度, 通道数)。'
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"none"` 或 `ChannelDimension.NONE`: 图像格式为 (高度, 宽度)。'
- en: Preprocess an image or batch of images.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理一个图像或一批图像。
- en: EfficientNetModel
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EfficientNetModel
- en: '### `class transformers.EfficientNetModel`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.EfficientNetModel`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/modeling_efficientnet.py#L503)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/modeling_efficientnet.py#L503)'
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([EfficientNetConfig](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`（[EfficientNetConfig](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetConfig)）-
    模型的配置类，包含模型的所有参数。使用配置文件初始化不会加载与模型相关的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: The bare EfficientNet model outputting raw features without any specific head
    on top. This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 裸的EfficientNet模型输出原始特征，没有特定的头部。这个模型是PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规的PyTorch模块，并参考PyTorch文档以获取与一般用法和行为相关的所有信息。
- en: '#### `forward`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/modeling_efficientnet.py#L525)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/modeling_efficientnet.py#L525)'
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See `AutoImageProcessor.__call__()` for details.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values`（`torch.FloatTensor`，形状为`(batch_size, num_channels, height, width)`）-
    像素值。像素值可以使用[AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor)获取。有关详细信息，请参阅`AutoImageProcessor.__call__()`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states`（`bool`，*可选*）- 是否返回所有层的隐藏状态。有关更多详细信息，请参阅返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict`（`bool`，*可选*）- 是否返回一个[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是一个普通元组。'
- en: Returns
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention` or
    `tuple(torch.FloatTensor)`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention`或`tuple(torch.FloatTensor)`'
- en: A `transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention` or
    a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([EfficientNetConfig](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetConfig))
    and inputs.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention`或一个`torch.FloatTensor`元组（如果传递了`return_dict=False`或`config.return_dict=False`时）包含根据配置（[EfficientNetConfig](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetConfig)）和输入的各种元素。
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Sequence of hidden-states at the output of the last layer of
    the model.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_hidden_state`（`torch.FloatTensor`，形状为`(batch_size, num_channels, height,
    width)`）- 模型最后一层输出的隐藏状态序列。'
- en: '`pooler_output` (`torch.FloatTensor` of shape `(batch_size, hidden_size)`)
    — Last layer hidden-state after a pooling operation on the spatial dimensions.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pooler_output`（`torch.FloatTensor`，形状为`(batch_size, hidden_size)`）- 在空间维度上进行池化操作后的最后一层隐藏状态。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, num_channels, height,
    width)`.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states`（`tuple(torch.FloatTensor)`，*可选*，当传递`output_hidden_states=True`或`config.output_hidden_states=True`时返回）-
    形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`元组（如果模型有嵌入层，则为嵌入的输出+每一层的输出）。'
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模型在每一层输出的隐藏状态加上可选的初始嵌入输出。
- en: The [EfficientNetModel](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetModel)
    forward method, overrides the `__call__` special method.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[EfficientNetModel](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetModel)的前向方法，覆盖`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的步骤需要在此函数内定义，但应该在此之后调用`Module`实例，而不是在此处调用，因为前者会处理运行前后处理步骤，而后者会默默地忽略它们。
- en: 'Example:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: EfficientNetForImageClassification
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EfficientNetForImageClassification
- en: '### `class transformers.EfficientNetForImageClassification`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.EfficientNetForImageClassification`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/modeling_efficientnet.py#L570)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/modeling_efficientnet.py#L570)'
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([EfficientNetConfig](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config` ([EfficientNetConfig](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetConfig))
    — 包含模型所有参数的模型配置类。使用配置文件初始化不会加载与模型相关的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: EfficientNet Model with an image classification head on top (a linear layer
    on top of the pooled features), e.g. for ImageNet.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部带有图像分类头部的EfficientNet模型（在池化特征的顶部有一个线性层），例如用于ImageNet。
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型是PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规PyTorch模块，并参考PyTorch文档以获取有关一般用法和行为的所有相关信息。
- en: '#### `forward`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/modeling_efficientnet.py#L590)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/efficientnet/modeling_efficientnet.py#L590)'
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Parameters
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See `AutoImageProcessor.__call__()` for details.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — 像素值。可以使用[AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor)获取像素值。查看`AutoImageProcessor.__call__()`获取详细信息。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`, *可选*) — 是否返回所有层的隐藏状态。查看返回张量中的`hidden_states`以获取更多详细信息。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *可选*) — 是否返回[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是普通元组。'
- en: '`labels` (`torch.LongTensor` of shape `(batch_size,)`, *optional*) — Labels
    for computing the image classification/regression loss. Indices should be in `[0,
    ..., config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is
    computed (Mean-Square loss), If `config.num_labels > 1` a classification loss
    is computed (Cross-Entropy).'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labels` (`torch.LongTensor` of shape `(batch_size,)`, *可选*) — 用于计算图像分类/回归损失的标签。索引应在`[0,
    ..., config.num_labels - 1]`范围内。如果`config.num_labels == 1`，则计算回归损失（均方损失），如果`config.num_labels
    > 1`，则计算分类损失（交叉熵）。'
- en: Returns
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or `tuple(torch.FloatTensor)`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    或 `tuple(torch.FloatTensor)`'
- en: A [transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([EfficientNetConfig](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetConfig))
    and inputs.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '一个[transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)或一个`torch.FloatTensor`元组（如果传递`return_dict=False`或`config.return_dict=False`时）包含各种元素，取决于配置（[EfficientNetConfig](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetConfig)）和输入。 '
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Classification (or regression if config.num_labels==1) loss.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss` (`torch.FloatTensor` of shape `(1,)`, *可选*, 当提供`labels`时返回) — 分类（如果`config.num_labels==1`则为回归）损失。'
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`) —
    Classification (or regression if config.num_labels==1) scores (before SoftMax).'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`) —
    分类（如果`config.num_labels==1`则为回归）得分（SoftMax之前）。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each stage) of shape `(batch_size, num_channels, height,
    width)`. Hidden-states (also called feature maps) of the model at the output of
    each stage.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states` (`tuple(torch.FloatTensor)`, *可选*, 当传递`output_hidden_states=True`或`config.output_hidden_states=True`时返回)
    — 形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`元组。模型在每个阶段输出的隐藏状态（也称为特征图）。'
- en: The [EfficientNetForImageClassification](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetForImageClassification)
    forward method, overrides the `__call__` special method.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[EfficientNetForImageClassification](/docs/transformers/v4.37.2/en/model_doc/efficientnet#transformers.EfficientNetForImageClassification)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传播的步骤需要在此函数内定义，但应该在之后调用`Module`实例，而不是在此处调用，因为前者会处理运行前后的处理步骤，而后者会默默地忽略它们。
- en: 'Example:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
