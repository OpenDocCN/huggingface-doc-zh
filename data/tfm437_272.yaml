- en: LeViT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LeViT
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/levit](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/levit)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/levit](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/levit)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'The LeViT model was proposed in [LeViT: Introducing Convolutions to Vision
    Transformers](https://arxiv.org/abs/2104.01136) by Ben Graham, Alaaeldin El-Nouby,
    Hugo Touvron, Pierre Stock, Armand Joulin, Hervé Jégou, Matthijs Douze. LeViT
    improves the [Vision Transformer (ViT)](vit) in performance and efficiency by
    a few architectural differences such as activation maps with decreasing resolutions
    in Transformers and the introduction of an attention bias to integrate positional
    information.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 'LeViT模型是由Ben Graham，Alaaeldin El-Nouby，Hugo Touvron，Pierre Stock，Armand Joulin，Hervé
    Jégou，Matthijs Douze在[LeViT: Introducing Convolutions to Vision Transformers](https://arxiv.org/abs/2104.01136)中提出的。LeViT通过一些架构上的差异来提高[视觉Transformer（ViT）](vit)的性能和效率，例如在Transformer中使用分辨率递减的激活图以及引入注意偏置以整合位置信息。'
- en: 'The abstract from the paper is the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 论文摘要如下：
- en: '*We design a family of image classification architectures that optimize the
    trade-off between accuracy and efficiency in a high-speed regime. Our work exploits
    recent findings in attention-based architectures, which are competitive on highly
    parallel processing hardware. We revisit principles from the extensive literature
    on convolutional neural networks to apply them to transformers, in particular
    activation maps with decreasing resolutions. We also introduce the attention bias,
    a new way to integrate positional information in vision transformers. As a result,
    we propose LeVIT: a hybrid neural network for fast inference image classification.
    We consider different measures of efficiency on different hardware platforms,
    so as to best reflect a wide range of application scenarios. Our extensive experiments
    empirically validate our technical choices and show they are suitable to most
    architectures. Overall, LeViT significantly outperforms existing convnets and
    vision transformers with respect to the speed/accuracy tradeoff. For example,
    at 80% ImageNet top-1 accuracy, LeViT is 5 times faster than EfficientNet on CPU.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们设计了一系列图像分类架构，优化了在高速环境中准确性和效率之间的权衡。我们的工作利用了最近在基于注意力的架构中的发现，这些架构在高度并行处理硬件上具有竞争力。我们重新审视了卷积神经网络的广泛文献中的原则，将它们应用于Transformer，特别是使用分辨率递减的激活图。我们还引入了注意偏置，一种将位置信息整合到视觉Transformer中的新方法。因此，我们提出了LeVIT：一个用于快速推理图像分类的混合神经网络。我们考虑在不同硬件平台上的不同效率措施，以最好地反映各种应用场景。我们的广泛实验证明了我们的技术选择，并表明它们适用于大多数架构。总体而言，LeViT在速度/准确性权衡方面明显优于现有的卷积网络和视觉Transformer。例如，在80%的ImageNet
    top-1准确率下，LeViT比EfficientNet在CPU上快5倍。*'
- en: '![drawing](../Images/79a4bb02ada009fb7b657999872ea7e3.png) LeViT Architecture.
    Taken from the [original paper](https://arxiv.org/abs/2104.01136).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![drawing](../Images/79a4bb02ada009fb7b657999872ea7e3.png) LeViT架构。摘自[原始论文](https://arxiv.org/abs/2104.01136)。'
- en: This model was contributed by [anugunj](https://huggingface.co/anugunj). The
    original code can be found [here](https://github.com/facebookresearch/LeViT).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型由[anugunj](https://huggingface.co/anugunj)贡献。原始代码可以在[这里](https://github.com/facebookresearch/LeViT)找到。
- en: Usage tips
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用提示
- en: Compared to ViT, LeViT models use an additional distillation head to effectively
    learn from a teacher (which, in the LeViT paper, is a ResNet like-model). The
    distillation head is learned through backpropagation under supervision of a ResNet
    like-model. They also draw inspiration from convolution neural networks to use
    activation maps with decreasing resolutions to increase the efficiency.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与ViT相比，LeViT模型使用额外的蒸馏头来有效地从教师（在LeViT论文中是类似ResNet的模型）中学习。蒸馏头通过在类似ResNet的模型的监督下进行反向传播来学习。他们还从卷积神经网络中汲取灵感，使用分辨率递减的激活图来提高效率。
- en: There are 2 ways to fine-tune distilled models, either (1) in a classic way,
    by only placing a prediction head on top of the final hidden state and not using
    the distillation head, or (2) by placing both a prediction head and distillation
    head on top of the final hidden state. In that case, the prediction head is trained
    using regular cross-entropy between the prediction of the head and the ground-truth
    label, while the distillation prediction head is trained using hard distillation
    (cross-entropy between the prediction of the distillation head and the label predicted
    by the teacher). At inference time, one takes the average prediction between both
    heads as final prediction. (2) is also called “fine-tuning with distillation”,
    because one relies on a teacher that has already been fine-tuned on the downstream
    dataset. In terms of models, (1) corresponds to [LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)
    and (2) corresponds to [LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于精炼模型，有两种微调方法，要么（1）以经典方式，只在最终隐藏状态的顶部放置一个预测头，不使用蒸馏头，要么（2）在最终隐藏状态的顶部放置预测头和蒸馏头。在这种情况下，预测头使用正常的交叉熵训练，预测头和地面真实标签之间的交叉熵，而蒸馏预测头使用硬蒸馏（蒸馏头的预测和教师预测的标签之间的交叉熵）。在推理时，将两个头之间的平均预测作为最终预测。（2）也被称为“蒸馏微调”，因为依赖于已经在下游数据集上进行了微调的教师。在模型方面，（1）对应于[LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)，（2）对应于[LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher)。
- en: All released checkpoints were pre-trained and fine-tuned on [ImageNet-1k](https://huggingface.co/datasets/imagenet-1k)
    (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000
    classes). only. No external data was used. This is in contrast with the original
    ViT model, which used external data like the JFT-300M dataset/Imagenet-21k for
    pre-training.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有发布的检查点都是在 [ImageNet-1k](https://huggingface.co/datasets/imagenet-1k) 上进行了预训练和微调（也称为
    ILSVRC 2012，包含 130 万张图像和 1,000 个类别）。没有使用外部数据。这与原始的 ViT 模型相反，后者在预训练中使用了外部数据，如 JFT-300M
    数据集/Imagenet-21k。
- en: 'The authors of LeViT released 5 trained LeViT models, which you can directly
    plug into [LevitModel](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitModel)
    or [LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification).
    Techniques like data augmentation, optimization, and regularization were used
    in order to simulate training on a much larger dataset (while only using ImageNet-1k
    for pre-training). The 5 variants available are (all trained on images of size
    224x224): *facebook/levit-128S*, *facebook/levit-128*, *facebook/levit-192*, *facebook/levit-256*
    and *facebook/levit-384*. Note that one should use [LevitImageProcessor](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitImageProcessor)
    in order to prepare images for the model.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LeViT 的作者发布了 5 个经过训练的 LeViT 模型，您可以直接插入 [LevitModel](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitModel)
    或 [LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)。为了模拟在更大数据集上训练（仅使用
    ImageNet-1k 进行预训练），使用了数据增强、优化和正则化等技术。可用的 5 个变体是（都在大小为 224x224 的图像上训练）：*facebook/levit-128S*、*facebook/levit-128*、*facebook/levit-192*、*facebook/levit-256*
    和 *facebook/levit-384*。请注意，应该使用 [LevitImageProcessor](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitImageProcessor)
    来准备模型的图像。
- en: '[LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher)
    currently supports only inference and not training or fine-tuning.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher)
    目前仅支持推理，不支持训练或微调。'
- en: You can check out demo notebooks regarding inference as well as fine-tuning
    on custom data [here](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/VisionTransformer)
    (you can just replace [ViTFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/vit#transformers.ViTFeatureExtractor)
    by [LevitImageProcessor](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitImageProcessor)
    and [ViTForImageClassification](/docs/transformers/v4.37.2/en/model_doc/vit#transformers.ViTForImageClassification)
    by [LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)
    or [LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher)).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以查看关于推理以及在自定义数据上进行微调的演示笔记本 [这里](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/VisionTransformer)（您只需将
    [ViTFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/vit#transformers.ViTFeatureExtractor)
    替换为 [LevitImageProcessor](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitImageProcessor)，并将
    [ViTForImageClassification](/docs/transformers/v4.37.2/en/model_doc/vit#transformers.ViTForImageClassification)
    替换为 [LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)
    或 [LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher)）。
- en: Resources
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: A list of official Hugging Face and community (indicated by 🌎) resources to
    help you get started with LeViT.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个官方 Hugging Face 和社区（由 🌎 表示）资源列表，帮助您开始使用 LeViT。
- en: Image Classification
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图像分类
- en: '[LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)
    is supported by this [example script](https://github.com/huggingface/transformers/tree/main/examples/pytorch/image-classification)
    and [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification.ipynb).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)
    受到这个 [示例脚本](https://github.com/huggingface/transformers/tree/main/examples/pytorch/image-classification)
    和 [笔记本](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification.ipynb)
    的支持。'
- en: 'See also: [Image classification task guide](../tasks/image_classification)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见：[图像分类任务指南](../tasks/image_classification)
- en: If you’re interested in submitting a resource to be included here, please feel
    free to open a Pull Request and we’ll review it! The resource should ideally demonstrate
    something new instead of duplicating an existing resource.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣提交资源以包含在此处，请随时打开一个 Pull Request，我们将对其进行审查！资源应该展示一些新东西，而不是重复现有资源。
- en: LevitConfig
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LevitConfig
- en: '### `class transformers.LevitConfig`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.LevitConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/configuration_levit.py#L35)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/configuration_levit.py#L35)'
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`image_size` (`int`, *optional*, defaults to 224) — The size of the input image.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_size` (`int`, *optional*, defaults to 224) — 输入图像的大小。'
- en: '`num_channels` (`int`, *optional*, defaults to 3) — Number of channels in the
    input image.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_channels` (`int`, *optional*, defaults to 3) — 输入图像中的通道数。'
- en: '`kernel_size` (`int`, *optional*, defaults to 3) — The kernel size for the
    initial convolution layers of patch embedding.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kernel_size` (`int`, *optional*, defaults to 3) — 补丁嵌入的初始卷积层的内核大小。'
- en: '`stride` (`int`, *optional*, defaults to 2) — The stride size for the initial
    convolution layers of patch embedding.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stride` (`int`, *optional*, defaults to 2) — 补丁嵌入的初始卷积层的步幅大小。'
- en: '`padding` (`int`, *optional*, defaults to 1) — The padding size for the initial
    convolution layers of patch embedding.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding` (`int`, *optional*, defaults to 1) — 补丁嵌入的初始卷积层的填充大小。'
- en: '`patch_size` (`int`, *optional*, defaults to 16) — The patch size for embeddings.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`patch_size` (`int`, *optional*, defaults to 16) — 嵌入的补丁大小。'
- en: '`hidden_sizes` (`List[int]`, *optional*, defaults to `[128, 256, 384]`) — Dimension
    of each of the encoder blocks.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_sizes` (`List[int]`, *optional*, defaults to `[128, 256, 384]`) — 每个编码器块的维度。'
- en: '`num_attention_heads` (`List[int]`, *optional*, defaults to `[4, 8, 12]`) —
    Number of attention heads for each attention layer in each block of the Transformer
    encoder.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_attention_heads` (`List[int]`, *可选*, 默认为 `[4, 8, 12]`) — Transformer编码器每个块中每个注意力层的注意力头数。'
- en: '`depths` (`List[int]`, *optional*, defaults to `[4, 4, 4]`) — The number of
    layers in each encoder block.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`depths` (`List[int]`, *可选*, 默认为 `[4, 4, 4]`) — 每个编码器块中的层数。'
- en: '`key_dim` (`List[int]`, *optional*, defaults to `[16, 16, 16]`) — The size
    of key in each of the encoder blocks.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key_dim` (`List[int]`, *可选*, 默认为 `[16, 16, 16]`) — 每个编码器块中键的大小。'
- en: '`drop_path_rate` (`int`, *optional*, defaults to 0) — The dropout probability
    for stochastic depths, used in the blocks of the Transformer encoder.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drop_path_rate` (`int`, *可选*, 默认为 0) — 用于随机深度的丢弃概率，用于Transformer编码器块中的块。'
- en: '`mlp_ratios` (`List[int]`, *optional*, defaults to `[2, 2, 2]`) — Ratio of
    the size of the hidden layer compared to the size of the input layer of the Mix
    FFNs in the encoder blocks.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mlp_ratios` (`List[int]`, *可选*, 默认为 `[2, 2, 2]`) — 编码器块中Mix FFNs的隐藏层大小与输入层大小的比率。'
- en: '`attention_ratios` (`List[int]`, *optional*, defaults to `[2, 2, 2]`) — Ratio
    of the size of the output dimension compared to input dimension of attention layers.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_ratios` (`List[int]`, *可选*, 默认为 `[2, 2, 2]`) — 注意力层的输出维度与输入维度的比率。'
- en: '`initializer_range` (`float`, *optional*, defaults to 0.02) — The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_range` (`float`, *可选*, 默认为 0.02) — 用于初始化所有权重矩阵的截断正态初始化器的标准差。'
- en: This is the configuration class to store the configuration of a [LevitModel](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitModel).
    It is used to instantiate a LeViT model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the LeViT [facebook/levit-128S](https://huggingface.co/facebook/levit-128S)
    architecture.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个配置类，用于存储[LevitModel](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitModel)的配置。根据指定的参数实例化一个LeViT模型，定义模型架构。使用默认值实例化配置将产生类似于LeViT
    [facebook/levit-128S](https://huggingface.co/facebook/levit-128S)架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)的文档以获取更多信息。
- en: 'Example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '示例:'
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: LevitFeatureExtractor
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LevitFeatureExtractor
- en: '### `class transformers.LevitFeatureExtractor`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.LevitFeatureExtractor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/feature_extraction_levit.py#L26)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/feature_extraction_levit.py#L26)'
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '#### `__call__`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `__call__`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Preprocess an image or a batch of images.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理图像或一批图像。
- en: LevitImageProcessor
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LevitImageProcessor
- en: '### `class transformers.LevitImageProcessor`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.LevitImageProcessor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/image_processing_levit.py#L45)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/image_processing_levit.py#L45)'
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) — Wwhether to resize the
    shortest edge of the input to int(256/224 *`size`). Can be overridden by the `do_resize`
    parameter in the `preprocess` method.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`, *可选*, 默认为 `True`) — 是否将输入的最短边调整为int(256/224 *`size`)。可以被`preprocess`方法中的`do_resize`参数覆盖。'
- en: '`size` (`Dict[str, int]`, *optional*, defaults to `{"shortest_edge" -- 224}`):
    Size of the output image after resizing. If size is a dict with keys “width” and
    “height”, the image will be resized to `(size["height"], size["width"])`. If size
    is a dict with key “shortest_edge”, the shortest edge value `c` is rescaled to
    `int(c * (256/224))`. The smaller edge of the image will be matched to this value
    i.e, if height > width, then image will be rescaled to `(size["shortest_egde"]
    * height / width, size["shortest_egde"])`. Can be overridden by the `size` parameter
    in the `preprocess` method.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]`, *可选*, 默认为 `{"shortest_edge" -- 224}`): 调整大小后的输出图像大小。如果size是一个带有“width”和“height”键的字典，则图像将被调整为`(size["height"],
    size["width"])`。如果size是一个带有“shortest_edge”键的字典，则最短边值`c`将被重新缩放为`int(c * (256/224))`。图像的较小边将匹配到这个值，即如果高度>宽度，则图像将被重新缩放为`(size["shortest_egde"]
    * height / width, size["shortest_egde"])`。可以被`preprocess`方法中的`size`参数覆盖。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `Resampling.BICUBIC`)
    — Resampling filter to use if resizing the image. Can be overridden by the `resample`
    parameter in the `preprocess` method.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`PILImageResampling`, *可选*, 默认为 `Resampling.BICUBIC`) — 如果调整图像大小，则要使用的重采样滤镜。可以被`preprocess`方法中的`resample`参数覆盖。'
- en: '`do_center_crop` (`bool`, *optional*, defaults to `True`) — Whether or not
    to center crop the input to `(crop_size["height"], crop_size["width"])`. Can be
    overridden by the `do_center_crop` parameter in the `preprocess` method.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_center_crop` (`bool`, *可选*, 默认为 `True`) — 是否对输入进行中心裁剪为`(crop_size["height"],
    crop_size["width"])`。可以被`preprocess`方法中的`do_center_crop`参数覆盖。'
- en: '`crop_size` (`Dict`, *optional*, defaults to `{"height" -- 224, "width": 224}`):
    Desired image size after `center_crop`. Can be overridden by the `crop_size` parameter
    in the `preprocess` method.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crop_size` (`Dict`, *可选*, 默认为 `{"height" -- 224, "width": 224}`): `center_crop`后的期望图像大小。可以被`preprocess`方法中的`crop_size`参数覆盖。'
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) — Controls whether to
    rescale the image by the specified scale `rescale_factor`. Can be overridden by
    the `do_rescale` parameter in the `preprocess` method.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale`（`bool`，*可选*，默认为`True`）— 控制是否通过指定的比例`rescale_factor`重新缩放图像。可以被`preprocess`方法中的`do_rescale`参数覆盖。'
- en: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) — Scale
    factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor`（`int`或`float`，*可选*，默认为`1/255`）— 如果重新缩放图像，则使用的比例因子。可以被`preprocess`方法中的`rescale_factor`参数覆盖。'
- en: '`do_normalize` (`bool`, *optional*, defaults to `True`) — Controls whether
    to normalize the image. Can be overridden by the `do_normalize` parameter in the
    `preprocess` method.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize`（`bool`，*可选*，默认为`True`）— 控制是否对图像进行归一化。可以被`preprocess`方法中的`do_normalize`参数覆盖。'
- en: '`image_mean` (`List[int]`, *optional*, defaults to `[0.485, 0.456, 0.406]`)
    — Mean to use if normalizing the image. This is a float or list of floats the
    length of the number of channels in the image. Can be overridden by the `image_mean`
    parameter in the `preprocess` method.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean`（`List[int]`，*可选*，默认为`[0.485, 0.456, 0.406]`）— 如果要归一化图像，则使用的均值。这是一个浮点数或与图像通道数相同长度的浮点数列表。可以被`preprocess`方法中的`image_mean`参数覆盖。'
- en: '`image_std` (`List[int]`, *optional*, defaults to `[0.229, 0.224, 0.225]`)
    — Standard deviation to use if normalizing the image. This is a float or list
    of floats the length of the number of channels in the image. Can be overridden
    by the `image_std` parameter in the `preprocess` method.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std`（`List[int]`，*可选*，默认为`[0.229, 0.224, 0.225]`）— 如果要归一化图像，则使用的标准差。这是一个浮点数或与图像通道数相同长度的浮点数列表。可以被`preprocess`方法中的`image_std`参数覆盖。'
- en: Constructs a LeViT image processor.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个LeViT图像处理器。
- en: '#### `preprocess`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `preprocess`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/image_processing_levit.py#L173)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/image_processing_levit.py#L173)'
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`images` (`ImageInput`) — Image or batch of images to preprocess. Expects a
    single or batch of images with pixel values ranging from 0 to 255\. If passing
    in images with pixel values between 0 and 1, set `do_rescale=False`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images`（`ImageInput`）— 要预处理的图像或图像批处理。期望单个或批处理的图像，像素值范围从0到255。如果传入像素值在0到1之间的图像，请设置`do_rescale=False`。'
- en: '`do_resize` (`bool`, *optional*, defaults to `self.do_resize`) — Whether to
    resize the image.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize`（`bool`，*可选*，默认为`self.do_resize`）— 是否调整图像大小。'
- en: '`size` (`Dict[str, int]`, *optional*, defaults to `self.size`) — Size of the
    output image after resizing. If size is a dict with keys “width” and “height”,
    the image will be resized to (height, width). If size is a dict with key “shortest_edge”,
    the shortest edge value `c` is rescaled to int(`c` *(256/224)). The smaller edge
    of the image will be matched to this value i.e, if height > width, then image
    will be rescaled to (size* height / width, size).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`（`Dict[str, int]`，*可选*，默认为`self.size`）— 调整大小后的输出图像大小。如果大小是一个带有“宽度”和“高度”键的字典，则图像将被调整为（高度，宽度）。如果大小是一个带有“最短边”键的字典，则最短边值`c`将被重新缩放为int（`c`
    *（256/224））。图像的较小边将与此值匹配，即，如果高度>宽度，则图像将被重新缩放为（大小*高度/宽度，大小）。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `PILImageResampling.BICUBIC`)
    — Resampling filter to use when resiizing the image.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample`（`PILImageResampling`，*可选*，默认为`PILImageResampling.BICUBIC`）— 调整图像大小时要使用的重采样滤波器。'
- en: '`do_center_crop` (`bool`, *optional*, defaults to `self.do_center_crop`) —
    Whether to center crop the image.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_center_crop`（`bool`，*可选*，默认为`self.do_center_crop`）— 是否对图像进行中心裁剪。'
- en: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `self.crop_size`) —
    Size of the output image after center cropping. Crops images to (crop_size[“height”],
    crop_size[“width”]).'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crop_size`（`Dict[str, int]`，*可选*，默认为`self.crop_size`）— 中心裁剪后的输出图像大小。将图像裁剪为（crop_size[“height”]，crop_size[“width”]）。'
- en: '`do_rescale` (`bool`, *optional*, defaults to `self.do_rescale`) — Whether
    to rescale the image pixel values by `rescaling_factor` - typical to values between
    0 and 1.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale`（`bool`，*可选*，默认为`self.do_rescale`）— 是否通过指定的比例`rescale_factor`重新缩放图像像素值-通常为0到1之间的值。'
- en: '`rescale_factor` (`float`, *optional*, defaults to `self.rescale_factor`) —
    Factor to rescale the image pixel values by.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor`（`float`，*可选*，默认为`self.rescale_factor`）— 用于重新缩放图像像素值的因子。'
- en: '`do_normalize` (`bool`, *optional*, defaults to `self.do_normalize`) — Whether
    to normalize the image pixel values by `image_mean` and `image_std`.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize`（`bool`，*可选*，默认为`self.do_normalize`）— 是否通过`image_mean`和`image_std`对图像像素值进行归一化。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `self.image_mean`)
    — Mean to normalize the image pixel values by.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean`（`float`或`List[float]`，*可选*，默认为`self.image_mean`）— 用于归一化图像像素值的均值。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `self.image_std`)
    — Standard deviation to normalize the image pixel values by.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std`（`float`或`List[float]`，*可选*，默认为`self.image_std`）— 用于归一化图像像素值的标准差。'
- en: '`return_tensors` (`str` or `TensorType`, *optional*) — The type of tensors
    to return. Can be one of:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors`（`str`或`TensorType`，*可选*）— 要返回的张量类型。可以是以下之一：'
- en: 'Unset: Return a list of `np.ndarray`.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消设置：返回一个`np.ndarray`列表。
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.TENSORFLOW`或`''tf''`：返回类型为`tf.Tensor`的批处理。'
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.PYTORCH`或`''pt''`：返回类型为`torch.Tensor`的批处理。'
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.NUMPY`或`''np''`：返回类型为`np.ndarray`的批处理。'
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.JAX`或`''jax''`：返回类型为`jax.numpy.ndarray`的批处理。'
- en: '`data_format` (`str` or `ChannelDimension`, *optional*, defaults to `ChannelDimension.FIRST`)
    — The channel dimension format for the output image. If unset, the channel dimension
    format of the input image is used. Can be one of:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_format`（`str`或`ChannelDimension`，*可选*，默认为`ChannelDimension.FIRST`）— 输出图像的通道维度格式。如果未设置，则使用输入图像的通道维度格式。可以是以下之一：'
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_first"`或`ChannelDimension.FIRST`：图像以(num_channels, height, width)格式。'
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_last"`或`ChannelDimension.LAST`：图像以(height, width, num_channels)格式。'
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) — The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_data_format`（`ChannelDimension`或`str`，*可选*）— 输入图像的通道维度格式。如果未设置，则从输入图像中推断通道维度格式。可以是以下之一：'
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_first"`或`ChannelDimension.FIRST`：图像以(num_channels, height, width)格式。'
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_last"`或`ChannelDimension.LAST`：图像以(height, width, num_channels)格式。'
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"none"`或`ChannelDimension.NONE`：图像以(height, width)格式。'
- en: Preprocess an image or batch of images to be used as input to a LeViT model.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对图像或图像批次进行预处理，以用作LeViT模型的输入。
- en: LevitModel
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LevitModel
- en: '### `class transformers.LevitModel`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.LevitModel`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L535)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L535)'
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`（[LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig)）—
    具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型关联的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: The bare Levit model outputting raw features without any specific head on top.
    This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 裸的Levit模型输出原始特征，没有任何特定的头部。此模型是PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规PyTorch模块，并参考PyTorch文档以获取有关一般用法和行为的所有信息。
- en: '#### `forward`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L548)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L548)'
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [LevitImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values`（形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`）—
    像素值。可以使用[AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor)获取像素值。有关详细信息，请参阅[LevitImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states`（`bool`，*可选*）— 是否返回所有层的隐藏状态。有关更多详细信息，请参阅返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict`（`bool`，*可选*）— 是否返回[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是普通元组。'
- en: Returns
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention` or
    `tuple(torch.FloatTensor)`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention`或`tuple(torch.FloatTensor)`'
- en: A `transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention` or
    a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    and inputs.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention`或一个`torch.FloatTensor`元组（如果传递了`return_dict=False`或当`config.return_dict=False`时）包含各种元素，具体取决于配置（[LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig)）和输入。
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Sequence of hidden-states at the output of the last layer of
    the model.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_hidden_state`（形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`）—
    模型最后一层的隐藏状态序列。'
- en: '`pooler_output` (`torch.FloatTensor` of shape `(batch_size, hidden_size)`)
    — Last layer hidden-state after a pooling operation on the spatial dimensions.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pooler_output`（形状为`(batch_size, hidden_size)`的`torch.FloatTensor`）— 在空间维度上进行池化操作后的最后一层隐藏状态。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, num_channels, height,
    width)`.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states`（`tuple(torch.FloatTensor)`，*可选*，当传递`output_hidden_states=True`或当`config.output_hidden_states=True`时返回）—
    形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`元组（如果模型具有嵌入层，则为嵌入的输出和每一层的输出）。'
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模型在每一层输出处的隐藏状态以及可选的初始嵌入输出。
- en: The [LevitModel](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitModel)
    forward method, overrides the `__call__` special method.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[LevitModel](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitModel)前向方法，覆盖`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的步骤需要在这个函数内定义，但应该在之后调用`Module`实例，而不是在这里调用，因为前者会处理运行前后处理步骤，而后者会默默地忽略它们。
- en: 'Example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: LevitForImageClassification
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LevitForImageClassification
- en: '### `class transformers.LevitForImageClassification`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.LevitForImageClassification`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L592)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L592)'
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Parameters
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`（[LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig)）
    — 具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型关联的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: Levit Model with an image classification head on top (a linear layer on top
    of the pooled features), e.g. for ImageNet.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Levit模型，顶部带有图像分类头（在池化特征的顶部有一个线性层），例如用于ImageNet。
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型是PyTorch的[torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规的PyTorch模块，并参考PyTorch文档以获取有关一般用法和行为的所有信息。
- en: '#### `forward`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L616)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L616)'
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Parameters
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [LevitImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values`（形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`）
    — 像素值。可以使用[AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor)获取像素值。有关详细信息，请参阅[LevitImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states`（`bool`，*可选*） — 是否返回所有层的隐藏状态。有关更多详细信息，请查看返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict`（`bool`，*可选*） — 是否返回一个[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是一个普通的元组。'
- en: '`labels` (`torch.LongTensor` of shape `(batch_size,)`, *optional*) — Labels
    for computing the image classification/regression loss. Indices should be in `[0,
    ..., config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is
    computed (Mean-Square loss), If `config.num_labels > 1` a classification loss
    is computed (Cross-Entropy).'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labels`（形状为`(batch_size,)`的`torch.LongTensor`，*可选*） — 用于计算图像分类/回归损失的标签。索引应在`[0,
    ..., config.num_labels - 1]`范围内。如果`config.num_labels == 1`，则计算回归损失（均方损失），如果`config.num_labels
    > 1`，则计算分类损失（交叉熵）。'
- en: Returns
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or `tuple(torch.FloatTensor)`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    或 `tuple(torch.FloatTensor)`'
- en: A [transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    and inputs.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)或一个`torch.FloatTensor`元组（如果传递`return_dict=False`或`config.return_dict=False`时）包含各种元素，这取决于配置（[LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig)）和输入。
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Classification (or regression if config.num_labels==1) loss.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss`（形状为`(1,)`的`torch.FloatTensor`，*可选*，在提供`labels`时返回） — 分类（如果`config.num_labels==1`则为回归）损失。'
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`) —
    Classification (or regression if config.num_labels==1) scores (before SoftMax).'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits`（形状为`(batch_size, config.num_labels)`的`torch.FloatTensor`） — 分类（如果`config.num_labels==1`则为回归）得分（SoftMax之前）。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each stage) of shape `(batch_size, num_channels, height,
    width)`. Hidden-states (also called feature maps) of the model at the output of
    each stage.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states`（`tuple(torch.FloatTensor)`，*可选*，当传递`output_hidden_states=True`或`config.output_hidden_states=True`时返回）
    — 形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`元组。模型在每个阶段输出的隐藏状态（也称为特征图）。'
- en: The [LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)
    forward method, overrides the `__call__` special method.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的方法需要在此函数内定义，但应该在之后调用`Module`实例，而不是调用此函数，因为前者会处理运行预处理和后处理步骤，而后者会默默地忽略它们。
- en: 'Example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: LevitForImageClassificationWithTeacher
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LevitForImageClassificationWithTeacher
- en: '### `class transformers.LevitForImageClassificationWithTeacher`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.LevitForImageClassificationWithTeacher`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L677)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L677)'
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Parameters
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`（[LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig)）—
    具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型相关的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: 'LeViT Model transformer with image classification heads on top (a linear layer
    on top of the final hidden state and a linear layer on top of the final hidden
    state of the distillation token) e.g. for ImageNet. .. warning:: This model supports
    inference-only. Fine-tuning with distillation (i.e. with a teacher) is not yet
    supported.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'LeViT模型变压器，顶部带有图像分类头（最终隐藏状态顶部的线性层和蒸馏令牌最终隐藏状态顶部的线性层），例如用于ImageNet。.. 警告:: 此模型仅支持推断。尚不支持使用蒸馏（即使用教师）进行微调。'
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型是PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规PyTorch模块，并参考PyTorch文档以获取有关一般用法和行为的所有相关信息。
- en: '#### `forward`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L708)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L708)'
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Parameters
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [LevitImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values`（形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`）—
    像素值。可以使用[AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor)获取像素值。有关详细信息，请参阅[LevitImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states`（`bool`，*可选*）— 是否返回所有层的隐藏状态。有关更多详细信息，请查看返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict`（`bool`，*可选*）— 是否返回[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是普通元组。'
- en: Returns
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`transformers.models.levit.modeling_levit.LevitForImageClassificationWithTeacherOutput`
    or `tuple(torch.FloatTensor)`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformers.models.levit.modeling_levit.LevitForImageClassificationWithTeacherOutput`或`tuple(torch.FloatTensor)`'
- en: A `transformers.models.levit.modeling_levit.LevitForImageClassificationWithTeacherOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    and inputs.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`transformers.models.levit.modeling_levit.LevitForImageClassificationWithTeacherOutput`或一个`torch.FloatTensor`元组（如果传递了`return_dict=False`或`config.return_dict=False`时）包含各种元素，取决于配置（[LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig)）和输入。
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`) —
    Prediction scores as the average of the `cls_logits` and `distillation_logits`.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits`（形状为`(batch_size, config.num_labels)`的`torch.FloatTensor`）— 预测分数，作为`cls_logits`和`distillation_logits`的平均值。'
- en: '`cls_logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`)
    — Prediction scores of the classification head (i.e. the linear layer on top of
    the final hidden state of the class token).'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cls_logits`（形状为`(batch_size, config.num_labels)`的`torch.FloatTensor`）— 分类头的预测分数（即类令牌最终隐藏状态顶部的线性层）。'
- en: '`distillation_logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`)
    — Prediction scores of the distillation head (i.e. the linear layer on top of
    the final hidden state of the distillation token).'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`distillation_logits`（形状为`(batch_size, config.num_labels)`的`torch.FloatTensor`）—
    蒸馏头的预测分数（即蒸馏令牌最终隐藏状态顶部的线性层）。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings + one for the output of each layer) of shape
    `(batch_size, sequence_length, hidden_size)`. Hidden-states of the model at the
    output of each layer plus the initial embedding outputs.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states` (`tuple(torch.FloatTensor)`, *可选的*，当传递 `output_hidden_states=True`
    或当 `config.output_hidden_states=True` 时返回) — 形状为 `(batch_size, sequence_length,
    hidden_size)` 的 `torch.FloatTensor` 元组（一个用于嵌入的输出 + 一个用于每个层的输出）。模型在每个层的输出以及初始嵌入输出的隐藏状态。'
- en: The [LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher)
    forward method, overrides the `__call__` special method.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher)
    的前向方法，覆盖了 `__call__` 特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的方法需要在这个函数内定义，但应该在此之后调用 `Module` 实例，而不是这个，因为前者负责运行预处理和后处理步骤，而后者则默默地忽略它们。
- en: 'Example:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE14]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
