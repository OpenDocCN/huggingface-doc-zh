- en: DPMSolverMultistepInverse
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DPMSolverMultistepInverse
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/schedulers/multistep_dpm_solver_inverse](https://huggingface.co/docs/diffusers/api/schedulers/multistep_dpm_solver_inverse)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/diffusers/api/schedulers/multistep_dpm_solver_inverse](https://huggingface.co/docs/diffusers/api/schedulers/multistep_dpm_solver_inverse)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '`DPMSolverMultistepInverse` is the inverted scheduler from [DPM-Solver: A Fast
    ODE Solver for Diffusion Probabilistic Model Sampling in Around 10 Steps](https://huggingface.co/papers/2206.00927)
    and [DPM-Solver++: Fast Solver for Guided Sampling of Diffusion Probabilistic
    Models](https://huggingface.co/papers/2211.01095) by Cheng Lu, Yuhao Zhou, Fan
    Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`DPMSolverMultistepInverse`是来自[在大约10步内进行扩散概率模型采样的快速ODE求解器DPM-Solver](https://huggingface.co/papers/2206.00927)和[DPM-Solver++:快速扩散概率模型引导采样求解器](https://huggingface.co/papers/2211.01095)的反演调度器，作者为Cheng
    Lu、Yuhao Zhou、Fan Bao、Jianfei Chen、Chongxuan Li和Jun Zhu。'
- en: The implementation is mostly based on the DDIM inversion definition of [Null-text
    Inversion for Editing Real Images using Guided Diffusion Models](https://huggingface.co/papers/2211.09794)
    and notebook implementation of the `DiffEdit` latent inversion from [Xiang-cd/DiffEdit-stable-diffusion](https://github.com/Xiang-cd/DiffEdit-stable-diffusion/blob/main/diffedit.ipynb).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该实现主要基于[使用引导扩散模型编辑真实图像的Null-text反演](https://huggingface.co/papers/2211.09794)中的DDIM反演定义，以及[Xiang-cd/DiffEdit-stable-diffusion](https://github.com/Xiang-cd/DiffEdit-stable-diffusion/blob/main/diffedit.ipynb)中的`DiffEdit`潜在反演的笔记本实现。
- en: Tips
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示
- en: Dynamic thresholding from [Imagen](https://huggingface.co/papers/2205.11487)
    is supported, and for pixel-space diffusion models, you can set both `algorithm_type="dpmsolver++"`
    and `thresholding=True` to use the dynamic thresholding. This thresholding method
    is unsuitable for latent-space diffusion models such as Stable Diffusion.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 支持来自[Imagen](https://huggingface.co/papers/2205.11487)的动态阈值，对于像素空间扩散模型，您可以设置`algorithm_type="dpmsolver++"`和`thresholding=True`来使用动态阈值。这种阈值方法不适用于像Stable
    Diffusion这样的潜在空间扩散模型。
- en: DPMSolverMultistepInverseScheduler
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DPMSolverMultistepInverseScheduler
- en: '### `class diffusers.DPMSolverMultistepInverseScheduler`'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.DPMSolverMultistepInverseScheduler`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L74)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L74)'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`num_train_timesteps` (`int`, defaults to 1000) — The number of diffusion steps
    to train the model.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_train_timesteps` (`int`, 默认为1000) — 训练模型的扩散步数。'
- en: '`beta_start` (`float`, defaults to 0.0001) — The starting `beta` value of inference.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beta_start` (`float`, 默认为0.0001) — 推断的起始`beta`值。'
- en: '`beta_end` (`float`, defaults to 0.02) — The final `beta` value.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beta_end` (`float`, 默认为0.02) — 最终的`beta`值。'
- en: '`beta_schedule` (`str`, defaults to `"linear"`) — The beta schedule, a mapping
    from a beta range to a sequence of betas for stepping the model. Choose from `linear`,
    `scaled_linear`, or `squaredcos_cap_v2`.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beta_schedule` (`str`, 默认为`"linear"`) — beta调度，从beta范围映射到用于步进模型的一系列beta。可选择`linear`、`scaled_linear`或`squaredcos_cap_v2`。'
- en: '`trained_betas` (`np.ndarray`, *optional*) — Pass an array of betas directly
    to the constructor to bypass `beta_start` and `beta_end`.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trained_betas` (`np.ndarray`, *可选*) — 直接传递一个beta数组给构造函数，以绕过`beta_start`和`beta_end`。'
- en: '`solver_order` (`int`, defaults to 2) — The DPMSolver order which can be `1`
    or `2` or `3`. It is recommended to use `solver_order=2` for guided sampling,
    and `solver_order=3` for unconditional sampling.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solver_order` (`int`, 默认为2) — DPMSolver的阶数，可以是`1`、`2`或`3`。建议在引导采样时使用`solver_order=2`，在无条件采样时使用`solver_order=3`。'
- en: '`prediction_type` (`str`, defaults to `epsilon`, *optional*) — Prediction type
    of the scheduler function; can be `epsilon` (predicts the noise of the diffusion
    process), `sample` (directly predicts the noisy sample`) or` v_prediction` (see
    section 2.4 of [Imagen Video](https://imagen.research.google/video/paper.pdf)
    paper).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prediction_type` (`str`, 默认为`epsilon`, *可选*) — 调度器函数的预测类型；可以是`epsilon`（预测扩散过程的噪声）、`sample`（直接预测有噪声的样本）或`v_prediction`（参见[Imagen
    Video](https://imagen.research.google/video/paper.pdf)论文2.4节）。'
- en: '`thresholding` (`bool`, defaults to `False`) — Whether to use the “dynamic
    thresholding” method. This is unsuitable for latent-space diffusion models such
    as Stable Diffusion.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thresholding` (`bool`, 默认为`False`) — 是否使用“动态阈值”方法。这种方法不适用于像Stable Diffusion这样的潜在空间扩散模型。'
- en: '`dynamic_thresholding_ratio` (`float`, defaults to 0.995) — The ratio for the
    dynamic thresholding method. Valid only when `thresholding=True`.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dynamic_thresholding_ratio` (`float`, 默认为0.995) — 动态阈值方法的比率。仅在`thresholding=True`时有效。'
- en: '`sample_max_value` (`float`, defaults to 1.0) — The threshold value for dynamic
    thresholding. Valid only when `thresholding=True` and `algorithm_type="dpmsolver++"`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample_max_value` (`float`, 默认为1.0) — 动态阈值的阈值值。仅在`thresholding=True`和`algorithm_type="dpmsolver++"`时有效。'
- en: '`algorithm_type` (`str`, defaults to `dpmsolver++`) — Algorithm type for the
    solver; can be `dpmsolver`, `dpmsolver++`, `sde-dpmsolver` or `sde-dpmsolver++`.
    The `dpmsolver` type implements the algorithms in the [DPMSolver](https://huggingface.co/papers/2206.00927)
    paper, and the `dpmsolver++` type implements the algorithms in the [DPMSolver++](https://huggingface.co/papers/2211.01095)
    paper. It is recommended to use `dpmsolver++` or `sde-dpmsolver++` with `solver_order=2`
    for guided sampling like in Stable Diffusion.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`algorithm_type` (`str`, 默认为`dpmsolver++`) — 求解器的算法类型；可以是`dpmsolver`、`dpmsolver++`、`sde-dpmsolver`或`sde-dpmsolver++`。`dpmsolver`类型实现了[DPMSolver](https://huggingface.co/papers/2206.00927)论文中的算法，`dpmsolver++`类型实现了[DPMSolver++](https://huggingface.co/papers/2211.01095)论文中的算法。建议在稳定扩散中使用`dpmsolver++`或`sde-dpmsolver++`，并且`solver_order=2`。'
- en: '`solver_type` (`str`, defaults to `midpoint`) — Solver type for the second-order
    solver; can be `midpoint` or `heun`. The solver type slightly affects the sample
    quality, especially for a small number of steps. It is recommended to use `midpoint`
    solvers.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solver_type` (`str`, 默认为`midpoint`) — 二阶求解器的求解器类型；可以是`midpoint`或`heun`。求解器类型会稍微影响样本质量，特别是对于少量步数。建议使用`midpoint`求解器。'
- en: '`lower_order_final` (`bool`, defaults to `True`) — Whether to use lower-order
    solvers in the final steps. Only valid for < 15 inference steps. This can stabilize
    the sampling of DPMSolver for steps < 15, especially for steps <= 10.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lower_order_final` (`bool`, 默认为`True`) — 是否在最后步骤中使用低阶求解器。仅对<15个推断步骤有效。这可以稳定DPMSolver在步骤<15，特别是在步骤<=10时的采样。'
- en: '`euler_at_final` (`bool`, defaults to `False`) — Whether to use Euler’s method
    in the final step. It is a trade-off between numerical stability and detail richness.
    This can stabilize the sampling of the SDE variant of DPMSolver for small number
    of inference steps, but sometimes may result in blurring.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`euler_at_final` (`bool`, 默认为`False`) — 是否在最后一步使用欧拉方法。这是数值稳定性和细节丰富性之间的权衡。这可以稳定DPMSolver的SDE变体的采样，但有时可能导致模糊。'
- en: '`use_karras_sigmas` (`bool`, *optional*, defaults to `False`) — Whether to
    use Karras sigmas for step sizes in the noise schedule during the sampling process.
    If `True`, the sigmas are determined according to a sequence of noise levels {σi}.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_karras_sigmas` (`bool`, *optional*, 默认为`False`) — 是否在采样过程中使用Karras sigmas作为噪声调度中的步长。如果为`True`，则根据噪声级别序列{σi}确定sigmas。'
- en: '`lambda_min_clipped` (`float`, defaults to `-inf`) — Clipping threshold for
    the minimum value of `lambda(t)` for numerical stability. This is critical for
    the cosine (`squaredcos_cap_v2`) noise schedule.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lambda_min_clipped` (`float`, 默认为`-inf`) — 用于数值稳定性的`lambda(t)`最小值的剪切阈值。这对于余弦（`squaredcos_cap_v2`）噪声调度非常重要。'
- en: '`variance_type` (`str`, *optional*) — Set to “learned” or “learned_range” for
    diffusion models that predict variance. If set, the model’s output contains the
    predicted Gaussian variance.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variance_type` (`str`, *optional*) — 设置为“learned”或“learned_range”以用于预测方差的扩散模型。如果设置，模型的输出包含预测的高斯方差。'
- en: '`timestep_spacing` (`str`, defaults to `"linspace"`) — The way the timesteps
    should be scaled. Refer to Table 2 of the [Common Diffusion Noise Schedules and
    Sample Steps are Flawed](https://huggingface.co/papers/2305.08891) for more information.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep_spacing` (`str`, 默认为`"linspace"`) — 时间步长应该如何缩放。有关更多信息，请参考[Common
    Diffusion Noise Schedules and Sample Steps are Flawed](https://huggingface.co/papers/2305.08891)的表2。'
- en: '`steps_offset` (`int`, defaults to 0) — An offset added to the inference steps.
    You can use a combination of `offset=1` and `set_alpha_to_one=False` to make the
    last step use step 0 for the previous alpha product like in Stable Diffusion.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`steps_offset` (`int`, 默认为0`) — 添加到推断步骤的偏移量。您可以使用`offset=1`和`set_alpha_to_one=False`的组合，使最后一步使用前一个alpha乘积的步骤0，就像在Stable
    Diffusion中一样。'
- en: '`DPMSolverMultistepInverseScheduler` is the reverse scheduler of [DPMSolverMultistepScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/multistep_dpm_solver#diffusers.DPMSolverMultistepScheduler).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`DPMSolverMultistepInverseScheduler`是[DPMSolverMultistepScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/multistep_dpm_solver#diffusers.DPMSolverMultistepScheduler)的反向调度程序。'
- en: This model inherits from [SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)
    and [ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin).
    Check the superclass documentation for the generic methods the library implements
    for all schedulers such as loading and saving.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型继承自[SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)和[ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin)。查看超类文档以了解库为所有调度程序实现的通用方法，例如加载和保存。
- en: '#### `convert_model_output`'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `convert_model_output`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L391)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L391)'
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parameters
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_output` (`torch.FloatTensor`) — The direct output from the learned diffusion
    model.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_output` (`torch.FloatTensor`) — 从学习扩散模型直接输出。'
- en: '`sample` (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 由扩散过程创建的样本的当前实例。'
- en: Returns
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`torch.FloatTensor`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.FloatTensor`'
- en: The converted model output.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 转换后的模型输出。
- en: Convert the model output to the corresponding type the DPMSolver/DPMSolver++
    algorithm needs. DPM-Solver is designed to discretize an integral of the noise
    prediction model, and DPM-Solver++ is designed to discretize an integral of the
    data prediction model.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将模型输出转换为DPMSolver/DPMSolver++算法所需的相应类型。DPM-Solver旨在离散化噪声预测模型的积分，而DPM-Solver++旨在离散化数据预测模型的积分。
- en: The algorithm and model type are decoupled. You can use either DPMSolver or
    DPMSolver++ for both noise prediction and data prediction models.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 算法和模型类型是分离的。您可以使用DPMSolver或DPMSolver++用于噪声预测和数据预测模型。
- en: '#### `dpm_solver_first_order_update`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `dpm_solver_first_order_update`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L491)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L491)'
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_output` (`torch.FloatTensor`) — The direct output from the learned diffusion
    model.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_output` (`torch.FloatTensor`) — 从学习扩散模型直接输出。'
- en: '`sample` (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 由扩散过程创建的样本的当前实例。'
- en: Returns
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`torch.FloatTensor`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.FloatTensor`'
- en: The sample tensor at the previous timestep.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个时间步的样本张量。
- en: One step for the first-order DPMSolver (equivalent to DDIM).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第一阶DPMSolver的一步（相当于DDIM）。
- en: '#### `multistep_dpm_solver_second_order_update`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `multistep_dpm_solver_second_order_update`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L561)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L561)'
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_output_list` (`List[torch.FloatTensor]`) — The direct outputs from learned
    diffusion model at current and latter timesteps.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_output_list` (`List[torch.FloatTensor]`) — 当前和后续时间步的学习扩散模型的直接输出。'
- en: '`sample` (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 由扩散过程创建的样本的当前实例。'
- en: Returns
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`torch.FloatTensor`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.FloatTensor`'
- en: The sample tensor at the previous timestep.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个时间步的样本张量。
- en: One step for the second-order multistep DPMSolver.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第二阶多步 DPMSolver 的一步。
- en: '#### `multistep_dpm_solver_third_order_update`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `multistep_dpm_solver_third_order_update`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L685)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L685)'
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_output_list` (`List[torch.FloatTensor]`) — The direct outputs from learned
    diffusion model at current and latter timesteps.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_output_list` (`List[torch.FloatTensor]`) — 当前和后续时间步的学习扩散模型的直接输出。'
- en: '`sample` (`torch.FloatTensor`) — A current instance of a sample created by
    diffusion process.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`样本` (`torch.FloatTensor`) — 扩散过程创建的样本的当前实例。'
- en: Returns
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`torch.FloatTensor`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.FloatTensor`'
- en: The sample tensor at the previous timestep.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个时间步的样本张量。
- en: One step for the third-order multistep DPMSolver.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第三阶多步 DPMSolver 的一步。
- en: '#### `scale_model_input`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `scale_model_input`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L867)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L867)'
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample` (`torch.FloatTensor`) — The input sample.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`样本` (`torch.FloatTensor`) — 输入样本。'
- en: Returns
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`torch.FloatTensor`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.FloatTensor`'
- en: A scaled input sample.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个缩放的输入样本。
- en: Ensures interchangeability with schedulers that need to scale the denoising
    model input depending on the current timestep.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 确保与需要根据当前时间步缩放去噪模型输入的调度器可互换。
- en: '#### `set_timesteps`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `set_timesteps`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L226)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L226)'
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`num_inference_steps` (`int`) — The number of diffusion steps used when generating
    samples with a pre-trained model.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_inference_steps` (`int`) — 使用预训练模型生成样本时使用的扩散步数。'
- en: '`device` (`str` or `torch.device`, *optional*) — The device to which the timesteps
    should be moved to. If `None`, the timesteps are not moved.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`设备` (`str` 或 `torch.device`, *可选*) — 时间步应该移动到的设备。如果为 `None`，则时间步不会移动。'
- en: Sets the discrete timesteps used for the diffusion chain (to be run before inference).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用于扩散链的离散时间步（在推断之前运行）。
- en: '#### `step`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `step`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L790)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep_inverse.py#L790)'
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_output` (`torch.FloatTensor`) — The direct output from learned diffusion
    model.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_output` (`torch.FloatTensor`) — 学习扩散模型的直接输出。'
- en: '`timestep` (`int`) — The current discrete timestep in the diffusion chain.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep` (`int`) — 扩散链中当前的离散时间步。'
- en: '`sample` (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`样本` (`torch.FloatTensor`) — 扩散过程创建的样本的当前实例。'
- en: '`generator` (`torch.Generator`, *optional*) — A random number generator.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`生成器` (`torch.Generator`, *可选*) — 一个随机数生成器。'
- en: '`return_dict` (`bool`) — Whether or not to return a [SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    or `tuple`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`) — 是否返回 [SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    或 `tuple`。'
- en: Returns
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    or `tuple`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    或 `tuple`'
- en: If return_dict is `True`, [SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    is returned, otherwise a tuple is returned where the first element is the sample
    tensor.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `return_dict` 为 `True`，则返回 [SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)，否则返回一个元组，其中第一个元素是样本张量。
- en: Predict the sample from the previous timestep by reversing the SDE. This function
    propagates the sample with the multistep DPMSolver.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 通过反转 SDE 预测前一个时间步的样本。此函数使用多步 DPMSolver 传播样本。
- en: SchedulerOutput
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SchedulerOutput
- en: '### `class diffusers.schedulers.scheduling_utils.SchedulerOutput`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.schedulers.scheduling_utils.SchedulerOutput`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_utils.py#L50)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_utils.py#L50)'
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Parameters
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`prev_sample` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)` for images) — Computed sample `(x_{t-1})` of previous timestep. `prev_sample`
    should be used as next model input in the denoising loop.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prev_sample` (`torch.FloatTensor`，对于图像为形状为 `(batch_size, num_channels, height,
    width)` 的图像) — 计算的上一个时间步的样本 `(x_{t-1})`。`prev_sample` 应该在去噪循环中作为下一个模型输入使用。'
- en: Base class for the output of a scheduler’s `step` function.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器 `step` 函数的输出的基类。
