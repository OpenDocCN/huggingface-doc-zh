- en: Question answering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问答
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/question_answering](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/question_answering)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/tasks/question_answering](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/question_answering)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/ajPx5LwJD-I](https://www.youtube-nocookie.com/embed/ajPx5LwJD-I)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube-nocookie.com/embed/ajPx5LwJD-I](https://www.youtube-nocookie.com/embed/ajPx5LwJD-I)'
- en: 'Question answering tasks return an answer given a question. If you’ve ever
    asked a virtual assistant like Alexa, Siri or Google what the weather is, then
    you’ve used a question answering model before. There are two common types of question
    answering tasks:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 问答任务根据问题返回答案。如果您曾经向Alexa、Siri或Google等虚拟助手询问天气情况，那么您之前使用过问答模型。问答任务有两种常见类型：
- en: 'Extractive: extract the answer from the given context.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取式：从给定的上下文中提取答案。
- en: 'Abstractive: generate an answer from the context that correctly answers the
    question.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成式：从上下文中生成一个正确回答问题的答案。
- en: 'This guide will show you how to:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南将向您展示如何：
- en: Finetune [DistilBERT](https://huggingface.co/distilbert-base-uncased) on the
    [SQuAD](https://huggingface.co/datasets/squad) dataset for extractive question
    answering.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[SQuAD](https://huggingface.co/datasets/squad)数据集上微调[DistilBERT](https://huggingface.co/distilbert-base-uncased)以进行提取式问答。
- en: Use your finetuned model for inference.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您微调的模型进行推理。
- en: 'The task illustrated in this tutorial is supported by the following model architectures:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中演示的任务由以下模型架构支持：
- en: '[ALBERT](../model_doc/albert), [BART](../model_doc/bart), [BERT](../model_doc/bert),
    [BigBird](../model_doc/big_bird), [BigBird-Pegasus](../model_doc/bigbird_pegasus),
    [BLOOM](../model_doc/bloom), [CamemBERT](../model_doc/camembert), [CANINE](../model_doc/canine),
    [ConvBERT](../model_doc/convbert), [Data2VecText](../model_doc/data2vec-text),
    [DeBERTa](../model_doc/deberta), [DeBERTa-v2](../model_doc/deberta-v2), [DistilBERT](../model_doc/distilbert),
    [ELECTRA](../model_doc/electra), [ERNIE](../model_doc/ernie), [ErnieM](../model_doc/ernie_m),
    [Falcon](../model_doc/falcon), [FlauBERT](../model_doc/flaubert), [FNet](../model_doc/fnet),
    [Funnel Transformer](../model_doc/funnel), [OpenAI GPT-2](../model_doc/gpt2),
    [GPT Neo](../model_doc/gpt_neo), [GPT NeoX](../model_doc/gpt_neox), [GPT-J](../model_doc/gptj),
    [I-BERT](../model_doc/ibert), [LayoutLMv2](../model_doc/layoutlmv2), [LayoutLMv3](../model_doc/layoutlmv3),
    [LED](../model_doc/led), [LiLT](../model_doc/lilt), [Longformer](../model_doc/longformer),
    [LUKE](../model_doc/luke), [LXMERT](../model_doc/lxmert), [MarkupLM](../model_doc/markuplm),
    [mBART](../model_doc/mbart), [MEGA](../model_doc/mega), [Megatron-BERT](../model_doc/megatron-bert),
    [MobileBERT](../model_doc/mobilebert), [MPNet](../model_doc/mpnet), [MPT](../model_doc/mpt),
    [MRA](../model_doc/mra), [MT5](../model_doc/mt5), [MVP](../model_doc/mvp), [Nezha](../model_doc/nezha),
    [Nyströmformer](../model_doc/nystromformer), [OPT](../model_doc/opt), [QDQBert](../model_doc/qdqbert),
    [Reformer](../model_doc/reformer), [RemBERT](../model_doc/rembert), [RoBERTa](../model_doc/roberta),
    [RoBERTa-PreLayerNorm](../model_doc/roberta-prelayernorm), [RoCBert](../model_doc/roc_bert),
    [RoFormer](../model_doc/roformer), [Splinter](../model_doc/splinter), [SqueezeBERT](../model_doc/squeezebert),
    [T5](../model_doc/t5), [UMT5](../model_doc/umt5), [XLM](../model_doc/xlm), [XLM-RoBERTa](../model_doc/xlm-roberta),
    [XLM-RoBERTa-XL](../model_doc/xlm-roberta-xl), [XLNet](../model_doc/xlnet), [X-MOD](../model_doc/xmod),
    [YOSO](../model_doc/yoso)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[ALBERT](../model_doc/albert), [BART](../model_doc/bart), [BERT](../model_doc/bert),
    [BigBird](../model_doc/big_bird), [BigBird-Pegasus](../model_doc/bigbird_pegasus),
    [BLOOM](../model_doc/bloom), [CamemBERT](../model_doc/camembert), [CANINE](../model_doc/canine),
    [ConvBERT](../model_doc/convbert), [Data2VecText](../model_doc/data2vec-text),
    [DeBERTa](../model_doc/deberta), [DeBERTa-v2](../model_doc/deberta-v2), [DistilBERT](../model_doc/distilbert),
    [ELECTRA](../model_doc/electra), [ERNIE](../model_doc/ernie), [ErnieM](../model_doc/ernie_m),
    [Falcon](../model_doc/falcon), [FlauBERT](../model_doc/flaubert), [FNet](../model_doc/fnet),
    [Funnel Transformer](../model_doc/funnel), [OpenAI GPT-2](../model_doc/gpt2),
    [GPT Neo](../model_doc/gpt_neo), [GPT NeoX](../model_doc/gpt_neox), [GPT-J](../model_doc/gptj),
    [I-BERT](../model_doc/ibert), [LayoutLMv2](../model_doc/layoutlmv2), [LayoutLMv3](../model_doc/layoutlmv3),
    [LED](../model_doc/led), [LiLT](../model_doc/lilt), [Longformer](../model_doc/longformer),
    [LUKE](../model_doc/luke), [LXMERT](../model_doc/lxmert), [MarkupLM](../model_doc/markuplm),
    [mBART](../model_doc/mbart), [MEGA](../model_doc/mega), [Megatron-BERT](../model_doc/megatron-bert),
    [MobileBERT](../model_doc/mobilebert), [MPNet](../model_doc/mpnet), [MPT](../model_doc/mpt),
    [MRA](../model_doc/mra), [MT5](../model_doc/mt5), [MVP](../model_doc/mvp), [Nezha](../model_doc/nezha),
    [Nyströmformer](../model_doc/nystromformer), [OPT](../model_doc/opt), [QDQBert](../model_doc/qdqbert),
    [Reformer](../model_doc/reformer), [RemBERT](../model_doc/rembert), [RoBERTa](../model_doc/roberta),
    [RoBERTa-PreLayerNorm](../model_doc/roberta-prelayernorm), [RoCBert](../model_doc/roc_bert),
    [RoFormer](../model_doc/roformer), [Splinter](../model_doc/splinter), [SqueezeBERT](../model_doc/squeezebert),
    [T5](../model_doc/t5), [UMT5](../model_doc/umt5), [XLM](../model_doc/xlm), [XLM-RoBERTa](../model_doc/xlm-roberta),
    [XLM-RoBERTa-XL](../model_doc/xlm-roberta-xl), [XLNet](../model_doc/xlnet), [X-MOD](../model_doc/xmod),
    [YOSO](../model_doc/yoso)'
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保已安装所有必要的库：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We encourage you to login to your Hugging Face account so you can upload and
    share your model with the community. When prompted, enter your token to login:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励您登录您的Hugging Face帐户，这样您就可以上传和与社区分享您的模型。在提示时，输入您的令牌以登录：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Load SQuAD dataset
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载SQuAD数据集
- en: Start by loading a smaller subset of the SQuAD dataset from the 🤗 Datasets library.
    This’ll give you a chance to experiment and make sure everything works before
    spending more time training on the full dataset.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先加载来自🤗数据集库的SQuAD数据集的较小子集。这将让您有机会进行实验，并确保一切正常，然后再花更多时间在完整数据集上进行训练。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Split the dataset’s `train` split into a train and test set with the [train_test_split](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.train_test_split)
    method:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[train_test_split](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.train_test_split)方法将数据集的`train`拆分为训练集和测试集：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then take a look at an example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后看一个例子：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'There are several important fields here:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个重要的字段：
- en: '`answers`: the starting location of the answer token and the answer text.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`answers`：答案标记的起始位置和答案文本。'
- en: '`context`: background information from which the model needs to extract the
    answer.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context`：模型需要从中提取答案的背景信息。'
- en: '`question`: the question a model should answer.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`question`：模型应该回答的问题。'
- en: Preprocess
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理
- en: '[https://www.youtube-nocookie.com/embed/qgaM0weJHpA](https://www.youtube-nocookie.com/embed/qgaM0weJHpA)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube-nocookie.com/embed/qgaM0weJHpA](https://www.youtube-nocookie.com/embed/qgaM0weJHpA)'
- en: 'The next step is to load a DistilBERT tokenizer to process the `question` and
    `context` fields:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是加载一个DistilBERT tokenizer来处理`question`和`context`字段：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There are a few preprocessing steps particular to question answering tasks
    you should be aware of:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些特定于问答任务的预处理步骤，您应该注意：
- en: Some examples in a dataset may have a very long `context` that exceeds the maximum
    input length of the model. To deal with longer sequences, truncate only the `context`
    by setting `truncation="only_second"`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据集中的一些示例可能具有超出模型最大输入长度的非常长的`context`。为了处理更长的序列，只截断`context`，设置`truncation="only_second"`。
- en: Next, map the start and end positions of the answer to the original `context`
    by setting `return_offset_mapping=True`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过设置`return_offset_mapping=True`将答案的起始和结束位置映射到原始的`context`。
- en: With the mapping in hand, now you can find the start and end tokens of the answer.
    Use the `sequence_ids` method to find which part of the offset corresponds to
    the `question` and which corresponds to the `context`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了映射，现在您可以找到答案的起始和结束标记。使用`sequence_ids`方法找到偏移的哪部分对应于`question`，哪部分对应于`context`。
- en: 'Here is how you can create a function to truncate and map the start and end
    tokens of the `answer` to the `context`:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您可以创建的函数，用于截断和映射`answer`的起始和结束标记到`context`：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To apply the preprocessing function over the entire dataset, use 🤗 Datasets
    [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)
    function. You can speed up the `map` function by setting `batched=True` to process
    multiple elements of the dataset at once. Remove any columns you don’t need:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要在整个数据集上应用预处理函数，请使用🤗 Datasets [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)函数。您可以通过设置`batched=True`来加速`map`函数，以一次处理数据集的多个元素。删除您不需要的任何列：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now create a batch of examples using [DefaultDataCollator](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DefaultDataCollator).
    Unlike other data collators in 🤗 Transformers, the [DefaultDataCollator](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DefaultDataCollator)
    does not apply any additional preprocessing such as padding.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用[DefaultDataCollator](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DefaultDataCollator)创建一批示例。与🤗
    Transformers中的其他数据收集器不同，[DefaultDataCollator](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DefaultDataCollator)不会应用任何额外的预处理，如填充。
- en: PytorchHide Pytorch content
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Pytorch隐藏 Pytorch 内容
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: TensorFlowHide TensorFlow content
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow隐藏 TensorFlow 内容
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Train
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练
- en: PytorchHide Pytorch content
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Pytorch隐藏 Pytorch 内容
- en: If you aren’t familiar with finetuning a model with the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    take a look at the basic tutorial [here](../training#train-with-pytorch-trainer)!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉使用[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)微调模型，请查看这里的基本教程[here](../training#train-with-pytorch-trainer)!
- en: 'You’re ready to start training your model now! Load DistilBERT with [AutoModelForQuestionAnswering](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForQuestionAnswering):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以开始训练您的模型了！使用[AutoModelForQuestionAnswering](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForQuestionAnswering)加载DistilBERT：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'At this point, only three steps remain:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，只剩下三个步骤：
- en: Define your training hyperparameters in [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments).
    The only required parameter is `output_dir` which specifies where to save your
    model. You’ll push this model to the Hub by setting `push_to_hub=True` (you need
    to be signed in to Hugging Face to upload your model).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)中定义您的训练超参数。唯一必需的参数是`output_dir`，指定保存模型的位置。通过设置`push_to_hub=True`（您需要登录到Hugging
    Face才能上传模型），您将把这个模型推送到Hub。
- en: Pass the training arguments to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    along with the model, dataset, tokenizer, and data collator.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将训练参数传递给[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)，同时还有模型、数据集、tokenizer和数据收集器。
- en: Call [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)
    to finetune your model.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用[train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)来微调您的模型。
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once training is completed, share your model to the Hub with the [push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)
    method so everyone can use your model:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 训练完成后，使用[push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)方法将您的模型共享到Hub，以便每个人都可以使用您的模型：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: TensorFlowHide TensorFlow content
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow隐藏 TensorFlow 内容
- en: If you aren’t familiar with finetuning a model with Keras, take a look at the
    basic tutorial [here](../training#train-a-tensorflow-model-with-keras)!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉使用Keras微调模型，请查看这里的基本教程[here](../training#train-a-tensorflow-model-with-keras)!
- en: 'To finetune a model in TensorFlow, start by setting up an optimizer function,
    learning rate schedule, and some training hyperparameters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要在TensorFlow中微调模型，请首先设置优化器函数、学习率调度和一些训练超参数：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then you can load DistilBERT with [TFAutoModelForQuestionAnswering](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForQuestionAnswering):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您可以使用[TFAutoModelForQuestionAnswering](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForQuestionAnswering)加载DistilBERT：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Convert your datasets to the `tf.data.Dataset` format with [prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset)将数据集转换为`tf.data.Dataset`格式：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Configure the model for training with [`compile`](https://keras.io/api/models/model_training_apis/#compile-method):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`compile`](https://keras.io/api/models/model_training_apis/#compile-method)为训练配置模型：
- en: '[PRE16]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The last thing to setup before you start training is to provide a way to push
    your model to the Hub. This can be done by specifying where to push your model
    and tokenizer in the [PushToHubCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.PushToHubCallback):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始训练之前的最后一件事是提供一种将您的模型推送到Hub的方法。这可以通过在[PushToHubCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.PushToHubCallback)中指定推送模型和标记器的位置来完成：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, you’re ready to start training your model! Call [`fit`](https://keras.io/api/models/model_training_apis/#fit-method)
    with your training and validation datasets, the number of epochs, and your callback
    to finetune the model:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您已经准备好开始训练您的模型了！使用您的训练和验证数据集、时代数以及回调函数调用[`fit`](https://keras.io/api/models/model_training_apis/#fit-method)来微调模型：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Once training is completed, your model is automatically uploaded to the Hub
    so everyone can use it!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦训练完成，您的模型将自动上传到Hub，这样每个人都可以使用它！
- en: For a more in-depth example of how to finetune a model for question answering,
    take a look at the corresponding [PyTorch notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/question_answering.ipynb)
    or [TensorFlow notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/question_answering-tf.ipynb).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何为问题回答微调模型的更深入示例，请查看相应的[PyTorch笔记本](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/question_answering.ipynb)或[TensorFlow笔记本](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/question_answering-tf.ipynb)。
- en: Evaluate
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估
- en: Evaluation for question answering requires a significant amount of postprocessing.
    To avoid taking up too much of your time, this guide skips the evaluation step.
    The [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    still calculates the evaluation loss during training so you’re not completely
    in the dark about your model’s performance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 问题回答的评估需要大量的后处理。为了不占用太多时间，本指南跳过了评估步骤。[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)仍然在训练过程中计算评估损失，因此您不会完全不了解模型的性能。
- en: If have more time and you’re interested in how to evaluate your model for question
    answering, take a look at the [Question answering](https://huggingface.co/course/chapter7/7?fw=pt#postprocessing)
    chapter from the 🤗 Hugging Face Course!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有更多时间，并且对如何评估问题回答模型感兴趣，请查看🤗 Hugging Face课程中的[问题回答](https://huggingface.co/course/chapter7/7?fw=pt#postprocessing)章节！
- en: Inference
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推理
- en: Great, now that you’ve finetuned a model, you can use it for inference!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在您已经微调了一个模型，可以用它进行推理了！
- en: 'Come up with a question and some context you’d like the model to predict:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 提出一个问题和一些上下文，您希望模型进行预测：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The simplest way to try out your finetuned model for inference is to use it
    in a [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline).
    Instantiate a `pipeline` for question answering with your model, and pass your
    text to it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用您微调过的模型进行推理的最简单方法是在[pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)中使用它。用您的模型实例化一个问题回答的`pipeline`，并将文本传递给它：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can also manually replicate the results of the `pipeline` if you’d like:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，也可以手动复制`pipeline`的结果：
- en: PytorchHide Pytorch content
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Pytorch隐藏Pytorch内容
- en: 'Tokenize the text and return PyTorch tensors:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对文本进行标记化并返回PyTorch张量：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Pass your inputs to the model and return the `logits`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的输入传递给模型并返回`logits`：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Get the highest probability from the model output for the start and end positions:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从模型输出中获取开始和结束位置的最高概率：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Decode the predicted tokens to get the answer:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 解码预测的标记以获取答案：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: TensorFlowHide TensorFlow content
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow隐藏TensorFlow内容
- en: 'Tokenize the text and return TensorFlow tensors:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对文本进行标记化并返回TensorFlow张量：
- en: '[PRE25]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Pass your inputs to the model and return the `logits`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的输入传递给模型并返回`logits`：
- en: '[PRE26]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Get the highest probability from the model output for the start and end positions:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从模型输出中获取开始和结束位置的最高概率：
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Decode the predicted tokens to get the answer:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 解码预测的标记以获取答案：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
