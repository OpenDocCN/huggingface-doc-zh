- en: Reward Modeling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奖励建模
- en: 'Original text: [https://huggingface.co/docs/trl/reward_trainer](https://huggingface.co/docs/trl/reward_trainer)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/trl/reward_trainer](https://huggingface.co/docs/trl/reward_trainer)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: TRL supports custom reward modeling for anyone to perform reward modeling on
    their dataset and model.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: TRL支持任何人对其数据集和模型执行自定义奖励建模。
- en: Check out a complete flexible example at [`examples/scripts/reward_modeling.py`](https://github.com/huggingface/trl/tree/main/examples/scripts/reward_modeling.py).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在[`examples/scripts/reward_modeling.py`](https://github.com/huggingface/trl/tree/main/examples/scripts/reward_modeling.py)中查看一个完整灵活的示例。
- en: Expected dataset format
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 期望的数据集格式
- en: 'The [RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)
    expects a very specific format for the dataset since the model will be trained
    on pairs of examples to predict which of the two is preferred. We provide an example
    from the [`Anthropic/hh-rlhf`](https://huggingface.co/datasets/Anthropic/hh-rlhf)
    dataset below:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)期望数据集具有非常特定的格式，因为模型将在示例对上进行训练，以预测哪个更受偏爱。我们在下面提供了一个来自[`Anthropic/hh-rlhf`](https://huggingface.co/datasets/Anthropic/hh-rlhf)数据集的示例：'
- en: '![](../Images/108b7079a2ffc651b11289080d0cdc7d.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/108b7079a2ffc651b11289080d0cdc7d.png)'
- en: 'Therefore the final dataset object should contain two 4 entries at least if
    you use the default `RewardDataCollatorWithPadding` data collator. The entries
    should be named:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您使用默认的`RewardDataCollatorWithPadding`数据整理器，则最终数据集对象应该至少包含两个4个条目。这些条目应该命名为：
- en: '`input_ids_chosen`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_ids_chosen`'
- en: '`attention_mask_chosen`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask_chosen`'
- en: '`input_ids_rejected`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_ids_rejected`'
- en: '`attention_mask_rejected`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask_rejected`'
- en: Using the RewardTrainer
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用RewardTrainer
- en: After preparing your dataset, you can use the [RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)
    in the same way as the `Trainer` class from 🤗 Transformers. You should pass an
    `AutoModelForSequenceClassification` model to the [RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer),
    along with a [RewardConfig](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardConfig)
    which configures the hyperparameters of the training.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好数据集后，您可以像使用🤗 Transformers中的`Trainer`类一样使用[RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)。您应该将一个`AutoModelForSequenceClassification`模型传递给[RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)，以及一个[RewardConfig](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardConfig)来配置训练的超参数。
- en: Leveraging 🤗 PEFT to train a reward model
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用🤗 PEFT来训练奖励模型
- en: Just pass a `peft_config` in the keyword arguments of [RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer),
    and the trainer should automatically take care of converting the model into a
    PEFT model!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在[RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)的关键字参数中传递一个`peft_config`，训练器应该会自动将模型转换为PEFT模型！
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Adding a margin to the loss
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向损失添加边际
- en: As in the [Llama 2 paper](https://huggingface.co/papers/2307.09288), you can
    add a margin to the loss by adding a `margin` column to the dataset. The reward
    collator will automatically pass it through and the loss will be computed accordingly.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如[Llama 2 论文](https://huggingface.co/papers/2307.09288)中所述，您可以通过向数据集添加一个`margin`列来向损失添加边际。奖励整理器将自动传递它，并相应地计算损失。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: RewardConfig
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RewardConfig
- en: '### `class trl.RewardConfig`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class trl.RewardConfig`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/trainer/reward_config.py#L21)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/trainer/reward_config.py#L21)'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`max_length` (`int`, *optional*, defaults to `None`) — The maximum length of
    the sequences in the batch. This argument is required if you want to use the default
    data collator.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_length` (`int`, *可选*, 默认为`None`) — 批次中序列的最大长度。如果要使用默认数据整理器，则需要此参数。'
- en: '`gradient_checkpointing` (`bool`, *optional*, defaults to `True`) — If True,
    use gradient checkpointing to save memory at the expense of slower backward pass.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gradient_checkpointing` (`bool`, *可选*, 默认为`True`) — 如果为True，则使用梯度检查点来节省内存，但会减慢向后传递的速度。'
- en: RewardConfig collects all training arguments related to the [RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)
    class.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: RewardConfig收集与[RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)类相关的所有训练参数。
- en: Using `HfArgumentParser` we can turn this class into [argparse](https://docs.python.org/3/library/argparse#module-argparse)
    arguments that can be specified on the command line.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`HfArgumentParser`，我们可以将这个类转换为可以在命令行上指定的[argparse](https://docs.python.org/3/library/argparse#module-argparse)参数。
- en: RewardTrainer
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RewardTrainer
- en: '### `class trl.RewardTrainer`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class trl.RewardTrainer`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/trainer/reward_trainer.py#L36)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/trainer/reward_trainer.py#L36)'
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The RewardTrainer can be used to train your custom Reward Model. It is a subclass
    of the `transformers.Trainer` class and inherits all of its attributes and methods.
    It is recommended to use an `AutoModelForSequenceClassification` as the reward
    model. The reward model should be trained on a dataset of paired examples, where
    each example is a tuple of two sequences. The reward model should be trained to
    predict which example in the pair is more relevant to the task at hand.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: RewardTrainer可用于训练您的自定义奖励模型。它是`transformers.Trainer`类的子类，继承了所有属性和方法。建议使用`AutoModelForSequenceClassification`作为奖励模型。奖励模型应该在成对示例的数据集上进行训练，其中每个示例都是两个序列的元组。奖励模型应该被训练以预测哪个示例对于当前任务更相关。
- en: The reward trainer expects a very specific format for the dataset. The dataset
    should contain two 4 entries at least if you don’t use the default `RewardDataCollatorWithPadding`
    data collator. The entries should be named
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 奖励训练器期望数据集具有非常特定的格式。如果不使用默认的`RewardDataCollatorWithPadding`数据整理器，则数据集应该至少包含两个4个条目。这些条目应该命名为
- en: '`input_ids_chosen`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_ids_chosen`'
- en: '`attention_mask_chosen`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask_chosen`'
- en: '`input_ids_rejected`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_ids_rejected`'
- en: '`attention_mask_rejected`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask_rejected`'
- en: Optionally, you can also pass a `margin` entry to the dataset. This entry should
    contain the margin used to modulate the loss of the reward model as outlined in
    [https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/](https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/).
    If you don’t pass a margin, no margin will be used.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以向数据集传递一个`margin`条目。该条目应包含用于调节奖励模型损失的边距，如[https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/](https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/)中所述。如果您不传递边距，则不会使用边距。
