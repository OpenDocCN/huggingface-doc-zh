- en: Load pipelines, models, and schedulers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载管道、模型和调度程序
- en: 'Original text: [https://huggingface.co/docs/diffusers/using-diffusers/loading](https://huggingface.co/docs/diffusers/using-diffusers/loading)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/diffusers/using-diffusers/loading](https://huggingface.co/docs/diffusers/using-diffusers/loading)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Having an easy way to use a diffusion system for inference is essential to 🧨
    Diffusers. Diffusion systems often consist of multiple components like parameterized
    models, tokenizers, and schedulers that interact in complex ways. That is why
    we designed the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    to wrap the complexity of the entire diffusion system into an easy-to-use API,
    while remaining flexible enough to be adapted for other use cases, such as loading
    each component individually as building blocks to assemble your own diffusion
    system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用扩散系统进行推理的简便方式对于🧨 Diffusers至关重要。扩散系统通常由多个组件组成，如参数化模型、标记器和调度程序，它们以复杂的方式相互作用。这就是为什么我们设计了[DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)，将整个扩散系统的复杂性包装成易于使用的API，同时保持足够的灵活性，以适应其他用例，例如将每个组件单独加载为构建块，组装自己的扩散系统。
- en: Everything you need for inference or training is accessible with the `from_pretrained()`
    method.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过`from_pretrained()`方法访问推理或训练所需的一切。
- en: 'This guide will show you how to load:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南将向您展示如何加载：
- en: pipelines from the Hub and locally
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Hub和本地的管道
- en: different components into a pipeline
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将不同的组件合并到一个管道中
- en: checkpoint variants such as different floating point types or non-exponential
    mean averaged (EMA) weights
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查点变体，如不同的浮点类型或非指数均值平均（EMA）权重
- en: models and schedulers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型和调度程序
- en: Diffusion Pipeline
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩散管道
- en: 💡 Skip to the [DiffusionPipeline explained](#diffusionpipeline-explained) section
    if you are interested in learning in more detail about how the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    class works.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 💡 如果您想更详细地了解[DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)类的工作原理，请跳转到[DiffusionPipeline解释](#diffusionpipeline-explained)部分。
- en: The [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    class is the simplest and most generic way to load the latest trending diffusion
    model from the [Hub](https://huggingface.co/models?library=diffusers&sort=trending).
    The [DiffusionPipeline.from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)
    method automatically detects the correct pipeline class from the checkpoint, downloads,
    and caches all the required configuration and weight files, and returns a pipeline
    instance ready for inference.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)类是从[Hub](https://huggingface.co/models?library=diffusers&sort=trending)加载最新流行扩散模型的最简单和最通用的方法。[DiffusionPipeline.from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)方法会自动检测检查点的正确管道类，下载并缓存所有必需的配置和权重文件，并返回一个准备好进行推理的管道实例。'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also load a checkpoint with its specific pipeline class. The example
    above loaded a Stable Diffusion model; to get the same result, use the [StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline)
    class:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用特定的管道类加载检查点。上面的示例加载了一个稳定扩散模型；要获得相同的结果，请使用[StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline)类：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A checkpoint (such as [`CompVis/stable-diffusion-v1-4`](https://huggingface.co/CompVis/stable-diffusion-v1-4)
    or [`runwayml/stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5))
    may also be used for more than one task, like text-to-image or image-to-image.
    To differentiate what task you want to use the checkpoint for, you have to load
    it directly with its corresponding task-specific pipeline class:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 检查点（如[`CompVis/stable-diffusion-v1-4`](https://huggingface.co/CompVis/stable-diffusion-v1-4)或[`runwayml/stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5)）也可以用于多个任务，如文本到图像或图像到图像。要区分要使用检查点的任务，您必须直接加载它与相应的任务特定管道类：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Local pipeline
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地管道
- en: 'To load a diffusion pipeline locally, use [`git-lfs`](https://git-lfs.github.com/)
    to manually download the checkpoint (in this case, [`runwayml/stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5))
    to your local disk. This creates a local folder, `./stable-diffusion-v1-5`, on
    your disk:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地加载扩散管道，请使用[`git-lfs`](https://git-lfs.github.com/)手动下载检查点（在本例中，[`runwayml/stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5)）到您的本地磁盘。这将在您的磁盘上创建一个本地文件夹`./stable-diffusion-v1-5`：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then pass the local path to [from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将本地路径传递给[from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The [from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)
    method won’t download any files from the Hub when it detects a local path, but
    this also means it won’t download and cache the latest changes to a checkpoint.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)方法在检测到本地路径时不会从Hub下载任何文件，但这也意味着它不会下载和缓存检查点的最新更改。'
- en: Swap components in a pipeline
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在管道中交换组件
- en: 'You can customize the default components of any pipeline with another compatible
    component. Customization is important because:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用另一个兼容的组件自定义任何管道的默认组件。自定义很重要，因为：
- en: Changing the scheduler is important for exploring the trade-off between generation
    speed and quality.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改调度程序对于探索生成速度和质量之间的权衡是重要的。
- en: Different components of a model are typically trained independently and you
    can swap out a component with a better-performing one.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型的不同组件通常是独立训练的，您可以用性能更好的组件替换一个组件。
- en: During finetuning, usually only some components - like the UNet or text encoder
    - are trained.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在微调期间，通常只有一些组件 - 如UNet或文本编码器 - 被训练。
- en: 'To find out which schedulers are compatible for customization, you can use
    the `compatibles` method:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 查找可供定制的调度程序，您可以使用`compatibles`方法：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let’s use the [SchedulerMixin.from_pretrained()](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin.from_pretrained)
    method to replace the default [PNDMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/pndm#diffusers.PNDMScheduler)
    with a more performant scheduler, [EulerDiscreteScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/euler#diffusers.EulerDiscreteScheduler).
    The `subfolder="scheduler"` argument is required to load the scheduler configuration
    from the correct [subfolder](https://huggingface.co/runwayml/stable-diffusion-v1-5/tree/main/scheduler)
    of the pipeline repository.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用[SchedulerMixin.from_pretrained()](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin.from_pretrained)方法，将默认的[PNDMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/pndm#diffusers.PNDMScheduler)替换为性能更高的调度程序[EulerDiscreteScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/euler#diffusers.EulerDiscreteScheduler)。`subfolder="scheduler"`参数是必需的，以从流水线存储库的正确[子文件夹](https://huggingface.co/runwayml/stable-diffusion-v1-5/tree/main/scheduler)加载调度程序配置。
- en: 'Then you can pass the new [EulerDiscreteScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/euler#diffusers.EulerDiscreteScheduler)
    instance to the `scheduler` argument in [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将新的[EulerDiscreteScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/euler#diffusers.EulerDiscreteScheduler)实例传递给[DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)中的`scheduler`参数：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Safety checker
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全检查器
- en: 'Diffusion models like Stable Diffusion can generate harmful content, which
    is why 🧨 Diffusers has a [safety checker](https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/safety_checker.py)
    to check generated outputs against known hardcoded NSFW content. If you’d like
    to disable the safety checker for whatever reason, pass `None` to the `safety_checker`
    argument:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 像Stable Diffusion这样的扩散模型可能会生成有害内容，这就是为什么🧨 Diffusers有一个[安全检查器](https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/safety_checker.py)，用于检查生成的输出是否包含已知的硬编码NSFW内容。如果出于任何原因要禁用安全检查器，请将`None`传递给`safety_checker`参数：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Reuse components across pipelines
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在流水线之间重复使用组件
- en: 'You can also reuse the same components in multiple pipelines to avoid loading
    the weights into RAM twice. Use the [components](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.components)
    method to save the components:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在多个流水线中重复使用相同的组件，以避免将权重加载到RAM两次。使用[components](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.components)方法保存组件：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then you can pass the `components` to another pipeline without reloading the
    weights into RAM:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以将`components`传递给另一个流水线，而无需重新加载权重到RAM：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can also pass the components individually to the pipeline if you want more
    flexibility over which components to reuse or disable. For example, to reuse the
    same components in the text-to-image pipeline, except for the safety checker and
    feature extractor, in the image-to-image pipeline:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要更灵活地选择要重用或禁用的组件，也可以将组件单独传递给流水线。例如，在文本到图像流水线中重用相同的组件，除了安全检查器和特征提取器，在图像到图像流水线中：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Checkpoint variants
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查点变体
- en: 'A checkpoint variant is usually a checkpoint whose weights are:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 检查点变体通常是其权重为：
- en: Stored in a different floating point type for lower precision and lower storage,
    such as [`torch.float16`](https://pytorch.org/docs/stable/tensors.html#data-types),
    because it only requires half the bandwidth and storage to download. You can’t
    use this variant if you’re continuing training or using a CPU.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储在不同的浮点类型中，以降低精度和存储，例如[`torch.float16`](https://pytorch.org/docs/stable/tensors.html#data-types)，因为它只需要一半的带宽和存储空间来下载。如果您继续训练或使用CPU，则不能使用此变体。
- en: Non-exponential mean averaged (EMA) weights, which shouldn’t be used for inference.
    You should use these to continue fine-tuning a model.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非指数均值平均（EMA）权重，不应用于推断。您应该使用这些权重来继续微调模型。
- en: 💡 When the checkpoints have identical model structures, but they were trained
    on different datasets and with a different training setup, they should be stored
    in separate repositories instead of variations (for example, `stable-diffusion-v1-4`
    and `stable-diffusion-v1-5`).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 💡 当检查点具有相同的模型结构，但它们是在不同数据集上训练并使用不同的训练设置时，应将它们存储在单独的存储库中，而不是变体（例如，`stable-diffusion-v1-4`和`stable-diffusion-v1-5`）。
- en: Otherwise, a variant is **identical** to the original checkpoint. They have
    exactly the same serialization format (like [Safetensors](./using_safetensors)),
    model structure, and weights that have identical tensor shapes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，变体与原始检查点**完全相同**。它们具有完全相同的序列化格式（例如[Safetensors](./using_safetensors)）、模型结构和具有相同张量形状的权重。
- en: '| **checkpoint type** | **weight name** | **argument for loading weights**
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| **检查点类型** | **权重名称** | **加载权重的参数** |'
- en: '| --- | --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| original | diffusion_pytorch_model.bin |  |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 原始 | diffusion_pytorch_model.bin |  |'
- en: '| floating point | diffusion_pytorch_model.fp16.bin | `variant`, `torch_dtype`
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 浮点数 | diffusion_pytorch_model.fp16.bin | `variant`，`torch_dtype` |'
- en: '| non-EMA | diffusion_pytorch_model.non_ema.bin | `variant` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 非EMA | diffusion_pytorch_model.non_ema.bin | `variant` |'
- en: 'There are two important arguments to know for loading variants:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 加载变体时需要了解的两个重要参数：
- en: '`torch_dtype` defines the floating point precision of the loaded checkpoints.
    For example, if you want to save bandwidth by loading a `fp16` variant, you should
    specify `torch_dtype=torch.float16` to *convert the weights* to `fp16`. Otherwise,
    the `fp16` weights are converted to the default `fp32` precision. You can also
    load the original checkpoint without defining the `variant` argument, and convert
    it to `fp16` with `torch_dtype=torch.float16`. In this case, the default `fp32`
    weights are downloaded first, and then they’re converted to `fp16` after loading.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`torch_dtype`定义了加载检查点的浮点精度。例如，如果您想通过加载`fp16`变体来节省带宽，您应该指定`torch_dtype=torch.float16`来*将权重*转换为`fp16`。否则，`fp16`权重将转换为默认的`fp32`精度。您也可以在不定义`variant`参数的情况下加载原始检查点，并使用`torch_dtype=torch.float16`将其转换为`fp16`。在这种情况下，首先下载默认的`fp32`权重，然后在加载后将其转换为`fp16`。'
- en: '`variant` defines which files should be loaded from the repository. For example,
    if you want to load a `non_ema` variant from the [`diffusers/stable-diffusion-variants`](https://huggingface.co/diffusers/stable-diffusion-variants/tree/main/unet)
    repository, you should specify `variant="non_ema"` to download the `non_ema` files.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variant`定义了应从存储库加载哪些文件。例如，如果您想从[`diffusers/stable-diffusion-variants`](https://huggingface.co/diffusers/stable-diffusion-variants/tree/main/unet)存储库加载`non_ema`变体，您应该指定`variant="non_ema"`以下载`non_ema`文件。'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To save a checkpoint stored in a different floating-point type or as a non-EMA
    variant, use the [DiffusionPipeline.save_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.save_pretrained)
    method and specify the `variant` argument. You should try and save a variant to
    the same folder as the original checkpoint, so you can load both from the same
    folder:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存存储在不同浮点类型或非EMA变体中的检查点，请使用[DiffusionPipeline.save_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.save_pretrained)方法并指定`variant`参数。您应该尝试将变体保存到与原始检查点相同的文件夹中，以便您可以从同一文件夹中加载两者：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you don’t save the variant to an existing folder, you must specify the `variant`
    argument otherwise it’ll throw an `Exception` because it can’t find the original
    checkpoint:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不将变体保存到现有文件夹中，则必须指定`variant`参数，否则它会抛出一个`Exception`，因为它找不到原始的检查点：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Models
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: Models are loaded from the [ModelMixin.from_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.from_pretrained)
    method, which downloads and caches the latest version of the model weights and
    configurations. If the latest files are available in the local cache, [from_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.from_pretrained)
    reuses files in the cache instead of re-downloading them.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 模型是从[ModelMixin.from_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.from_pretrained)方法加载的，该方法下载并缓存模型权重和配置的最新版本。如果最新文件在本地缓存中可用，[from_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.from_pretrained)将重用缓存中的文件而不是重新下载它们。
- en: 'Models can be loaded from a subfolder with the `subfolder` argument. For example,
    the model weights for `runwayml/stable-diffusion-v1-5` are stored in the [`unet`](https://huggingface.co/runwayml/stable-diffusion-v1-5/tree/main/unet)
    subfolder:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 模型可以通过`subfolder`参数从子文件夹加载。例如，`runwayml/stable-diffusion-v1-5`的模型权重存储在[`unet`](https://huggingface.co/runwayml/stable-diffusion-v1-5/tree/main/unet)子文件夹中：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Or directly from a repository’s [directory](https://huggingface.co/google/ddpm-cifar10-32/tree/main):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或直接从存储库的[目录](https://huggingface.co/google/ddpm-cifar10-32/tree/main)加载：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can also load and save model variants by specifying the `variant` argument
    in [ModelMixin.from_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.from_pretrained)
    and [ModelMixin.save_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.save_pretrained):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在[ModelMixin.from_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.from_pretrained)和[ModelMixin.save_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.save_pretrained)中指定`variant`参数来加载和保存模型变体：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Schedulers
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调度器
- en: Schedulers are loaded from the [SchedulerMixin.from_pretrained()](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin.from_pretrained)
    method, and unlike models, schedulers are **not parameterized** or **trained**;
    they are defined by a configuration file.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器是从[SchedulerMixin.from_pretrained()](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin.from_pretrained)方法加载的，与模型不同，调度器**不是参数化**或**训练**；它们由配置文件定义。
- en: 'Loading schedulers does not consume any significant amount of memory and the
    same configuration file can be used for a variety of different schedulers. For
    example, the following schedulers are compatible with [StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline),
    which means you can load the same scheduler configuration file in any of these
    classes:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 加载调度器不会消耗大量内存，并且相同的配置文件可以用于各种不同的调度器。例如，以下调度器与[StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline)兼容，这意味着您可以在这些类中的任何一个中加载相同的调度器配置文件：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: DiffusionPipeline explained
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DiffusionPipeline解释
- en: 'As a class method, [DiffusionPipeline.from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)
    is responsible for two things:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个类方法，[DiffusionPipeline.from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)负责两件事：
- en: Download the latest version of the folder structure required for inference and
    cache it. If the latest folder structure is available in the local cache, [DiffusionPipeline.from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)
    reuses the cache and won’t redownload the files.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载推理所需的最新文件夹结构并缓存。如果最新的文件夹结构在本地缓存中可用，[DiffusionPipeline.from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)将重用缓存，不会重新下载文件。
- en: Load the cached weights into the correct pipeline [class](../api/pipelines/overview#diffusers-summary)
    - retrieved from the `model_index.json` file - and return an instance of it.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将缓存的权重加载到正确的流水线[class](../api/pipelines/overview#diffusers-summary)中-从`model_index.json`文件中检索-并返回其实例。
- en: The pipelines’ underlying folder structure corresponds directly with their class
    instances. For example, the [StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline)
    corresponds to the folder structure in [`runwayml/stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线的基础文件夹结构直接对应于它们的类实例。例如，[StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline)对应于[`runwayml/stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5)中的文件夹结构。
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You’ll see pipeline is an instance of [StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline),
    which consists of seven components:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到流水线是[StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline)的一个实例，由七个组件组成：
- en: '`"feature_extractor"`: a [CLIPImageProcessor](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPImageProcessor)
    from 🤗 Transformers.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “feature_extractor”：来自🤗 Transformers的[CLIPImageProcessor](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPImageProcessor)。
- en: '`"safety_checker"`: a [component](https://github.com/huggingface/diffusers/blob/e55687e1e15407f60f32242027b7bb8170e58266/src/diffusers/pipelines/stable_diffusion/safety_checker.py#L32)
    for screening against harmful content.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “safety_checker”：用于筛选有害内容的[组件](https://github.com/huggingface/diffusers/blob/e55687e1e15407f60f32242027b7bb8170e58266/src/diffusers/pipelines/stable_diffusion/safety_checker.py#L32)。
- en: '`"scheduler"`: an instance of [PNDMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/pndm#diffusers.PNDMScheduler).'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “调度程序”：[PNDMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/pndm#diffusers.PNDMScheduler)的一个实例。
- en: '`"text_encoder"`: a [CLIPTextModel](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTextModel)
    from 🤗 Transformers.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “text_encoder”：来自🤗 Transformers的[CLIPTextModel](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTextModel)。
- en: '`"tokenizer"`: a [CLIPTokenizer](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizer)
    from 🤗 Transformers.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “tokenizer”：来自🤗 Transformers的[CLIPTokenizer](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizer)。
- en: '`"unet"`: an instance of [UNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.UNet2DConditionModel).'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “unet”：[UNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.UNet2DConditionModel)的一个实例。
- en: '`"vae"`: an instance of [AutoencoderKL](/docs/diffusers/v0.26.3/en/api/models/autoencoderkl#diffusers.AutoencoderKL).'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “vae”：[AutoencoderKL](/docs/diffusers/v0.26.3/en/api/models/autoencoderkl#diffusers.AutoencoderKL)的一个实例。
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Compare the components of the pipeline instance to the [`runwayml/stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5/tree/main)
    folder structure, and you’ll see there is a separate folder for each of the components
    in the repository:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将流水线实例的组件与[`runwayml/stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5/tree/main)文件夹结构进行比较，您将看到存储库中每个组件都有一个单独的文件夹：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can access each of the components of the pipeline as an attribute to view
    its configuration:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将流水线的每个组件作为属性访问以查看其配置：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Every pipeline expects a [`model_index.json`](https://huggingface.co/runwayml/stable-diffusion-v1-5/blob/main/model_index.json)
    file that tells the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个流水线都需要一个[`model_index.json`](https://huggingface.co/runwayml/stable-diffusion-v1-5/blob/main/model_index.json)文件，告诉[DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)：
- en: which pipeline class to load from `_class_name`
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`_class_name`加载哪个流水线类
- en: which version of 🧨 Diffusers was used to create the model in `_diffusers_version`
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`_diffusers_version`中使用哪个版本的🧨 Diffusers创建模型。
- en: what components from which library are stored in the subfolders (`name` corresponds
    to the component and subfolder name, `library` corresponds to the name of the
    library to load the class from, and `class` corresponds to the class name)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从哪个库的哪些组件存储在子文件夹中（`name`对应组件和子文件夹名称，`library`对应要从中加载类的库名称，`class`对应类名）
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
