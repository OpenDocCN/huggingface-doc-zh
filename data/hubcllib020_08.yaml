- en: Upload files to the Hub
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件到Hub
- en: 'Original text: [https://huggingface.co/docs/huggingface_hub/guides/upload](https://huggingface.co/docs/huggingface_hub/guides/upload)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/huggingface_hub/guides/upload](https://huggingface.co/docs/huggingface_hub/guides/upload)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Sharing your files and work is an important aspect of the Hub. The `huggingface_hub`
    offers several options for uploading your files to the Hub. You can use these
    functions independently or integrate them into your library, making it more convenient
    for your users to interact with the Hub. This guide will show you how to push
    files:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 分享您的文件和工作是Hub的重要方面。`huggingface_hub`为将文件上传到Hub提供了几种选项。您可以独立使用这些功能，也可以将它们集成到您的库中，使用户更方便地与Hub交互。本指南将向您展示如何推送文件：
- en: without using Git.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不使用Git。
- en: that are very large with [Git LFS](https://git-lfs.github.com/).
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于非常大的文件，可以使用[Git LFS](https://git-lfs.github.com/)。
- en: with the `commit` context manager.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`commit`上下文管理器。
- en: with the [push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.push_to_hub)
    function.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.push_to_hub)函数。
- en: Whenever you want to upload files to the Hub, you need to log in to your Hugging
    Face account. For more details about authentication, check out [this section](../quick-start#authentication).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您想要将文件上传到Hub时，您需要登录到您的Hugging Face帐户。有关身份验证的更多详细信息，请查看[此部分](../quick-start#authentication)。
- en: Upload a file
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上传文件
- en: Once you’ve created a repository with [create_repo()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo),
    you can upload a file to your repository using [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个存储库后，您可以使用[upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)将文件上传到您的存储库。
- en: Specify the path of the file to upload, where you want to upload the file to
    in the repository, and the name of the repository you want to add the file to.
    Depending on your repository type, you can optionally set the repository type
    as a `dataset`, `model`, or `space`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 指定要上传的文件的路径，在存储库中要上传文件的位置，以及要将文件添加到的存储库的名称。根据您的存储库类型，您可以选择将存储库类型设置为`dataset`、`model`或`space`。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Upload a folder
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上传文件夹
- en: Use the [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    function to upload a local folder to an existing repository. Specify the path
    of the local folder to upload, where you want to upload the folder to in the repository,
    and the name of the repository you want to add the folder to. Depending on your
    repository type, you can optionally set the repository type as a `dataset`, `model`,
    or `space`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)函数将本地文件夹上传到现有存储库。指定要上传的本地文件夹的路径，在存储库中要上传文件夹的位置，以及要将文件夹添加到的存储库的名称。根据您的存储库类型，您可以选择将存储库类型设置为`dataset`、`model`或`space`。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, the `.gitignore` file will be taken into account to know which files
    should be committed or not. By default we check if a `.gitignore` file is present
    in a commit, and if not, we check if it exists on the Hub. Please be aware that
    only a `.gitignore` file present at the root of the directory with be used. We
    do not check for `.gitignore` files in subdirectories.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，将考虑`.gitignore`文件以确定应提交哪些文件。默认情况下，我们会检查提交中是否存在`.gitignore`文件，如果没有，则会检查Hub上是否存在。请注意，只有根目录中存在的`.gitignore`文件才会被使用。我们不会检查子目录中的`.gitignore`文件。
- en: If you don’t want to use an hardcoded `.gitignore` file, you can use the `allow_patterns`
    and `ignore_patterns` arguments to filter which files to upload. These parameters
    accept either a single pattern or a list of patterns. Patterns are Standard Wildcards
    (globbing patterns) as documented [here](https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm).
    If both `allow_patterns` and `ignore_patterns` are provided, both constraints
    apply.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用硬编码的`.gitignore`文件，可以使用`allow_patterns`和`ignore_patterns`参数来过滤要上传的文件。这些参数接受单个模式或模式列表。模式是标准通配符（globbing
    patterns），如[此处](https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm)所述。如果同时提供`allow_patterns`和`ignore_patterns`，则两个约束都适用。
- en: Beside the `.gitignore` file and allow/ignore patterns, any `.git/` folder present
    in any subdirectory will be ignored.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`.gitignore`文件和允许/忽略模式外，任何子目录中存在的`.git/`文件夹都将被忽略。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can also use the `delete_patterns` argument to specify files you want to
    delete from the repo in the same commit. This can prove useful if you want to
    clean a remote folder before pushing files in it and you don’t know which files
    already exists.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`delete_patterns`参数指定要在同一提交中从存储库中删除的文件。如果您想要在推送文件之前清理远程文件夹并且不知道哪些文件已经存在，这可能会很有用。
- en: The example below uploads the local `./logs` folder to the remote `/experiment/logs/`
    folder. Only txt files are uploaded but before that, all previous logs on the
    repo on deleted. All of this in a single commit.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例将本地的`./logs`文件夹上传到远程的`/experiment/logs/`文件夹。只有txt文件被上传，但在此之前，存储库中的所有先前日志都被删除。所有这些都在一个提交中完成。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Upload from the CLI
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从CLI上传
- en: You can use the `huggingface-cli upload` command from the terminal to directly
    upload files to the Hub. Internally it uses the same [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    and [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    helpers described above.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用终端中的`huggingface-cli upload`命令直接将文件上传到Hub。内部使用上述描述的相同[upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)和[upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)助手。
- en: 'You can either upload a single file or an entire folder:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以上传单个文件或整个文件夹：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`local_path` and `path_in_repo` are optional and can be implicitly inferred.
    If `local_path` is not set, the tool will check if a local folder or file has
    the same name as the `repo_id`. If that’s the case, its content will be uploaded.
    Otherwise, an exception is raised asking the user to explicitly set `local_path`.
    In any case, if `path_in_repo` is not set, files are uploaded at the root of the
    repo.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`local_path`和`path_in_repo`是可选的，可以被隐式推断。如果未设置`local_path`，则工具将检查本地文件夹或文件是否与`repo_id`具有相同的名称。如果是这样，其内容将被上传。否则，将引发异常，要求用户明确设置`local_path`。无论如何，如果未设置`path_in_repo`，文件将被上传到存储库的根目录。'
- en: For more details about the CLI upload command, please refer to the [CLI guide](./cli#huggingface-cli-upload).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有关CLI上传命令的更多详细信息，请参考[CLI指南](./cli#huggingface-cli-upload)。
- en: Advanced features
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级功能
- en: In most cases, you won’t need more than [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    and [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    to upload your files to the Hub. However, `huggingface_hub` has more advanced
    features to make things easier. Let’s have a look at them!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，您不需要更多的[upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)和[upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)来将文件上传到Hub。然而，`huggingface_hub`具有更多高级功能，使事情变得更容易。让我们来看看它们！
- en: Non-blocking uploads
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非阻塞上传
- en: In some cases, you want to push data without blocking your main thread. This
    is particularly useful to upload logs and artifacts while continuing a training.
    To do so, you can use the `run_as_future` argument in both [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    and [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder).
    This will return a [`concurrent.futures.Future`](https://docs.python.org/3/library/concurrent.futures.html#future-objects)
    object that you can use to check the status of the upload.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您希望在不阻塞主线程的情况下推送数据。这对于在继续训练的同时上传日志和工件特别有用。为此，您可以在[upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)和[upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)中使用`run_as_future`参数。这将返回一个[`concurrent.futures.Future`](https://docs.python.org/3/library/concurrent.futures.html#future-objects)对象，您可以使用它来检查上传的状态。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Background jobs are queued when using `run_as_future=True`. This means that
    you are guaranteed that the jobs will be executed in the correct order.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`run_as_future=True`时，后台作业将被排队。这意味着您可以确保作业将按正确的顺序执行。
- en: Even though background jobs are mostly useful to upload data/create commits,
    you can queue any method you like using [run_as_future()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.run_as_future).
    For instance, you can use it to create a repo and then upload data to it in the
    background. The built-in `run_as_future` argument in upload methods is just an
    alias around it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 即使后台作业大多用于上传数据/创建提交，您也可以使用[run_as_future()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.run_as_future)来排队任何您喜欢的方法。例如，您可以使用它在后台创建一个存储库，然后上传数据到其中。上传方法中内置的`run_as_future`参数只是它的一个别名。
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Upload a folder by chunks
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按块上传文件夹
- en: '[upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    makes it easy to upload an entire folder to the Hub. However, for large folders
    (thousands of files or hundreds of GB), it can still be challenging. If you have
    a folder with a lot of files, you might want to upload it in several commits.
    If you experience an error or a connection issue during the upload, you would
    not have to resume the process from the beginning.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)使得将整个文件夹上传到Hub变得容易。然而，对于大型文件夹（数千个文件或数百GB），仍然可能具有挑战性。如果您有一个包含大量文件的文件夹，您可能希望将其分批上传。如果在上传过程中遇到错误或连接问题，您将不必从头开始恢复该过程。'
- en: To upload a folder in multiple commits, just pass `multi_commits=True` as argument.
    Under the hood, `huggingface_hub` will list the files to upload/delete and split
    them in several commits. The “strategy” (i.e. how to split the commits) is based
    on the number and size of the files to upload. A PR is open on the Hub to push
    all the commits. Once the PR is ready, the commits are squashed into a single
    commit. If the process is interrupted before completing, you can rerun your script
    to resume the upload. The created PR will be automatically detected and the upload
    will resume from where it stopped. It is recommended to pass `multi_commits_verbose=True`
    to get a better understanding of the upload and its progress.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要将文件夹上传到多个提交中，只需将`multi_commits=True`作为参数传递。在幕后，`huggingface_hub`将列出要上传/删除的文件并将它们分成几个提交。“策略”（即如何分割提交）基于要上传的文件数量和大小。在Hub上打开了一个PR来推送所有提交。一旦PR准备就绪，提交将被压缩为单个提交。如果在完成之前中断了该过程，您可以重新运行脚本以恢复上传。创建的PR将被自动检测到，并且上传将从停止的地方继续。建议传递`multi_commits_verbose=True`以更好地了解上传及其进度。
- en: The example below will upload the checkpoints folder to a dataset in multiple
    commits. A PR will be created on the Hub and merged automatically once the upload
    is complete. If you prefer the PR to stay open and review it manually, you can
    pass `create_pr=True`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例将把检查点文件夹上传到数据集中的多个提交中。在Hub上将创建一个PR，并在上传完成后自动合并。如果您希望PR保持打开状态并手动审查它，可以传递`create_pr=True`。
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you want a better control on the upload strategy (i.e. the commits that are
    created), you can have a look at the low-level [plan_multi_commits()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.plan_multi_commits)
    and [create_commits_on_pr()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commits_on_pr)
    methods.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望更好地控制上传策略（即创建的提交），您可以查看低级别的[plan_multi_commits()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.plan_multi_commits)和[create_commits_on_pr()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commits_on_pr)方法。
- en: '`multi_commits` is still an experimental feature. Its API and behavior is subject
    to change in the future without prior notice.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`multi_commits`仍然是一个实验性功能。其API和行为可能会在未来发生变化，恕不另行通知。'
- en: Scheduled uploads
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定期上传
- en: The Hugging Face Hub makes it easy to save and version data. However, there
    are some limitations when updating the same file thousands of times. For instance,
    you might want to save logs of a training process or user feedback on a deployed
    Space. In these cases, uploading the data as a dataset on the Hub makes sense,
    but it can be hard to do properly. The main reason is that you don’t want to version
    every update of your data because it’ll make the git repository unusable. The
    [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)
    class offers a solution to this problem.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Hugging Face Hub使保存和版本化数据变得简单。然而，当更新同一文件数千次时会有一些限制。例如，您可能希望保存训练过程的日志或用户对部署空间的反馈。在这些情况下，将数据作为数据集上传到Hub是有意义的，但可能很难正确执行。主要原因是您不希望对数据的每次更新进行版本化，因为这会使git存储库无法使用。[CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)类提供了解决这个问题的方法。
- en: 'The idea is to run a background job that regularly pushes a local folder to
    the Hub. Let’s assume you have a Gradio Space that takes as input some text and
    generates two translations of it. Then, the user can select their preferred translation.
    For each run, you want to save the input, output, and user preference to analyze
    the results. This is a perfect use case for [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler);
    you want to save data to the Hub (potentially millions of user feedback), but
    you don’t *need* to save in real-time each user’s input. Instead, you can save
    the data locally in a JSON file and upload it every 10 minutes. For example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是运行一个定期将本地文件夹推送到Hub的后台作业。假设您有一个Gradio空间，该空间以一些文本作为输入，并生成其两种翻译。然后，用户可以选择他们喜欢的翻译。对于每次运行，您希望保存输入、输出和用户偏好以分析结果。这是[CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)的一个完美用例；您希望将数据保存到Hub（可能是数百万条用户反馈），但您不*需要*实时保存每个用户的输入。相反，您可以将数据保存在本地的JSON文件中，并每10分钟上传一次。例如：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And that’s it! User input/outputs and feedback will be available as a dataset
    on the Hub. By using a unique JSON file name, you are guaranteed you won’t overwrite
    data from a previous run or data from another Spaces/replicas pushing concurrently
    to the same repository.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！用户输入/输出和反馈将作为Hub上的数据集可用。通过使用唯一的JSON文件名，您可以确保不会覆盖以前运行的数据或同时推送到同一存储库的其他空间/副本的数据。
- en: 'For more details about the [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler),
    here is what you need to know:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有关[CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)的更多详细信息，请看以下内容：
- en: '**append-only:** It is assumed that you will only add content to the folder.
    You must only append data to existing files or create new files. Deleting or overwriting
    a file might corrupt your repository.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅追加:** 假定您只会向文件夹添加内容。您只能向现有文件追加数据或创建新文件。删除或覆盖文件可能会损坏您的存储库。'
- en: '**git history**: The scheduler will commit the folder every `every` minutes.
    To avoid polluting the git repository too much, it is recommended to set a minimal
    value of 5 minutes. Besides, the scheduler is designed to avoid empty commits.
    If no new content is detected in the folder, the scheduled commit is dropped.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**git历史记录:** 调度程序将每`every`分钟提交一次文件夹。为了避免过多地污染git存储库，建议将最小值设置为5分钟。此外，调度程序旨在避免空提交。如果在文件夹中未检测到新内容，则计划的提交将被丢弃。'
- en: '**errors:** The scheduler run as background thread. It is started when you
    instantiate the class and never stops. In particular, if an error occurs during
    the upload (example: connection issue), the scheduler will silently ignore it
    and retry at the next scheduled commit.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误:** 调度程序作为后台线程运行。当您实例化类时启动它，并且永远不会停止。特别是，如果在上传过程中发生错误（例如：连接问题），调度程序将默默地忽略它，并在下一个计划的提交时重试。'
- en: '**thread-safety:** In most cases it is safe to assume that you can write to
    a file without having to worry about a lock file. The scheduler will not crash
    or be corrupted if you write content to the folder while it’s uploading. In practice,
    *it is possible* that concurrency issues happen for heavy-loaded apps. In this
    case, we advice to use the `scheduler.lock` lock to ensure thread-safety. The
    lock is blocked only when the scheduler scans the folder for changes, not when
    it uploads data. You can safely assume that it will not affect the user experience
    on your Space.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线程安全:** 在大多数情况下，可以安全地假设可以写入文件而无需担心锁文件。如果在上传时向文件夹写入内容，调度程序不会崩溃或损坏。实际上，对于负载较重的应用程序，可能会发生并发问题。在这种情况下，我们建议使用`scheduler.lock`锁来确保线程安全。只有在调度程序扫描文件夹以查找更改时，锁才会被阻塞，而在上传数据时不会。您可以放心地认为它不会影响您的空间上的用户体验。'
- en: Space persistence demo
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 空间持久性演示
- en: Persisting data from a Space to a Dataset on the Hub is the main use case for
    [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler).
    Depending on the use case, you might want to structure your data differently.
    The structure has to be robust to concurrent users and restarts which often implies
    generating UUIDs. Besides robustness, you should upload data in a format readable
    by the 🤗 Datasets library for later reuse. We created a [Space](https://huggingface.co/spaces/Wauplin/space_to_dataset_saver)
    that demonstrates how to save several different data formats (you may need to
    adapt it for your own specific needs).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从空间持久化数据到Hub上的数据集是[CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)的主要用例。根据用例的不同，您可能希望以不同的方式结构化数据。结构必须对并发用户和重新启动具有鲁棒性，这通常意味着生成UUID。除了鲁棒性，您还应该以🤗
    Datasets库可读的格式上传数据，以便以后重用。我们创建了一个[Space](https://huggingface.co/spaces/Wauplin/space_to_dataset_saver)，演示了如何保存几种不同的数据格式（您可能需要根据自己的特定需求进行调整）。
- en: Custom uploads
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自定义上传
- en: '[CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)
    assumes your data is append-only and should be uploading “as is”. However, you
    might want to customize the way data is uploaded. You can do that by creating
    a class inheriting from [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)
    and overwrite the `push_to_hub` method (feel free to overwrite it any way you
    want). You are guaranteed it will be called every `every` minutes in a background
    thread. You don’t have to worry about concurrency and errors but you must be careful
    about other aspects, such as pushing empty commits or duplicated data.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)假定您的数据是追加的，并且应该按原样上传。但是，您可能希望自定义数据上传方式。您可以通过创建一个从[CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)继承的类，并覆盖`push_to_hub`方法（随意以任何方式覆盖它）来实现。保证它将在后台线程中每隔`every`分钟调用一次。您无需担心并发和错误，但必须注意其他方面，例如推送空提交或重复数据。'
- en: 'In the (simplified) example below, we overwrite `push_to_hub` to zip all PNG
    files in a single archive to avoid overloading the repo on the Hub:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面（简化的）示例中，我们覆盖`push_to_hub`以将所有PNG文件压缩到单个存档中，以避免在Hub上过载存储库：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you overwrite `push_to_hub`, you have access to the attributes of [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)
    and especially:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当覆盖`push_to_hub`时，您可以访问[CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)的属性，特别是：
- en: '[HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi)
    client: `api`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi)客户端：`api`'
- en: 'Folder parameters: `folder_path` and `path_in_repo`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件夹参数：`folder_path`和`path_in_repo`
- en: 'Repo parameters: `repo_id`, `repo_type`, `revision`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库参数：`repo_id`、`repo_type`、`revision`
- en: 'The thread lock: `lock`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程锁：`lock`
- en: For more examples of custom schedulers, check out our [demo Space](https://huggingface.co/spaces/Wauplin/space_to_dataset_saver)
    containing different implementations depending on your use cases.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们的[演示空间](https://huggingface.co/spaces/Wauplin/space_to_dataset_saver)中的更多自定义调度程序示例，其中包含根据您的用例不同的不同实现。
- en: create_commit
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: create_commit
- en: The [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    and [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    functions are high-level APIs that are generally convenient to use. We recommend
    trying these functions first if you don’t need to work at a lower level. However,
    if you want to work at a commit-level, you can use the [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    function directly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)和[upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)函数是通常方便使用的高级API。如果您不需要在较低级别工作，我们建议首先尝试这些函数。但是，如果您想在提交级别工作，可以直接使用[create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)函数。'
- en: 'There are three types of operations supported by [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)支持三种类型的操作：'
- en: '[CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd)
    uploads a file to the Hub. If the file already exists, the file contents are overwritten.
    This operation accepts two arguments:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd)将文件上传到Hub。如果文件已经存在，则文件内容将被覆盖。此操作接受两个参数：'
- en: '`path_in_repo`: the repository path to upload a file to.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path_in_repo`：要上传文件的存储库路径。'
- en: '`path_or_fileobj`: either a path to a file on your filesystem or a file-like
    object. This is the content of the file to upload to the Hub.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path_or_fileobj`：要上传到Hub的文件的路径或类似文件的对象。这是要上传到Hub的文件内容。'
- en: '[CommitOperationDelete](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationDelete)
    removes a file or a folder from a repository. This operation accepts `path_in_repo`
    as an argument.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CommitOperationDelete](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationDelete)从存储库中删除文件或文件夹。此操作接受`path_in_repo`作为参数。'
- en: '[CommitOperationCopy](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationCopy)
    copies a file within a repository. This operation accepts three arguments:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CommitOperationCopy](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationCopy)在存储库内复制文件。此操作接受三个参数：'
- en: '`src_path_in_repo`: the repository path of the file to copy.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src_path_in_repo`：要复制的文件的存储库路径。'
- en: '`path_in_repo`: the repository path where the file should be copied.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path_in_repo`：应将文件复制到的存储库路径。'
- en: '`src_revision`: optional - the revision of the file to copy if your want to
    copy a file from a different branch/revision.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src_revision`：可选 - 如果要从不同的分支/修订版复制文件，则为要复制的文件的修订版。'
- en: 'For example, if you want to upload two files and delete a file in a Hub repository:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想要在 Hub 存储库中上传两个文件并删除一个文件：
- en: 'Use the appropriate `CommitOperation` to add or delete a file and to delete
    a folder:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用适当的 `CommitOperation` 来添加或删除文件以及删除文件夹：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Pass your operations to [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit):'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的操作传递给 [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In addition to [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    and [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder),
    the following functions also use [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    under the hood:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    和 [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    外，以下功能还在内部使用 [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)：
- en: '[delete_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file)
    deletes a single file from a repository on the Hub.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[delete_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file)
    从 Hub 上的存储库中删除单个文件。'
- en: '[delete_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_folder)
    deletes an entire folder from a repository on the Hub.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[delete_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_folder)
    从 Hub 上的存储库中删除整个文件夹。'
- en: '[metadata_update()](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.metadata_update)
    updates a repository’s metadata.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[metadata_update()](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.metadata_update)
    更新存储库的元数据。'
- en: For more detailed information, take a look at the [HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi)
    reference.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更详细的信息，请查看 [HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi)
    参考。
- en: Preupload LFS files before commit
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在提交之前预先上传 LFS 文件
- en: In some cases, you might want to upload huge files to S3 **before** making the
    commit call. For example, if you are committing a dataset in several shards that
    are generated in-memory, you would need to upload the shards one by one to avoid
    an out-of-memory issue. A solution is to upload each shard as a separate commit
    on the repo. While being perfectly valid, this solution has the drawback of potentially
    messing the git history by generating tens of commits. To overcome this issue,
    you can upload your files one by one to S3 and then create a single commit at
    the end. This is possible using [preupload_lfs_files()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.preupload_lfs_files)
    in combination with [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能希望在进行提交调用之前将大型文件上传到 S3 **之前**。例如，如果您正在提交一个在内存中生成的数据集的多个分片，您需要逐个上传这些分片以避免内存不足问题。一种解决方案是将每个分片作为存储库上的单独提交上传。虽然这是完全有效的，但这种解决方案的缺点是可能通过生成数十个提交来搞乱
    git 历史。为了解决这个问题，您可以逐个将文件上传到 S3，然后在最后创建一个单独的提交。这可以使用 [preupload_lfs_files()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.preupload_lfs_files)
    结合 [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    来实现。
- en: This is a power-user method. Directly using [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file),
    [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    or [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    instead of handling the low-level logic of pre-uploading files is the way to go
    in the vast majority of cases. The main caveat of [preupload_lfs_files()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.preupload_lfs_files)
    is that until the commit is actually made, the upload files are not accessible
    on the repo on the Hub. If you have a question, feel free to ping us on our Discord
    or in a GitHub issue.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种高级用户方法。在绝大多数情况下，直接使用 [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)、[upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    或 [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    而不是处理预先上传文件的低级逻辑是更好的选择。[preupload_lfs_files()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.preupload_lfs_files)
    的主要注意事项是，在实际进行提交之前，上传的文件在 Hub 上的存储库上是不可访问的。如果您有任何问题，请随时在我们的 Discord 或 GitHub 问题中联系我们。
- en: 'Here is a simple example illustrating how to pre-upload files:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的示例，说明如何预先上传文件：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: First, we create the [CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd)
    objects one by one. In a real-world example, those would contain the generated
    shards. Each file is uploaded before generating the next one. During the [preupload_lfs_files()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.preupload_lfs_files)
    step, **the `CommitOperationAdd` object is mutated**. You should only use it to
    pass it directly to [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit).
    The main update of the object is that **the binary content is removed** from it,
    meaning that it will be garbage-collected if you don’t store another reference
    to it. This is expected as we don’t want to keep in memory the content that is
    already uploaded. Finally we create the commit by passing all the operations to
    [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit).
    You can pass additional operations (add, delete or copy) that have not been processed
    yet and they will be handled correctly.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们逐个创建 [CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd)
    对象。在实际示例中，这些对象将包含生成的分片。在生成下一个文件之前，每个文件都会被上传。在 [preupload_lfs_files()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.preupload_lfs_files)
    步骤中，**`CommitOperationAdd` 对象会被改变**。您应该只使用它直接传递给 [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)。对象的主要更新是**二进制内容被从中删除**，这意味着如果您没有存储另一个引用，它将被垃圾回收。这是预期的，因为我们不希望在内存中保留已经上传的内容。最后，通过将所有操作传递给
    [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    来创建提交。您可以传递尚未处理的其他操作（添加、删除或复制），它们将被正确处理。
- en: Tips and tricks for large uploads
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大文件上传的技巧和窍门
- en: There are some limitations to be aware of when dealing with a large amount of
    data in your repo. Given the time it takes to stream the data, getting an upload/push
    to fail at the end of the process or encountering a degraded experience, be it
    on hf.co or when working locally, can be very annoying.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理存储库中的大量数据时，有一些限制需要注意。由于流式传输数据所需的时间，使得上传/推送在流程结束时失败或遇到降级体验，无论是在 hf.co 上还是在本地工作时，都可能非常恼人。
- en: Check out our [Repository limitations and recommendations](https://huggingface.co/docs/hub/repositories-recommendations)
    guide for best practices on how to structure your repositories on the Hub. Next,
    let’s move on with some practical tips to make your upload process as smooth as
    possible.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们的 [存储库限制和建议](https://huggingface.co/docs/hub/repositories-recommendations)
    指南，了解如何在 Hub 上构建存储库的最佳实践。接下来，让我们继续一些实用的提示，使您的上传过程尽可能顺利。
- en: '**Start small**: We recommend starting with a small amount of data to test
    your upload script. It’s easier to iterate on a script when failing takes only
    a little time.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从小开始**：我们建议从少量数据开始测试您的上传脚本。当失败只需要很少的时间时，更容易迭代脚本。'
- en: '**Expect failures**: Streaming large amounts of data is challenging. You don’t
    know what can happen, but it’s always best to consider that something will fail
    at least once -no matter if it’s due to your machine, your connection, or our
    servers. For example, if you plan to upload a large number of files, it’s best
    to keep track locally of which files you already uploaded before uploading the
    next batch. You are ensured that an LFS file that is already committed will never
    be re-uploaded twice but checking it client-side can still save some time.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**期望失败**：流式传输大量数据是具有挑战性的。你不知道会发生什么，但最好始终考虑到至少会有一次失败 - 无论是由于您的机器、您的连接还是我们的服务器。例如，如果您计划上传大量文件，最好在上传下一批文件之前在本地跟踪您已经上传的文件。您可以确保已经提交的
    LFS 文件永远不会被重新上传两次，但在客户端检查它仍然可以节省一些时间。'
- en: '**Use `hf_transfer`**: this is a Rust-based [library](https://github.com/huggingface/hf_transfer)
    meant to speed up uploads on machines with very high bandwidth. To use it, you
    must install it (`pip install hf_transfer`) and enable it by setting `HF_HUB_ENABLE_HF_TRANSFER=1`
    as an environment variable. You can then use `huggingface_hub` normally. Disclaimer:
    this is a power user tool. It is tested and production-ready but lacks user-friendly
    features like advanced error handling or proxies. For more details, please refer
    to this [section](https://huggingface.co/docs/huggingface_hub/hf_transfer).'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 `hf_transfer`**：这是一个基于 Rust 的 [库](https://github.com/huggingface/hf_transfer)，旨在加快具有非常高带宽的机器上的上传速度。要使用它，您必须安装它（`pip
    install hf_transfer`）并通过将 `HF_HUB_ENABLE_HF_TRANSFER=1` 设置为环境变量来启用它。然后您可以正常使用
    `huggingface_hub`。免责声明：这是一个面向高级用户的工具。它经过测试并已准备投入生产，但缺乏像高级错误处理或代理等用户友好的功能。有关更多详细信息，请参阅此
    [部分](https://huggingface.co/docs/huggingface_hub/hf_transfer)。'
- en: Progress bars are supported in `hf_transfer` starting from version `0.1.4`.
    Consider upgrading (`pip install -U hf-transfer`) if you plan to enable faster
    uploads.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 进度条在 `hf_transfer` 版本 `0.1.4` 开始得到支持。如果您计划启用更快的上传，请考虑升级（`pip install -U hf-transfer`）。
- en: (legacy) Upload files with Git LFS
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: （传统）使用 Git LFS 上传文件
- en: All the methods described above use the Hub’s API to upload files. This is the
    recommended way to upload files to the Hub. However, we also provide [Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository),
    a wrapper around the git tool to manage a local repository.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有方法都使用 Hub 的 API 来上传文件。这是上传文件到 Hub 的推荐方式。但是，我们还提供 [Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)，这是一个围绕
    git 工具的包装器，用于管理本地存储库。
- en: Although [Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)
    is not formally deprecated, we recommend using the HTTP-based methods described
    above instead. For more details about this recommendation, please have a look
    at [this guide](../concepts/git_vs_http) explaining the core differences between
    HTTP-based and Git-based approaches.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然[Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)没有正式弃用，但我们建议使用上面描述的基于HTTP的方法。有关此建议的更多详细信息，请查看解释基于HTTP和基于Git方法之间核心差异的[此指南](../concepts/git_vs_http)。
- en: 'Git LFS automatically handles files larger than 10MB. But for very large files
    (>5GB), you need to install a custom transfer agent for Git LFS:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Git LFS会自动处理大于10MB的文件。但对于非常大的文件（>5GB），您需要为Git LFS安装自定义传输代理：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You should install this for each repository that has a very large file. Once
    installed, you’ll be able to push files larger than 5GB.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该为每个具有非常大文件的存储库安装此。安装后，您将能够推送大于5GB的文件。
- en: commit context manager
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: commit上下文管理器
- en: 'The `commit` context manager handles four of the most common Git commands:
    pull, add, commit, and push. `git-lfs` automatically tracks any file larger than
    10MB. In the following example, the `commit` context manager:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`commit`上下文管理器处理四个最常见的Git命令：pull、add、commit和push。`git-lfs`会自动跟踪任何大于10MB的文件。在下面的示例中，`commit`上下文管理器：'
- en: Pulls from the `text-files` repository.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`text-files`存储库中拉取。
- en: Adds a change made to `file.txt`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加对`file.txt`所做的更改。
- en: Commits the change.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改。
- en: Pushes the change to the `text-files` repository.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改推送到`text-files`存储库。
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is another example of how to use the `commit` context manager to save
    and upload a file to a repository:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用`commit`上下文管理器将文件保存并上传到存储库的另一个示例：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Set `blocking=False` if you would like to push your commits asynchronously.
    Non-blocking behavior is helpful when you want to continue running your script
    while your commits are being pushed.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要异步推送提交，请设置`blocking=False`。非阻塞行为在您希望在提交被推送时继续运行脚本时很有帮助。
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can check the status of your push with the `command_queue` method:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`command_queue`方法检查推送的状态：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Refer to the table below for the possible statuses:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考下表以获取可能的状态：
- en: '| Status | Description |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 状态 | 描述 |'
- en: '| --- | --- |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| -1 | The push is ongoing. |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| -1 | 推送正在进行中。|'
- en: '| 0 | The push has completed successfully. |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 推送已成功完成。|'
- en: '| Non-zero | An error has occurred. |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 非零 | 发生了错误。|'
- en: 'When `blocking=False`, commands are tracked, and your script will only exit
    when all pushes are completed, even if other errors occur in your script. Some
    additional useful commands for checking the status of a push include:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当`blocking=False`时，命令会被跟踪，只有当所有推送完成时，您的脚本才会退出，即使在脚本中发生其他错误。用于检查推送状态的一些额外有用的命令包括：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: push_to_hub
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: push_to_hub
- en: The [Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)
    class has a [push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.push_to_hub)
    function to add files, make a commit, and push them to a repository. Unlike the
    `commit` context manager, you’ll need to pull from a repository first before calling
    [push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.push_to_hub).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)类有一个[push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.push_to_hub)函数，用于添加文件，进行提交并将它们推送到存储库。与`commit`上下文管理器不同，您需要先从存储库中拉取，然后才能调用[push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.push_to_hub)。'
- en: 'For example, if you’ve already cloned a repository from the Hub, then you can
    initialize the `repo` from the local directory:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您已经从Hub克隆了一个存储库，那么您可以从本地目录初始化`repo`：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Update your local clone with [git_pull()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_pull)
    and then push your file to the Hub:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[git_pull()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_pull)更新本地克隆，然后将文件推送到Hub：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'However, if you aren’t ready to push a file yet, you can use [git_add()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_add)
    and [git_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_commit)
    to only add and commit your file:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您还没有准备好推送文件，您可以使用[git_add()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_add)和[git_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_commit)仅添加和提交您的文件：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When you’re ready, push the file to your repository with [git_push()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_push):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好后，使用[git_push()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_push)将文件推送到您的存储库：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
