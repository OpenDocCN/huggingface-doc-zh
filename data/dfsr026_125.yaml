- en: ControlNet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ControlNet
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/models/controlnet](https://huggingface.co/docs/diffusers/api/models/controlnet)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/diffusers/api/models/controlnet](https://huggingface.co/docs/diffusers/api/models/controlnet)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The ControlNet model was introduced in [Adding Conditional Control to Text-to-Image
    Diffusion Models](https://huggingface.co/papers/2302.05543) by Lvmin Zhang, Anyi
    Rao, Maneesh Agrawala. It provides a greater degree of control over text-to-image
    generation by conditioning the model on additional inputs such as edge maps, depth
    maps, segmentation maps, and keypoints for pose detection.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ControlNet 模型是由 Lvmin Zhang、Anyi Rao、Maneesh Agrawala 在 [Adding Conditional
    Control to Text-to-Image Diffusion Models](https://huggingface.co/papers/2302.05543)
    中引入的。通过在模型上添加额外的输入，如边缘图、深度图、分割图和姿势检测的关键点，它为文本到图像生成提供了更高程度的控制。
- en: 'The abstract from the paper is:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该论文的摘要是：
- en: '*We present ControlNet, a neural network architecture to add spatial conditioning
    controls to large, pretrained text-to-image diffusion models. ControlNet locks
    the production-ready large diffusion models, and reuses their deep and robust
    encoding layers pretrained with billions of images as a strong backbone to learn
    a diverse set of conditional controls. The neural architecture is connected with
    “zero convolutions” (zero-initialized convolution layers) that progressively grow
    the parameters from zero and ensure that no harmful noise could affect the finetuning.
    We test various conditioning controls, eg, edges, depth, segmentation, human pose,
    etc, with Stable Diffusion, using single or multiple conditions, with or without
    prompts. We show that the training of ControlNets is robust with small (<50k)
    and large (>1m) datasets. Extensive results show that ControlNet may facilitate
    wider applications to control image diffusion models.*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们提出了 ControlNet，这是一种神经网络架构，用于向大型、预训练的文本到图像扩散模型添加空间条件控制。ControlNet 锁定了生产就绪的大型扩散模型，并重复使用它们深度和稳健的编码层，这些层经过数十亿张图像的预训练，作为学习多样化条件控制的强大支撑。神经架构连接了“零卷积”（从零初始化的卷积层），逐渐增加参数，确保没有有害噪音会影响微调。我们使用
    Stable Diffusion 测试了各种条件控制，例如边缘、深度、分割、人体姿势等，使用单个或多个条件，有或没有提示。我们展示了 ControlNet
    的训练在小型（<50k）和大型（>1m）数据集上都很稳健。广泛的结果表明，ControlNet 可能促进更广泛的应用，以控制图像扩散模型。*'
- en: Loading from the original format
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从原始格式加载
- en: 'By default the [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)
    should be loaded with [from_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.from_pretrained),
    but it can also be loaded from the original format using `FromOriginalControlnetMixin.from_single_file`
    as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，应该使用 [from_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.from_pretrained)
    加载 [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)，但也可以使用
    `FromOriginalControlnetMixin.from_single_file` 从原始格式加载，如下所示：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ControlNetModel
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ControlNetModel
- en: '### `class diffusers.ControlNetModel`'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.ControlNetModel`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L111)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L111)'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parameters
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`in_channels` (`int`, defaults to 4) — The number of channels in the input
    sample.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_channels` (`int`, 默认为 4) — 输入样本中的通道数。'
- en: '`flip_sin_to_cos` (`bool`, defaults to `True`) — Whether to flip the sin to
    cos in the time embedding.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flip_sin_to_cos` (`bool`, 默认为 `True`) — 是否在时间嵌入中将 sin 翻转为 cos。'
- en: '`freq_shift` (`int`, defaults to 0) — The frequency shift to apply to the time
    embedding.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`freq_shift` (`int`, 默认为 0) — 应用于时间嵌入的频率偏移。'
- en: '`down_block_types` (`tuple[str]`, defaults to `("CrossAttnDownBlock2D", "CrossAttnDownBlock2D",
    "CrossAttnDownBlock2D", "DownBlock2D")`) — The tuple of downsample blocks to use.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`down_block_types` (`tuple[str]`, 默认为 `("CrossAttnDownBlock2D", "CrossAttnDownBlock2D",
    "CrossAttnDownBlock2D", "DownBlock2D")`) — 要使用的下采样块的元组。'
- en: '`only_cross_attention` (`Union[bool, Tuple[bool]]`, defaults to `False`) —'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`only_cross_attention` (`Union[bool, Tuple[bool]]`, 默认为 `False`) —'
- en: '`block_out_channels` (`tuple[int]`, defaults to `(320, 640, 1280, 1280)`) —
    The tuple of output channels for each block.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`block_out_channels` (`tuple[int]`, 默认为 `(320, 640, 1280, 1280)`) — 每个块的输出通道的元组。'
- en: '`layers_per_block` (`int`, defaults to 2) — The number of layers per block.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layers_per_block` (`int`, 默认为 2) — 每个块的层数。'
- en: '`downsample_padding` (`int`, defaults to 1) — The padding to use for the downsampling
    convolution.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`downsample_padding` (`int`, 默认为 1) — 用于下采样卷积的填充。'
- en: '`mid_block_scale_factor` (`float`, defaults to 1) — The scale factor to use
    for the mid block.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mid_block_scale_factor` (`float`, 默认为 1) — 用于中间块的比例因子。'
- en: '`act_fn` (`str`, defaults to “silu”) — The activation function to use.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`act_fn` (`str`, 默认为“silu”) — 要使用的激活函数。'
- en: '`norm_num_groups` (`int`, *optional*, defaults to 32) — The number of groups
    to use for the normalization. If None, normalization and activation layers is
    skipped in post-processing.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`norm_num_groups` (`int`, *可选*, 默认为 32) — 用于归一化的组数。如果为 None，则在后处理中跳过归一化和激活层。'
- en: '`norm_eps` (`float`, defaults to 1e-5) — The epsilon to use for the normalization.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`norm_eps` (`float`, 默认为 1e-5) — 用于归一化的 epsilon。'
- en: '`cross_attention_dim` (`int`, defaults to 1280) — The dimension of the cross
    attention features.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cross_attention_dim` (`int`, 默认为 1280) — 交叉注意力特征的维度。'
- en: '`transformer_layers_per_block` (`int` or `Tuple[int]`, *optional*, defaults
    to 1) — The number of transformer blocks of type `BasicTransformerBlock`. Only
    relevant for `~models.unet_2d_blocks.CrossAttnDownBlock2D`, `~models.unet_2d_blocks.CrossAttnUpBlock2D`,
    `~models.unet_2d_blocks.UNetMidBlock2DCrossAttn`.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transformer_layers_per_block` (`int` 或 `Tuple[int]`, *可选*, 默认为 1) — 类型为 `BasicTransformerBlock`
    的 transformer 块的数量。仅适用于 `~models.unet_2d_blocks.CrossAttnDownBlock2D`, `~models.unet_2d_blocks.CrossAttnUpBlock2D`,
    `~models.unet_2d_blocks.UNetMidBlock2DCrossAttn`。'
- en: '`encoder_hid_dim` (`int`, *optional*, defaults to None) — If `encoder_hid_dim_type`
    is defined, `encoder_hidden_states` will be projected from `encoder_hid_dim` dimension
    to `cross_attention_dim`.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_hid_dim` (`int`, *可选*, 默认为 None) — 如果定义了 `encoder_hid_dim_type`，则将从
    `encoder_hid_dim` 维度投影到 `cross_attention_dim`。'
- en: '`encoder_hid_dim_type` (`str`, *optional*, defaults to `None`) — If given,
    the `encoder_hidden_states` and potentially other embeddings are down-projected
    to text embeddings of dimension `cross_attention` according to `encoder_hid_dim_type`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_hid_dim_type` (`str`, *optional*, defaults to `None`) — 如果给定，`encoder_hidden_states`和可能的其他嵌入将根据`encoder_hid_dim_type`下投影到文本嵌入的维度`cross_attention`。'
- en: '`attention_head_dim` (`Union[int, Tuple[int]]`, defaults to 8) — The dimension
    of the attention heads.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_head_dim` (`Union[int, Tuple[int]]`, defaults to 8) — 注意力头的维度。'
- en: '`use_linear_projection` (`bool`, defaults to `False`) —'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_linear_projection` (`bool`, defaults to `False`) —'
- en: '`class_embed_type` (`str`, *optional*, defaults to `None`) — The type of class
    embedding to use which is ultimately summed with the time embeddings. Choose from
    None, `"timestep"`, `"identity"`, `"projection"`, or `"simple_projection"`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_embed_type` (`str`, *optional*, defaults to `None`) — 要使用的类嵌入类型，最终将与时间嵌入相加。选择从None、`"timestep"`、`"identity"`、`"projection"`或`"simple_projection"`。'
- en: '`addition_embed_type` (`str`, *optional*, defaults to `None`) — Configures
    an optional embedding which will be summed with the time embeddings. Choose from
    `None` or “text”. “text” will use the `TextTimeEmbedding` layer.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addition_embed_type` (`str`, *optional*, defaults to `None`) — 配置一个可选的嵌入，将与时间嵌入相加。选择从`None`或“text”。“text”将使用`TextTimeEmbedding`层。'
- en: '`num_class_embeds` (`int`, *optional*, defaults to 0) — Input dimension of
    the learnable embedding matrix to be projected to `time_embed_dim`, when performing
    class conditioning with `class_embed_type` equal to `None`.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_class_embeds` (`int`, *optional*, defaults to 0) — 可学习嵌入矩阵的输入维度，将被投影到`time_embed_dim`，当执行类条件化时，`class_embed_type`等于`None`。'
- en: '`upcast_attention` (`bool`, defaults to `False`) —'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upcast_attention` (`bool`, defaults to `False`) —'
- en: '`resnet_time_scale_shift` (`str`, defaults to `"default"`) — Time scale shift
    config for ResNet blocks (see `ResnetBlock2D`). Choose from `default` or `scale_shift`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resnet_time_scale_shift` (`str`, defaults to `"default"`) — ResNet块的时间尺度偏移配置（参见`ResnetBlock2D`）。选择从`default`或`scale_shift`。'
- en: '`projection_class_embeddings_input_dim` (`int`, *optional*, defaults to `None`)
    — The dimension of the `class_labels` input when `class_embed_type="projection"`.
    Required when `class_embed_type="projection"`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`projection_class_embeddings_input_dim` (`int`, *optional*, defaults to `None`)
    — 当`class_embed_type="projection"`时，`class_labels`输入的维度。在`class_embed_type="projection"`时需要。'
- en: '`controlnet_conditioning_channel_order` (`str`, defaults to `"rgb"`) — The
    channel order of conditional image. Will convert to `rgb` if it’s `bgr`.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controlnet_conditioning_channel_order` (`str`, defaults to `"rgb"`) — 条件图像的通道顺序。如果是`bgr`，将转换为`rgb`。 '
- en: '`conditioning_embedding_out_channels` (`tuple[int]`, *optional*, defaults to
    `(16, 32, 96, 256)`) — The tuple of output channel for each block in the `conditioning_embedding`
    layer.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conditioning_embedding_out_channels` (`tuple[int]`, *optional*, defaults to
    `(16, 32, 96, 256)`) — `conditioning_embedding`层中每个块的输出通道的元组。'
- en: '`global_pool_conditions` (`bool`, defaults to `False`) — TODO(Patrick) - unused
    parameter.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global_pool_conditions` (`bool`, defaults to `False`) — TODO(Patrick) - 未使用的参数。'
- en: '`addition_embed_type_num_heads` (`int`, defaults to 64) — The number of heads
    to use for the `TextTimeEmbedding` layer.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addition_embed_type_num_heads` (`int`, defaults to 64) — 用于`TextTimeEmbedding`层的头数。'
- en: A ControlNet model.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个ControlNet模型。
- en: '#### `forward`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L663)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L663)'
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample` (`torch.FloatTensor`) — The noisy input tensor.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 嘈杂的输入张量。'
- en: '`timestep` (`Union[torch.Tensor, float, int]`) — The number of timesteps to
    denoise an input.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep` (`Union[torch.Tensor, float, int]`) — 对输入进行去噪的时间步数。'
- en: '`encoder_hidden_states` (`torch.Tensor`) — The encoder hidden states.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_hidden_states` (`torch.Tensor`) — 编码器的隐藏状态。'
- en: '`controlnet_cond` (`torch.FloatTensor`) — The conditional input tensor of shape
    `(batch_size, sequence_length, hidden_size)`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controlnet_cond` (`torch.FloatTensor`) — 形状为`(batch_size, sequence_length,
    hidden_size)`的条件输入张量。'
- en: '`conditioning_scale` (`float`, defaults to `1.0`) — The scale factor for ControlNet
    outputs.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conditioning_scale` (`float`, defaults to `1.0`) — ControlNet输出的比例因子。'
- en: '`class_labels` (`torch.Tensor`, *optional*, defaults to `None`) — Optional
    class labels for conditioning. Their embeddings will be summed with the timestep
    embeddings.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_labels` (`torch.Tensor`, *optional*, defaults to `None`) — 可选的类标签，用于条件化。它们的嵌入将与时间步嵌入相加。'
- en: '`timestep_cond` (`torch.Tensor`, *optional*, defaults to `None`) — Additional
    conditional embeddings for timestep. If provided, the embeddings will be summed
    with the timestep_embedding passed through the `self.time_embedding` layer to
    obtain the final timestep embeddings.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep_cond` (`torch.Tensor`, *optional*, defaults to `None`) — 时间步的额外条件嵌入。如果提供，这些嵌入将与通过`self.time_embedding`层传递的时间步嵌入相加以获得最终的时间步嵌入。'
- en: '`attention_mask` (`torch.Tensor`, *optional*, defaults to `None`) — An attention
    mask of shape `(batch, key_tokens)` is applied to `encoder_hidden_states`. If
    `1` the mask is kept, otherwise if `0` it is discarded. Mask will be converted
    into a bias, which adds large negative values to the attention scores corresponding
    to “discard” tokens.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask` (`torch.Tensor`, *optional*, defaults to `None`) — 形状为`(batch,
    key_tokens)`的注意力掩码应用于`encoder_hidden_states`。如果为`1`，则保留掩码，否则如果为`0`，则丢弃。掩码将转换为偏置，将大的负值添加到对应于“丢弃”标记的注意力分数。'
- en: '`added_cond_kwargs` (`dict`) — Additional conditions for the Stable Diffusion
    XL UNet.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`added_cond_kwargs` (`dict`) — Stable Diffusion XL UNet的额外条件。'
- en: '`cross_attention_kwargs` (`dict[str]`, *optional*, defaults to `None`) — A
    kwargs dictionary that if specified is passed along to the `AttnProcessor`.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cross_attention_kwargs` (`dict[str]`, *optional*, defaults to `None`) — 如果指定，则传递给`AttnProcessor`的kwargs字典。'
- en: '`guess_mode` (`bool`, defaults to `False`) — In this mode, the ControlNet encoder
    tries its best to recognize the input content of the input even if you remove
    all prompts. A `guidance_scale` between 3.0 and 5.0 is recommended.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`guess_mode` (`bool`, defaults to `False`) — 在此模式下，ControlNet编码器尽最大努力识别输入内容，即使您删除所有提示。建议使用介于3.0和5.0之间的`guidance_scale`。'
- en: '`return_dict` (`bool`, defaults to `True`) — Whether or not to return a [ControlNetOutput](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.models.controlnet.ControlNetOutput)
    instead of a plain tuple.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict`（`bool`，默认为`True`）— 是否返回一个[ControlNetOutput](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.models.controlnet.ControlNetOutput)而不是一个普通的元组。'
- en: Returns
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[ControlNetOutput](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.models.controlnet.ControlNetOutput)
    **or** `tuple`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[ControlNetOutput](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.models.controlnet.ControlNetOutput)
    **或** `tuple`'
- en: If `return_dict` is `True`, a [ControlNetOutput](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.models.controlnet.ControlNetOutput)
    is returned, otherwise a tuple is returned where the first element is the sample
    tensor.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`return_dict`为`True`，则返回一个[ControlNetOutput](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.models.controlnet.ControlNetOutput)，否则返回一个元组，其中第一个元素是样本张量。
- en: The [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)
    forward method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)的前向方法。'
- en: '#### `from_unet`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `from_unet`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L444)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L444)'
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`unet` (`UNet2DConditionModel`) — The UNet model weights to copy to the [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel).
    All configuration options are also copied where applicable.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`unet`（`UNet2DConditionModel`）— 要复制到[ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)的UNet模型权重。在适用的情况下，还会复制所有配置选项。'
- en: Instantiate a [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)
    from [UNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.UNet2DConditionModel).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 从[UNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.UNet2DConditionModel)实例化一个[ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)。
- en: '#### `set_attention_slice`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `set_attention_slice`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L594)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L594)'
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`slice_size` (`str` or `int` or `list(int)`, *optional*, defaults to `"auto"`)
    — When `"auto"`, input to the attention heads is halved, so attention is computed
    in two steps. If `"max"`, maximum amount of memory is saved by running only one
    slice at a time. If a number is provided, uses as many slices as `attention_head_dim
    // slice_size`. In this case, `attention_head_dim` must be a multiple of `slice_size`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slice_size`（`str`或`int`或`list(int)`，*可选*，默认为`"auto"`）— 当为`"auto"`时，注意力头的输入减半，因此注意力在两个步骤中计算。如果为`"max"`，通过一次只运行一个切片来节省最大内存量。如果提供了一个数字，则使用`attention_head_dim
    // slice_size`个切片。在这种情况下，`attention_head_dim`必须是`slice_size`的倍数。'
- en: Enable sliced attention computation.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 启用切片注意力计算。
- en: When this option is enabled, the attention module splits the input tensor in
    slices to compute attention in several steps. This is useful for saving some memory
    in exchange for a small decrease in speed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此选项时，注意力模块将输入张量分片以在多个步骤中计算注意力。这对于节省一些内存以换取速度略微降低很有用。
- en: '#### `set_attn_processor`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `set_attn_processor`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L543)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L543)'
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`processor` (`dict` of `AttentionProcessor` or only `AttentionProcessor`) —
    The instantiated processor class or a dictionary of processor classes that will
    be set as the processor for **all** `Attention` layers.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`processor`（`AttentionProcessor`的`dict`或仅`AttentionProcessor`）— 实例化的处理器类或将设置为**所有**`Attention`层的处理器的处理器类字典。'
- en: If `processor` is a dict, the key needs to define the path to the corresponding
    cross attention processor. This is strongly recommended when setting trainable
    attention processors.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果`processor`是一个字典，则键需要定义相应的交叉注意力处理器的路径。在设置可训练的注意力处理器时，强烈建议这样做。
- en: Sets the attention processor to use to compute attention.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用于计算注意力的注意力处理器。
- en: '#### `set_default_attn_processor`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `set_default_attn_processor`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L578)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L578)'
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Disables custom attention processors and sets the default attention implementation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用自定义注意力处理器并设置默认的注意力实现。
- en: ControlNetOutput
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ControlNetOutput
- en: '### `class diffusers.models.controlnet.ControlNetOutput`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.models.controlnet.ControlNetOutput`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L46)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L46)'
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`down_block_res_samples` (`tuple[torch.Tensor]`) — A tuple of downsample activations
    at different resolutions for each downsampling block. Each tensor should be of
    shape `(batch_size, channel * resolution, height //resolution, width // resolution)`.
    Output can be used to condition the original UNet’s downsampling activations.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`down_block_res_samples`（`tuple[torch.Tensor]`）— 不同分辨率的每个下采样块的下采样激活的元组。每个张量的形状应为`(batch_size,
    channel * resolution, height //resolution, width // resolution)`。输出可用于对原始UNet的下采样激活进行条件化。'
- en: '`mid_down_block_re_sample` (`torch.Tensor`) — The activation of the midde block
    (the lowest sample resolution). Each tensor should be of shape `(batch_size, channel
    * lowest_resolution, height // lowest_resolution, width // lowest_resolution)`.
    Output can be used to condition the original UNet’s middle block activation.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mid_down_block_re_sample`（`torch.Tensor`）— 中间块（最低采样分辨率）的激活。每个张量的形状应为`(batch_size,
    channel * lowest_resolution, height // lowest_resolution, width // lowest_resolution)`。输出可用于对原始UNet的中间块激活进行条件化。'
- en: The output of [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)的输出。'
- en: FlaxControlNetModel
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FlaxControlNetModel
- en: '### `class diffusers.FlaxControlNetModel`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.FlaxControlNetModel`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet_flax.py#L103)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet_flax.py#L103)'
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Parameters
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample_size` (`int`, *optional*) — The size of the input sample.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample_size` (`int`, *optional*) — 输入样本的大小。'
- en: '`in_channels` (`int`, *optional*, defaults to 4) — The number of channels in
    the input sample.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_channels` (`int`, *optional*, 默认为4) — 输入样本中的通道数。'
- en: '`down_block_types` (`Tuple[str]`, *optional*, defaults to `("FlaxCrossAttnDownBlock2D",
    "FlaxCrossAttnDownBlock2D", "FlaxCrossAttnDownBlock2D", "FlaxDownBlock2D")`) —
    The tuple of downsample blocks to use.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`down_block_types` (`Tuple[str]`, *optional*, 默认为 `("FlaxCrossAttnDownBlock2D",
    "FlaxCrossAttnDownBlock2D", "FlaxCrossAttnDownBlock2D", "FlaxDownBlock2D")`) —
    要使用的下采样块的元组。'
- en: '`block_out_channels` (`Tuple[int]`, *optional*, defaults to `(320, 640, 1280,
    1280)`) — The tuple of output channels for each block.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`block_out_channels` (`Tuple[int]`, *optional*, 默认为 `(320, 640, 1280, 1280)`)
    — 每个块的输出通道的元组。'
- en: '`layers_per_block` (`int`, *optional*, defaults to 2) — The number of layers
    per block.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layers_per_block` (`int`, *optional*, 默认为2) — 每个块的层数。'
- en: '`attention_head_dim` (`int` or `Tuple[int]`, *optional*, defaults to 8) — The
    dimension of the attention heads.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_head_dim` (`int` 或 `Tuple[int]`, *optional*, 默认为8) — 注意力头的维度。'
- en: '`num_attention_heads` (`int` or `Tuple[int]`, *optional*) — The number of attention
    heads.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_attention_heads` (`int` 或 `Tuple[int]`, *optional*) — 注意力头的数量。'
- en: '`cross_attention_dim` (`int`, *optional*, defaults to 768) — The dimension
    of the cross attention features.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cross_attention_dim` (`int`, *optional*, 默认为768) — 交叉注意力特征的维度。'
- en: '`dropout` (`float`, *optional*, defaults to 0) — Dropout probability for down,
    up and bottleneck blocks.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dropout` (`float`, *optional*, 默认为0) — 下、上和瓶颈块的丢弃概率。'
- en: '`flip_sin_to_cos` (`bool`, *optional*, defaults to `True`) — Whether to flip
    the sin to cos in the time embedding.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flip_sin_to_cos` (`bool`, *optional*, 默认为 `True`) — 是否在时间嵌入中将 sin 翻转为 cos。'
- en: '`freq_shift` (`int`, *optional*, defaults to 0) — The frequency shift to apply
    to the time embedding.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`freq_shift` (`int`, *optional*, 默认为0) — 应用于时间嵌入的频率偏移。'
- en: '`controlnet_conditioning_channel_order` (`str`, *optional*, defaults to `rgb`)
    — The channel order of conditional image. Will convert to `rgb` if it’s `bgr`.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`controlnet_conditioning_channel_order` (`str`, *optional*, 默认为 `rgb`) — 条件图像的通道顺序。如果是
    `bgr`，将转换为 `rgb`。'
- en: '`conditioning_embedding_out_channels` (`tuple`, *optional*, defaults to `(16,
    32, 96, 256)`) — The tuple of output channel for each block in the `conditioning_embedding`
    layer.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conditioning_embedding_out_channels` (`tuple`, *optional*, 默认为 `(16, 32, 96,
    256)`) — `conditioning_embedding` 层中每个块的输出通道的元组。'
- en: A ControlNet model.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 ControlNet 模型。
- en: This model inherits from [FlaxModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.FlaxModelMixin).
    Check the superclass documentation for it’s generic methods implemented for all
    models (such as downloading or saving).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型继承自 [FlaxModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.FlaxModelMixin)。检查超类文档以获取所有模型实现的通用方法（如下载或保存）。
- en: This model is also a Flax Linen [`flax.linen.Module`](https://flax.readthedocs.io/en/latest/flax.linen.html#module)
    subclass. Use it as a regular Flax Linen module and refer to the Flax documentation
    for all matters related to its general usage and behavior.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型也是一个 Flax Linen [`flax.linen.Module`](https://flax.readthedocs.io/en/latest/flax.linen.html#module)
    子类。将其用作常规的 Flax Linen 模块，并参考 Flax 文档以获取有关其一般用法和行为的所有事项。
- en: 'Inherent JAX features such as the following are supported:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 支持以下内在的 JAX 特性：
- en: '[Just-In-Time (JIT) compilation](https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[即时（JIT）编译](https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit)'
- en: '[Automatic Differentiation](https://jax.readthedocs.io/en/latest/jax.html#automatic-differentiation)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自动微分](https://jax.readthedocs.io/en/latest/jax.html#automatic-differentiation)'
- en: '[Vectorization](https://jax.readthedocs.io/en/latest/jax.html#vectorization-vmap)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[向量化](https://jax.readthedocs.io/en/latest/jax.html#vectorization-vmap)'
- en: '[Parallelization](https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[并行化](https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap)'
- en: FlaxControlNetOutput
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FlaxControlNetOutput
- en: '### `class diffusers.models.controlnet_flax.FlaxControlNetOutput`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.models.controlnet_flax.FlaxControlNetOutput`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet_flax.py#L33)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet_flax.py#L33)'
- en: '[PRE9]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Parameters
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`down_block_res_samples` (`jnp.ndarray`) —'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`down_block_res_samples` (`jnp.ndarray`) —'
- en: '`mid_block_res_sample` (`jnp.ndarray`) —'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mid_block_res_sample` (`jnp.ndarray`) —'
- en: The output of [FlaxControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.FlaxControlNetModel).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[FlaxControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.FlaxControlNetModel)
    的输出。'
- en: '#### `replace`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `replace`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/flax/struct.py#L111)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/flax/struct.py#L111)'
- en: '[PRE10]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: “Returns a new object replacing the specified fields with new values.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: “返回一个新对象，用新值替换指定字段。
