- en: 'Class: HfInferenceEndpoint'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '类: HfInferenceEndpoint'
- en: 'Original text: [https://huggingface.co/docs/huggingface.js/inference/classes/HfInferenceEndpoint](https://huggingface.co/docs/huggingface.js/inference/classes/HfInferenceEndpoint)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://huggingface.co/docs/huggingface.js/inference/classes/HfInferenceEndpoint](https://huggingface.co/docs/huggingface.js/inference/classes/HfInferenceEndpoint)'
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Hierarchy
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 层次结构
- en: '`TaskWithNoAccessTokenNoModel`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`无访问令牌无模型任务`'
- en: ↳ **`HfInferenceEndpoint`**
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ↳ **`HfInferenceEndpoint`**
- en: Constructors
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构造函数
- en: constructor
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构造函数
- en: • `new HfInferenceEndpoint`(`endpointUrl`, `accessToken?`, `defaultOptions?`)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: • `new HfInferenceEndpoint`(`endpointUrl`, `accessToken?`, `defaultOptions?`)
- en: Parameters
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Default value |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 默认值 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `endpointUrl` | `string` | `undefined` |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `endpointUrl` | `字符串` | `未定义` |'
- en: '| `accessToken` | `string` | `""` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `accessToken` | `字符串` | `""` |'
- en: '| `defaultOptions` | [`Options`](../interfaces/Options) | `{}` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `defaultOptions` | [`选项`](../interfaces/Options) | `{}` |'
- en: Defined in
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/HfInference.ts:48](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/HfInference.ts#L48)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/HfInference.ts:48](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/HfInference.ts#L48)'
- en: Properties
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: audioClassification
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音频分类
- en: '• `audioClassification`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`AudioClassificationReturn`](../modules#audioclassificationreturn)>'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '• `音频分类`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`: [`选项`](../interfaces/Options))
    => `Promise`<[`音频分类返回`](../modules#audioclassificationreturn)>'
- en: Type declaration
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`AudioClassificationReturn`](../modules#audioclassificationreturn)>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`音频分类返回`](../modules#audioclassificationreturn)>'
- en: Parameters
  id: totrans-22
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `对象` | - |'
- en: '| `args.data` | `Blob` &#124; `ArrayBuffer` | Binary audio data |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `args.data` | `Blob` &#124; `ArrayBuffer` | 二进制音频数据 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`选项`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-28
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`AudioClassificationReturn`](../modules#audioclassificationreturn)>'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`音频分类返回`](../modules#audioclassificationreturn)>'
- en: Defined in
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/audio/audioClassification.ts:30](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/audioClassification.ts#L30)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/audio/audioClassification.ts:30](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/audioClassification.ts#L30)'
- en: '* * *'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: audioToAudio
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音频到音频
- en: '• `audioToAudio`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`AudioToAudioReturn`](../modules#audiotoaudioreturn)>'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '• `音频到音频`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`: [`选项`](../interfaces/Options))
    => `Promise`<[`音频到音频返回`](../modules#audiotoaudioreturn)>'
- en: Type declaration
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`AudioToAudioReturn`](../modules#audiotoaudioreturn)>'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`音频到音频返回`](../modules#audiotoaudioreturn)>'
- en: Parameters
  id: totrans-37
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `对象` | - |'
- en: '| `args.data` | `Blob` &#124; `ArrayBuffer` | Binary audio data |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `args.data` | `Blob` &#124; `ArrayBuffer` | 二进制音频数据 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`选项`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`AudioToAudioReturn`](../modules#audiotoaudioreturn)>'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`音频到音频返回`](../modules#audiotoaudioreturn)>'
- en: Defined in
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/audio/audioToAudio.ts:35](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/audioToAudio.ts#L35)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/audio/audioToAudio.ts:35](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/audioToAudio.ts#L35)'
- en: '* * *'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: automaticSpeechRecognition
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动语音识别
- en: '• `automaticSpeechRecognition`: (`args`: { `data`: `Blob` | `ArrayBuffer` },
    `options?`: [`Options`](../interfaces/Options)) => `Promise`<[`AutomaticSpeechRecognitionOutput`](../interfaces/AutomaticSpeechRecognitionOutput)>'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '• `自动语音识别`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`: [`选项`](../interfaces/Options))
    => `Promise`<[`自动语音识别输出`](../interfaces/AutomaticSpeechRecognitionOutput)>'
- en: Type declaration
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`AutomaticSpeechRecognitionOutput`](../interfaces/AutomaticSpeechRecognitionOutput)>'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`自动语音识别输出`](../interfaces/AutomaticSpeechRecognitionOutput)>'
- en: Parameters
  id: totrans-52
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `对象` | - |'
- en: '| `args.data` | `Blob` &#124; `ArrayBuffer` | Binary audio data |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `args.data` | `Blob` &#124; `ArrayBuffer` | 二进制音频数据 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`选项`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`AutomaticSpeechRecognitionOutput`](../interfaces/AutomaticSpeechRecognitionOutput)>'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`自动语音识别输出`](../interfaces/AutomaticSpeechRecognitionOutput)>'
- en: Defined in
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/audio/automaticSpeechRecognition.ts:23](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/automaticSpeechRecognition.ts#L23)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/audio/automaticSpeechRecognition.ts:23](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/automaticSpeechRecognition.ts#L23)'
- en: '* * *'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: conversational
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对话
- en: '• `conversational`: (`args`: { `inputs`: { `generated_responses?`: `string`[]
    ; `past_user_inputs?`: `string`[] ; `text`: `string` } ; `parameters?`: { `max_length?`:
    `number` ; `max_time?`: `number` ; `min_length?`: `number` ; `repetition_penalty?`:
    `number` ; `temperature?`: `number` ; `top_k?`: `number` ; `top_p?`: `number`
    } }, `options?`: [`Options`](../interfaces/Options)) => `Promise`<[`ConversationalOutput`](../interfaces/ConversationalOutput)>'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '• `对话`: (`args`: { `inputs`: { `generated_responses?`: `string`[] ; `past_user_inputs?`:
    `string`[] ; `text`: `string` } ; `parameters?`: { `max_length?`: `number` ; `max_time?`:
    `number` ; `min_length?`: `number` ; `repetition_penalty?`: `number` ; `temperature?`:
    `number` ; `top_k?`: `number` ; `top_p?`: `number` } }, `options?`: [`选项`](../interfaces/Options))
    => `Promise`<[`对话输出`](../interfaces/ConversationalOutput)>'
- en: Type declaration
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`ConversationalOutput`](../interfaces/ConversationalOutput)>'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`对话输出`](../interfaces/ConversationalOutput)>'
- en: Parameters
  id: totrans-67
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `对象` | - |'
- en: '| `args.inputs` | `Object` | - |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `对象` | - |'
- en: '| `args.inputs.generated_responses?` | `string`[] | A list of strings corresponding
    to the earlier replies from the model. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.generated_responses?` | `string`[] | 一个字符串列表，对应模型先前的回复。 |'
- en: '| `args.inputs.past_user_inputs?` | `string`[] | A list of strings corresponding
    to the earlier replies from the user. Should be of the same length of generated_responses.
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.past_user_inputs?` | `string`[] | 一个字符串列表，对应用户先前的回复。应该与生成的回复长度相同。
    |'
- en: '| `args.inputs.text` | `string` | The last input from the user in the conversation.
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.text` | `string` | 会话中用户的最后输入。 |'
- en: '| `args.parameters?` | `Object` | - |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters?` | `Object` | - |'
- en: '| `args.parameters.max_length?` | `number` | (Default: None). Integer to define
    the maximum length in tokens of the output summary. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.max_length?` | `number` | (默认: 无). 整数，定义输出摘要的最大标记长度。 |'
- en: '| `args.parameters.max_time?` | `number` | (Default: None). Float (0-120.0).
    The amount of time in seconds that the query should take maximum. Network can
    cause some overhead so it will be a soft limit. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.max_time?` | `number` | (默认: 无). 浮点数 (0-120.0). 查询应该最多花费的时间量，以秒为单位。网络可能会导致一些开销，因此这将是一个软限制。
    |'
- en: '| `args.parameters.min_length?` | `number` | (Default: None). Integer to define
    the minimum length in tokens of the output summary. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.min_length?` | `number` | (默认: 无). 整数，定义输出摘要的最小标记长度。 |'
- en: '| `args.parameters.repetition_penalty?` | `number` | (Default: None). Float
    (0.0-100.0). The more a token is used within generation the more it is penalized
    to not be picked in successive generation passes. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.repetition_penalty?` | `number` | (默认: 无). 浮点数 (0.0-100.0).
    在生成过程中一个标记被使用得越多，它在后续生成过程中被惩罚的程度就越大。 |'
- en: '| `args.parameters.temperature?` | `number` | (Default: 1.0). Float (0.0-100.0).
    The temperature of the sampling operation. 1 means regular sampling, 0 means always
    take the highest score, 100.0 is getting closer to uniform probability. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.temperature?` | `number` | (默认: 1.0). 浮点数 (0.0-100.0). 采样操作的温度。1表示常规采样，0表示始终选择最高分数，100.0接近均匀概率。
    |'
- en: '| `args.parameters.top_k?` | `number` | (Default: None). Integer to define
    the top tokens considered within the sample operation to create new text. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.top_k?` | `number` | (默认: 无). 整数，定义在样本操作中考虑的前k个标记，以创建新文本。
    |'
- en: '| `args.parameters.top_p?` | `number` | (Default: None). Float to define the
    tokens that are within the sample operation of text generation. Add tokens in
    the sample for more probable to least probable until the sum of the probabilities
    is greater than top_p. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.top_p?` | `number` | (默认: 无). 浮点数，定义在文本生成的样本操作中的标记。将标记添加到样本中，以使概率从最可能到最不可能，直到概率之和大于top_p。
    |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-84
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`ConversationalOutput`](../interfaces/ConversationalOutput)>'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`ConversationalOutput`](../interfaces/ConversationalOutput)>'
- en: Defined in
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/nlp/conversational.ts:65](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/conversational.ts#L65)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/conversational.ts:65](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/conversational.ts#L65)'
- en: '* * *'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: documentQuestionAnswering
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: documentQuestionAnswering
- en: '• `documentQuestionAnswering`: (`args`: { `inputs`: { `image`: `Blob` | `ArrayBuffer`
    ; `question`: `string` } }, `options?`: [`Options`](../interfaces/Options)) =>
    `Promise`<[`DocumentQuestionAnsweringOutput`](../interfaces/DocumentQuestionAnsweringOutput)>'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '• `documentQuestionAnswering`: (`args`: { `inputs`: { `image`: `Blob` | `ArrayBuffer`
    ; `question`: `string` } }, `options?`: [`Options`](../interfaces/Options)) =>
    `Promise`<[`DocumentQuestionAnsweringOutput`](../interfaces/DocumentQuestionAnsweringOutput)>'
- en: Type declaration
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`DocumentQuestionAnsweringOutput`](../interfaces/DocumentQuestionAnsweringOutput)>'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`DocumentQuestionAnsweringOutput`](../interfaces/DocumentQuestionAnsweringOutput)>'
- en: Parameters
  id: totrans-93
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `Object` | - |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `Object` | - |'
- en: '| `args.inputs.image` | `Blob` &#124; `ArrayBuffer` | Raw image You can use
    native `File` in browsers, or `new Blob([buffer])` in node, or for a base64 image
    `new Blob([btoa(base64String)])`, or even `await (await fetch(''...)).blob()`
    |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.image` | `Blob` &#124; `ArrayBuffer` | 原始图像。您可以在浏览器中使用原生的`File`，或在节点中使用`new
    Blob([buffer])`，或对于base64图像`new Blob([btoa(base64String)])`，甚至`await (await fetch(''...)).blob()`
    |'
- en: '| `args.inputs.question` | `string` | - |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.question` | `string` | - |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-101
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`DocumentQuestionAnsweringOutput`](../interfaces/DocumentQuestionAnsweringOutput)>'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`DocumentQuestionAnsweringOutput`](../interfaces/DocumentQuestionAnsweringOutput)>'
- en: Defined in
  id: totrans-103
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/multimodal/documentQuestionAnswering.ts:42](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/multimodal/documentQuestionAnswering.ts#L42)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/multimodal/documentQuestionAnswering.ts:42](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/multimodal/documentQuestionAnswering.ts#L42)'
- en: '* * *'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: featureExtraction
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: featureExtraction
- en: '• `featureExtraction`: (`args`: { `inputs`: `string` | `string`[] }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`FeatureExtractionOutput`](../modules#featureextractionoutput)>'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '• `featureExtraction`: (`args`: { `inputs`: `string` | `string`[] }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`FeatureExtractionOutput`](../modules#featureextractionoutput)>'
- en: Type declaration
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`FeatureExtractionOutput`](../modules#featureextractionoutput)>'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`FeatureExtractionOutput`](../modules#featureextractionoutput)>'
- en: Parameters
  id: totrans-110
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `string` &#124; `string`[] | The inputs is a string or a
    list of strings to get the features from. inputs: “That is a happy person”, |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` &#124; `string`[] | 输入是一个字符串或一个字符串列表，用于获取特征。输入:
    “那是一个快乐的人”， |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-116
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`FeatureExtractionOutput`](../modules#featureextractionoutput)>'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`FeatureExtractionOutput`](../modules#featureextractionoutput)>'
- en: Defined in
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/nlp/featureExtraction.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/featureExtraction.ts#L24)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/featureExtraction.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/featureExtraction.ts#L24)'
- en: '* * *'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: fillMask
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: fillMask
- en: '• `fillMask`: (`args`: { `inputs`: `string` }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`FillMaskOutput`](../modules#fillmaskoutput)>'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '• `fillMask`: (`args`: { `inputs`: `string` }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`FillMaskOutput`](../modules#fillmaskoutput)>'
- en: Type declaration
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`FillMaskOutput`](../modules#fillmaskoutput)>'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`FillMaskOutput`](../modules#fillmaskoutput)>'
- en: Parameters
  id: totrans-125
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 |'
- en: '| :-- | :-- |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| `args` | `Object` |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` |'
- en: '| `args.inputs` | `string` |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` |'
- en: '| `options?` | [`Options`](../interfaces/Options) |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) |'
- en: Returns
  id: totrans-131
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`FillMaskOutput`](../modules#fillmaskoutput)>'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`FillMaskOutput`](../modules#fillmaskoutput)>'
- en: Defined in
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/nlp/fillMask.ts:31](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/fillMask.ts#L31)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/fillMask.ts:31](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/fillMask.ts#L31)'
- en: '* * *'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageClassification
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageClassification
- en: '• `imageClassification`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`ImageClassificationOutput`](../modules#imageclassificationoutput)>'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '• `imageClassification`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`ImageClassificationOutput`](../modules#imageclassificationoutput)>'
- en: Type declaration
  id: totrans-138
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`ImageClassificationOutput`](../modules#imageclassificationoutput)>'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`ImageClassificationOutput`](../modules#imageclassificationoutput)>'
- en: Parameters
  id: totrans-140
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.data` | `Blob` &#124; `ArrayBuffer` | Binary image data |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| `args.data` | `Blob` &#124; `ArrayBuffer` | 二进制图像数据 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-146
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`ImageClassificationOutput`](../modules#imageclassificationoutput)>'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`ImageClassificationOutput`](../modules#imageclassificationoutput)>'
- en: Defined in
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/cv/imageClassification.ts:29](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageClassification.ts#L29)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/cv/imageClassification.ts:29](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageClassification.ts#L29)'
- en: '* * *'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageSegmentation
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图像分割
- en: '• `imageSegmentation`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`ImageSegmentationOutput`](../modules#imagesegmentationoutput)>'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '• `imageSegmentation`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`ImageSegmentationOutput`](../modules#imagesegmentationoutput)>'
- en: Type declaration
  id: totrans-153
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`ImageSegmentationOutput`](../modules#imagesegmentationoutput)>'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`ImageSegmentationOutput`](../modules#imagesegmentationoutput)>'
- en: Parameters
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.data` | `Blob` &#124; `ArrayBuffer` | Binary image data |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `args.data` | `Blob` &#124; `ArrayBuffer` | 二进制图像数据 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-161
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`ImageSegmentationOutput`](../modules#imagesegmentationoutput)>'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`ImageSegmentationOutput`](../modules#imagesegmentationoutput)>'
- en: Defined in
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/cv/imageSegmentation.ts:33](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageSegmentation.ts#L33)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/cv/imageSegmentation.ts:33](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageSegmentation.ts#L33)'
- en: '* * *'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageToImage
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageToImage
- en: '• `imageToImage`: (`args`: { `inputs`: `Blob` | `ArrayBuffer` ; `parameters?`:
    { `guess_mode?`: `boolean` ; `guidance_scale?`: `number` ; `height?`: `number`
    ; `negative_prompt?`: `string` ; `num_inference_steps?`: `number` ; `prompt?`:
    `string` ; `strength?`: `number` ; `width?`: `number` } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<`Blob`>'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '• `imageToImage`: (`args`: { `inputs`: `Blob` | `ArrayBuffer` ; `parameters?`:
    { `guess_mode?`: `boolean` ; `guidance_scale?`: `number` ; `height?`: `number`
    ; `negative_prompt?`: `string` ; `num_inference_steps?`: `number` ; `prompt?`:
    `string` ; `strength?`: `number` ; `width?`: `number` } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<`Blob`>'
- en: Type declaration
  id: totrans-168
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<`Blob`>'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<`Blob`>'
- en: Parameters
  id: totrans-170
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `Blob` &#124; `ArrayBuffer` | The initial image condition
    |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `Blob` &#124; `ArrayBuffer` | 初始图像条件 |'
- en: '| `args.parameters?` | `Object` | - |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters?` | `Object` | - |'
- en: '| `args.parameters.guess_mode?` | `boolean` | guess_mode only works for ControlNet
    models, defaults to False In this mode, the ControlNet encoder will try best to
    recognize the content of the input image even if you remove all prompts. The `guidance_scale`
    between 3.0 and 5.0 is recommended. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.guess_mode?` | `boolean` | 猜测模式仅适用于ControlNet模型，默认为False，在此模式下，ControlNet编码器将尽力识别输入图像的内容，即使您删除所有提示。建议在3.0到5.0之间的`guidance_scale`。
    |'
- en: '| `args.parameters.guidance_scale?` | `number` | Guidance scale: Higher guidance
    scale encourages to generate images that are closely linked to the text `prompt`,
    usually at the expense of lower image quality. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.guidance_scale?` | `number` | 引导比例：更高的引导比例鼓励生成与文本“提示”紧密相关的图像，通常以降低图像质量为代价。
    |'
- en: '| `args.parameters.height?` | `number` | The height in pixels of the generated
    image |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.height?` | `number` | 生成图像的像素高度 |'
- en: '| `args.parameters.negative_prompt?` | `string` | An optional negative prompt
    for the image generation |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.negative_prompt?` | `string` | 用于图像生成的可选负面提示 |'
- en: '| `args.parameters.num_inference_steps?` | `number` | The number of denoising
    steps. More denoising steps usually lead to a higher quality image at the expense
    of slower inference. |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.num_inference_steps?` | `number` | 降噪步骤的数量。更多的降噪步骤通常会导致更高质量的图像，但会降低推理速度。
    |'
- en: '| `args.parameters.prompt?` | `string` | The text prompt to guide the image
    generation. |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.prompt?` | `字符串` | 引导图像生成的文本提示。 |'
- en: '| `args.parameters.strength?` | `number` | strengh param only works for SD
    img2img and alt diffusion img2img models Conceptually, indicates how much to transform
    the reference `image`. Must be between 0 and 1\. `image` will be used as a starting
    point, adding more noise to it the larger the `strength`. The number of denoising
    steps depends on the amount of noise initially added. When `strength` is 1, added
    noise will be maximum and the denoising process will run for the full number of
    iterations specified in `num_inference_steps`. A value of 1, therefore, essentially
    ignores `image`. |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.strength?` | `数字` | 强度参数仅适用于SD img2img和alt扩散img2img模型。在概念上，指示要转换参考`图像`的程度。必须在0和1之间。`图像`将被用作起点，添加更多噪音，`强度`越大。去噪步骤的数量取决于最初添加的噪音量。当`强度`为1时，添加的噪音将是最大的，并且去噪过程将运行指定的`num_inference_steps`的完整迭代次数。因此，值为1基本上忽略了`图像`。
    |'
- en: '| `args.parameters.width?` | `number` | The width in pixels of the generated
    image |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.width?` | `数字` | 生成图像的像素宽度 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `选项？` | [`选项`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-185
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<`Blob`>'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<`Blob`>'
- en: Defined in
  id: totrans-187
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/cv/imageToImage.ts:61](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageToImage.ts#L61)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/cv/imageToImage.ts:61](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageToImage.ts#L61)'
- en: '* * *'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageToText
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageToText
- en: '• `imageToText`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`ImageToTextOutput`](../interfaces/ImageToTextOutput)>'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: • `imageToText`：(`参数`：{ `数据`：`Blob` | `ArrayBuffer` }, `选项？`：[`选项`](../interfaces/Options))
    => `Promise`<[`图像到文本输出`](../interfaces/ImageToTextOutput]>
- en: Type declaration
  id: totrans-192
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`ImageToTextOutput`](../interfaces/ImageToTextOutput)>'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`参数`，`选项？`): `Promise`<[`图像到文本输出`](../interfaces/ImageToTextOutput)>'
- en: Parameters
  id: totrans-194
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `对象` | - |'
- en: '| `args.data` | `Blob` &#124; `ArrayBuffer` | Binary image data |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `args.data` | `Blob` &#124; `ArrayBuffer` | 二进制图像数据 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `选项？` | [`选项`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-200
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`ImageToTextOutput`](../interfaces/ImageToTextOutput)>'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`图像到文本输出`](../interfaces/ImageToTextOutput)>'
- en: Defined in
  id: totrans-202
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/cv/imageToText.ts:22](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageToText.ts#L22)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/cv/imageToText.ts:22](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageToText.ts#L22)'
- en: '* * *'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: objectDetection
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: objectDetection
- en: '• `objectDetection`: (`args`: { `data`: `Blob` | `ArrayBuffer` }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`ObjectDetectionOutput`](../modules#objectdetectionoutput)>'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: • `objectDetection`：(`参数`：{ `数据`：`Blob` | `ArrayBuffer` }, `选项？`：[`选项`](../interfaces/Options))
    => `Promise`<[`对象检测输出`](../modules#objectdetectionoutput)>
- en: Type declaration
  id: totrans-207
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`ObjectDetectionOutput`](../modules#objectdetectionoutput)>'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`参数`，`选项？`): `Promise`<[`对象检测输出`](../modules#objectdetectionoutput)>'
- en: Parameters
  id: totrans-209
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `对象` | - |'
- en: '| `args.data` | `Blob` &#124; `ArrayBuffer` | Binary image data |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `args.data` | `Blob` &#124; `ArrayBuffer` | 二进制图像数据 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `选项？` | [`选项`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-215
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`ObjectDetectionOutput`](../modules#objectdetectionoutput)>'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`对象检测输出`](../modules#objectdetectionoutput)>'
- en: Defined in
  id: totrans-217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/cv/objectDetection.ts:39](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/objectDetection.ts#L39)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/cv/objectDetection.ts:39](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/objectDetection.ts#L39)'
- en: '* * *'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: questionAnswering
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: questionAnswering
- en: '• `questionAnswering`: (`args`: { `inputs`: { `context`: `string` ; `question`:
    `string` } }, `options?`: [`Options`](../interfaces/Options)) => `Promise`<[`QuestionAnsweringOutput`](../interfaces/QuestionAnsweringOutput)>'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: • `questionAnswering`：(`参数`：{ `输入`：{ `上下文`：`字符串` ; `问题`：`字符串` } }, `选项？`：[`选项`](../interfaces/Options))
    => `Promise`<[`问答输出`](../interfaces/QuestionAnsweringOutput)>
- en: Type declaration
  id: totrans-222
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`QuestionAnsweringOutput`](../interfaces/QuestionAnsweringOutput)>'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`参数`，`选项？`): `Promise`<[`问答输出`](../interfaces/QuestionAnsweringOutput)>'
- en: Parameters
  id: totrans-224
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 |'
- en: '| :-- | :-- |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| `args` | `Object` |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `对象` |'
- en: '| `args.inputs` | `Object` |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `对象` |'
- en: '| `args.inputs.context` | `string` |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.context` | `字符串` |'
- en: '| `args.inputs.question` | `string` |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.question` | `字符串` |'
- en: '| `options?` | [`Options`](../interfaces/Options) |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `选项？` | [`选项`](../interfaces/Options) |'
- en: Returns
  id: totrans-232
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`QuestionAnsweringOutput`](../interfaces/QuestionAnsweringOutput)>'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`问答输出`](../interfaces/QuestionAnsweringOutput)>'
- en: Defined in
  id: totrans-234
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/nlp/questionAnswering.ts:34](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/questionAnswering.ts#L34)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/questionAnswering.ts:34](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/questionAnswering.ts#L34)'
- en: '* * *'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: request
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 请求
- en: '• `request`: (`args`: { `data`: `Blob` | `ArrayBuffer` ; `parameters?`: `Record`<`string`,
    `unknown`> } | { `inputs`: `unknown` ; `parameters?`: `Record`<`string`, `unknown`>
    }, `options?`: [`Options`](../interfaces/Options) & { `task?`: `string` ; `taskHint?`:
    [`InferenceTask`](../modules#inferencetask) }) => `Promise`<`unknown`>'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: • `请求`：(`参数`：{ `数据`：`Blob` | `ArrayBuffer` ; `参数？`：`Record`<`字符串`，`未知`> } |
    { `输入`：`未知` ; `参数？`：`Record`<`字符串`，`未知`> }，`选项？`：[`选项`](../interfaces/Options)
    & { `任务？`：`字符串` ; `任务提示？`：[`推断任务`](../modules#inferencetask) }) => `Promise`<`未知`>
- en: Type declaration
  id: totrans-239
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<`unknown`>'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`参数`，`选项？`): `Promise`<`未知`>'
- en: Parameters
  id: totrans-241
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 |'
- en: '| :-- | :-- |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| `args` | { `data`: `Blob` &#124; `ArrayBuffer` ; `parameters?`: `Record`<`string`,
    `unknown`> } &#124; { `inputs`: `unknown` ; `parameters?`: `Record`<`string`,
    `unknown`> } |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `args` | { `data`: `Blob` &#124; `ArrayBuffer` ; `parameters?`: `Record`<`string`,
    `unknown`> } &#124; { `inputs`: `unknown` ; `parameters?`: `Record`<`string`,
    `unknown`> } |'
- en: '| `options?` | [`Options`](../interfaces/Options) & { `task?`: `string` ; `taskHint?`:
    [`InferenceTask`](../modules#inferencetask) } |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) & { `task?`: `string` ; `taskHint?`:
    [`InferenceTask`](../modules#inferencetask) } |'
- en: Returns
  id: totrans-246
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<`unknown`>'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<`unknown`>'
- en: Defined in
  id: totrans-248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/custom/request.ts:7](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/custom/request.ts#L7)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/custom/request.ts:7](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/custom/request.ts#L7)'
- en: '* * *'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: sentenceSimilarity
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: sentenceSimilarity
- en: '• `sentenceSimilarity`: (`args`: { `inputs`: `Record`<`string`, `unknown`>
    | `Record`<`string`, `unknown`>[] }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`SentenceSimilarityOutput`](../modules#sentencesimilarityoutput)>'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '• `sentenceSimilarity`: (`args`: { `inputs`: `Record`<`string`, `unknown`>
    | `Record`<`string`, `unknown`>[] }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`SentenceSimilarityOutput`](../modules#sentencesimilarityoutput)>'
- en: Type declaration
  id: totrans-253
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`SentenceSimilarityOutput`](../modules#sentencesimilarityoutput)>'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`SentenceSimilarityOutput`](../modules#sentencesimilarityoutput)>'
- en: Parameters
  id: totrans-255
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `Record`<`string`, `unknown`> &#124; `Record`<`string`, `unknown`>[]
    | The inputs vary based on the model. For example when using sentence-transformers/paraphrase-xlm-r-multilingual-v1
    the inputs will have a `source_sentence` string and a `sentences` array of strings
    |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `Record`<`string`, `unknown`> &#124; `Record`<`string`, `unknown`>[]
    | 输入根据模型而异。例如，当使用sentence-transformers/paraphrase-xlm-r-multilingual-v1时，输入将包含一个`source_sentence`字符串和一个字符串数组`sentences`
    |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-261
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`SentenceSimilarityOutput`](../modules#sentencesimilarityoutput)>'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`SentenceSimilarityOutput`](../modules#sentencesimilarityoutput)>'
- en: Defined in
  id: totrans-263
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/nlp/sentenceSimilarity.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/sentenceSimilarity.ts#L24)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/sentenceSimilarity.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/sentenceSimilarity.ts#L24)'
- en: '* * *'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: streamingRequest
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: streamingRequest
- en: '• `streamingRequest`: (`args`: { `data`: `Blob` | `ArrayBuffer` ; `parameters?`:
    `Record`<`string`, `unknown`> } | { `inputs`: `unknown` ; `parameters?`: `Record`<`string`,
    `unknown`> }, `options?`: [`Options`](../interfaces/Options) & { `task?`: `string`
    ; `taskHint?`: [`InferenceTask`](../modules#inferencetask) }) => `AsyncGenerator`<`unknown`,
    `any`, `unknown`>'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '• `streamingRequest`: (`args`: { `data`: `Blob` | `ArrayBuffer` ; `parameters?`:
    `Record`<`string`, `unknown`> } | { `inputs`: `unknown` ; `parameters?`: `Record`<`string`,
    `unknown`> }, `options?`: [`Options`](../interfaces/Options) & { `task?`: `string`
    ; `taskHint?`: [`InferenceTask`](../modules#inferencetask) }) => `AsyncGenerator`<`unknown`,
    `any`, `unknown`>'
- en: Type declaration
  id: totrans-268
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `AsyncGenerator`<`unknown`, `any`, `unknown`>'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `AsyncGenerator`<`unknown`, `any`, `unknown`>'
- en: Parameters
  id: totrans-270
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 |'
- en: '| :-- | :-- |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| `args` | { `data`: `Blob` &#124; `ArrayBuffer` ; `parameters?`: `Record`<`string`,
    `unknown`> } &#124; { `inputs`: `unknown` ; `parameters?`: `Record`<`string`,
    `unknown`> } |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `args` | { `data`: `Blob` &#124; `ArrayBuffer` ; `parameters?`: `Record`<`string`,
    `unknown`> } &#124; { `inputs`: `unknown` ; `parameters?`: `Record`<`string`,
    `unknown`> } |'
- en: '| `options?` | [`Options`](../interfaces/Options) & { `task?`: `string` ; `taskHint?`:
    [`InferenceTask`](../modules#inferencetask) } |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) & { `task?`: `string` ; `taskHint?`:
    [`InferenceTask`](../modules#inferencetask) } |'
- en: Returns
  id: totrans-275
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`AsyncGenerator`<`unknown`, `any`, `unknown`>'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`AsyncGenerator`<`unknown`, `any`, `unknown`>'
- en: Defined in
  id: totrans-277
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/custom/streamingRequest.ts:9](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/custom/streamingRequest.ts#L9)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/custom/streamingRequest.ts:9](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/custom/streamingRequest.ts#L9)'
- en: '* * *'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: summarization
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: summarization
- en: '• `summarization`: (`args`: { `inputs`: `string` ; `parameters?`: { `max_length?`:
    `number` ; `max_time?`: `number` ; `min_length?`: `number` ; `repetition_penalty?`:
    `number` ; `temperature?`: `number` ; `top_k?`: `number` ; `top_p?`: `number`
    } }, `options?`: [`Options`](../interfaces/Options)) => `Promise`<[`SummarizationOutput`](../interfaces/SummarizationOutput)>'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '• `summarization`: (`args`: { `inputs`: `string` ; `parameters?`: { `max_length?`:
    `number` ; `max_time?`: `number` ; `min_length?`: `number` ; `repetition_penalty?`:
    `number` ; `temperature?`: `number` ; `top_k?`: `number` ; `top_p?`: `number`
    } }, `options?`: [`Options`](../interfaces/Options)) => `Promise`<[`SummarizationOutput`](../interfaces/SummarizationOutput)>'
- en: Type declaration
  id: totrans-282
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`SummarizationOutput`](../interfaces/SummarizationOutput)>'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`SummarizationOutput`](../interfaces/SummarizationOutput)>'
- en: Parameters
  id: totrans-284
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `string` | A string to be summarized |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` | 要总结的字符串 |'
- en: '| `args.parameters?` | `Object` | - |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters?` | `Object` | - |'
- en: '| `args.parameters.max_length?` | `number` | (Default: None). Integer to define
    the maximum length in tokens of the output summary. |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.max_length?` | `number` | (默认值：无). 整数，定义输出摘要的最大长度（以标记为单位）。
    |'
- en: '| `args.parameters.max_time?` | `number` | (Default: None). Float (0-120.0).
    The amount of time in seconds that the query should take maximum. Network can
    cause some overhead so it will be a soft limit. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.max_time?` | `number` | (默认值：无). 浮点数 (0-120.0). 查询应该最多花费的时间（以秒为单位）。网络可能会导致一些额外开销，因此这将是一个软限制。
    |'
- en: '| `args.parameters.min_length?` | `number` | (Default: None). Integer to define
    the minimum length in tokens of the output summary. |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.min_length?` | `number` | (默认值：无). 整数，定义输出摘要的最小长度（以标记为单位）。
    |'
- en: '| `args.parameters.repetition_penalty?` | `number` | (Default: None). Float
    (0.0-100.0). The more a token is used within generation the more it is penalized
    to not be picked in successive generation passes. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.repetition_penalty?` | `number` | (默认值：无)。浮点数（0.0-100.0）。在生成过程中一个标记被使用得越多，它在连续的生成过程中被惩罚的可能性就越大。
    |'
- en: '| `args.parameters.temperature?` | `number` | (Default: 1.0). Float (0.0-100.0).
    The temperature of the sampling operation. 1 means regular sampling, 0 means always
    take the highest score, 100.0 is getting closer to uniform probability. |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.temperature?` | `number` | (默认值：1.0)。浮点数（0.0-100.0）。采样操作的温度。1表示常规采样，0表示始终选择最高分数，100.0接近均匀概率。
    |'
- en: '| `args.parameters.top_k?` | `number` | (Default: None). Integer to define
    the top tokens considered within the sample operation to create new text. |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.top_k?` | `number` | (默认值：无)。整数，用于定义在样本操作中考虑的前几个标记，以创建新文本。
    |'
- en: '| `args.parameters.top_p?` | `number` | (Default: None). Float to define the
    tokens that are within the sample operation of text generation. Add tokens in
    the sample for more probable to least probable until the sum of the probabilities
    is greater than top_p. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.top_p?` | `number` | (默认值：无)。浮点数，用于定义在文本生成的样本操作中的标记。在样本中添加标记，以便从最可能到最不可能，直到概率之和大于top_p。
    |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-298
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`SummarizationOutput`](../interfaces/SummarizationOutput)>'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`SummarizationOutput`](../interfaces/SummarizationOutput)>'
- en: Defined in
  id: totrans-300
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/nlp/summarization.ts:52](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/summarization.ts#L52)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/summarization.ts:52](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/summarization.ts#L52)'
- en: '* * *'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: tableQuestionAnswering
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tableQuestionAnswering
- en: '• `tableQuestionAnswering`: (`args`: { `inputs`: { `query`: `string` ; `table`:
    `Record`<`string`, `string`[]> } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`TableQuestionAnsweringOutput`](../interfaces/TableQuestionAnsweringOutput)>'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '• `tableQuestionAnswering`: (`args`: { `inputs`: { `query`: `string` ; `table`:
    `Record`<`string`, `string`[]> } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`TableQuestionAnsweringOutput`](../interfaces/TableQuestionAnsweringOutput)>'
- en: Type declaration
  id: totrans-305
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`TableQuestionAnsweringOutput`](../interfaces/TableQuestionAnsweringOutput)>'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`TableQuestionAnsweringOutput`](../interfaces/TableQuestionAnsweringOutput)>'
- en: Parameters
  id: totrans-307
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `Object` | - |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `Object` | - |'
- en: '| `args.inputs.query` | `string` | The query in plain text that you want to
    ask the table |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.query` | `string` | 您想要询问表格的纯文本查询 |'
- en: '| `args.inputs.table` | `Record`<`string`, `string`[]> | A table of data represented
    as a dict of list where entries are headers and the lists are all the values,
    all lists must have the same size. |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.table` | `Record`<`string`, `string`[]> | 以字典列表表示的数据表，其中条目是标题，列表是所有值，所有列表必须具有相同的大小。
    |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-315
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`TableQuestionAnsweringOutput`](../interfaces/TableQuestionAnsweringOutput)>'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`TableQuestionAnsweringOutput`](../interfaces/TableQuestionAnsweringOutput)>'
- en: Defined in
  id: totrans-317
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/nlp/tableQuestionAnswering.ts:40](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/tableQuestionAnswering.ts#L40)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/tableQuestionAnswering.ts:40](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/tableQuestionAnswering.ts#L40)'
- en: '* * *'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: tabularClassification
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tabularClassification
- en: '• `tabularClassification`: (`args`: { `inputs`: { `data`: `Record`<`string`,
    `string`[]> } }, `options?`: [`Options`](../interfaces/Options)) => `Promise`<[`TabularClassificationOutput`](../modules#tabularclassificationoutput)>'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '• `tabularClassification`: (`args`: { `inputs`: { `data`: `Record`<`string`,
    `string`[]> } }, `options?`: [`Options`](../interfaces/Options)) => `Promise`<[`TabularClassificationOutput`](../modules#tabularclassificationoutput)>'
- en: Type declaration
  id: totrans-322
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`TabularClassificationOutput`](../modules#tabularclassificationoutput)>'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`TabularClassificationOutput`](../modules#tabularclassificationoutput)>'
- en: Parameters
  id: totrans-324
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `Object` | - |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `Object` | - |'
- en: '| `args.inputs.data` | `Record`<`string`, `string`[]> | A table of data represented
    as a dict of list where entries are headers and the lists are all the values,
    all lists must have the same size. |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.data` | `Record`<`string`, `string`[]> | 以字典列表表示的数据表，其中条目是标题，列表是所有值，所有列表必须具有相同的大小。
    |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-331
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`TabularClassificationOutput`](../modules#tabularclassificationoutput)>'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`TabularClassificationOutput`](../modules#tabularclassificationoutput)>'
- en: Defined in
  id: totrans-333
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/tabular/tabularClassification.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/tabular/tabularClassification.ts#L24)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/tabular/tabularClassification.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/tabular/tabularClassification.ts#L24)'
- en: '* * *'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: tabularRegression
  id: totrans-336
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tabularRegression
- en: '• `tabularRegression`: (`args`: { `inputs`: { `data`: `Record`<`string`, `string`[]>
    } }, `options?`: [`Options`](../interfaces/Options)) => `Promise`<[`TabularRegressionOutput`](../modules#tabularregressionoutput)>'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '• `tabularRegression`: (`args`: { `inputs`: { `data`: `Record`<`string`, `string`[]>
    } }, `options?`: [`Options`](../interfaces/Options)) => `Promise`<[`TabularRegressionOutput`](../modules#tabularregressionoutput)>'
- en: Type declaration
  id: totrans-338
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`TabularRegressionOutput`](../modules#tabularregressionoutput)>'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`TabularRegressionOutput`](../modules#tabularregressionoutput)>'
- en: Parameters
  id: totrans-340
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `Object` | - |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `Object` | - |'
- en: '| `args.inputs.data` | `Record`<`string`, `string`[]> | A table of data represented
    as a dict of list where entries are headers and the lists are all the values,
    all lists must have the same size. |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.data` | `Record`<`string`, `string`[]> | 以字典列表表示的数据表，其中条目为标题，列表为所有值，所有列表必须具有相同的大小。
    |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-347
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`TabularRegressionOutput`](../modules#tabularregressionoutput)>'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`TabularRegressionOutput`](../modules#tabularregressionoutput)>'
- en: Defined in
  id: totrans-349
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/tabular/tabularRegression.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/tabular/tabularRegression.ts#L24)'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/tabular/tabularRegression.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/tabular/tabularRegression.ts#L24)'
- en: '* * *'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: textClassification
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本分类
- en: '• `textClassification`: (`args`: { `inputs`: `string` }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`TextClassificationOutput`](../modules#textclassificationoutput)>'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '• `文本分类`: (`args`: { `inputs`: `string` }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`TextClassificationOutput`](../modules#textclassificationoutput)>'
- en: Type declaration
  id: totrans-354
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`TextClassificationOutput`](../modules#textclassificationoutput)>'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`TextClassificationOutput`](../modules#textclassificationoutput)>'
- en: Parameters
  id: totrans-356
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `string` | A string to be classified |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` | 要分类的字符串 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-362
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`TextClassificationOutput`](../modules#textclassificationoutput)>'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`TextClassificationOutput`](../modules#textclassificationoutput)>'
- en: Defined in
  id: totrans-364
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/nlp/textClassification.ts:26](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textClassification.ts#L26)'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/textClassification.ts:26](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textClassification.ts#L26)'
- en: '* * *'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: textGeneration
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文本生成
- en: '• `textGeneration`: (`args`: { `inputs`: `string` ; `parameters?`: { `do_sample?`:
    `boolean` ; `max_new_tokens?`: `number` ; `max_time?`: `number` ; `num_return_sequences?`:
    `number` ; `repetition_penalty?`: `number` ; `return_full_text?`: `boolean` ;
    `stop_sequences?`: `string`[] ; `temperature?`: `number` ; `top_k?`: `number`
    ; `top_p?`: `number` ; `truncate?`: `number` } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`TextGenerationOutput`](../interfaces/TextGenerationOutput)>'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '• `文本生成`: (`args`: { `inputs`: `string` ; `parameters?`: { `do_sample?`: `boolean`
    ; `max_new_tokens?`: `number` ; `max_time?`: `number` ; `num_return_sequences?`:
    `number` ; `repetition_penalty?`: `number` ; `return_full_text?`: `boolean` ;
    `stop_sequences?`: `string`[] ; `temperature?`: `number` ; `top_k?`: `number`
    ; `top_p?`: `number` ; `truncate?`: `number` } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`TextGenerationOutput`](../interfaces/TextGenerationOutput)>'
- en: Type declaration
  id: totrans-369
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`TextGenerationOutput`](../interfaces/TextGenerationOutput)>'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`TextGenerationOutput`](../interfaces/TextGenerationOutput)>'
- en: Parameters
  id: totrans-371
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `string` | A string to be generated from |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` | 要生成的字符串 |'
- en: '| `args.parameters?` | `Object` | - |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters?` | `Object` | - |'
- en: '| `args.parameters.do_sample?` | `boolean` | (Optional: True). Bool. Whether
    or not to use sampling, use greedy decoding otherwise. |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.do_sample?` | `boolean` | (可选：True). 布尔值。是否使用采样，否则使用贪婪解码。
    |'
- en: '| `args.parameters.max_new_tokens?` | `number` | (Default: None). Int (0-250).
    The amount of new tokens to be generated, this does not include the input length
    it is a estimate of the size of generated text you want. Each new tokens slows
    down the request, so look for balance between response times and length of text
    generated. |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.max_new_tokens?` | `number` | (默认值：无). 整数 (0-250). 要生成的新标记数量，这不包括输入长度，它是您想要生成的文本大小的估计。每个新标记都会减慢请求速度，因此要在响应时间和生成文本长度之间寻找平衡。
    |'
- en: '| `args.parameters.max_time?` | `number` | (Default: None). Float (0-120.0).
    The amount of time in seconds that the query should take maximum. Network can
    cause some overhead so it will be a soft limit. Use that in combination with max_new_tokens
    for best results. |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.max_time?` | `number` | (默认值：无). 浮点数 (0-120.0). 查询应该花费的最长时间（以秒为单位）。网络可能会造成一些开销，因此这将是一个软限制。与
    max_new_tokens 结合使用可获得最佳结果。 |'
- en: '| `args.parameters.num_return_sequences?` | `number` | (Default: 1). Integer.
    The number of proposition you want to be returned. |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.num_return_sequences?` | `number` | (默认值：1). 整数。要返回的建议数量。
    |'
- en: '| `args.parameters.repetition_penalty?` | `number` | (Default: None). Float
    (0.0-100.0). The more a token is used within generation the more it is penalized
    to not be picked in successive generation passes. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.repetition_penalty?` | `number` | (默认值：无). 浮点数 (0.0-100.0).
    在生成过程中一个标记被使用得越多，它在连续生成过程中被惩罚的越多。 |'
- en: '| `args.parameters.return_full_text?` | `boolean` | (Default: True). Bool.
    If set to False, the return results will not contain the original query making
    it easier for prompting. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.return_full_text?` | `boolean` | (默认值：True). 布尔值。如果设置为 False，则返回结果将不包含原始查询，使提示更容易。
    |'
- en: '| `args.parameters.stop_sequences?` | `string`[] | (Default: []) List of strings.
    The model will stop generating text when one of the strings in the list is generated.
    * |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.stop_sequences?` | `string`[] | (默认值：[]) 字符串列表。当生成列表中的一个字符串时，模型将停止生成文本。
    * |'
- en: '| `args.parameters.temperature?` | `number` | (Default: 1.0). Float (0.0-100.0).
    The temperature of the sampling operation. 1 means regular sampling, 0 means always
    take the highest score, 100.0 is getting closer to uniform probability. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.temperature?` | `number` | (默认值：1.0). 浮点数 (0.0-100.0). 采样操作的温度。1
    表示常规采样，0 表示始终选择最高分数，100.0 表示接近均匀概率。 |'
- en: '| `args.parameters.top_k?` | `number` | (Default: None). Integer to define
    the top tokens considered within the sample operation to create new text. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.top_k?` | `number` | (默认值：无). 整数，用于定义在样本操作中考虑的前几个标记，以生成新文本。
    |'
- en: '| `args.parameters.top_p?` | `number` | (Default: None). Float to define the
    tokens that are within the sample operation of text generation. Add tokens in
    the sample for more probable to least probable until the sum of the probabilities
    is greater than top_p. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.top_p?` | `number` | (默认值：无). 浮点数，用于定义在文本生成的采样操作中的标记。将标记添加到采样中，以使概率从最可能到最不可能，直到概率之和大于
    top_p。 |'
- en: '| `args.parameters.truncate?` | `number` | (Default: None). Integer. The maximum
    number of tokens from the input. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.truncate?` | `number` | (默认值：无). 整数。输入中的最大标记数。 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-389
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`TextGenerationOutput`](../interfaces/TextGenerationOutput)>'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`TextGenerationOutput`](../interfaces/TextGenerationOutput)>'
- en: Defined in
  id: totrans-391
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/nlp/textGeneration.ts:68](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textGeneration.ts#L68)'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/textGeneration.ts:68](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textGeneration.ts#L68)'
- en: '* * *'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: textGenerationStream
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: textGenerationStream
- en: '• `textGenerationStream`: (`args`: { `inputs`: `string` ; `parameters?`: {
    `do_sample?`: `boolean` ; `max_new_tokens?`: `number` ; `max_time?`: `number`
    ; `num_return_sequences?`: `number` ; `repetition_penalty?`: `number` ; `return_full_text?`:
    `boolean` ; `stop_sequences?`: `string`[] ; `temperature?`: `number` ; `top_k?`:
    `number` ; `top_p?`: `number` ; `truncate?`: `number` } }, `options?`: [`Options`](../interfaces/Options))
    => `AsyncGenerator`<[`TextGenerationStreamOutput`](../interfaces/TextGenerationStreamOutput),
    `any`, `unknown`>'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '• `textGenerationStream`: (`args`: { `inputs`: `string` ; `parameters?`: {
    `do_sample?`: `boolean` ; `max_new_tokens?`: `number` ; `max_time?`: `number`
    ; `num_return_sequences?`: `number` ; `repetition_penalty?`: `number` ; `return_full_text?`:
    `boolean` ; `stop_sequences?`: `string`[] ; `temperature?`: `number` ; `top_k?`:
    `number` ; `top_p?`: `number` ; `truncate?`: `number` } }, `options?`: [`Options`](../interfaces/Options))
    => `AsyncGenerator`<[`TextGenerationStreamOutput`](../interfaces/TextGenerationStreamOutput),
    `any`, `unknown`>'
- en: Type declaration
  id: totrans-396
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `AsyncGenerator`<[`TextGenerationStreamOutput`](../interfaces/TextGenerationStreamOutput),
    `any`, `unknown`>'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `AsyncGenerator`<[`TextGenerationStreamOutput`](../interfaces/TextGenerationStreamOutput),
    `any`, `unknown`>'
- en: Parameters
  id: totrans-398
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `string` | A string to be generated from |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` | 要生成的字符串 |'
- en: '| `args.parameters?` | `Object` | - |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters?` | `Object` | - |'
- en: '| `args.parameters.do_sample?` | `boolean` | (Optional: True). Bool. Whether
    or not to use sampling, use greedy decoding otherwise. |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.do_sample?` | `boolean` | (可选：True). 布尔值。是否使用采样，否则使用贪婪解码。
    |'
- en: '| `args.parameters.max_new_tokens?` | `number` | (Default: None). Int (0-250).
    The amount of new tokens to be generated, this does not include the input length
    it is a estimate of the size of generated text you want. Each new tokens slows
    down the request, so look for balance between response times and length of text
    generated. |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.max_new_tokens?` | `number` | (默认值：无). 整数 (0-250). 要生成的新标记数量，这不包括输入长度，它是您想要生成的文本大小的估计。每个新标记都会减慢请求速度，因此需要在响应时间和生成文本长度之间寻找平衡。
    |'
- en: '| `args.parameters.max_time?` | `number` | (Default: None). Float (0-120.0).
    The amount of time in seconds that the query should take maximum. Network can
    cause some overhead so it will be a soft limit. Use that in combination with max_new_tokens
    for best results. |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.max_time?` | `number` | (默认值：无). 浮点数 (0-120.0). 查询应该最多花费的时间量（以秒为单位）。网络可能会导致一些额外开销，因此这将是一个软限制。与
    max_new_tokens 结合使用以获得最佳结果。 |'
- en: '| `args.parameters.num_return_sequences?` | `number` | (Default: 1). Integer.
    The number of proposition you want to be returned. |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.num_return_sequences?` | `number` | (默认值：1). 整数。要返回的建议数量。
    |'
- en: '| `args.parameters.repetition_penalty?` | `number` | (Default: None). Float
    (0.0-100.0). The more a token is used within generation the more it is penalized
    to not be picked in successive generation passes. |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.repetition_penalty?` | `number` | (默认值：无). 浮点数 (0.0-100.0).
    在生成过程中一个标记被使用得越多，它在连续的生成过程中被惩罚的可能性就越大。 |'
- en: '| `args.parameters.return_full_text?` | `boolean` | (Default: True). Bool.
    If set to False, the return results will not contain the original query making
    it easier for prompting. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.return_full_text?` | `boolean` | (默认值：True). 布尔值。如果设置为 False，则返回结果将不包含原始查询，使提示更容易。
    |'
- en: '| `args.parameters.stop_sequences?` | `string`[] | (Default: []) List of strings.
    The model will stop generating text when one of the strings in the list is generated.
    * |'
  id: totrans-410
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.stop_sequences?` | `string`[] | (默认值：[]) 字符串列表。当列表中的一个字符串被生成时，模型将停止生成文本。*
    |'
- en: '| `args.parameters.temperature?` | `number` | (Default: 1.0). Float (0.0-100.0).
    The temperature of the sampling operation. 1 means regular sampling, 0 means always
    take the highest score, 100.0 is getting closer to uniform probability. |'
  id: totrans-411
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.temperature?` | `number` | (默认值：1.0). 浮点数 (0.0-100.0). 采样操作的温度。1
    表示常规采样，0 表示始终选择最高分数，100.0 表示接近均匀概率。 |'
- en: '| `args.parameters.top_k?` | `number` | (Default: None). Integer to define
    the top tokens considered within the sample operation to create new text. |'
  id: totrans-412
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.top_k?` | `number` | (默认值：无). 整数，用于定义在采样操作中考虑的前几个标记，以创建新文本。
    |'
- en: '| `args.parameters.top_p?` | `number` | (Default: None). Float to define the
    tokens that are within the sample operation of text generation. Add tokens in
    the sample for more probable to least probable until the sum of the probabilities
    is greater than top_p. |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.top_p?` | `number` | (默认值：无). 浮点数，用于定义在文本生成的采样操作中的标记。将标记添加到采样中，以使概率从最可能到最不可能，直到概率之和大于
    top_p。 |'
- en: '| `args.parameters.truncate?` | `number` | (Default: None). Integer. The maximum
    number of tokens from the input. |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.truncate?` | `number` | (默认值：无). 整数。输入中的最大标记数。 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-416
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`AsyncGenerator`<[`TextGenerationStreamOutput`](../interfaces/TextGenerationStreamOutput),
    `any`, `unknown`>'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`AsyncGenerator`<[`TextGenerationStreamOutput`](../interfaces/TextGenerationStreamOutput),
    `any`, `unknown`>'
- en: Defined in
  id: totrans-418
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/nlp/textGenerationStream.ts:87](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textGenerationStream.ts#L87)'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/textGenerationStream.ts:87](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textGenerationStream.ts#L87)'
- en: '* * *'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: textToImage
  id: totrans-421
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: textToImage
- en: '• `textToImage`: (`args`: { `inputs`: `string` ; `parameters?`: { `guidance_scale?`:
    `number` ; `height?`: `number` ; `negative_prompt?`: `string` ; `num_inference_steps?`:
    `number` ; `width?`: `number` } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<`Blob`>'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '• `textToImage`: (`args`: { `inputs`: `string` ; `parameters?`: { `guidance_scale?`:
    `number` ; `height?`: `number` ; `negative_prompt?`: `string` ; `num_inference_steps?`:
    `number` ; `width?`: `number` } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<`Blob`>'
- en: Type declaration
  id: totrans-423
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<`Blob`>'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<`Blob`>'
- en: Parameters
  id: totrans-425
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `string` | The text to generate an image from |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` | 从中生成图像的文本 |'
- en: '| `args.parameters?` | `Object` | - |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters?` | `Object` | - |'
- en: '| `args.parameters.guidance_scale?` | `number` | Guidance scale: Higher guidance
    scale encourages to generate images that are closely linked to the text `prompt`,
    usually at the expense of lower image quality. |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.guidance_scale?` | `number` | 指导比例：更高的指导比例鼓励生成与文本“提示”紧密相关的图像，通常以降低图像质量为代价。
    |'
- en: '| `args.parameters.height?` | `number` | The height in pixels of the generated
    image |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.height?` | `number` | 生成图像的像素高度 |'
- en: '| `args.parameters.negative_prompt?` | `string` | An optional negative prompt
    for the image generation |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.negative_prompt?` | `string` | 用于图像生成的可选负面提示 |'
- en: '| `args.parameters.num_inference_steps?` | `number` | The number of denoising
    steps. More denoising steps usually lead to a higher quality image at the expense
    of slower inference. |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.num_inference_steps?` | `number` | 降噪步骤的数量。更多的降噪步骤通常会导致更高质量的图像，但会降低推理速度。
    |'
- en: '| `args.parameters.width?` | `number` | The width in pixels of the generated
    image |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.width?` | `number` | 生成图像的像素宽度 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-437
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<`Blob`>'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<`Blob`>'
- en: Defined in
  id: totrans-439
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/cv/textToImage.ts:41](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/textToImage.ts#L41)'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/cv/textToImage.ts:41](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/textToImage.ts#L41)'
- en: '* * *'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: textToSpeech
  id: totrans-442
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: textToSpeech
- en: '• `textToSpeech`: (`args`: { `inputs`: `string` }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<`Blob`>'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '• `textToSpeech`: (`args`: { `inputs`: `string` }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<`Blob`>'
- en: Type declaration
  id: totrans-444
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<`Blob`>'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<`Blob`>'
- en: Parameters
  id: totrans-446
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-448
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `string` | The text to generate an audio from |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` | 从中生成音频的文本 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-452
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<`Blob`>'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<`Blob`>'
- en: Defined in
  id: totrans-454
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/audio/textToSpeech.ts:18](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/textToSpeech.ts#L18)'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/audio/textToSpeech.ts:18](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/textToSpeech.ts#L18)'
- en: '* * *'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: tokenClassification
  id: totrans-457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tokenClassification
- en: '• `tokenClassification`: (`args`: { `inputs`: `string` ; `parameters?`: { `aggregation_strategy?`:
    `"none"` | `"simple"` | `"first"` | `"average"` | `"max"` } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`TokenClassificationOutput`](../modules#tokenclassificationoutput)>'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '• `tokenClassification`: (`args`: { `inputs`: `string` ; `parameters?`: { `aggregation_strategy?`:
    `"none"` | `"simple"` | `"first"` | `"average"` | `"max"` } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`TokenClassificationOutput`](../modules#tokenclassificationoutput)>'
- en: Type declaration
  id: totrans-459
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`TokenClassificationOutput`](../modules#tokenclassificationoutput)>'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`TokenClassificationOutput`](../modules#tokenclassificationoutput)>'
- en: Parameters
  id: totrans-461
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `string` | A string to be classified |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` | 要分类的字符串 |'
- en: '| `args.parameters?` | `Object` | - |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters?` | `Object` | - |'
- en: '| `args.parameters.aggregation_strategy?` | `"none"` &#124; `"simple"` &#124;
    `"first"` &#124; `"average"` &#124; `"max"` | (Default: simple). There are several
    aggregation strategies: none: Every token gets classified without further aggregation.
    simple: Entities are grouped according to the default schema (B-, I- tags get
    merged when the tag is similar). first: Same as the simple strategy except words
    cannot end up with different tags. Words will use the tag of the first token when
    there is ambiguity. average: Same as the simple strategy except words cannot end
    up with different tags. Scores are averaged across tokens and then the maximum
    label is applied. max: Same as the simple strategy except words cannot end up
    with different tags. Word entity will be the token with the maximum score. |'
  id: totrans-467
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.aggregation_strategy?` | `"none"` &#124; `"simple"` &#124;
    `"first"` &#124; `"average"` &#124; `"max"` | （默认值：简单）。有几种聚合策略：none：每个标记都会被分类，不会有进一步的聚合。simple：实体根据默认模式进行分组（当标记相似时，B-、I-标记会合并）。first：与简单策略相同，除非单词不能以不同的标记结束。当存在歧义时，单词将使用第一个标记的标记。average：与简单策略相同，除非单词不能以不同的标记结束。分数将在标记上平均，然后应用最大标签。max：与简单策略相同，除非单词不能以不同的标记结束。单词实体将是具有最大分数的标记。
    |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-468
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-469
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`TokenClassificationOutput`](../modules#tokenclassificationoutput)>'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`TokenClassificationOutput`](../modules#tokenclassificationoutput)>'
- en: Defined in
  id: totrans-471
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/nlp/tokenClassification.ts:57](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/tokenClassification.ts#L57)'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/tokenClassification.ts:57](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/tokenClassification.ts#L57)'
- en: '* * *'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: translation
  id: totrans-474
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 翻译
- en: '• `translation`: (`args`: { `inputs`: `string` | `string`[] }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`TranslationOutput`](../modules#translationoutput)>'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '• `translation`: (`args`: { `inputs`: `string` | `string`[] }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`TranslationOutput`](../modules#translationoutput)>'
- en: Type declaration
  id: totrans-476
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`TranslationOutput`](../modules#translationoutput)>'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`TranslationOutput`](../modules#translationoutput)>'
- en: Parameters
  id: totrans-478
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `string` &#124; `string`[] | A string to be translated |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` &#124; `string`[] | 要翻译的字符串 |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-484
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`TranslationOutput`](../modules#translationoutput)>'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`TranslationOutput`](../modules#translationoutput)>'
- en: Defined in
  id: totrans-486
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/nlp/translation.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/translation.ts#L24)'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/translation.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/translation.ts#L24)'
- en: '* * *'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: visualQuestionAnswering
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视觉问答
- en: '• `visualQuestionAnswering`: (`args`: { `inputs`: { `image`: `Blob` | `ArrayBuffer`
    ; `question`: `string` } }, `options?`: [`Options`](../interfaces/Options)) =>
    `Promise`<[`VisualQuestionAnsweringOutput`](../interfaces/VisualQuestionAnsweringOutput)>'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '• `visualQuestionAnswering`: (`args`: { `inputs`: { `image`: `Blob` | `ArrayBuffer`
    ; `question`: `string` } }, `options?`: [`Options`](../interfaces/Options)) =>
    `Promise`<[`VisualQuestionAnsweringOutput`](../interfaces/VisualQuestionAnsweringOutput)>'
- en: Type declaration
  id: totrans-491
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`VisualQuestionAnsweringOutput`](../interfaces/VisualQuestionAnsweringOutput)>'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`VisualQuestionAnsweringOutput`](../interfaces/VisualQuestionAnsweringOutput)>'
- en: Parameters
  id: totrans-493
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-496
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `Object` | - |'
  id: totrans-497
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `Object` | - |'
- en: '| `args.inputs.image` | `Blob` &#124; `ArrayBuffer` | Raw image You can use
    native `File` in browsers, or `new Blob([buffer])` in node, or for a base64 image
    `new Blob([btoa(base64String)])`, or even `await (await fetch(''...)).blob()`
    |'
  id: totrans-498
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.image` | `Blob` &#124; `ArrayBuffer` | 原始图像，您可以在浏览器中使用本机`File`，或在节点中使用`new
    Blob([buffer])`，或对于base64图像`new Blob([btoa(base64String)])`，甚至`await (await fetch(''...)).blob()`
    |'
- en: '| `args.inputs.question` | `string` | - |'
  id: totrans-499
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.question` | `string` | - |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-500
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-501
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`VisualQuestionAnsweringOutput`](../interfaces/VisualQuestionAnsweringOutput)>'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`VisualQuestionAnsweringOutput`](../interfaces/VisualQuestionAnsweringOutput)>'
- en: Defined in
  id: totrans-503
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/multimodal/visualQuestionAnswering.ts:32](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/multimodal/visualQuestionAnswering.ts#L32)'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/multimodal/visualQuestionAnswering.ts:32](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/multimodal/visualQuestionAnswering.ts#L32)'
- en: '* * *'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: zeroShotClassification
  id: totrans-506
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: zeroShotClassification
- en: '• `zeroShotClassification`: (`args`: { `inputs`: `string` | `string`[] ; `parameters`:
    { `candidate_labels`: `string`[] ; `multi_label?`: `boolean` } }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`ZeroShotClassificationOutput`](../modules#zeroshotclassificationoutput)>'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '• `zeroShotClassification`: (`args`: { `inputs`: `string` | `string`[] ; `parameters`:
    { `candidate_labels`: `string`[] ; `multi_label?`: `boolean` } }, `options?`:
    [`Options`](../interfaces/Options)) => `Promise`<[`ZeroShotClassificationOutput`](../modules#zeroshotclassificationoutput)>'
- en: Type declaration
  id: totrans-508
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`ZeroShotClassificationOutput`](../modules#zeroshotclassificationoutput)>'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`ZeroShotClassificationOutput`](../modules#zeroshotclassificationoutput)>'
- en: Parameters
  id: totrans-510
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-512
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-513
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `string` &#124; `string`[] | a string or list of strings
    |'
  id: totrans-514
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `string` &#124; `string`[] | 一个字符串或字符串列表 |'
- en: '| `args.parameters` | `Object` | - |'
  id: totrans-515
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters` | `Object` | - |'
- en: '| `args.parameters.candidate_labels` | `string`[] | a list of strings that
    are potential classes for inputs. (max 10 candidate_labels, for more, simply run
    multiple requests, results are going to be misleading if using too many candidate_labels
    anyway. If you want to keep the exact same, you can simply run multi_label=True
    and do the scaling on your end. |'
  id: totrans-516
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.candidate_labels` | `string`[] | 一个字符串列表，是输入的潜在类别。（最多10个候选标签，如果需要更多，可以简单地运行多个请求，如果使用太多候选标签，结果会产生误导。如果想保持完全相同，可以简单地运行multi_label=True，并在您的端上进行缩放。）
    |'
- en: '| `args.parameters.multi_label?` | `boolean` | (Default: false) Boolean that
    is set to True if classes can overlap |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.multi_label?` | `boolean` | （默认值：false）如果类别可以重叠，则设置为True
    |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-518
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-519
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`ZeroShotClassificationOutput`](../modules#zeroshotclassificationoutput)>'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`ZeroShotClassificationOutput`](../modules#zeroshotclassificationoutput)>'
- en: Defined in
  id: totrans-521
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义于
- en: '[inference/src/tasks/nlp/zeroShotClassification.ts:34](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/zeroShotClassification.ts#L34)'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/nlp/zeroShotClassification.ts:34](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/zeroShotClassification.ts#L34)'
- en: '* * *'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: zeroShotImageClassification
  id: totrans-524
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: zeroShotImageClassification
- en: '• `zeroShotImageClassification`: (`args`: { `inputs`: { `image`: `Blob` | `ArrayBuffer`
    } ; `parameters`: { `candidate_labels`: `string`[] } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`ZeroShotImageClassificationOutput`](../modules#zeroshotimageclassificationoutput)>'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '• `zeroShotImageClassification`: (`args`: { `inputs`: { `image`: `Blob` | `ArrayBuffer`
    } ; `parameters`: { `candidate_labels`: `string`[] } }, `options?`: [`Options`](../interfaces/Options))
    => `Promise`<[`ZeroShotImageClassificationOutput`](../modules#zeroshotimageclassificationoutput)>'
- en: Type declaration
  id: totrans-526
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类型声明
- en: '▸ (`args`, `options?`): `Promise`<[`ZeroShotImageClassificationOutput`](../modules#zeroshotimageclassificationoutput)>'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '▸ (`args`, `options?`): `Promise`<[`ZeroShotImageClassificationOutput`](../modules#zeroshotimageclassificationoutput)>'
- en: Parameters
  id: totrans-528
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 参数
- en: '| Name | Type | Description |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| :-- | :-- | :-- |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- | :-- |'
- en: '| `args` | `Object` | - |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| `args` | `Object` | - |'
- en: '| `args.inputs` | `Object` | - |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs` | `Object` | - |'
- en: '| `args.inputs.image` | `Blob` &#124; `ArrayBuffer` | Binary image data |'
  id: totrans-533
  prefs: []
  type: TYPE_TB
  zh: '| `args.inputs.image` | `Blob` &#124; `ArrayBuffer` | 二进制图像数据 |'
- en: '| `args.parameters` | `Object` | - |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters` | `Object` | - |'
- en: '| `args.parameters.candidate_labels` | `string`[] | A list of strings that
    are potential classes for inputs. (max 10) |'
  id: totrans-535
  prefs: []
  type: TYPE_TB
  zh: '| `args.parameters.candidate_labels` | `string`[] | 一个潜在的输入类别字符串列表（最多10个） |'
- en: '| `options?` | [`Options`](../interfaces/Options) | - |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| `options?` | [`Options`](../interfaces/Options) | - |'
- en: Returns
  id: totrans-537
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 返回
- en: '`Promise`<[`ZeroShotImageClassificationOutput`](../modules#zeroshotimageclassificationoutput)>'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '`Promise`<[`ZeroShotImageClassificationOutput`](../modules#zeroshotimageclassificationoutput)>'
- en: Defined in
  id: totrans-539
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定义在
- en: '[inference/src/tasks/cv/zeroShotImageClassification.ts:33](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/zeroShotImageClassification.ts#L33)'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '[inference/src/tasks/cv/zeroShotImageClassification.ts:33](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/zeroShotImageClassification.ts#L33)'
