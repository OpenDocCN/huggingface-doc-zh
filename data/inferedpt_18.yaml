- en: Create custom Inference Handler
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义推理处理程序
- en: 'Original text: [https://huggingface.co/docs/inference-endpoints/guides/custom_handler](https://huggingface.co/docs/inference-endpoints/guides/custom_handler)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://huggingface.co/docs/inference-endpoints/guides/custom_handler](https://huggingface.co/docs/inference-endpoints/guides/custom_handler)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Hugging Face Endpoints supports all of the Transformers and Sentence-Transformers
    tasks and can support custom tasks, including custom pre- & post-processing. The
    customization can be done through a [handler.py](https://huggingface.co/philschmid/distilbert-onnx-banking77/blob/main/handler.py)
    file in your model repository on the Hugging Face Hub.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Hugging Face Endpoints支持所有Transformers和Sentence-Transformers任务，并且可以支持自定义任务，包括自定义预处理和后处理。定制可以通过Hugging
    Face Hub上模型存储库中的[handler.py](https://huggingface.co/philschmid/distilbert-onnx-banking77/blob/main/handler.py)文件完成。
- en: The [handler.py](https://huggingface.co/philschmid/distilbert-onnx-banking77/blob/main/handler.py)
    needs to implement the [EndpointHandler](https://huggingface.co/philschmid/distilbert-onnx-banking77/blob/main/handler.py)
    class with a `__init__` and a `__call__` method.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[handler.py](https://huggingface.co/philschmid/distilbert-onnx-banking77/blob/main/handler.py)需要实现[EndpointHandler](https://huggingface.co/philschmid/distilbert-onnx-banking77/blob/main/handler.py)类，其中包含`__init__`和`__call__`方法。'
- en: If you want to use custom dependencies, e.g. [optimum](https://raw.githubusercontent.com/huggingface/optimum),
    the dependencies must be listed in a `requirements.txt` as described above in
    “add custom dependencies.”
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用自定义依赖项，例如[optimum](https://raw.githubusercontent.com/huggingface/optimum)，则这些依赖项必须在`requirements.txt`中列出，如上述“添加自定义依赖项”中所述。
- en: Custom Handler Examples
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义处理程序示例
- en: There are already several public examples on the [Hugging Face Hub](https://huggingface.co/models?other=endpoints-template)
    where you can take insipiration or directly use them. The repositories are tagged
    with `endpoints-template` and can be found under this [link](https://huggingface.co/models?other=endpoints-template).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Hugging Face Hub](https://huggingface.co/models?other=endpoints-template)上已经有几个公共示例，您可以从中获取灵感或直接使用。这些存储库带有`endpoints-template`标签，可以在此[链接](https://huggingface.co/models?other=endpoints-template)下找到。
- en: 'Included examples are for:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 包含的示例有：
- en: '[Optimum and ONNX Runtime](https://huggingface.co/philschmid/distilbert-onnx-banking77)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Optimum和ONNX Runtime](https://huggingface.co/philschmid/distilbert-onnx-banking77)'
- en: '[Image Embeddings with BLIP](https://huggingface.co/florentgbelidji/blip_image_embeddings)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[BLIP图像嵌入](https://huggingface.co/florentgbelidji/blip_image_embeddings)'
- en: '[TrOCR for OCR Detection](https://huggingface.co/philschmid/trocr-base-printed)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TrOCR用于OCR检测](https://huggingface.co/philschmid/trocr-base-printed)'
- en: '[Optimized Sentence Transformers with Optimum](https://huggingface.co/philschmid/all-MiniLM-L6-v2-optimum-embeddings)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化的句子转换器与Optimum](https://huggingface.co/philschmid/all-MiniLM-L6-v2-optimum-embeddings)'
- en: '[Pyannote Speaker diarization](https://huggingface.co/philschmid/pyannote-speaker-diarization-endpoint)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pyannote说话人分割](https://huggingface.co/philschmid/pyannote-speaker-diarization-endpoint)'
- en: '[LayoutLM](https://huggingface.co/philschmid/layoutlm-funsd)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LayoutLM](https://huggingface.co/philschmid/layoutlm-funsd)'
- en: '[Flair NER](https://huggingface.co/philschmid/flair-ner-english-ontonotes-large)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Flair NER](https://huggingface.co/philschmid/flair-ner-english-ontonotes-large)'
- en: '[GPT-J 6B Single GPU](https://huggingface.co/philschmid/gpt-j-6B-fp16-sharded)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GPT-J 6B单GPU](https://huggingface.co/philschmid/gpt-j-6B-fp16-sharded)'
- en: '[Donut Document understanding](https://huggingface.co/philschmid/donut-base-finetuned-cord-v2)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Donut文档理解](https://huggingface.co/philschmid/donut-base-finetuned-cord-v2)'
- en: '[SetFit classifier](https://huggingface.co/philschmid/setfit-ag-news-endpoint)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SetFit分类器](https://huggingface.co/philschmid/setfit-ag-news-endpoint)'
- en: Tutorial
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教程
- en: Before creating a Custom Handler, you need a Hugging Face Model repository with
    your model weights and an Access Token with *WRITE* access to the repository.
    To find, create and manage Access Tokens, click [here](https://huggingface.co/settings/tokens).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建自定义处理程序之前，您需要一个带有模型权重的Hugging Face模型存储库，并且需要一个具有对存储库的*写*访问权限的访问令牌。要查找、创建和管理访问令牌，请单击[此处](https://huggingface.co/settings/tokens)。
- en: If you want to write a Custom Handler for an existing model from the community,
    you can use the [repo_duplicator](https://huggingface.co/spaces/osanseviero/repo_duplicator)
    to create a repository fork.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想为社区中现有模型编写自定义处理程序，可以使用[repo_duplicator](https://huggingface.co/spaces/osanseviero/repo_duplicator)创建存储库分支。
- en: The code can also be found in this [Notebook](https://colab.research.google.com/drive/1hANJeRa1PK1gZaUorobnQGu4bFj4_4Rf?usp=sharing).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 代码也可以在此[笔记本](https://colab.research.google.com/drive/1hANJeRa1PK1gZaUorobnQGu4bFj4_4Rf?usp=sharing)中找到。
- en: 'You can also search for already existing Custom Handlers here: [https://huggingface.co/models?other=endpoints-template](https://huggingface.co/models?other=endpoints-template)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在此处搜索已存在的自定义处理程序：[https://huggingface.co/models?other=endpoints-template](https://huggingface.co/models?other=endpoints-template)
- en: 1\. Set up Development Environment
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1. 设置开发环境
- en: The easiest way to develop our custom handler is to set up a local development
    environment, to implement, test, and iterate there, and then deploy it as an Inference
    Endpoint. The first step is to install all required development dependencies.
    *needed to create the custom handler, not needed for inference*
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 开发自定义处理程序的最简单方法是设置本地开发环境，进行实现、测试和迭代，然后将其部署为推理端点。第一步是安装所有必需的开发依赖项。*用于创建自定义处理程序，不用于推理*
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After we have installed our libraries we will clone our repository to our development
    environment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完库后，我们将克隆我们的存储库到开发环境中。
- en: We will use [philschmid/distilbert-base-uncased-emotion](https://huggingface.co/philschmid/distilbert-base-uncased-emotion)
    during the tutorial.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在教程中使用[philschmid/distilbert-base-uncased-emotion](https://huggingface.co/philschmid/distilbert-base-uncased-emotion)。
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To be able to push our CP later you need to login into our HF account. This
    can be done by using the `huggingface-cli`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够稍后推送我们的CP，您需要登录到我们的HF帐户。这可以通过使用`huggingface-cli`来完成。
- en: '*Note: Make sure to configure git config as well.*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：确保配置git config。*'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 2\. Create EndpointHandler (CP)
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2. 创建EndpointHandler（CP）
- en: After we have set up our environment, we can start creating your custom handler.
    The custom handler is a Python class (`EndpointHandler`) inside a `handler.py`
    file in our repository. The `EndpointHandler` needs to implement an `__init__`
    and a `__call__` method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置环境后，我们可以开始创建您的自定义处理程序。自定义处理程序是存储库中的`handler.py`文件中的Python类（`EndpointHandler`）。`EndpointHandler`需要实现一个`__init__`和一个`__call__`方法。
- en: The `__init__` method will be called when starting the Endpoint and will receive
    1 argument, a string with the path to your model weights. This allows you to load
    your model correctly.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__`方法将在启动端点时调用，并接收1个参数，一个带有模型权重路径的字符串。这使您可以正确加载您的模型。'
- en: The `__call__` method will be called on every request and receive a dictionary
    with your request body as a python dictionary. It will always contain the `inputs`
    key.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__call__`方法将在每个请求上调用，并接收一个包含您的请求正文的字典作为Python字典。它将始终包含`inputs`键。'
- en: The first step is to create our `handler.py` in the local clone of our repository.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在存储库的本地克隆中创建我们的`handler.py`。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In there, you define your `EndpointHandler` class with the `__init__` and `__call__`
    method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，您定义您的`EndpointHandler`类与`__init__`和`__call__`方法。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 3\. Customize EndpointHandler
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 自定义EndpointHandler
- en: Now, you can add all of the custom logic you want to use during initialization
    or inference to your CP. You can already find multiple [Custom Handler on the
    Hub](https://huggingface.co/models?other=endpoints-template) if you need some
    inspiration. In our example, we will add a custom condition based on additional
    payload information.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以将您想要在初始化或推理期间使用的所有自定义逻辑添加到您的CP中。如果需要一些灵感，您可以在Hub上找到多个[自定义处理程序](https://huggingface.co/models?other=endpoints-template)。在我们的示例中，我们将根据额外的负载信息添加自定义条件。
- en: '*The model we are using in the tutorial is fine-tuned to detect emotions. We
    will add an additional payload field for the date, and will use an external package
    to check if it is a holiday, to add a condition so that when the input date is
    a holiday, the model returns “happy” - since everyone is happy when there are
    holidays* 🌴🎉😆'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们在教程中使用的模型经过微调以检测情绪。我们将为日期添加一个额外的负载字段，并使用外部包来检查是否是假期，以添加一个条件，即当输入日期是假期时，模型返回“快乐”
    - 因为每个人在假期时都很快乐* 🌴🎉😆'
- en: First, we need to create a new `requirements.txt` and add our [holiday detection
    package](https://pypi.org/project/holidays/) and make sure we have it installed
    in our development environment as well.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个新的`requirements.txt`文件，并添加我们的[假期检测包](https://pypi.org/project/holidays/)，确保我们在开发环境中也已安装。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we have to adjust our `handler.py` and `EndpointHandler` to match our
    condition.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须调整我们的`handler.py`和`EndpointHandler`以匹配我们的条件。
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 4\. Test EndpointHandler
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. 测试EndpointHandler
- en: To test our EndpointHandler, we can simplify import, initialize and test it.
    Therefore we only need to prepare a sample payload.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的EndpointHandler，我们可以简化导入，初始化和测试。因此，我们只需要准备一个示例负载。
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It works!!!! 🎉
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 成功了！！！🎉
- en: '*Note: If you are using a notebook you might have to restart your kernel when
    you make changes to the handler.py since it is not automatically re-imported.*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：如果您使用的是笔记本，在对`handler.py`进行更改时，可能需要重新启动内核，因为它不会自动重新导入。*'
- en: 5\. Push the Custom Handler to your repository
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5\. 将自定义处理程序推送到您的存储库
- en: After you have successfully tested your handler locally, you can push it to
    your repository by simply using basic git commands.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地成功测试处理程序后，您可以通过简单使用基本的git命令将其推送到存储库。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, you should see your `handler.py` and `requirements.txt` in your repository
    in the [“Files and version”](https://huggingface.co/philschmid/distilbert-base-uncased-emotion/tree/main)
    tab.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该在您的存储库的[“文件和版本”](https://huggingface.co/philschmid/distilbert-base-uncased-emotion/tree/main)选项卡中看到您的`handler.py`和`requirements.txt`。
- en: 6\. Deploy your Custom Handler as an Inference Endpoint
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6\. 将您的自定义处理程序部署为推理端点
- en: The last step is to deploy your Custom Handler as an Inference Endpoint. You
    can deploy your Custom Handler like you would a regular Inference Endpoint. Add
    your repository, select your cloud and region, your instance and security setting,
    and deploy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将您的自定义处理程序部署为推理端点。您可以像部署常规推理端点一样部署您的自定义处理程序。添加您的存储库，选择您的云和区域，您的实例和安全设置，然后部署。
- en: When creating your Endpoint, the Inference Endpoint Service will check for an
    available and valid `handler.py`, and will use it for serving requests no matter
    which “Task” you select.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建端点时，推理端点服务将检查是否有可用且有效的`handler.py`，并将用于为请求提供服务，无论您选择哪个“任务”。
- en: '*Note: In your [Inference Endpoints dashboard](https://ui.endpoints.huggingface.co/),
    the Task for this Endpoint should now be set to Custom*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：在您的[推理端点仪表板](https://ui.endpoints.huggingface.co/)中，此端点的任务现在应设置为自定义*'
