- en: Feature Extraction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征提取
- en: 'Original text: [https://huggingface.co/docs/timm/feature_extraction](https://huggingface.co/docs/timm/feature_extraction)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/timm/feature_extraction](https://huggingface.co/docs/timm/feature_extraction)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: All of the models in `timm` have consistent mechanisms for obtaining various
    types of features from the model for tasks besides classification.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`timm`中的所有模型都有一致的机制，可以从模型中获取除分类之外的各种类型的特征。'
- en: Penultimate Layer Features (Pre-Classifier Features)
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 倒数第二层特征（预分类器特征）
- en: The features from the penultimate model layer can be obtained in several ways
    without requiring model surgery (although feel free to do surgery). One must first
    decide if they want pooled or un-pooled features.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过几种方式获取来自倒数第二层模型的特征，而无需进行模型手术（尽管可以随意进行手术）。首先必须决定是要池化特征还是非池化特征。
- en: Unpooled
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非池化
- en: There are three ways to obtain unpooled features.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种获取非池化特征的方法。
- en: Without modifying the network, one can call `model.forward_features(input)`
    on any model instead of the usual `model(input)`. This will bypass the head classifier
    and global pooling for networks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在不修改网络的情况下，可以在任何模型上调用`model.forward_features(input)`，而不是通常的`model(input)`。这将绕过头部分类器和全局池化。
- en: If one wants to explicitly modify the network to return unpooled features, they
    can either create the model without a classifier and pooling, or remove it later.
    Both paths remove the parameters associated with the classifier from the network.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果想要明确修改网络以返回非池化特征，可以创建没有分类器和池化的模型，或稍后删除。这两种方法都会从网络中删除与分类器相关的参数。
- en: forward_features()
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: forward_features()
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Output:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create with no classifier and pooling
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建无分类器和池化
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Output:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Remove it later
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 稍后删除
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Output:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Pooled
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 池化
- en: To modify the network to return pooled features, one can use `forward_features()`
    and pool/flatten the result themselves, or modify the network like above but keep
    pooling intact.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改网络以返回池化特征，可以使用`forward_features()`并自行池化/展平结果，或者像上面那样修改网络但保持池化不变。
- en: Create with no classifier
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建无分类器
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Output:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Remove it later
  id: totrans-28
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 稍后删除
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE9]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Multi-scale Feature Maps (Feature Pyramid)
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多尺度特征图（特征金字塔）
- en: Object detection, segmentation, keypoint, and a variety of dense pixel tasks
    require access to feature maps from the backbone network at multiple scales. This
    is often done by modifying the original classification network. Since each network
    varies quite a bit in structure, it’s not uncommon to see only a few backbones
    supported in any given obj detection or segmentation library.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目标检测、分割、关键点和各种密集像素任务需要在多个尺度上访问来自骨干网络的特征图。通常通过修改原始分类网络来实现。由于每个网络的结构差异很大，因此在任何给定的目标检测或分割库中，通常只支持少数骨干。
- en: '`timm` allows a consistent interface for creating any of the included models
    as feature backbones that output feature maps for selected levels.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`timm`允许以一致的接口创建任何包含的模型作为特征骨干，输出所选级别的特征图。'
- en: A feature backbone can be created by adding the argument `features_only=True`
    to any `create_model` call. By default 5 strides will be output from most models
    (not all have that many), with the first starting at 2 (some start at 1 or 4).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在任何`create_model`调用中添加参数`features_only=True`可以创建一个特征骨干。默认情况下，大多数模型会输出5个步幅（并非所有模型都有这么多），第一个步幅从2开始（有些从1或4开始）。
- en: Create a feature map extraction model
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建特征图提取模型
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Query the feature information
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询特征信息
- en: After a feature backbone has been created, it can be queried to provide channel
    or resolution reduction information to the downstream heads without requiring
    static config or hardcoded constants. The `.feature_info` attribute is a class
    encapsulating the information about the feature extraction points.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建特征骨干后，可以查询它以向下游头部提供通道或分辨率缩减信息，而无需静态配置或硬编码常量。`.feature_info`属性是一个封装有关特征提取点信息的类。
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Select specific feature levels or limit the stride
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择特定的特征级别或限制步幅
- en: There are two additional creation arguments impacting the output features.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个影响输出特征的额外创建参数。
- en: '`out_indices` selects which indices to output'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`out_indices`选择要输出的索引'
- en: '`output_stride` limits the feature output stride of the network (also works
    in classification mode BTW)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_stride`限制网络的特征输出步幅（在分类模式下也适用）'
- en: '`out_indices` is supported by all models, but not all models have the same
    index to feature stride mapping. Look at the code or check feature_info to compare.
    The out indices generally correspond to the `C(i+1)th` feature level (a `2^(i+1)`
    reduction). For most models, index 0 is the stride 2 features, and index 4 is
    stride 32.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`out_indices`受所有模型支持，但不是所有模型都具有相同的索引到特征步幅映射。查看代码或检查feature_info进行比较。输出索引通常对应于`C(i+1)th`特征级别（`2^(i+1)`减少）。对于大多数模型，索引0是步幅2的特征，索引4是步幅32。'
- en: '`output_stride` is achieved by converting layers to use dilated convolutions.
    Doing so is not always straightforward, some networks only support `output_stride=32`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将层转换为使用扩张卷积来实现`output_stride`。这样做并不总是直截了当的，有些网络只支持`output_stride=32`。
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
