- en: Building a React application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个 React 应用程序
- en: 'Original text: [https://huggingface.co/docs/transformers.js/tutorials/react](https://huggingface.co/docs/transformers.js/tutorials/react)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers.js/tutorials/react](https://huggingface.co/docs/transformers.js/tutorials/react)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tutorial, we’ll be building a simple React application that performs
    multilingual translation using Transformers.js! The final product will look something
    like this:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将构建一个简单的 React 应用程序，使用 Transformers.js 执行多语言翻译！最终产品将类似于这样：
- en: '![Demo](../Images/04732e5c65a2c2502d231cc7491291d4.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![演示](../Images/04732e5c65a2c2502d231cc7491291d4.png)'
- en: 'Useful links:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有用的链接：
- en: '[Demo site](https://huggingface.co/spaces/Xenova/react-translator)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[演示网站](https://huggingface.co/spaces/Xenova/react-translator)'
- en: '[Source code](https://github.com/xenova/transformers.js/tree/main/examples/react-translator)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[源代码](https://github.com/xenova/transformers.js/tree/main/examples/react-translator)'
- en: Prerequisites
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: '[Node.js](https://nodejs.org/en/) version 18+'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Node.js](https://nodejs.org/en/) 版本 18+'
- en: '[npm](https://www.npmjs.com/) version 9+'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[npm](https://www.npmjs.com/) 版本 9+'
- en: 'Step 1: Initialise the project'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 1 步：初始化项目
- en: 'For this tutorial, we will use [Vite](https://vitejs.dev/) to initialise our
    project. Vite is a build tool that allows us to quickly set up a React application
    with minimal configuration. Run the following command in your terminal:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 [Vite](https://vitejs.dev/) 来初始化我们的项目。Vite 是一个构建工具，允许我们快速设置一个具有最小配置的
    React 应用程序。在终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If prompted to install `create-vite`, type `y` and press `Enter`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提示安装 `create-vite`，请输入 `y` 并按 `Enter` 键。
- en: 'Next, enter the project directory and install the necessary development dependencies:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，进入项目目录并安装必要的开发依赖项：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To test that our application is working, we can run the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的应用程序是否正常工作，我们可以运行以下命令：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Visiting the URL shown in the terminal (e.g., [http://localhost:5173/](http://localhost:5173/))
    should show the default “React + Vite” landing page. You can stop the development
    server by pressing `Ctrl` + `C` in the terminal.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 访问终端中显示的 URL（例如，[http://localhost:5173/](http://localhost:5173/)）应该显示默认的“React
    + Vite”欢迎页面。您可以通过在终端中按 `Ctrl` + `C` 来停止开发服务器。
- en: 'Step 2: Install and configure Transformers.js'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 2 步：安装和配置 Transformers.js
- en: 'Now we get to the fun part: adding machine learning to our application! First,
    install Transformers.js from [NPM](https://www.npmjs.com/package/@xenova/transformers)
    with the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来到有趣的部分：向我们的应用程序添加机器学习！首先，使用以下命令从 [NPM](https://www.npmjs.com/package/@xenova/transformers)
    安装 Transformers.js：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For this application, we will use the [Xenova/nllb-200-distilled-600M](https://huggingface.co/Xenova/nllb-200-distilled-600M)
    model, which can perform multilingual translation among 200 languages. Before
    we start, there are 2 things we need to take note of:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用程序，我们将使用 [Xenova/nllb-200-distilled-600M](https://huggingface.co/Xenova/nllb-200-distilled-600M)
    模型，该模型可以在 200 种语言之间执行多语言翻译。在开始之前，有两件事情我们需要注意：
- en: ML inference can be quite computationally intensive, so it’s better to load
    and run the models in a separate thread from the main (UI) thread.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ML 推断可能非常消耗计算资源，因此最好在主线程之外的单独线程中加载和运行模型。
- en: Since the model is quite large (>1 GB), we don’t want to download it until the
    user clicks the “Translate” button.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于模型相当大（>1 GB），我们不希望在用户点击“翻译”按钮之前下载它。
- en: We can achieve both of these goals by using a [Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)
    and some [React hooks](https://react.dev/reference/react).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 [Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)
    和一些 [React hooks](https://react.dev/reference/react) 来实现这两个目标。
- en: 'Create a file called `worker.js` in the `src` directory. This script will do
    all the heavy-lifing for us, including loading and running of the translation
    pipeline. To ensure the model is only loaded once, we will create the `MyTranslationPipeline`
    class which use the [singleton pattern](https://en.wikipedia.org/wiki/Singleton_pattern)
    to lazily create a single instance of the pipeline when `getInstance` is first
    called, and use this pipeline for all subsequent calls:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `src` 目录中创建一个名为 `worker.js` 的文件。这个脚本将为我们完成所有繁重的工作，包括加载和运行翻译管道。为了确保模型只加载一次，我们将创建
    `MyTranslationPipeline` 类，该类使用 [单例模式](https://en.wikipedia.org/wiki/Singleton_pattern)
    在首次调用 `getInstance` 时懒惰地创建管道的单个实例，并在所有后续调用中使用此管道：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Modify `App.jsx` in the `src` directory. This file is automatically created
    when initializing our React project, and will contain some boilerplate code. Inside
    the `App` function, let’s create the web worker and store a reference to it using
    the `useRef` hook:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `src` 目录中的 `App.jsx`。当初始化我们的 React 项目时，此文件将自动创建，并包含一些样板代码。在 `App` 函数内部，让我们创建
    web worker 并使用 `useRef` hook 存储对它的引用：
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Step 3: Design the user interface'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 3 步：设计用户界面
- en: We recommend starting the development server again with `npm run dev` (if not
    already running) so that you can see your changes in real-time.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用 `npm run dev` 重新启动开发服务器（如果尚未运行），以便您可以实时查看您的更改。
- en: 'First, let’s define our components. Create a folder called `components` in
    the `src` directory, and create the following files:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义我们的组件。在 `src` 目录中创建一个名为 `components` 的文件夹，并创建以下文件：
- en: '`LanguageSelector.jsx`: This component will allow the user to select the input
    and output languages. Check out the full list of languages [here](https://github.com/xenova/transformers.js/blob/main/examples/react-translator/src/components/LanguageSelector.jsx).'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LanguageSelector.jsx`：这个组件将允许用户选择输入和输出语言。查看完整的语言列表 [here](https://github.com/xenova/transformers.js/blob/main/examples/react-translator/src/components/LanguageSelector.jsx)。'
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`Progress.jsx`: This component will display the progress for downloading each
    model file.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Progress.jsx`：这个组件将显示每个模型文件下载的进度。'
- en: '[PRE7]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We can now use these components in `App.jsx` by adding these imports to the
    top of the file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过将这些导入添加到文件顶部在 `App.jsx` 中使用这些组件：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let’s also add some state variables to keep track of a few things in our application,
    like model loading, languages, input text, and output text. Add the following
    code to the beginning of the `App` function in `src/App.jsx`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还添加一些状态变量来跟踪应用程序中的一些内容，比如模型加载、语言、输入文本和输出文本。将以下代码添加到 `src/App.jsx` 中 `App`
    函数的开头：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, we can add our custom components to the main `App` component. We will
    also add two `textarea` elements for input and output text, and a `button` to
    trigger the translation. Modify the `return` statement to look like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以将自定义组件添加到主 `App` 组件中。我们还会添加两个用于输入和输出文本的 `textarea` 元素，以及一个触发翻译的 `button`。修改
    `return` 语句如下：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Don’t worry about the `translate` function for now. We will define it in the
    next section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在不用担心 `translate` 函数。我们将在下一节中定义它。
- en: 'Finally, we can add some CSS to make our app look a little nicer. Modify the
    following files in the `src` directory:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以添加一些 CSS 来让我们的应用程序看起来更漂亮。修改 `src` 目录中以下文件：
- en: '`index.css`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.css`：'
- en: <details><summary data-svelte-h="svelte-1hbuv8y">View code</summary>
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <details><summary data-svelte-h="svelte-1hbuv8y">查看代码</summary>
- en: '[PRE11]</details>'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE11]</details>'
- en: '`App.css`'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`App.css`'
- en: <details><summary data-svelte-h="svelte-1hbuv8y">View code</summary>
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <details><summary data-svelte-h="svelte-1hbuv8y">查看代码</summary>
- en: '[PRE12]</details>'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE12]</details>'
- en: 'Step 4: Connecting everything together'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 4：将所有内容连接在一起
- en: Now that we have a basic user interface set up, we can finally connect everything
    together.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了基本的用户界面，我们终于可以把所有东西连接起来了。
- en: 'First, let’s define the `translate` function, which will be called when the
    user clicks the `Translate` button. This sends a message (containing the input
    text, source language, and target language) to the worker thread for processing.
    We will also disable the button so the user doesn’t click it multiple times. Add
    the following code just before the `return` statement in the `App` function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义 `translate` 函数，当用户点击 `Translate` 按钮时将调用该函数。这会将包含输入文本、源语言和目标语言的消息发送到工作线程进行处理。我们还会禁用按钮，以防用户多次点击。在
    `App` 函数的 `return` 语句之前添加以下代码：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, let’s add an event listener in `src/worker.js` to listen for messages from
    the main thread. We will send back messages (e.g., for model loading progress
    and text streaming) to the main thread with `self.postMessage`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `src/worker.js` 中添加一个事件侦听器，以侦听来自主线程的消息。我们将使用 `self.postMessage` 将消息（例如模型加载进度和文本流）发送回主线程。
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, let’s fill in our `onMessageReceived` function, which will update
    the application state in response to messages from the worker thread. Add the
    following code inside the `useEffect` hook we defined earlier:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们填写我们的 `onMessageReceived` 函数，该函数将根据来自工作线程的消息更新应用程序状态。在我们之前定义的 `useEffect`
    钩子内添加以下代码：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can now run the application with `npm run dev` and perform multilingual
    translation directly in your browser!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用 `npm run dev` 运行应用程序，并直接在浏览器中进行多语言翻译！
- en: '(Optional) Step 5: Build and deploy'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: （可选）步骤 5：构建和部署
- en: To build your application, simply run `npm run build`. This will bundle your
    application and output the static files to the `dist` folder.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建您的应用程序，只需运行 `npm run build`。这将打包您的应用程序并将静态文件输出到 `dist` 文件夹中。
- en: For this demo, we will deploy our application as a static [Hugging Face Space](https://huggingface.co/docs/hub/spaces),
    but you can deploy it anywhere you like! If you haven’t already, you can create
    a free Hugging Face account [here](https://huggingface.co/join).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，我们将将我们的应用程序部署为静态 [Hugging Face Space](https://huggingface.co/docs/hub/spaces)，但您可以将其部署到任何您喜欢的地方！如果您还没有，您可以在[这里](https://huggingface.co/join)创建一个免费的
    Hugging Face 账户。
- en: Visit [https://huggingface.co/new-space](https://huggingface.co/new-space) and
    fill in the form. Remember to select “Static” as the space type.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://huggingface.co/new-space](https://huggingface.co/new-space) 并填写表格。记得选择“Static”作为空间类型。
- en: Go to “Files” → “Add file” → “Upload files”. Drag the `index.html` file and
    `public/` folder from the `dist` folder into the upload box and click “Upload”.
    After they have uploaded, scroll down to the button and click “Commit changes
    to main”.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到“文件” → “添加文件” → “上传文件”。将 `dist` 文件夹中的 `index.html` 文件和 `public/` 文件夹拖到上传框中，然后点击“上传”。上传完成后，滚动到按钮下方，点击“提交更改到主分支”。
- en: '**That’s it!** Your application should now be live at `https://huggingface.co/spaces/<your-username>/<your-space-name>`!'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**就是这样！** 您的应用程序现在应该在 `https://huggingface.co/spaces/<your-username>/<your-space-name>`
    上运行！'
