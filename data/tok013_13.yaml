- en: Added Tokens
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 已添加的令牌
- en: 'Original text: [https://huggingface.co/docs/tokenizers/api/added-tokens](https://huggingface.co/docs/tokenizers/api/added-tokens)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/tokenizers/api/added-tokens](https://huggingface.co/docs/tokenizers/api/added-tokens)
- en: PythonRustNode
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: PythonRustNode
- en: AddedToken
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AddedToken
- en: '### `class tokenizers.AddedToken`'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class tokenizers.AddedToken`'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`content` (`str`) — The content of the token'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content`（`str`）—令牌的内容'
- en: '`single_word` (`bool`, defaults to `False`) — Defines whether this token should
    only match single words. If `True`, this token will never match inside of a word.
    For example the token `ing` would match on `tokenizing` if this option is `False`,
    but not if it is `True`. The notion of ”*inside of a word*” is defined by the
    word boundaries pattern in regular expressions (ie. the token should start and
    end with word boundaries).'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`single_word`（`bool`，默认为`False`）—定义此令牌是否应该仅匹配单词。如果为`True`，此令牌将永远不会在单词内部匹配。例如，如果此选项为`False`，则令牌`ing`将在`tokenizing`上匹配，但如果为`True`，则不会。
    ”*单词内部*”的概念由正则表达式中的单词边界模式定义（即，令牌应该以单词边界开头和结尾）。'
- en: '`lstrip` (`bool`, defaults to `False`) — Defines whether this token should
    strip all potential whitespaces on its left side. If `True`, this token will greedily
    match any whitespace on its left. For example if we try to match the token `[MASK]`
    with `lstrip=True`, in the text `"I saw a [MASK]"`, we would match on `" [MASK]"`.
    (Note the space on the left).'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lstrip`（`bool`，默认为`False`）—定义此令牌是否应该剥离其左侧的所有潜在空格。如果为`True`，此令牌将贪婪地匹配其左侧的任何空格。例如，如果我们尝试使用`lstrip=True`匹配令牌`[MASK]`，在文本`"I
    saw a [MASK]"`中，我们将匹配`" [MASK]"`。（注意左侧的空格）。'
- en: '`rstrip` (`bool`, defaults to `False`) — Defines whether this token should
    strip all potential whitespaces on its right side. If `True`, this token will
    greedily match any whitespace on its right. It works just like `lstrip` but on
    the right.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rstrip`（`bool`，默认为`False`）—定义此令牌是否应该剥离其右侧的所有潜在空格。如果为`True`，此令牌将贪婪地匹配其右侧的任何空格。它的工作方式与`lstrip`相同，但在右侧。'
- en: '`normalized` (`bool`, defaults to `True` with —meth:*~tokenizers.Tokenizer.add_tokens*
    and `False` with `add_special_tokens()`): Defines whether this token should match
    against the normalized version of the input text. For example, with the added
    token `"yesterday"`, and a normalizer in charge of lowercasing the text, the token
    could be extract from the input `"I saw a lion Yesterday"`.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normalized`（`bool`，默认为`True`与—meth:*~tokenizers.Tokenizer.add_tokens*和`False`与`add_special_tokens()`）：定义此令牌是否应该与输入文本的规范化版本匹配。例如，使用添加的令牌`"yesterday"`，并且一个负责将文本转换为小写的规范化器，该令牌可以从输入`"I
    saw a lion Yesterday"`中提取出来。'
- en: Represents a token that can be be added to a [Tokenizer](/docs/tokenizers/v0.13.4.rc2/en/api/tokenizer#tokenizers.Tokenizer).
    It can have special options that defines the way it should behave.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 表示一个可以添加到[Tokenizer](/docs/tokenizers/v0.13.4.rc2/en/api/tokenizer#tokenizers.Tokenizer)的令牌。它可以具有特殊选项，定义它应该如何行为。
- en: property content
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 content
- en: Get the content of this `AddedToken`
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 获取此`AddedToken`的内容
- en: property lstrip
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 lstrip
- en: Get the value of the `lstrip` option
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`lstrip`选项的值
- en: property normalized
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 normalized
- en: Get the value of the `normalized` option
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`normalized`选项的值
- en: property rstrip
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 rstrip
- en: Get the value of the `rstrip` option
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`rstrip`选项的值
- en: property single_word
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 属性 single_word
- en: Get the value of the `single_word` option
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 获取`single_word`选项的值
