- en: Use with JAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JAX
- en: 'Original text: [https://huggingface.co/docs/datasets/use_with_jax](https://huggingface.co/docs/datasets/use_with_jax)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/datasets/use_with_jax](https://huggingface.co/docs/datasets/use_with_jax)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: This document is a quick introduction to using `datasets` with JAX, with a particular
    focus on how to get `jax.Array` objects out of our datasets, and how to use them
    to train JAX models.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是关于如何在 JAX 中使用 `datasets` 的快速介绍，重点是如何从我们的数据集中获取 `jax.Array` 对象，以及如何使用它们来训练
    JAX 模型。
- en: '`jax` and `jaxlib` are required to reproduce to code above, so please make
    sure you install them as `pip install datasets[jax]`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为了重现上面的代码，需要安装 `jax` 和 `jaxlib`，请确保使用 `pip install datasets[jax]` 安装它们。
- en: Dataset format
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集格式
- en: 'By default, datasets return regular Python objects: integers, floats, strings,
    lists, etc., and string and binary objects are unchanged, since JAX only supports
    numbers.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，数据集返回常规的 Python 对象：整数、浮点数、字符串、列表等，字符串和二进制对象保持不变，因为 JAX 仅支持数字。
- en: 'To get JAX arrays (numpy-like) instead, you can set the format of the dataset
    to `jax`:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 JAX 数组（类似于 numpy），您可以将数据集的格式设置为 `jax`：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A [Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset)
    object is a wrapper of an Arrow table, which allows fast reads from arrays in
    the dataset to JAX arrays.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset)
    对象是 Arrow 表的包装器，允许从数据集中的数组快速读取到 JAX 数组。'
- en: 'Note that the exact same procedure applies to `DatasetDict` objects, so that
    when setting the format of a `DatasetDict` to `jax`, all the `Dataset`s there
    will be formatted as `jax`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，相同的过程也适用于 `DatasetDict` 对象，因此将 `DatasetDict` 的格式设置为 `jax` 时，其中的所有 `Dataset`
    将被格式化为 `jax`：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Another thing you’ll need to take into consideration is that the formatting
    is not applied until you actually access the data. So if you want to get a JAX
    array out of a dataset, you’ll need to access the data first, otherwise the format
    will remain the same.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件需要考虑的事情是，直到您实际访问数据之前，格式化不会应用。因此，如果您想从数据集中获取一个 JAX 数组，您需要先访问数据，否则格式将保持不变。
- en: 'Finally, to load the data in the device of your choice, you can specify the
    `device` argument, but note that `jaxlib.xla_extension.Device` is not supported
    as it’s not serializable with neither `pickle` not `dill`, so you’ll need to use
    its string identifier instead:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要在所选设备上加载数据，您可以指定 `device` 参数，但请注意 `jaxlib.xla_extension.Device` 不受支持，因为它既不与
    `pickle` 也不与 `dill` 可序列化，因此您需要使用其字符串标识符：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that if the `device` argument is not provided to `with_format` then it
    will use the default device which is `jax.devices()[0]`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果未向 `with_format` 提供 `device` 参数，则将使用默认设备，即 `jax.devices()[0]`。
- en: N-dimensional arrays
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: N 维数组
- en: If your dataset consists of N-dimensional arrays, you will see that by default
    they are considered as nested lists. In particular, a JAX formatted dataset outputs
    a `DeviceArray` object, which is a numpy-like array, so it does not need the `Array`
    feature type to be specified as opposed to PyTorch or TensorFlow formatters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的数据集由 N 维数组组成，您会发现默认情况下它们被视为嵌套列表。特别是，JAX 格式化的数据集输出一个 `DeviceArray` 对象，这是一个类似于
    numpy 的数组，因此与 PyTorch 或 TensorFlow 格式化器不同，不需要指定 `Array` 特征类型。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Other feature types
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他特征类型
- en: '[ClassLabel](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.ClassLabel)
    data is properly converted to arrays:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[ClassLabel](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.ClassLabel)
    数据会被正确转换为数组：'
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: String and binary objects are unchanged, since JAX only supports numbers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串和二进制对象保持不变，因为 JAX 仅支持数字。
- en: The [Image](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Image)
    and [Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)
    feature types are also supported.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还支持 [Image](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Image)
    和 [Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)
    特征类型。
- en: To use the [Image](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Image)
    feature type, you’ll need to install the `vision` extra as `pip install datasets[vision]`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 [Image](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Image)
    特征类型，您需要安装 `vision` 额外模块，命令为 `pip install datasets[vision]`。
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To use the [Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)
    feature type, you’ll need to install the `audio` extra as `pip install datasets[audio]`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 [Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)
    特征类型，您需要安装 `audio` 额外模块，命令为 `pip install datasets[audio]`。
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Data loading
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据加载
- en: 'JAX doesn’t have any built-in data loading capabilities, so you’ll need to
    use a library such as [PyTorch](https://pytorch.org/) to load your data using
    a `DataLoader` or [TensorFlow](https://www.tensorflow.org/) using a `tf.data.Dataset`.
    Citing the [JAX documentation](https://jax.readthedocs.io/en/latest/notebooks/Neural_Network_and_Data_Loading.html#data-loading-with-pytorch)
    on this topic: “JAX is laser-focused on program transformations and accelerator-backed
    NumPy, so we don’t include data loading or munging in the JAX library. There are
    already a lot of great data loaders out there, so let’s just use them instead
    of reinventing anything. We’ll grab PyTorch’s data loader, and make a tiny shim
    to make it work with NumPy arrays.”.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JAX 没有任何内置的数据加载功能，因此您需要使用诸如 [PyTorch](https://pytorch.org/) 这样的库来加载数据，使用 `DataLoader`
    或使用 [TensorFlow](https://www.tensorflow.org/) 使用 `tf.data.Dataset`。引用关于此主题的 [JAX
    文档](https://jax.readthedocs.io/en/latest/notebooks/Neural_Network_and_Data_Loading.html#data-loading-with-pytorch)：“JAX
    焦点是程序转换和支持加速器的 NumPy，因此我们不包括数据加载或处理在 JAX 库中。已经有很多出色的数据加载器，所以让我们使用它们而不是重新发明任何东西。我们将使用
    PyTorch 的数据加载器，并制作一个小的包装器使其与 NumPy 数组一起工作。”。
- en: So that’s the reason why JAX-formatting in `datasets` is so useful, because
    it lets you use any model from the HuggingFace Hub with JAX, without having to
    worry about the data loading part.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在 `datasets` 中使用 JAX 格式的原因，因为它让您可以使用 HuggingFace Hub 中的任何模型与 JAX 一起使用，而无需担心数据加载部分。
- en: Using with_format('jax')
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 with_format('jax')
- en: The easiest way to get JAX arrays out of a dataset is to use the `with_format('jax')`
    method. Lets assume that we want to train a neural network on the [MNIST dataset](http://yann.lecun.com/exdb/mnist/)
    available at the HuggingFace Hub at [https://huggingface.co/datasets/mnist](https://huggingface.co/datasets/mnist).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据集中获取JAX数组的最简单方法是使用`with_format('jax')`方法。假设我们想要在HuggingFace Hub提供的[MNIST数据集](http://yann.lecun.com/exdb/mnist/)上训练神经网络，该数据集可在[https://huggingface.co/datasets/mnist](https://huggingface.co/datasets/mnist)上找到。
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once the format is set we can feed the dataset to the JAX model in batches
    using the `Dataset.iter()` method:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦格式设置好，我们可以使用`Dataset.iter()`方法将数据集分批输入到JAX模型中：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
