- en: processors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: processors
- en: 'Original text: [https://huggingface.co/docs/transformers.js/api/processors](https://huggingface.co/docs/transformers.js/api/processors)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers.js/api/processors](https://huggingface.co/docs/transformers.js/api/processors)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Processors are used to prepare non-textual inputs (e.g., image or audio) for
    a model.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Processors are used to prepare non-textual inputs (e.g., image or audio) for
    a model.
- en: '**Example:** Using a `WhisperProcessor` to prepare an audio input for a model.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**Example:** 使用`WhisperProcessor`准备音频输入以供模型使用。'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[processors](#module_processors)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[processors](#module_processors)'
- en: '*static*'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*static*'
- en: '[.FeatureExtractor](#module_processors.FeatureExtractor) ⇐ `Callable`'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.FeatureExtractor](#module_processors.FeatureExtractor) ⇐ `Callable`'
- en: '[`new FeatureExtractor(config)`](#new_module_processors.FeatureExtractor_new)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new FeatureExtractor(config)`](#new_module_processors.FeatureExtractor_new)'
- en: '[.ImageFeatureExtractor](#module_processors.ImageFeatureExtractor) ⇐ `FeatureExtractor`'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ImageFeatureExtractor](#module_processors.ImageFeatureExtractor) ⇐ `FeatureExtractor`'
- en: '[`new ImageFeatureExtractor(config)`](#new_module_processors.ImageFeatureExtractor_new)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ImageFeatureExtractor(config)`](#new_module_processors.ImageFeatureExtractor_new)'
- en: '[`.thumbnail(image, size, [resample])`](#module_processors.ImageFeatureExtractor+thumbnail)
    ⇒ `Promise.<RawImage>`'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.thumbnail(image, size, [resample])`](#module_processors.ImageFeatureExtractor+thumbnail)
    ⇒ `Promise.<RawImage>`'
- en: '[`.crop_margin(image, gray_threshold)`](#module_processors.ImageFeatureExtractor+crop_margin)
    ⇒ `Promise.<RawImage>`'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.crop_margin(image, gray_threshold)`](#module_processors.ImageFeatureExtractor+crop_margin)
    ⇒ `Promise.<RawImage>`'
- en: '[`.pad_image(pixelData, imgDims, padSize, options)`](#module_processors.ImageFeatureExtractor+pad_image)
    ⇒ `*`'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.pad_image(pixelData, imgDims, padSize, options)`](#module_processors.ImageFeatureExtractor+pad_image)
    ⇒ `*`'
- en: '[`.rescale(pixelData)`](#module_processors.ImageFeatureExtractor+rescale) ⇒
    `void`'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.rescale(pixelData)`](#module_processors.ImageFeatureExtractor+rescale) ⇒
    `void`'
- en: '[`.get_resize_output_image_size(image, size)`](#module_processors.ImageFeatureExtractor+get_resize_output_image_size)
    ⇒ `*`'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.get_resize_output_image_size(image, size)`](#module_processors.ImageFeatureExtractor+get_resize_output_image_size)
    ⇒ `*`'
- en: '[`.resize(image)`](#module_processors.ImageFeatureExtractor+resize) ⇒ `Promise.<RawImage>`'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.resize(image)`](#module_processors.ImageFeatureExtractor+resize) ⇒ `Promise.<RawImage>`'
- en: '[`.preprocess(image, overrides)`](#module_processors.ImageFeatureExtractor+preprocess)
    ⇒ `Promise.<PreprocessedImage>`'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.preprocess(image, overrides)`](#module_processors.ImageFeatureExtractor+preprocess)
    ⇒ `Promise.<PreprocessedImage>`'
- en: '[`._call(images, ...args)`](#module_processors.ImageFeatureExtractor+_call)
    ⇒ `Promise.<ImageFeatureExtractorResult>`'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call(images, ...args)`](#module_processors.ImageFeatureExtractor+_call)
    ⇒ `Promise.<ImageFeatureExtractorResult>`'
- en: '[.DetrFeatureExtractor](#module_processors.DetrFeatureExtractor) ⇐ `ImageFeatureExtractor`'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.DetrFeatureExtractor](#module_processors.DetrFeatureExtractor) ⇐ `ImageFeatureExtractor`'
- en: '[`._call(images)`](#module_processors.DetrFeatureExtractor+_call) ⇒ `Promise.<DetrFeatureExtractorResult>`'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call(images)`](#module_processors.DetrFeatureExtractor+_call) ⇒ `Promise.<DetrFeatureExtractorResult>`'
- en: '[`.post_process_object_detection()`](#module_processors.DetrFeatureExtractor+post_process_object_detection)
    : `post_process_object_detection`'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.post_process_object_detection()`](#module_processors.DetrFeatureExtractor+post_process_object_detection)
    : `post_process_object_detection`'
- en: '[`.remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold,
    num_labels)`](#module_processors.DetrFeatureExtractor+remove_low_and_no_objects)
    ⇒ `*`'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold,
    num_labels)`](#module_processors.DetrFeatureExtractor+remove_low_and_no_objects)
    ⇒ `*`'
- en: '[`.check_segment_validity(mask_labels, mask_probs, k, mask_threshold, overlap_mask_area_threshold)`](#module_processors.DetrFeatureExtractor+check_segment_validity)
    ⇒ `*`'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.check_segment_validity(mask_labels, mask_probs, k, mask_threshold, overlap_mask_area_threshold)`](#module_processors.DetrFeatureExtractor+check_segment_validity)
    ⇒ `*`'
- en: '[`.compute_segments(mask_probs, pred_scores, pred_labels, mask_threshold, overlap_mask_area_threshold,
    label_ids_to_fuse, target_size)`](#module_processors.DetrFeatureExtractor+compute_segments)
    ⇒ `*`'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.compute_segments(mask_probs, pred_scores, pred_labels, mask_threshold, overlap_mask_area_threshold,
    label_ids_to_fuse, target_size)`](#module_processors.DetrFeatureExtractor+compute_segments)
    ⇒ `*`'
- en: '[`.post_process_panoptic_segmentation(outputs, [threshold], [mask_threshold],
    [overlap_mask_area_threshold], [label_ids_to_fuse], [target_sizes])`](#module_processors.DetrFeatureExtractor+post_process_panoptic_segmentation)
    ⇒ `Array.<{segmentation: Tensor, segments_info: Array<{id: number, label_id: number,
    score: number}>}>`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.post_process_panoptic_segmentation(outputs, [threshold], [mask_threshold],
    [overlap_mask_area_threshold], [label_ids_to_fuse], [target_sizes])`](#module_processors.DetrFeatureExtractor+post_process_panoptic_segmentation)
    ⇒ `Array.<{segmentation: Tensor, segments_info: Array<{id: number, label_id: number,
    score: number}>}>`'
- en: '[.Processor](#module_processors.Processor) ⇐ `Callable`'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.Processor](#module_processors.Processor) ⇐ `Callable`'
- en: '[`new Processor(feature_extractor)`](#new_module_processors.Processor_new)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new Processor(feature_extractor)`](#new_module_processors.Processor_new)'
- en: '[`._call(input, ...args)`](#module_processors.Processor+_call) ⇒ `Promise.<any>`'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call(input, ...args)`](#module_processors.Processor+_call) ⇒ `Promise.<any>`'
- en: '[.WhisperProcessor](#module_processors.WhisperProcessor) ⇐ `Processor`'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.WhisperProcessor](#module_processors.WhisperProcessor) ⇐ `Processor`'
- en: '[`._call(audio)`](#module_processors.WhisperProcessor+_call) ⇒ `Promise.<any>`'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call(audio)`](#module_processors.WhisperProcessor+_call) ⇒ `Promise.<any>`'
- en: '[.AutoProcessor](#module_processors.AutoProcessor)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.AutoProcessor](#module_processors.AutoProcessor)'
- en: '[`.from_pretrained(pretrained_model_name_or_path, options)`](#module_processors.AutoProcessor.from_pretrained)
    ⇒ `Promise.<Processor>`'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.from_pretrained(pretrained_model_name_or_path, options)`](#module_processors.AutoProcessor.from_pretrained)
    ⇒ `Promise.<Processor>`'
- en: '*inner*'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*inner*'
- en: '[`~center_to_corners_format(arr)`](#module_processors..center_to_corners_format)
    ⇒ `Array.<number>`'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~center_to_corners_format(arr)`](#module_processors..center_to_corners_format)
    ⇒ `Array.<number>`'
- en: '[`~enforce_size_divisibility(size, divisor)`](#module_processors..enforce_size_divisibility)
    ⇒ `*`'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~enforce_size_divisibility(size, divisor)`](#module_processors..enforce_size_divisibility)
    ⇒ `*`'
- en: '[`~HeightWidth`](#module_processors..HeightWidth) : `*`'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~HeightWidth`](#module_processors..HeightWidth) : `*`'
- en: '[`~ImageFeatureExtractorResult`](#module_processors..ImageFeatureExtractorResult)
    : `object`'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ImageFeatureExtractorResult`](#module_processors..ImageFeatureExtractorResult)
    : `object`'
- en: '[`~PreprocessedImage`](#module_processors..PreprocessedImage) : `object`'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~PreprocessedImage`](#module_processors..PreprocessedImage) : `object`'
- en: '[`~DetrFeatureExtractorResult`](#module_processors..DetrFeatureExtractorResult)
    : `object`'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~DetrFeatureExtractorResult`](#module_processors..DetrFeatureExtractorResult)
    : `object`'
- en: '[`~SamImageProcessorResult`](#module_processors..SamImageProcessorResult) :
    `object`'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~SamImageProcessorResult`](#module_processors..SamImageProcessorResult) :
    `object`'
- en: '* * *'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: processors.FeatureExtractor ⇐ <code> Callable </code>
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: processors.FeatureExtractor ⇐ <code> Callable </code>
- en: Base class for feature extractors.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 特征提取器的基类。
- en: '**Kind**: static class of [`processors`](#module_processors)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kind**: 静态类 [`processors`](#module_processors)'
- en: '**Extends**: `Callable`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展**: `Callable`'
- en: '* * *'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new FeatureExtractor(config)
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new FeatureExtractor(config)
- en: Constructs a new FeatureExtractor instance.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的FeatureExtractor实例。
- en: '| Param | Type | Description |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| Param | Type | Description |'
- en: '| --- | --- | --- |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| config | `Object` | The configuration for the feature extractor. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| config | `Object` | 特征提取器的配置。 |'
- en: '* * *'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: processors.ImageFeatureExtractor ⇐ <code> FeatureExtractor </code>
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: processors.ImageFeatureExtractor ⇐ <code> FeatureExtractor </code>
- en: Feature extractor for image models.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 用于图像模型的特征提取器。
- en: '**Kind**: static class of [`processors`](#module_processors)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kind**: 静态类 [`processors`](#module_processors)'
- en: '**Extends**: `FeatureExtractor`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展**: `FeatureExtractor`'
- en: '[.ImageFeatureExtractor](#module_processors.ImageFeatureExtractor) ⇐ `FeatureExtractor`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ImageFeatureExtractor](#module_processors.ImageFeatureExtractor) ⇐ `FeatureExtractor`'
- en: '[`new ImageFeatureExtractor(config)`](#new_module_processors.ImageFeatureExtractor_new)'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ImageFeatureExtractor(config)`](#new_module_processors.ImageFeatureExtractor_new)'
- en: '[`.thumbnail(image, size, [resample])`](#module_processors.ImageFeatureExtractor+thumbnail)
    ⇒ `Promise.<RawImage>`'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.thumbnail(image, size, [resample])`](#module_processors.ImageFeatureExtractor+thumbnail)
    ⇒ `Promise.<RawImage>`'
- en: '[`.crop_margin(image, gray_threshold)`](#module_processors.ImageFeatureExtractor+crop_margin)
    ⇒ `Promise.<RawImage>`'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.crop_margin(image, gray_threshold)`](#module_processors.ImageFeatureExtractor+crop_margin)
    ⇒ `Promise.<RawImage>`'
- en: '[`.pad_image(pixelData, imgDims, padSize, options)`](#module_processors.ImageFeatureExtractor+pad_image)
    ⇒ `*`'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.pad_image(pixelData, imgDims, padSize, options)`](#module_processors.ImageFeatureExtractor+pad_image)
    ⇒ `*`'
- en: '[`.rescale(pixelData)`](#module_processors.ImageFeatureExtractor+rescale) ⇒
    `void`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.rescale(pixelData)`](#module_processors.ImageFeatureExtractor+rescale) ⇒
    `void`'
- en: '[`.get_resize_output_image_size(image, size)`](#module_processors.ImageFeatureExtractor+get_resize_output_image_size)
    ⇒ `*`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.get_resize_output_image_size(image, size)`](#module_processors.ImageFeatureExtractor+get_resize_output_image_size)
    ⇒ `*`'
- en: '[`.resize(image)`](#module_processors.ImageFeatureExtractor+resize) ⇒ `Promise.<RawImage>`'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.resize(image)`](#module_processors.ImageFeatureExtractor+resize) ⇒ `Promise.<RawImage>`'
- en: '[`.preprocess(image, overrides)`](#module_processors.ImageFeatureExtractor+preprocess)
    ⇒ `Promise.<PreprocessedImage>`'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.preprocess(image, overrides)`](#module_processors.ImageFeatureExtractor+preprocess)
    ⇒ `Promise.<PreprocessedImage>`'
- en: '[`._call(images, ...args)`](#module_processors.ImageFeatureExtractor+_call)
    ⇒ `Promise.<ImageFeatureExtractorResult>`'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call(images, ...args)`](#module_processors.ImageFeatureExtractor+_call)
    ⇒ `Promise.<ImageFeatureExtractorResult>`'
- en: '* * *'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new ImageFeatureExtractor(config)
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new ImageFeatureExtractor(config)
- en: Constructs a new ImageFeatureExtractor instance.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 构造一个新的ImageFeatureExtractor实例。
- en: '| Param | Type | Description |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| Param | Type | Description |'
- en: '| --- | --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| config | `Object` | The configuration for the feature extractor. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| config | `Object` | 特征提取器的配置。 |'
- en: '| config.image_mean | `Array.<number>` | The mean values for image normalization.
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| config.image_mean | `Array.<number>` | 图像归一化的均值。 |'
- en: '| config.image_std | `Array.<number>` | The standard deviation values for image
    normalization. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| config.image_std | `Array.<number>` | 图像归一化的标准差值。 |'
- en: '| config.do_rescale | `boolean` | Whether to rescale the image pixel values
    to the [0,1] range. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| config.do_rescale | `boolean` | 是否将图像像素值重新缩放到[0,1]范围内。 |'
- en: '| config.rescale_factor | `number` | The factor to use for rescaling the image
    pixel values. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| config.rescale_factor | `number` | 用于重新缩放图像像素值的因子。 |'
- en: '| config.do_normalize | `boolean` | Whether to normalize the image pixel values.
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| config.do_normalize | `boolean` | 是否对图像像素值进行归一化。 |'
- en: '| config.do_resize | `boolean` | Whether to resize the image. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| config.do_resize | `boolean` | 是否调整图像大小。 |'
- en: '| config.resample | `number` | What method to use for resampling. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| config.resample | `number` | 用于重采样的方法。 |'
- en: '| config.size | `number` &#124; `Object` | The size to resize the image to.
    |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| config.size | `number` &#124; `Object` | 要调整图像大小的尺寸。 |'
- en: '* * *'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageFeatureExtractor.thumbnail(image, size, [resample]) ⇒ <code> Promise. <
    RawImage > </code>
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageFeatureExtractor.thumbnail(image, size, [resample]) ⇒ <code> Promise. <
    RawImage > </code>
- en: Resize the image to make a thumbnail. The image is resized so that no dimension
    is larger than any corresponding dimension of the specified size.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像调整大小以制作缩略图。调整图像大小，使得没有任何维度大于指定尺寸的相应维度。
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kind**: [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)的实例方法'
- en: '**Returns**: `Promise.<RawImage>` - The resized image.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**: `Promise.<RawImage>` - 调整大小后的图像。'
- en: '| Param | Type | Default | Description |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| Param | Type | Default | Description |'
- en: '| --- | --- | --- | --- |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| image | `RawImage` |  | The image to be resized. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| image | `RawImage` |  | 要调整大小的图像。 |'
- en: '| size | `Object` |  | The size `{"height": h, "width": w}` to resize the image
    to. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| size | `Object` |  | 调整图像大小的尺寸 `{"height": h, "width": w}`。 |'
- en: '| [resample] | `string` &#124; `0` &#124; `1` &#124; `2` &#124; `3` &#124;
    `4` &#124; `5` | `2` | The resampling filter to use. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| [resample] | `string` &#124; `0` &#124; `1` &#124; `2` &#124; `3` &#124;
    `4` &#124; `5` | `2` | 要使用的重采样滤波器。 |'
- en: '* * *'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageFeatureExtractor.crop_margin(image, gray_threshold) ⇒ <code> Promise. <
    RawImage > </code>
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageFeatureExtractor.crop_margin(image, gray_threshold) ⇒ <code> Promise. <
    RawImage > </code>
- en: Crops the margin of the image. Gray pixels are considered margin (i.e., pixels
    with a value below the threshold).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 裁剪图像的边缘。灰色像素被视为边缘（即像素值低于阈值）。
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kind**: [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)的实例方法'
- en: '**Returns**: `Promise.<RawImage>` - The cropped image.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**: `Promise.<RawImage>` - 裁剪后的图像。'
- en: '| Param | Type | Default | Description |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| Param | Type | Default | Description |'
- en: '| --- | --- | --- | --- |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| image | `RawImage` |  | The image to be cropped. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| image | `RawImage` |  | 要裁剪的图像。 |'
- en: '| gray_threshold | `number` | `200` | Value below which pixels are considered
    to be gray. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| gray_threshold | `number` | `200` | 被视为边缘的像素值下限。 |'
- en: '* * *'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageFeatureExtractor.pad_image(pixelData, imgDims, padSize, options) ⇒ <code>
    * </code>
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageFeatureExtractor.pad_image(pixelData, imgDims, padSize, options) ⇒ <code>
    * </code>
- en: Pad the image by a certain amount.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一定量进行图像填充。
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kind**: [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)的实例方法'
- en: '**Returns**: `*` - The padded pixel data and image dimensions.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`*` - 填充后的像素数据和图像尺寸。'
- en: '| Param | Type | Default | Description |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 默认值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| pixelData | `Float32Array` |  | The pixel data to pad. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| pixelData | `Float32Array` |  | 要填充的像素数据。 |'
- en: '| imgDims | `Array.<number>` |  | The dimensions of the image. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| imgDims | `Array.<number>` |  | 图像的尺寸。 |'
- en: '| padSize | `*` |  | The dimensions of the padded image. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| padSize | `*` |  | 填充后图像的尺寸。 |'
- en: '| options | `Object` |  | The options for padding. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | `Object` |  | 填充选项。 |'
- en: '| [options.mode] | `''constant''` &#124; `''symmetric''` | `''constant''` |
    The type of padding to add. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| [options.mode] | `''constant''` &#124; `''symmetric''` | `''constant''` |
    要添加的填充类型。 |'
- en: '| [options.center] | `boolean` | `false` | Whether to center the image. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| [options.center] | `boolean` | `false` | 是否居中图像。 |'
- en: '| [options.constant_values] | `number` | `0` | The constant value to use for
    padding. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| [options.constant_values] | `number` | `0` | 用于填充的常量值。 |'
- en: '* * *'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageFeatureExtractor.rescale(pixelData) ⇒ <code> void </code>
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageFeatureExtractor.rescale(pixelData) ⇒ <code> void </code>
- en: Rescale the image’ pixel values by `this.rescale_factor`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`this.rescale_factor`重新调整图像的像素值。
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)的实例方法'
- en: '| Param | Type | Description |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| pixelData | `Float32Array` | The pixel data to rescale. |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| pixelData | `Float32Array` | 要调整大小的像素数据。 |'
- en: '* * *'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageFeatureExtractor.get_resize_output_image_size(image, size) ⇒ <code> * </code>
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageFeatureExtractor.get_resize_output_image_size(image, size) ⇒ <code> * </code>
- en: Find the target (width, height) dimension of the output image after resizing
    given the input image and the desired size.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 查找给定输入图像和所需尺寸的目标（宽度、高度）调整大小后的输出图像维度。
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)的实例方法'
- en: '**Returns**: `*` - The target (width, height) dimension of the output image
    after resizing.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`*` - 调整大小后输出图像的目标（宽度、高度）维度。'
- en: '| Param | Type | Description |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| image | `RawImage` | The image to resize. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 图像 | `RawImage` | 要调整大小的图像。 |'
- en: '| size | `any` | The size to use for resizing the image. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 尺寸 | `any` | 用于调整图像大小的尺寸。 |'
- en: '* * *'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageFeatureExtractor.resize(image) ⇒ <code> Promise. < RawImage > </code>
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageFeatureExtractor.resize(image) ⇒ <code> Promise. < RawImage > </code>
- en: Resizes the image.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 调整图像大小。
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)的实例方法'
- en: '**Returns**: `Promise.<RawImage>` - The resized image.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`Promise.<RawImage>` - 调整大小后的图像。'
- en: '| Param | Type | Description |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| image | `RawImage` | The image to resize. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 图像 | `RawImage` | 要调整大小的图像。 |'
- en: '* * *'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageFeatureExtractor.preprocess(image, overrides) ⇒ <code> Promise. < PreprocessedImage
    > </code>
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageFeatureExtractor.preprocess(image, overrides) ⇒ <code> Promise. < PreprocessedImage
    > </code>
- en: Preprocesses the given image.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理给定的图像。
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)的实例方法'
- en: '**Returns**: `Promise.<PreprocessedImage>` - The preprocessed image.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`Promise.<PreprocessedImage>` - 预处理后的图像。'
- en: '| Param | Type | Description |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| image | `RawImage` | The image to preprocess. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| 图像 | `RawImage` | 要预处理的图像。 |'
- en: '| overrides | `Object` | The overrides for the preprocessing options. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| 覆盖 | `Object` | 预处理选项的覆盖。 |'
- en: '* * *'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: imageFeatureExtractor._call(images, ...args) ⇒ <code> Promise. < ImageFeatureExtractorResult
    > </code>
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageFeatureExtractor._call(images, ...args) ⇒ <code> Promise. < ImageFeatureExtractorResult
    > </code>
- en: Calls the feature extraction process on an array of images, preprocesses each
    image, and concatenates the resulting features into a single Tensor.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对图像数组调用特征提取过程，预处理每个图像，并将生成的特征连接成单个张量。
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)的实例方法'
- en: '**Returns**: `Promise.<ImageFeatureExtractorResult>` - An object containing
    the concatenated pixel values (and other metadata) of the preprocessed images.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`Promise.<ImageFeatureExtractorResult>` - 包含预处理图像的连接像素值（和其他元数据）的对象。'
- en: '| Param | Type | Description |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| images | `Array.<RawImage>` | The image(s) to extract features from. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| images | `Array.<RawImage>` | 要从中提取特征的图像。 |'
- en: '| ...args | `any` | Additional arguments. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| ...args | `any` | 附加参数。 |'
- en: '* * *'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: processors.DetrFeatureExtractor ⇐ <code> ImageFeatureExtractor </code>
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: processors.DetrFeatureExtractor ⇐ <code> ImageFeatureExtractor </code>
- en: Detr Feature Extractor.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Detr特征提取器。
- en: '**Kind**: static class of [`processors`](#module_processors)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`processors`](#module_processors)的静态类'
- en: '**Extends**: `ImageFeatureExtractor`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展自**：`ImageFeatureExtractor`'
- en: '[.DetrFeatureExtractor](#module_processors.DetrFeatureExtractor) ⇐ `ImageFeatureExtractor`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.DetrFeatureExtractor](#module_processors.DetrFeatureExtractor) ⇐ `ImageFeatureExtractor`'
- en: '[`._call(images)`](#module_processors.DetrFeatureExtractor+_call) ⇒ `Promise.<DetrFeatureExtractorResult>`'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call(images)`](#module_processors.DetrFeatureExtractor+_call) ⇒ `Promise.<DetrFeatureExtractorResult>`'
- en: '[`.post_process_object_detection()`](#module_processors.DetrFeatureExtractor+post_process_object_detection)
    : `post_process_object_detection`'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.post_process_object_detection()`](#module_processors.DetrFeatureExtractor+post_process_object_detection)
    : `post_process_object_detection`'
- en: '[`.remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold,
    num_labels)`](#module_processors.DetrFeatureExtractor+remove_low_and_no_objects)
    ⇒ `*`'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold,
    num_labels)`](#module_processors.DetrFeatureExtractor+remove_low_and_no_objects)
    ⇒ `*`'
- en: '[`.check_segment_validity(mask_labels, mask_probs, k, mask_threshold, overlap_mask_area_threshold)`](#module_processors.DetrFeatureExtractor+check_segment_validity)
    ⇒ `*`'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.check_segment_validity(mask_labels, mask_probs, k, mask_threshold, overlap_mask_area_threshold)`](#module_processors.DetrFeatureExtractor+check_segment_validity)
    ⇒ `*`'
- en: '[`.compute_segments(mask_probs, pred_scores, pred_labels, mask_threshold, overlap_mask_area_threshold,
    label_ids_to_fuse, target_size)`](#module_processors.DetrFeatureExtractor+compute_segments)
    ⇒ `*`'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.compute_segments(mask_probs, pred_scores, pred_labels, mask_threshold, overlap_mask_area_threshold,
    label_ids_to_fuse, target_size)`](#module_processors.DetrFeatureExtractor+compute_segments)
    ⇒ `*`'
- en: '[`.post_process_panoptic_segmentation(outputs, [threshold], [mask_threshold],
    [overlap_mask_area_threshold], [label_ids_to_fuse], [target_sizes])`](#module_processors.DetrFeatureExtractor+post_process_panoptic_segmentation)
    ⇒ `Array.<{segmentation: Tensor, segments_info: Array<{id: number, label_id: number,
    score: number}>}>`'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.post_process_panoptic_segmentation(outputs, [threshold], [mask_threshold],
    [overlap_mask_area_threshold], [label_ids_to_fuse], [target_sizes])`](#module_processors.DetrFeatureExtractor+post_process_panoptic_segmentation)
    ⇒ `Array.<{segmentation: Tensor, segments_info: Array<{id: number, label_id: number,
    score: number}>}>`'
- en: '* * *'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: detrFeatureExtractor._call(images) ⇒ <code> Promise. < DetrFeatureExtractorResult
    > </code>
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: detrFeatureExtractor._call(images) ⇒ <code> Promise. < DetrFeatureExtractorResult
    > </code>
- en: Calls the feature extraction process on an array of images, preprocesses each
    image, and concatenates the resulting features into a single Tensor.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对图像数组调用特征提取过程，预处理每个图像，并将生成的特征连接成单个张量。
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)的实例方法'
- en: '**Returns**: `Promise.<DetrFeatureExtractorResult>` - An object containing
    the concatenated pixel values of the preprocessed images.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`Promise.<DetrFeatureExtractorResult>` - 包含预处理图像的像素值的对象。'
- en: '| Param | Type | Description |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| Param | Type | Description |'
- en: '| --- | --- | --- |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| images | `Array.<RawImage>` | The image(s) to extract features from. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| images | `Array.<RawImage>` | 从中提取特征的图像。 |'
- en: '* * *'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'detrFeatureExtractor.post_process_object_detection() : <code> post_process_object_detection
    </code>'
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'detrFeatureExtractor.post_process_object_detection() : <code> post_process_object_detection
    </code>'
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)的实例方法'
- en: '* * *'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: detrFeatureExtractor.remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold,
    num_labels) ⇒ <code> * </code>
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: detrFeatureExtractor.remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold,
    num_labels) ⇒ <code> * </code>
- en: Binarize the given masks using `object_mask_threshold`, it returns the associated
    values of `masks`, `scores` and `labels`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`object_mask_threshold`对给定的掩模进行二值化，返回`masks`、`scores`和`labels`的相关值。
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)的实例方法'
- en: '**Returns**: `*` - The binarized masks, the scores, and the labels.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`*` - 二值化的掩模、分数和标签。'
- en: '| Param | Type | Description |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| Param | Type | Description |'
- en: '| --- | --- | --- |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| class_logits | `Tensor` | The class logits. |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| class_logits | `Tensor` | 类别对数。 |'
- en: '| mask_logits | `Tensor` | The mask logits. |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| mask_logits | `Tensor` | 掩模对数。 |'
- en: '| object_mask_threshold | `number` | A number between 0 and 1 used to binarize
    the masks. |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| object_mask_threshold | `number` | 用于二值化掩模的介于0和1之间的数字。 |'
- en: '| num_labels | `number` | The number of labels. |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| num_labels | `number` | 标签数量。 |'
- en: '* * *'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: detrFeatureExtractor.check_segment_validity(mask_labels, mask_probs, k, mask_threshold,
    overlap_mask_area_threshold) ⇒ <code> * </code>
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: detrFeatureExtractor.check_segment_validity(mask_labels, mask_probs, k, mask_threshold,
    overlap_mask_area_threshold) ⇒ <code> * </code>
- en: Checks whether the segment is valid or not.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 检查分段是否有效。
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)的实例方法'
- en: '**Returns**: `*` - Whether the segment is valid or not, and the indices of
    the valid labels.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`*` - 分段是否有效以及有效标签的索引。'
- en: '| Param | Type | Default | Description |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| Param | Type | Default | Description |'
- en: '| --- | --- | --- | --- |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| mask_labels | `Int32Array` |  | Labels for each pixel in the mask. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| mask_labels | `Int32Array` |  | 掩模中每个像素的标签。 |'
- en: '| mask_probs | `Array.<Tensor>` |  | Probabilities for each pixel in the masks.
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| mask_probs | `Array.<Tensor>` |  | 掩模中每个像素的概率。 |'
- en: '| k | `number` |  | The class id of the segment. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| k | `number` |  | 分段的类别ID。 |'
- en: '| mask_threshold | `number` | `0.5` | The mask threshold. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| mask_threshold | `number` | `0.5` | 掩模阈值。 |'
- en: '| overlap_mask_area_threshold | `number` | `0.8` | The overlap mask area threshold.
    |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| overlap_mask_area_threshold | `number` | `0.8` | 重叠掩模区域阈值。 |'
- en: '* * *'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: detrFeatureExtractor.compute_segments(mask_probs, pred_scores, pred_labels,
    mask_threshold, overlap_mask_area_threshold, label_ids_to_fuse, target_size) ⇒
    <code> * </code>
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: detrFeatureExtractor.compute_segments(mask_probs, pred_scores, pred_labels,
    mask_threshold, overlap_mask_area_threshold, label_ids_to_fuse, target_size) ⇒
    <code> * </code>
- en: Computes the segments.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 计算分段。
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)的实例方法'
- en: '**Returns**: `*` - The computed segments.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`*` - 计算得到的分段。'
- en: '| Param | Type | Default | Description |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| Param | Type | Default | Description |'
- en: '| --- | --- | --- | --- |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| mask_probs | `Array.<Tensor>` |  | The mask probabilities. |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| mask_probs | `Array.<Tensor>` |  | 掩模概率。 |'
- en: '| pred_scores | `Array.<number>` |  | The predicted scores. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| pred_scores | `Array.<number>` |  | 预测的分数。 |'
- en: '| pred_labels | `Array.<number>` |  | The predicted labels. |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| pred_labels | `Array.<number>` |  | 预测的标签。 |'
- en: '| mask_threshold | `number` |  | The mask threshold. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| mask_threshold | `number` |  | 掩模阈值。 |'
- en: '| overlap_mask_area_threshold | `number` |  | The overlap mask area threshold.
    |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| overlap_mask_area_threshold | `number` |  | 重叠掩模区域阈值。 |'
- en: '| label_ids_to_fuse | `Set.<number>` |  | The label ids to fuse. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| label_ids_to_fuse | `Set.<number>` |  | 要融合的标签ID。 |'
- en: '| target_size | `Array.<number>` |  | The target size of the image. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| target_size | `Array.<number>` |  | 图像的目标尺寸。 |'
- en: '* * *'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'detrFeatureExtractor.post_process_panoptic_segmentation(outputs, [threshold],
    [mask_threshold], [overlap_mask_area_threshold], [label_ids_to_fuse], [target_sizes])
    ⇒ <code> Array. < {segmentation: Tensor, segments_info: Array < {id: number, label_id:
    number, score: number} > } > </code>'
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'detrFeatureExtractor.post_process_panoptic_segmentation(outputs, [threshold],
    [mask_threshold], [overlap_mask_area_threshold], [label_ids_to_fuse], [target_sizes])
    ⇒ <code> Array. < {segmentation: Tensor, segments_info: Array < {id: number, label_id:
    number, score: number} > } > </code>'
- en: Post-process the model output to generate the final panoptic segmentation.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 后处理模型输出以生成最终的全景分割。
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**: [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)的实例方法'
- en: '| Param | Type | Default | Description |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 默认值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| outputs | `*` |  | The model output to post process |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 输出 | `*` |  | 要进行后处理的模型输出 |'
- en: '| [threshold] | `number` | `0.5` | The probability score threshold to keep
    predicted instance masks. |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| [threshold] | `number` | `0.5` | 保留预测实例掩码的概率分数阈值。 |'
- en: '| [mask_threshold] | `number` | `0.5` | Threshold to use when turning the predicted
    masks into binary values. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| [mask_threshold] | `number` | `0.5` | 在将预测的掩码转换为二进制值时使用的阈值。 |'
- en: '| [overlap_mask_area_threshold] | `number` | `0.8` | The overlap mask area
    threshold to merge or discard small disconnected parts within each binary instance
    mask. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| [overlap_mask_area_threshold] | `number` | `0.8` | 合并或丢弃每个二进制实例掩码中的小断开部分的重叠掩码区域阈值。
    |'
- en: '| [label_ids_to_fuse] | `Set.<number>` |  | The labels in this state will have
    all their instances be fused together. |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| [label_ids_to_fuse] | `Set.<number>` |  | 此状态中的标签将使其所有实例被融合在一起。 |'
- en: '| [target_sizes] | `Array.<Array<number>>` |  | The target sizes to resize
    the masks to. |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| [target_sizes] | `Array.<Array<number>>` |  | 调整掩码大小的目标尺寸。 |'
- en: '* * *'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: processors.Processor ⇐ <code> Callable </code>
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理器。Processor ⇐ <code> Callable </code>
- en: Represents a Processor that extracts features from an input.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 表示从输入中提取特征的处理器。
- en: '**Kind**: static class of [`processors`](#module_processors)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**: [`processors`](#module_processors)的静态类'
- en: '**Extends**: `Callable`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展**: `Callable`'
- en: '[.Processor](#module_processors.Processor) ⇐ `Callable`'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.Processor](#module_processors.Processor) ⇐ `Callable`'
- en: '[`new Processor(feature_extractor)`](#new_module_processors.Processor_new)'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new Processor(feature_extractor)`](#new_module_processors.Processor_new)'
- en: '[`._call(input, ...args)`](#module_processors.Processor+_call) ⇒ `Promise.<any>`'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call(input, ...args)`](#module_processors.Processor+_call) ⇒ `Promise.<any>`'
- en: '* * *'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new Processor(feature_extractor)
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新处理器(feature_extractor)
- en: Creates a new Processor with the given feature extractor.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的特征提取器创建一个新的处理器。
- en: '| Param | Type | Description |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| feature_extractor | `FeatureExtractor` | The function used to extract features
    from the input. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| feature_extractor | `FeatureExtractor` | 用于从输入中提取特征的函数。 |'
- en: '* * *'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: processor._call(input, ...args) ⇒ <code> Promise. < any > </code>
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: processor._call(input, ...args) ⇒ <code> Promise. < any > </code>
- en: Calls the feature_extractor function with the given input.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 调用feature_extractor函数并提供输入。
- en: '**Kind**: instance method of [`Processor`](#module_processors.Processor)'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**: [`Processor`](#module_processors)的实例方法'
- en: '**Returns**: `Promise.<any>` - A Promise that resolves with the extracted features.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**: `Promise.<any>` - 一个解析为提取特征的Promise。'
- en: '| Param | Type | Description |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| input | `any` | The input to extract features from. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 输入 | `any` | 要从中提取特征的输入。 |'
- en: '| ...args | `any` | Additional arguments. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| ...args | `any` | 附加参数。 |'
- en: '* * *'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: processors.WhisperProcessor ⇐ <code> Processor </code>
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理器。WhisperProcessor ⇐ <code>处理器</code>
- en: Represents a WhisperProcessor that extracts features from an audio input.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 表示从音频输入提取特征的WhisperProcessor。
- en: '**Kind**: static class of [`processors`](#module_processors)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**: [`processors`](#module_processors)的静态类'
- en: '**Extends**: `Processor`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展**: `Processor`'
- en: '* * *'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: whisperProcessor._call(audio) ⇒ <code> Promise. < any > </code>
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: whisperProcessor._call(audio) ⇒ <code> Promise. < any > </code>
- en: Calls the feature_extractor function with the given audio input.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 调用feature_extractor函数并提供音频输入。
- en: '**Kind**: instance method of [`WhisperProcessor`](#module_processors.WhisperProcessor)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**: [`WhisperProcessor`](#module_processors.WhisperProcessor)的实例方法'
- en: '**Returns**: `Promise.<any>` - A Promise that resolves with the extracted features.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**: `Promise.<any>` - 一个解析为提取特征的Promise。'
- en: '| Param | Type | Description |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| audio | `any` | The audio input to extract features from. |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| 音频 | `any` | 从中提取特征的音频输入。 |'
- en: '* * *'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: processors.AutoProcessor
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: processors.AutoProcessor
- en: Helper class which is used to instantiate pretrained processors with the `from_pretrained`
    function. The chosen processor class is determined by the type specified in the
    processor config.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 用于使用`from_pretrained`函数实例化预训练处理器的辅助类。所选的处理器类由处理器配置中指定的类型确定。
- en: '**Example:** Load a processor using `from_pretrained`.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例:** 使用`from_pretrained`加载处理器。'
- en: '[PRE1]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Example:** Run an image through a processor.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例:** 运行图像通过处理器。'
- en: '[PRE2]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Kind**: static class of [`processors`](#module_processors)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**: [`processors`](#module_processors)的静态类'
- en: '* * *'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: AutoProcessor.from_pretrained(pretrained_model_name_or_path, options) ⇒ <code>
    Promise. < Processor > </code>
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AutoProcessor.from_pretrained(pretrained_model_name_or_path, options) ⇒ <code>
    Promise. < Processor > </code>
- en: Instantiate one of the processor classes of the library from a pretrained model.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 从预训练模型实例化库中的处理器类之一。
- en: The processor class to instantiate is selected based on the `feature_extractor_type`
    property of the config object (either passed as an argument or loaded from `pretrained_model_name_or_path`
    if possible)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 要实例化的处理器类是根据配置对象的`feature_extractor_type`属性选择的（如果可能，可以作为参数传递或从`pretrained_model_name_or_path`加载）
- en: '**Kind**: static method of [`AutoProcessor`](#module_processors.AutoProcessor)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**: [`AutoProcessor`](#module_processors.AutoProcessor)的静态方法'
- en: '**Returns**: `Promise.<Processor>` - A new instance of the Processor class.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**: `Promise.<处理器>` - 处理器类的一个新实例。'
- en: '| Param | Type | Description |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| pretrained_model_name_or_path | `string` | The name or path of the pretrained
    model. Can be either:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '| pretrained_model_name_or_path | `string` | 预训练模型的名称或路径。可以是：'
- en: A string, the *model id* of a pretrained processor hosted inside a model repo
    on huggingface.co. Valid model ids can be located at the root-level, like `bert-base-uncased`,
    or namespaced under a user or organization name, like `dbmdz/bert-base-german-cased`.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字符串，预训练处理器的*模型ID*，托管在huggingface.co上的模型存储库中。有效的模型ID可以位于根级别，如`bert-base-uncased`，或者在用户或组织名称下命名空间，如`dbmdz/bert-base-german-cased`。
- en: A path to a *directory* containing processor files, e.g., `./my_model_directory/`.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含处理器文件的*目录*的路径，例如`./my_model_directory/`。
- en: '|'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| options | `*` | Additional options for loading the processor. |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| options | `*` | 加载处理器的附加选项。|'
- en: '* * *'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: processors~center_to_corners_format(arr) ⇒ <code> Array. < number > </code>
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理器~center_to_corners_format(arr) ⇒ `<code> Array. < number > </code>`
- en: Converts bounding boxes from center format to corners format.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 将边界框从中心格式转换为角格式。
- en: '**Kind**: inner method of [`processors`](#module_processors)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`processors`](#module_processors)的内部方法'
- en: '**Returns**: `Array.<number>` - The coodinates for the top-left and bottom-right
    corners of the box (top_left_x, top_left_y, bottom_right_x, bottom_right_y)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`Array.<number>` - 盒子的左上角和右下角的坐标（top_left_x，top_left_y，bottom_right_x，bottom_right_y）'
- en: '| Param | Type | Description |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| arr | `Array.<number>` | The coordinate for the center of the box and its
    width, height dimensions (center_x, center_y, width, height) |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| arr | `Array.<number>` | 盒子中心及其宽度、高度尺寸的坐标（center_x，center_y，width，height）|'
- en: '* * *'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: processors~enforce_size_divisibility(size, divisor) ⇒ <code> * </code>
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理器~enforce_size_divisibility(size, divisor) ⇒ `<code> * </code>`
- en: Rounds the height and width down to the closest multiple of size_divisibility
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 将高度和宽度四舍五入到最接近的size_divisibility的倍数
- en: '**Kind**: inner method of [`processors`](#module_processors)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`processors`](#module_processors)的内部方法'
- en: '**Returns**: `*` - The rounded size.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`*` - 四舍五入的大小。'
- en: '| Param | Type | Description |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| size | `*` | The size of the image |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| size | `*` | 图像的大小 |'
- en: '| divisor | `number` | The divisor to use. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| divisor | `number` | 要使用的除数。|'
- en: '* * *'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'processors~HeightWidth : <code> * </code>'
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理器~HeightWidth：`<code> * </code>`
- en: Named tuple to indicate the order we are using is (height x width), even though
    the Graphics’ industry standard is (width x height).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 命名元组指示我们使用的顺序是（高度x宽度），即使图形行业标准是（宽度x高度）。
- en: '**Kind**: inner typedef of [`processors`](#module_processors)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`processors`](#module_processors)的内部typedef'
- en: '* * *'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'processors~ImageFeatureExtractorResult : <code> object </code>'
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理器~ImageFeatureExtractorResult：`<code> object </code>`
- en: '**Kind**: inner typedef of [`processors`](#module_processors)'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`processors`](#module_processors)的内部typedef'
- en: '**Properties**'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Description |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| pixel_values | `Tensor` | The pixel values of the batched preprocessed images.
    |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| pixel_values | `Tensor` | 批处理预处理图像的像素值。|'
- en: '| original_sizes | `Array.<HeightWidth>` | Array of two-dimensional tuples
    like [[480, 640]]. |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| original_sizes | `Array.<HeightWidth>` | 类似[[480, 640]]的二维元组数组。|'
- en: '| reshaped_input_sizes | `Array.<HeightWidth>` | Array of two-dimensional tuples
    like [[1000, 1330]]. |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| reshaped_input_sizes | `Array.<HeightWidth>` | 类似[[1000, 1330]]的二维元组数组。|'
- en: '* * *'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'processors~PreprocessedImage : <code> object </code>'
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理器~PreprocessedImage：`<code> object </code>`
- en: '**Kind**: inner typedef of [`processors`](#module_processors)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`processors`](#module_processors)的内部typedef'
- en: '**Properties**'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Description |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| original_size | `HeightWidth` | The original size of the image. |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| original_size | `HeightWidth` | 图像的原始大小。|'
- en: '| reshaped_input_size | `HeightWidth` | The reshaped input size of the image.
    |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| reshaped_input_size | `HeightWidth` | 图像的重新调整输入大小。|'
- en: '| pixel_values | `Tensor` | The pixel values of the preprocessed image. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| pixel_values | `Tensor` | 预处理图像的像素值。|'
- en: '* * *'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'processors~DetrFeatureExtractorResult : <code> object </code>'
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理器~DetrFeatureExtractorResult：`<code> object </code>`
- en: '**Kind**: inner typedef of [`processors`](#module_processors)'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`processors`](#module_processors)的内部typedef'
- en: '**Properties**'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 |'
- en: '| --- | --- |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| pixel_mask | `Tensor` |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| pixel_mask | `Tensor` |'
- en: '* * *'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'processors~SamImageProcessorResult : <code> object </code>'
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理器~SamImageProcessorResult：`<code> object </code>`
- en: '**Kind**: inner typedef of [`processors`](#module_processors)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`processors`](#module_processors)的内部typedef'
- en: '**Properties**'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 |'
- en: '| --- | --- |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| pixel_values | `Tensor` |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| pixel_values | `Tensor` |'
- en: '| original_sizes | `Array.<HeightWidth>` |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| original_sizes | `Array.<HeightWidth>` |'
- en: '| reshaped_input_sizes | `Array.<HeightWidth>` |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| reshaped_input_sizes | `Array.<HeightWidth>` |'
- en: '| [input_points] | `Tensor` |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| [input_points] | `Tensor` |'
- en: '| [input_labels] | `Tensor` |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| [input_labels] | `Tensor` |'
- en: '* * *'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
