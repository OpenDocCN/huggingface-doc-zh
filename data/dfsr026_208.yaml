- en: UniPCMultistepScheduler
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UniPCMultistepScheduler
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/schedulers/unipc](https://huggingface.co/docs/diffusers/api/schedulers/unipc)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/diffusers/api/schedulers/unipc](https://huggingface.co/docs/diffusers/api/schedulers/unipc)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '`UniPCMultistepScheduler` is a training-free framework designed for fast sampling
    of diffusion models. It was introduced in [UniPC: A Unified Predictor-Corrector
    Framework for Fast Sampling of Diffusion Models](https://huggingface.co/papers/2302.04867)
    by Wenliang Zhao, Lujia Bai, Yongming Rao, Jie Zhou, Jiwen Lu.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`UniPCMultistepScheduler`是一个无需训练的框架，旨在快速采样扩散模型。它在文献[UniPC: A Unified Predictor-Corrector
    Framework for Fast Sampling of Diffusion Models](https://huggingface.co/papers/2302.04867)中由Wenliang
    Zhao、Lujia Bai、Yongming Rao、Jie Zhou、Jiwen Lu引入。'
- en: It consists of a corrector (UniC) and a predictor (UniP) that share a unified
    analytical form and support arbitrary orders. UniPC is by design model-agnostic,
    supporting pixel-space/latent-space DPMs on unconditional/conditional sampling.
    It can also be applied to both noise prediction and data prediction models. The
    corrector UniC can be also applied after any off-the-shelf solvers to increase
    the order of accuracy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 它由一个校正器（UniC）和一个预测器（UniP）组成，二者共享统一的分析形式，并支持任意阶数。UniPC是设计为模型无关的，支持像素空间/潜在空间DPMs的无条件/有条件采样。它还可以应用于噪声预测和数据预测模型。校正器UniC也可以应用于任何现成的求解器之后，以提高准确度的阶数。
- en: 'The abstract from the paper is:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 该论文的摘要是：
- en: '*Diffusion probabilistic models (DPMs) have demonstrated a very promising ability
    in high-resolution image synthesis. However, sampling from a pre-trained DPM is
    time-consuming due to the multiple evaluations of the denoising network, making
    it more and more important to accelerate the sampling of DPMs. Despite recent
    progress in designing fast samplers, existing methods still cannot generate satisfying
    images in many applications where fewer steps (e.g., <10) are favored. In this
    paper, we develop a unified corrector (UniC) that can be applied after any existing
    DPM sampler to increase the order of accuracy without extra model evaluations,
    and derive a unified predictor (UniP) that supports arbitrary order as a byproduct.
    Combining UniP and UniC, we propose a unified predictor-corrector framework called
    UniPC for the fast sampling of DPMs, which has a unified analytical form for any
    order and can significantly improve the sampling quality over previous methods,
    especially in extremely few steps. We evaluate our methods through extensive experiments
    including both unconditional and conditional sampling using pixel-space and latent-space
    DPMs. Our UniPC can achieve 3.87 FID on CIFAR10 (unconditional) and 7.51 FID on
    ImageNet 256×256 (conditional) with only 10 function evaluations. Code is available
    at [this https URL](https://github.com/wl-zhao/UniPC).*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*扩散概率模型（DPMs）在高分辨率图像合成中表现出非常有前途的能力。然而，从预训练的DPM中采样耗时，因为需要多次评估去噪网络，因此加速DPM采样变得越来越重要。尽管在设计快速采样器方面取得了最近的进展，但现有方法仍无法在许多应用中生成令人满意的图像，这些应用更倾向于较少的步骤（例如<10）。在本文中，我们开发了一个统一的校正器（UniC），可以在任何现有的DPM采样器之后应用，以提高准确度而无需额外的模型评估，并推导出一个支持任意阶数的统一预测器（UniP）作为副产品。结合UniP和UniC，我们提出了一个名为UniPC的统一预测器-校正器框架，用于快速采样DPMs，它具有任何阶数的统一分析形式，并且可以显著提高采样质量，特别是在极少的步骤中。我们通过广泛的实验评估我们的方法，包括使用像素空间和潜在空间DPMs进行无条件和有条件采样。我们的UniPC可以在CIFAR10（无条件）上实现3.87
    FID，在ImageNet 256×256（有条件）上实现7.51 FID，仅需10次函数评估。代码可在[此https URL](https://github.com/wl-zhao/UniPC)上找到。*'
- en: Tips
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示
- en: It is recommended to set `solver_order` to 2 for guide sampling, and `solver_order=3`
    for unconditional sampling.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 建议将`solver_order`设置为2以进行引导采样，将`solver_order=3`用于无条件采样。
- en: Dynamic thresholding from [Imagen](https://huggingface.co/papers/2205.11487)
    is supported, and for pixel-space diffusion models, you can set both `predict_x0=True`
    and `thresholding=True` to use dynamic thresholding. This thresholding method
    is unsuitable for latent-space diffusion models such as Stable Diffusion.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 支持来自[Imagen](https://huggingface.co/papers/2205.11487)的动态阈值，对于像素空间扩散模型，您可以设置`predict_x0=True`和`thresholding=True`来使用动态阈值。这种阈值方法不适用于稳定扩散等潜在空间扩散模型。
- en: UniPCMultistepScheduler
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UniPCMultistepScheduler
- en: '### `class diffusers.UniPCMultistepScheduler`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.UniPCMultistepScheduler`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L74)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L74)'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`num_train_timesteps` (`int`, defaults to 1000) — The number of diffusion steps
    to train the model.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_train_timesteps`（`int`，默认为1000）— 训练模型的扩散步数。'
- en: '`beta_start` (`float`, defaults to 0.0001) — The starting `beta` value of inference.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beta_start`（`float`，默认为0.0001）— 推断的起始`beta`值。'
- en: '`beta_end` (`float`, defaults to 0.02) — The final `beta` value.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beta_end`（`float`，默认为0.02）— 最终的`beta`值。'
- en: '`beta_schedule` (`str`, defaults to `"linear"`) — The beta schedule, a mapping
    from a beta range to a sequence of betas for stepping the model. Choose from `linear`,
    `scaled_linear`, or `squaredcos_cap_v2`.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`beta_schedule`（`str`，默认为`"linear"`）— beta调度，从beta范围到用于步进模型的一系列beta的映射。可选择`linear`、`scaled_linear`或`squaredcos_cap_v2`。'
- en: '`trained_betas` (`np.ndarray`, *optional*) — Pass an array of betas directly
    to the constructor to bypass `beta_start` and `beta_end`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trained_betas`（`np.ndarray`，*可选*）— 直接传递一个beta数组给构造函数，以绕过`beta_start`和`beta_end`。'
- en: '`solver_order` (`int`, default `2`) — The UniPC order which can be any positive
    integer. The effective order of accuracy is `solver_order + 1` due to the UniC.
    It is recommended to use `solver_order=2` for guided sampling, and `solver_order=3`
    for unconditional sampling.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solver_order`（`int`，默认为`2`）— UniPC阶数，可以是任何正整数。由于UniC，准确度的有效阶数为`solver_order
    + 1`。建议对于引导采样使用`solver_order=2`，对于无条件采样使用`solver_order=3`。'
- en: '`prediction_type` (`str`, defaults to `epsilon`, *optional*) — Prediction type
    of the scheduler function; can be `epsilon` (predicts the noise of the diffusion
    process), `sample` (directly predicts the noisy sample`) or` v_prediction` (see
    section 2.4 of [Imagen Video](https://imagen.research.google/video/paper.pdf)
    paper).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prediction_type` (`str`, 默认为 `epsilon`, *可选*) — 调度器函数的预测类型；可以是 `epsilon`（预测扩散过程的噪声）、`sample`（直接预测嘈杂的样本）或
    `v_prediction`（参见 [Imagen Video](https://imagen.research.google/video/paper.pdf)
    论文的第 2.4 节）。'
- en: '`thresholding` (`bool`, defaults to `False`) — Whether to use the “dynamic
    thresholding” method. This is unsuitable for latent-space diffusion models such
    as Stable Diffusion.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thresholding` (`bool`, 默认为 `False`) — 是否使用“动态阈值”方法。这不适用于稳定扩散等潜在空间扩散模型。'
- en: '`dynamic_thresholding_ratio` (`float`, defaults to 0.995) — The ratio for the
    dynamic thresholding method. Valid only when `thresholding=True`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dynamic_thresholding_ratio` (`float`, 默认为 0.995) — 动态阈值方法的比率。仅在 `thresholding=True`
    时有效。'
- en: '`sample_max_value` (`float`, defaults to 1.0) — The threshold value for dynamic
    thresholding. Valid only when `thresholding=True` and `predict_x0=True`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample_max_value` (`float`, 默认为 1.0) — 动态阈值的阈值值。仅在 `thresholding=True` 和 `predict_x0=True`
    时有效。'
- en: '`predict_x0` (`bool`, defaults to `True`) — Whether to use the updating algorithm
    on the predicted x0.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`predict_x0` (`bool`, 默认为 `True`) — 是否在预测的 x0 上使用更新算法。'
- en: '`solver_type` (`str`, default `bh2`) — Solver type for UniPC. It is recommended
    to use `bh1` for unconditional sampling when steps < 10, and `bh2` otherwise.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solver_type` (`str`, 默认为 `bh2`) — UniPC 的求解器类型。建议在步骤 < 10 时使用 `bh1` 进行无条件采样，否则使用
    `bh2`。'
- en: '`lower_order_final` (`bool`, default `True`) — Whether to use lower-order solvers
    in the final steps. Only valid for < 15 inference steps. This can stabilize the
    sampling of DPMSolver for steps < 15, especially for steps <= 10.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lower_order_final` (`bool`, 默认为 `True`) — 是否在最后几步使用低阶求解器。仅适用于 < 15 推断步骤。这可以稳定
    DPMSolver 对于步骤 < 15 的采样，特别是对于步骤 <= 10。'
- en: '`disable_corrector` (`list`, default `[]`) — Decides which step to disable
    the corrector to mitigate the misalignment between `epsilon_theta(x_t, c)` and
    `epsilon_theta(x_t^c, c)` which can influence convergence for a large guidance
    scale. Corrector is usually disabled during the first few steps.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disable_corrector` (`list`, 默认为 `[]`) — 决定在哪一步禁用校正器以减轻 `epsilon_theta(x_t,
    c)` 和 `epsilon_theta(x_t^c, c)` 之间的不对齐，这可能会影响大指导尺度的收敛性。通常在前几步中禁用校正器。'
- en: '`solver_p` (`SchedulerMixin`, default `None`) — Any other scheduler that if
    specified, the algorithm becomes `solver_p + UniC`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`solver_p` (`SchedulerMixin`, 默认为 `None`) — 任何其他指定的调度器，如果指定，则算法变为 `solver_p
    + UniC`。'
- en: '`use_karras_sigmas` (`bool`, *optional*, defaults to `False`) — Whether to
    use Karras sigmas for step sizes in the noise schedule during the sampling process.
    If `True`, the sigmas are determined according to a sequence of noise levels {σi}.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_karras_sigmas` (`bool`, *可选*, 默认为 `False`) — 是否在采样过程中使用 Karras sigmas
    作为噪声计划中步长的序列。如果为 `True`，则根据噪声级别 {σi} 确定 sigmas。'
- en: '`timestep_spacing` (`str`, defaults to `"linspace"`) — The way the timesteps
    should be scaled. Refer to Table 2 of the [Common Diffusion Noise Schedules and
    Sample Steps are Flawed](https://huggingface.co/papers/2305.08891) for more information.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep_spacing` (`str`, 默认为 `"linspace"`) — 时间步长应该如何缩放的方式。有关更多信息，请参考 [Common
    Diffusion Noise Schedules and Sample Steps are Flawed](https://huggingface.co/papers/2305.08891)
    的表 2。'
- en: '`steps_offset` (`int`, defaults to 0) — An offset added to the inference steps.
    You can use a combination of `offset=1` and `set_alpha_to_one=False` to make the
    last step use step 0 for the previous alpha product like in Stable Diffusion.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`steps_offset` (`int`, 默认为 0) — 添加到推断步骤的偏移量。您可以使用 `offset=1` 和 `set_alpha_to_one=False`
    的组合，使最后一步使用步骤 0 用于先前 alpha 乘积，就像 Stable Diffusion 中一样。'
- en: '`UniPCMultistepScheduler` is a training-free framework designed for the fast
    sampling of diffusion models.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`UniPCMultistepScheduler` 是一个无需训练的框架，旨在快速采样扩散模型。'
- en: This model inherits from [SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)
    and [ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin).
    Check the superclass documentation for the generic methods the library implements
    for all schedulers such as loading and saving.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型继承自 [SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)
    和 [ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin)。查看超类文档以了解库为所有调度器实现的通用方法，如加载和保存。
- en: '#### `convert_model_output`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `convert_model_output`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L365)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L365)'
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parameters
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_output` (`torch.FloatTensor`) — The direct output from the learned diffusion
    model.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_output` (`torch.FloatTensor`) — 从学习扩散模型直接输出的结果。'
- en: '`timestep` (`int`) — The current discrete timestep in the diffusion chain.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep` (`int`) — 扩散链中的当前离散时间步长。'
- en: '`sample` (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 扩散过程创建的样本的当前实例。'
- en: Returns
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`torch.FloatTensor`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.FloatTensor`'
- en: The converted model output.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 转换后的模型输出。
- en: Convert the model output to the corresponding type the UniPC algorithm needs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将模型输出转换为 UniPC 算法需要的相应类型。
- en: '#### `multistep_uni_c_bh_update`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `multistep_uni_c_bh_update`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L564)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L564)'
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`this_model_output` (`torch.FloatTensor`) — The model outputs at `x_t`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this_model_output` (`torch.FloatTensor`) — 模型在 `x_t` 处的输出。'
- en: '`this_timestep` (`int`) — The current timestep `t`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this_timestep` (`int`) — 当前时间步 `t`。'
- en: '`last_sample` (`torch.FloatTensor`) — The generated sample before the last
    predictor `x_{t-1}`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_sample` (`torch.FloatTensor`) — 最后一个预测器 `x_{t-1}` 之前生成的样本。'
- en: '`this_sample` (`torch.FloatTensor`) — The generated sample after the last predictor
    `x_{t}`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this_sample` (`torch.FloatTensor`) — 最后一个预测器 `x_{t}` 之后生成的样本。'
- en: '`order` (`int`) — The `p` of UniC-p at this step. The effective order of accuracy
    should be `order + 1`.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order` (`int`) — 此步骤中UniC-p的`p`。准确度的有效顺序应为`order + 1`。'
- en: Returns
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L801)'
- en: '`torch.FloatTensor`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.FloatTensor`'
- en: The corrected sample tensor at the current timestep.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当前时间步的校正样本张量。
- en: One step for the UniC (B(h) version).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: UniC（B(h)版本）的一步。
- en: '#### `multistep_uni_p_bh_update`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `multistep_uni_p_bh_update`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L435)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`model_output` (`torch.FloatTensor`) — 当前时间步从学习扩散模型直接输出。'
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_output` (`torch.FloatTensor`) — The direct output from the learned diffusion
    model at the current timestep.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L435)'
- en: '`prev_timestep` (`int`) — The previous discrete timestep in the diffusion chain.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prev_timestep` (`int`) — 扩散链中的上一个离散时间步。'
- en: '`sample` (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 由扩散过程创建的当前样本实例。'
- en: '`order` (`int`) — The order of UniP at this timestep (corresponds to the *p*
    in UniPC-p).'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order` (`int`) — UniP在此时间步的顺序（对应于UniPC-p中的*p*）。'
- en: Returns
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`torch.FloatTensor`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.FloatTensor`'
- en: The sample tensor at the previous timestep.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个时间步的样本张量。
- en: One step for the UniP (B(h) version). Alternatively, `self.solver_p` is used
    if is specified.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: UniP（B(h)版本）的一步。或者，如果指定了，则使用`self.solver_p`。
- en: '#### `scale_model_input`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `scale_model_input`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L801)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample` (`torch.FloatTensor`) — The input sample.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 输入样本。'
- en: Returns
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`torch.FloatTensor`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.FloatTensor`'
- en: A scaled input sample.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放的输入样本。
- en: Ensures interchangeability with schedulers that need to scale the denoising
    model input depending on the current timestep.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 确保与需要根据当前时间步缩放去噪模型输入的调度程序可互换。
- en: '#### `set_timesteps`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `set_timesteps`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L210)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`num_inference_steps` (`int`) — The number of diffusion steps used when generating
    samples with a pre-trained model.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_inference_steps` (`int`) — 使用预训练模型生成样本时使用的扩散步数。'
- en: '`device` (`str` or `torch.device`, *optional*) — The device to which the timesteps
    should be moved to. If `None`, the timesteps are not moved.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`device` (`str` 或 `torch.device`，*可选*) — 时间步应移动到的设备。如果为`None`，则不移动时间步。'
- en: Sets the discrete timesteps used for the diffusion chain (to be run before inference).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用于扩散链的离散时间步（在推断之前运行）。
- en: '#### `step`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `step`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L720)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_unipc_multistep.py#L720)'
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_output` (`torch.FloatTensor`) — The direct output from learned diffusion
    model.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_output` (`torch.FloatTensor`) — 从学习扩散模型直接输出。'
- en: '`timestep` (`int`) — The current discrete timestep in the diffusion chain.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep` (`int`) — 扩散链中的当前离散时间步。'
- en: '`sample` (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 由扩散过程创建的当前样本实例。'
- en: '`return_dict` (`bool`) — Whether or not to return a [SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    or `tuple`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`) — 是否返回[SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)或`tuple`。'
- en: Returns
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    or `tuple`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    或 `tuple`'
- en: If return_dict is `True`, [SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    is returned, otherwise a tuple is returned where the first element is the sample
    tensor.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`return_dict`为`True`，则返回[SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)，否则返回一个元组，其中第一个元素是样本张量。
- en: Predict the sample from the previous timestep by reversing the SDE. This function
    propagates the sample with the multistep UniPC.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 通过反转SDE从上一个时间步预测样本。此函数使用多步UniPC传播样本。
- en: SchedulerOutput
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SchedulerOutput
- en: '### `class diffusers.schedulers.scheduling_utils.SchedulerOutput`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.schedulers.scheduling_utils.SchedulerOutput`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_utils.py#L50)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_utils.py#L50)'
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`prev_sample` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)` for images) — Computed sample `(x_{t-1})` of previous timestep. `prev_sample`
    should be used as next model input in the denoising loop.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prev_sample`（对于图像，形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`）
    — 上一个时间步的计算样本`(x_{t-1})`。`prev_sample`应在去噪循环中作为下一个模型输入使用。'
- en: Base class for the output of a scheduler’s `step` function.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 调度程序`step`函数的输出的基类。
