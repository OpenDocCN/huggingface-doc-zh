- en: UNet1DModel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UNet1DModel
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/models/unet](https://huggingface.co/docs/diffusers/api/models/unet)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '原文链接: [https://huggingface.co/docs/diffusers/api/models/unet](https://huggingface.co/docs/diffusers/api/models/unet)'
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet](https://huggingface.co/papers/1505.04597) model was originally introduced
    by Ronneberger et al. for biomedical image segmentation, but it is also commonly
    used in 🤗 Diffusers because it outputs images that are the same size as the input.
    It is one of the most important components of a diffusion system because it facilitates
    the actual diffusion process. There are several variants of the UNet model in
    🤗 Diffusers, depending on it’s number of dimensions and whether it is a conditional
    model or not. This is a 1D UNet model.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[UNet](https://huggingface.co/papers/1505.04597) 模型最初由Ronneberger等人提出，用于生物医学图像分割，但它也常用于
    🤗 Diffusers，因为它输出与输入相同大小的图像。它是扩散系统中最重要的组件之一，因为它促进了实际的扩散过程。在 🤗 Diffusers 中有几个UNet模型的变体，取决于其维度数量以及是否是条件模型。这是一个1D
    UNet模型。'
- en: 'The abstract from the paper is:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 论文摘要如下：
- en: '*There is large consent that successful training of deep networks requires
    many thousand annotated training samples. In this paper, we present a network
    and training strategy that relies on the strong use of data augmentation to use
    the available annotated samples more efficiently. The architecture consists of
    a contracting path to capture context and a symmetric expanding path that enables
    precise localization. We show that such a network can be trained end-to-end from
    very few images and outperforms the prior best method (a sliding-window convolutional
    network) on the ISBI challenge for segmentation of neuronal structures in electron
    microscopic stacks. Using the same network trained on transmitted light microscopy
    images (phase contrast and DIC) we won the ISBI cell tracking challenge 2015 in
    these categories by a large margin. Moreover, the network is fast. Segmentation
    of a 512x512 image takes less than a second on a recent GPU. The full implementation
    (based on Caffe) and the trained networks are available at [http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net](http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net).*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*有很多人认为成功训练深度网络需要成千上万个注释的训练样本。在本文中，我们提出了一种依赖于强大数据增强的网络和训练策略，以更有效地利用可用的注释样本。该架构由一个收缩路径和一个对称扩展路径组成，用于捕获上下文和实现精确的定位。我们展示了这样一个网络可以从很少的图像端到端地训练，并且在ISBI挑战中（用于电子显微镜堆中神经结构分割）胜过先前最佳方法（滑动窗口卷积网络）。使用相同的网络在透射光学显微镜图像（相差和DIC）上训练，我们在这些类别上以很大的优势赢得了2015年ISBI细胞跟踪挑战。此外，该网络速度很快。在最新的GPU上，对512x512图像的分割不到一秒。完整的实现（基于Caffe）和训练的网络可在
    [http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net](http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net)
    上获得。*'
- en: UNet1DModel
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UNet1DModel
- en: '### `class diffusers.UNet1DModel`'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.UNet1DModel`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_1d.py#L41)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_1d.py#L41)'
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample_size` (`int`, *optional*) — Default length of sample. Should be adaptable
    at runtime.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample_size` (`int`, *optional*) — 样本的默认长度。应在运行时适应。'
- en: '`in_channels` (`int`, *optional*, defaults to 2) — Number of channels in the
    input sample.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_channels` (`int`, *optional*, 默认为 2) — 输入样本中的通道数。'
- en: '`out_channels` (`int`, *optional*, defaults to 2) — Number of channels in the
    output.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`out_channels` (`int`, *optional*, 默认为 2) — 输出中的通道数。'
- en: '`extra_in_channels` (`int`, *optional*, defaults to 0) — Number of additional
    channels to be added to the input of the first down block. Useful for cases where
    the input data has more channels than what the model was initially designed for.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra_in_channels` (`int`, *optional*, 默认为 0) — 要添加到第一个下块输入的额外通道数。在输入数据的通道数多于模型最初设计的情况下很有用。'
- en: '`time_embedding_type` (`str`, *optional*, defaults to `"fourier"`) — Type of
    time embedding to use.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time_embedding_type` (`str`, *optional*, 默认为 `"fourier"`) — 要使用的时间嵌入类型。'
- en: '`freq_shift` (`float`, *optional*, defaults to 0.0) — Frequency shift for Fourier
    time embedding.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`freq_shift` (`float`, *optional*, 默认为 0.0) — 用于傅立叶时间嵌入的频率偏移。'
- en: '`flip_sin_to_cos` (`bool`, *optional*, defaults to `False`) — Whether to flip
    sin to cos for Fourier time embedding.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flip_sin_to_cos` (`bool`, *optional*, 默认为 `False`) — 是否将正弦翻转为余弦以用于傅立叶时间嵌入。'
- en: '`down_block_types` (`Tuple[str]`, *optional*, defaults to `("DownBlock1DNoSkip",
    "DownBlock1D", "AttnDownBlock1D")`) — Tuple of downsample block types.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`down_block_types` (`Tuple[str]`, *optional*, 默认为 `("DownBlock1DNoSkip", "DownBlock1D",
    "AttnDownBlock1D")`) — 下采样块类型的元组。'
- en: '`up_block_types` (`Tuple[str]`, *optional*, defaults to `("AttnUpBlock1D",
    "UpBlock1D", "UpBlock1DNoSkip")`) — Tuple of upsample block types.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`up_block_types` (`Tuple[str]`, *optional*, 默认为 `("AttnUpBlock1D", "UpBlock1D",
    "UpBlock1DNoSkip")`) — 上采样块类型的元组。'
- en: '`block_out_channels` (`Tuple[int]`, *optional*, defaults to `(32, 32, 64)`)
    — Tuple of block output channels.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`block_out_channels` (`Tuple[int]`, *optional*, 默认为 `(32, 32, 64)`) — 块输出通道的元组。'
- en: '`mid_block_type` (`str`, *optional*, defaults to `"UNetMidBlock1D"`) — Block
    type for middle of UNet.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mid_block_type` (`str`, *optional*, 默认为 `"UNetMidBlock1D"`) — UNet中间块的类型。'
- en: '`out_block_type` (`str`, *optional*, defaults to `None`) — Optional output
    processing block of UNet.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`out_block_type` (`str`, *optional*, 默认为 `None`) — UNet的可选输出处理块。'
- en: '`act_fn` (`str`, *optional*, defaults to `None`) — Optional activation function
    in UNet blocks.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`act_fn` (`str`, *optional*, 默认为 `None`) — UNet块中的可选激活函数。'
- en: '`norm_num_groups` (`int`, *optional*, defaults to 8) — The number of groups
    for normalization.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`norm_num_groups` (`int`, *optional*, 默认为 8) — 用于归一化的组数。'
- en: '`layers_per_block` (`int`, *optional*, defaults to 1) — The number of layers
    per block.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layers_per_block` (`int`, *optional*, 默认为 1) — 每个块的层数。'
- en: '`downsample_each_block` (`int`, *optional*, defaults to `False`) — Experimental
    feature for using a UNet without upsampling.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`downsample_each_block` (`int`, *optional*, 默认为 `False`) — 用于使用无上采样的UNet的实验性功能。'
- en: A 1D UNet model that takes a noisy sample and a timestep and returns a sample
    shaped output.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个1D UNet模型，接受一个嘈杂的样本和一个时间步长，并返回一个形状相同的输出样本。
- en: This model inherits from [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin).
    Check the superclass documentation for it’s generic methods implemented for all
    models (such as downloading or saving).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型继承自 [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin)。查看超类文档以了解为所有模型实现的通用方法（如下载或保存）。
- en: '#### `forward`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_1d.py#L195)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_1d.py#L195)'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parameters
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample` (`torch.FloatTensor`) — The noisy input tensor with the following
    shape `(batch_size, num_channels, sample_size)`.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 具有以下形状的嘈杂输入张量 `(batch_size, num_channels,
    sample_size)`。'
- en: '`timestep` (`torch.FloatTensor` or `float` or `int`) — The number of timesteps
    to denoise an input.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep` (`torch.FloatTensor` 或 `float` 或 `int`) — 对输入进行去噪的时间步数。'
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a `~models.unet_1d.UNet1DOutput` instead of a plain tuple.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`，*可选*，默认为 `True`) — 是否返回一个 `~models.unet_1d.UNet1DOutput`
    而不是一个普通的元组。'
- en: Returns
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`~models.unet_1d.UNet1DOutput` or `tuple`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`~models.unet_1d.UNet1DOutput` 或 `tuple`'
- en: If `return_dict` is True, an `~models.unet_1d.UNet1DOutput` is returned, otherwise
    a `tuple` is returned where the first element is the sample tensor.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `return_dict` 为 True，则返回一个 `~models.unet_1d.UNet1DOutput`，否则返回一个元组，其中第一个元素是样本张量。
- en: The [UNet1DModel](/docs/diffusers/v0.26.3/en/api/models/unet#diffusers.UNet1DModel)
    forward method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[UNet1DModel](/docs/diffusers/v0.26.3/en/api/models/unet#diffusers.UNet1DModel)的前向方法。'
- en: UNet1DOutput
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UNet1DOutput
- en: '### `class diffusers.models.unets.unet_1d.UNet1DOutput`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class diffusers.models.unets.unet_1d.UNet1DOutput`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_1d.py#L28)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_1d.py#L28)'
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample` (`torch.FloatTensor` of shape `(batch_size, num_channels, sample_size)`)
    — The hidden states output from the last layer of the model.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`，形状为 `(batch_size, num_channels, sample_size)`)
    — 模型最后一层的隐藏状态输出。'
- en: The output of [UNet1DModel](/docs/diffusers/v0.26.3/en/api/models/unet#diffusers.UNet1DModel).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[UNet1DModel](/docs/diffusers/v0.26.3/en/api/models/unet#diffusers.UNet1DModel)的输出。'
