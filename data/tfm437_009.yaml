- en: Fine-tune a pretrained model
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对预训练模型进行微调
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/training](https://huggingface.co/docs/transformers/v4.37.2/en/training)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/training](https://huggingface.co/docs/transformers/v4.37.2/en/training)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'There are significant benefits to using a pretrained model. It reduces computation
    costs, your carbon footprint, and allows you to use state-of-the-art models without
    having to train one from scratch. 🤗 Transformers provides access to thousands
    of pretrained models for a wide range of tasks. When you use a pretrained model,
    you train it on a dataset specific to your task. This is known as fine-tuning,
    an incredibly powerful training technique. In this tutorial, you will fine-tune
    a pretrained model with a deep learning framework of your choice:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用预训练模型有很多好处。它可以减少计算成本、减少碳足迹，并且可以让您使用最先进的模型，而无需从头开始训练。🤗 Transformers 提供了数千个预训练模型，适用于各种任务。当您使用预训练模型时，您需要在特定于您任务的数据集上对其进行训练。这被称为微调，是一种非常强大的训练技术。在本教程中，您将使用您选择的深度学习框架对预训练模型进行微调：
- en: Fine-tune a pretrained model with 🤗 Transformers [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer).
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 🤗 Transformers [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    对预训练模型进行微调。
- en: Fine-tune a pretrained model in TensorFlow with Keras.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Keras 在 TensorFlow 中对预训练模型进行微调。
- en: Fine-tune a pretrained model in native PyTorch.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在原生 PyTorch 中对预训练模型进行微调。
- en: Prepare a dataset
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备数据集
- en: '[https://www.youtube-nocookie.com/embed/_BZearw7f0w](https://www.youtube-nocookie.com/embed/_BZearw7f0w)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube-nocookie.com/embed/_BZearw7f0w](https://www.youtube-nocookie.com/embed/_BZearw7f0w)'
- en: Before you can fine-tune a pretrained model, download a dataset and prepare
    it for training. The previous tutorial showed you how to process data for training,
    and now you get an opportunity to put those skills to the test!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在对预训练模型进行微调之前，下载一个数据集并为训练做好准备。之前的教程向您展示了如何处理训练数据，现在您有机会将这些技能付诸实践！
- en: 'Begin by loading the [Yelp Reviews](https://huggingface.co/datasets/yelp_review_full)
    dataset:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先加载 [Yelp 评论](https://huggingface.co/datasets/yelp_review_full) 数据集：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you now know, you need a tokenizer to process the text and include a padding
    and truncation strategy to handle any variable sequence lengths. To process your
    dataset in one step, use 🤗 Datasets [`map`](https://huggingface.co/docs/datasets/process#map)
    method to apply a preprocessing function over the entire dataset:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道，您需要一个分词器来处理文本，并包含填充和截断策略以处理任何可变序列长度。为了一次处理您的数据集，使用 🤗 Datasets [`map`](https://huggingface.co/docs/datasets/process#map)
    方法在整个数据集上应用预处理函数：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you like, you can create a smaller subset of the full dataset to fine-tune
    on to reduce the time it takes:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，可以创建一个较小的数据集子集进行微调，以减少所需的时间：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Train
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练
- en: At this point, you should follow the section corresponding to the framework
    you want to use. You can use the links in the right sidebar to jump to the one
    you want - and if you want to hide all of the content for a given framework, just
    use the button at the top-right of that framework’s block!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您应该按照您想要使用的框架对应的部分进行操作。您可以使用右侧边栏中的链接跳转到您想要的部分 - 如果您想隐藏给定框架的所有内容，只需使用该框架块右上角的按钮！
- en: PytorchHide Pytorch content
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: PytorchHide Pytorch 内容
- en: '[https://www.youtube-nocookie.com/embed/nvBXf7s7vTI](https://www.youtube-nocookie.com/embed/nvBXf7s7vTI)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube-nocookie.com/embed/nvBXf7s7vTI](https://www.youtube-nocookie.com/embed/nvBXf7s7vTI)'
- en: Train with PyTorch Trainer
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 PyTorch Trainer 进行训练
- en: 🤗 Transformers provides a [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    class optimized for training 🤗 Transformers models, making it easier to start
    training without manually writing your own training loop. The [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    API supports a wide range of training options and features such as logging, gradient
    accumulation, and mixed precision.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 🤗 Transformers 提供了一个专为训练 🤗 Transformers 模型优化的 [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    类，使得开始训练变得更加容易，而无需手动编写自己的训练循环。[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    API 支持各种训练选项和功能，如日志记录、梯度累积和混合精度。
- en: 'Start by loading your model and specify the number of expected labels. From
    the Yelp Review [dataset card](https://huggingface.co/datasets/yelp_review_full#data-fields),
    you know there are five labels:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先加载您的模型并指定预期标签的数量。从 Yelp 评论 [数据集卡片](https://huggingface.co/datasets/yelp_review_full#data-fields)
    中，您知道有五个标签：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You will see a warning about some of the pretrained weights not being used and
    some weights being randomly initialized. Don’t worry, this is completely normal!
    The pretrained head of the BERT model is discarded, and replaced with a randomly
    initialized classification head. You will fine-tune this new model head on your
    sequence classification task, transferring the knowledge of the pretrained model
    to it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到一个警告，指出一些预训练权重未被使用，一些权重被随机初始化。不用担心，这是完全正常的！BERT 模型的预训练头被丢弃，并用随机初始化的分类头替换。您将对这个新模型头进行微调，将预训练模型的知识转移到它上面进行序列分类任务。
- en: Training hyperparameters
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 训练超参数
- en: Next, create a [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)
    class which contains all the hyperparameters you can tune as well as flags for
    activating different training options. For this tutorial you can start with the
    default training [hyperparameters](https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments),
    but feel free to experiment with these to find your optimal settings.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个包含所有可以调整的超参数以及激活不同训练选项的标志的 [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)
    类。对于本教程，您可以从默认的训练 [超参数](https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments)
    开始，但请随时尝试这些参数以找到您的最佳设置。
- en: 'Specify where to save the checkpoints from your training:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 指定保存训练检查点的位置：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Evaluate
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 评估
- en: '[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    does not automatically evaluate model performance during training. You’ll need
    to pass [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    a function to compute and report metrics. The [🤗 Evaluate](https://huggingface.co/docs/evaluate/index)
    library provides a simple [`accuracy`](https://huggingface.co/spaces/evaluate-metric/accuracy)
    function you can load with the `evaluate.load` (see this [quicktour](https://huggingface.co/docs/evaluate/a_quick_tour)
    for more information) function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)在训练期间不会自动评估模型性能。您需要传递[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)一个函数来计算和报告指标。[🤗
    Evaluate](https://huggingface.co/docs/evaluate/index)库提供了一个简单的[`accuracy`](https://huggingface.co/spaces/evaluate-metric/accuracy)函数，您可以使用`evaluate.load`加载（有关更多信息，请参阅此[快速导览](https://huggingface.co/docs/evaluate/a_quick_tour)）：'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Call `compute` on `metric` to calculate the accuracy of your predictions. Before
    passing your predictions to `compute`, you need to convert the logits to predictions
    (remember all 🤗 Transformers models return logits):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在`metric`上调用`compute`以计算您预测的准确性。在将预测传递给`compute`之前，您需要将logits转换为预测（请记住，所有🤗 Transformers模型都返回logits）：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you’d like to monitor your evaluation metrics during fine-tuning, specify
    the `evaluation_strategy` parameter in your training arguments to report the evaluation
    metric at the end of each epoch:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在微调期间监视评估指标，请在训练参数中指定`evaluation_strategy`参数，以在每个时期结束时报告评估指标：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Trainer
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Trainer
- en: 'Create a [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    object with your model, training arguments, training and test datasets, and evaluation
    function:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的模型、训练参数、训练和测试数据集以及评估函数创建一个[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)对象：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then fine-tune your model by calling [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过调用[train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)微调您的模型：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: TensorFlowHide TensorFlow content
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow隐藏TensorFlow内容
- en: '[https://www.youtube-nocookie.com/embed/rnTGBy2ax1c](https://www.youtube-nocookie.com/embed/rnTGBy2ax1c)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube-nocookie.com/embed/rnTGBy2ax1c](https://www.youtube-nocookie.com/embed/rnTGBy2ax1c)'
- en: Train a TensorFlow model with Keras
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Keras训练TensorFlow模型
- en: You can also train 🤗 Transformers models in TensorFlow with the Keras API!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用Keras API在TensorFlow中训练🤗 Transformers模型！
- en: Loading data for Keras
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为Keras加载数据
- en: When you want to train a 🤗 Transformers model with the Keras API, you need to
    convert your dataset to a format that Keras understands. If your dataset is small,
    you can just convert the whole thing to NumPy arrays and pass it to Keras. Let’s
    try that first before we do anything more complicated.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要使用Keras API训练🤗 Transformers模型时，您需要将数据集转换为Keras理解的格式。如果您的数据集很小，您可以将整个数据集转换为NumPy数组并将其传递给Keras。在我们做更复杂的事情之前，让我们先尝试这个。
- en: First, load a dataset. We’ll use the CoLA dataset from the [GLUE benchmark](https://huggingface.co/datasets/glue),
    since it’s a simple binary text classification task, and just take the training
    split for now.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，加载一个数据集。我们将使用来自[GLUE基准](https://huggingface.co/datasets/glue)的CoLA数据集，因为它是一个简单的二进制文本分类任务，现在只取训练拆分。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, load a tokenizer and tokenize the data as NumPy arrays. Note that the
    labels are already a list of 0 and 1s, so we can just convert that directly to
    a NumPy array without tokenization!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，加载一个分词器并将数据标记为NumPy数组。请注意，标签已经是0和1的列表，因此我们可以直接将其转换为NumPy数组而无需进行标记化！
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, load, [`compile`](https://keras.io/api/models/model_training_apis/#compile-method),
    and [`fit`](https://keras.io/api/models/model_training_apis/#fit-method) the model.
    Note that Transformers models all have a default task-relevant loss function,
    so you don’t need to specify one unless you want to:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，加载，[`compile`](https://keras.io/api/models/model_training_apis/#compile-method)，和[`fit`](https://keras.io/api/models/model_training_apis/#fit-method)模型。请注意，Transformers模型都有一个默认的与任务相关的损失函数，因此除非您想要，否则不需要指定一个：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You don’t have to pass a loss argument to your models when you `compile()` them!
    Hugging Face models automatically choose a loss that is appropriate for their
    task and model architecture if this argument is left blank. You can always override
    this by specifying a loss yourself if you want to!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当您`compile()`模型时，您不必向模型传递损失参数！如果将此参数留空，Hugging Face模型会自动选择适合其任务和模型架构的损失。如果您想要，您始终可以通过指定自己的损失来覆盖这一点！
- en: This approach works great for smaller datasets, but for larger datasets, you
    might find it starts to become a problem. Why? Because the tokenized array and
    labels would have to be fully loaded into memory, and because NumPy doesn’t handle
    “jagged” arrays, so every tokenized sample would have to be padded to the length
    of the longest sample in the whole dataset. That’s going to make your array even
    bigger, and all those padding tokens will slow down training too!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法对于较小的数据集效果很好，但对于较大的数据集，您可能会发现它开始成为一个问题。为什么？因为标记化的数组和标签必须完全加载到内存中，而且因为NumPy不处理“不规则”数组，所以每个标记化的样本都必须填充到整个数据集中最长样本的长度。这将使您的数组变得更大，所有这些填充标记也会减慢训练速度！
- en: Loading data as a tf.data.Dataset
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将数据加载为tf.data.Dataset
- en: 'If you want to avoid slowing down training, you can load your data as a `tf.data.Dataset`
    instead. Although you can write your own `tf.data` pipeline if you want, we have
    two convenience methods for doing this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想避免减慢训练速度，可以将数据加载为`tf.data.Dataset`。虽然如果您愿意，您可以编写自己的`tf.data`流水线，但我们有两种方便的方法来做到这一点：
- en: '[prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset):
    This is the method we recommend in most cases. Because it is a method on your
    model, it can inspect the model to automatically figure out which columns are
    usable as model inputs, and discard the others to make a simpler, more performant
    dataset.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset)：这是我们在大多数情况下推荐的方法。因为它是在您的模型上的一个方法，它可以检查模型以自动找出哪些列可用作模型输入，并丢弃其他列以使数据集更简单、更高效。'
- en: '[to_tf_dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.to_tf_dataset):
    This method is more low-level, and is useful when you want to exactly control
    how your dataset is created, by specifying exactly which `columns` and `label_cols`
    to include.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[to_tf_dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.to_tf_dataset)：此方法更低级，当您想要精确控制数据集创建方式时很有用，通过指定要包含的确切`columns`和`label_cols`。'
- en: 'Before you can use [prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset),
    you will need to add the tokenizer outputs to your dataset as columns, as shown
    in the following code sample:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以使用[prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset)之前，您需要将分词器的输出添加到数据集中作为列，如下面的代码示例所示：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Remember that Hugging Face datasets are stored on disk by default, so this will
    not inflate your memory usage! Once the columns have been added, you can stream
    batches from the dataset and add padding to each batch, which greatly reduces
    the number of padding tokens compared to padding the entire dataset.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Hugging Face数据集默认存储在磁盘上，因此这不会增加您的内存使用！一旦添加了列，您可以从数据集中流式传输批次并对每个批次进行填充，这将大大减少与填充整个数据集相比的填充标记数量。
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that in the code sample above, you need to pass the tokenizer to `prepare_tf_dataset`
    so it can correctly pad batches as they’re loaded. If all the samples in your
    dataset are the same length and no padding is necessary, you can skip this argument.
    If you need to do something more complex than just padding samples (e.g. corrupting
    tokens for masked language modelling), you can use the `collate_fn` argument instead
    to pass a function that will be called to transform the list of samples into a
    batch and apply any preprocessing you want. See our [examples](https://github.com/huggingface/transformers/tree/main/examples)
    or [notebooks](https://huggingface.co/docs/transformers/notebooks) to see this
    approach in action.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上面的代码示例中，您需要将分词器传递给`prepare_tf_dataset`，以便它可以正确地填充批次。如果数据集中的所有样本长度相同且不需要填充，则可以跳过此参数。如果您需要执行比填充样本更复杂的操作（例如，为了进行掩码语言建模而破坏标记），则可以使用`collate_fn`参数，而不是传递一个函数，该函数将被调用以将样本列表转换为批次并应用任何您想要的预处理。查看我们的[示例](https://github.com/huggingface/transformers/tree/main/examples)或[notebooks](https://huggingface.co/docs/transformers/notebooks)以查看此方法的实际操作。
- en: 'Once you’ve created a `tf.data.Dataset`, you can compile and fit the model
    as before:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了`tf.data.Dataset`，您可以像以前一样编译和拟合模型：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Train in native PyTorch
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在本机PyTorch中训练
- en: PytorchHide Pytorch content
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: PytorchHide Pytorch content
- en: '[https://www.youtube-nocookie.com/embed/Dh9CL8fyG80](https://www.youtube-nocookie.com/embed/Dh9CL8fyG80)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube-nocookie.com/embed/Dh9CL8fyG80](https://www.youtube-nocookie.com/embed/Dh9CL8fyG80)'
- en: '[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    takes care of the training loop and allows you to fine-tune a model in a single
    line of code. For users who prefer to write their own training loop, you can also
    fine-tune a 🤗 Transformers model in native PyTorch.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)负责训练循环，并允许您在一行代码中微调模型。对于喜欢编写自己训练循环的用户，您也可以在本机PyTorch中微调🤗
    Transformers模型。'
- en: 'At this point, you may need to restart your notebook or execute the following
    code to free some memory:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可能需要重新启动笔记本或执行以下代码以释放一些内存：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Next, manually postprocess `tokenized_dataset` to prepare it for training.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，手动后处理`tokenized_dataset`以准备训练。
- en: 'Remove the `text` column because the model does not accept raw text as an input:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`text`列，因为模型不接受原始文本作为输入：
- en: '[PRE17]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Rename the `label` column to `labels` because the model expects the argument
    to be named `labels`:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`label`列重命名为`labels`，因为模型期望参数命名为`labels`：
- en: '[PRE18]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Set the format of the dataset to return PyTorch tensors instead of lists:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据集的格式设置为返回PyTorch张量而不是列表：
- en: '[PRE19]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then create a smaller subset of the dataset as previously shown to speed up
    the fine-tuning:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建数据集的较小子集，以加快微调速度：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: DataLoader
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DataLoader
- en: 'Create a `DataLoader` for your training and test datasets so you can iterate
    over batches of data:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的训练和测试数据集创建一个`DataLoader`，这样您就可以迭代处理数据批次：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Load your model with the number of expected labels:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 加载您的模型并指定预期标签的数量：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Optimizer and learning rate scheduler
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 优化器和学习率调度程序
- en: 'Create an optimizer and learning rate scheduler to fine-tune the model. Let’s
    use the [`AdamW`](https://pytorch.org/docs/stable/generated/torch.optim.AdamW.html)
    optimizer from PyTorch:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个优化器和学习率调度程序来微调模型。让我们使用PyTorch中的[`AdamW`](https://pytorch.org/docs/stable/generated/torch.optim.AdamW.html)优化器：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create the default learning rate scheduler from [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)创建默认学习率调度程序：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Lastly, specify `device` to use a GPU if you have access to one. Otherwise,
    training on a CPU may take several hours instead of a couple of minutes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您可以使用GPU，请指定`device`来使用GPU。否则，使用CPU进行训练可能需要几个小时，而不是几分钟。
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Get free access to a cloud GPU if you don’t have one with a hosted notebook
    like [Colaboratory](https://colab.research.google.com/) or [SageMaker StudioLab](https://studiolab.sagemaker.aws/).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有云GPU，可以通过像[Colaboratory](https://colab.research.google.com/)或[SageMaker
    StudioLab](https://studiolab.sagemaker.aws/)这样的托管笔记本获得免费访问。
- en: Great, now you are ready to train! 🥳
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在您已经准备好开始训练了！🥳
- en: Training loop
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 训练循环
- en: 'To keep track of your training progress, use the [tqdm](https://tqdm.github.io/)
    library to add a progress bar over the number of training steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪您的训练进度，使用[tqdm](https://tqdm.github.io/)库在训练步骤数量上添加进度条：
- en: '[PRE26]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Evaluate
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 评估
- en: Just like how you added an evaluation function to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    you need to do the same when you write your own training loop. But instead of
    calculating and reporting the metric at the end of each epoch, this time you’ll
    accumulate all the batches with `add_batch` and calculate the metric at the very
    end.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 就像您在[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)中添加了一个评估函数一样，当您编写自己的训练循环时，您需要做同样的事情。但是，这次您将累积所有批次并在最后计算指标，而不是在每个epoch结束时计算和报告指标。
- en: '[PRE27]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Additional resources
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外资源
- en: 'For more fine-tuning examples, refer to:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '有关更多微调示例，请参考:'
- en: '[🤗 Transformers Examples](https://github.com/huggingface/transformers/tree/main/examples)
    includes scripts to train common NLP tasks in PyTorch and TensorFlow.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[🤗 Transformers Examples](https://github.com/huggingface/transformers/tree/main/examples)
    包括了用于在PyTorch和TensorFlow中训练常见NLP任务的脚本。'
- en: '[🤗 Transformers Notebooks](notebooks) contains various notebooks on how to
    fine-tune a model for specific tasks in PyTorch and TensorFlow.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[🤗 Transformers Notebooks](notebooks) 包含了关于如何在PyTorch和TensorFlow中为特定任务微调模型的各种笔记本。'
