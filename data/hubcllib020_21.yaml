- en: Webhooks Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webhooks服务器
- en: 'Original text: [https://huggingface.co/docs/huggingface_hub/guides/webhooks_server](https://huggingface.co/docs/huggingface_hub/guides/webhooks_server)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/huggingface_hub/guides/webhooks_server](https://huggingface.co/docs/huggingface_hub/guides/webhooks_server)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Webhooks are a foundation for MLOps-related features. They allow you to listen
    for new changes on specific repos or to all repos belonging to particular users/organizations
    you’re interested in following. This guide will explain how to leverage `huggingface_hub`
    to create a server listening to webhooks and deploy it to a Space. It assumes
    you are familiar with the concept of webhooks on the Huggingface Hub. To learn
    more about webhooks themselves, you can read this [guide](https://huggingface.co/docs/hub/webhooks)
    first.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Webhooks是MLOps相关功能的基础。它们允许您监听特定存储库或您感兴趣的特定用户/组织的所有存储库的新更改。本指南将解释如何利用`huggingface_hub`创建一个监听webhooks并将其部署到Space的服务器。它假定您熟悉Huggingface
    Hub上的webhooks概念。要了解有关webhooks本身的更多信息，您可以先阅读此指南。
- en: The base class that we will use in this guide is [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer).
    It is a class for easily configuring a server that can receive webhooks from the
    Huggingface Hub. The server is based on a [Gradio](https://gradio.app/) app. It
    has a UI to display instructions for you or your users and an API to listen to
    webhooks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本指南中将使用的基类是[WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)。这是一个用于轻松配置可以接收来自Huggingface
    Hub的webhooks的服务器的类。该服务器基于[Gradio](https://gradio.app/)应用程序。它具有用于显示指导信息的UI，供您或您的用户使用，并具有用于监听webhooks的API。
- en: To see a running example of a webhook server, check out the [Spaces CI Bot](https://huggingface.co/spaces/spaces-ci-bot/webhook)
    one. It is a Space that launches ephemeral environments when a PR is opened on
    a Space.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看一个正在运行的webhook服务器的示例，请查看[Spaces CI Bot](https://huggingface.co/spaces/spaces-ci-bot/webhook)。这是一个Space，当在Space上打开PR时，它会启动临时环境。
- en: This is an [experimental feature](../package_reference/environment_variables#hfhubdisableexperimentalwarning).
    This means that we are still working on improving the API. Breaking changes might
    be introduced in the future without prior notice. Make sure to pin the version
    of `huggingface_hub` in your requirements.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个实验性功能。这意味着我们仍在努力改进API。未来可能会引入破坏性更改，而不事先通知。请确保在您的要求中固定`huggingface_hub`的版本。
- en: Create an endpoint
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个端点
- en: 'Implementing a webhook endpoint is as simple as decorating a function. Let’s
    see a first example to explain the main concepts:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 实现webhook端点就像装饰一个函数一样简单。让我们看一个第一个示例来解释主要概念：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save this snippet in a file called `''app.py''` and run it with `''python app.py''`.
    You should see a message like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将此片段保存在名为`'app.py'`的文件中，并使用`'python app.py'`运行它。您应该会看到类似以下的消息：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Good job! You just launched a webhook server! Let’s break down what happened
    exactly:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！您刚刚启动了一个webhook服务器！让我们详细解释一下发生了什么：
- en: By decorating a function with [webhook_endpoint()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.webhook_endpoint),
    a [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)
    object has been created in the background. As you can see, this server is a Gradio
    app running on [http://127.0.0.1:7860](http://127.0.0.1:7860). If you open this
    URL in your browser, you will see a landing page with instructions about the registered
    webhooks.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用[webhook_endpoint()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.webhook_endpoint)装饰函数，后台已创建了一个[WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)对象。正如您所看到的，此服务器是在[http://127.0.0.1:7860](http://127.0.0.1:7860)上运行的Gradio应用程序。如果在浏览器中打开此URL，您将看到一个包含有关已注册webhooks的说明的登陆页面。
- en: A Gradio app is a FastAPI server under the hood. A new POST route `/webhooks/trigger_training`
    has been added to it. This is the route that will listen to webhooks and run the
    `trigger_training` function when triggered. FastAPI will automatically parse the
    payload and pass it to the function as a [WebhookPayload](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhookPayload)
    object. This is a `pydantic` object that contains all the information about the
    event that triggered the webhook.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gradio应用程序是FastAPI服务器的底层。它添加了一个新的POST路由`/webhooks/trigger_training`。这是将监听webhooks并在触发时运行`trigger_training`函数的路由。FastAPI将自动解析有效负载并将其作为[WebhookPayload](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhookPayload)对象传递给函数。这是一个包含有关触发webhook的事件的所有信息的`pydantic`对象。
- en: 'The Gradio app also opened a tunnel to receive requests from the internet.
    This is the interesting part: you can configure a Webhook on [https://huggingface.co/settings/webhooks](https://huggingface.co/settings/webhooks)
    pointing to your local machine. This is useful for debugging your webhook server
    and quickly iterating before deploying it to a Space.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gradio应用程序还打开了一个隧道以接收来自互联网的请求。这是有趣的部分：您可以在[https://huggingface.co/settings/webhooks](https://huggingface.co/settings/webhooks)上配置一个指向本地机器的Webhook。这对于调试您的webhook服务器并在部署到Space之前快速迭代非常有用。
- en: Finally, the logs also tell you that your server is currently not secured by
    a secret. This is not problematic for local debugging but is to keep in mind for
    later.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，日志还告诉您，您的服务器当前未受到秘密的保护。这对于本地调试并不成问题，但以后要记住。
- en: By default, the server is started at the end of your script. If you are running
    it in a notebook, you can start the server manually by calling `decorated_function.run()`.
    Since a unique server is used, you only have to start the server once even if
    you have multiple endpoints.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，服务器在脚本结束时启动。如果您在笔记本中运行它，可以通过调用`decorated_function.run()`手动启动服务器。由于使用唯一服务器，即使有多个端点，您也只需启动服务器一次。
- en: Configure a Webhook
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Webhook
- en: Now that you have a webhook server running, you want to configure a Webhook
    to start receiving messages. Go to [https://huggingface.co/settings/webhooks](https://huggingface.co/settings/webhooks),
    click on “Add a new webhook” and configure your Webhook. Set the target repositories
    you want to watch and the Webhook URL, here `https://1fadb0f52d8bf825fc.gradio.live/webhooks/trigger_training`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有一个正在运行的webhook服务器，您希望配置一个Webhook来开始接收消息。前往[https://huggingface.co/settings/webhooks](https://huggingface.co/settings/webhooks)，点击“添加新的webhook”并配置您的Webhook。设置您想要监视的目标存储库和Webhook
    URL，例如`https://1fadb0f52d8bf825fc.gradio.live/webhooks/trigger_training`。
- en: '![](../Images/615611df3cad938ddc39a892ef73e17d.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/615611df3cad938ddc39a892ef73e17d.png)'
- en: And that’s it! You can now trigger that webhook by updating the target repository
    (e.g. push a commit). Check the Activity tab of your Webhook to see the events
    that have been triggered. Now that you have a working setup, you can test it and
    quickly iterate. If you modify your code and restart the server, your public URL
    might change. Make sure to update the webhook configuration on the Hub if needed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您现在可以通过更新目标存储库（例如推送提交）来触发该webhook。查看您的Webhook的活动选项卡，查看已触发的事件。现在您有一个工作的设置，您可以测试并快速迭代。如果您修改了代码并重新启动服务器，您的公共URL可能会更改。如有需要，请确保在Hub上更新webhook配置。
- en: Deploy to a Space
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到Space
- en: Now that you have a working webhook server, the goal is to deploy it to a Space.
    Go to [https://huggingface.co/new-space](https://huggingface.co/new-space) to
    create a Space. Give it a name, select the Gradio SDK and click on “Create Space”.
    Upload your code to the Space in a file called `app.py`. Your Space will start
    automatically! For more details about Spaces, please refer to this [guide](https://huggingface.co/docs/hub/spaces-overview).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经有一个工作的webhook服务器，目标是将其部署到一个Space。前往[https://huggingface.co/new-space](https://huggingface.co/new-space)创建一个Space。给它一个名称，选择Gradio
    SDK，然后点击“创建Space”。将您的代码上传到名为`app.py`的Space文件中。您的Space将自动启动！有关Spaces的更多详细信息，请参考这个[指南](https://huggingface.co/docs/hub/spaces-overview)。
- en: Your webhook server is now running on a public Space. If most cases, you will
    want to secure it with a secret. Go to your Space settings > Section “Repository
    secrets” > “Add a secret”. Set the `WEBHOOK_SECRET` environment variable to the
    value of your choice. Go back to the [Webhooks settings](https://huggingface.co/settings/webhooks)
    and set the secret in the webhook configuration. Now, only requests with the correct
    secret will be accepted by your server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您的webhook服务器现在正在一个公共Space上运行。在大多数情况下，您会希望用一个密钥来保护它。前往您的Space设置 > “存储库密钥”部分 >
    “添加密钥”。将`WEBHOOK_SECRET`环境变量设置为您选择的值。返回到[Webhooks设置](https://huggingface.co/settings/webhooks)并在webhook配置中设置密钥。现在，只有带有正确密钥的请求才会被服务器接受。
- en: And this is it! Your Space is now ready to receive webhooks from the Hub. Please
    keep in mind that if you run the Space on a free ‘cpu-basic’ hardware, it will
    be shut down after 48 hours of inactivity. If you need a permanent Space, you
    should consider setting to an [upgraded hardware](https://huggingface.co/docs/hub/spaces-gpus#hardware-specs).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您的Space现在已准备好从Hub接收webhooks。请记住，如果您在免费的‘cpu-basic’硬件上运行Space，在48小时内没有活动后，它将被关闭。如果您需要一个永久的Space，您应该考虑升级硬件设置到[升级硬件](https://huggingface.co/docs/hub/spaces-gpus#hardware-specs)。
- en: Advanced usage
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级用法
- en: The guide above explained the quickest way to setup a [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer).
    In this section, we will see how to customize it further.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的指南解释了设置[WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)的最快方法。在本节中，我们将看到如何进一步自定义它。
- en: Multiple endpoints
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 多个端点
- en: 'You can register multiple endpoints on the same server. For example, you might
    want to have one endpoint to trigger a training job and another one to trigger
    a model evaluation. You can do this by adding multiple `@webhook_endpoint` decorators:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在同一个服务器上注册多个端点。例如，您可能希望有一个端点来触发训练作业，另一个端点来触发模型评估。您可以通过添加多个`@webhook_endpoint`装饰器来实现这一点：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Which will create two endpoints:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建两个端点：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Custom server
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义服务器
- en: To get more flexibility, you can also create a [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)
    object directly. This is useful if you want to customize the landing page of your
    server. You can do this by passing a [Gradio UI](https://gradio.app/docs/#blocks)
    that will overwrite the default one. For example, you can add instructions for
    your users or add a form to manually trigger the webhooks. When creating a [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer),
    you can register new webhooks using the `add_webhook()` decorator.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得更多的灵活性，您也可以直接创建一个[WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)对象。如果您想要自定义服务器的登陆页面，这将非常有用。您可以通过传递一个[Gradio
    UI](https://gradio.app/docs/#blocks)来覆盖默认页面。例如，您可以为用户添加说明或添加一个表单来手动触发webhooks。在创建[WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)时，您可以使用`add_webhook()`装饰器注册新的webhooks。
- en: 'Here is a complete example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个完整的例子：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We define a custom UI using Gradio blocks. This UI will be displayed on the
    landing page of the server.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用Gradio blocks定义了一个自定义UI。这个UI将显示在服务器的登陆页面上。
- en: We create a [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)
    object with a custom UI and a secret. The secret is optional and can be set with
    the `WEBHOOK_SECRET` environment variable.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个带有自定义UI和密钥的[WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)对象。密钥是可选的，可以使用`WEBHOOK_SECRET`环境变量设置。
- en: We register a webhook with an explicit name. This will create an endpoint at
    `/webhooks/say_hello`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们注册了一个显式名称的webhook。这将在`/webhooks/say_hello`创建一个端点。
- en: We register a webhook with an implicit name. This will create an endpoint at
    `/webhooks/goodbye`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们注册了一个隐式名称的webhook。这将在`/webhooks/goodbye`创建一个端点。
- en: We start the server. This is optional as your server will automatically be started
    at the end of the script.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们启动服务器。这是可选的，因为在脚本结束时，您的服务器将自动启动。
