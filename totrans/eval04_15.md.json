["```py\npip install -U scikit-learn\n```", "```py\nimport numpy as np\nnp.random.seed(0)\nimport evaluate\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n```", "```py\nX, y = fetch_openml(\"titanic\", version=1, as_frame=True, return_X_y=True)\n```", "```py\nX = titanic.frame.drop('survived', axis=1)\ny = titanic.frame['survived']\n```", "```py\nnumeric_features = [\"age\", \"fare\"]\nnumeric_transformer = Pipeline(\n    steps=[(\"imputer\", SimpleImputer(strategy=\"median\")), (\"scaler\", StandardScaler())]\n)\n\ncategorical_features = [\"embarked\", \"sex\", \"pclass\"]\ncategorical_transformer = OneHotEncoder(handle_unknown=\"ignore\")\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", numeric_transformer, numeric_features),\n        (\"cat\", categorical_transformer, categorical_features),\n    ]\n)\n```", "```py\nclf = Pipeline(\n    steps=[(\"preprocessor\", preprocessor), (\"classifier\", LogisticRegression())]\n)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\nclf.fit(X_train, y_train)\ny_pred = clf.predict(X_test)\n```", "```py\n# Evaluate metrics accept lists as inputs for values of references and predictions\n\ny_test = y_test.tolist()\ny_pred = y_pred.tolist()\n\n# Accuracy\n\naccuracy_metric = evaluate.load(\"accuracy\")\naccuracy = accuracy_metric.compute(references=y_test, predictions=y_pred)\nprint(\"Accuracy:\", accuracy)\n# Accuracy: 0.79\n```"]