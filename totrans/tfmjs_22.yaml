- en: configs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers.js/api/configs](https://huggingface.co/docs/transformers.js/api/configs)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers.js/main/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/entry/start.d68a6d16.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/scheduler.b108d059.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/singletons.e4b794f0.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/paths.0114e475.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/entry/app.c6513cb2.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/index.008de539.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/nodes/0.7513fd35.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/nodes/3.1951da1d.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/CodeBlock.3968c746.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/Heading.88bfeb84.js">
  prefs: []
  type: TYPE_NORMAL
- en: Helper module for using model configs. For more information, see the corresponding
    [Python documentation](https://huggingface.co/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig).
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Load an `AutoConfig`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[configs](#module_configs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*static*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.PretrainedConfig](#module_configs.PretrainedConfig)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new PretrainedConfig(configJSON)`](#new_module_configs.PretrainedConfig_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.from_pretrained(pretrained_model_name_or_path, options)`](#module_configs.PretrainedConfig.from_pretrained)
    ⇒ `Promise.<PretrainedConfig>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.AutoConfig](#module_configs.AutoConfig)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.from_pretrained()`](#module_configs.AutoConfig.from_pretrained) : `PretrainedConfig.from_pretrained`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*inner*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~loadConfig(pretrained_model_name_or_path, options)`](#module_configs..loadConfig)
    ⇒ `Promise.<Array>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~PretrainedOptions`](#module_configs..PretrainedOptions) : `*`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: configs.PretrainedConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Base class for all configuration classes. For more information, see the corresponding
    [Python documentation](https://huggingface.co/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig).
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static class of [`configs`](#module_configs)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.PretrainedConfig](#module_configs.PretrainedConfig)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new PretrainedConfig(configJSON)`](#new_module_configs.PretrainedConfig_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.from_pretrained(pretrained_model_name_or_path, options)`](#module_configs.PretrainedConfig.from_pretrained)
    ⇒ `Promise.<PretrainedConfig>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new PretrainedConfig(configJSON)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new PreTrainedTokenizer instance.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| configJSON | `Object` | The JSON of the config. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: PretrainedConfig.from_pretrained(pretrained_model_name_or_path, options) ⇒ <code>
    Promise. < PretrainedConfig > </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Loads a pre-trained config from the given `pretrained_model_name_or_path`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static method of [`PretrainedConfig`](#module_configs.PretrainedConfig)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<PretrainedConfig>` - A new instance of the `PretrainedConfig`
    class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Throws**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Error` Throws an error if the config.json is not found in the `pretrained_model_name_or_path`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| pretrained_model_name_or_path | `string` | The path to the pre-trained config.
    |'
  prefs: []
  type: TYPE_TB
- en: '| options | `PretrainedOptions` | Additional options for loading the config.
    |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: configs.AutoConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Helper class which is used to instantiate pretrained configs with the `from_pretrained`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static class of [`configs`](#module_configs)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'AutoConfig.from_pretrained() : <code> PretrainedConfig.from_pretrained </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: static method of [`AutoConfig`](#module_configs.AutoConfig)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: configs~loadConfig(pretrained_model_name_or_path, options) ⇒ <code> Promise.
    < Array > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loads a config from the specified path.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner method of [`configs`](#module_configs)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<Array>` - A promise that resolves with information about
    the loaded config.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| pretrained_model_name_or_path | `string` | The path to the config directory.
    |'
  prefs: []
  type: TYPE_TB
- en: '| options | `PretrainedOptions` | Additional options for loading the config.
    |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'configs~PretrainedOptions : <code> * </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`configs`](#module_configs)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
