["```py\nfrom transformers import AutoModelForImageClassification\n\nmodel = AutoModelForImageClassification.from_pretrained(MODEL_ID).to(\"cuda\")\n+ model = torch.compile(model)\n```", "```py\nimport torch\nfrom PIL import Image\nimport requests\nimport numpy as np\nfrom transformers import AutoImageProcessor, AutoModelForImageClassification\n\nurl = 'http://images.cocodataset.org/val2017/000000039769.jpg'\nimage = Image.open(requests.get(url, stream=True).raw)\n\nprocessor = AutoImageProcessor.from_pretrained(\"google/vit-base-patch16-224\")\nmodel = AutoModelForImageClassification.from_pretrained(\"google/vit-base-patch16-224\").to(\"cuda\")\nmodel = torch.compile(model)\n\nprocessed_input = processor(image, return_tensors='pt').to(device=\"cuda\")\n\nwith torch.no_grad():\n    _ = model(**processed_input)\n\n```", "```py\nfrom transformers import AutoImageProcessor, AutoModelForObjectDetection\n\nprocessor = AutoImageProcessor.from_pretrained(\"facebook/detr-resnet-50\")\nmodel = AutoModelForObjectDetection.from_pretrained(\"facebook/detr-resnet-50\").to(\"cuda\")\nmodel = torch.compile(model)\n\ntexts = [\"a photo of a cat\", \"a photo of a dog\"]\ninputs = processor(text=texts, images=image, return_tensors=\"pt\").to(\"cuda\")\n\nwith torch.no_grad():\n    _ = model(**inputs)\n```", "```py\nfrom transformers import SegformerImageProcessor, SegformerForSemanticSegmentation\n\nprocessor = SegformerImageProcessor.from_pretrained(\"nvidia/segformer-b0-finetuned-ade-512-512\")\nmodel = SegformerForSemanticSegmentation.from_pretrained(\"nvidia/segformer-b0-finetuned-ade-512-512\").to(\"cuda\")\nmodel = torch.compile(model)\nseg_inputs = processor(images=image, return_tensors=\"pt\").to(\"cuda\")\n\nwith torch.no_grad():\n    _ = model(**seg_inputs)\n```"]