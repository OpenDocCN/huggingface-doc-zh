- en: Mask2Former
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/mask2former](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/mask2former)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Mask2Former model was proposed in [Masked-attention Mask Transformer for
    Universal Image Segmentation](https://arxiv.org/abs/2112.01527) by Bowen Cheng,
    Ishan Misra, Alexander G. Schwing, Alexander Kirillov, Rohit Girdhar. Mask2Former
    is a unified framework for panoptic, instance and semantic segmentation and features
    significant performance and efficiency improvements over [MaskFormer](maskformer).
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Image segmentation groups pixels with different semantics, e.g., category
    or instance membership. Each choice of semantics defines a task. While only the
    semantics of each task differ, current research focuses on designing specialized
    architectures for each task. We present Masked-attention Mask Transformer (Mask2Former),
    a new architecture capable of addressing any image segmentation task (panoptic,
    instance or semantic). Its key components include masked attention, which extracts
    localized features by constraining cross-attention within predicted mask regions.
    In addition to reducing the research effort by at least three times, it outperforms
    the best specialized architectures by a significant margin on four popular datasets.
    Most notably, Mask2Former sets a new state-of-the-art for panoptic segmentation
    (57.8 PQ on COCO), instance segmentation (50.1 AP on COCO) and semantic segmentation
    (57.7 mIoU on ADE20K).*'
  prefs: []
  type: TYPE_NORMAL
- en: '![drawing](../Images/5ce83994aad79cfa0f1a7945fa6a424d.png) Mask2Former architecture.
    Taken from the [original paper.](https://arxiv.org/abs/2112.01527)'
  prefs: []
  type: TYPE_IMG
- en: This model was contributed by [Shivalika Singh](https://huggingface.co/shivi)
    and [Alara Dirik](https://huggingface.co/adirik). The original code can be found
    [here](https://github.com/facebookresearch/Mask2Former).
  prefs: []
  type: TYPE_NORMAL
- en: Usage tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mask2Former uses the same preprocessing and postprocessing steps as [MaskFormer](maskformer).
    Use [Mask2FormerImageProcessor](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerImageProcessor)
    or [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor)
    to prepare images and optional targets for the model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get the final segmentation, depending on the task, you can call [post_process_semantic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerImageProcessor.post_process_semantic_segmentation)
    or [post_process_instance_segmentation()](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerImageProcessor.post_process_instance_segmentation)
    or [post_process_panoptic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerImageProcessor.post_process_panoptic_segmentation).
    All three tasks can be solved using [Mask2FormerForUniversalSegmentation](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerForUniversalSegmentation)
    output, panoptic segmentation accepts an optional `label_ids_to_fuse` argument
    to fuse instances of the target object/s (e.g. sky) together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of official Hugging Face and community (indicated by ðŸŒŽ) resources to
    help you get started with Mask2Former.
  prefs: []
  type: TYPE_NORMAL
- en: Demo notebooks regarding inference + fine-tuning Mask2Former on custom data
    can be found [here](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/Mask2Former).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If youâ€™re interested in submitting a resource to be included here, please feel
    free to open a Pull Request and we will review it. The resource should ideally
    demonstrate something new instead of duplicating an existing resource.
  prefs: []
  type: TYPE_NORMAL
- en: Mask2FormerConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.Mask2FormerConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/configuration_mask2former.py#L33)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`backbone_config` (`PretrainedConfig` or `dict`, *optional*, defaults to `SwinConfig()`)
    â€” The configuration of the backbone model. If unset, the configuration corresponding
    to `swin-base-patch4-window12-384` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`feature_size` (`int`, *optional*, defaults to 256) â€” The features (channels)
    of the resulting feature maps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_feature_size` (`int`, *optional*, defaults to 256) â€” The masksâ€™ features
    size, this value will also be used to specify the Feature Pyramid Network featuresâ€™
    size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_dim` (`int`, *optional*, defaults to 256) â€” Dimensionality of the encoder
    layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_feedforward_dim` (`int`, *optional*, defaults to 1024) â€” Dimension
    of feedforward network for deformable detr encoder used as part of pixel decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_layers` (`int`, *optional*, defaults to 6) â€” Number of layers in the
    deformable detr encoder used as part of pixel decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_layers` (`int`, *optional*, defaults to 10) â€” Number of layers in
    the Transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_attention_heads` (`int`, *optional*, defaults to 8) â€” Number of attention
    heads for each attention layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dropout` (`float`, *optional*, defaults to 0.1) â€” The dropout probability
    for all fully connected layers in the embeddings, encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dim_feedforward` (`int`, *optional*, defaults to 2048) â€” Feature dimension
    in feedforward network for transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pre_norm` (`bool`, *optional*, defaults to `False`) â€” Whether to use pre-LayerNorm
    or not for transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enforce_input_projection` (`bool`, *optional*, defaults to `False`) â€” Whether
    to add an input projection 1x1 convolution even if the input channels and hidden
    dim are identical in the Transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`common_stride` (`int`, *optional*, defaults to 4) â€” Parameter used for determining
    number of FPN levels used as part of pixel decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_value` (`int`, *optional*, defaults to 255) â€” Category id to be ignored
    during training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_queries` (`int`, *optional*, defaults to 100) â€” Number of queries for
    the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no_object_weight` (`int`, *optional*, defaults to 0.1) â€” The weight to apply
    to the null (no object) class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_weight` (`int`, *optional*, defaults to 2.0) â€” The weight for the cross
    entropy loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_weight` (`int`, *optional*, defaults to 5.0) â€” The weight for the mask
    loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dice_weight` (`int`, *optional*, defaults to 5.0) â€” The weight for the dice
    loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`train_num_points` (`str` or `function`, *optional*, defaults to 12544) â€” Number
    of points used for sampling during loss calculation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oversample_ratio` (`float`, *optional*, defaults to 3.0) â€” Oversampling parameter
    used for calculating no. of sampled points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`importance_sample_ratio` (`float`, *optional*, defaults to 0.75) â€” Ratio of
    points that are sampled via importance sampling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`init_std` (`float`, *optional*, defaults to 0.02) â€” The standard deviation
    of the truncated_normal_initializer for initializing all weight matrices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`init_xavier_std` (`float`, *optional*, defaults to 1.0) â€” The scaling factor
    used for the Xavier initialization gain in the HM Attention map module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_auxiliary_loss` (`boolean``, *optional*, defaults to` True`) -- If` TrueMask2FormerForUniversalSegmentationOutput`
    will contain the auxiliary losses computed using the logits from each decoderâ€™s
    stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`feature_strides` (`List[int]`, *optional*, defaults to `[4, 8, 16, 32]`) â€”
    Feature strides corresponding to features generated from backbone network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_auxiliary_logits` (`bool`, *optional*) â€” Should the model output its
    `auxiliary_logits` or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a [Mask2FormerModel](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerModel).
    It is used to instantiate a Mask2Former model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the Mask2Former [facebook/mask2former-swin-small-coco-instance](https://huggingface.co/facebook/mask2former-swin-small-coco-instance)
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, Mask2Former only supports the [Swin Transformer](swin) as backbone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '#### `from_backbone_config`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/configuration_mask2former.py#L218)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`backbone_config` ([PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig))
    â€” The backbone configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[Mask2FormerConfig](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerConfig)'
  prefs: []
  type: TYPE_NORMAL
- en: An instance of a configuration object
  prefs: []
  type: TYPE_NORMAL
- en: Instantiate a [Mask2FormerConfig](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerConfig)
    (or a derived class) from a pre-trained backbone model configuration.
  prefs: []
  type: TYPE_NORMAL
- en: MaskFormer specific outputs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.models.mask2former.modeling_mask2former.Mask2FormerModelOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/modeling_mask2former.py#L145)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`, *optional*) â€” Last hidden states (final feature map) of the last
    stage of the encoder model (backbone). Returned when `output_hidden_states=True`
    is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*) â€” Tuple of
    `torch.FloatTensor` (one for the output of the embeddings + one for the output
    of each stage) of shape `(batch_size, num_channels, height, width)`. Hidden-states
    (also called feature maps) of the encoder model at the output of each stage. Returned
    when `output_hidden_states=True` is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_decoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size,
    num_channels, height, width)`, *optional*) â€” Last hidden states (final feature
    map) of the last stage of the pixel decoder model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_decoder_hidden_states` (`tuple(torch.FloatTensor)`, , *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    â€” Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the pixel decoder model at the output
    of each stage. Returned when `output_hidden_states=True` is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformer_decoder_last_hidden_state` (`tuple(torch.FloatTensor)`) â€” Final
    output of the transformer decoder `(batch_size, sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformer_decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*)
    â€” Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states (also called feature maps) of the transformer decoder at the output
    of each stage. Returned when `output_hidden_states=True` is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformer_decoder_intermediate_states` (`tuple(torch.FloatTensor)` of shape
    `(num_queries, 1, hidden_size)`) â€” Intermediate decoder activations, i.e. the
    output of each decoder layer, each of them gone through a layernorm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`masks_queries_logits` (`tuple(torch.FloatTensor)` of shape `(batch_size, num_queries,
    height, width)`) â€” Mask Predictions from each layer in the transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attentions` (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when
    `output_attentions=True` is passed) â€” Tuple of `tuple(torch.FloatTensor)` (one
    for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Self attentions weights from transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class for outputs of [Mask2FormerModel](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerModel).
    This class returns all the needed hidden states to compute the logits.
  prefs: []
  type: TYPE_NORMAL
- en: '### `class transformers.models.mask2former.modeling_mask2former.Mask2FormerForUniversalSegmentationOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/modeling_mask2former.py#L191)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.Tensor`, *optional*) â€” The computed loss, returned when labels
    are present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_queries_logits` (`torch.FloatTensor`) â€” A tensor of shape `(batch_size,
    num_queries, num_labels + 1)` representing the proposed classes for each query.
    Note the `+ 1` is needed because we incorporate the null class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`masks_queries_logits` (`torch.FloatTensor`) â€” A tensor of shape `(batch_size,
    num_queries, height, width)` representing the proposed masks for each query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxiliary_logits` (`List[Dict(str, torch.FloatTensor)]`, *optional*) â€” List
    of class and mask predictions from each layer of the transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) â€” Last hidden states (final feature map) of the last stage of
    the encoder model (backbone).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    â€” Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the encoder model at the output of
    each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_decoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size,
    num_channels, height, width)`) â€” Last hidden states (final feature map) of the
    last stage of the pixel decoder model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    â€” Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the pixel decoder model at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformer_decoder_last_hidden_state` (`tuple(torch.FloatTensor)`) â€” Final
    output of the transformer decoder `(batch_size, sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformer_decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*,
    returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    â€” Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states (also called feature maps) of the transformer decoder at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attentions` (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) â€”
    Tuple of `tuple(torch.FloatTensor)` (one for each layer) of shape `(batch_size,
    num_heads, sequence_length, sequence_length)`. Self and Cross Attentions weights
    from transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class for outputs of `Mask2FormerForUniversalSegmentationOutput`.
  prefs: []
  type: TYPE_NORMAL
- en: This output can be directly passed to [post_process_semantic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerImageProcessor.post_process_semantic_segmentation)
    or [post_process_instance_segmentation()](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerImageProcessor.post_process_instance_segmentation)
    or [post_process_panoptic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerImageProcessor.post_process_panoptic_segmentation)
    to compute final segmentation maps. Please, see [`~Mask2FormerImageProcessor]
    for details regarding usage.
  prefs: []
  type: TYPE_NORMAL
- en: Mask2FormerModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.Mask2FormerModel`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/modeling_mask2former.py#L2189)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([Mask2FormerConfig](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerConfig))
    â€” Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bare Mask2Former Model outputting raw hidden-states without any specific
    head on top. This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    sub-class. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/modeling_mask2former.py#L2203)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) â€” Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See `AutoImageProcessor.preprocess` for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask` (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*)
    â€” Mask to avoid performing attention on padding pixel values. Mask values selected
    in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for pixels that are real (i.e. `not masked`),
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for pixels that are padding (i.e. `masked`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) â€” Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) â€” Whether or not to return the attentions
    tensors of Detrâ€™s decoder attention layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) â€” Whether or not to return a `~Mask2FormerModelOutput`
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.models.mask2former.modeling_mask2former.Mask2FormerModelOutput](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.models.mask2former.modeling_mask2former.Mask2FormerModelOutput)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.models.mask2former.modeling_mask2former.Mask2FormerModelOutput](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.models.mask2former.modeling_mask2former.Mask2FormerModelOutput)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([Mask2FormerConfig](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`, *optional*) â€” Last hidden states (final feature map) of the last
    stage of the encoder model (backbone). Returned when `output_hidden_states=True`
    is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*) â€” Tuple of
    `torch.FloatTensor` (one for the output of the embeddings + one for the output
    of each stage) of shape `(batch_size, num_channels, height, width)`. Hidden-states
    (also called feature maps) of the encoder model at the output of each stage. Returned
    when `output_hidden_states=True` is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_decoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size,
    num_channels, height, width)`, *optional*) â€” Last hidden states (final feature
    map) of the last stage of the pixel decoder model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_decoder_hidden_states` (`tuple(torch.FloatTensor)`, , *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    â€” Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the pixel decoder model at the output
    of each stage. Returned when `output_hidden_states=True` is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformer_decoder_last_hidden_state` (`tuple(torch.FloatTensor)`) â€” Final
    output of the transformer decoder `(batch_size, sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformer_decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*)
    â€” Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states (also called feature maps) of the transformer decoder at the output
    of each stage. Returned when `output_hidden_states=True` is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformer_decoder_intermediate_states` (`tuple(torch.FloatTensor)` of shape
    `(num_queries, 1, hidden_size)`) â€” Intermediate decoder activations, i.e. the
    output of each decoder layer, each of them gone through a layernorm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`masks_queries_logits` (`tuple(torch.FloatTensor)` of shape `(batch_size, num_queries,
    height, width)`) Mask Predictions from each layer in the transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attentions` (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when
    `output_attentions=True` is passed) â€” Tuple of `tuple(torch.FloatTensor)` (one
    for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Self attentions weights from transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mask2FormerModelOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: The [Mask2FormerModel](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerModel)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Mask2FormerForUniversalSegmentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.Mask2FormerForUniversalSegmentation`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/modeling_mask2former.py#L2293)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([Mask2FormerConfig](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerConfig))
    â€” Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Mask2Former Model with heads on top for instance/semantic/panoptic segmentation.
    This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    sub-class. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/modeling_mask2former.py#L2350)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) â€” Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See `AutoImageProcessor.preprocess` for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask` (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*)
    â€” Mask to avoid performing attention on padding pixel values. Mask values selected
    in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for pixels that are real (i.e. `not masked`),
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for pixels that are padding (i.e. `masked`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) â€” Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) â€” Whether or not to return the attentions
    tensors of Detrâ€™s decoder attention layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) â€” Whether or not to return a `~Mask2FormerModelOutput`
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_labels` (`List[torch.Tensor]`, *optional*) â€” List of mask labels of shape
    `(num_labels, height, width)` to be fed to a model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_labels` (`List[torch.LongTensor]`, *optional*) â€” list of target class
    labels of shape `(num_labels, height, width)` to be fed to a model. They identify
    the labels of `mask_labels`, e.g. the label of `mask_labels[i][j]` if `class_labels[i][j]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.models.mask2former.modeling_mask2former.Mask2FormerForUniversalSegmentationOutput](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.models.mask2former.modeling_mask2former.Mask2FormerForUniversalSegmentationOutput)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.models.mask2former.modeling_mask2former.Mask2FormerForUniversalSegmentationOutput](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.models.mask2former.modeling_mask2former.Mask2FormerForUniversalSegmentationOutput)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([Mask2FormerConfig](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.Tensor`, *optional*) â€” The computed loss, returned when labels
    are present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_queries_logits` (`torch.FloatTensor`) â€” A tensor of shape `(batch_size,
    num_queries, num_labels + 1)` representing the proposed classes for each query.
    Note the `+ 1` is needed because we incorporate the null class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`masks_queries_logits` (`torch.FloatTensor`) â€” A tensor of shape `(batch_size,
    num_queries, height, width)` representing the proposed masks for each query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxiliary_logits` (`List[Dict(str, torch.FloatTensor)]`, *optional*) â€” List
    of class and mask predictions from each layer of the transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) â€” Last hidden states (final feature map) of the last stage of
    the encoder model (backbone).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    â€” Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the encoder model at the output of
    each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_decoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size,
    num_channels, height, width)`) â€” Last hidden states (final feature map) of the
    last stage of the pixel decoder model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    â€” Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the pixel decoder model at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformer_decoder_last_hidden_state` (`tuple(torch.FloatTensor)`) â€” Final
    output of the transformer decoder `(batch_size, sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformer_decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*,
    returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    â€” Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states (also called feature maps) of the transformer decoder at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attentions` (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) â€”
    Tuple of `tuple(torch.FloatTensor)` (one for each layer) of shape `(batch_size,
    num_heads, sequence_length, sequence_length)`. Self and Cross Attentions weights
    from transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Mask2FormerUniversalSegmentationOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: The [Mask2FormerForUniversalSegmentation](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerForUniversalSegmentation)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instance segmentation example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Semantic segmentation example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Panoptic segmentation example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Mask2FormerImageProcessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.Mask2FormerImageProcessor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/image_processing_mask2former.py#L345)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) â€” Whether to resize the
    input to a certain `size`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (`int`, *optional*, defaults to 800) â€” Resize the input to the given
    size. Only has an effect if `do_resize` is set to `True`. If size is a sequence
    like `(width, height)`, output size will be matched to this. If size is an int,
    smaller edge of the image will be matched to this number. i.e, if `height > width`,
    then image will be rescaled to `(size * height / width, size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size_divisor` (`int`, *optional*, defaults to 32) â€” Some backbones need images
    divisible by a certain number. If not passed, it defaults to the value used in
    Swin Transformer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resample` (`int`, *optional*, defaults to `Resampling.BILINEAR`) â€” An optional
    resampling filter. This can be one of `PIL.Image.Resampling.NEAREST`, `PIL.Image.Resampling.BOX`,
    `PIL.Image.Resampling.BILINEAR`, `PIL.Image.Resampling.HAMMING`, `PIL.Image.Resampling.BICUBIC`
    or `PIL.Image.Resampling.LANCZOS`. Only has an effect if `do_resize` is set to
    `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) â€” Whether to rescale
    the input to a certain `scale`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rescale_factor` (`float`, *optional*, defaults to `1/ 255`) â€” Rescale the
    input by the given factor. Only has an effect if `do_rescale` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_normalize` (`bool`, *optional*, defaults to `True`) â€” Whether or not to
    normalize the input with mean and standard deviation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_mean` (`int`, *optional*, defaults to `[0.485, 0.456, 0.406]`) â€” The
    sequence of means for each channel, to be used when normalizing images. Defaults
    to the ImageNet mean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_std` (`int`, *optional*, defaults to `[0.229, 0.224, 0.225]`) â€” The
    sequence of standard deviations for each channel, to be used when normalizing
    images. Defaults to the ImageNet std.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_index` (`int`, *optional*) â€” Label to be assigned to background pixels
    in segmentation maps. If provided, segmentation map pixels denoted with 0 (background)
    will be replaced with `ignore_index`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reduce_labels` (`bool`, *optional*, defaults to `False`) â€” Whether or not
    to decrement all label values of segmentation maps by 1\. Usually used for datasets
    where 0 is used for background, and background itself is not included in all classes
    of a dataset (e.g. ADE20k). The background label will be replaced by `ignore_index`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructs a Mask2Former image processor. The image processor can be used to
    prepare image(s) and optional targets for the model.
  prefs: []
  type: TYPE_NORMAL
- en: This image processor inherits from `BaseImageProcessor` which contains most
    of the main methods. Users should refer to this superclass for more information
    regarding those methods.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `preprocess`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/image_processing_mask2former.py#L670)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '#### `encode_inputs`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/image_processing_mask2former.py#L858)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values_list` (`List[ImageInput]`) â€” List of images (pixel values) to
    be padded. Each image should be a tensor of shape `(channels, height, width)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`segmentation_maps` (`ImageInput`, *optional*) â€” The corresponding semantic
    segmentation maps with the pixel-wise annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(`bool`, *optional*, defaults to `True`): Whether or not to pad images up to
    the largest image in a batch and create a pixel mask.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If left to the default, will return a pixel mask that is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 1 for pixels that are real (i.e. `not masked`),
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for pixels that are padding (i.e. `masked`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance_id_to_semantic_id` (`List[Dict[int, int]]` or `Dict[int, int]`, *optional*)
    â€” A mapping between object instance ids and class ids. If passed, `segmentation_maps`
    is treated as an instance segmentation map where each pixel represents an instance
    id. Can be provided as a single dictionary with a global/dataset-level mapping
    or as a list of dictionaries (one per image), to map instance ids in each image
    separately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) â€” If set, will return tensors instead of NumPy arrays. If set to `''pt''`,
    return PyTorch `torch.Tensor` objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) â€” The channel
    dimension format of the input image. If not provided, it will be inferred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A [BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)
    with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` â€” Pixel values to be fed to a model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask` â€” Pixel mask to be fed to a model (when `=True` or if `pixel_mask`
    is in `self.model_input_names`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_labels` â€” Optional list of mask labels of shape `(labels, height, width)`
    to be fed to a model (when `annotations` are provided).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_labels` â€” Optional list of class labels of shape `(labels)` to be fed
    to a model (when `annotations` are provided). They identify the labels of `mask_labels`,
    e.g. the label of `mask_labels[i][j]` if `class_labels[i][j]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pad images up to the largest image in a batch and create a corresponding `pixel_mask`.
  prefs: []
  type: TYPE_NORMAL
- en: Mask2Former addresses semantic segmentation with a mask classification paradigm,
    thus input segmentation maps will be converted to lists of binary masks and their
    respective labels. Letâ€™s see an example, assuming `segmentation_maps = [[2,6,7,9]]`,
    the output will contain `mask_labels = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]`
    (four binary masks) and `class_labels = [2,6,7,9]`, the labels for each mask.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `post_process_semantic_segmentation`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/image_processing_mask2former.py#L961)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs` ([Mask2FormerForUniversalSegmentation](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerForUniversalSegmentation))
    â€” Raw outputs of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target_sizes` (`List[Tuple[int, int]]`, *optional*) â€” List of length (batch_size),
    where each list item (`Tuple[int, int]]`) corresponds to the requested final size
    (height, width) of each prediction. If left to None, predictions will not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[torch.Tensor]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of length `batch_size`, where each item is a semantic segmentation map
    of shape (height, width) corresponding to the target_sizes entry (if `target_sizes`
    is specified). Each entry of each `torch.Tensor` correspond to a semantic class
    id.
  prefs: []
  type: TYPE_NORMAL
- en: Converts the output of [Mask2FormerForUniversalSegmentation](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerForUniversalSegmentation)
    into semantic segmentation maps. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `post_process_instance_segmentation`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/image_processing_mask2former.py#L1016)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs` ([Mask2FormerForUniversalSegmentation](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerForUniversalSegmentation))
    â€” Raw outputs of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`threshold` (`float`, *optional*, defaults to 0.5) â€” The probability score
    threshold to keep predicted instance masks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_threshold` (`float`, *optional*, defaults to 0.5) â€” Threshold to use
    when turning the predicted masks into binary values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overlap_mask_area_threshold` (`float`, *optional*, defaults to 0.8) â€” The
    overlap mask area threshold to merge or discard small disconnected parts within
    each binary instance mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target_sizes` (`List[Tuple]`, *optional*) â€” List of length (batch_size), where
    each list item (`Tuple[int, int]]`) corresponds to the requested final size (height,
    width) of each prediction. If left to None, predictions will not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_coco_annotation` (`bool`, *optional*, defaults to `False`) â€” If set
    to `True`, segmentation maps are returned in COCO run-length encoding (RLE) format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_binary_maps` (`bool`, *optional*, defaults to `False`) â€” If set to
    `True`, segmentation maps are returned as a concatenated tensor of binary segmentation
    maps (one per detected instance).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of dictionaries, one per image, each dictionary containing two keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '`segmentation` â€” A tensor of shape `(height, width)` where each pixel represents
    a `segment_id` or `List[List]` run-length encoding (RLE) of the segmentation map
    if return_coco_annotation is set to `True`. Set to `None` if no mask if found
    above `threshold`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`segments_info` â€” A dictionary that contains additional information on each
    segment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id` â€” An integer representing the `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_id` â€” An integer representing the label / semantic class id corresponding
    to `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`score` â€” Prediction score of segment with `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Converts the output of `Mask2FormerForUniversalSegmentationOutput` into instance
    segmentation predictions. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `post_process_panoptic_segmentation`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mask2former/image_processing_mask2former.py#L1135)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs` (`Mask2FormerForUniversalSegmentationOutput`) â€” The outputs from
    [Mask2FormerForUniversalSegmentation](/docs/transformers/v4.37.2/en/model_doc/mask2former#transformers.Mask2FormerForUniversalSegmentation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`threshold` (`float`, *optional*, defaults to 0.5) â€” The probability score
    threshold to keep predicted instance masks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_threshold` (`float`, *optional*, defaults to 0.5) â€” Threshold to use
    when turning the predicted masks into binary values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overlap_mask_area_threshold` (`float`, *optional*, defaults to 0.8) â€” The
    overlap mask area threshold to merge or discard small disconnected parts within
    each binary instance mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_ids_to_fuse` (`Set[int]`, *optional*) â€” The labels in this state will
    have all their instances be fused together. For instance we could say there can
    only be one sky in an image, but several persons, so the label ID for sky would
    be in that set, but not the one for person.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target_sizes` (`List[Tuple]`, *optional*) â€” List of length (batch_size), where
    each list item (`Tuple[int, int]]`) corresponds to the requested final size (height,
    width) of each prediction in batch. If left to None, predictions will not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of dictionaries, one per image, each dictionary containing two keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '`segmentation` â€” a tensor of shape `(height, width)` where each pixel represents
    a `segment_id`, set to `None` if no mask if found above `threshold`. If `target_sizes`
    is specified, segmentation is resized to the corresponding `target_sizes` entry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`segments_info` â€” A dictionary that contains additional information on each
    segment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id` â€” an integer representing the `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_id` â€” An integer representing the label / semantic class id corresponding
    to `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`was_fused` â€” a boolean, `True` if `label_id` was in `label_ids_to_fuse`, `False`
    otherwise. Multiple instances of the same class / label were fused and assigned
    a single `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`score` â€” Prediction score of segment with `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Converts the output of `Mask2FormerForUniversalSegmentationOutput` into image
    panoptic segmentation predictions. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
