- en: AutoPipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/diffusers/tutorials/autopipeline](https://huggingface.co/docs/diffusers/tutorials/autopipeline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/152.f2d49c15.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Tip.230e2334.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/CodeBlock.57fe6e13.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ¤— Diffusers is able to complete many different tasks, and you can often reuse
    the same pretrained weights for multiple tasks such as text-to-image, image-to-image,
    and inpainting. If youâ€™re new to the library and diffusion models though, it may
    be difficult to know which pipeline to use for a task. For example, if youâ€™re
    using the [runwayml/stable-diffusion-v1-5](https://huggingface.co/runwayml/stable-diffusion-v1-5)
    checkpoint for text-to-image, you might not know that you could also use it for
    image-to-image and inpainting by loading the checkpoint with the [StableDiffusionImg2ImgPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/img2img#diffusers.StableDiffusionImg2ImgPipeline)
    and [StableDiffusionInpaintPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/inpaint#diffusers.StableDiffusionInpaintPipeline)
    classes respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The `AutoPipeline` class is designed to simplify the variety of pipelines in
    ðŸ¤— Diffusers. It is a generic, *task-first* pipeline that lets you focus on the
    task. The `AutoPipeline` automatically detects the correct pipeline class to use,
    which makes it easier to load a checkpoint for a task without knowing the specific
    pipeline class name.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the [AutoPipeline](../api/pipelines/auto_pipeline) reference
    to see which tasks are supported. Currently, it supports text-to-image, image-to-image,
    and inpainting.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial shows you how to use an `AutoPipeline` to automatically infer
    the pipeline class to load for a specific task, given the pretrained weights.
  prefs: []
  type: TYPE_NORMAL
- en: Choose an AutoPipeline for your task
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by picking a checkpoint. For example, if youâ€™re interested in text-to-image
    with the [runwayml/stable-diffusion-v1-5](https://huggingface.co/runwayml/stable-diffusion-v1-5)
    checkpoint, use [AutoPipelineForText2Image](/docs/diffusers/v0.26.3/en/api/pipelines/auto_pipeline#diffusers.AutoPipelineForText2Image):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![generated image of peasant fighting dragon in wood cutting style](../Images/6b36788d2ba60d3bbff51fcbbb0d71e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Under the hood, [AutoPipelineForText2Image](/docs/diffusers/v0.26.3/en/api/pipelines/auto_pipeline#diffusers.AutoPipelineForText2Image):'
  prefs: []
  type: TYPE_NORMAL
- en: automatically detects a `"stable-diffusion"` class from the [`model_index.json`](https://huggingface.co/runwayml/stable-diffusion-v1-5/blob/main/model_index.json)
    file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: loads the corresponding text-to-image [StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline)
    based on the `"stable-diffusion"` class name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Likewise, for image-to-image, [AutoPipelineForImage2Image](/docs/diffusers/v0.26.3/en/api/pipelines/auto_pipeline#diffusers.AutoPipelineForImage2Image)
    detects a `"stable-diffusion"` checkpoint from the `model_index.json` file and
    itâ€™ll load the corresponding [StableDiffusionImg2ImgPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/img2img#diffusers.StableDiffusionImg2ImgPipeline)
    behind the scenes. You can also pass any additional arguments specific to the
    pipeline class such as `strength`, which determines the amount of noise or variation
    added to an input image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![generated image of a vermeer portrait of a dog wearing a pearl earring](../Images/324a523572635d35cf0a7729b6276327.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And if you want to do inpainting, then [AutoPipelineForInpainting](/docs/diffusers/v0.26.3/en/api/pipelines/auto_pipeline#diffusers.AutoPipelineForInpainting)
    loads the underlying [StableDiffusionInpaintPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/inpaint#diffusers.StableDiffusionInpaintPipeline)
    class in the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![generated image of a tiger sitting on a bench](../Images/0a4e68dcc87ca3b2dd1efff748f52b7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you try to load an unsupported checkpoint, itâ€™ll throw an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Use multiple pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For some workflows or if youâ€™re loading many pipelines, it is more memory-efficient
    to reuse the same components from a checkpoint instead of reloading them which
    would unnecessarily consume additional memory. For example, if youâ€™re using a
    checkpoint for text-to-image and you want to use it again for image-to-image,
    use the [from_pipe()](/docs/diffusers/v0.26.3/en/api/pipelines/auto_pipeline#diffusers.AutoPipelineForImage2Image.from_pipe)
    method. This method creates a new pipeline from the components of a previously
    loaded pipeline at no additional memory cost.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [from_pipe()](/docs/diffusers/v0.26.3/en/api/pipelines/auto_pipeline#diffusers.AutoPipelineForImage2Image.from_pipe)
    method detects the original pipeline class and maps it to the new pipeline class
    corresponding to the task you want to do. For example, if you load a `"stable-diffusion"`
    class pipeline for text-to-image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then [from_pipe()](/docs/diffusers/v0.26.3/en/api/pipelines/auto_pipeline#diffusers.AutoPipelineForImage2Image.from_pipe)
    maps the original `"stable-diffusion"` pipeline class to [StableDiffusionImg2ImgPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/img2img#diffusers.StableDiffusionImg2ImgPipeline):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you passed an optional argument - like disabling the safety checker - to
    the original pipeline, this argument is also passed on to the new pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can overwrite any of the arguments and even configuration from the original
    pipeline if you want to change the behavior of the new pipeline. For example,
    to turn the safety checker back on and add the `strength` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
