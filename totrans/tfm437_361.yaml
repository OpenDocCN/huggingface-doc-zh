- en: OneFormer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/oneformer](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/oneformer)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/206.ad5b7483.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Tip.c2ecdbf4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Docstring.17db21ae.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/ExampleCodeBlock.4f515aa9.js">
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The OneFormer model was proposed in [OneFormer: One Transformer to Rule Universal
    Image Segmentation](https://arxiv.org/abs/2211.06220) by Jitesh Jain, Jiachen
    Li, MangTik Chiu, Ali Hassani, Nikita Orlov, Humphrey Shi. OneFormer is a universal
    image segmentation framework that can be trained on a single panoptic dataset
    to perform semantic, instance, and panoptic segmentation tasks. OneFormer uses
    a task token to condition the model on the task in focus, making the architecture
    task-guided for training, and task-dynamic for inference.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8cd6226185941da2d5d5f4ca249f7bd2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The abstract from the paper is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Universal Image Segmentation is not a new concept. Past attempts to unify
    image segmentation in the last decades include scene parsing, panoptic segmentation,
    and, more recently, new panoptic architectures. However, such panoptic architectures
    do not truly unify image segmentation because they need to be trained individually
    on the semantic, instance, or panoptic segmentation to achieve the best performance.
    Ideally, a truly universal framework should be trained only once and achieve SOTA
    performance across all three image segmentation tasks. To that end, we propose
    OneFormer, a universal image segmentation framework that unifies segmentation
    with a multi-task train-once design. We first propose a task-conditioned joint
    training strategy that enables training on ground truths of each domain (semantic,
    instance, and panoptic segmentation) within a single multi-task training process.
    Secondly, we introduce a task token to condition our model on the task at hand,
    making our model task-dynamic to support multi-task training and inference. Thirdly,
    we propose using a query-text contrastive loss during training to establish better
    inter-task and inter-class distinctions. Notably, our single OneFormer model outperforms
    specialized Mask2Former models across all three segmentation tasks on ADE20k,
    CityScapes, and COCO, despite the latter being trained on each of the three tasks
    individually with three times the resources. With new ConvNeXt and DiNAT backbones,
    we observe even more performance improvement. We believe OneFormer is a significant
    step towards making image segmentation more universal and accessible.*'
  prefs: []
  type: TYPE_NORMAL
- en: The figure below illustrates the architecture of OneFormer. Taken from the [original
    paper](https://arxiv.org/abs/2211.06220).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8617928e627dd67ce070d58bb21d63e1.png)'
  prefs: []
  type: TYPE_IMG
- en: This model was contributed by [Jitesh Jain](https://huggingface.co/praeclarumjj3).
    The original code can be found [here](https://github.com/SHI-Labs/OneFormer).
  prefs: []
  type: TYPE_NORMAL
- en: Usage tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OneFormer requires two inputs during inference: *image* and *task token*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During training, OneFormer only uses panoptic annotations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to train the model in a distributed environment across multiple
    nodes, then one should update the `get_num_masks` function inside in the `OneFormerLoss`
    class of `modeling_oneformer.py`. When training on multiple nodes, this should
    be set to the average number of target masks across all nodes, as can be seen
    in the original implementation [here](https://github.com/SHI-Labs/OneFormer/blob/33ebb56ed34f970a30ae103e786c0cb64c653d9a/oneformer/modeling/criterion.py#L287).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One can use [OneFormerProcessor](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerProcessor)
    to prepare input images and task inputs for the model and optional targets for
    the model. `OneformerProcessor` wraps [OneFormerImageProcessor](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor)
    and [CLIPTokenizer](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizer)
    into a single instance to both prepare the images and encode the task inputs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get the final segmentation, depending on the task, you can call [post_process_semantic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerProcessor.post_process_semantic_segmentation)
    or [post_process_instance_segmentation()](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor.post_process_instance_segmentation)
    or [post_process_panoptic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor.post_process_panoptic_segmentation).
    All three tasks can be solved using [OneFormerForUniversalSegmentation](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerForUniversalSegmentation)
    output, panoptic segmentation accepts an optional `label_ids_to_fuse` argument
    to fuse instances of the target object/s (e.g. sky) together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of official Hugging Face and community (indicated by 🌎) resources to
    help you get started with OneFormer.
  prefs: []
  type: TYPE_NORMAL
- en: Demo notebooks regarding inference + fine-tuning on custom data can be found
    [here](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/OneFormer).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re interested in submitting a resource to be included here, please feel
    free to open a Pull Request and we will review it. The resource should ideally
    demonstrate something new instead of duplicating an existing resource.
  prefs: []
  type: TYPE_NORMAL
- en: OneFormer specific outputs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.models.oneformer.modeling_oneformer.OneFormerModelOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/modeling_oneformer.py#L803)'
  prefs: []
  type: TYPE_NORMAL
- en: '( encoder_hidden_states: Optional = None pixel_decoder_hidden_states: Optional
    = None transformer_decoder_hidden_states: Optional = None transformer_decoder_object_queries:
    FloatTensor = None transformer_decoder_contrastive_queries: Optional = None transformer_decoder_mask_predictions:
    FloatTensor = None transformer_decoder_class_predictions: FloatTensor = None transformer_decoder_auxiliary_predictions:
    Optional = None text_queries: Optional = None task_token: FloatTensor = None attentions:
    Optional = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**encoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the encoder model at the output of
    each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixel_decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the pixel decoder model at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*,
    returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states (also called feature maps) of the transformer decoder at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_object_queries** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, hidden_dim)`) — Output object queries from the last layer in the
    transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_contrastive_queries** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, hidden_dim)`) — Contrastive queries from the transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_mask_predictions** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, height, width)`) — Mask Predictions from the last layer in the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_class_predictions** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, num_classes+1)`) — Class Predictions from the last layer in the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_auxiliary_predictions** (Tuple of Dict of `str, torch.FloatTensor`,
    *optional*) — Tuple of class and mask predictions from each layer of the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_queries** (`torch.FloatTensor`, *optional* of shape `(batch_size, num_queries,
    hidden_dim)`) — Text queries derived from the input text list used for calculating
    contrastive loss during training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**task_token** (`torch.FloatTensor` of shape `(batch_size, hidden_dim)`) —
    1D task token to condition the queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attentions** (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `tuple(torch.FloatTensor)` (one for each layer) of shape `(batch_size,
    num_heads, sequence_length, sequence_length)`. Self and Cross Attentions weights
    from transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class for outputs of [OneFormerModel](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerModel).
    This class returns all the needed hidden states to compute the logits.
  prefs: []
  type: TYPE_NORMAL
- en: '### class transformers.models.oneformer.modeling_oneformer.OneFormerForUniversalSegmentationOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/modeling_oneformer.py#L853)'
  prefs: []
  type: TYPE_NORMAL
- en: '( loss: Optional = None class_queries_logits: FloatTensor = None masks_queries_logits:
    FloatTensor = None auxiliary_predictions: List = None encoder_hidden_states: Optional
    = None pixel_decoder_hidden_states: Optional = None transformer_decoder_hidden_states:
    Optional = None transformer_decoder_object_queries: FloatTensor = None transformer_decoder_contrastive_queries:
    Optional = None transformer_decoder_mask_predictions: FloatTensor = None transformer_decoder_class_predictions:
    FloatTensor = None transformer_decoder_auxiliary_predictions: Optional = None
    text_queries: Optional = None task_token: FloatTensor = None attentions: Optional
    = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**loss** (`torch.Tensor`, *optional*) — The computed loss, returned when labels
    are present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**class_queries_logits** (`torch.FloatTensor`) — A tensor of shape `(batch_size,
    num_queries, num_labels + 1)` representing the proposed classes for each query.
    Note the `+ 1` is needed because we incorporate the null class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**masks_queries_logits** (`torch.FloatTensor`) — A tensor of shape `(batch_size,
    num_queries, height, width)` representing the proposed masks for each query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**auxiliary_predictions** (List of Dict of `str, torch.FloatTensor`, *optional*)
    — List of class and mask predictions from each layer of the transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the encoder model at the output of
    each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixel_decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the pixel decoder model at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*,
    returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states (also called feature maps) of the transformer decoder at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_object_queries** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, hidden_dim)`) — Output object queries from the last layer in the
    transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_contrastive_queries** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, hidden_dim)`) — Contrastive queries from the transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_mask_predictions** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, height, width)`) — Mask Predictions from the last layer in the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_class_predictions** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, num_classes+1)`) — Class Predictions from the last layer in the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_auxiliary_predictions** (List of Dict of `str, torch.FloatTensor`,
    *optional*) — List of class and mask predictions from each layer of the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_queries** (`torch.FloatTensor`, *optional* of shape `(batch_size, num_queries,
    hidden_dim)`) — Text queries derived from the input text list used for calculating
    contrastive loss during training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**task_token** (`torch.FloatTensor` of shape `(batch_size, hidden_dim)`) —
    1D task token to condition the queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attentions** (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `tuple(torch.FloatTensor)` (one for each layer) of shape `(batch_size,
    num_heads, sequence_length, sequence_length)`. Self and Cross Attentions weights
    from transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class for outputs of `OneFormerForUniversalSegmentationOutput`.
  prefs: []
  type: TYPE_NORMAL
- en: This output can be directly passed to [post_process_semantic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor.post_process_semantic_segmentation)
    or [post_process_instance_segmentation()](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor.post_process_instance_segmentation)
    or [post_process_panoptic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor.post_process_panoptic_segmentation)
    depending on the task. Please, see [`~OneFormerImageProcessor] for details regarding
    usage.
  prefs: []
  type: TYPE_NORMAL
- en: OneFormerConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.OneFormerConfig'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/configuration_oneformer.py#L33)'
  prefs: []
  type: TYPE_NORMAL
- en: '( backbone_config: Optional = None ignore_value: int = 255 num_queries: int
    = 150 no_object_weight: int = 0.1 class_weight: float = 2.0 mask_weight: float
    = 5.0 dice_weight: float = 5.0 contrastive_weight: float = 0.5 contrastive_temperature:
    float = 0.07 train_num_points: int = 12544 oversample_ratio: float = 3.0 importance_sample_ratio:
    float = 0.75 init_std: float = 0.02 init_xavier_std: float = 1.0 layer_norm_eps:
    float = 1e-05 is_training: bool = False use_auxiliary_loss: bool = True output_auxiliary_logits:
    bool = True strides: Optional = [4, 8, 16, 32] task_seq_len: int = 77 text_encoder_width:
    int = 256 text_encoder_context_length: int = 77 text_encoder_num_layers: int =
    6 text_encoder_vocab_size: int = 49408 text_encoder_proj_layers: int = 2 text_encoder_n_ctx:
    int = 16 conv_dim: int = 256 mask_dim: int = 256 hidden_dim: int = 256 encoder_feedforward_dim:
    int = 1024 norm: str = ''GN'' encoder_layers: int = 6 decoder_layers: int = 10
    use_task_norm: bool = True num_attention_heads: int = 8 dropout: float = 0.1 dim_feedforward:
    int = 2048 pre_norm: bool = False enforce_input_proj: bool = False query_dec_layers:
    int = 2 common_stride: int = 4 **kwargs )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**backbone_config** (`PretrainedConfig`, *optional*, defaults to `SwinConfig`)
    — The configuration of the backbone model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ignore_value** (`int`, *optional*, defaults to 255) — Values to be ignored
    in GT label while calculating loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_queries** (`int`, *optional*, defaults to 150) — Number of object queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**no_object_weight** (`float`, *optional*, defaults to 0.1) — Weight for no-object
    class predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**class_weight** (`float`, *optional*, defaults to 2.0) — Weight for Classification
    CE loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask_weight** (`float`, *optional*, defaults to 5.0) — Weight for binary
    CE loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dice_weight** (`float`, *optional*, defaults to 5.0) — Weight for dice loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**contrastive_weight** (`float`, *optional*, defaults to 0.5) — Weight for
    contrastive loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**contrastive_temperature** (`float`, *optional*, defaults to 0.07) — Initial
    value for scaling the contrastive logits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**train_num_points** (`int`, *optional*, defaults to 12544) — Number of points
    to sample while calculating losses on mask predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oversample_ratio** (`float`, *optional*, defaults to 3.0) — Ratio to decide
    how many points to oversample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**importance_sample_ratio** (`float`, *optional*, defaults to 0.75) — Ratio
    of points that are sampled via importance sampling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**init_std** (`float`, *optional*, defaults to 0.02) — Standard deviation for
    normal intialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**init_xavier_std** (`float`, *optional*, defaults to 1.0) — Standard deviation
    for xavier uniform initialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**layer_norm_eps** (`float`, *optional*, defaults to 1e-05) — Epsilon for layer
    normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**is_training** (`bool`, *optional*, defaults to `False`) — Whether to run
    in training or inference mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**use_auxiliary_loss** (`bool`, *optional*, defaults to `True`) — Whether to
    calculate loss using intermediate predictions from transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_auxiliary_logits** (`bool`, *optional*, defaults to `True`) — Whether
    to return intermediate predictions from transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**strides** (`list`, *optional*, defaults to `[4, 8, 16, 32]`) — List containing
    the strides for feature maps in the encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**task_seq_len** (`int`, *optional*, defaults to 77) — Sequence length for
    tokenizing text list input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_encoder_width** (`int`, *optional*, defaults to 256) — Hidden size for
    text encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_encoder_context_length** (`int`, *optional*, defaults to 77) — Input
    sequence length for text encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_encoder_num_layers** (`int`, *optional*, defaults to 6) — Number of
    layers for transformer in text encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_encoder_vocab_size** (`int`, *optional*, defaults to 49408) — Vocabulary
    size for tokenizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_encoder_proj_layers** (`int`, *optional*, defaults to 2) — Number of
    layers in MLP for project text queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_encoder_n_ctx** (`int`, *optional*, defaults to 16) — Number of learnable
    text context queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**conv_dim** (`int`, *optional*, defaults to 256) — Feature map dimension to
    map outputs from the backbone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask_dim** (`int`, *optional*, defaults to 256) — Dimension for feature maps
    in pixel decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hidden_dim** (`int`, *optional*, defaults to 256) — Dimension for hidden
    states in transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoder_feedforward_dim** (`int`, *optional*, defaults to 1024) — Dimension
    for FFN layer in pixel decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**norm** (`str`, *optional*, defaults to `"GN"`) — Type of normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoder_layers** (`int`, *optional*, defaults to 6) — Number of layers in
    pixel decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decoder_layers** (`int`, *optional*, defaults to 10) — Number of layers in
    transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**use_task_norm** (`bool`, *optional*, defaults to `True`) — Whether to normalize
    the task token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_attention_heads** (`int`, *optional*, defaults to 8) — Number of attention
    heads in transformer layers in the pixel and transformer decoders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dropout** (`float`, *optional*, defaults to 0.1) — Dropout probability for
    pixel and transformer decoders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dim_feedforward** (`int`, *optional*, defaults to 2048) — Dimension for FFN
    layer in transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pre_norm** (`bool`, *optional*, defaults to `False`) — Whether to normalize
    hidden states before attention layers in transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**enforce_input_proj** (`bool`, *optional*, defaults to `False`) — Whether
    to project hidden states in transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**query_dec_layers** (`int`, *optional*, defaults to 2) — Number of layers
    in query transformer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**common_stride** (`int`, *optional*, defaults to 4) — Common stride used for
    features in pixel decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a [OneFormerModel](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerModel).
    It is used to instantiate a OneFormer model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the OneFormer [shi-labs/oneformer_ade20k_swin_tiny](https://huggingface.co/shi-labs/oneformer_ade20k_swin_tiny)
    architecture trained on [ADE20k-150](https://huggingface.co/datasets/scene_parse_150).
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: OneFormerImageProcessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.OneFormerImageProcessor'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/image_processing_oneformer.py#L368)'
  prefs: []
  type: TYPE_NORMAL
- en: '( do_resize: bool = True size: Dict = None resample: Resampling = <Resampling.BILINEAR:
    2> do_rescale: bool = True rescale_factor: float = 0.00392156862745098 do_normalize:
    bool = True image_mean: Union = None image_std: Union = None ignore_index: Optional
    = None do_reduce_labels: bool = False repo_path: Optional = ''shi-labs/oneformer_demo''
    class_info_file: str = None num_text: Optional = None **kwargs )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**do_resize** (`bool`, *optional*, defaults to `True`) — Whether to resize
    the input to a certain `size`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size** (`int`, *optional*, defaults to 800) — Resize the input to the given
    size. Only has an effect if `do_resize` is set to `True`. If size is a sequence
    like `(width, height)`, output size will be matched to this. If size is an int,
    smaller edge of the image will be matched to this number. i.e, if `height > width`,
    then image will be rescaled to `(size * height / width, size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**resample** (`int`, *optional*, defaults to `Resampling.BILINEAR`) — An optional
    resampling filter. This can be one of `PIL.Image.Resampling.NEAREST`, `PIL.Image.Resampling.BOX`,
    `PIL.Image.Resampling.BILINEAR`, `PIL.Image.Resampling.HAMMING`, `PIL.Image.Resampling.BICUBIC`
    or `PIL.Image.Resampling.LANCZOS`. Only has an effect if `do_resize` is set to
    `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_rescale** (`bool`, *optional*, defaults to `True`) — Whether to rescale
    the input to a certain `scale`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rescale_factor** (`float`, *optional*, defaults to `1/ 255`) — Rescale the
    input by the given factor. Only has an effect if `do_rescale` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_normalize** (`bool`, *optional*, defaults to `True`) — Whether or not
    to normalize the input with mean and standard deviation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_mean** (`int`, *optional*, defaults to `[0.485, 0.456, 0.406]`) — The
    sequence of means for each channel, to be used when normalizing images. Defaults
    to the ImageNet mean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_std** (`int`, *optional*, defaults to `[0.229, 0.224, 0.225]`) — The
    sequence of standard deviations for each channel, to be used when normalizing
    images. Defaults to the ImageNet std.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ignore_index** (`int`, *optional*) — Label to be assigned to background pixels
    in segmentation maps. If provided, segmentation map pixels denoted with 0 (background)
    will be replaced with `ignore_index`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_reduce_labels** (`bool`, *optional*, defaults to `False`) — Whether or
    not to decrement all label values of segmentation maps by 1\. Usually used for
    datasets where 0 is used for background, and background itself is not included
    in all classes of a dataset (e.g. ADE20k). The background label will be replaced
    by `ignore_index`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**repo_path** (`str`, *optional*, defaults to `"shi-labs/oneformer_demo"`)
    — Path to hub repo or local directory containing the JSON file with class information
    for the dataset. If unset, will look for `class_info_file` in the current working
    directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**class_info_file** (`str`, *optional*) — JSON file containing class information
    for the dataset. See `shi-labs/oneformer_demo/cityscapes_panoptic.json` for an
    example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_text** (`int`, *optional*) — Number of text entries in the text input
    list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructs a OneFormer image processor. The image processor can be used to prepare
    image(s), task input(s) and optional text inputs and targets for the model.
  prefs: []
  type: TYPE_NORMAL
- en: This image processor inherits from `BaseImageProcessor` which contains most
    of the main methods. Users should refer to this superclass for more information
    regarding those methods.
  prefs: []
  type: TYPE_NORMAL
- en: '#### preprocess'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/image_processing_oneformer.py#L656)'
  prefs: []
  type: TYPE_NORMAL
- en: '( images: Union task_inputs: Optional = None segmentation_maps: Union = None
    instance_id_to_semantic_id: Optional = None do_resize: Optional = None size: Optional
    = None resample: Resampling = None do_rescale: Optional = None rescale_factor:
    Optional = None do_normalize: Optional = None image_mean: Union = None image_std:
    Union = None ignore_index: Optional = None do_reduce_labels: Optional = None return_tensors:
    Union = None data_format: Union = <ChannelDimension.FIRST: ''channels_first''>
    input_data_format: Union = None **kwargs )'
  prefs: []
  type: TYPE_NORMAL
- en: '#### encode_inputs'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/image_processing_oneformer.py#L954)'
  prefs: []
  type: TYPE_NORMAL
- en: '( pixel_values_list: List task_inputs: List segmentation_maps: Union = None
    instance_id_to_semantic_id: Union = None ignore_index: Optional = None reduce_labels:
    bool = False return_tensors: Union = None input_data_format: Union = None ) →
    [BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**pixel_values_list** (`List[ImageInput]`) — List of images (pixel values)
    to be padded. Each image should be a tensor of shape `(channels, height, width)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**task_inputs** (`List[str]`) — List of task values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**segmentation_maps** (`ImageInput`, *optional*) — The corresponding semantic
    segmentation maps with the pixel-wise annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '(`bool`, *optional*, defaults to `True`): Whether or not to pad images up to
    the largest image in a batch and create a pixel mask.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If left to the default, will return a pixel mask that is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 1 for pixels that are real (i.e. **not masked**),
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for pixels that are padding (i.e. **masked**).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**instance_id_to_semantic_id** (`List[Dict[int, int]]` or `Dict[int, int]`,
    *optional*) — A mapping between object instance ids and class ids. If passed,
    `segmentation_maps` is treated as an instance segmentation map where each pixel
    represents an instance id. Can be provided as a single dictionary with a global/dataset-level
    mapping or as a list of dictionaries (one per image), to map instance ids in each
    image separately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_tensors** (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) — If set, will return tensors instead of NumPy arrays. If set to `''pt''`,
    return PyTorch `torch.Tensor` objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_data_format** (`str` or `ChannelDimension`, *optional*) — The channel
    dimension format of the input image. If not provided, it will be inferred from
    the input image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A [BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)
    with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pixel_values** — Pixel values to be fed to a model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixel_mask** — Pixel mask to be fed to a model (when `=True` or if `pixel_mask`
    is in `self.model_input_names`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask_labels** — Optional list of mask labels of shape `(labels, height, width)`
    to be fed to a model (when `annotations` are provided).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**class_labels** — Optional list of class labels of shape `(labels)` to be
    fed to a model (when `annotations` are provided). They identify the labels of
    `mask_labels`, e.g. the label of `mask_labels[i][j]` if `class_labels[i][j]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_inputs** — Optional list of text string entries to be fed to a model
    (when `annotations` are provided). They identify the binary masks present in the
    image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pad images up to the largest image in a batch and create a corresponding `pixel_mask`.
  prefs: []
  type: TYPE_NORMAL
- en: OneFormer addresses semantic segmentation with a mask classification paradigm,
    thus input segmentation maps will be converted to lists of binary masks and their
    respective labels. Let’s see an example, assuming `segmentation_maps = [[2,6,7,9]]`,
    the output will contain `mask_labels = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]`
    (four binary masks) and `class_labels = [2,6,7,9]`, the labels for each mask.
  prefs: []
  type: TYPE_NORMAL
- en: '#### post_process_semantic_segmentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/image_processing_oneformer.py#L1089)'
  prefs: []
  type: TYPE_NORMAL
- en: '( outputs target_sizes: Optional = None ) → `List[torch.Tensor]`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**outputs** ([MaskFormerForInstanceSegmentation](/docs/transformers/v4.37.2/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation))
    — Raw outputs of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target_sizes** (`List[Tuple[int, int]]`, *optional*) — List of length (batch_size),
    where each list item (`Tuple[int, int]]`) corresponds to the requested final size
    (height, width) of each prediction. If left to None, predictions will not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[torch.Tensor]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of length `batch_size`, where each item is a semantic segmentation map
    of shape (height, width) corresponding to the target_sizes entry (if `target_sizes`
    is specified). Each entry of each `torch.Tensor` correspond to a semantic class
    id.
  prefs: []
  type: TYPE_NORMAL
- en: Converts the output of [MaskFormerForInstanceSegmentation](/docs/transformers/v4.37.2/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation)
    into semantic segmentation maps. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: '#### post_process_instance_segmentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/image_processing_oneformer.py#L1139)'
  prefs: []
  type: TYPE_NORMAL
- en: '( outputs task_type: str = ''instance'' is_demo: bool = True threshold: float
    = 0.5 mask_threshold: float = 0.5 overlap_mask_area_threshold: float = 0.8 target_sizes:
    Optional = None return_coco_annotation: Optional = False ) → `List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**outputs** (`OneFormerForUniversalSegmentationOutput`) — The outputs from
    `OneFormerForUniversalSegmentationOutput`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**task_type** (`str`, *optional)*, defaults to “instance”) — The post processing
    depends on the task token input. If the `task_type` is “panoptic”, we need to
    ignore the stuff predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**is_demo** (`bool`, *optional)*, defaults to `True`) — Whether the model is
    in demo mode. If true, use threshold to predict final masks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**threshold** (`float`, *optional*, defaults to 0.5) — The probability score
    threshold to keep predicted instance masks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask_threshold** (`float`, *optional*, defaults to 0.5) — Threshold to use
    when turning the predicted masks into binary values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlap_mask_area_threshold** (`float`, *optional*, defaults to 0.8) — The
    overlap mask area threshold to merge or discard small disconnected parts within
    each binary instance mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target_sizes** (`List[Tuple]`, *optional*) — List of length (batch_size),
    where each list item (`Tuple[int, int]]`) corresponds to the requested final size
    (height, width) of each prediction in batch. If left to None, predictions will
    not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_coco_annotation** (`bool`, *optional)*, defaults to `False`) — Whether
    to return predictions in COCO format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of dictionaries, one per image, each dictionary containing two keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '**segmentation** — a tensor of shape `(height, width)` where each pixel represents
    a `segment_id`, set to `None` if no mask if found above `threshold`. If `target_sizes`
    is specified, segmentation is resized to the corresponding `target_sizes` entry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**segments_info** — A dictionary that contains additional information on each
    segment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**id** — an integer representing the `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**label_id** — An integer representing the label / semantic class id corresponding
    to `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**was_fused** — a boolean, `True` if `label_id` was in `label_ids_to_fuse`,
    `False` otherwise. Multiple instances of the same class / label were fused and
    assigned a single `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**score** — Prediction score of segment with `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Converts the output of `OneFormerForUniversalSegmentationOutput` into image
    instance segmentation predictions. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: '#### post_process_panoptic_segmentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/image_processing_oneformer.py#L1259)'
  prefs: []
  type: TYPE_NORMAL
- en: '( outputs threshold: float = 0.5 mask_threshold: float = 0.5 overlap_mask_area_threshold:
    float = 0.8 label_ids_to_fuse: Optional = None target_sizes: Optional = None )
    → `List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**outputs** (`MaskFormerForInstanceSegmentationOutput`) — The outputs from
    [MaskFormerForInstanceSegmentation](/docs/transformers/v4.37.2/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**threshold** (`float`, *optional*, defaults to 0.5) — The probability score
    threshold to keep predicted instance masks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask_threshold** (`float`, *optional*, defaults to 0.5) — Threshold to use
    when turning the predicted masks into binary values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overlap_mask_area_threshold** (`float`, *optional*, defaults to 0.8) — The
    overlap mask area threshold to merge or discard small disconnected parts within
    each binary instance mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**label_ids_to_fuse** (`Set[int]`, *optional*) — The labels in this state will
    have all their instances be fused together. For instance we could say there can
    only be one sky in an image, but several persons, so the label ID for sky would
    be in that set, but not the one for person.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target_sizes** (`List[Tuple]`, *optional*) — List of length (batch_size),
    where each list item (`Tuple[int, int]]`) corresponds to the requested final size
    (height, width) of each prediction in batch. If left to None, predictions will
    not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of dictionaries, one per image, each dictionary containing two keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '**segmentation** — a tensor of shape `(height, width)` where each pixel represents
    a `segment_id`, set to `None` if no mask if found above `threshold`. If `target_sizes`
    is specified, segmentation is resized to the corresponding `target_sizes` entry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**segments_info** — A dictionary that contains additional information on each
    segment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**id** — an integer representing the `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**label_id** — An integer representing the label / semantic class id corresponding
    to `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**was_fused** — a boolean, `True` if `label_id` was in `label_ids_to_fuse`,
    `False` otherwise. Multiple instances of the same class / label were fused and
    assigned a single `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**score** — Prediction score of segment with `segment_id`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Converts the output of `MaskFormerForInstanceSegmentationOutput` into image
    panoptic segmentation predictions. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: OneFormerProcessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.OneFormerProcessor'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/processing_oneformer.py#L29)'
  prefs: []
  type: TYPE_NORMAL
- en: '( image_processor = None tokenizer = None max_seq_length: int = 77 task_seq_length:
    int = 77 **kwargs )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**image_processor** ([OneFormerImageProcessor](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor))
    — The image processor is a required input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tokenizer** ([`CLIPTokenizer`, `CLIPTokenizerFast`]) — The tokenizer is a
    required input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_seq_len** (`int`, *optional*, defaults to 77)) — Sequence length for
    input text list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**task_seq_len** (`int`, *optional*, defaults to 77) — Sequence length for
    input task token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructs an OneFormer processor which wraps [OneFormerImageProcessor](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor)
    and [CLIPTokenizer](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizer)/[CLIPTokenizerFast](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizerFast)
    into a single processor that inherits both the image processor and tokenizer functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: '#### encode_inputs'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/processing_oneformer.py#L146)'
  prefs: []
  type: TYPE_NORMAL
- en: ( images = None task_inputs = None segmentation_maps = None **kwargs )
  prefs: []
  type: TYPE_NORMAL
- en: This method forwards all its arguments to [OneFormerImageProcessor.encode_inputs()](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor.encode_inputs)
    and then tokenizes the task_inputs. Please refer to the docstring of this method
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '#### post_process_instance_segmentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/processing_oneformer.py#L193)'
  prefs: []
  type: TYPE_NORMAL
- en: ( *args **kwargs )
  prefs: []
  type: TYPE_NORMAL
- en: This method forwards all its arguments to [OneFormerImageProcessor.post_process_instance_segmentation()](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor.post_process_instance_segmentation).
    Please refer to the docstring of this method for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '#### post_process_panoptic_segmentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/processing_oneformer.py#L200)'
  prefs: []
  type: TYPE_NORMAL
- en: ( *args **kwargs )
  prefs: []
  type: TYPE_NORMAL
- en: This method forwards all its arguments to [OneFormerImageProcessor.post_process_panoptic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor.post_process_panoptic_segmentation).
    Please refer to the docstring of this method for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '#### post_process_semantic_segmentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/processing_oneformer.py#L186)'
  prefs: []
  type: TYPE_NORMAL
- en: ( *args **kwargs )
  prefs: []
  type: TYPE_NORMAL
- en: This method forwards all its arguments to [OneFormerImageProcessor.post_process_semantic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerImageProcessor.post_process_semantic_segmentation).
    Please refer to the docstring of this method for more information.
  prefs: []
  type: TYPE_NORMAL
- en: OneFormerModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.OneFormerModel'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/modeling_oneformer.py#L2898)'
  prefs: []
  type: TYPE_NORMAL
- en: '( config: OneFormerConfig )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**config** ([OneFormerConfig](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bare OneFormer Model outputting raw hidden-states without any specific head
    on top. This model is a PyTorch [nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    sub-class. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/modeling_oneformer.py#L2919)'
  prefs: []
  type: TYPE_NORMAL
- en: '( pixel_values: Tensor task_inputs: Tensor text_inputs: Optional = None pixel_mask:
    Optional = None output_hidden_states: Optional = None output_attentions: Optional
    = None return_dict: Optional = None ) → [transformers.models.oneformer.modeling_oneformer.OneFormerModelOutput](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.models.oneformer.modeling_oneformer.OneFormerModelOutput)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**pixel_values** (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel values. Pixel values can be obtained using [OneFormerProcessor](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerProcessor).
    See `OneFormerProcessor.__call__()` for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**task_inputs** (`torch.FloatTensor` of shape `(batch_size, sequence_length)`)
    — Task inputs. Task inputs can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See `OneFormerProcessor.__call__()` for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixel_mask** (`torch.LongTensor` of shape `(batch_size, height, width)`,
    *optional*) — Mask to avoid performing attention on padding pixel values. Mask
    values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for pixels that are real (i.e. **not masked**),
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for pixels that are padding (i.e. **masked**).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**output_hidden_states** (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_attentions** (`bool`, *optional*) — Whether or not to return the attentions
    tensors of Detr’s decoder attention layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*) — Whether or not to return a `~OneFormerModelOutput`
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.models.oneformer.modeling_oneformer.OneFormerModelOutput](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.models.oneformer.modeling_oneformer.OneFormerModelOutput)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.models.oneformer.modeling_oneformer.OneFormerModelOutput](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.models.oneformer.modeling_oneformer.OneFormerModelOutput)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([OneFormerConfig](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**encoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the encoder model at the output of
    each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixel_decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the pixel decoder model at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*,
    returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states (also called feature maps) of the transformer decoder at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_object_queries** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, hidden_dim)`) Output object queries from the last layer in the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_contrastive_queries** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, hidden_dim)`) Contrastive queries from the transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_mask_predictions** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, height, width)`) Mask Predictions from the last layer in the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_class_predictions** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, num_classes+1)`) — Class Predictions from the last layer in the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_auxiliary_predictions** (Tuple of Dict of `str, torch.FloatTensor`,
    *optional*) — Tuple of class and mask predictions from each layer of the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_queries** (`torch.FloatTensor`, *optional* of shape `(batch_size, num_queries,
    hidden_dim)`) Text queries derived from the input text list used for calculating
    contrastive loss during training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**task_token** (`torch.FloatTensor` of shape `(batch_size, hidden_dim)`) 1D
    task token to condition the queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attentions** (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `tuple(torch.FloatTensor)` (one for each layer) of shape `(batch_size,
    num_heads, sequence_length, sequence_length)`. Self and Cross Attentions weights
    from transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OneFormerModelOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: The [OneFormerModel](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerModel)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: OneFormerForUniversalSegmentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.OneFormerForUniversalSegmentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/modeling_oneformer.py#L3027)'
  prefs: []
  type: TYPE_NORMAL
- en: '( config: OneFormerConfig )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**config** ([OneFormerConfig](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OneFormer Model for instance, semantic and panoptic image segmentation. This
    model is a PyTorch [nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    sub-class. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/oneformer/modeling_oneformer.py#L3098)'
  prefs: []
  type: TYPE_NORMAL
- en: '( pixel_values: Tensor task_inputs: Tensor text_inputs: Optional = None mask_labels:
    Optional = None class_labels: Optional = None pixel_mask: Optional = None output_auxiliary_logits:
    Optional = None output_hidden_states: Optional = None output_attentions: Optional
    = None return_dict: Optional = None ) → [transformers.models.oneformer.modeling_oneformer.OneFormerForUniversalSegmentationOutput](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.models.oneformer.modeling_oneformer.OneFormerForUniversalSegmentationOutput)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**pixel_values** (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel values. Pixel values can be obtained using [OneFormerProcessor](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerProcessor).
    See `OneFormerProcessor.__call__()` for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**task_inputs** (`torch.FloatTensor` of shape `(batch_size, sequence_length)`)
    — Task inputs. Task inputs can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See `OneFormerProcessor.__call__()` for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixel_mask** (`torch.LongTensor` of shape `(batch_size, height, width)`,
    *optional*) — Mask to avoid performing attention on padding pixel values. Mask
    values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for pixels that are real (i.e. **not masked**),
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for pixels that are padding (i.e. **masked**).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**output_hidden_states** (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_attentions** (`bool`, *optional*) — Whether or not to return the attentions
    tensors of Detr’s decoder attention layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*) — Whether or not to return a `~OneFormerModelOutput`
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_inputs** (`List[torch.Tensor]`, *optional*) — Tensor fof shape `(num_queries,
    sequence_length)` to be fed to a model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask_labels** (`List[torch.Tensor]`, *optional*) — List of mask labels of
    shape `(num_labels, height, width)` to be fed to a model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**class_labels** (`List[torch.LongTensor]`, *optional*) — list of target class
    labels of shape `(num_labels, height, width)` to be fed to a model. They identify
    the labels of `mask_labels`, e.g. the label of `mask_labels[i][j]` if `class_labels[i][j]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.models.oneformer.modeling_oneformer.OneFormerForUniversalSegmentationOutput](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.models.oneformer.modeling_oneformer.OneFormerForUniversalSegmentationOutput)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.models.oneformer.modeling_oneformer.OneFormerForUniversalSegmentationOutput](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.models.oneformer.modeling_oneformer.OneFormerForUniversalSegmentationOutput)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([OneFormerConfig](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**loss** (`torch.Tensor`, *optional*) — The computed loss, returned when labels
    are present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**class_queries_logits** (`torch.FloatTensor`) — A tensor of shape `(batch_size,
    num_queries, num_labels + 1)` representing the proposed classes for each query.
    Note the `+ 1` is needed because we incorporate the null class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**masks_queries_logits** (`torch.FloatTensor`) — A tensor of shape `(batch_size,
    num_queries, height, width)` representing the proposed masks for each query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**auxiliary_predictions** (List of Dict of `str, torch.FloatTensor`, *optional*)
    — List of class and mask predictions from each layer of the transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the encoder model at the output of
    each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pixel_decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned
    when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, num_channels, height, width)`.
    Hidden-states (also called feature maps) of the pixel decoder model at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_hidden_states** (`tuple(torch.FloatTensor)`, *optional*,
    returned when `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each stage) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states (also called feature maps) of the transformer decoder at the output
    of each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_object_queries** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, hidden_dim)`) Output object queries from the last layer in the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_contrastive_queries** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, hidden_dim)`) Contrastive queries from the transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_mask_predictions** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, height, width)`) Mask Predictions from the last layer in the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_class_predictions** (`torch.FloatTensor` of shape `(batch_size,
    num_queries, num_classes+1)`) — Class Predictions from the last layer in the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_decoder_auxiliary_predictions** (List of Dict of `str, torch.FloatTensor`,
    *optional*) — List of class and mask predictions from each layer of the transformer
    decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text_queries** (`torch.FloatTensor`, *optional* of shape `(batch_size, num_queries,
    hidden_dim)`) Text queries derived from the input text list used for calculating
    contrastive loss during training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**task_token** (`torch.FloatTensor` of shape `(batch_size, hidden_dim)`) 1D
    task token to condition the queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attentions** (`tuple(tuple(torch.FloatTensor))`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `tuple(torch.FloatTensor)` (one for each layer) of shape `(batch_size,
    num_heads, sequence_length, sequence_length)`. Self and Cross Attentions weights
    from transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OneFormerUniversalSegmentationOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: The [OneFormerForUniversalSegmentation](/docs/transformers/v4.37.2/en/model_doc/oneformer#transformers.OneFormerForUniversalSegmentation)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Universal segmentation example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
