- en: IntelÂ® Extension for PyTorch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/accelerate/usage_guides/ipex](https://huggingface.co/docs/accelerate/usage_guides/ipex)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: '[IPEX](https://github.com/intel/intel-extension-for-pytorch) is optimized for
    CPUs with AVX-512 or above, and functionally works for CPUs with only AVX2\. So,
    it is expected to bring performance benefit for Intel CPU generations with AVX-512
    or above while CPUs with only AVX2 (e.g., AMD CPUs or older Intel CPUs) might
    result in a better performance under IPEX, but not guaranteed. IPEX provides performance
    optimizations for CPU training with both Float32 and BFloat16\. The usage of BFloat16
    is the main focus of the following sections.'
  prefs: []
  type: TYPE_NORMAL
- en: Low precision data type BFloat16 has been natively supported on the 3rd Generation
    XeonÂ® Scalable Processors (aka Cooper Lake) with AVX512 instruction set and will
    be supported on the next generation of IntelÂ® XeonÂ® Scalable Processors with IntelÂ®
    Advanced Matrix Extensions (IntelÂ® AMX) instruction set with further boosted performance.
    The Auto Mixed Precision for CPU backend has been enabled since PyTorch-1.10\.
    At the same time, the support of Auto Mixed Precision with BFloat16 for CPU and
    BFloat16 optimization of operators has been massively enabled in IntelÂ® Extension
    for PyTorch, and partially upstreamed to PyTorch master branch. Users can get
    better performance and user experience with IPEX Auto Mixed Precision.
  prefs: []
  type: TYPE_NORMAL
- en: 'IPEX installation:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'IPEX release is following PyTorch, to install via pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '| PyTorch Version | IPEX version |'
  prefs: []
  type: TYPE_TB
- en: '| :-: | :-: |'
  prefs: []
  type: TYPE_TB
- en: '| 2.0 | 2.0.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 1.13 | 1.13.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 1.12 | 1.12.300 |'
  prefs: []
  type: TYPE_TB
- en: '| 1.11 | 1.11.200 |'
  prefs: []
  type: TYPE_TB
- en: '| 1.10 | 1.10.100 |'
  prefs: []
  type: TYPE_TB
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Check more approaches for [IPEX installation](https://intel.github.io/intel-extension-for-pytorch/cpu/latest/tutorials/installation.html).
  prefs: []
  type: TYPE_NORMAL
- en: How It Works For Training optimization in CPU
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ðŸ¤— Accelerate has integrated [IPEX](https://github.com/intel/intel-extension-for-pytorch),
    all you need to do is enabling it through the config.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario 1**: Acceleration of No distributed CPU training'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run accelerate config on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will generate a config file that will be used automatically to properly
    set the default options when doing
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For instance, here is how you would run the NLP example `examples/nlp_example.py`
    (from the root of the repo) with IPEX enabled. default_config.yaml that is generated
    after `accelerate config`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Scenario 2**: Acceleration of distributed CPU training we use Intel oneCCL
    for communication, combined with IntelÂ® MPI library to deliver flexible, efficient,
    scalable cluster messaging on IntelÂ® architecture. you could refer the [here](https://huggingface.co/docs/transformers/perf_train_cpu_many)
    for the installation guide'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run accelerate config on your machine(node0):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For instance, here is how you would run the NLP example `examples/nlp_example.py`
    (from the root of the repo) with IPEX enabled for distributed CPU training.
  prefs: []
  type: TYPE_NORMAL
- en: default_config.yaml that is generated after `accelerate config`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Set following env and using intel MPI to launch the training
  prefs: []
  type: TYPE_NORMAL
- en: In node0, you need to create a configuration file which contains the IP addresses
    of each node (for example hostfile) and pass that configuration file path as an
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following command in node0 and **16DDP** will be enabled in node0,node1,node2,node3
    with BF16 mixed precision:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Related Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Projectâ€™s github](https://github.com/intel/intel-extension-for-pytorch)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[API docs](https://intel.github.io/intel-extension-for-pytorch/cpu/latest/tutorials/api_doc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tuning guide](https://intel.github.io/intel-extension-for-pytorch/cpu/latest/tutorials/performance_tuning/tuning_guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Blogs & Publications](https://intel.github.io/intel-extension-for-pytorch/cpu/latest/tutorials/blogs_publications.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
