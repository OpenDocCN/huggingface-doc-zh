- en: TVLT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TVLT
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/tvlt](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/tvlt)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/tvlt](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/tvlt)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'The TVLT model was proposed in [TVLT: Textless Vision-Language Transformer](https://arxiv.org/abs/2209.14156)
    by Zineng Tang, Jaemin Cho, Yixin Nie, Mohit Bansal (the first three authors contributed
    equally). The Textless Vision-Language Transformer (TVLT) is a model that uses
    raw visual and audio inputs for vision-and-language representation learning, without
    using text-specific modules such as tokenization or automatic speech recognition
    (ASR). It can perform various audiovisual and vision-language tasks like retrieval,
    question answering, etc.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TVLT模型是由Zineng Tang、Jaemin Cho、Yixin Nie、Mohit Bansal提出的，首三位作者贡献相同。无文本视觉语言变换器（TVLT）是一个使用原始视觉和音频输入进行视觉和语言表示学习的模型，而不使用文本特定模块，如标记化或自动语音识别（ASR）。它可以执行各种音频视觉和视觉语言任务，如检索、问答等。
- en: 'The abstract from the paper is the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 论文摘要如下：
- en: '*In this work, we present the Textless Vision-Language Transformer (TVLT),
    where homogeneous transformer blocks take raw visual and audio inputs for vision-and-language
    representation learning with minimal modality-specific design, and do not use
    text-specific modules such as tokenization or automatic speech recognition (ASR).
    TVLT is trained by reconstructing masked patches of continuous video frames and
    audio spectrograms (masked autoencoding) and contrastive modeling to align video
    and audio. TVLT attains performance comparable to its text-based counterpart on
    various multimodal tasks, such as visual question answering, image retrieval,
    video retrieval, and multimodal sentiment analysis, with 28x faster inference
    speed and only 1/3 of the parameters. Our findings suggest the possibility of
    learning compact and efficient visual-linguistic representations from low-level
    visual and audio signals without assuming the prior existence of text.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*在这项工作中，我们提出了无文本视觉语言变换器（TVLT），其中同质变换器块接受原始视觉和音频输入进行视觉和语言表示学习，具有最小的模态特定设计，并且不使用文本特定模块，如标记化或自动语音识别（ASR）。
    TVLT通过重建连续视频帧和音频频谱图的掩码块（掩码自编码）和对比建模来训练，并对齐视频和音频。 TVLT在各种多模态任务上取得了与基于文本的对应物相当的性能，如视觉问答、图像检索、视频检索和多模态情感分析，推理速度快28倍，参数仅为原来的1/3。我们的研究结果表明，在不假定文本事先存在的情况下，可以从低级视觉和音频信号中学习紧凑高效的视觉-语言表示的可能性。*'
- en: '![drawing](../Images/92ae6f0b7d6dba10fca15ab2ef309bb0.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![drawing](../Images/92ae6f0b7d6dba10fca15ab2ef309bb0.png)'
- en: TVLT architecture. Taken from the [original paper]([https://arxiv.org/abs/2102.03334](https://arxiv.org/abs/2209.14156)).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: TVLT架构。取自[原始论文]([https://arxiv.org/abs/2102.03334](https://arxiv.org/abs/2209.14156))。
- en: The original code can be found [here](https://github.com/zinengtang/TVLT). This
    model was contributed by [Zineng Tang](https://huggingface.co/ZinengTang).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 原始代码可以在[这里](https://github.com/zinengtang/TVLT)找到。该模型由[Zineng Tang](https://huggingface.co/ZinengTang)贡献。
- en: Usage tips
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用提示
- en: TVLT is a model that takes both `pixel_values` and `audio_values` as input.
    One can use [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)
    to prepare data for the model. This processor wraps an image processor (for the
    image/video modality) and an audio feature extractor (for the audio modality)
    into one.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TVLT是一个接受`pixel_values`和`audio_values`作为输入的模型。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)为模型准备数据。该处理器将图像处理器（用于图像/视频模态）和音频特征提取器（用于音频模态）封装在一起。
- en: 'TVLT is trained with images/videos and audios of various sizes: the authors
    resize and crop the input images/videos to 224 and limit the length of audio spectrogram
    to 2048\. To make batching of videos and audios possible, the authors use a `pixel_mask`
    that indicates which pixels are real/padding and `audio_mask` that indicates which
    audio values are real/padding.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TVLT是使用各种大小的图像/视频和音频进行训练的：作者将输入图像/视频调整大小并裁剪到224，并限制音频频谱图的长度为2048。为了使视频和音频的批处理成为可能，作者使用`pixel_mask`指示哪些像素是真实/填充的，以及`audio_mask`指示哪些音频值是真实/填充的。
- en: The design of TVLT is very similar to that of a standard Vision Transformer
    (ViT) and masked autoencoder (MAE) as in [ViTMAE](vitmae). The difference is that
    the model includes embedding layers for the audio modality.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TVLT的设计与标准视觉变换器（ViT）和掩码自编码器（MAE）非常相似，如[ViTMAE](vitmae)。不同之处在于该模型包括音频模态的嵌入层。
- en: The PyTorch version of this model is only available in torch 1.10 and higher.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此模型的PyTorch版本仅在torch 1.10及更高版本中可用。
- en: TvltConfig
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TvltConfig
- en: '### `class transformers.TvltConfig`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.TvltConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/configuration_tvlt.py#L28)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/configuration_tvlt.py#L28)'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`image_size` (`int`, *optional*, defaults to 224) — The size (resolution) of
    each image.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_size` (`int`, *optional*, 默认为224) — 每个图像的大小（分辨率）。'
- en: '`spectrogram_length` (`int`, *optional*, defaults to 2048) — The time length
    of each audio spectrogram.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spectrogram_length` (`int`, *optional*, 默认为2048) — 每个音频频谱图的时间长度。'
- en: '`frequency_length` (`int`, *optional*, defaults to 128) — The frequency length
    of audio spectrogram.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frequency_length` (`int`, *optional*, 默认为128) — 音频频谱图的频率长度。'
- en: '`image_patch_size` (`List[int]`, *optional*, defaults to `[16, 16]`) — The
    size (resolution) of each image patch.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_patch_size` (`List[int]`, *optional*, 默认为 `[16, 16]`) — 每个图像块的大小（分辨率）。'
- en: '`audio_patch_size` (`List[int]`, *optional*, defaults to `[16, 16]`) — The
    size (resolution) of each audio patch.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_patch_size` (`List[int]`, *optional*, 默认为 `[16, 16]`) — 每个音频块的大小（分辨率）。'
- en: '`num_image_channels` (`int`, *optional*, defaults to 3) — The number of input
    image channels.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_image_channels` (`int`, *optional*, 默认为3) — 输入图像通道数。'
- en: '`num_audio_channels` (`int`, *optional*, defaults to 1) — The number of input
    audio channels.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_audio_channels` (`int`, *optional*, 默认为1) — 输入音频通道数。'
- en: '`num_frames` (`int`, *optional*, defaults to 8) — The maximum number of frames
    for an input video.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_frames` (`int`，*可选*，默认为 8) — 输入视频的最大帧数。'
- en: '`hidden_size` (`int`, *optional*, defaults to 768) — Dimensionality of the
    encoder layers and the pooler layer.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_size` (`int`，*可选*，默认为 768) — 编码器层和池化器层的维度。'
- en: '`num_hidden_layers` (`int`, *optional*, defaults to 12) — Number of hidden
    layers in the Transformer encoder.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_hidden_layers` (`int`，*可选*，默认为 12) — Transformer 编码器中的隐藏层数。'
- en: '`num_attention_heads` (`int`, *optional*, defaults to 12) — Number of attention
    heads for each attention layer in the Transformer encoder.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_attention_heads` (`int`，*可选*，默认为 12) — Transformer 编码器中每个注意力层的注意力头数。'
- en: '`intermediate_size` (`int`, *optional*, defaults to 3072) — Dimensionality
    of the “intermediate” (i.e., feed-forward) layer in the Transformer encoder.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`intermediate_size` (`int`，*可选*，默认为 3072) — Transformer 编码器中“中间”（即前馈）层的维度。'
- en: '`hidden_act` (`str` or `function`, *optional*, defaults to `"gelu"`) — The
    non-linear activation function (function or string) in the encoder and pooler.
    If string, `"gelu"`, `"relu"`, `"selu"` and `"gelu_new"` are supported.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_act` (`str` 或 `function`，*可选*，默认为 `"gelu"`) — 编码器和池化器中的非线性激活函数（函数或字符串）。如果是字符串，支持
    `"gelu"`、`"relu"`、`"selu"` 和 `"gelu_new"`。'
- en: '`hidden_dropout_prob` (`float`, *optional*, defaults to 0.0) — The dropout
    probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_dropout_prob` (`float`，*可选*，默认为 0.0) — 嵌入层、编码器和池化器中所有全连接层的丢弃概率。'
- en: '`attention_probs_dropout_prob` (`float`, *optional*, defaults to 0.0) — The
    dropout ratio for the attention probabilities.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_probs_dropout_prob` (`float`，*可选*，默认为 0.0) — 注意力概率的丢弃比率。'
- en: '`initializer_range` (`float`, *optional*, defaults to 0.02) — The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_range` (`float`，*可选*，默认为 0.02) — 用于初始化所有权重矩阵的截断正态初始化器的标准差。'
- en: '`layer_norm_eps` (`float`, *optional*, defaults to 1e-06) — The epsilon used
    by the layer normalization layers.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layer_norm_eps` (`float`，*可选*，默认为 1e-06) — 层归一化层使用的 epsilon。'
- en: '`qkv_bias` (`bool`, *optional*, defaults to `True`) — Whether to add a bias
    to the queries, keys and values.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qkv_bias` (`bool`，*可选*，默认为 `True`) — 是否向查询、键和值添加偏置。'
- en: '`use_mean_pooling` (`bool`, *optional*, defaults to `False`) — Whether to mean
    pool the final hidden states instead of using the final hidden state of the [CLS]
    token.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_mean_pooling` (`bool`，*可选*，默认为 `False`) — 是否对最终隐藏状态进行平均池化，而不是使用 [CLS]
    标记的最终隐藏状态。'
- en: '`decoder_num_attention_heads` (`int`, *optional*, defaults to 16) — Number
    of attention heads for each attention layer in the decoder.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_num_attention_heads` (`int`，*可选*，默认为 16) — 解码器中每个注意力层的注意力头数。'
- en: '`decoder_hidden_size` (`int`, *optional*, defaults to 512) — Dimensionality
    of the decoder.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_hidden_size` (`int`，*可选*，默认为 512) — 解码器的维度。'
- en: '`decoder_num_hidden_layers` (`int`, *optional*, defaults to 8) — Number of
    hidden layers in the decoder.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_num_hidden_layers` (`int`，*可选*，默认为 8) — 解码器中的隐藏层数。'
- en: '`decoder_intermediate_size` (`int`, *optional*, defaults to 2048) — Dimensionality
    of the “intermediate” (i.e., feed-forward) layer in the decoder.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_intermediate_size` (`int`，*可选*，默认为 2048) — 解码器中“中间”（即前馈）层的维度。'
- en: '`pixel_mask_ratio` (`float`, *optional*, defaults to 0.75) — Image patch masking
    ratio.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask_ratio` (`float`，*可选*，默认为 0.75) — 图像补丁掩码比例。'
- en: '`audio_mask_ratio` (`float`, *optional*, defaults to 0.15) — Audio patch masking
    ratio.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_mask_ratio` (`float`，*可选*，默认为 0.15) — 音频补丁掩码比例。'
- en: '`audio_mask_type` (`str`, *optional*, defaults to `"frame-level"`) — Audio
    patch masking type, choose between “frame-level” and “patch-level”.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_mask_type` (`str`，*可选*，默认为 `"frame-level"`) — 音频补丁掩码类型，可选择“frame-level”和“patch-level”。'
- en: '`task_matching` (`bool`, *optional*, defaults to `True`) — Whether to use vision
    audio matching task in pretraining.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`task_matching` (`bool`，*可选*，默认为 `True`) — 是否在预训练中使用视觉音频匹配任务。'
- en: '`task_mae` (`bool`, *optional*, defaults to `True`) — Whether to use the masked
    auto-encoder (MAE) in pretraining.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`task_mae` (`bool`，*可选*，默认为 `True`) — 是否在预训练中使用掩码自编码器（MAE）。'
- en: '`loss_type` (`str`, *optional*, defaults to `"classification"`) — Loss types
    including regression and classification.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss_type` (`str`，*可选*，默认为 `"classification"`) — 包括回归和分类在内的损失类型。'
- en: This is the configuration class to store the configuration of a [TvltModel](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltModel).
    It is used to instantiate a TVLT model according to the specified arguments, defining
    the model architecture. Instantiating a configuration with the defaults will yield
    a similar configuration to that of the TVLT [ZinengTang/tvlt-base](https://huggingface.co/ZinengTang/tvlt-base)
    architecture.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个配置类，用于存储 [TvltModel](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltModel)
    的配置。根据指定的参数实例化一个 TVLT 模型，定义模型架构。使用默认值实例化配置将产生类似于 TVLT [ZinengTang/tvlt-base](https://huggingface.co/ZinengTang/tvlt-base)
    架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自 [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读来自
    [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    的文档以获取更多信息。
- en: 'Example:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: TvltProcessor
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TvltProcessor
- en: '### `class transformers.TvltProcessor`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.TvltProcessor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/processing_tvlt.py#L22)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/processing_tvlt.py#L22)'
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`image_processor` (`TvltImageProcessor`) — An instance of [TvltImageProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltImageProcessor).
    The image processor is a required input.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_processor` (`TvltImageProcessor`) — [TvltImageProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltImageProcessor)
    的一个实例。图像处理器是一个必需的输入。'
- en: '`feature_extractor` (`TvltFeatureExtractor`) — An instance of [TvltFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltFeatureExtractor).
    The feature extractor is a required input.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feature_extractor`（`TvltFeatureExtractor`）— [TvltFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltFeatureExtractor)的一个实例。特征提取器是一个必需的输入。'
- en: Constructs a TVLT processor which wraps a TVLT image processor and TVLT feature
    extractor into a single processor.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个TVLT处理器，将TVLT图像处理器和TVLT特征提取器包装成一个单一处理器。
- en: '[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)
    offers all the functionalities of [TvltImageProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltImageProcessor)
    and [TvltFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltFeatureExtractor).
    See the docstring of [**call**()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for more information.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)提供了[TvltImageProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltImageProcessor)和[TvltFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltFeatureExtractor)的所有功能。查看[**call**()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)的文档字符串以获取更多信息。'
- en: '#### `__call__`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `__call__`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/processing_tvlt.py#L46)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/processing_tvlt.py#L46)'
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Forwards the `images` argument to TvltImageProcessor’s [preprocess()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltImageProcessor.preprocess)
    and the `audio` argument to TvltFeatureExtractor’s [**call**()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltFeatureExtractor.__call__).
    Please refer to the docstring of the above two methods for more information.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 将`images`参数转发到TvltImageProcessor的[preprocess()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltImageProcessor.preprocess)，将`audio`参数转发到TvltFeatureExtractor的[**call**()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltFeatureExtractor.__call__)。更多信息请参考上述两个方法的文档字符串。
- en: TvltImageProcessor
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TvltImageProcessor
- en: '### `class transformers.TvltImageProcessor`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.TvltImageProcessor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/image_processing_tvlt.py#L67)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/image_processing_tvlt.py#L67)'
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) — Whether to resize the
    image’s (height, width) dimensions to the specified `size`. Can be overridden
    by the `do_resize` parameter in the `preprocess` method.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize`（`bool`，*可选*，默认为`True`）— 是否将图像的（高度，宽度）尺寸调整为指定的`size`。可以被`preprocess`方法中的`do_resize`参数覆盖。'
- en: '`size` (`Dict[str, int]` *optional*, defaults to `{"shortest_edge" -- 224}`):
    Size of the output image after resizing. The shortest edge of the image will be
    resized to `size["shortest_edge"]` while maintaining the aspect ratio of the original
    image. Can be overriden by `size` in the `preprocess` method.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`（`Dict[str, int]` *可选*，默认为`{"shortest_edge" -- 224}`）：调整大小后的输出图像大小。图像的最短边将被调整为`size["shortest_edge"]`，同时保持原始图像的纵横比。可以通过`preprocess`方法中的`size`进行覆盖。'
- en: '`patch_size` (`List[int]` *optional*, defaults to [16,16]) — The patch size
    of image patch embedding.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`patch_size`（`List[int]` *可选*，默认为[16,16]）— 图像补丁嵌入的补丁大小。'
- en: '`num_frames` (`int` *optional*, defaults to 8) — The maximum number of video
    frames.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_frames`（`int` *可选*，默认为8）— 视频帧的最大数量。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `PILImageResampling.BILINEAR`)
    — Resampling filter to use if resizing the image. Can be overridden by the `resample`
    parameter in the `preprocess` method.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample`（`PILImageResampling`，*可选*，默认为`PILImageResampling.BILINEAR`）— 调整图像大小时要使用的重采样滤波器。可以被`preprocess`方法中的`resample`参数覆盖。'
- en: '`do_center_crop` (`bool`, *optional*, defaults to `True`) — Whether to center
    crop the image to the specified `crop_size`. Can be overridden by the `do_center_crop`
    parameter in the `preprocess` method.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_center_crop`（`bool`，*可选*，默认为`True`）— 是否将图像居中裁剪到指定的`crop_size`。可以被`preprocess`方法中的`do_center_crop`参数覆盖。'
- en: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `{"height" -- 224, "width":
    224}`): Size of the image after applying the center crop. Can be overridden by
    the `crop_size` parameter in the `preprocess` method.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crop_size`（`Dict[str, int]`，*可选*，默认为`{"height" -- 224, "width": 224}`）：应用中心裁剪后的图像大小。可以被`preprocess`方法中的`crop_size`参数覆盖。'
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) — Whether to rescale
    the image by the specified scale `rescale_factor`. Can be overridden by the `do_rescale`
    parameter in the `preprocess` method.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale`（`bool`，*可选*，默认为`True`）— 是否按指定比例`rescale_factor`对图像进行重新缩放。可以被`preprocess`方法中的`do_rescale`参数覆盖。'
- en: '`rescale_factor` (`int` or `float`, *optional*, defaults to 1/255) — Defines
    the scale factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor`（`int`或`float`，*可选*，默认为1/255）— 定义在重新缩放图像时要使用的比例因子。可以被`preprocess`方法中的`rescale_factor`参数覆盖。'
- en: '`do_normalize` (`bool`, *optional*, defaults to `True`) — Whether to normalize
    the image. Can be overridden by the `do_normalize` parameter in the `preprocess`
    method.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize`（`bool`，*可选*，默认为`True`）— 是否对图像进行归一化。可以被`preprocess`方法中的`do_normalize`参数覆盖。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_STANDARD_MEAN`)
    — Mean to use if normalizing the image. This is a float or list of floats the
    length of the number of channels in the image. Can be overridden by the `image_mean`
    parameter in the `preprocess` method.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean`（`float`或`List[float]`，*可选*，默认为`IMAGENET_STANDARD_MEAN`）— 在归一化图像时使用的均值。这是一个浮点数或与图像通道数相同长度的浮点数列表。可以被`preprocess`方法中的`image_mean`参数覆盖。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_STANDARD_STD`)
    — Standard deviation to use if normalizing the image. This is a float or list
    of floats the length of the number of channels in the image. Can be overridden
    by the `image_std` parameter in the `preprocess` method.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` 或 `List[float]`, *可选*, 默认为`IMAGENET_STANDARD_STD`) — 如果对图像进行归一化，则使用的标准差。这是一个浮点数或与图像中通道数相同长度的浮点数列表。可以被`preprocess`方法中的`image_std`参数覆盖。'
- en: Constructs a TVLT image processor.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个TVLT图像处理器。
- en: This processor can be used to prepare either videos or images for the model
    by converting images to 1-frame videos.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理器可通过将图像转换为1帧视频来为模型准备视频或图像。
- en: '#### `preprocess`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `preprocess`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/image_processing_tvlt.py#L253)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/image_processing_tvlt.py#L253)'
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`videos` (`ImageInput`) — Images or videos to preprocess. Expects a single
    or batch of frames with pixel values ranging from 0 to 255\. If passing in frames
    with pixel values between 0 and 1, set `do_rescale=False`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`videos` (`ImageInput`) — 要预处理的图像或视频。期望单个或批处理的帧，像素值范围为0到255。如果传入像素值在0到1之间的帧，请设置`do_rescale=False`。'
- en: '`do_resize` (`bool`, *optional*, defaults to `self.do_resize`) — Whether to
    resize the image.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`, *可选*, 默认为`self.do_resize`) — 是否调整图像大小。'
- en: '`size` (`Dict[str, int]`, *optional*, defaults to `self.size`) — Size of the
    image after applying resize.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]`, *可选*, 默认为`self.size`) — 应用调整大小后的图像大小。'
- en: '`patch_size` (`List[int]` *optional*, defaults to self.patch_size) — The patch
    size of image patch embedding.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`patch_size` (`List[int]` *可选*, 默认为self.patch_size) — 图像补丁嵌入的补丁大小。'
- en: '`num_frames` (`int` *optional*, defaults to self.num_frames) — The maximum
    number of video frames.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_frames` (`int` *可选*, 默认为self.num_frames) — 视频帧的最大数量。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `self.resample`)
    — Resampling filter to use if resizing the image. This can be one of the enum
    `PILImageResampling`, Only has an effect if `do_resize` is set to `True`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`PILImageResampling`, *可选*, 默认为`self.resample`) — 如果调整图像大小，则要使用的重采样滤波器。这可以是枚举`PILImageResampling`之一，仅在`do_resize`设置为`True`时有效。'
- en: '`do_center_crop` (`bool`, *optional*, defaults to `self.do_centre_crop`) —
    Whether to centre crop the image.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_center_crop` (`bool`, *可选*, 默认为`self.do_centre_crop`) — 是否对图像进行中心裁剪。'
- en: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `self.crop_size`) —
    Size of the image after applying the centre crop.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crop_size` (`Dict[str, int]`, *可选*, 默认为`self.crop_size`) — 应用中心裁剪后的图像大小。'
- en: '`do_rescale` (`bool`, *optional*, defaults to `self.do_rescale`) — Whether
    to rescale the image values between [0 - 1].'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale` (`bool`, *可选*, 默认为`self.do_rescale`) — 是否将图像值重新缩放到[0 - 1]之间。'
- en: '`rescale_factor` (`float`, *optional*, defaults to `self.rescale_factor`) —
    Rescale factor to rescale the image by if `do_rescale` is set to `True`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor` (`float`, *可选*, 默认为`self.rescale_factor`) — 如果`do_rescale`设置为`True`，则要缩放图像的缩放因子。'
- en: '`do_normalize` (`bool`, *optional*, defaults to `self.do_normalize`) — Whether
    to normalize the image.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize` (`bool`, *可选*, 默认为`self.do_normalize`) — 是否对图像进行归一化。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `self.image_mean`)
    — Image mean.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean` (`float` 或 `List[float]`, *可选*, 默认为`self.image_mean`) — 图像均值。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `self.image_std`)
    — Image standard deviation.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` 或 `List[float]`, *可选*, 默认为`self.image_std`) — 图像标准差。'
- en: '`is_mixed` (`bool`, *optional*) — If the input video has negative samples.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_mixed` (`bool`, *可选*) — 如果输入视频有负样本。'
- en: '`return_tensors` (`str` or `TensorType`, *optional*) — The type of tensors
    to return. Can be one of:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors` (`str` 或 `TensorType`, *可选*) — 要返回的张量类型。可以是以下之一：'
- en: 'Unset: Return a list of `np.ndarray`.'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '未设置: 返回`np.ndarray`列表。'
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.TENSORFLOW` 或 `''tf''`: 返回类型为`tf.Tensor`的批处理。'
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.PYTORCH` 或 `''pt''`: 返回类型为`torch.Tensor`的批处理。'
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.NUMPY` 或 `''np''`: 返回类型为`np.ndarray`的批处理。'
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.JAX` 或 `''jax''`: 返回类型为`jax.numpy.ndarray`的批处理。'
- en: '`data_format` (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`)
    — The channel dimension format for the output image. Can be one of:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_format` (`ChannelDimension` 或 `str`, *可选*, 默认为`ChannelDimension.FIRST`)
    — 输出图像的通道维度格式。可以是以下之一：'
- en: '`ChannelDimension.FIRST`: image in (num_channels, height, width) format.'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ChannelDimension.FIRST`: 图像格式为(num_channels, height, width)。'
- en: '`ChannelDimension.LAST`: image in (height, width, num_channels) format.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ChannelDimension.LAST`: 图像格式为(height, width, num_channels)。'
- en: 'Unset: Use the inferred channel dimension format of the input image.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '未设置: 使用输入图像的推断通道维度格式。'
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) — The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_data_format` (`ChannelDimension` 或 `str`, *可选*) — 输入图像的通道维度格式。如果未设置，则从输入图像中推断通道维度格式。可以是以下之一：'
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_first"` 或 `ChannelDimension.FIRST`: 图像格式为(num_channels, height,
    width)。'
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_last"` 或 `ChannelDimension.LAST`: 图像格式为(height, width, num_channels)。'
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"none"` 或 `ChannelDimension.NONE`: 图像格式为(height, width)。'
- en: Returns
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)'
- en: 'A [BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)
    with the following fields:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 具有以下字段的[BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)：
- en: '`pixel_values` — Pixel values to be fed to a model, of shape (batch_size, num_channels,
    height, width).'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` — 要馈送给模型的像素值，形状为(batch_size, num_channels, height, width)。'
- en: '`pixel_mask` — Pixel masks to be fed to a model, of shape (batch_size, num_pixel_patches).'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask` — 用于输入模型的像素掩码，形状为（batch_size，num_pixel_patches）。'
- en: '`pixel_values_mixed` — Pixel values with both postive or negative to be fed
    to a model, of shape (batch_size, num_channels, height, width).'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values_mixed` — 具有正负值的像素值，用于输入模型，形状为（batch_size，num_channels，height，width）。'
- en: '`pixel_mask_mixed` — Pixel masks with both postive or negative to be fed to
    a model, of shape (batch_size, num_pixel_patches).'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask_mixed` — 具有正负值的像素掩码，用于输入模型，形状为（batch_size，num_pixel_patches）。'
- en: Preprocess an videos or image or batch of videos or images.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理视频或图像或视频或图像批处理。
- en: TvltFeatureExtractor
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TvltFeatureExtractor
- en: '### `class transformers.TvltFeatureExtractor`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.TvltFeatureExtractor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/feature_extraction_tvlt.py#L30)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/feature_extraction_tvlt.py#L30)'
- en: '[PRE6]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`spectrogram_length` (`Dict[str, int]` *optional*, defaults to 2048) — The
    time length of each audio spectrogram.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spectrogram_length` (`Dict[str, int]` *optional*, defaults to 2048) — 每个音频频谱图的时间长度。'
- en: '`num_channels` (`int` *optional*, defaults to 1) — Number of audio channels.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_channels` (`int` *optional*, defaults to 1) — 音频通道数。'
- en: '`patch_size` (`List[int]` *optional*, defaults to `[16, 16]`) — The patch size
    of audio patch embedding.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`patch_size` (`List[int]` *optional*, defaults to `[16, 16]`) — 音频补丁嵌入的补丁大小。'
- en: '`feature_size` (`int`, *optional*, defaults to 128) — The frequency length
    of audio spectrogram.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feature_size` (`int`, *optional*, defaults to 128) — 音频频谱图的频率长度。'
- en: '`sampling_rate` (`int`, *optional*, defaults to 44100) — The sampling rate
    at which the audio files should be digitalized expressed in Hertz (Hz).'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sampling_rate` (`int`, *optional*, defaults to 44100) — 音频文件应数字化的采样率，以赫兹（Hz）表示。'
- en: '`hop_length_to_sampling_rate` (`int`, *optional*, defaults to 86) — Hop length
    is length of the overlaping windows for the STFT used to obtain the Mel Frequency
    coefficients. For example, with sampling rate 44100, the hop length is 512, with
    44100 / 512 = 86'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hop_length_to_sampling_rate` (`int`, *optional*, defaults to 86) — Hop length是用于获取Mel频率系数的STFT中重叠窗口的长度。例如，对于采样率44100，跳跃长度为512，即44100
    / 512 = 86'
- en: '`n_fft` (`int`, *optional*, defaults to 2048) — Size of the Fourier transform.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n_fft` (`int`, *optional*, defaults to 2048) — 傅立叶变换的大小。'
- en: '`padding_value` (`float`, *optional*, defaults to 0.0) — Padding value used
    to pad the audio. Should correspond to silences.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding_value` (`float`, *optional*, defaults to 0.0) — 用于填充音频的填充值。应对应于静音。'
- en: Constructs a TVLT audio feature extractor. This feature extractor can be used
    to prepare audios for the model.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个TVLT音频特征提取器。此特征提取器可用于为模型准备音频。
- en: This feature extractor inherits from [FeatureExtractionMixin](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin)
    which contains most of the main methods. Users should refer to this superclass
    for more information regarding those methods.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此特征提取器继承自[FeatureExtractionMixin](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin)，其中包含大多数主要方法。用户应参考此超类以获取有关这些方法的更多信息。
- en: '#### `__call__`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `__call__`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/feature_extraction_tvlt.py#L116)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/feature_extraction_tvlt.py#L116)'
- en: '[PRE7]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`raw_speech` (`np.ndarray`, `List[float]`, `List[np.ndarray]`, `List[List[float]]`)
    — The sequence or batch of sequences to be padded. Each sequence can be a numpy
    array, a list of float values, a list of numpy arrays or a list of list of float
    values. Must be mono channel audio, not stereo, i.e. single float per timestep.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw_speech` (`np.ndarray`, `List[float]`, `List[np.ndarray]`, `List[List[float]]`)
    — 要填充的序列或序列批次。每个序列可以是一个numpy数组，一个浮点值列表，一个numpy数组列表或一个浮点值列表的列表。必须是单声道音频，不是立体声，即每个时间步长一个浮点数。'
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) — If set, will return tensors instead of list of python integers.
    Acceptable values are:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) — 如果设置，将返回张量而不是Python整数列表。可接受的值为：'
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''pt''`: 返回PyTorch `torch.Tensor`对象。'
- en: '`''np''`: Return Numpy `np.ndarray` objects.'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''np''`: 返回Numpy `np.ndarray`对象。'
- en: '`return_attention_mask` (`bool`, *optional*, default to `True`) — Whether to
    return the attention mask. If left to the default, will return the attention mask
    according to the specific feature_extractor’s default. [What are attention masks?](../glossary#attention-mask)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_attention_mask` (`bool`, *optional*, default to `True`) — 是否返回注意力掩码。如果保持默认值，将根据特定feature_extractor的默认值返回注意力掩码。[什么是注意力掩码？](../glossary#attention-mask)'
- en: For TvltTransformer models, `attention_mask` should alwys be passed for batched
    inference, to avoid subtle bugs.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于TvltTransformer模型，应始终传递`attention_mask`以进行批量推断，以避免细微错误。
- en: '`sampling_rate` (`int`, *optional*) — The sampling rate at which the `raw_speech`
    input was sampled. It is strongly recommended to pass `sampling_rate` at the forward
    call to prevent silent errors and allow automatic speech recognition pipeline.
    Current model supports sampling rate 16000 and 44100.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sampling_rate` (`int`, *optional*) — 对`raw_speech`输入进行采样的采样率。强烈建议在前向调用时传递`sampling_rate`，以防止静默错误并允许自动语音识别流水线。当前模型支持采样率为16000和44100。'
- en: '`resample` (`bool`, *optional*, defaults to `False`) — If the sampling rate
    is not matched, resample the input audio to match.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`bool`, *optional*, defaults to `False`) — 如果采样率不匹配，则重新采样输入音频以匹配。'
- en: '`mask_audio` (`bool`, *optional*, defaults to `False`) — Whether or not to
    mask input audio for MAE task.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_audio` (`bool`, *optional*, defaults to `False`) — 是否对MAE任务的输入音频进行掩码。'
- en: Returns
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)'
- en: 'A [BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)
    with the following fields:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 具有以下字段的[BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)：
- en: '`audio_values` — Audio values to be fed to a model, of shape (batch_size, num_channels,
    height, width).'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_values` — 要馈送给模型的音频值，形状为(batch_size, num_channels, height, width)。'
- en: '`audio_mask` — Audio masks to be fed to a model, of shape (batch_size, num_audio_patches).'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_mask` — 要馈送给模型的音频掩码，形状为(batch_size, num_audio_patches)。'
- en: Main method to prepare one or several audio(s) for the model.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为模型准备一个或多个音频的主要方法。
- en: TvltModel
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TvltModel
- en: '### `class transformers.TvltModel`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.TvltModel`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L670)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L670)'
- en: '[PRE8]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Parameters
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config` ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    — 具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型相关的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: The bare TVLT Model transformer outputting raw hidden-states without any specific
    head on top. This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 裸TVLT模型变压器输出原始隐藏状态，没有特定的顶部头。这个模型是PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规PyTorch模块，并参考PyTorch文档以获取有关一般用法和行为的所有相关信息。
- en: '#### `forward`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L704)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L704)'
- en: '[PRE9]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Parameters
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_frames, num_channels,
    height, width)`) — Pixel values. Pixel values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_frames, num_channels,
    height, width)`) — 像素值。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取像素值。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`audio_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Audio values. Audio values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — 音频值。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取音频值。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`pixel_mask` (`torch.FloatTensor` of shape `(batch_size, num_pixel_patches)`)
    — Pixel masks. Pixel masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask` (`torch.FloatTensor` of shape `(batch_size, num_pixel_patches)`)
    — 像素掩码。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取像素掩码。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`audio_mask` (`torch.FloatTensor` of shape `(batch_size, num_audio_patches)`)
    — Audio masks. Audio masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_mask` (`torch.FloatTensor` of shape `(batch_size, num_audio_patches)`)
    — 音频掩码。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取音频掩码。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — Pixel values that mix positive and negative samples
    in Tvlt vision-audio matching. Pixel values mixed can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — 在Tvlt视听匹配中混合正负样本的像素值。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取混合像素值。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel masks of pixel_values_mixed. Pixel masks mixed can be
    obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — pixel_values_mixed的像素掩码。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取混合像素掩码。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`mask_pixel` (`bool`, *optional*) — Whether to mask pixel for MAE tasks. Only
    set to True in TvltForPreTraining.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_pixel` (`bool`, *optional*) — 是否对MAE任务遮蔽像素。仅在TvltForPreTraining中设置为True。'
- en: '`mask_audio` (`bool`, *optional*) — Whether to mask audio for MAE tasks. Only
    set to True in TvltForPreTraining.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_audio` (`bool`, *optional*) — 是否对MAE任务遮蔽音频。仅在TvltForPreTraining中设置为True。'
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions` (`bool`, *optional*) — 是否返回所有注意力层的注意力张量。有关更多详细信息，请参阅返回张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`，*可选*) — 是否返回所有层的隐藏状态。有关更多详细信息，请参阅返回张量中的 `hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`，*可选*) — 是否返回一个 [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    而不是一个普通元组。'
- en: Returns
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`transformers.models.tvlt.modeling_tvlt.TvltModelOutput` or `tuple(torch.FloatTensor)`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformers.models.tvlt.modeling_tvlt.TvltModelOutput` 或 `tuple(torch.FloatTensor)`'
- en: A `transformers.models.tvlt.modeling_tvlt.TvltModelOutput` or a tuple of `torch.FloatTensor`
    (if `return_dict=False` is passed or when `config.return_dict=False`) comprising
    various elements depending on the configuration ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    and inputs.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `transformers.models.tvlt.modeling_tvlt.TvltModelOutput` 或一个 `torch.FloatTensor`
    元组（如果传递 `return_dict=False` 或 `config.return_dict=False`）包含各种元素，取决于配置（[TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig)）和输入。
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`) — Sequence of hidden-states at the output of the last layer of
    the model.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_hidden_state` (`torch.FloatTensor`，形状为 `(batch_size, sequence_length,
    hidden_size)`) — 模型最后一层的隐藏状态序列。'
- en: '`last_pixel_hidden_state` (`torch.FloatTensor` of shape `(batch_size, pixel_sequence_length,
    hidden_size)`) — Pixel sequence of hidden-states at the output of the last layer
    of the model.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_pixel_hidden_state` (`torch.FloatTensor`，形状为 `(batch_size, pixel_sequence_length,
    hidden_size)`) — 模型最后一层的像素隐藏状态序列。'
- en: '`last_audio_hidden_state` (`torch.FloatTensor` of shape `(batch_size, audio_sequence_length,
    hidden_size)`) — Audio sequence of hidden-states at the output of the last layer
    of the model.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_audio_hidden_state` (`torch.FloatTensor`，形状为 `(batch_size, audio_sequence_length,
    hidden_size)`) — 模型最后一层的音频隐藏状态序列。'
- en: '`pixel_label_masks` (`torch.FloatTensor` of shape `(batch_size, pixel_patch_length)`)
    — Tensor indicating which pixel patches are masked (1) and which are not (0).'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_label_masks` (`torch.FloatTensor`，形状为 `(batch_size, pixel_patch_length)`)
    — 指示哪些像素patch被mask（1）哪些没有被mask（0）的张量。'
- en: '`audio_label_masks` (`torch.FloatTensor` of shape `(batch_size, audio_patch_length)`)
    — Tensor indicating which audio patches are masked (1) and which are not (0).'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_label_masks` (`torch.FloatTensor`，形状为 `(batch_size, audio_patch_length)`)
    — 指示哪些音频patch被mask（1）哪些没有被mask（0）的张量。'
- en: '`pixel_ids_restore` (`torch.LongTensor` of shape `(batch_size, pixel_patch_length)`)
    — Tensor containing the ids permutation of pixel masking.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_ids_restore` (`torch.LongTensor`，形状为 `(batch_size, pixel_patch_length)`)
    — 包含像素masking的ids排列的张量。'
- en: '`audio_ids_restore` (`torch.LongTensor` of shape `(batch_size, audio_patch_length)`)
    — Tensor containing the ids permutation of audio masking.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_ids_restore` (`torch.LongTensor`，形状为 `(batch_size, audio_patch_length)`)
    — 包含音频masking的ids排列的张量。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings and one for the output of each layer) of
    shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the model
    at the output of each layer plus the initial embedding outputs.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states` (`tuple(torch.FloatTensor)`，*可选*，当传递 `output_hidden_states=True`
    或 `config.output_hidden_states=True` 时返回) — 形状为 `(batch_size, sequence_length,
    hidden_size)` 的 `torch.FloatTensor` 元组。模型每一层的隐藏状态（包括嵌入的输出和每一层的输出）。'
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Attentions weights after the attention softmax, used to compute the weighted average
    in the self-attention heads.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attentions` (`tuple(torch.FloatTensor)`, *可选*, 当传递 `output_attentions=True`
    或 `config.output_attentions=True` 时返回) — 形状为 `(batch_size, num_heads, sequence_length,
    sequence_length)` 的 `torch.FloatTensor` 元组。注意力softmax后的注意力权重，用于计算自注意力头中的加权平均值。'
- en: The [TvltModel](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltModel)
    forward method, overrides the `__call__` special method.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[TvltModel](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltModel)
    的前向方法，覆盖了 `__call__` 特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的方法需要在这个函数内定义，但应该在之后调用 `Module` 实例而不是这个，因为前者会处理运行前后处理步骤，而后者会默默地忽略它们。
- en: 'Examples:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE10]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: TvltForPreTraining
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TvltForPreTraining
- en: '### `class transformers.TvltForPreTraining`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.TvltForPreTraining`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L895)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L895)'
- en: '[PRE11]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Parameters
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`（[TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig)）
    — 包含模型所有参数的模型配置类。使用配置文件初始化不会加载与模型相关的权重，只会加载配置。查看 [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    方法以加载模型权重。'
- en: The TVLT Model transformer with the decoder on top for self-supervised pre-training.
    This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 带有顶部解码器用于自监督预训练的TVLT模型变压器。此模型是PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规的PyTorch模块，并参考PyTorch文档以获取有关一般用法和行为的所有相关信息。
- en: '#### `forward`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L1032)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L1032)'
- en: '[PRE12]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Parameters
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_frames, num_channels,
    height, width)`) — Pixel values. Pixel values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_frames, num_channels,
    height, width)`) — 像素值。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取像素值。详细信息请参见[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`audio_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Audio values. Audio values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — 音频值。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取音频值。详细信息请参见[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`pixel_mask` (`torch.FloatTensor` of shape `(batch_size, num_pixel_patches)`)
    — Pixel masks. Pixel masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask` (`torch.FloatTensor` of shape `(batch_size, num_pixel_patches)`)
    — 像素掩码。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取像素掩码。详细信息请参见[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`audio_mask` (`torch.FloatTensor` of shape `(batch_size, num_audio_patches)`)
    — Audio masks. Audio masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_mask` (`torch.FloatTensor` of shape `(batch_size, num_audio_patches)`)
    — 音频掩码。音频掩码可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取。详细信息请参见[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — Pixel values that mix positive and negative samples
    in Tvlt vision-audio matching. Pixel values mixed can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — 在Tvlt视听匹配中混合正负样本的像素值。混合的像素值可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取。详细信息请参见[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel masks of pixel_values_mixed. Pixel masks mixed can be
    obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — 混合像素值的像素掩码。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取像素掩码混合。详细信息请参见[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`mask_pixel` (`bool`, *optional*) — Whether to mask pixel for MAE tasks. Only
    set to True in TvltForPreTraining.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_pixel` (`bool`, *可选*) — 是否为MAE任务屏蔽像素。仅在TvltForPreTraining中设置为True。'
- en: '`mask_audio` (`bool`, *optional*) — Whether to mask audio for MAE tasks. Only
    set to True in TvltForPreTraining.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_audio` (`bool`, *可选*) — 是否为MAE任务屏蔽音频。仅在TvltForPreTraining中设置为True。'
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions` (`bool`, *可选*) — 是否返回所有注意力层的注意力张量。有关更多详细信息，请参见返回张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`, *可选*) — 是否返回所有层的隐藏状态。有关更多详细信息，请参见返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *可选*) — 是否返回[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是普通元组。'
- en: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — Pixel values that mix positive and negative samples
    in Tvlt vision-audio matching. Audio values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — 在Tvlt视听匹配中混合正负样本的像素值。音频值可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取。详细信息请参见[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel masks of pixel_values_mixed. Pixel values mixed can be
    obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask_mixed`（形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`）—
    像素值混合的像素掩码。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取像素值混合。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`labels` (`torch.LongTensor` of shape `(batch_size, num_labels)`, *optional*)
    — Labels for computing the vision audio matching loss. Indices should be in `[0,
    1]`. num_labels has to be 1.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labels`（形状为`(batch_size, num_labels)`的`torch.LongTensor`，*可选*）— 用于计算视听匹配损失的标签。索引应在`[0,
    1]`范围内。num_labels必须为1。'
- en: Returns
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`transformers.models.tvlt.modeling_tvlt.TvltForPreTrainingOutput` or `tuple(torch.FloatTensor)`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformers.models.tvlt.modeling_tvlt.TvltForPreTrainingOutput`或`tuple(torch.FloatTensor)`'
- en: A `transformers.models.tvlt.modeling_tvlt.TvltForPreTrainingOutput` or a tuple
    of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    and inputs.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`transformers.models.tvlt.modeling_tvlt.TvltForPreTrainingOutput`或一个`torch.FloatTensor`元组（如果传递`return_dict=False`或`config.return_dict=False`）包含根据配置（[TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig)）和输入的各种元素。
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`) — Pixel reconstruction loss.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss`（形状为`(1,)`的`torch.FloatTensor`）— 像素重建损失。'
- en: '`matching_logits` (`torch.FloatTensor` of shape `(batch_size, 1)`) — Matching
    objective logits.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matching_logits`（形状为`(batch_size, 1)`的`torch.FloatTensor`）— 匹配目标对数。'
- en: '`pixel_logits` (`torch.FloatTensor` of shape `(batch_size, pixel_patch_length,
    image_patch_size ** 3 * pixel_num_channels)`): Pixel reconstruction logits.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_logits`（形状为`(batch_size, pixel_patch_length, image_patch_size ** 3 *
    pixel_num_channels)`的`torch.FloatTensor`）：像素重建对数。'
- en: '`audio_logits` (`torch.FloatTensor` of shape `(batch_size, audio_patch_length,
    image_patch_size[0] * image_patch_size[1])`): Audio reconstruction logits.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_logits`（形状为`(batch_size, audio_patch_length, image_patch_size[0] * image_patch_size[1])`的`torch.FloatTensor`）：音频重建对数。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings and one for the output of each layer) of
    shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the model
    at the output of each layer plus the initial embedding outputs.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states`（`tuple(torch.FloatTensor)`，*可选*，当传递`output_hidden_states=True`或`config.output_hidden_states=True`时返回）—
    形状为`(batch_size, sequence_length, hidden_size)`的`torch.FloatTensor`元组。模型在每一层输出的隐藏状态以及初始嵌入输出。'
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Attentions weights after the attention softmax, used to compute the weighted average
    in the self-attention heads.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attentions`（`tuple(torch.FloatTensor)`，*可选*，当传递`output_attentions=True`或`config.output_attentions=True`时返回）—
    形状为`(batch_size, num_heads, sequence_length, sequence_length)`的`torch.FloatTensor`元组。注意力softmax后的注意力权重，用于计算自注意力头中的加权平均值。'
- en: The [TvltForPreTraining](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltForPreTraining)
    forward method, overrides the `__call__` special method.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '[TvltForPreTraining](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltForPreTraining)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前向传递的配方需要在此函数内定义，但应该在此之后调用`Module`实例，而不是这个，因为前者负责运行前处理和后处理步骤，而后者则默默地忽略它们。
- en: 'Examples:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE13]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: TvltForAudioVisualClassification
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TvltForAudioVisualClassification
- en: '### `class transformers.TvltForAudioVisualClassification`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.TvltForAudioVisualClassification`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L1208)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L1208)'
- en: '[PRE14]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Parameters
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`（[TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig)）—
    具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型相关的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: Tvlt Model transformer with a classifier head on top (an MLP on top of the final
    hidden state of the [CLS] token) for audiovisual classification tasks, e.g. CMU-MOSEI
    Sentiment Analysis and Audio to Video Retrieval.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Tvlt模型变压器，顶部带有分类器头（在[CLS]标记的最终隐藏状态之上的MLP）用于音频视觉分类任务，例如CMU-MOSEI情感分析和音频到视频检索。
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型是PyTorch的[torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规的PyTorch模块，并参考PyTorch文档以获取与一般用法和行为相关的所有事项。
- en: '#### `forward`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L1233)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L1233)'
- en: '[PRE15]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Parameters
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_frames, num_channels,
    height, width)`) — Pixel values. Pixel values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_frames, num_channels,
    height, width)`) — 像素值。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取像素值。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`audio_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Audio values. Audio values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — 音频值。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取音频值。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`pixel_mask` (`torch.FloatTensor` of shape `(batch_size, num_pixel_patches)`)
    — Pixel masks. Pixel masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask` (`torch.FloatTensor` of shape `(batch_size, num_pixel_patches)`)
    — 像素掩码。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取像素掩码。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`audio_mask` (`torch.FloatTensor` of shape `(batch_size, num_audio_patches)`)
    — Audio masks. Audio masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`audio_mask` (`torch.FloatTensor` of shape `(batch_size, num_audio_patches)`)
    — 音频掩码。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取音频掩码。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — Pixel values that mix positive and negative samples
    in Tvlt vision-audio matching. Pixel values mixed can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — 在Tvlt视听匹配中混合正负样本的像素值。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取混合像素值。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel masks of pixel_values_mixed. Pixel masks mixed can be
    obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — pixel_values_mixed的像素掩码。可以使用[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)获取混合像素掩码。有关详细信息，请参阅[TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)。'
- en: '`mask_pixel` (`bool`, *optional*) — Whether to mask pixel for MAE tasks. Only
    set to True in TvltForPreTraining.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_pixel` (`bool`, *optional*) — 是否为MAE任务屏蔽像素。仅在TvltForPreTraining中设置为True。'
- en: '`mask_audio` (`bool`, *optional*) — Whether to mask audio for MAE tasks. Only
    set to True in TvltForPreTraining.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_audio` (`bool`, *optional*) — 是否为MAE任务屏蔽音频。仅在TvltForPreTraining中设置为True。'
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions` (`bool`, *optional*) — 是否返回所有注意力层的注意力张量。有关更多详细信息，请查看返回张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`, *optional*) — 是否返回所有层的隐藏状态。有关更多详细信息，请查看返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *optional*) — 是否返回[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是普通元组。'
- en: '`labels` (`torch.LongTensor` of shape `(batch_size, num_labels)`, *optional*)
    — Labels for computing the audiovisual loss. Indices should be in `[0, ..., num_classes-1]`
    where num_classes refers to the number of classes in audiovisual tasks.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labels` (`torch.LongTensor` of shape `(batch_size, num_labels)`, *optional*)
    — 用于计算音视频损失的标签。索引应在`[0, ..., num_classes-1]`范围内，其中num_classes是音视频任务中类别的数量。'
- en: Returns
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[transformers.modeling_outputs.SequenceClassifierOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput)
    or `tuple(torch.FloatTensor)`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[transformers.modeling_outputs.SequenceClassifierOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput)
    或 `tuple(torch.FloatTensor)`'
- en: A [transformers.modeling_outputs.SequenceClassifierOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    and inputs.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[transformers.modeling_outputs.SequenceClassifierOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput)或一个`torch.FloatTensor`元组（如果传递了`return_dict=False`或当`config.return_dict=False`时），包括根据配置([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))和输入的各种元素。
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Classification (or regression if config.num_labels==1) loss.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss` (`torch.FloatTensor`，形状为`(1,)`，*可选*，当提供`labels`时返回) — 分类（如果config.num_labels==1则为回归）损失。'
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`) —
    Classification (or regression if config.num_labels==1) scores (before SoftMax).'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits` (`torch.FloatTensor`，形状为`(batch_size, config.num_labels)`) — 分类（如果config.num_labels==1则为回归）得分（SoftMax之前）。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states` (`tuple(torch.FloatTensor)`，*可选*，当传递`output_hidden_states=True`或`config.output_hidden_states=True`时返回)
    — 形状为`(batch_size, sequence_length, hidden_size)`的`torch.FloatTensor`元组（如果模型有嵌入层，则为嵌入的输出+每一层的输出）。'
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模型在每一层输出的隐藏状态加上可选的初始嵌入输出。
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attentions` (`tuple(torch.FloatTensor)`，*可选*，当传递`output_attentions=True`或`config.output_attentions=True`时返回)
    — 形状为`(batch_size, num_heads, sequence_length, sequence_length)`的`torch.FloatTensor`元组（每一层一个）。'
- en: Attentions weights after the attention softmax, used to compute the weighted
    average in the self-attention heads.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意力softmax后的注意力权重，用于计算自注意力头中的加权平均值。
- en: The [TvltForAudioVisualClassification](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltForAudioVisualClassification)
    forward method, overrides the `__call__` special method.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '[为音频视觉分类而设计的TvltForAudioVisualClassification](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltForAudioVisualClassification)前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的步骤需要在这个函数内定义，但应该在之后调用`Module`实例，而不是这个函数，因为前者会处理运行前后的处理步骤，而后者会默默地忽略它们。
- en: 'Examples:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE16]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
