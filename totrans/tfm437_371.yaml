- en: TVLT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/tvlt](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/tvlt)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/268.0c7ea3da.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Tip.c2ecdbf4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Docstring.17db21ae.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/ExampleCodeBlock.4f515aa9.js">
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The TVLT model was proposed in [TVLT: Textless Vision-Language Transformer](https://arxiv.org/abs/2209.14156)
    by Zineng Tang, Jaemin Cho, Yixin Nie, Mohit Bansal (the first three authors contributed
    equally). The Textless Vision-Language Transformer (TVLT) is a model that uses
    raw visual and audio inputs for vision-and-language representation learning, without
    using text-specific modules such as tokenization or automatic speech recognition
    (ASR). It can perform various audiovisual and vision-language tasks like retrieval,
    question answering, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*In this work, we present the Textless Vision-Language Transformer (TVLT),
    where homogeneous transformer blocks take raw visual and audio inputs for vision-and-language
    representation learning with minimal modality-specific design, and do not use
    text-specific modules such as tokenization or automatic speech recognition (ASR).
    TVLT is trained by reconstructing masked patches of continuous video frames and
    audio spectrograms (masked autoencoding) and contrastive modeling to align video
    and audio. TVLT attains performance comparable to its text-based counterpart on
    various multimodal tasks, such as visual question answering, image retrieval,
    video retrieval, and multimodal sentiment analysis, with 28x faster inference
    speed and only 1/3 of the parameters. Our findings suggest the possibility of
    learning compact and efficient visual-linguistic representations from low-level
    visual and audio signals without assuming the prior existence of text.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![drawing](../Images/92ae6f0b7d6dba10fca15ab2ef309bb0.png)'
  prefs: []
  type: TYPE_IMG
- en: TVLT architecture. Taken from the [original paper]([https://arxiv.org/abs/2102.03334](https://arxiv.org/abs/2209.14156)).
  prefs: []
  type: TYPE_NORMAL
- en: The original code can be found [here](https://github.com/zinengtang/TVLT). This
    model was contributed by [Zineng Tang](https://huggingface.co/ZinengTang).
  prefs: []
  type: TYPE_NORMAL
- en: Usage tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TVLT is a model that takes both `pixel_values` and `audio_values` as input.
    One can use [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)
    to prepare data for the model. This processor wraps an image processor (for the
    image/video modality) and an audio feature extractor (for the audio modality)
    into one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TVLT is trained with images/videos and audios of various sizes: the authors
    resize and crop the input images/videos to 224 and limit the length of audio spectrogram
    to 2048\. To make batching of videos and audios possible, the authors use a `pixel_mask`
    that indicates which pixels are real/padding and `audio_mask` that indicates which
    audio values are real/padding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The design of TVLT is very similar to that of a standard Vision Transformer
    (ViT) and masked autoencoder (MAE) as in [ViTMAE](vitmae). The difference is that
    the model includes embedding layers for the audio modality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PyTorch version of this model is only available in torch 1.10 and higher.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TvltConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.TvltConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/configuration_tvlt.py#L28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`image_size` (`int`, *optional*, defaults to 224) — The size (resolution) of
    each image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spectrogram_length` (`int`, *optional*, defaults to 2048) — The time length
    of each audio spectrogram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`frequency_length` (`int`, *optional*, defaults to 128) — The frequency length
    of audio spectrogram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_patch_size` (`List[int]`, *optional*, defaults to `[16, 16]`) — The
    size (resolution) of each image patch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_patch_size` (`List[int]`, *optional*, defaults to `[16, 16]`) — The
    size (resolution) of each audio patch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_image_channels` (`int`, *optional*, defaults to 3) — The number of input
    image channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_audio_channels` (`int`, *optional*, defaults to 1) — The number of input
    audio channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_frames` (`int`, *optional*, defaults to 8) — The maximum number of frames
    for an input video.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_size` (`int`, *optional*, defaults to 768) — Dimensionality of the
    encoder layers and the pooler layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_hidden_layers` (`int`, *optional*, defaults to 12) — Number of hidden
    layers in the Transformer encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_attention_heads` (`int`, *optional*, defaults to 12) — Number of attention
    heads for each attention layer in the Transformer encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`intermediate_size` (`int`, *optional*, defaults to 3072) — Dimensionality
    of the “intermediate” (i.e., feed-forward) layer in the Transformer encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_act` (`str` or `function`, *optional*, defaults to `"gelu"`) — The
    non-linear activation function (function or string) in the encoder and pooler.
    If string, `"gelu"`, `"relu"`, `"selu"` and `"gelu_new"` are supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_dropout_prob` (`float`, *optional*, defaults to 0.0) — The dropout
    probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_probs_dropout_prob` (`float`, *optional*, defaults to 0.0) — The
    dropout ratio for the attention probabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initializer_range` (`float`, *optional*, defaults to 0.02) — The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layer_norm_eps` (`float`, *optional*, defaults to 1e-06) — The epsilon used
    by the layer normalization layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qkv_bias` (`bool`, *optional*, defaults to `True`) — Whether to add a bias
    to the queries, keys and values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_mean_pooling` (`bool`, *optional*, defaults to `False`) — Whether to mean
    pool the final hidden states instead of using the final hidden state of the [CLS]
    token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_num_attention_heads` (`int`, *optional*, defaults to 16) — Number
    of attention heads for each attention layer in the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_hidden_size` (`int`, *optional*, defaults to 512) — Dimensionality
    of the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_num_hidden_layers` (`int`, *optional*, defaults to 8) — Number of
    hidden layers in the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_intermediate_size` (`int`, *optional*, defaults to 2048) — Dimensionality
    of the “intermediate” (i.e., feed-forward) layer in the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask_ratio` (`float`, *optional*, defaults to 0.75) — Image patch masking
    ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_mask_ratio` (`float`, *optional*, defaults to 0.15) — Audio patch masking
    ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_mask_type` (`str`, *optional*, defaults to `"frame-level"`) — Audio
    patch masking type, choose between “frame-level” and “patch-level”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`task_matching` (`bool`, *optional*, defaults to `True`) — Whether to use vision
    audio matching task in pretraining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`task_mae` (`bool`, *optional*, defaults to `True`) — Whether to use the masked
    auto-encoder (MAE) in pretraining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loss_type` (`str`, *optional*, defaults to `"classification"`) — Loss types
    including regression and classification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a [TvltModel](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltModel).
    It is used to instantiate a TVLT model according to the specified arguments, defining
    the model architecture. Instantiating a configuration with the defaults will yield
    a similar configuration to that of the TVLT [ZinengTang/tvlt-base](https://huggingface.co/ZinengTang/tvlt-base)
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: TvltProcessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.TvltProcessor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/processing_tvlt.py#L22)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`image_processor` (`TvltImageProcessor`) — An instance of [TvltImageProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltImageProcessor).
    The image processor is a required input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`feature_extractor` (`TvltFeatureExtractor`) — An instance of [TvltFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltFeatureExtractor).
    The feature extractor is a required input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructs a TVLT processor which wraps a TVLT image processor and TVLT feature
    extractor into a single processor.
  prefs: []
  type: TYPE_NORMAL
- en: '[TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor)
    offers all the functionalities of [TvltImageProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltImageProcessor)
    and [TvltFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltFeatureExtractor).
    See the docstring of [**call**()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for more information.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `__call__`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/processing_tvlt.py#L46)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Forwards the `images` argument to TvltImageProcessor’s [preprocess()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltImageProcessor.preprocess)
    and the `audio` argument to TvltFeatureExtractor’s [**call**()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltFeatureExtractor.__call__).
    Please refer to the docstring of the above two methods for more information.
  prefs: []
  type: TYPE_NORMAL
- en: TvltImageProcessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.TvltImageProcessor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/image_processing_tvlt.py#L67)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) — Whether to resize the
    image’s (height, width) dimensions to the specified `size`. Can be overridden
    by the `do_resize` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (`Dict[str, int]` *optional*, defaults to `{"shortest_edge" -- 224}`):
    Size of the output image after resizing. The shortest edge of the image will be
    resized to `size["shortest_edge"]` while maintaining the aspect ratio of the original
    image. Can be overriden by `size` in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`patch_size` (`List[int]` *optional*, defaults to [16,16]) — The patch size
    of image patch embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_frames` (`int` *optional*, defaults to 8) — The maximum number of video
    frames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `PILImageResampling.BILINEAR`)
    — Resampling filter to use if resizing the image. Can be overridden by the `resample`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_center_crop` (`bool`, *optional*, defaults to `True`) — Whether to center
    crop the image to the specified `crop_size`. Can be overridden by the `do_center_crop`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `{"height" -- 224, "width":
    224}`): Size of the image after applying the center crop. Can be overridden by
    the `crop_size` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) — Whether to rescale
    the image by the specified scale `rescale_factor`. Can be overridden by the `do_rescale`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rescale_factor` (`int` or `float`, *optional*, defaults to 1/255) — Defines
    the scale factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_normalize` (`bool`, *optional*, defaults to `True`) — Whether to normalize
    the image. Can be overridden by the `do_normalize` parameter in the `preprocess`
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_STANDARD_MEAN`)
    — Mean to use if normalizing the image. This is a float or list of floats the
    length of the number of channels in the image. Can be overridden by the `image_mean`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_STANDARD_STD`)
    — Standard deviation to use if normalizing the image. This is a float or list
    of floats the length of the number of channels in the image. Can be overridden
    by the `image_std` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructs a TVLT image processor.
  prefs: []
  type: TYPE_NORMAL
- en: This processor can be used to prepare either videos or images for the model
    by converting images to 1-frame videos.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `preprocess`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/image_processing_tvlt.py#L253)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`videos` (`ImageInput`) — Images or videos to preprocess. Expects a single
    or batch of frames with pixel values ranging from 0 to 255\. If passing in frames
    with pixel values between 0 and 1, set `do_rescale=False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_resize` (`bool`, *optional*, defaults to `self.do_resize`) — Whether to
    resize the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (`Dict[str, int]`, *optional*, defaults to `self.size`) — Size of the
    image after applying resize.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`patch_size` (`List[int]` *optional*, defaults to self.patch_size) — The patch
    size of image patch embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_frames` (`int` *optional*, defaults to self.num_frames) — The maximum
    number of video frames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `self.resample`)
    — Resampling filter to use if resizing the image. This can be one of the enum
    `PILImageResampling`, Only has an effect if `do_resize` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_center_crop` (`bool`, *optional*, defaults to `self.do_centre_crop`) —
    Whether to centre crop the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `self.crop_size`) —
    Size of the image after applying the centre crop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_rescale` (`bool`, *optional*, defaults to `self.do_rescale`) — Whether
    to rescale the image values between [0 - 1].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rescale_factor` (`float`, *optional*, defaults to `self.rescale_factor`) —
    Rescale factor to rescale the image by if `do_rescale` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_normalize` (`bool`, *optional*, defaults to `self.do_normalize`) — Whether
    to normalize the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `self.image_mean`)
    — Image mean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `self.image_std`)
    — Image standard deviation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_mixed` (`bool`, *optional*) — If the input video has negative samples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or `TensorType`, *optional*) — The type of tensors
    to return. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Return a list of `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data_format` (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`)
    — The channel dimension format for the output image. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChannelDimension.FIRST`: image in (num_channels, height, width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChannelDimension.LAST`: image in (height, width, num_channels) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Use the inferred channel dimension format of the input image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) — The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A [BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)
    with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` — Pixel values to be fed to a model, of shape (batch_size, num_channels,
    height, width).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask` — Pixel masks to be fed to a model, of shape (batch_size, num_pixel_patches).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_values_mixed` — Pixel values with both postive or negative to be fed
    to a model, of shape (batch_size, num_channels, height, width).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask_mixed` — Pixel masks with both postive or negative to be fed to
    a model, of shape (batch_size, num_pixel_patches).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocess an videos or image or batch of videos or images.
  prefs: []
  type: TYPE_NORMAL
- en: TvltFeatureExtractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.TvltFeatureExtractor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/feature_extraction_tvlt.py#L30)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`spectrogram_length` (`Dict[str, int]` *optional*, defaults to 2048) — The
    time length of each audio spectrogram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_channels` (`int` *optional*, defaults to 1) — Number of audio channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`patch_size` (`List[int]` *optional*, defaults to `[16, 16]`) — The patch size
    of audio patch embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`feature_size` (`int`, *optional*, defaults to 128) — The frequency length
    of audio spectrogram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sampling_rate` (`int`, *optional*, defaults to 44100) — The sampling rate
    at which the audio files should be digitalized expressed in Hertz (Hz).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hop_length_to_sampling_rate` (`int`, *optional*, defaults to 86) — Hop length
    is length of the overlaping windows for the STFT used to obtain the Mel Frequency
    coefficients. For example, with sampling rate 44100, the hop length is 512, with
    44100 / 512 = 86'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n_fft` (`int`, *optional*, defaults to 2048) — Size of the Fourier transform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding_value` (`float`, *optional*, defaults to 0.0) — Padding value used
    to pad the audio. Should correspond to silences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructs a TVLT audio feature extractor. This feature extractor can be used
    to prepare audios for the model.
  prefs: []
  type: TYPE_NORMAL
- en: This feature extractor inherits from [FeatureExtractionMixin](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin)
    which contains most of the main methods. Users should refer to this superclass
    for more information regarding those methods.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `__call__`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/feature_extraction_tvlt.py#L116)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`raw_speech` (`np.ndarray`, `List[float]`, `List[np.ndarray]`, `List[List[float]]`)
    — The sequence or batch of sequences to be padded. Each sequence can be a numpy
    array, a list of float values, a list of numpy arrays or a list of list of float
    values. Must be mono channel audio, not stereo, i.e. single float per timestep.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) — If set, will return tensors instead of list of python integers.
    Acceptable values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''np''`: Return Numpy `np.ndarray` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_attention_mask` (`bool`, *optional*, default to `True`) — Whether to
    return the attention mask. If left to the default, will return the attention mask
    according to the specific feature_extractor’s default. [What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For TvltTransformer models, `attention_mask` should alwys be passed for batched
    inference, to avoid subtle bugs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`sampling_rate` (`int`, *optional*) — The sampling rate at which the `raw_speech`
    input was sampled. It is strongly recommended to pass `sampling_rate` at the forward
    call to prevent silent errors and allow automatic speech recognition pipeline.
    Current model supports sampling rate 16000 and 44100.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resample` (`bool`, *optional*, defaults to `False`) — If the sampling rate
    is not matched, resample the input audio to match.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_audio` (`bool`, *optional*, defaults to `False`) — Whether or not to
    mask input audio for MAE task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A [BatchFeature](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.BatchFeature)
    with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`audio_values` — Audio values to be fed to a model, of shape (batch_size, num_channels,
    height, width).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_mask` — Audio masks to be fed to a model, of shape (batch_size, num_audio_patches).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main method to prepare one or several audio(s) for the model.
  prefs: []
  type: TYPE_NORMAL
- en: TvltModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.TvltModel`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L670)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bare TVLT Model transformer outputting raw hidden-states without any specific
    head on top. This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L704)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_frames, num_channels,
    height, width)`) — Pixel values. Pixel values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Audio values. Audio values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask` (`torch.FloatTensor` of shape `(batch_size, num_pixel_patches)`)
    — Pixel masks. Pixel masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_mask` (`torch.FloatTensor` of shape `(batch_size, num_audio_patches)`)
    — Audio masks. Audio masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — Pixel values that mix positive and negative samples
    in Tvlt vision-audio matching. Pixel values mixed can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel masks of pixel_values_mixed. Pixel masks mixed can be
    obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_pixel` (`bool`, *optional*) — Whether to mask pixel for MAE tasks. Only
    set to True in TvltForPreTraining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_audio` (`bool`, *optional*) — Whether to mask audio for MAE tasks. Only
    set to True in TvltForPreTraining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.tvlt.modeling_tvlt.TvltModelOutput` or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.tvlt.modeling_tvlt.TvltModelOutput` or a tuple of `torch.FloatTensor`
    (if `return_dict=False` is passed or when `config.return_dict=False`) comprising
    various elements depending on the configuration ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`) — Sequence of hidden-states at the output of the last layer of
    the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_pixel_hidden_state` (`torch.FloatTensor` of shape `(batch_size, pixel_sequence_length,
    hidden_size)`) — Pixel sequence of hidden-states at the output of the last layer
    of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_audio_hidden_state` (`torch.FloatTensor` of shape `(batch_size, audio_sequence_length,
    hidden_size)`) — Audio sequence of hidden-states at the output of the last layer
    of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_label_masks` (`torch.FloatTensor` of shape `(batch_size, pixel_patch_length)`)
    — Tensor indicating which pixel patches are masked (1) and which are not (0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_label_masks` (`torch.FloatTensor` of shape `(batch_size, audio_patch_length)`)
    — Tensor indicating which audio patches are masked (1) and which are not (0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_ids_restore` (`torch.LongTensor` of shape `(batch_size, pixel_patch_length)`)
    — Tensor containing the ids permutation of pixel masking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_ids_restore` (`torch.LongTensor` of shape `(batch_size, audio_patch_length)`)
    — Tensor containing the ids permutation of audio masking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings and one for the output of each layer) of
    shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the model
    at the output of each layer plus the initial embedding outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Attentions weights after the attention softmax, used to compute the weighted average
    in the self-attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [TvltModel](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltModel)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: TvltForPreTraining
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.TvltForPreTraining`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L895)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TVLT Model transformer with the decoder on top for self-supervised pre-training.
    This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L1032)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_frames, num_channels,
    height, width)`) — Pixel values. Pixel values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Audio values. Audio values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask` (`torch.FloatTensor` of shape `(batch_size, num_pixel_patches)`)
    — Pixel masks. Pixel masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_mask` (`torch.FloatTensor` of shape `(batch_size, num_audio_patches)`)
    — Audio masks. Audio masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — Pixel values that mix positive and negative samples
    in Tvlt vision-audio matching. Pixel values mixed can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel masks of pixel_values_mixed. Pixel masks mixed can be
    obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_pixel` (`bool`, *optional*) — Whether to mask pixel for MAE tasks. Only
    set to True in TvltForPreTraining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_audio` (`bool`, *optional*) — Whether to mask audio for MAE tasks. Only
    set to True in TvltForPreTraining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — Pixel values that mix positive and negative samples
    in Tvlt vision-audio matching. Audio values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel masks of pixel_values_mixed. Pixel values mixed can be
    obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labels` (`torch.LongTensor` of shape `(batch_size, num_labels)`, *optional*)
    — Labels for computing the vision audio matching loss. Indices should be in `[0,
    1]`. num_labels has to be 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.tvlt.modeling_tvlt.TvltForPreTrainingOutput` or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.tvlt.modeling_tvlt.TvltForPreTrainingOutput` or a tuple
    of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`) — Pixel reconstruction loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`matching_logits` (`torch.FloatTensor` of shape `(batch_size, 1)`) — Matching
    objective logits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_logits` (`torch.FloatTensor` of shape `(batch_size, pixel_patch_length,
    image_patch_size ** 3 * pixel_num_channels)`): Pixel reconstruction logits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_logits` (`torch.FloatTensor` of shape `(batch_size, audio_patch_length,
    image_patch_size[0] * image_patch_size[1])`): Audio reconstruction logits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings and one for the output of each layer) of
    shape `(batch_size, sequence_length, hidden_size)`. Hidden-states of the model
    at the output of each layer plus the initial embedding outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Attentions weights after the attention softmax, used to compute the weighted average
    in the self-attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [TvltForPreTraining](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltForPreTraining)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: TvltForAudioVisualClassification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.TvltForAudioVisualClassification`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L1208)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tvlt Model transformer with a classifier head on top (an MLP on top of the final
    hidden state of the [CLS] token) for audiovisual classification tasks, e.g. CMU-MOSEI
    Sentiment Analysis and Audio to Video Retrieval.
  prefs: []
  type: TYPE_NORMAL
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/tvlt/modeling_tvlt.py#L1233)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_frames, num_channels,
    height, width)`) — Pixel values. Pixel values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Audio values. Audio values can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask` (`torch.FloatTensor` of shape `(batch_size, num_pixel_patches)`)
    — Pixel masks. Pixel masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`audio_mask` (`torch.FloatTensor` of shape `(batch_size, num_audio_patches)`)
    — Audio masks. Audio masks can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_values_mixed` (`torch.FloatTensor` of shape `(batch_size, num_frames,
    num_channels, height, width)`) — Pixel values that mix positive and negative samples
    in Tvlt vision-audio matching. Pixel values mixed can be obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixel_mask_mixed` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel masks of pixel_values_mixed. Pixel masks mixed can be
    obtained using [TvltProcessor](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor).
    See [TvltProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltProcessor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_pixel` (`bool`, *optional*) — Whether to mask pixel for MAE tasks. Only
    set to True in TvltForPreTraining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_audio` (`bool`, *optional*) — Whether to mask audio for MAE tasks. Only
    set to True in TvltForPreTraining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labels` (`torch.LongTensor` of shape `(batch_size, num_labels)`, *optional*)
    — Labels for computing the audiovisual loss. Indices should be in `[0, ..., num_classes-1]`
    where num_classes refers to the number of classes in audiovisual tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.modeling_outputs.SequenceClassifierOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.modeling_outputs.SequenceClassifierOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([TvltConfig](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Classification (or regression if config.num_labels==1) loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`) —
    Classification (or regression if config.num_labels==1) scores (before SoftMax).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights after the attention softmax, used to compute the weighted
    average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [TvltForAudioVisualClassification](/docs/transformers/v4.37.2/en/model_doc/tvlt#transformers.TvltForAudioVisualClassification)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
