["```py\n>>> from transformers import EfficientNetConfig, EfficientNetModel\n\n>>> # Initializing a EfficientNet efficientnet-b7 style configuration\n>>> configuration = EfficientNetConfig()\n\n>>> # Initializing a model (with random weights) from the efficientnet-b7 style configuration\n>>> model = EfficientNetModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, EfficientNetModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"google/efficientnet-b7\")\n>>> model = EfficientNetModel.from_pretrained(\"google/efficientnet-b7\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 768, 7, 7]\n```", "```py\n>>> from transformers import AutoImageProcessor, EfficientNetForImageClassification\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"google/efficientnet-b7\")\n>>> model = EfficientNetForImageClassification.from_pretrained(\"google/efficientnet-b7\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = logits.argmax(-1).item()\n>>> print(model.config.id2label[predicted_label])\ntabby, tabby cat\n```"]