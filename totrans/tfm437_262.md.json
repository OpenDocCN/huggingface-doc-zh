["```py\n>>> from transformers import DetrForObjectDetection\n\n>>> model = DetrForObjectDetection.from_pretrained(\"facebook/detr-resnet-50\")\n```", "```py\n>>> from transformers import DetrConfig, DetrForObjectDetection\n\n>>> config = DetrConfig()\n>>> model = DetrForObjectDetection(config)\n```", "```py\n>>> config = DetrConfig(use_pretrained_backbone=False)\n>>> model = DetrForObjectDetection(config)\n```", "```py\n>>> from transformers import DetrConfig, DetrModel\n\n>>> # Initializing a DETR facebook/detr-resnet-50 style configuration\n>>> configuration = DetrConfig()\n\n>>> # Initializing a model (with random weights) from the facebook/detr-resnet-50 style configuration\n>>> model = DetrModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, DetrModel\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/detr-resnet-50\")\n>>> model = DetrModel.from_pretrained(\"facebook/detr-resnet-50\")\n\n>>> # prepare image for the model\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n\n>>> # forward pass\n>>> outputs = model(**inputs)\n\n>>> # the last hidden states are the final query embeddings of the Transformer decoder\n>>> # these are of shape (batch_size, num_queries, hidden_size)\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 100, 256]\n```", "```py\n>>> from transformers import AutoImageProcessor, DetrForObjectDetection\n>>> import torch\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/detr-resnet-50\")\n>>> model = DetrForObjectDetection.from_pretrained(\"facebook/detr-resnet-50\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> # convert outputs (bounding boxes and class logits) to Pascal VOC format (xmin, ymin, xmax, ymax)\n>>> target_sizes = torch.tensor([image.size[::-1]])\n>>> results = image_processor.post_process_object_detection(outputs, threshold=0.9, target_sizes=target_sizes)[\n...     0\n... ]\n\n>>> for score, label, box in zip(results[\"scores\"], results[\"labels\"], results[\"boxes\"]):\n...     box = [round(i, 2) for i in box.tolist()]\n...     print(\n...         f\"Detected {model.config.id2label[label.item()]} with confidence \"\n...         f\"{round(score.item(), 3)} at location {box}\"\n...     )\nDetected remote with confidence 0.998 at location [40.16, 70.81, 175.55, 117.98]\nDetected remote with confidence 0.996 at location [333.24, 72.55, 368.33, 187.66]\nDetected couch with confidence 0.995 at location [-0.02, 1.15, 639.73, 473.76]\nDetected cat with confidence 0.999 at location [13.24, 52.05, 314.02, 470.93]\nDetected cat with confidence 0.999 at location [345.4, 23.85, 640.37, 368.72]\n```", "```py\n>>> import io\n>>> import requests\n>>> from PIL import Image\n>>> import torch\n>>> import numpy\n\n>>> from transformers import AutoImageProcessor, DetrForSegmentation\n>>> from transformers.image_transforms import rgb_to_id\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/detr-resnet-50-panoptic\")\n>>> model = DetrForSegmentation.from_pretrained(\"facebook/detr-resnet-50-panoptic\")\n\n>>> # prepare image for the model\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n\n>>> # forward pass\n>>> outputs = model(**inputs)\n\n>>> # Use the `post_process_panoptic_segmentation` method of the `image_processor` to retrieve post-processed panoptic segmentation maps\n>>> # Segmentation results are returned as a list of dictionaries\n>>> result = image_processor.post_process_panoptic_segmentation(outputs, target_sizes=[(300, 500)])\n\n>>> # A tensor of shape (height, width) where each value denotes a segment id, filled with -1 if no segment is found\n>>> panoptic_seg = result[0][\"segmentation\"]\n>>> # Get prediction score and segment_id to class_id mapping of each segment\n>>> panoptic_segments_info = result[0][\"segments_info\"]\n```"]