["```py\n( )\n```", "```py\n( model: PreTrainedModel device: Optional = None parallelize_embeddings: bool = True sequence_parallel_enabled: bool = False ) \u2192 export const metadata = 'undefined';PreTrainedModel\n```", "```py\n( model: PreTrainedModel device: Optional = None parallelize_embeddings: bool = True sequence_parallel_enabled: bool = False pipeline_parallel_input_names: Union = None pipeline_parallel_num_microbatches: int = 1 pipeline_parallel_use_zero1_optimizer: bool = False checkpoint_dir: Union = None ) \u2192 export const metadata = 'undefined';PreTrainedModel\n```", "```py\n( optimizer: torch.optim.Optimizer orig_param_to_parallel_param_on_xla: Mapping ) \u2192 export const metadata = 'undefined';torch.optim.Optimizer\n```", "```py\n( model: PreTrainedModel output_dir: Union as_regular: bool = False as_sharded: bool = True optimizer: Optional = None )\n```", "```py\n( model: PreTrainedModel load_dir: Union )\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( model_type_or_model: Union )\n```", "```py\n( model_type_or_model: Union )\n```", "```py\n( tensor_parallel_size: int = 1 pipeline_parallel_size: int = 1 )\n```", "```py\n( optimizer_cls: Type )\n```"]