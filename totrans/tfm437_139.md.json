["```py\n>>> from transformers import BigBirdConfig, BigBirdModel\n\n>>> # Initializing a BigBird google/bigbird-roberta-base style configuration\n>>> configuration = BigBirdConfig()\n\n>>> # Initializing a model (with random weights) from the google/bigbird-roberta-base style configuration\n>>> model = BigBirdModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1\n| first sequence    | second sequence |\n```", "```py\n>>> from transformers import AutoTokenizer, BigBirdModel\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = BigBirdModel.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, BigBirdForPreTraining\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = BigBirdForPreTraining.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> prediction_logits = outputs.prediction_logits\n>>> seq_relationship_logits = outputs.seq_relationship_logits\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, BigBirdForCausalLM\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = BigBirdForCausalLM.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs, labels=inputs[\"input_ids\"])\n>>> loss = outputs.loss\n>>> logits = outputs.logits\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, BigBirdForMaskedLM\n>>> from datasets import load_dataset\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = BigBirdForMaskedLM.from_pretrained(\"google/bigbird-roberta-base\")\n>>> squad_ds = load_dataset(\"squad_v2\", split=\"train\")\n>>> # select random long article\n>>> LONG_ARTICLE_TARGET = squad_ds[81514][\"context\"]\n>>> # select random sentence\n>>> LONG_ARTICLE_TARGET[332:398]\n'the highest values are very close to the theoretical maximum value'\n\n>>> # add mask_token\n>>> LONG_ARTICLE_TO_MASK = LONG_ARTICLE_TARGET.replace(\"maximum\", \"[MASK]\")\n>>> inputs = tokenizer(LONG_ARTICLE_TO_MASK, return_tensors=\"pt\")\n>>> # long article input\n>>> list(inputs[\"input_ids\"].shape)\n[1, 919]\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n>>> # retrieve index of [MASK]\n>>> mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[0].nonzero(as_tuple=True)[0]\n>>> predicted_token_id = logits[0, mask_token_index].argmax(axis=-1)\n>>> tokenizer.decode(predicted_token_id)\n'maximum'\n```", "```py\n>>> labels = tokenizer(LONG_ARTICLE_TARGET, return_tensors=\"pt\")[\"input_ids\"]\n>>> labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -100)\n>>> outputs = model(**inputs, labels=labels)\n>>> round(outputs.loss.item(), 2)\n1.99\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, BigBirdForSequenceClassification\n>>> from datasets import load_dataset\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"l-yohai/bigbird-roberta-base-mnli\")\n>>> model = BigBirdForSequenceClassification.from_pretrained(\"l-yohai/bigbird-roberta-base-mnli\")\n>>> squad_ds = load_dataset(\"squad_v2\", split=\"train\")\n>>> LONG_ARTICLE = squad_ds[81514][\"context\"]\n>>> inputs = tokenizer(LONG_ARTICLE, return_tensors=\"pt\")\n>>> # long input article\n>>> list(inputs[\"input_ids\"].shape)\n[1, 919]\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n>>> predicted_class_id = logits.argmax().item()\n>>> model.config.id2label[predicted_class_id]\n'LABEL_0'\n```", "```py\n>>> num_labels = len(model.config.id2label)\n>>> model = BigBirdForSequenceClassification.from_pretrained(\n...     \"l-yohai/bigbird-roberta-base-mnli\", num_labels=num_labels\n... )\n>>> labels = torch.tensor(1)\n>>> loss = model(**inputs, labels=labels).loss\n>>> round(loss.item(), 2)\n1.13\n```", "```py\n>>> from transformers import AutoTokenizer, BigBirdForMultipleChoice\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = BigBirdForMultipleChoice.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> prompt = \"In Italy, pizza served in formal settings, such as at a restaurant, is presented unsliced.\"\n>>> choice0 = \"It is eaten with a fork and a knife.\"\n>>> choice1 = \"It is eaten while held in the hand.\"\n>>> labels = torch.tensor(0).unsqueeze(0)  # choice0 is correct (according to Wikipedia ;)), batch size 1\n\n>>> encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors=\"pt\", padding=True)\n>>> outputs = model(**{k: v.unsqueeze(0) for k, v in encoding.items()}, labels=labels)  # batch size is 1\n\n>>> # the linear classifier still needs to be trained\n>>> loss = outputs.loss\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, BigBirdForTokenClassification\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = BigBirdForTokenClassification.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> inputs = tokenizer(\n...     \"HuggingFace is a company based in Paris and New York\", add_special_tokens=False, return_tensors=\"pt\"\n... )\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_token_class_ids = logits.argmax(-1)\n\n>>> # Note that tokens are classified rather then input words which means that\n>>> # there might be more predicted token classes than words.\n>>> # Multiple token classes might account for the same word\n>>> predicted_tokens_classes = [model.config.id2label[t.item()] for t in predicted_token_class_ids[0]]\n\n>>> labels = predicted_token_class_ids\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, BigBirdForQuestionAnswering\n>>> from datasets import load_dataset\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = BigBirdForQuestionAnswering.from_pretrained(\"google/bigbird-roberta-base\")\n>>> squad_ds = load_dataset(\"squad_v2\", split=\"train\")\n>>> # select random article and question\n>>> LONG_ARTICLE = squad_ds[81514][\"context\"]\n>>> QUESTION = squad_ds[81514][\"question\"]\n>>> QUESTION\n'During daytime how high can the temperatures reach?'\n\n>>> inputs = tokenizer(QUESTION, LONG_ARTICLE, return_tensors=\"pt\")\n>>> # long article and question input\n>>> list(inputs[\"input_ids\"].shape)\n[1, 929]\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> answer_start_index = outputs.start_logits.argmax()\n>>> answer_end_index = outputs.end_logits.argmax()\n>>> predict_answer_token_ids = inputs.input_ids[0, answer_start_index : answer_end_index + 1]\n>>> predict_answer_token = tokenizer.decode(predict_answer_token_ids)\n```", "```py\n>>> target_start_index, target_end_index = torch.tensor([130]), torch.tensor([132])\n>>> outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)\n>>> loss = outputs.loss\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxBigBirdModel\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = FlaxBigBirdModel.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"jax\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxBigBirdForPreTraining\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = FlaxBigBirdForPreTraining.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"np\")\n>>> outputs = model(**inputs)\n\n>>> prediction_logits = outputs.prediction_logits\n>>> seq_relationship_logits = outputs.seq_relationship_logits\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxBigBirdForCausalLM\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = FlaxBigBirdForCausalLM.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"np\")\n>>> outputs = model(**inputs)\n\n>>> # retrieve logts for next token\n>>> next_token_logits = outputs.logits[:, -1]\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxBigBirdForMaskedLM\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = FlaxBigBirdForMaskedLM.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> inputs = tokenizer(\"The capital of France is [MASK].\", return_tensors=\"jax\")\n\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxBigBirdForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = FlaxBigBirdForSequenceClassification.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"jax\")\n\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxBigBirdForMultipleChoice\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = FlaxBigBirdForMultipleChoice.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> prompt = \"In Italy, pizza served in formal settings, such as at a restaurant, is presented unsliced.\"\n>>> choice0 = \"It is eaten with a fork and a knife.\"\n>>> choice1 = \"It is eaten while held in the hand.\"\n\n>>> encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors=\"jax\", padding=True)\n>>> outputs = model(**{k: v[None, :] for k, v in encoding.items()})\n\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxBigBirdForTokenClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = FlaxBigBirdForTokenClassification.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"jax\")\n\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxBigBirdForQuestionAnswering\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/bigbird-roberta-base\")\n>>> model = FlaxBigBirdForQuestionAnswering.from_pretrained(\"google/bigbird-roberta-base\")\n\n>>> question, text = \"Who was Jim Henson?\", \"Jim Henson was a nice puppet\"\n>>> inputs = tokenizer(question, text, return_tensors=\"jax\")\n\n>>> outputs = model(**inputs)\n>>> start_scores = outputs.start_logits\n>>> end_scores = outputs.end_logits\n```"]