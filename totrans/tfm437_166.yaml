- en: FastSpeech2Conformer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FastSpeech2Conformer
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: The FastSpeech2Conformer model was proposed with the paper [Recent Developments
    On Espnet Toolkit Boosted By Conformer](https://arxiv.org/abs/2010.13956) by Pengcheng
    Guo, Florian Boyer, Xuankai Chang, Tomoki Hayashi, Yosuke Higuchi, Hirofumi Inaguma,
    Naoyuki Kamo, Chenda Li, Daniel Garcia-Romero, Jiatong Shi, Jing Shi, Shinji Watanabe,
    Kun Wei, Wangyou Zhang, and Yuekai Zhang.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: FastSpeech2Conformer 模型是由 Pengcheng Guo、Florian Boyer、Xuankai Chang、Tomoki Hayashi、Yosuke
    Higuchi、Hirofumi Inaguma、Naoyuki Kamo、Chenda Li、Daniel Garcia-Romero、Jiatong Shi、Jing
    Shi、Shinji Watanabe、Kun Wei、Wangyou Zhang 和 Yuekai Zhang 在论文 [Recent Developments
    On Espnet Toolkit Boosted By Conformer](https://arxiv.org/abs/2010.13956) 中提出的。
- en: 'The abstract from the original FastSpeech2 paper is the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 原始 FastSpeech2 论文的摘要如下：
- en: '*Non-autoregressive text to speech (TTS) models such as FastSpeech (Ren et
    al., 2019) can synthesize speech significantly faster than previous autoregressive
    models with comparable quality. The training of FastSpeech model relies on an
    autoregressive teacher model for duration prediction (to provide more information
    as input) and knowledge distillation (to simplify the data distribution in output),
    which can ease the one-to-many mapping problem (i.e., multiple speech variations
    correspond to the same text) in TTS. However, FastSpeech has several disadvantages:
    1) the teacher-student distillation pipeline is complicated and time-consuming,
    2) the duration extracted from the teacher model is not accurate enough, and the
    target mel-spectrograms distilled from teacher model suffer from information loss
    due to data simplification, both of which limit the voice quality. In this paper,
    we propose FastSpeech 2, which addresses the issues in FastSpeech and better solves
    the one-to-many mapping problem in TTS by 1) directly training the model with
    ground-truth target instead of the simplified output from teacher, and 2) introducing
    more variation information of speech (e.g., pitch, energy and more accurate duration)
    as conditional inputs. Specifically, we extract duration, pitch and energy from
    speech waveform and directly take them as conditional inputs in training and use
    predicted values in inference. We further design FastSpeech 2s, which is the first
    attempt to directly generate speech waveform from text in parallel, enjoying the
    benefit of fully end-to-end inference. Experimental results show that 1) FastSpeech
    2 achieves a 3x training speed-up over FastSpeech, and FastSpeech 2s enjoys even
    faster inference speed; 2) FastSpeech 2 and 2s outperform FastSpeech in voice
    quality, and FastSpeech 2 can even surpass autoregressive models. Audio samples
    are available at [https://speechresearch.github.io/fastspeech2/](https://speechresearch.github.io/fastspeech2/).*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*非自回归文本到语音（TTS）模型，如 FastSpeech（Ren 等，2019），可以比以前的具有可比质量的自回归模型更快地合成语音。FastSpeech
    模型的训练依赖于自回归教师模型进行持续时间预测（提供更多信息作为输入）和知识蒸馏（简化输出中的数据分布），这可以缓解 TTS 中的一对多映射问题（即，多种语音变体对应相同的文本）。然而，FastSpeech
    有几个缺点：1）教师-学生蒸馏流程复杂且耗时，2）从教师模型提取的持续时间不够准确，从教师模型蒸馏的目标 mel-频谱图由于数据简化而遭受信息丢失，这两者限制了语音质量。在本文中，我们提出了
    FastSpeech 2，它解决了 FastSpeech 中的问题，并通过以下方式更好地解决了 TTS 中的一对多映射问题：1）直接使用地面真实目标训练模型，而不是来自教师的简化输出，2）引入更多语音变体信息（例如，音高、能量和更准确的持续时间）作为条件输入。具体来说，我们从语音波形中提取持续时间、音高和能量，并直接将它们作为条件输入进行训练，并在推断中使用预测值。我们进一步设计了
    FastSpeech 2s，这是第一次尝试从文本中并行直接生成语音波形，享受完全端到端推断的好处。实验结果表明：1）FastSpeech 2 比 FastSpeech
    实现了 3 倍的训练加速，FastSpeech 2s 甚至享有更快的推断速度；2）FastSpeech 2 和 2s 在语音质量上优于 FastSpeech，FastSpeech
    2 甚至可以超越自回归模型。音频样本可在 [https://speechresearch.github.io/fastspeech2/](https://speechresearch.github.io/fastspeech2/)
    上找到。*'
- en: This model was contributed by [Connor Henderson](https://huggingface.co/connor-henderson).
    The original code can be found [here](https://github.com/espnet/espnet/blob/master/espnet2/tts/fastspeech2/fastspeech2.py).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型由 [Connor Henderson](https://huggingface.co/connor-henderson) 贡献。原始代码可以在
    [这里](https://github.com/espnet/espnet/blob/master/espnet2/tts/fastspeech2/fastspeech2.py)
    找到。
- en: 🤗 Model Architecture
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 🤗 模型架构
- en: FastSpeech2’s general structure with a Mel-spectrogram decoder was implemented,
    and the traditional transformer blocks were replaced with with conformer blocks
    as done in the ESPnet library.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: FastSpeech2 的一般结构与 Mel 频谱图解码器一起实现，并且传统的 transformer blocks 被 ESPnet 库中的 conformer
    blocks 替换。
- en: FastSpeech2 Model Architecture
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: FastSpeech2 模型架构
- en: '![FastSpeech2 Model Architecture](../Images/19e41c7c11474d823ed6b65f4b973faf.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![FastSpeech2 模型架构](../Images/19e41c7c11474d823ed6b65f4b973faf.png)'
- en: Conformer Blocks
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Conformer Blocks
- en: '![Conformer Blocks](../Images/e85e7a628d66d560dd93c3858c0061c8.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Conformer Blocks](../Images/e85e7a628d66d560dd93c3858c0061c8.png)'
- en: Convolution Module
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 卷积模块
- en: '![Convolution Module](../Images/9f1bb141278007107620b1e6640f061e.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![卷积模块](../Images/9f1bb141278007107620b1e6640f061e.png)'
- en: 🤗 Transformers Usage
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 🤗 Transformers 使用
- en: You can run FastSpeech2Conformer locally with the 🤗 Transformers library.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 🤗 Transformers 库中本地运行 FastSpeech2Conformer。
- en: 'First install the 🤗 [Transformers library](https://github.com/huggingface/transformers),
    g2p-en:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先安装 🤗 [Transformers 库](https://github.com/huggingface/transformers)，g2p-en：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Run inference via the Transformers modelling code with the model and hifigan
    separately
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 Transformers 建模代码分别运行推断，使用模型和 hifigan
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Run inference via the Transformers modelling code with the model and hifigan
    combined
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 Transformers 建模代码结合模型和 hifigan 运行推断
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run inference with a pipeline and specify which vocoder to use
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用管道运行推断，并指定要使用的声码器
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: FastSpeech2ConformerConfig
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FastSpeech2ConformerConfig
- en: '### `class transformers.FastSpeech2ConformerConfig`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.FastSpeech2ConformerConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/configuration_fastspeech2_conformer.py#L39)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/configuration_fastspeech2_conformer.py#L39)'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`hidden_size` (`int`, *optional*, defaults to 384) — The dimensionality of
    the hidden layers.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_size` (`int`, *optional*, defaults to 384) — 隐藏层的维度。'
- en: '`vocab_size` (`int`, *optional*, defaults to 78) — The size of the vocabulary.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vocab_size` (`int`, *optional*, defaults to 78) — 词汇表的大小。'
- en: '`num_mel_bins` (`int`, *optional*, defaults to 80) — The number of mel filters
    used in the filter bank.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_mel_bins` (`int`, *optional*, defaults to 80) — 滤波器组中使用的mel滤波器数量。'
- en: '`encoder_num_attention_heads` (`int`, *optional*, defaults to 2) — The number
    of attention heads in the encoder.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_num_attention_heads` (`int`, *optional*, defaults to 2) — 编码器中的注意力头数。'
- en: '`encoder_layers` (`int`, *optional*, defaults to 4) — The number of layers
    in the encoder.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_layers` (`int`, *optional*, defaults to 4) — 编码器中的层数。'
- en: '`encoder_linear_units` (`int`, *optional*, defaults to 1536) — The number of
    units in the linear layer of the encoder.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_linear_units` (`int`, *optional*, defaults to 1536) — 编码器中线性层的单元数。'
- en: '`decoder_layers` (`int`, *optional*, defaults to 4) — The number of layers
    in the decoder.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_layers` (`int`, *optional*, defaults to 4) — 解码器中的层数。'
- en: '`decoder_num_attention_heads` (`int`, *optional*, defaults to 2) — The number
    of attention heads in the decoder.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_num_attention_heads` (`int`, *optional*, defaults to 2) — 解码器中的注意力头数。'
- en: '`decoder_linear_units` (`int`, *optional*, defaults to 1536) — The number of
    units in the linear layer of the decoder.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_linear_units` (`int`, *optional*, defaults to 1536) — 解码器中线性层的单元数。'
- en: '`speech_decoder_postnet_layers` (`int`, *optional*, defaults to 5) — The number
    of layers in the post-net of the speech decoder.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speech_decoder_postnet_layers` (`int`, *optional*, defaults to 5) — 语音解码器后处理网络中的层数。'
- en: '`speech_decoder_postnet_units` (`int`, *optional*, defaults to 256) — The number
    of units in the post-net layers of the speech decoder.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speech_decoder_postnet_units` (`int`, *optional*, defaults to 256) — 语音解码器后处理网络中的单元数。'
- en: '`speech_decoder_postnet_kernel` (`int`, *optional*, defaults to 5) — The kernel
    size in the post-net of the speech decoder.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speech_decoder_postnet_kernel` (`int`, *optional*, defaults to 5) — 语音解码器后处理网络中的卷积核大小。'
- en: '`positionwise_conv_kernel_size` (`int`, *optional*, defaults to 3) — The size
    of the convolution kernel used in the position-wise layer.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`positionwise_conv_kernel_size` (`int`, *optional*, defaults to 3) — 位置感知层中使用的卷积核大小。'
- en: '`encoder_normalize_before` (`bool`, *optional*, defaults to `False`) — Specifies
    whether to normalize before encoder layers.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_normalize_before` (`bool`, *optional*, defaults to `False`) — 指定是否在编码器层之前进行归一化。'
- en: '`decoder_normalize_before` (`bool`, *optional*, defaults to `False`) — Specifies
    whether to normalize before decoder layers.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_normalize_before` (`bool`, *optional*, defaults to `False`) — 指定是否在解码器层之前进行归一化。'
- en: '`encoder_concat_after` (`bool`, *optional*, defaults to `False`) — Specifies
    whether to concatenate after encoder layers.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_concat_after` (`bool`, *optional*, defaults to `False`) — 指定是否在编码器层之后进行连接。'
- en: '`decoder_concat_after` (`bool`, *optional*, defaults to `False`) — Specifies
    whether to concatenate after decoder layers.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_concat_after` (`bool`, *optional*, defaults to `False`) — 指定是否在解码器层之后进行连接。'
- en: '`reduction_factor` (`int`, *optional*, defaults to 1) — The factor by which
    the speech frame rate is reduced.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reduction_factor` (`int`, *optional*, defaults to 1) — 语音帧速率减少的因子。'
- en: '`speaking_speed` (`float`, *optional*, defaults to 1.0) — The speed of the
    speech produced.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speaking_speed` (`float`, *optional*, defaults to 1.0) — 生成语音的速度。'
- en: '`use_macaron_style_in_conformer` (`bool`, *optional*, defaults to `True`) —
    Specifies whether to use macaron style in the conformer.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_macaron_style_in_conformer` (`bool`, *optional*, defaults to `True`) —
    指定是否在conformer中使用macaron风格。'
- en: '`use_cnn_in_conformer` (`bool`, *optional*, defaults to `True`) — Specifies
    whether to use convolutional neural networks in the conformer.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_cnn_in_conformer` (`bool`, *optional*, defaults to `True`) — 指定是否在conformer中使用卷积神经网络。'
- en: '`encoder_kernel_size` (`int`, *optional*, defaults to 7) — The kernel size
    used in the encoder.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_kernel_size` (`int`, *optional*, defaults to 7) — 编码器中使用的卷积核大小。'
- en: '`decoder_kernel_size` (`int`, *optional*, defaults to 31) — The kernel size
    used in the decoder.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_kernel_size` (`int`, *optional*, defaults to 31) — 解码器中使用的卷积核大小。'
- en: '`duration_predictor_layers` (`int`, *optional*, defaults to 2) — The number
    of layers in the duration predictor.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration_predictor_layers` (`int`, *optional*, defaults to 2) — 预测器中的层数。'
- en: '`duration_predictor_channels` (`int`, *optional*, defaults to 256) — The number
    of channels in the duration predictor.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration_predictor_channels` (`int`, *optional*, defaults to 256) — 预测器中通道的数量。'
- en: '`duration_predictor_kernel_size` (`int`, *optional*, defaults to 3) — The kernel
    size used in the duration predictor.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration_predictor_kernel_size` (`int`, *optional*, defaults to 3) — 预测器中使用的卷积核大小。'
- en: '`energy_predictor_layers` (`int`, *optional*, defaults to 2) — The number of
    layers in the energy predictor.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`energy_predictor_layers` (`int`, *optional*, defaults to 2) — 能量预测器中的层数。'
- en: '`energy_predictor_channels` (`int`, *optional*, defaults to 256) — The number
    of channels in the energy predictor.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`energy_predictor_channels` (`int`, *optional*, defaults to 256) — 能量预测器中的通道数。'
- en: '`energy_predictor_kernel_size` (`int`, *optional*, defaults to 3) — The kernel
    size used in the energy predictor.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`energy_predictor_kernel_size` (`int`, *optional*, defaults to 3) — 能量预测器中使用的卷积核大小。'
- en: '`energy_predictor_dropout` (`float`, *optional*, defaults to 0.5) — The dropout
    rate in the energy predictor.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`energy_predictor_dropout` (`float`, *optional*, defaults to 0.5) — 能量预测器中的dropout率。'
- en: '`energy_embed_kernel_size` (`int`, *optional*, defaults to 1) — The kernel
    size used in the energy embed layer.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`energy_embed_kernel_size` (`int`, *optional*, defaults to 1) — 能量嵌入层中使用的卷积核大小。'
- en: '`energy_embed_dropout` (`float`, *optional*, defaults to 0.0) — The dropout
    rate in the energy embed layer.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`energy_embed_dropout` (`float`, *optional*, defaults to 0.0) — 能量嵌入层中的dropout率。'
- en: '`stop_gradient_from_energy_predictor` (`bool`, *optional*, defaults to `False`)
    — Specifies whether to stop gradients from the energy predictor.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop_gradient_from_energy_predictor` (`bool`, *optional*, defaults to `False`)
    — 指定是否从能量预测器中停止梯度。'
- en: '`pitch_predictor_layers` (`int`, *optional*, defaults to 5) — The number of
    layers in the pitch predictor.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pitch_predictor_layers` (`int`, *optional*, defaults to 5) — 音高预测器中的层数。'
- en: '`pitch_predictor_channels` (`int`, *optional*, defaults to 256) — The number
    of channels in the pitch predictor.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pitch_predictor_channels` (`int`, *optional*, defaults to 256) — 音高预测器中的通道数。'
- en: '`pitch_predictor_kernel_size` (`int`, *optional*, defaults to 5) — The kernel
    size used in the pitch predictor.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pitch_predictor_kernel_size` (`int`, *optional*, defaults to 5) — 音高预测器中使用的内核大小。'
- en: '`pitch_predictor_dropout` (`float`, *optional*, defaults to 0.5) — The dropout
    rate in the pitch predictor.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pitch_predictor_dropout` (`float`, *optional*, defaults to 0.5) — 音高预测器中的dropout率。'
- en: '`pitch_embed_kernel_size` (`int`, *optional*, defaults to 1) — The kernel size
    used in the pitch embed layer.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pitch_embed_kernel_size` (`int`, *optional*, defaults to 1) — 音高嵌入层中使用的内核大小。'
- en: '`pitch_embed_dropout` (`float`, *optional*, defaults to 0.0) — The dropout
    rate in the pitch embed layer.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pitch_embed_dropout` (`float`, *optional*, defaults to 0.0) — 音高嵌入层中的dropout率。'
- en: '`stop_gradient_from_pitch_predictor` (`bool`, *optional*, defaults to `True`)
    — Specifies whether to stop gradients from the pitch predictor.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop_gradient_from_pitch_predictor` (`bool`, *optional*, defaults to `True`)
    — 指定是否停止来自音高预测器的梯度。'
- en: '`encoder_dropout_rate` (`float`, *optional*, defaults to 0.2) — The dropout
    rate in the encoder.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_dropout_rate` (`float`, *optional*, defaults to 0.2) — 编码器中的dropout率。'
- en: '`encoder_positional_dropout_rate` (`float`, *optional*, defaults to 0.2) —
    The positional dropout rate in the encoder.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_positional_dropout_rate` (`float`, *optional*, defaults to 0.2) —
    编码器中的位置dropout率。'
- en: '`encoder_attention_dropout_rate` (`float`, *optional*, defaults to 0.2) — The
    attention dropout rate in the encoder.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_attention_dropout_rate` (`float`, *optional*, defaults to 0.2) — 编码器中的注意力dropout率。'
- en: '`decoder_dropout_rate` (`float`, *optional*, defaults to 0.2) — The dropout
    rate in the decoder.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_dropout_rate` (`float`, *optional*, defaults to 0.2) — 解码器中的dropout率。'
- en: '`decoder_positional_dropout_rate` (`float`, *optional*, defaults to 0.2) —
    The positional dropout rate in the decoder.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_positional_dropout_rate` (`float`, *optional*, defaults to 0.2) —
    解码器中的位置dropout率。'
- en: '`decoder_attention_dropout_rate` (`float`, *optional*, defaults to 0.2) — The
    attention dropout rate in the decoder.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_attention_dropout_rate` (`float`, *optional*, defaults to 0.2) — 解码器中的注意力dropout率。'
- en: '`duration_predictor_dropout_rate` (`float`, *optional*, defaults to 0.2) —
    The dropout rate in the duration predictor.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration_predictor_dropout_rate` (`float`, *optional*, defaults to 0.2) —
    持续时间预测器中的dropout率。'
- en: '`speech_decoder_postnet_dropout` (`float`, *optional*, defaults to 0.5) — The
    dropout rate in the speech decoder postnet.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speech_decoder_postnet_dropout` (`float`, *optional*, defaults to 0.5) — 语音解码器后置网络中的dropout率。'
- en: '`max_source_positions` (`int`, *optional*, defaults to 5000) — if `"relative"`
    position embeddings are used, defines the maximum source input positions.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_source_positions` (`int`, *optional*, defaults to 5000) — 如果使用“相对”位置嵌入，则定义最大源输入位置。'
- en: '`use_masking` (`bool`, *optional*, defaults to `True`) — Specifies whether
    to use masking in the model.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_masking` (`bool`, *optional*, defaults to `True`) — 指定模型是否使用掩码。'
- en: '`use_weighted_masking` (`bool`, *optional*, defaults to `False`) — Specifies
    whether to use weighted masking in the model.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_weighted_masking` (`bool`, *optional*, defaults to `False`) — 指定模型是否使用加权掩码。'
- en: '`num_speakers` (`int`, *optional*) — Number of speakers. If set to > 1, assume
    that the speaker ids will be provided as the input and use speaker id embedding
    layer.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_speakers` (`int`, *optional*) — 说话者数量。如果设置为 > 1，则假定说话者id将作为输入提供，并使用说话者id嵌入层。'
- en: '`num_languages` (`int`, *optional*) — Number of languages. If set to > 1, assume
    that the language ids will be provided as the input and use the languge id embedding
    layer.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_languages` (`int`, *optional*) — 语言数量。如果设置为 > 1，则假定语言id将作为输入提供，并使用语言id嵌入层。'
- en: '`speaker_embed_dim` (`int`, *optional*) — Speaker embedding dimension. If set
    to > 0, assume that speaker_embedding will be provided as the input.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speaker_embed_dim` (`int`, *optional*) — 说话者嵌入维度。如果设置为 > 0，则假定将提供说话者嵌入作为输入。'
- en: '`is_encoder_decoder` (`bool`, *optional*, defaults to `True`) — Specifies whether
    the model is an encoder-decoder.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_encoder_decoder` (`bool`, *optional*, defaults to `True`) — 指定模型是否为编码器-解码器。'
- en: This is the configuration class to store the configuration of a [FastSpeech2ConformerModel](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerModel).
    It is used to instantiate a FastSpeech2Conformer model according to the specified
    arguments, defining the model architecture. Instantiating a configuration with
    the defaults will yield a similar configuration to that of the FastSpeech2Conformer
    [espnet/fastspeech2_conformer](https://huggingface.co/espnet/fastspeech2_conformer)
    architecture.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于存储[FastSpeech2ConformerModel](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerModel)配置的配置类。根据指定的参数实例化一个FastSpeech2Conformer模型，定义模型架构。使用默认值实例化配置将产生类似于FastSpeech2Conformer
    [espnet/fastspeech2_conformer](https://huggingface.co/espnet/fastspeech2_conformer)架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读来自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)的文档以获取更多信息。
- en: 'Example:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE5]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: FastSpeech2ConformerHifiGanConfig
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FastSpeech2ConformerHifiGanConfig
- en: '### `class transformers.FastSpeech2ConformerHifiGanConfig`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.FastSpeech2ConformerHifiGanConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/configuration_fastspeech2_conformer.py#L340)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/configuration_fastspeech2_conformer.py#L340)'
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_in_dim` (`int`, *optional*, defaults to 80) — The number of frequency
    bins in the input log-mel spectrogram.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_in_dim` (`int`, *optional*, defaults to 80) — 输入对数梅尔频谱图中的频率箱数。'
- en: '`upsample_initial_channel` (`int`, *optional*, defaults to 512) — The number
    of input channels into the upsampling network.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upsample_initial_channel` (`int`, *可选*, 默认为 512) — 进入上采样网络的输入通道数。'
- en: '`upsample_rates` (`Tuple[int]` or `List[int]`, *optional*, defaults to `[8,
    8, 2, 2]`) — A tuple of integers defining the stride of each 1D convolutional
    layer in the upsampling network. The length of *upsample_rates* defines the number
    of convolutional layers and has to match the length of *upsample_kernel_sizes*.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upsample_rates` (`Tuple[int]` 或 `List[int]`, *可选*, 默认为 `[8, 8, 2, 2]`) — 一个整数元组，定义了上采样网络中每个1D卷积层的步幅。*upsample_rates*
    的长度定义了卷积层的数量，并且必须与 *upsample_kernel_sizes* 的长度匹配。'
- en: '`upsample_kernel_sizes` (`Tuple[int]` or `List[int]`, *optional*, defaults
    to `[16, 16, 4, 4]`) — A tuple of integers defining the kernel size of each 1D
    convolutional layer in the upsampling network. The length of *upsample_kernel_sizes*
    defines the number of convolutional layers and has to match the length of *upsample_rates*.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`upsample_kernel_sizes` (`Tuple[int]` 或 `List[int]`, *可选*, 默认为 `[16, 16, 4,
    4]`) — 一个整数元组，定义了上采样网络中每个1D卷积层的内核大小。*upsample_kernel_sizes* 的长度定义了卷积层的数量，并且必须与
    *upsample_rates* 的长度匹配。'
- en: '`resblock_kernel_sizes` (`Tuple[int]` or `List[int]`, *optional*, defaults
    to `[3, 7, 11]`) — A tuple of integers defining the kernel sizes of the 1D convolutional
    layers in the multi-receptive field fusion (MRF) module.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resblock_kernel_sizes` (`Tuple[int]` 或 `List[int]`, *可选*, 默认为 `[3, 7, 11]`)
    — 一个整数元组，定义了多接受域融合（MRF）模块中1D卷积层的内核大小。'
- en: '`resblock_dilation_sizes` (`Tuple[Tuple[int]]` or `List[List[int]]`, *optional*,
    defaults to `[[1, 3, 5], [1, 3, 5], [1, 3, 5]]`) — A nested tuple of integers
    defining the dilation rates of the dilated 1D convolutional layers in the multi-receptive
    field fusion (MRF) module.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resblock_dilation_sizes` (`Tuple[Tuple[int]]` 或 `List[List[int]]`, *可选*, 默认为
    `[[1, 3, 5], [1, 3, 5], [1, 3, 5]]`) — 一个嵌套的整数元组，定义了多接受域融合（MRF）模块中扩张的1D卷积层的扩张率。'
- en: '`initializer_range` (`float`, *optional*, defaults to 0.01) — The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_range` (`float`, *可选*, 默认为 0.01) — 用于初始化所有权重矩阵的截断正态初始化器的标准差。'
- en: '`leaky_relu_slope` (`float`, *optional*, defaults to 0.1) — The angle of the
    negative slope used by the leaky ReLU activation.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`leaky_relu_slope` (`float`, *可选*, 默认为 0.1) — leaky ReLU 激活函数使用的负斜率的角度。'
- en: '`normalize_before` (`bool`, *optional*, defaults to `True`) — Whether or not
    to normalize the spectrogram before vocoding using the vocoder’s learned mean
    and variance.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normalize_before` (`bool`, *可选*, 默认为 `True`) — 是否在使用语音合成器的学习均值和方差进行声谱归一化之前对声谱进行归一化。'
- en: This is the configuration class to store the configuration of a `FastSpeech2ConformerHifiGanModel`.
    It is used to instantiate a FastSpeech2Conformer HiFi-GAN vocoder model according
    to the specified arguments, defining the model architecture. Instantiating a configuration
    with the defaults will yield a similar configuration to that of the FastSpeech2Conformer
    [espnet/fastspeech2_conformer_hifigan](https://huggingface.co/espnet/fastspeech2_conformer_hifigan)
    architecture.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于存储 `FastSpeech2ConformerHifiGanModel` 配置的配置类。根据指定的参数实例化一个 FastSpeech2Conformer
    HiFi-GAN 语音合成模型，定义模型架构。使用默认值实例化一个配置将产生类似于 FastSpeech2Conformer [espnet/fastspeech2_conformer_hifigan](https://huggingface.co/espnet/fastspeech2_conformer_hifigan)
    架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自 [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读来自
    [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    的文档以获取更多信息。
- en: 'Example:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: FastSpeech2ConformerWithHifiGanConfig
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FastSpeech2ConformerWithHifiGanConfig
- en: '### `class transformers.FastSpeech2ConformerWithHifiGanConfig`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.FastSpeech2ConformerWithHifiGanConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/configuration_fastspeech2_conformer.py#L419)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/configuration_fastspeech2_conformer.py#L419)'
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Parameters
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_config` (`typing.Dict`, *optional*) — Configuration of the text-to-speech
    model.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_config` (`typing.Dict`, *可选*) — 文本到语音模型的配置。'
- en: '`vocoder_config` (`typing.Dict`, *optional*) — Configuration of the vocoder
    model.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vocoder_config` (`typing.Dict`, *可选*) — 语音合成模型的配置。'
- en: This is the configuration class to store the configuration of a [FastSpeech2ConformerWithHifiGan](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerWithHifiGan).
    It is used to instantiate a `FastSpeech2ConformerWithHifiGanModel` model according
    to the specified sub-models configurations, defining the model architecture.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于存储 [FastSpeech2ConformerWithHifiGan](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerWithHifiGan)
    配置的配置类。根据指定的子模型配置实例化一个 `FastSpeech2ConformerWithHifiGanModel` 模型，定义模型架构。
- en: Instantiating a configuration with the defaults will yield a similar configuration
    to that of the FastSpeech2ConformerModel [espnet/fastspeech2_conformer](https://huggingface.co/espnet/fastspeech2_conformer)
    and FastSpeech2ConformerHifiGan [espnet/fastspeech2_conformer_hifigan](https://huggingface.co/espnet/fastspeech2_conformer_hifigan)
    architectures.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认值实例化一个配置将产生类似于 FastSpeech2ConformerModel [espnet/fastspeech2_conformer](https://huggingface.co/espnet/fastspeech2_conformer)
    和 FastSpeech2ConformerHifiGan [espnet/fastspeech2_conformer_hifigan](https://huggingface.co/espnet/fastspeech2_conformer_hifigan)
    架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'model_config ([FastSpeech2ConformerConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerConfig),
    *optional*): Configuration of the text-to-speech model. vocoder_config (`FastSpeech2ConformerHiFiGanConfig`,
    *optional*): Configuration of the vocoder model.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: FastSpeech2ConformerTokenizer
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.FastSpeech2ConformerTokenizer`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/tokenization_fastspeech2_conformer.py#L43)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Parameters
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`vocab_file` (`str`) — Path to the vocabulary file.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bos_token` (`str`, *optional*, defaults to `"<sos/eos>"`) — The begin of sequence
    token. Note that for FastSpeech2, it is the same as the `eos_token`.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eos_token` (`str`, *optional*, defaults to `"<sos/eos>"`) — The end of sequence
    token. Note that for FastSpeech2, it is the same as the `bos_token`.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_token` (`str`, *optional*, defaults to `"<blank>"`) — The token used for
    padding, for example when batching sequences of different lengths.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unk_token` (`str`, *optional*, defaults to `"<unk>"`) — The unknown token.
    A token that is not in the vocabulary cannot be converted to an ID and is set
    to be this token instead.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`should_strip_spaces` (`bool`, *optional*, defaults to `False`) — Whether or
    not to strip the spaces from the list of tokens.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Construct a FastSpeech2Conformer tokenizer.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '#### `__call__`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L2729)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Parameters
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '`text` (`str`, `List[str]`, `List[List[str]]`, *optional*) — The sequence or
    batch of sequences to be encoded. Each sequence can be a string or a list of strings
    (pretokenized string). If the sequences are provided as list of strings (pretokenized),
    you must set `is_split_into_words=True` (to lift the ambiguity with a batch of
    sequences).'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_pair` (`str`, `List[str]`, `List[List[str]]`, *optional*) — The sequence
    or batch of sequences to be encoded. Each sequence can be a string or a list of
    strings (pretokenized string). If the sequences are provided as list of strings
    (pretokenized), you must set `is_split_into_words=True` (to lift the ambiguity
    with a batch of sequences).'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_target` (`str`, `List[str]`, `List[List[str]]`, *optional*) — The sequence
    or batch of sequences to be encoded as target texts. Each sequence can be a string
    or a list of strings (pretokenized string). If the sequences are provided as list
    of strings (pretokenized), you must set `is_split_into_words=True` (to lift the
    ambiguity with a batch of sequences).'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_pair_target` (`str`, `List[str]`, `List[List[str]]`, *optional*) — The
    sequence or batch of sequences to be encoded as target texts. Each sequence can
    be a string or a list of strings (pretokenized string). If the sequences are provided
    as list of strings (pretokenized), you must set `is_split_into_words=True` (to
    lift the ambiguity with a batch of sequences).'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_special_tokens` (`bool`, *optional*, defaults to `True`) — Whether or
    not to add special tokens when encoding the sequences. This will use the underlying
    `PretrainedTokenizerBase.build_inputs_with_special_tokens` function, which defines
    which tokens are automatically added to the input ids. This is usefull if you
    want to add `bos` or `eos` tokens automatically.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (`bool`, `str` or [PaddingStrategy](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.utils.PaddingStrategy),
    *optional*, defaults to `False`) — Activates and controls padding. Accepts the
    following values:'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest''`: Pad to the longest sequence in the batch (or no padding
    if only a single sequence if provided).'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`True` 或 `''longest''`: 填充到批次中最长的序列（如果只提供了单个序列，则不填充）。'
- en: '`''max_length''`: Pad to a maximum length specified with the argument `max_length`
    or to the maximum acceptable input length for the model if that argument is not
    provided.'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''max_length''`: 填充到由参数 `max_length` 指定的最大长度，或者如果未提供该参数，则填充到模型的最大可接受输入长度。'
- en: '`False` or `''do_not_pad''` (default): No padding (i.e., can output a batch
    with sequences of different lengths).'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`False` 或 `''do_not_pad''` (默认): 不填充（即，可以输出具有不同长度序列的批次）。'
- en: '`truncation` (`bool`, `str` or [TruncationStrategy](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy),
    *optional*, defaults to `False`) — Activates and controls truncation. Accepts
    the following values:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`truncation` (`bool`, `str` 或 [TruncationStrategy](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy),
    *可选*, 默认为 `False`) — 激活和控制截断。接受以下值：'
- en: '`True` or `''longest_first''`: Truncate to a maximum length specified with
    the argument `max_length` or to the maximum acceptable input length for the model
    if that argument is not provided. This will truncate token by token, removing
    a token from the longest sequence in the pair if a pair of sequences (or a batch
    of pairs) is provided.'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`True` 或 `''longest_first''`: 截断到由参数 `max_length` 指定的最大长度，或者如果未提供该参数，则截断到模型的最大可接受输入长度。如果提供了一对序列（或一批对序列），则逐标记截断，从一对序列中最长的序列中删除一个标记。'
- en: '`''only_first''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the first sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''only_first''`: 截断到由参数 `max_length` 指定的最大长度，或者如果未提供该参数，则截断到模型的最大可接受输入长度。如果提供了一对序列（或一批对序列），则仅截断第一个序列。'
- en: '`''only_second''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the second sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''only_second''`: 截断到由参数 `max_length` 指定的最大长度，或者如果未提供该参数，则截断到模型的最大可接受输入长度。如果提供了一对序列（或一批对序列），则仅截断第二个序列。'
- en: '`False` or `''do_not_truncate''` (default): No truncation (i.e., can output
    batch with sequence lengths greater than the model maximum admissible input size).'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`False` 或 `''do_not_truncate''` (默认): 不截断（即，可以输出序列长度大于模型最大可接受输入大小的批次）。'
- en: '`max_length` (`int`, *optional*) — Controls the maximum length to use by one
    of the truncation/padding parameters.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_length` (`int`, *可选*) — 控制截断/填充参数使用的最大长度。'
- en: If left unset or set to `None`, this will use the predefined model maximum length
    if a maximum length is required by one of the truncation/padding parameters. If
    the model has no specific maximum input length (like XLNet) truncation/padding
    to a maximum length will be deactivated.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果未设置或设置为 `None`，则如果截断/填充参数中需要最大长度，则将使用预定义的模型最大长度。如果模型没有特定的最大输入长度（如 XLNet），则将禁用截断/填充到最大长度。
- en: '`stride` (`int`, *optional*, defaults to 0) — If set to a number along with
    `max_length`, the overflowing tokens returned when `return_overflowing_tokens=True`
    will contain some tokens from the end of the truncated sequence returned to provide
    some overlap between truncated and overflowing sequences. The value of this argument
    defines the number of overlapping tokens.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stride` (`int`, *可选*, 默认为 0) — 如果与 `max_length` 一起设置为一个数字，则当 `return_overflowing_tokens=True`
    时返回的溢出标记将包含截断序列末尾的一些标记，以提供截断和溢出序列之间的一些重叠。该参数的值定义了重叠标记的数量。'
- en: '`is_split_into_words` (`bool`, *optional*, defaults to `False`) — Whether or
    not the input is already pre-tokenized (e.g., split into words). If set to `True`,
    the tokenizer assumes the input is already split into words (for instance, by
    splitting it on whitespace) which it will tokenize. This is useful for NER or
    token classification.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_split_into_words` (`bool`, *可选*, 默认为 `False`) — 输入是否已经预分词（例如，已分割为单词）。如果设置为
    `True`，分词器将假定输入已经分割为单词（例如，通过在空格上分割），然后对其进行分词。这对于命名实体识别或标记分类很有用。'
- en: '`pad_to_multiple_of` (`int`, *optional*) — If set will pad the sequence to
    a multiple of the provided value. Requires `padding` to be activated. This is
    especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute
    capability `>= 7.5` (Volta).'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pad_to_multiple_of` (`int`, *可选*) — 如果设置，将序列填充到提供的值的倍数。需要激活 `padding`。这对于在具有计算能力
    `>= 7.5`（Volta）的 NVIDIA 硬件上启用 Tensor Cores 特别有用。'
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) — If set, will return tensors instead of list of python integers.
    Acceptable values are:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors` (`str` 或 [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *可选*) — 如果设置，将返回张量而不是 Python 整数列表。可接受的值为：'
- en: '`''tf''`: Return TensorFlow `tf.constant` objects.'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''tf''`: 返回 TensorFlow `tf.constant` 对象。'
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''pt''`: 返回 PyTorch `torch.Tensor` 对象。'
- en: '`''np''`: Return Numpy `np.ndarray` objects.'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''np''`: 返回 Numpy `np.ndarray` 对象。'
- en: '`return_token_type_ids` (`bool`, *optional*) — Whether to return token type
    IDs. If left to the default, will return the token type IDs according to the specific
    tokenizer’s default, defined by the `return_outputs` attribute.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_token_type_ids` (`bool`, *可选*) — 是否返回标记类型 ID。如果保持默认设置，将根据特定分词器的默认设置返回标记类型
    ID，由 `return_outputs` 属性定义。'
- en: '[What are token type IDs?](../glossary#token-type-ids)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是标记类型 ID？](../glossary#token-type-ids)'
- en: '`return_attention_mask` (`bool`, *optional*) — Whether to return the attention
    mask. If left to the default, will return the attention mask according to the
    specific tokenizer’s default, defined by the `return_outputs` attribute.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_attention_mask` (`bool`, *可选*) — 是否返回注意力遮罩。如果保持默认设置，将根据特定分词器的默认设置返回注意力遮罩，由
    `return_outputs` 属性定义。'
- en: '[What are attention masks?](../glossary#attention-mask)'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是注意力掩码？](../glossary#attention-mask)'
- en: '`return_overflowing_tokens` (`bool`, *optional*, defaults to `False`) — Whether
    or not to return overflowing token sequences. If a pair of sequences of input
    ids (or a batch of pairs) is provided with `truncation_strategy = longest_first`
    or `True`, an error is raised instead of returning overflowing tokens.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_overflowing_tokens` (`bool`，*可选*，默认为`False`) — 是否返回溢出的令牌序列。如果提供了一对输入ID序列（或一批对），并且`truncation_strategy
    = longest_first`或`True`，则会引发错误，而不是返回溢出的令牌。'
- en: '`return_special_tokens_mask` (`bool`, *optional*, defaults to `False`) — Whether
    or not to return special tokens mask information.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_special_tokens_mask` (`bool`，*可选*，默认为`False`) — 是否返回特殊令牌掩码信息。'
- en: '`return_offsets_mapping` (`bool`, *optional*, defaults to `False`) — Whether
    or not to return `(char_start, char_end)` for each token.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_offsets_mapping` (`bool`，*可选*，默认为`False`) — 是否返回每个令牌的`(char_start，char_end)`。'
- en: This is only available on fast tokenizers inheriting from [PreTrainedTokenizerFast](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast),
    if using Python’s tokenizer, this method will raise `NotImplementedError`.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 仅适用于继承自[PreTrainedTokenizerFast](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast)的快速分词器，如果使用Python的分词器，此方法将引发`NotImplementedError`。
- en: '`return_length` (`bool`, *optional*, defaults to `False`) — Whether or not
    to return the lengths of the encoded inputs.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_length` (`bool`，*可选*，默认为`False`) — 是否返回编码输入的长度。'
- en: '`verbose` (`bool`, *optional*, defaults to `True`) — Whether or not to print
    more information and warnings. **kwargs — passed to the `self.tokenize()` method'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verbose` (`bool`，*可选*，默认为`True`) — 是否打印更多信息和警告。**kwargs — 传递给`self.tokenize()`方法'
- en: Returns
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)'
- en: 'A [BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)
    with the following fields:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 具有以下字段的[BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)：
- en: '`input_ids` — List of token ids to be fed to a model.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_ids` — 要馈送到模型的令牌ID列表。'
- en: '[What are input IDs?](../glossary#input-ids)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是输入ID？](../glossary#input-ids)'
- en: '`token_type_ids` — List of token type ids to be fed to a model (when `return_token_type_ids=True`
    or if *“token_type_ids”* is in `self.model_input_names`).'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`token_type_ids` — 要馈送到模型的令牌类型ID列表（当`return_token_type_ids=True`或*“token_type_ids”*在`self.model_input_names`中时）。'
- en: '[What are token type IDs?](../glossary#token-type-ids)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是令牌类型ID？](../glossary#token-type-ids)'
- en: '`attention_mask` — List of indices specifying which tokens should be attended
    to by the model (when `return_attention_mask=True` or if *“attention_mask”* is
    in `self.model_input_names`).'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask` — 指定哪些令牌应由模型关注的索引列表（当`return_attention_mask=True`或*“attention_mask”*在`self.model_input_names`中时）。'
- en: '[What are attention masks?](../glossary#attention-mask)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是注意力掩码？](../glossary#attention-mask)'
- en: '`overflowing_tokens` — List of overflowing tokens sequences (when a `max_length`
    is specified and `return_overflowing_tokens=True`).'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overflowing_tokens` — 溢出令牌序列的列表（当指定`max_length`并且`return_overflowing_tokens=True`时）。'
- en: '`num_truncated_tokens` — Number of tokens truncated (when a `max_length` is
    specified and `return_overflowing_tokens=True`).'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_truncated_tokens` — 截断的令牌数（当指定`max_length`并且`return_overflowing_tokens=True`时）。'
- en: '`special_tokens_mask` — List of 0s and 1s, with 1 specifying added special
    tokens and 0 specifying regular sequence tokens (when `add_special_tokens=True`
    and `return_special_tokens_mask=True`).'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`special_tokens_mask` — 由0和1组成的列表，其中1指定添加的特殊令牌，0指定常规序列令牌（当`add_special_tokens=True`和`return_special_tokens_mask=True`时）。'
- en: '`length` — The length of the inputs (when `return_length=True`)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`length` — 输入的长度（当`return_length=True`时）'
- en: Main method to tokenize and prepare for the model one or several sequence(s)
    or one or several pair(s) of sequences.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个或多个序列或一个或多个序列对进行标记化和准备模型的主要方法。
- en: '#### `save_vocabulary`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `save_vocabulary`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/tokenization_fastspeech2_conformer.py#L159)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/tokenization_fastspeech2_conformer.py#L159)'
- en: '[PRE12]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Parameters
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`save_directory` (`str`) — The directory in which to save the vocabulary.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save_directory`（`str`） — 要保存词汇表的目录。'
- en: Returns
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`Tuple(str)`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tuple(str)`'
- en: Paths to the files saved.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 保存的文件路径。
- en: Save the vocabulary and special tokens file to a directory.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 将词汇表和特殊令牌文件保存到目录。
- en: '#### `decode`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `decode`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/tokenization_fastspeech2_conformer.py#L146)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/tokenization_fastspeech2_conformer.py#L146)'
- en: '[PRE13]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '#### `batch_decode`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `batch_decode`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L3692)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L3692)'
- en: '[PRE14]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Parameters
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sequences` (`Union[List[int], List[List[int]], np.ndarray, torch.Tensor, tf.Tensor]`)
    — List of tokenized input ids. Can be obtained using the `__call__` method.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sequences`（`Union[List[int]，List[List[int]]，np.ndarray，torch.Tensor，tf.Tensor]`）
    — 标记化输入ID的列表。可以使用`__call__`方法获得。'
- en: '`skip_special_tokens` (`bool`, *optional*, defaults to `False`) — Whether or
    not to remove special tokens in the decoding.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip_special_tokens` (`bool`，*可选*，默认为`False`) — 是否在解码中删除特殊令牌。'
- en: '`clean_up_tokenization_spaces` (`bool`, *optional*) — Whether or not to clean
    up the tokenization spaces. If `None`, will default to `self.clean_up_tokenization_spaces`.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean_up_tokenization_spaces` (`bool`，*可选*） — 是否清理标记化空格。如果为`None`，将默认为`self.clean_up_tokenization_spaces`。'
- en: '`kwargs` (additional keyword arguments, *optional*) — Will be passed to the
    underlying model specific decode method.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs`（附加关键字参数，*可选*） — 将传递给底层模型特定的解码方法。'
- en: Returns
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[str]`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[str]`'
- en: The list of decoded sentences.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 解码句子列表。
- en: Convert a list of lists of token ids into a list of strings by calling decode.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用解码将令牌ID列表的列表转换为字符串列表。
- en: FastSpeech2ConformerModel
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FastSpeech2ConformerModel
- en: '### `class transformers.FastSpeech2ConformerModel`'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.FastSpeech2ConformerModel`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1100)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1100)'
- en: '[PRE15]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Parameters
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([FastSpeech2ConformerConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`（[FastSpeech2ConformerConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerConfig)）-
    具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型关联的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: FastSpeech2Conformer Model. This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: FastSpeech2Conformer模型。该模型继承自[PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel)。检查超类文档以获取库为其所有模型实现的通用方法（例如下载或保存、调整输入嵌入、修剪头等）。
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型也是PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规PyTorch模块，并参考PyTorch文档以获取与一般用法和行为相关的所有事项。
- en: FastSpeech 2 module.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: FastSpeech 2模块。
- en: 'This is a module of FastSpeech 2 described in ‘FastSpeech 2: Fast and High-Quality
    End-to-End Text to Speech’ [https://arxiv.org/abs/2006.04558](https://arxiv.org/abs/2006.04558).
    Instead of quantized pitch and energy, we use token-averaged value introduced
    in FastPitch: Parallel Text-to-speech with Pitch Prediction. The encoder and decoder
    are Conformers instead of regular Transformers.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '这是FastSpeech 2中描述的模块，详见‘FastSpeech 2: Fast and High-Quality End-to-End Text
    to Speech’ [https://arxiv.org/abs/2006.04558](https://arxiv.org/abs/2006.04558)。我们使用FastPitch中引入的令牌平均值，而不是量化音高和能量。编码器和解码器是Conformers而不是常规Transformers。'
- en: '#### `forward`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1181)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1181)'
- en: '[PRE16]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Parameters
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`input_ids` (`torch.LongTensor` of shape `(batch_size, sequence_length)`) —
    Input sequence of text vectors.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_ids`（形状为`(batch_size, sequence_length)`的`torch.LongTensor`）- 文本向量的输入序列。'
- en: '`attention_mask` (`torch.LongTensor` of shape `(batch_size, sequence_length)`,
    *optional*, defaults to `None`) — Mask to avoid performing convolution and attention
    on padding token indices. Mask values selected in `[0, 1]`: 0 for tokens that
    are **masked**, 1 for tokens that are **not masked**.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask`（形状为`(batch_size, sequence_length)`的`torch.LongTensor`，*可选*，默认为`None`）-
    避免在填充标记索引上执行卷积和注意力的掩码。选择在`[0, 1]`中的掩码值：0表示**掩码**的标记，1表示**未掩码**的标记。'
- en: '`spectrogram_labels` (`torch.FloatTensor` of shape `(batch_size, max_spectrogram_length,
    num_mel_bins)`, *optional*, defaults to `None`) — Batch of padded target features.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spectrogram_labels`（形状为`(batch_size, max_spectrogram_length, num_mel_bins)`的`torch.FloatTensor`，*可选*，默认为`None`）-
    填充目标特征的批次。'
- en: '`duration_labels` (`torch.LongTensor` of shape `(batch_size, sequence_length
    + 1)`, *optional*, defaults to `None`) — Batch of padded durations.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration_labels`（形状为`(batch_size, sequence_length + 1)`的`torch.LongTensor`，*可选*，默认为`None`）-
    填充的持续时间批次。'
- en: '`pitch_labels` (`torch.FloatTensor` of shape `(batch_size, sequence_length
    + 1, 1)`, *optional*, defaults to `None`) — Batch of padded token-averaged pitch.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pitch_labels`（形状为`(batch_size, sequence_length + 1, 1)`的`torch.FloatTensor`，*可选*，默认为`None`）-
    填充的令牌平均音高批次。'
- en: '`energy_labels` (`torch.FloatTensor` of shape `(batch_size, sequence_length
    + 1, 1)`, *optional*, defaults to `None`) — Batch of padded token-averaged energy.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`energy_labels`（形状为`(batch_size, sequence_length + 1, 1)`的`torch.FloatTensor`，*可选*，默认为`None`）-
    填充的令牌平均能量。'
- en: '`speaker_ids` (`torch.LongTensor` of shape `(batch_size, 1)`, *optional*, defaults
    to `None`) — Speaker ids used to condition features of speech output by the model.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speaker_ids`（形状为`(batch_size, 1)`的`torch.LongTensor`，*可选*，默认为`None`）- 用于调节模型输出语音特征的说话者id。'
- en: '`lang_ids` (`torch.LongTensor` of shape `(batch_size, 1)`, *optional*, defaults
    to `None`) — Language ids used to condition features of speech output by the model.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lang_ids`（形状为`(batch_size, 1)`的`torch.LongTensor`，*可选*，默认为`None`）- 用于调节模型输出语音特征的语言id。'
- en: '`speaker_embedding` (`torch.FloatTensor` of shape `(batch_size, embedding_dim)`,
    *optional*, defaults to `None`) — Embedding containing conditioning signals for
    the features of the speech.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`speaker_embedding`（形状为`(batch_size, embedding_dim)`的`torch.FloatTensor`，*可选*，默认为`None`）-
    包含语音特征的调节信号的嵌入。'
- en: '`return_dict` (`bool`, *optional*, defaults to `None`) — Whether or not to
    return a `FastSpeech2ConformerModelOutput` instead of a plain tuple.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict`（`bool`，*可选*，默认为`None`）- 是否返回`FastSpeech2ConformerModelOutput`而不是普通元组。'
- en: '`output_attentions` (`bool`, *optional*, defaults to `None`) — Whether or not
    to return the attentions tensors of all attention layers. See `attentions` under
    returned tensors for more detail.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions`（`bool`，*可选*，默认为`None`）- 是否返回所有注意力层的注意力张量。有关更多详细信息，请参阅返回张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*, defaults to `None`) — Whether or
    not to return the hidden states of all layers. See `hidden_states` under returned
    tensors for more detail.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states`（`bool`，*可选*，默认为`None`）- 是否返回所有层的隐藏状态。有关更多详细信息，请参阅返回张量下的`hidden_states`。'
- en: Returns
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`transformers.models.fastspeech2_conformer.modeling_fastspeech2_conformer.FastSpeech2ConformerModelOutput`
    or `tuple(torch.FloatTensor)`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.fastspeech2_conformer.modeling_fastspeech2_conformer.FastSpeech2ConformerModelOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([FastSpeech2ConformerConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerConfig))
    and inputs.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Spectrogram generation loss.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spectrogram` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    num_bins)`) — The predicted spectrogram.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the encoder at the output of each layer plus the initial embedding
    outputs.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the encoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the decoder at the output of each layer plus the initial embedding
    outputs.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the decoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`duration_outputs` (`torch.LongTensor` of shape `(batch_size, max_text_length
    + 1)`, *optional*) — Outputs of the duration predictor.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_outputs` (`torch.FloatTensor` of shape `(batch_size, max_text_length
    + 1, 1)`, *optional*) — Outputs of the pitch predictor.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_outputs` (`torch.FloatTensor` of shape `(batch_size, max_text_length
    + 1, 1)`, *optional*) — Outputs of the energy predictor.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: FastSpeech2ConformerHifiGan
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.FastSpeech2ConformerHifiGan`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1446)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Parameters
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([FastSpeech2ConformerConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HiFi-GAN vocoder. This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1516)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Parameters
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '`spectrogram` (`torch.FloatTensor`) — Tensor containing the log-mel spectrograms.
    Can be batched and of shape `(batch_size, sequence_length, config.model_in_dim)`,
    or un-batched and of shape `(sequence_length, config.model_in_dim)`.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.FloatTensor`'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Tensor containing the speech waveform. If the input spectrogram is batched,
    will be of shape `(batch_size, num_frames,)`. If un-batched, will be of shape
    `(num_frames,)`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Converts a log-mel spectrogram into a speech waveform. Passing a batch of log-mel
    spectrograms returns a batch of speech waveforms. Passing a single, un-batched
    log-mel spectrogram returns a single, un-batched speech waveform.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: FastSpeech2ConformerWithHifiGan
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.FastSpeech2ConformerWithHifiGan`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1564)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Parameters
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([FastSpeech2ConformerWithHifiGanConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerWithHifiGanConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FastSpeech2ConformerModel with a FastSpeech2ConformerHifiGan vocoder head
    that performs text-to-speech (waveform). This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1579)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Parameters
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '`input_ids` (`torch.LongTensor` of shape `(batch_size, sequence_length)`) —
    Input sequence of text vectors.'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask` (`torch.LongTensor` of shape `(batch_size, sequence_length)`,
    *optional*, defaults to `None`) — Mask to avoid performing convolution and attention
    on padding token indices. Mask values selected in `[0, 1]`: 0 for tokens that
    are **masked**, 1 for tokens that are **not masked**.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spectrogram_labels` (`torch.FloatTensor` of shape `(batch_size, max_spectrogram_length,
    num_mel_bins)`, *optional*, defaults to `None`) — Batch of padded target features.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration_labels` (`torch.LongTensor` of shape `(batch_size, sequence_length
    + 1)`, *optional*, defaults to `None`) — Batch of padded durations.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_labels` (`torch.FloatTensor` of shape `(batch_size, sequence_length
    + 1, 1)`, *optional*, defaults to `None`) — Batch of padded token-averaged pitch.'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_labels` (`torch.FloatTensor` of shape `(batch_size, sequence_length
    + 1, 1)`, *optional*, defaults to `None`) — Batch of padded token-averaged energy.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speaker_ids` (`torch.LongTensor` of shape `(batch_size, 1)`, *optional*, defaults
    to `None`) — Speaker ids used to condition features of speech output by the model.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lang_ids` (`torch.LongTensor` of shape `(batch_size, 1)`, *optional*, defaults
    to `None`) — Language ids used to condition features of speech output by the model.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speaker_embedding` (`torch.FloatTensor` of shape `(batch_size, embedding_dim)`,
    *optional*, defaults to `None`) — Embedding containing conditioning signals for
    the features of the speech.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `None`) — Whether or not to
    return a `FastSpeech2ConformerModelOutput` instead of a plain tuple.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*, defaults to `None`) — Whether or not
    to return the attentions tensors of all attention layers. See `attentions` under
    returned tensors for more detail.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*, defaults to `None`) — Whether or
    not to return the hidden states of all layers. See `hidden_states` under returned
    tensors for more detail.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.fastspeech2_conformer.modeling_fastspeech2_conformer.FastSpeech2ConformerWithHifiGanOutput`
    or `tuple(torch.FloatTensor)`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.fastspeech2_conformer.modeling_fastspeech2_conformer.FastSpeech2ConformerWithHifiGanOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration (`<class 'transformers.models.fastspeech2_conformer.configuration_fastspeech2_conformer.FastSpeech2ConformerWithHifiGanConfig'>`)
    and inputs.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '`waveform` (`torch.FloatTensor` of shape `(batch_size, audio_length)`) — Speech
    output as a result of passing the predicted mel spectrogram through the vocoder.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Spectrogram generation loss.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spectrogram` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    num_bins)`) — The predicted spectrogram.'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the encoder at the output of each layer plus the initial embedding
    outputs.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the encoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the decoder at the output of each layer plus the initial embedding
    outputs.
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the decoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解码器的注意力权重，在注意力softmax之后，用于计算自注意力头中的加权平均值。
- en: '`duration_outputs` (`torch.LongTensor` of shape `(batch_size, max_text_length
    + 1)`, *optional*) — Outputs of the duration predictor.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration_outputs` (`torch.LongTensor` of shape `(batch_size, max_text_length
    + 1)`, *optional*) — 持续时间预测器的输出。'
- en: '`pitch_outputs` (`torch.FloatTensor` of shape `(batch_size, max_text_length
    + 1, 1)`, *optional*) — Outputs of the pitch predictor.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pitch_outputs` (`torch.FloatTensor` of shape `(batch_size, max_text_length
    + 1, 1)`, *optional*) — 音高预测器的输出。'
- en: '`energy_outputs` (`torch.FloatTensor` of shape `(batch_size, max_text_length
    + 1, 1)`, *optional*) — Outputs of the energy predictor.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`energy_outputs` (`torch.FloatTensor` of shape `(batch_size, max_text_length
    + 1, 1)`, *optional*) — 能量预测器的输出。'
- en: 'Example:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE22]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
