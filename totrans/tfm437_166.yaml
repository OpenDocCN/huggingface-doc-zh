- en: FastSpeech2Conformer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/127.6025bf4a.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Docstring.17db21ae.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/ExampleCodeBlock.4f515aa9.js">
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The FastSpeech2Conformer model was proposed with the paper [Recent Developments
    On Espnet Toolkit Boosted By Conformer](https://arxiv.org/abs/2010.13956) by Pengcheng
    Guo, Florian Boyer, Xuankai Chang, Tomoki Hayashi, Yosuke Higuchi, Hirofumi Inaguma,
    Naoyuki Kamo, Chenda Li, Daniel Garcia-Romero, Jiatong Shi, Jing Shi, Shinji Watanabe,
    Kun Wei, Wangyou Zhang, and Yuekai Zhang.
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the original FastSpeech2 paper is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Non-autoregressive text to speech (TTS) models such as FastSpeech (Ren et
    al., 2019) can synthesize speech significantly faster than previous autoregressive
    models with comparable quality. The training of FastSpeech model relies on an
    autoregressive teacher model for duration prediction (to provide more information
    as input) and knowledge distillation (to simplify the data distribution in output),
    which can ease the one-to-many mapping problem (i.e., multiple speech variations
    correspond to the same text) in TTS. However, FastSpeech has several disadvantages:
    1) the teacher-student distillation pipeline is complicated and time-consuming,
    2) the duration extracted from the teacher model is not accurate enough, and the
    target mel-spectrograms distilled from teacher model suffer from information loss
    due to data simplification, both of which limit the voice quality. In this paper,
    we propose FastSpeech 2, which addresses the issues in FastSpeech and better solves
    the one-to-many mapping problem in TTS by 1) directly training the model with
    ground-truth target instead of the simplified output from teacher, and 2) introducing
    more variation information of speech (e.g., pitch, energy and more accurate duration)
    as conditional inputs. Specifically, we extract duration, pitch and energy from
    speech waveform and directly take them as conditional inputs in training and use
    predicted values in inference. We further design FastSpeech 2s, which is the first
    attempt to directly generate speech waveform from text in parallel, enjoying the
    benefit of fully end-to-end inference. Experimental results show that 1) FastSpeech
    2 achieves a 3x training speed-up over FastSpeech, and FastSpeech 2s enjoys even
    faster inference speed; 2) FastSpeech 2 and 2s outperform FastSpeech in voice
    quality, and FastSpeech 2 can even surpass autoregressive models. Audio samples
    are available at [https://speechresearch.github.io/fastspeech2/](https://speechresearch.github.io/fastspeech2/).*'
  prefs: []
  type: TYPE_NORMAL
- en: This model was contributed by [Connor Henderson](https://huggingface.co/connor-henderson).
    The original code can be found [here](https://github.com/espnet/espnet/blob/master/espnet2/tts/fastspeech2/fastspeech2.py).
  prefs: []
  type: TYPE_NORMAL
- en: 🤗 Model Architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FastSpeech2’s general structure with a Mel-spectrogram decoder was implemented,
    and the traditional transformer blocks were replaced with with conformer blocks
    as done in the ESPnet library.
  prefs: []
  type: TYPE_NORMAL
- en: FastSpeech2 Model Architecture
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![FastSpeech2 Model Architecture](../Images/19e41c7c11474d823ed6b65f4b973faf.png)'
  prefs: []
  type: TYPE_IMG
- en: Conformer Blocks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Conformer Blocks](../Images/e85e7a628d66d560dd93c3858c0061c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Convolution Module
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '![Convolution Module](../Images/9f1bb141278007107620b1e6640f061e.png)'
  prefs: []
  type: TYPE_IMG
- en: 🤗 Transformers Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can run FastSpeech2Conformer locally with the 🤗 Transformers library.
  prefs: []
  type: TYPE_NORMAL
- en: 'First install the 🤗 [Transformers library](https://github.com/huggingface/transformers),
    g2p-en:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Run inference via the Transformers modelling code with the model and hifigan
    separately
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Run inference via the Transformers modelling code with the model and hifigan
    combined
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Run inference with a pipeline and specify which vocoder to use
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: FastSpeech2ConformerConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.FastSpeech2ConformerConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/configuration_fastspeech2_conformer.py#L39)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`hidden_size` (`int`, *optional*, defaults to 384) — The dimensionality of
    the hidden layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vocab_size` (`int`, *optional*, defaults to 78) — The size of the vocabulary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_mel_bins` (`int`, *optional*, defaults to 80) — The number of mel filters
    used in the filter bank.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_num_attention_heads` (`int`, *optional*, defaults to 2) — The number
    of attention heads in the encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_layers` (`int`, *optional*, defaults to 4) — The number of layers
    in the encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_linear_units` (`int`, *optional*, defaults to 1536) — The number of
    units in the linear layer of the encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_layers` (`int`, *optional*, defaults to 4) — The number of layers
    in the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_num_attention_heads` (`int`, *optional*, defaults to 2) — The number
    of attention heads in the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_linear_units` (`int`, *optional*, defaults to 1536) — The number of
    units in the linear layer of the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speech_decoder_postnet_layers` (`int`, *optional*, defaults to 5) — The number
    of layers in the post-net of the speech decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speech_decoder_postnet_units` (`int`, *optional*, defaults to 256) — The number
    of units in the post-net layers of the speech decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speech_decoder_postnet_kernel` (`int`, *optional*, defaults to 5) — The kernel
    size in the post-net of the speech decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`positionwise_conv_kernel_size` (`int`, *optional*, defaults to 3) — The size
    of the convolution kernel used in the position-wise layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_normalize_before` (`bool`, *optional*, defaults to `False`) — Specifies
    whether to normalize before encoder layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_normalize_before` (`bool`, *optional*, defaults to `False`) — Specifies
    whether to normalize before decoder layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_concat_after` (`bool`, *optional*, defaults to `False`) — Specifies
    whether to concatenate after encoder layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_concat_after` (`bool`, *optional*, defaults to `False`) — Specifies
    whether to concatenate after decoder layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reduction_factor` (`int`, *optional*, defaults to 1) — The factor by which
    the speech frame rate is reduced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speaking_speed` (`float`, *optional*, defaults to 1.0) — The speed of the
    speech produced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_macaron_style_in_conformer` (`bool`, *optional*, defaults to `True`) —
    Specifies whether to use macaron style in the conformer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_cnn_in_conformer` (`bool`, *optional*, defaults to `True`) — Specifies
    whether to use convolutional neural networks in the conformer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_kernel_size` (`int`, *optional*, defaults to 7) — The kernel size
    used in the encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_kernel_size` (`int`, *optional*, defaults to 31) — The kernel size
    used in the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration_predictor_layers` (`int`, *optional*, defaults to 2) — The number
    of layers in the duration predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration_predictor_channels` (`int`, *optional*, defaults to 256) — The number
    of channels in the duration predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration_predictor_kernel_size` (`int`, *optional*, defaults to 3) — The kernel
    size used in the duration predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_predictor_layers` (`int`, *optional*, defaults to 2) — The number of
    layers in the energy predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_predictor_channels` (`int`, *optional*, defaults to 256) — The number
    of channels in the energy predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_predictor_kernel_size` (`int`, *optional*, defaults to 3) — The kernel
    size used in the energy predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_predictor_dropout` (`float`, *optional*, defaults to 0.5) — The dropout
    rate in the energy predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_embed_kernel_size` (`int`, *optional*, defaults to 1) — The kernel
    size used in the energy embed layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_embed_dropout` (`float`, *optional*, defaults to 0.0) — The dropout
    rate in the energy embed layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stop_gradient_from_energy_predictor` (`bool`, *optional*, defaults to `False`)
    — Specifies whether to stop gradients from the energy predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_predictor_layers` (`int`, *optional*, defaults to 5) — The number of
    layers in the pitch predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_predictor_channels` (`int`, *optional*, defaults to 256) — The number
    of channels in the pitch predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_predictor_kernel_size` (`int`, *optional*, defaults to 5) — The kernel
    size used in the pitch predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_predictor_dropout` (`float`, *optional*, defaults to 0.5) — The dropout
    rate in the pitch predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_embed_kernel_size` (`int`, *optional*, defaults to 1) — The kernel size
    used in the pitch embed layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_embed_dropout` (`float`, *optional*, defaults to 0.0) — The dropout
    rate in the pitch embed layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stop_gradient_from_pitch_predictor` (`bool`, *optional*, defaults to `True`)
    — Specifies whether to stop gradients from the pitch predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_dropout_rate` (`float`, *optional*, defaults to 0.2) — The dropout
    rate in the encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_positional_dropout_rate` (`float`, *optional*, defaults to 0.2) —
    The positional dropout rate in the encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_attention_dropout_rate` (`float`, *optional*, defaults to 0.2) — The
    attention dropout rate in the encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_dropout_rate` (`float`, *optional*, defaults to 0.2) — The dropout
    rate in the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_positional_dropout_rate` (`float`, *optional*, defaults to 0.2) —
    The positional dropout rate in the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_attention_dropout_rate` (`float`, *optional*, defaults to 0.2) — The
    attention dropout rate in the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration_predictor_dropout_rate` (`float`, *optional*, defaults to 0.2) —
    The dropout rate in the duration predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speech_decoder_postnet_dropout` (`float`, *optional*, defaults to 0.5) — The
    dropout rate in the speech decoder postnet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_source_positions` (`int`, *optional*, defaults to 5000) — if `"relative"`
    position embeddings are used, defines the maximum source input positions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_masking` (`bool`, *optional*, defaults to `True`) — Specifies whether
    to use masking in the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_weighted_masking` (`bool`, *optional*, defaults to `False`) — Specifies
    whether to use weighted masking in the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_speakers` (`int`, *optional*) — Number of speakers. If set to > 1, assume
    that the speaker ids will be provided as the input and use speaker id embedding
    layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_languages` (`int`, *optional*) — Number of languages. If set to > 1, assume
    that the language ids will be provided as the input and use the languge id embedding
    layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speaker_embed_dim` (`int`, *optional*) — Speaker embedding dimension. If set
    to > 0, assume that speaker_embedding will be provided as the input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_encoder_decoder` (`bool`, *optional*, defaults to `True`) — Specifies whether
    the model is an encoder-decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a [FastSpeech2ConformerModel](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerModel).
    It is used to instantiate a FastSpeech2Conformer model according to the specified
    arguments, defining the model architecture. Instantiating a configuration with
    the defaults will yield a similar configuration to that of the FastSpeech2Conformer
    [espnet/fastspeech2_conformer](https://huggingface.co/espnet/fastspeech2_conformer)
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: FastSpeech2ConformerHifiGanConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.FastSpeech2ConformerHifiGanConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/configuration_fastspeech2_conformer.py#L340)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_in_dim` (`int`, *optional*, defaults to 80) — The number of frequency
    bins in the input log-mel spectrogram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upsample_initial_channel` (`int`, *optional*, defaults to 512) — The number
    of input channels into the upsampling network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upsample_rates` (`Tuple[int]` or `List[int]`, *optional*, defaults to `[8,
    8, 2, 2]`) — A tuple of integers defining the stride of each 1D convolutional
    layer in the upsampling network. The length of *upsample_rates* defines the number
    of convolutional layers and has to match the length of *upsample_kernel_sizes*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upsample_kernel_sizes` (`Tuple[int]` or `List[int]`, *optional*, defaults
    to `[16, 16, 4, 4]`) — A tuple of integers defining the kernel size of each 1D
    convolutional layer in the upsampling network. The length of *upsample_kernel_sizes*
    defines the number of convolutional layers and has to match the length of *upsample_rates*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resblock_kernel_sizes` (`Tuple[int]` or `List[int]`, *optional*, defaults
    to `[3, 7, 11]`) — A tuple of integers defining the kernel sizes of the 1D convolutional
    layers in the multi-receptive field fusion (MRF) module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resblock_dilation_sizes` (`Tuple[Tuple[int]]` or `List[List[int]]`, *optional*,
    defaults to `[[1, 3, 5], [1, 3, 5], [1, 3, 5]]`) — A nested tuple of integers
    defining the dilation rates of the dilated 1D convolutional layers in the multi-receptive
    field fusion (MRF) module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initializer_range` (`float`, *optional*, defaults to 0.01) — The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`leaky_relu_slope` (`float`, *optional*, defaults to 0.1) — The angle of the
    negative slope used by the leaky ReLU activation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`normalize_before` (`bool`, *optional*, defaults to `True`) — Whether or not
    to normalize the spectrogram before vocoding using the vocoder’s learned mean
    and variance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a `FastSpeech2ConformerHifiGanModel`.
    It is used to instantiate a FastSpeech2Conformer HiFi-GAN vocoder model according
    to the specified arguments, defining the model architecture. Instantiating a configuration
    with the defaults will yield a similar configuration to that of the FastSpeech2Conformer
    [espnet/fastspeech2_conformer_hifigan](https://huggingface.co/espnet/fastspeech2_conformer_hifigan)
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: FastSpeech2ConformerWithHifiGanConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.FastSpeech2ConformerWithHifiGanConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/configuration_fastspeech2_conformer.py#L419)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_config` (`typing.Dict`, *optional*) — Configuration of the text-to-speech
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vocoder_config` (`typing.Dict`, *optional*) — Configuration of the vocoder
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a [FastSpeech2ConformerWithHifiGan](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerWithHifiGan).
    It is used to instantiate a `FastSpeech2ConformerWithHifiGanModel` model according
    to the specified sub-models configurations, defining the model architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Instantiating a configuration with the defaults will yield a similar configuration
    to that of the FastSpeech2ConformerModel [espnet/fastspeech2_conformer](https://huggingface.co/espnet/fastspeech2_conformer)
    and FastSpeech2ConformerHifiGan [espnet/fastspeech2_conformer_hifigan](https://huggingface.co/espnet/fastspeech2_conformer_hifigan)
    architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'model_config ([FastSpeech2ConformerConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerConfig),
    *optional*): Configuration of the text-to-speech model. vocoder_config (`FastSpeech2ConformerHiFiGanConfig`,
    *optional*): Configuration of the vocoder model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: FastSpeech2ConformerTokenizer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.FastSpeech2ConformerTokenizer`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/tokenization_fastspeech2_conformer.py#L43)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`vocab_file` (`str`) — Path to the vocabulary file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bos_token` (`str`, *optional*, defaults to `"<sos/eos>"`) — The begin of sequence
    token. Note that for FastSpeech2, it is the same as the `eos_token`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eos_token` (`str`, *optional*, defaults to `"<sos/eos>"`) — The end of sequence
    token. Note that for FastSpeech2, it is the same as the `bos_token`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_token` (`str`, *optional*, defaults to `"<blank>"`) — The token used for
    padding, for example when batching sequences of different lengths.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unk_token` (`str`, *optional*, defaults to `"<unk>"`) — The unknown token.
    A token that is not in the vocabulary cannot be converted to an ID and is set
    to be this token instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`should_strip_spaces` (`bool`, *optional*, defaults to `False`) — Whether or
    not to strip the spaces from the list of tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Construct a FastSpeech2Conformer tokenizer.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `__call__`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L2729)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`text` (`str`, `List[str]`, `List[List[str]]`, *optional*) — The sequence or
    batch of sequences to be encoded. Each sequence can be a string or a list of strings
    (pretokenized string). If the sequences are provided as list of strings (pretokenized),
    you must set `is_split_into_words=True` (to lift the ambiguity with a batch of
    sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_pair` (`str`, `List[str]`, `List[List[str]]`, *optional*) — The sequence
    or batch of sequences to be encoded. Each sequence can be a string or a list of
    strings (pretokenized string). If the sequences are provided as list of strings
    (pretokenized), you must set `is_split_into_words=True` (to lift the ambiguity
    with a batch of sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_target` (`str`, `List[str]`, `List[List[str]]`, *optional*) — The sequence
    or batch of sequences to be encoded as target texts. Each sequence can be a string
    or a list of strings (pretokenized string). If the sequences are provided as list
    of strings (pretokenized), you must set `is_split_into_words=True` (to lift the
    ambiguity with a batch of sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_pair_target` (`str`, `List[str]`, `List[List[str]]`, *optional*) — The
    sequence or batch of sequences to be encoded as target texts. Each sequence can
    be a string or a list of strings (pretokenized string). If the sequences are provided
    as list of strings (pretokenized), you must set `is_split_into_words=True` (to
    lift the ambiguity with a batch of sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_special_tokens` (`bool`, *optional*, defaults to `True`) — Whether or
    not to add special tokens when encoding the sequences. This will use the underlying
    `PretrainedTokenizerBase.build_inputs_with_special_tokens` function, which defines
    which tokens are automatically added to the input ids. This is usefull if you
    want to add `bos` or `eos` tokens automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (`bool`, `str` or [PaddingStrategy](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.utils.PaddingStrategy),
    *optional*, defaults to `False`) — Activates and controls padding. Accepts the
    following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest''`: Pad to the longest sequence in the batch (or no padding
    if only a single sequence if provided).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''max_length''`: Pad to a maximum length specified with the argument `max_length`
    or to the maximum acceptable input length for the model if that argument is not
    provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` or `''do_not_pad''` (default): No padding (i.e., can output a batch
    with sequences of different lengths).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation` (`bool`, `str` or [TruncationStrategy](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy),
    *optional*, defaults to `False`) — Activates and controls truncation. Accepts
    the following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest_first''`: Truncate to a maximum length specified with
    the argument `max_length` or to the maximum acceptable input length for the model
    if that argument is not provided. This will truncate token by token, removing
    a token from the longest sequence in the pair if a pair of sequences (or a batch
    of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''only_first''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the first sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''only_second''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the second sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` or `''do_not_truncate''` (default): No truncation (i.e., can output
    batch with sequence lengths greater than the model maximum admissible input size).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*) — Controls the maximum length to use by one
    of the truncation/padding parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If left unset or set to `None`, this will use the predefined model maximum length
    if a maximum length is required by one of the truncation/padding parameters. If
    the model has no specific maximum input length (like XLNet) truncation/padding
    to a maximum length will be deactivated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`stride` (`int`, *optional*, defaults to 0) — If set to a number along with
    `max_length`, the overflowing tokens returned when `return_overflowing_tokens=True`
    will contain some tokens from the end of the truncated sequence returned to provide
    some overlap between truncated and overflowing sequences. The value of this argument
    defines the number of overlapping tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_split_into_words` (`bool`, *optional*, defaults to `False`) — Whether or
    not the input is already pre-tokenized (e.g., split into words). If set to `True`,
    the tokenizer assumes the input is already split into words (for instance, by
    splitting it on whitespace) which it will tokenize. This is useful for NER or
    token classification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_to_multiple_of` (`int`, *optional*) — If set will pad the sequence to
    a multiple of the provided value. Requires `padding` to be activated. This is
    especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute
    capability `>= 7.5` (Volta).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) — If set, will return tensors instead of list of python integers.
    Acceptable values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''tf''`: Return TensorFlow `tf.constant` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''np''`: Return Numpy `np.ndarray` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_token_type_ids` (`bool`, *optional*) — Whether to return token type
    IDs. If left to the default, will return the token type IDs according to the specific
    tokenizer’s default, defined by the `return_outputs` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are token type IDs?](../glossary#token-type-ids)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_attention_mask` (`bool`, *optional*) — Whether to return the attention
    mask. If left to the default, will return the attention mask according to the
    specific tokenizer’s default, defined by the `return_outputs` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_overflowing_tokens` (`bool`, *optional*, defaults to `False`) — Whether
    or not to return overflowing token sequences. If a pair of sequences of input
    ids (or a batch of pairs) is provided with `truncation_strategy = longest_first`
    or `True`, an error is raised instead of returning overflowing tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_special_tokens_mask` (`bool`, *optional*, defaults to `False`) — Whether
    or not to return special tokens mask information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_offsets_mapping` (`bool`, *optional*, defaults to `False`) — Whether
    or not to return `(char_start, char_end)` for each token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is only available on fast tokenizers inheriting from [PreTrainedTokenizerFast](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast),
    if using Python’s tokenizer, this method will raise `NotImplementedError`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_length` (`bool`, *optional*, defaults to `False`) — Whether or not
    to return the lengths of the encoded inputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verbose` (`bool`, *optional*, defaults to `True`) — Whether or not to print
    more information and warnings. **kwargs — passed to the `self.tokenize()` method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A [BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)
    with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`input_ids` — List of token ids to be fed to a model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are input IDs?](../glossary#input-ids)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`token_type_ids` — List of token type ids to be fed to a model (when `return_token_type_ids=True`
    or if *“token_type_ids”* is in `self.model_input_names`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are token type IDs?](../glossary#token-type-ids)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`attention_mask` — List of indices specifying which tokens should be attended
    to by the model (when `return_attention_mask=True` or if *“attention_mask”* is
    in `self.model_input_names`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`overflowing_tokens` — List of overflowing tokens sequences (when a `max_length`
    is specified and `return_overflowing_tokens=True`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_truncated_tokens` — Number of tokens truncated (when a `max_length` is
    specified and `return_overflowing_tokens=True`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`special_tokens_mask` — List of 0s and 1s, with 1 specifying added special
    tokens and 0 specifying regular sequence tokens (when `add_special_tokens=True`
    and `return_special_tokens_mask=True`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length` — The length of the inputs (when `return_length=True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main method to tokenize and prepare for the model one or several sequence(s)
    or one or several pair(s) of sequences.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `save_vocabulary`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/tokenization_fastspeech2_conformer.py#L159)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`save_directory` (`str`) — The directory in which to save the vocabulary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Tuple(str)`'
  prefs: []
  type: TYPE_NORMAL
- en: Paths to the files saved.
  prefs: []
  type: TYPE_NORMAL
- en: Save the vocabulary and special tokens file to a directory.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `decode`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/tokenization_fastspeech2_conformer.py#L146)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '#### `batch_decode`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L3692)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sequences` (`Union[List[int], List[List[int]], np.ndarray, torch.Tensor, tf.Tensor]`)
    — List of tokenized input ids. Can be obtained using the `__call__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_special_tokens` (`bool`, *optional*, defaults to `False`) — Whether or
    not to remove special tokens in the decoding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean_up_tokenization_spaces` (`bool`, *optional*) — Whether or not to clean
    up the tokenization spaces. If `None`, will default to `self.clean_up_tokenization_spaces`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (additional keyword arguments, *optional*) — Will be passed to the
    underlying model specific decode method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: The list of decoded sentences.
  prefs: []
  type: TYPE_NORMAL
- en: Convert a list of lists of token ids into a list of strings by calling decode.
  prefs: []
  type: TYPE_NORMAL
- en: FastSpeech2ConformerModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.FastSpeech2ConformerModel`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1100)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([FastSpeech2ConformerConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FastSpeech2Conformer Model. This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: FastSpeech 2 module.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a module of FastSpeech 2 described in ‘FastSpeech 2: Fast and High-Quality
    End-to-End Text to Speech’ [https://arxiv.org/abs/2006.04558](https://arxiv.org/abs/2006.04558).
    Instead of quantized pitch and energy, we use token-averaged value introduced
    in FastPitch: Parallel Text-to-speech with Pitch Prediction. The encoder and decoder
    are Conformers instead of regular Transformers.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1181)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`input_ids` (`torch.LongTensor` of shape `(batch_size, sequence_length)`) —
    Input sequence of text vectors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask` (`torch.LongTensor` of shape `(batch_size, sequence_length)`,
    *optional*, defaults to `None`) — Mask to avoid performing convolution and attention
    on padding token indices. Mask values selected in `[0, 1]`: 0 for tokens that
    are **masked**, 1 for tokens that are **not masked**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spectrogram_labels` (`torch.FloatTensor` of shape `(batch_size, max_spectrogram_length,
    num_mel_bins)`, *optional*, defaults to `None`) — Batch of padded target features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration_labels` (`torch.LongTensor` of shape `(batch_size, sequence_length
    + 1)`, *optional*, defaults to `None`) — Batch of padded durations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_labels` (`torch.FloatTensor` of shape `(batch_size, sequence_length
    + 1, 1)`, *optional*, defaults to `None`) — Batch of padded token-averaged pitch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_labels` (`torch.FloatTensor` of shape `(batch_size, sequence_length
    + 1, 1)`, *optional*, defaults to `None`) — Batch of padded token-averaged energy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speaker_ids` (`torch.LongTensor` of shape `(batch_size, 1)`, *optional*, defaults
    to `None`) — Speaker ids used to condition features of speech output by the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lang_ids` (`torch.LongTensor` of shape `(batch_size, 1)`, *optional*, defaults
    to `None`) — Language ids used to condition features of speech output by the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speaker_embedding` (`torch.FloatTensor` of shape `(batch_size, embedding_dim)`,
    *optional*, defaults to `None`) — Embedding containing conditioning signals for
    the features of the speech.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `None`) — Whether or not to
    return a `FastSpeech2ConformerModelOutput` instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*, defaults to `None`) — Whether or not
    to return the attentions tensors of all attention layers. See `attentions` under
    returned tensors for more detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*, defaults to `None`) — Whether or
    not to return the hidden states of all layers. See `hidden_states` under returned
    tensors for more detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.fastspeech2_conformer.modeling_fastspeech2_conformer.FastSpeech2ConformerModelOutput`
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.fastspeech2_conformer.modeling_fastspeech2_conformer.FastSpeech2ConformerModelOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([FastSpeech2ConformerConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Spectrogram generation loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spectrogram` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    num_bins)`) — The predicted spectrogram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the encoder at the output of each layer plus the initial embedding
    outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the encoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the decoder at the output of each layer plus the initial embedding
    outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the decoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`duration_outputs` (`torch.LongTensor` of shape `(batch_size, max_text_length
    + 1)`, *optional*) — Outputs of the duration predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_outputs` (`torch.FloatTensor` of shape `(batch_size, max_text_length
    + 1, 1)`, *optional*) — Outputs of the pitch predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_outputs` (`torch.FloatTensor` of shape `(batch_size, max_text_length
    + 1, 1)`, *optional*) — Outputs of the energy predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: FastSpeech2ConformerHifiGan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.FastSpeech2ConformerHifiGan`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1446)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([FastSpeech2ConformerConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HiFi-GAN vocoder. This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1516)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`spectrogram` (`torch.FloatTensor`) — Tensor containing the log-mel spectrograms.
    Can be batched and of shape `(batch_size, sequence_length, config.model_in_dim)`,
    or un-batched and of shape `(sequence_length, config.model_in_dim)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: Tensor containing the speech waveform. If the input spectrogram is batched,
    will be of shape `(batch_size, num_frames,)`. If un-batched, will be of shape
    `(num_frames,)`.
  prefs: []
  type: TYPE_NORMAL
- en: Converts a log-mel spectrogram into a speech waveform. Passing a batch of log-mel
    spectrograms returns a batch of speech waveforms. Passing a single, un-batched
    log-mel spectrogram returns a single, un-batched speech waveform.
  prefs: []
  type: TYPE_NORMAL
- en: FastSpeech2ConformerWithHifiGan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.FastSpeech2ConformerWithHifiGan`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1564)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([FastSpeech2ConformerWithHifiGanConfig](/docs/transformers/v4.37.2/en/model_doc/fastspeech2_conformer#transformers.FastSpeech2ConformerWithHifiGanConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FastSpeech2ConformerModel with a FastSpeech2ConformerHifiGan vocoder head
    that performs text-to-speech (waveform). This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/fastspeech2_conformer/modeling_fastspeech2_conformer.py#L1579)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`input_ids` (`torch.LongTensor` of shape `(batch_size, sequence_length)`) —
    Input sequence of text vectors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask` (`torch.LongTensor` of shape `(batch_size, sequence_length)`,
    *optional*, defaults to `None`) — Mask to avoid performing convolution and attention
    on padding token indices. Mask values selected in `[0, 1]`: 0 for tokens that
    are **masked**, 1 for tokens that are **not masked**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spectrogram_labels` (`torch.FloatTensor` of shape `(batch_size, max_spectrogram_length,
    num_mel_bins)`, *optional*, defaults to `None`) — Batch of padded target features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration_labels` (`torch.LongTensor` of shape `(batch_size, sequence_length
    + 1)`, *optional*, defaults to `None`) — Batch of padded durations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_labels` (`torch.FloatTensor` of shape `(batch_size, sequence_length
    + 1, 1)`, *optional*, defaults to `None`) — Batch of padded token-averaged pitch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_labels` (`torch.FloatTensor` of shape `(batch_size, sequence_length
    + 1, 1)`, *optional*, defaults to `None`) — Batch of padded token-averaged energy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speaker_ids` (`torch.LongTensor` of shape `(batch_size, 1)`, *optional*, defaults
    to `None`) — Speaker ids used to condition features of speech output by the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lang_ids` (`torch.LongTensor` of shape `(batch_size, 1)`, *optional*, defaults
    to `None`) — Language ids used to condition features of speech output by the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speaker_embedding` (`torch.FloatTensor` of shape `(batch_size, embedding_dim)`,
    *optional*, defaults to `None`) — Embedding containing conditioning signals for
    the features of the speech.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `None`) — Whether or not to
    return a `FastSpeech2ConformerModelOutput` instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*, defaults to `None`) — Whether or not
    to return the attentions tensors of all attention layers. See `attentions` under
    returned tensors for more detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*, defaults to `None`) — Whether or
    not to return the hidden states of all layers. See `hidden_states` under returned
    tensors for more detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.fastspeech2_conformer.modeling_fastspeech2_conformer.FastSpeech2ConformerWithHifiGanOutput`
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.fastspeech2_conformer.modeling_fastspeech2_conformer.FastSpeech2ConformerWithHifiGanOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration (`<class 'transformers.models.fastspeech2_conformer.configuration_fastspeech2_conformer.FastSpeech2ConformerWithHifiGanConfig'>`)
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`waveform` (`torch.FloatTensor` of shape `(batch_size, audio_length)`) — Speech
    output as a result of passing the predicted mel spectrogram through the vocoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Spectrogram generation loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spectrogram` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    num_bins)`) — The predicted spectrogram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the encoder at the output of each layer plus the initial embedding
    outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the encoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the decoder at the output of each layer plus the initial embedding
    outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the decoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`duration_outputs` (`torch.LongTensor` of shape `(batch_size, max_text_length
    + 1)`, *optional*) — Outputs of the duration predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pitch_outputs` (`torch.FloatTensor` of shape `(batch_size, max_text_length
    + 1, 1)`, *optional*) — Outputs of the pitch predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`energy_outputs` (`torch.FloatTensor` of shape `(batch_size, max_text_length
    + 1, 1)`, *optional*) — Outputs of the energy predictor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
