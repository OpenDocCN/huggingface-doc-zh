- en: UNet1DModel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/models/unet](https://huggingface.co/docs/diffusers/api/models/unet)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet](https://huggingface.co/papers/1505.04597) model was originally introduced
    by Ronneberger et al. for biomedical image segmentation, but it is also commonly
    used in ðŸ¤— Diffusers because it outputs images that are the same size as the input.
    It is one of the most important components of a diffusion system because it facilitates
    the actual diffusion process. There are several variants of the UNet model in
    ðŸ¤— Diffusers, depending on itâ€™s number of dimensions and whether it is a conditional
    model or not. This is a 1D UNet model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*There is large consent that successful training of deep networks requires
    many thousand annotated training samples. In this paper, we present a network
    and training strategy that relies on the strong use of data augmentation to use
    the available annotated samples more efficiently. The architecture consists of
    a contracting path to capture context and a symmetric expanding path that enables
    precise localization. We show that such a network can be trained end-to-end from
    very few images and outperforms the prior best method (a sliding-window convolutional
    network) on the ISBI challenge for segmentation of neuronal structures in electron
    microscopic stacks. Using the same network trained on transmitted light microscopy
    images (phase contrast and DIC) we won the ISBI cell tracking challenge 2015 in
    these categories by a large margin. Moreover, the network is fast. Segmentation
    of a 512x512 image takes less than a second on a recent GPU. The full implementation
    (based on Caffe) and the trained networks are available at [http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net](http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net).*'
  prefs: []
  type: TYPE_NORMAL
- en: UNet1DModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.UNet1DModel`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_1d.py#L41)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample_size` (`int`, *optional*) â€” Default length of sample. Should be adaptable
    at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_channels` (`int`, *optional*, defaults to 2) â€” Number of channels in the
    input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`out_channels` (`int`, *optional*, defaults to 2) â€” Number of channels in the
    output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extra_in_channels` (`int`, *optional*, defaults to 0) â€” Number of additional
    channels to be added to the input of the first down block. Useful for cases where
    the input data has more channels than what the model was initially designed for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time_embedding_type` (`str`, *optional*, defaults to `"fourier"`) â€” Type of
    time embedding to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`freq_shift` (`float`, *optional*, defaults to 0.0) â€” Frequency shift for Fourier
    time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flip_sin_to_cos` (`bool`, *optional*, defaults to `False`) â€” Whether to flip
    sin to cos for Fourier time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`down_block_types` (`Tuple[str]`, *optional*, defaults to `("DownBlock1DNoSkip",
    "DownBlock1D", "AttnDownBlock1D")`) â€” Tuple of downsample block types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`up_block_types` (`Tuple[str]`, *optional*, defaults to `("AttnUpBlock1D",
    "UpBlock1D", "UpBlock1DNoSkip")`) â€” Tuple of upsample block types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`block_out_channels` (`Tuple[int]`, *optional*, defaults to `(32, 32, 64)`)
    â€” Tuple of block output channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mid_block_type` (`str`, *optional*, defaults to `"UNetMidBlock1D"`) â€” Block
    type for middle of UNet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`out_block_type` (`str`, *optional*, defaults to `None`) â€” Optional output
    processing block of UNet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`act_fn` (`str`, *optional*, defaults to `None`) â€” Optional activation function
    in UNet blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`norm_num_groups` (`int`, *optional*, defaults to 8) â€” The number of groups
    for normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layers_per_block` (`int`, *optional*, defaults to 1) â€” The number of layers
    per block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downsample_each_block` (`int`, *optional*, defaults to `False`) â€” Experimental
    feature for using a UNet without upsampling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 1D UNet model that takes a noisy sample and a timestep and returns a sample
    shaped output.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin).
    Check the superclass documentation for itâ€™s generic methods implemented for all
    models (such as downloading or saving).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_1d.py#L195)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor`) â€” The noisy input tensor with the following
    shape `(batch_size, num_channels, sample_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestep` (`torch.FloatTensor` or `float` or `int`) â€” The number of timesteps
    to denoise an input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) â€” Whether or not to
    return a `~models.unet_1d.UNet1DOutput` instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`~models.unet_1d.UNet1DOutput` or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If `return_dict` is True, an `~models.unet_1d.UNet1DOutput` is returned, otherwise
    a `tuple` is returned where the first element is the sample tensor.
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet1DModel](/docs/diffusers/v0.26.3/en/api/models/unet#diffusers.UNet1DModel)
    forward method.
  prefs: []
  type: TYPE_NORMAL
- en: UNet1DOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.models.unets.unet_1d.UNet1DOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_1d.py#L28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor` of shape `(batch_size, num_channels, sample_size)`)
    â€” The hidden states output from the last layer of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of [UNet1DModel](/docs/diffusers/v0.26.3/en/api/models/unet#diffusers.UNet1DModel).
  prefs: []
  type: TYPE_NORMAL
