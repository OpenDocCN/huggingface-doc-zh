["```py\n# app.py\nfrom huggingface_hub import webhook_endpoint, WebhookPayload\n\n@webhook_endpoint\nasync def trigger_training(payload: WebhookPayload) -> None:\n    if payload.repo.type == \"dataset\" and payload.event.action == \"update\":\n        # Trigger a training job if a dataset is updated\n        ...\n```", "```py\nWebhook secret is not defined. This means your webhook endpoints will be open to everyone.\nTo add a secret, set `WEBHOOK_SECRET` as environment variable or pass it at initialization: \n        `app = WebhooksServer(webhook_secret='my_secret', ...)`\nFor more details about webhook secrets, please refer to https://huggingface.co/docs/hub/webhooks#webhook-secret.\nRunning on local URL:  http://127.0.0.1:7860\nRunning on public URL: https://1fadb0f52d8bf825fc.gradio.live\n\nThis share link expires in 72 hours. For free permanent hosting and GPU upgrades (NEW!), check out Spaces: https://huggingface.co/spaces\n\nWebhooks are correctly setup and ready to use:\n  - POST https://1fadb0f52d8bf825fc.gradio.live/webhooks/trigger_training\nGo to https://huggingface.co/settings/webhooks to setup your webhooks.\n```", "```py\n# app.py\nfrom huggingface_hub import webhook_endpoint, WebhookPayload\n\n@webhook_endpoint\nasync def trigger_training(payload: WebhookPayload) -> None:\n    if payload.repo.type == \"dataset\" and payload.event.action == \"update\":\n        # Trigger a training job if a dataset is updated\n        ...\n\n@webhook_endpoint\nasync def trigger_evaluation(payload: WebhookPayload) -> None:\n    if payload.repo.type == \"model\" and payload.event.action == \"update\":\n        # Trigger an evaluation job if a model is updated\n        ...\n```", "```py\n(...)\nWebhooks are correctly setup and ready to use:\n  - POST https://1fadb0f52d8bf825fc.gradio.live/webhooks/trigger_training\n  - POST https://1fadb0f52d8bf825fc.gradio.live/webhooks/trigger_evaluation\n```", "```py\nimport gradio as gr\nfrom fastapi import Request\nfrom huggingface_hub import WebhooksServer, WebhookPayload\n\n# 1\\. Define  UI\nwith gr.Blocks() as ui:\n    ...\n\n# 2\\. Create WebhooksServer with custom UI and secret\napp = WebhooksServer(ui=ui, webhook_secret=\"my_secret_key\")\n\n# 3\\. Register webhook with explicit name\n@app.add_webhook(\"/say_hello\")\nasync def hello(payload: WebhookPayload):\n    return {\"message\": \"hello\"}\n\n# 4\\. Register webhook with implicit name\n@app.add_webhook\nasync def goodbye(payload: WebhookPayload):\n    return {\"message\": \"goodbye\"}\n\n# 5\\. Start server (optional)\napp.run()\n```"]