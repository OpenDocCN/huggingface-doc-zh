- en: Effective and efficient diffusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/stable_diffusion](https://huggingface.co/docs/diffusers/stable_diffusion)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Getting the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    to generate images in a certain style or include what you want can be tricky.
    Often times, you have to run the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    several times before you end up with an image you‚Äôre happy with. But generating
    something out of nothing is a computationally intensive process, especially if
    you‚Äôre running inference over and over again.
  prefs: []
  type: TYPE_NORMAL
- en: This is why it‚Äôs important to get the most *computational* (speed) and *memory*
    (GPU vRAM) efficiency from the pipeline to reduce the time between inference cycles
    so you can iterate faster.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial walks you through how to generate faster and better with the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline).
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by loading the [`runwayml/stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5)
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The example prompt you‚Äôll use is a portrait of an old warrior chief, but feel
    free to use your own prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Speed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: üí° If you don‚Äôt have access to a GPU, you can use one for free from a GPU provider
    like [Colab](https://colab.research.google.com/)!
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the simplest ways to speed up inference is to place the pipeline on
    a GPU the same way you would with any PyTorch module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure you can use the same image and improve on it, use a [`Generator`](https://pytorch.org/docs/stable/generated/torch.Generator.html)
    and set a seed for [reproducibility](./using-diffusers/reproducibility):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can generate an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/97b4b76d7c052f96d96b7a8b402a25ce.png)'
  prefs: []
  type: TYPE_IMG
- en: This process took ~30 seconds on a T4 GPU (it might be faster if your allocated
    GPU is better than a T4). By default, the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    runs inference with full `float32` precision for 50 inference steps. You can speed
    this up by switching to a lower precision like `float16` or running fewer inference
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs start by loading the model in `float16` and generate an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/66880d2cc1c9bb78b8e03483b16d1ca3.png)'
  prefs: []
  type: TYPE_IMG
- en: This time, it only took ~11 seconds to generate the image, which is almost 3x
    faster than before!
  prefs: []
  type: TYPE_NORMAL
- en: üí° We strongly suggest always running your pipelines in `float16`, and so far,
    we‚Äôve rarely seen any degradation in output quality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another option is to reduce the number of inference steps. Choosing a more
    efficient scheduler could help decrease the number of steps without sacrificing
    output quality. You can find which schedulers are compatible with the current
    model in the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    by calling the `compatibles` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The Stable Diffusion model uses the [PNDMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/pndm#diffusers.PNDMScheduler)
    by default which usually requires ~50 inference steps, but more performant schedulers
    like [DPMSolverMultistepScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/multistep_dpm_solver#diffusers.DPMSolverMultistepScheduler),
    require only ~20 or 25 inference steps. Use the [from_config()](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin.from_config)
    method to load a new scheduler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now set the `num_inference_steps` to 20:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a0e3931ebf91a12e3caef2d780586fec.png)'
  prefs: []
  type: TYPE_IMG
- en: Great, you‚Äôve managed to cut the inference time to just 4 seconds! ‚ö°Ô∏è
  prefs: []
  type: TYPE_NORMAL
- en: Memory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The other key to improving pipeline performance is consuming less memory, which
    indirectly implies more speed, since you‚Äôre often trying to maximize the number
    of images generated per second. The easiest way to see how many images you can
    generate at once is to try out different batch sizes until you get an `OutOfMemoryError`
    (OOM).
  prefs: []
  type: TYPE_NORMAL
- en: Create a function that‚Äôll generate a batch of images from a list of prompts
    and `Generators`. Make sure to assign each `Generator` a seed so you can reuse
    it if it produces a good result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Start with `batch_size=4` and see how much memory you‚Äôve consumed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Unless you have a GPU with more vRAM, the code above probably returned an `OOM`
    error! Most of the memory is taken up by the cross-attention layers. Instead of
    running this operation in a batch, you can run it sequentially to save a significant
    amount of memory. All you have to do is configure the pipeline to use the [enable_attention_slicing()](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/upscale#diffusers.StableDiffusionUpscalePipeline.enable_attention_slicing)
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now try increasing the `batch_size` to 8!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f242684980096d86bea7fa383ccd606a.png)'
  prefs: []
  type: TYPE_IMG
- en: Whereas before you couldn‚Äôt even generate a batch of 4 images, now you can generate
    a batch of 8 images at ~3.5 seconds per image! This is probably the fastest you
    can go on a T4 GPU without sacrificing quality.
  prefs: []
  type: TYPE_NORMAL
- en: Quality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the last two sections, you learned how to optimize the speed of your pipeline
    by using `fp16`, reducing the number of inference steps by using a more performant
    scheduler, and enabling attention slicing to reduce memory consumption. Now you‚Äôre
    going to focus on how to improve the quality of generated images.
  prefs: []
  type: TYPE_NORMAL
- en: Better checkpoints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The most obvious step is to use better checkpoints. The Stable Diffusion model
    is a good starting point, and since its official launch, several improved versions
    have also been released. However, using a newer version doesn‚Äôt automatically
    mean you‚Äôll get better results. You‚Äôll still have to experiment with different
    checkpoints yourself, and do a little research (such as using [negative prompts](https://minimaxir.com/2022/11/stable-diffusion-negative-prompt/))
    to get the best results.
  prefs: []
  type: TYPE_NORMAL
- en: As the field grows, there are more and more high-quality checkpoints finetuned
    to produce certain styles. Try exploring the [Hub](https://huggingface.co/models?library=diffusers&sort=downloads)
    and [Diffusers Gallery](https://huggingface.co/spaces/huggingface-projects/diffusers-gallery)
    to find one you‚Äôre interested in!
  prefs: []
  type: TYPE_NORMAL
- en: Better pipeline components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also try replacing the current pipeline components with a newer version.
    Let‚Äôs try loading the latest [autoencoder](https://huggingface.co/stabilityai/stable-diffusion-2-1/tree/main/vae)
    from Stability AI into the pipeline, and generate some images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f35b7f9a028460ebed6e9b753a1241d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Better prompt engineering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The text prompt you use to generate an image is super important, so much so
    that it is called *prompt engineering*. Some considerations to keep during prompt
    engineering are:'
  prefs: []
  type: TYPE_NORMAL
- en: How is the image or similar images of the one I want to generate stored on the
    internet?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What additional detail can I give that steers the model towards the style I
    want?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With this in mind, let‚Äôs improve the prompt to include color and higher quality
    details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate a batch of images with the new prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/52c687d1d7c73bcf4a482dc45feea714.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Pretty impressive! Let‚Äôs tweak the second image - corresponding to the `Generator`
    with a seed of `1` - a bit more by adding some text about the age of the subject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/181d5d3b3b595630cddf8064c033ea4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this tutorial, you learned how to optimize a [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    for computational and memory efficiency as well as improving the quality of generated
    outputs. If you‚Äôre interested in making your pipeline even faster, take a look
    at the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how [PyTorch 2.0](./optimization/torch2.0) and [`torch.compile`](https://pytorch.org/docs/stable/generated/torch.compile.html)
    can yield 5 - 300% faster inference speed. On an A100 GPU, inference can be up
    to 50% faster!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you can‚Äôt use PyTorch 2, we recommend you install [xFormers](./optimization/xformers).
    Its memory-efficient attention mechanism works great with PyTorch 1.13.1 for faster
    speed and reduced memory consumption.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other optimization techniques, such as model offloading, are covered in [this
    guide](./optimization/fp16).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
