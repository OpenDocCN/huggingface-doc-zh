- en: Added Tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/tokenizers/api/added-tokens](https://huggingface.co/docs/tokenizers/api/added-tokens)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link rel="modulepreload" href="/docs/tokenizers/v0.13.4.rc2/en/_app/assets/pages/__layout.svelte-hf-doc-builder.css">
    <link rel="modulepreload" href="/docs/tokenizers/v0.13.4.rc2/en/_app/start-hf-doc-builder.js">
    <link rel="modulepreload" href="/docs/tokenizers/v0.13.4.rc2/en/_app/chunks/vendor-hf-doc-builder.js">
    <link rel="modulepreload" href="/docs/tokenizers/v0.13.4.rc2/en/_app/chunks/paths-hf-doc-builder.js">
    <link rel="modulepreload" href="/docs/tokenizers/v0.13.4.rc2/en/_app/pages/__layout.svelte-hf-doc-builder.js">
    <link rel="modulepreload" href="/docs/tokenizers/v0.13.4.rc2/en/_app/pages/api/added-tokens.mdx-hf-doc-builder.js">
    <link rel="modulepreload" href="/docs/tokenizers/v0.13.4.rc2/en/_app/chunks/Docstring-hf-doc-builder.js">
    <link rel="modulepreload" href="/docs/tokenizers/v0.13.4.rc2/en/_app/chunks/IconCopyLink-hf-doc-builder.js">
    <link rel="modulepreload" href="/docs/tokenizers/v0.13.4.rc2/en/_app/chunks/TokenizersLanguageContent-hf-doc-builder.js">PythonRustNode
  prefs: []
  type: TYPE_NORMAL
- en: AddedToken
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.AddedToken`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`content` (`str`) — The content of the token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`single_word` (`bool`, defaults to `False`) — Defines whether this token should
    only match single words. If `True`, this token will never match inside of a word.
    For example the token `ing` would match on `tokenizing` if this option is `False`,
    but not if it is `True`. The notion of ”*inside of a word*” is defined by the
    word boundaries pattern in regular expressions (ie. the token should start and
    end with word boundaries).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lstrip` (`bool`, defaults to `False`) — Defines whether this token should
    strip all potential whitespaces on its left side. If `True`, this token will greedily
    match any whitespace on its left. For example if we try to match the token `[MASK]`
    with `lstrip=True`, in the text `"I saw a [MASK]"`, we would match on `" [MASK]"`.
    (Note the space on the left).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rstrip` (`bool`, defaults to `False`) — Defines whether this token should
    strip all potential whitespaces on its right side. If `True`, this token will
    greedily match any whitespace on its right. It works just like `lstrip` but on
    the right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`normalized` (`bool`, defaults to `True` with —meth:*~tokenizers.Tokenizer.add_tokens*
    and `False` with `add_special_tokens()`): Defines whether this token should match
    against the normalized version of the input text. For example, with the added
    token `"yesterday"`, and a normalizer in charge of lowercasing the text, the token
    could be extract from the input `"I saw a lion Yesterday"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Represents a token that can be be added to a [Tokenizer](/docs/tokenizers/v0.13.4.rc2/en/api/tokenizer#tokenizers.Tokenizer).
    It can have special options that defines the way it should behave.
  prefs: []
  type: TYPE_NORMAL
- en: property content
  prefs: []
  type: TYPE_NORMAL
- en: Get the content of this `AddedToken`
  prefs: []
  type: TYPE_NORMAL
- en: property lstrip
  prefs: []
  type: TYPE_NORMAL
- en: Get the value of the `lstrip` option
  prefs: []
  type: TYPE_NORMAL
- en: property normalized
  prefs: []
  type: TYPE_NORMAL
- en: Get the value of the `normalized` option
  prefs: []
  type: TYPE_NORMAL
- en: property rstrip
  prefs: []
  type: TYPE_NORMAL
- en: Get the value of the `rstrip` option
  prefs: []
  type: TYPE_NORMAL
- en: property single_word
  prefs: []
  type: TYPE_NORMAL
- en: Get the value of the `single_word` option
  prefs: []
  type: TYPE_NORMAL
