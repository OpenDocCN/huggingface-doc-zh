- en: Tiny AutoEncoder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/diffusers/api/models/autoencoder_tiny](https://huggingface.co/docs/diffusers/api/models/autoencoder_tiny)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/15.f4dd1c83.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Docstring.93f6f462.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/CodeBlock.57fe6e13.js">
  prefs: []
  type: TYPE_NORMAL
- en: Tiny AutoEncoder for Stable Diffusion (TAESD) was introduced in [madebyollin/taesd](https://github.com/madebyollin/taesd)
    by Ollin Boer Bohan. It is a tiny distilled version of Stable Diffusion’s VAE
    that can quickly decode the latents in a [StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline)
    or [StableDiffusionXLPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/stable_diffusion_xl#diffusers.StableDiffusionXLPipeline)
    almost instantly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use with Stable Diffusion v-2.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To use with Stable Diffusion XL 1.0
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: AutoencoderTiny
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.AutoencoderTiny'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_tiny.py#L41)'
  prefs: []
  type: TYPE_NORMAL
- en: '( in_channels: int = 3 out_channels: int = 3 encoder_block_out_channels: Tuple
    = (64, 64, 64, 64) decoder_block_out_channels: Tuple = (64, 64, 64, 64) act_fn:
    str = ''relu'' latent_channels: int = 4 upsampling_scaling_factor: int = 2 num_encoder_blocks:
    Tuple = (1, 3, 3, 3) num_decoder_blocks: Tuple = (3, 3, 3, 1) latent_magnitude:
    int = 3 latent_shift: float = 0.5 force_upcast: bool = False scaling_factor: float
    = 1.0 )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**in_channels** (`int`, *optional*, defaults to 3) — Number of channels in
    the input image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**out_channels** (`int`, *optional*, defaults to 3) — Number of channels in
    the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoder_block_out_channels** (`Tuple[int]`, *optional*, defaults to `(64,
    64, 64, 64)`) — Tuple of integers representing the number of output channels for
    each encoder block. The length of the tuple should be equal to the number of encoder
    blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**decoder_block_out_channels** (`Tuple[int]`, *optional*, defaults to `(64,
    64, 64, 64)`) — Tuple of integers representing the number of output channels for
    each decoder block. The length of the tuple should be equal to the number of decoder
    blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**act_fn** (`str`, *optional*, defaults to `"relu"`) — Activation function
    to be used throughout the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**latent_channels** (`int`, *optional*, defaults to 4) — Number of channels
    in the latent representation. The latent space acts as a compressed representation
    of the input image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**upsampling_scaling_factor** (`int`, *optional*, defaults to 2) — Scaling
    factor for upsampling in the decoder. It determines the size of the output image
    during the upsampling process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_encoder_blocks** (`Tuple[int]`, *optional*, defaults to `(1, 3, 3, 3)`)
    — Tuple of integers representing the number of encoder blocks at each stage of
    the encoding process. The length of the tuple should be equal to the number of
    stages in the encoder. Each stage has a different number of encoder blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_decoder_blocks** (`Tuple[int]`, *optional*, defaults to `(3, 3, 3, 1)`)
    — Tuple of integers representing the number of decoder blocks at each stage of
    the decoding process. The length of the tuple should be equal to the number of
    stages in the decoder. Each stage has a different number of decoder blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**latent_magnitude** (`float`, *optional*, defaults to 3.0) — Magnitude of
    the latent representation. This parameter scales the latent representation values
    to control the extent of information preservation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**latent_shift** (float, *optional*, defaults to 0.5) — Shift applied to the
    latent representation. This parameter controls the center of the latent space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**scaling_factor** (`float`, *optional*, defaults to 1.0) — The component-wise
    standard deviation of the trained latent space computed using the first batch
    of the training set. This is used to scale the latent space to have unit variance
    when training the diffusion model. The latents are scaled with the formula `z
    = z * scaling_factor` before being passed to the diffusion model. When decoding,
    the latents are scaled back to the original scale with the formula: `z = 1 / scaling_factor
    * z`. For more details, refer to sections 4.3.2 and D.1 of the [High-Resolution
    Image Synthesis with Latent Diffusion Models](https://arxiv.org/abs/2112.10752)
    paper. For this Autoencoder, however, no such scaling factor was used, hence the
    value of 1.0 as the default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**force_upcast** (`bool`, *optional*, default to `False`) — If enabled it will
    force the VAE to run in float32 for high image resolution pipelines, such as SD-XL.
    VAE can be fine-tuned / trained to a lower range without losing too much precision,
    in which case `force_upcast` can be set to `False` (see this fp16-friendly [AutoEncoder](https://huggingface.co/madebyollin/sdxl-vae-fp16-fix)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tiny distilled VAE model for encoding images into latents and decoding latent
    representations into images.
  prefs: []
  type: TYPE_NORMAL
- en: '[AutoencoderTiny](/docs/diffusers/v0.26.3/en/api/models/autoencoder_tiny#diffusers.AutoencoderTiny)
    is a wrapper around the original implementation of `TAESD`.'
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin).
    Check the superclass documentation for its generic methods implemented for all
    models (such as downloading or saving).
  prefs: []
  type: TYPE_NORMAL
- en: '#### disable_slicing'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_tiny.py#L173)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Disable sliced VAE decoding. If `enable_slicing` was previously enabled, this
    method will go back to computing decoding in one step.
  prefs: []
  type: TYPE_NORMAL
- en: '#### disable_tiling'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_tiny.py#L188)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Disable tiled VAE decoding. If `enable_tiling` was previously enabled, this
    method will go back to computing decoding in one step.
  prefs: []
  type: TYPE_NORMAL
- en: '#### enable_slicing'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_tiny.py#L166)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Enable sliced VAE decoding. When this option is enabled, the VAE will split
    the input tensor in slices to compute decoding in several steps. This is useful
    to save some memory and allow larger batch sizes.
  prefs: []
  type: TYPE_NORMAL
- en: '#### enable_tiling'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_tiny.py#L180)'
  prefs: []
  type: TYPE_NORMAL
- en: '( use_tiling: bool = True )'
  prefs: []
  type: TYPE_NORMAL
- en: Enable tiled VAE decoding. When this option is enabled, the VAE will split the
    input tensor into tiles to compute decoding and encoding in several steps. This
    is useful for saving a large amount of memory and to allow processing larger images.
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_tiny.py#L320)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample: FloatTensor return_dict: bool = True )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — Input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a `DecoderOutput` instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### scale_latents'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_tiny.py#L158)'
  prefs: []
  type: TYPE_NORMAL
- en: '( x: FloatTensor )'
  prefs: []
  type: TYPE_NORMAL
- en: raw latents -> [0, 1]
  prefs: []
  type: TYPE_NORMAL
- en: '#### unscale_latents'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_tiny.py#L162)'
  prefs: []
  type: TYPE_NORMAL
- en: '( x: FloatTensor )'
  prefs: []
  type: TYPE_NORMAL
- en: '[0, 1] -> raw latents'
  prefs: []
  type: TYPE_NORMAL
- en: AutoencoderTinyOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.models.autoencoders.autoencoder_tiny.AutoencoderTinyOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_tiny.py#L28)'
  prefs: []
  type: TYPE_NORMAL
- en: '( latents: Tensor )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**latents** (`torch.Tensor`) — Encoded outputs of the `Encoder`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output of AutoencoderTiny encoding method.
  prefs: []
  type: TYPE_NORMAL
