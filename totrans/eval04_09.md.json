["```py\nfrom datasets import load_dataset\nfrom evaluate import evaluator\nfrom transformers import AutoModelForSequenceClassification, pipeline\n\ndata = load_dataset(\"imdb\", split=\"test\").shuffle(seed=42).select(range(1000))\ntask_evaluator = evaluator(\"text-classification\")\n\n# 1\\. Pass a model name or path\neval_results = task_evaluator.compute(\n    model_or_pipeline=\"lvwerra/distilbert-imdb\",\n    data=data,\n    label_mapping={\"NEGATIVE\": 0, \"POSITIVE\": 1}\n)\n\n# 2\\. Pass an instantiated model\nmodel = AutoModelForSequenceClassification.from_pretrained(\"lvwerra/distilbert-imdb\")\n\neval_results = task_evaluator.compute(\n    model_or_pipeline=model,\n    data=data,\n    label_mapping={\"NEGATIVE\": 0, \"POSITIVE\": 1}\n)\n\n# 3\\. Pass an instantiated pipeline\npipe = pipeline(\"text-classification\", model=\"lvwerra/distilbert-imdb\")\n\neval_results = task_evaluator.compute(\n    model_or_pipeline=pipe,\n    data=data,\n    label_mapping={\"NEGATIVE\": 0, \"POSITIVE\": 1}\n)\nprint(eval_results)\n```", "```py\n{\n    'accuracy': 0.918,\n    'latency_in_seconds': 0.013,\n    'samples_per_second': 78.887,\n    'total_time_in_seconds': 12.676\n}\n```", "```py\nimport evaluate\n\neval_results = task_evaluator.compute(\n    model_or_pipeline=\"lvwerra/distilbert-imdb\",\n    data=data,\n    metric=evaluate.combine([\"accuracy\", \"recall\", \"precision\", \"f1\"]),\n    label_mapping={\"NEGATIVE\": 0, \"POSITIVE\": 1}\n)\nprint(eval_results)\n\n```", "```py\n{\n    'accuracy': 0.918,\n    'f1': 0.916,\n    'precision': 0.9147,\n    'recall': 0.9187,\n    'latency_in_seconds': 0.013,\n    'samples_per_second': 78.887,\n    'total_time_in_seconds': 12.676\n}\n```", "```py\nimport pandas as pd\nfrom datasets import load_dataset\nfrom evaluate import evaluator\nfrom transformers import pipeline\n\nmodels = [\n    \"xlm-roberta-large-finetuned-conll03-english\",\n    \"dbmdz/bert-large-cased-finetuned-conll03-english\",\n    \"elastic/distilbert-base-uncased-finetuned-conll03-english\",\n    \"dbmdz/electra-large-discriminator-finetuned-conll03-english\",\n    \"gunghio/distilbert-base-multilingual-cased-finetuned-conll2003-ner\",\n    \"philschmid/distilroberta-base-ner-conll2003\",\n    \"Jorgeutd/albert-base-v2-finetuned-ner\",\n]\n\ndata = load_dataset(\"conll2003\", split=\"validation\").shuffle().select(1000)\ntask_evaluator = evaluator(\"token-classification\")\n\nresults = []\nfor model in models:\n    results.append(\n        task_evaluator.compute(\n            model_or_pipeline=model, data=data, metric=\"seqeval\"\n            )\n        )\n\ndf = pd.DataFrame(results, index=models)\ndf[[\"overall_f1\", \"overall_accuracy\", \"total_time_in_seconds\", \"samples_per_second\", \"latency_in_seconds\"]]\n```", "```py\nimport evaluate\nfrom evaluate.visualization import radar_plot\n\n>>> plot = radar_plot(data=results, model_names=models, invert_range=[\"latency_in_seconds\"])\n>>> plot.show()\n```", "```py\nfrom datasets import load_dataset\nfrom evaluate import evaluator\n\ntask_evaluator = evaluator(\"question-answering\")\n\ndata = load_dataset(\"squad\", split=\"validation[:1000]\")\neval_results = task_evaluator.compute(\n    model_or_pipeline=\"distilbert-base-uncased-distilled-squad\",\n    data=data,\n    metric=\"squad\",\n    strategy=\"bootstrap\",\n    n_resamples=30\n)\n```", "```py\n{\n    'exact_match':\n    {\n        'confidence_interval': (79.67, 84.54),\n        'score': 82.30,\n        'standard_error': 1.28\n    },\n    'f1':\n    {\n        'confidence_interval': (85.30, 88.88),\n        'score': 87.23,\n        'standard_error': 0.97\n    },\n    'latency_in_seconds': 0.0085,\n    'samples_per_second': 117.31,\n    'total_time_in_seconds': 8.52\n }\n```", "```py\ndata = load_dataset(\"imagenet-1k\", split=\"validation\", use_auth_token=True)\n\npipe = pipeline(\n    task=\"image-classification\",\n    model=\"facebook/deit-small-distilled-patch16-224\"\n)\n\ntask_evaluator = evaluator(\"image-classification\")\neval_results = task_evaluator.compute(\n    model_or_pipeline=pipe,\n    data=data,\n    metric=\"accuracy\",\n    label_mapping=pipe.model.config.label2id\n)\n```"]