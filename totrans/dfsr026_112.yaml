- en: UNet2DModel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/models/unet2d](https://huggingface.co/docs/diffusers/api/models/unet2d)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet](https://huggingface.co/papers/1505.04597) model was originally introduced
    by Ronneberger et al. for biomedical image segmentation, but it is also commonly
    used in ü§ó Diffusers because it outputs images that are the same size as the input.
    It is one of the most important components of a diffusion system because it facilitates
    the actual diffusion process. There are several variants of the UNet model in
    ü§ó Diffusers, depending on it‚Äôs number of dimensions and whether it is a conditional
    model or not. This is a 2D UNet model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*There is large consent that successful training of deep networks requires
    many thousand annotated training samples. In this paper, we present a network
    and training strategy that relies on the strong use of data augmentation to use
    the available annotated samples more efficiently. The architecture consists of
    a contracting path to capture context and a symmetric expanding path that enables
    precise localization. We show that such a network can be trained end-to-end from
    very few images and outperforms the prior best method (a sliding-window convolutional
    network) on the ISBI challenge for segmentation of neuronal structures in electron
    microscopic stacks. Using the same network trained on transmitted light microscopy
    images (phase contrast and DIC) we won the ISBI cell tracking challenge 2015 in
    these categories by a large margin. Moreover, the network is fast. Segmentation
    of a 512x512 image takes less than a second on a recent GPU. The full implementation
    (based on Caffe) and the trained networks are available at [http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net](http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net).*'
  prefs: []
  type: TYPE_NORMAL
- en: UNet2DModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.UNet2DModel`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d.py#L40)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample_size` (`int` or `Tuple[int, int]`, *optional*, defaults to `None`)
    ‚Äî Height and width of input/output sample. Dimensions must be a multiple of `2
    ** (len(block_out_channels) - 1)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_channels` (`int`, *optional*, defaults to 3) ‚Äî Number of channels in the
    input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`out_channels` (`int`, *optional*, defaults to 3) ‚Äî Number of channels in the
    output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_input_sample` (`bool`, *optional*, defaults to `False`) ‚Äî Whether to
    center the input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time_embedding_type` (`str`, *optional*, defaults to `"positional"`) ‚Äî Type
    of time embedding to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`freq_shift` (`int`, *optional*, defaults to 0) ‚Äî Frequency shift for Fourier
    time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flip_sin_to_cos` (`bool`, *optional*, defaults to `True`) ‚Äî Whether to flip
    sin to cos for Fourier time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`down_block_types` (`Tuple[str]`, *optional*, defaults to `("DownBlock2D",
    "AttnDownBlock2D", "AttnDownBlock2D", "AttnDownBlock2D")`) ‚Äî Tuple of downsample
    block types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mid_block_type` (`str`, *optional*, defaults to `"UNetMidBlock2D"`) ‚Äî Block
    type for middle of UNet, it can be either `UNetMidBlock2D` or `UnCLIPUNetMidBlock2D`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`up_block_types` (`Tuple[str]`, *optional*, defaults to `("AttnUpBlock2D",
    "AttnUpBlock2D", "AttnUpBlock2D", "UpBlock2D")`) ‚Äî Tuple of upsample block types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`block_out_channels` (`Tuple[int]`, *optional*, defaults to `(224, 448, 672,
    896)`) ‚Äî Tuple of block output channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layers_per_block` (`int`, *optional*, defaults to `2`) ‚Äî The number of layers
    per block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mid_block_scale_factor` (`float`, *optional*, defaults to `1`) ‚Äî The scale
    factor for the mid block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downsample_padding` (`int`, *optional*, defaults to `1`) ‚Äî The padding for
    the downsample convolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downsample_type` (`str`, *optional*, defaults to `conv`) ‚Äî The downsample
    type for downsampling layers. Choose between ‚Äúconv‚Äù and ‚Äúresnet‚Äù'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upsample_type` (`str`, *optional*, defaults to `conv`) ‚Äî The upsample type
    for upsampling layers. Choose between ‚Äúconv‚Äù and ‚Äúresnet‚Äù'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dropout` (`float`, *optional*, defaults to 0.0) ‚Äî The dropout probability
    to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`act_fn` (`str`, *optional*, defaults to `"silu"`) ‚Äî The activation function
    to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_head_dim` (`int`, *optional*, defaults to `8`) ‚Äî The attention head
    dimension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`norm_num_groups` (`int`, *optional*, defaults to `32`) ‚Äî The number of groups
    for normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attn_norm_num_groups` (`int`, *optional*, defaults to `None`) ‚Äî If set to
    an integer, a group norm layer will be created in the mid block‚Äôs `Attention`
    layer with the given number of groups. If left as `None`, the group norm layer
    will only be created if `resnet_time_scale_shift` is set to `default`, and if
    created will have `norm_num_groups` groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`norm_eps` (`float`, *optional*, defaults to `1e-5`) ‚Äî The epsilon for normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resnet_time_scale_shift` (`str`, *optional*, defaults to `"default"`) ‚Äî Time
    scale shift config for ResNet blocks (see `ResnetBlock2D`). Choose from `default`
    or `scale_shift`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_embed_type` (`str`, *optional*, defaults to `None`) ‚Äî The type of class
    embedding to use which is ultimately summed with the time embeddings. Choose from
    `None`, `"timestep"`, or `"identity"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_class_embeds` (`int`, *optional*, defaults to `None`) ‚Äî Input dimension
    of the learnable embedding matrix to be projected to `time_embed_dim` when performing
    class conditioning with `class_embed_type` equal to `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A 2D UNet model that takes a noisy sample and a timestep and returns a sample
    shaped output.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin).
    Check the superclass documentation for it‚Äôs generic methods implemented for all
    models (such as downloading or saving).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d.py#L243)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor`) ‚Äî The noisy input tensor with the following
    shape `(batch, channel, height, width)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestep` (`torch.FloatTensor` or `float` or `int`) ‚Äî The number of timesteps
    to denoise an input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_labels` (`torch.FloatTensor`, *optional*, defaults to `None`) ‚Äî Optional
    class labels for conditioning. Their embeddings will be summed with the timestep
    embeddings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or not to
    return a `~models.unet_2d.UNet2DOutput` instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`~models.unet_2d.UNet2DOutput` or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If `return_dict` is True, an `~models.unet_2d.UNet2DOutput` is returned, otherwise
    a `tuple` is returned where the first element is the sample tensor.
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet2DModel](/docs/diffusers/v0.26.3/en/api/models/unet2d#diffusers.UNet2DModel)
    forward method.
  prefs: []
  type: TYPE_NORMAL
- en: UNet2DOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.models.unets.unet_2d.UNet2DOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d.py#L27)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) ‚Äî The hidden states output from the last layer of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of [UNet2DModel](/docs/diffusers/v0.26.3/en/api/models/unet2d#diffusers.UNet2DModel).
  prefs: []
  type: TYPE_NORMAL
