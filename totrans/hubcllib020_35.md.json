["```py\nfrom huggingface_hub import logging\n```", "```py\nfrom huggingface_hub import logging\n\nlogging.set_verbosity_error()\nlogging.set_verbosity_warning()\nlogging.set_verbosity_info()\nlogging.set_verbosity_debug()\n\nlogging.set_verbosity(...)\n```", "```py\n( )\n```", "```py\n( verbosity: int )\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( name: Optional = None )\n```", "```py\n>>> from huggingface_hub import get_logger\n\n>>> logger = get_logger(__file__)\n>>> logger.set_verbosity_info()\n```", "```py\n>>> from huggingface_hub import snapshot_download\n>>> from huggingface_hub.utils import are_progress_bars_disabled, disable_progress_bars, enable_progress_bars\n\n>>> # Disable progress bars globally\n>>> disable_progress_bars()\n\n>>> # Progress bar will not be shown !\n>>> snapshot_download(\"gpt2\")\n\n>>> are_progress_bars_disabled()\nTrue\n\n>>> # Re-enable progress bars globally\n>>> enable_progress_bars()\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( backend_factory: Callable = <function _default_backend_factory at 0x7fafc132f910> )\n```", "```py\nimport requests\nfrom huggingface_hub import configure_http_backend, get_session\n\n# Create a factory function that returns a Session with configured proxies\ndef backend_factory() -> requests.Session:\n    session = requests.Session()\n    session.proxies = {\"http\": \"http://10.10.1.10:3128\", \"https\": \"https://10.10.1.11:1080\"}\n    return session\n\n# Set it as the default session factory\nconfigure_http_backend(backend_factory=backend_factory)\n\n# In practice, this is mostly done internally in `huggingface_hub`\nsession = get_session()\n```", "```py\n( )\n```", "```py\nimport requests\nfrom huggingface_hub import configure_http_backend, get_session\n\n# Create a factory function that returns a Session with configured proxies\ndef backend_factory() -> requests.Session:\n    session = requests.Session()\n    session.proxies = {\"http\": \"http://10.10.1.10:3128\", \"https\": \"https://10.10.1.11:1080\"}\n    return session\n\n# Set it as the default session factory\nconfigure_http_backend(backend_factory=backend_factory)\n\n# In practice, this is mostly done internally in `huggingface_hub`\nsession = get_session()\n```", "```py\nimport requests\nfrom huggingface_hub.utils import hf_raise_for_status, HfHubHTTPError\n\nresponse = requests.post(...)\ntry:\n    hf_raise_for_status(response)\nexcept HfHubHTTPError as e:\n    print(str(e)) # formatted message\n    e.request_id, e.server_message # details returned by server\n\n    # Complete the error message with additional information once it's raised\n    e.append_to_message(\"\\n`create_commit` expects the repository to exist.\")\n    raise\n```", "```py\n( response: Response endpoint_name: Optional = None )\n```", "```py\n    import requests\n    from huggingface_hub.utils import get_session, hf_raise_for_status, HfHubHTTPError\n\n    response = get_session().post(...)\n    try:\n        hf_raise_for_status(response)\n    except HfHubHTTPError as e:\n        print(str(e)) # formatted message\n        e.request_id, e.server_message # details returned by server\n\n        # Complete the error message with additional information once it's raised\n        e.append_to_message(\"\nate_commit` expects the repository to exist.\")\n        raise\n```", "```py\n( message: str response: Optional = None )\n```", "```py\n    import requests\n    from huggingface_hub.utils import get_session, hf_raise_for_status, HfHubHTTPError\n\n    response = get_session().post(...)\n    try:\n        hf_raise_for_status(response)\n    except HfHubHTTPError as e:\n        print(str(e)) # formatted message\n        e.request_id, e.server_message # details returned by server\n\n        # Complete the error message with additional information once it's raised\n        e.append_to_message(\"\nate_commit` expects the repository to exist.\")\n        raise\n```", "```py\n( additional_message: str )\n```", "```py\n( message: str response: Optional = None )\n```", "```py\n>>> from huggingface_hub import model_info\n>>> model_info(\"<non_existent_repository>\")\n(...)\nhuggingface_hub.utils._errors.RepositoryNotFoundError: 401 Client Error. (Request ID: PvMw_VjBMjVdMz53WKIzP)\n\nRepository Not Found for url: https://huggingface.co/api/models/%3Cnon_existent_repository%3E.\nPlease make sure you specified the correct `repo_id` and `repo_type`.\nIf the repo is private, make sure you are authenticated.\nInvalid username or password.\n```", "```py\n( message: str response: Optional = None )\n```", "```py\n>>> from huggingface_hub import model_info\n>>> model_info(\"<gated_repository>\")\n(...)\nhuggingface_hub.utils._errors.GatedRepoError: 403 Client Error. (Request ID: ViT1Bf7O_026LGSQuVqfa)\n\nCannot access gated repo for url https://huggingface.co/api/models/ardent-figment/gated-model.\nAccess to model ardent-figment/gated-model is restricted and you are not in the authorized list.\nVisit https://huggingface.co/ardent-figment/gated-model to ask for access.\n```", "```py\n( message: str response: Optional = None )\n```", "```py\n>>> from huggingface_hub import hf_hub_download\n>>> hf_hub_download('bert-base-cased', 'config.json', revision='<non-existent-revision>')\n(...)\nhuggingface_hub.utils._errors.RevisionNotFoundError: 404 Client Error. (Request ID: Mwhe_c3Kt650GcdKEFomX)\n\nRevision Not Found for url: https://huggingface.co/bert-base-cased/resolve/%3Cnon-existent-revision%3E/config.json.\n```", "```py\n( message: str response: Optional = None )\n```", "```py\n>>> from huggingface_hub import hf_hub_download\n>>> hf_hub_download('bert-base-cased', '<non-existent-file>')\n(...)\nhuggingface_hub.utils._errors.EntryNotFoundError: 404 Client Error. (Request ID: 53pNl6M0MxsnG5Sw8JA6x)\n\nEntry Not Found for url: https://huggingface.co/bert-base-cased/resolve/main/%3Cnon-existent-file%3E.\n```", "```py\n( message: str response: Optional = None )\n```", "```py\n>>> resp = requests.post(\"hf.co/api/check\", ...)\n>>> hf_raise_for_status(resp, endpoint_name=\"check\")\nhuggingface_hub.utils._errors.BadRequestError: Bad request for check endpoint: {details} (Request ID: XXX)\n```", "```py\n( message: str )\n```", "```py\n>>> from huggingface_hub import hf_hub_download\n>>> hf_hub_download('bert-base-cased', '<non-cached-file>',  local_files_only=True)\n(...)\nhuggingface_hub.utils._errors.LocalEntryNotFoundError: Cannot find the requested files in the disk cache and outgoing traffic has been disabled. To enable hf.co look-ups and downloads online, set 'local_files_only' to False.\n```", "```py\n( )\n```", "```py\n( topic: str library_name: Optional = None library_version: Optional = None user_agent: Union = None )\n```", "```py\n>>> from huggingface_hub.utils import send_telemetry\n\n# Send telemetry without library information\n>>> send_telemetry(\"ping\")\n\n# Send telemetry to subtopic with library information\n>>> send_telemetry(\"gradio/local_link\", library_name=\"gradio\", library_version=\"3.22.1\")\n\n# Send telemetry with additional data\n>>> send_telemetry(\n...     topic=\"examples\",\n...     library_name=\"transformers\",\n...     library_version=\"4.26.0\",\n...     user_agent={\"pipeline\": \"text_classification\", \"framework\": \"flax\"},\n... )\n```", "```py\n>>> from huggingface_hub.utils import validate_hf_hub_args\n\n>>> @validate_hf_hub_args\n... def my_cool_method(repo_id: str):\n...     print(repo_id)\n\n>>> my_cool_method(repo_id=\"valid_repo_id\")\nvalid_repo_id\n\n>>> my_cool_method(\"other..repo..id\")\nhuggingface_hub.utils._validators.HFValidationError: Cannot have -- or .. in repo_id: 'other..repo..id'.\n\n>>> my_cool_method(repo_id=\"other..repo..id\")\nhuggingface_hub.utils._validators.HFValidationError: Cannot have -- or .. in repo_id: 'other..repo..id'.\n\n>>> @validate_hf_hub_args\n... def my_cool_auth_method(token: str):\n...     print(token)\n\n>>> my_cool_auth_method(token=\"a token\")\n\"a token\"\n\n>>> my_cool_auth_method(use_auth_token=\"a use_auth_token\")\n\"a use_auth_token\"\n\n>>> my_cool_auth_method(token=\"a token\", use_auth_token=\"a use_auth_token\")\nUserWarning: Both `token` and `use_auth_token` are passed (...). `use_auth_token` value will be ignored.\n\"a token\"\n```", "```py\n( fn: CallableT )\n```", "```py\n>>> from huggingface_hub.utils import validate_hf_hub_args\n\n>>> @validate_hf_hub_args\n... def my_cool_method(repo_id: str):\n...     print(repo_id)\n\n>>> my_cool_method(repo_id=\"valid_repo_id\")\nvalid_repo_id\n\n>>> my_cool_method(\"other..repo..id\")\nhuggingface_hub.utils._validators.HFValidationError: Cannot have -- or .. in repo_id: 'other..repo..id'.\n\n>>> my_cool_method(repo_id=\"other..repo..id\")\nhuggingface_hub.utils._validators.HFValidationError: Cannot have -- or .. in repo_id: 'other..repo..id'.\n\n>>> @validate_hf_hub_args\n... def my_cool_auth_method(token: str):\n...     print(token)\n\n>>> my_cool_auth_method(token=\"a token\")\n\"a token\"\n\n>>> my_cool_auth_method(use_auth_token=\"a use_auth_token\")\n\"a use_auth_token\"\n\n>>> my_cool_auth_method(token=\"a token\", use_auth_token=\"a use_auth_token\")\nUserWarning: Both `token` and `use_auth_token` are passed (...)\n\"a token\"\n```", "```py\n( )\n```", "```py\n( repo_id: str )\n```", "```py\n>>> from huggingface_hub.utils import validate_repo_id\n>>> validate_repo_id(repo_id=\"valid_repo_id\")\n>>> validate_repo_id(repo_id=\"other..repo..id\")\nhuggingface_hub.utils._validators.HFValidationError: Cannot have -- or .. in repo_id: 'other..repo..id'.\n```", "```py\n( fn_name: str has_token: bool kwargs: Dict )\n```"]