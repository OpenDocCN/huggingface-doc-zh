["```py\npip install transformers datasets evaluate\n```", "```py\n>>> from huggingface_hub import notebook_login\n\n>>> notebook_login()\n```", "```py\n>>> from datasets import load_dataset\n\n>>> eli5 = load_dataset(\"eli5\", split=\"train_asks[:5000]\")\n```", "```py\n>>> eli5 = eli5.train_test_split(test_size=0.2)\n```", "```py\n>>> eli5[\"train\"][0]\n{'answers': {'a_id': ['c3d1aib', 'c3d4lya'],\n  'score': [6, 3],\n  'text': [\"The velocity needed to remain in orbit is equal to the square root of Newton's constant times the mass of earth divided by the distance from the center of the earth. I don't know the altitude of that specific mission, but they're usually around 300 km. That means he's going 7-8 km/s.\\n\\nIn space there are no other forces acting on either the shuttle or the guy, so they stay in the same position relative to each other. If he were to become unable to return to the ship, he would presumably run out of oxygen, or slowly fall into the atmosphere and burn up.\",\n   \"Hope you don't mind me asking another question, but why aren't there any stars visible in this photo?\"]},\n 'answers_urls': {'url': []},\n 'document': '',\n 'q_id': 'nyxfp',\n 'selftext': '_URL_0_\\n\\nThis was on the front page earlier and I have a few questions about it. Is it possible to calculate how fast the astronaut would be orbiting the earth? Also how does he stay close to the shuttle so that he can return safely, i.e is he orbiting at the same speed and can therefore stay next to it? And finally if his propulsion system failed, would he eventually re-enter the atmosphere and presumably die?',\n 'selftext_urls': {'url': ['http://apod.nasa.gov/apod/image/1201/freeflyer_nasa_3000.jpg']},\n 'subreddit': 'askscience',\n 'title': 'Few questions about this space walk photograph.',\n 'title_urls': {'url': []}}\n```", "```py\n>>> from transformers import AutoTokenizer\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"distilroberta-base\")\n```", "```py\n>>> eli5 = eli5.flatten()\n>>> eli5[\"train\"][0]\n{'answers.a_id': ['c3d1aib', 'c3d4lya'],\n 'answers.score': [6, 3],\n 'answers.text': [\"The velocity needed to remain in orbit is equal to the square root of Newton's constant times the mass of earth divided by the distance from the center of the earth. I don't know the altitude of that specific mission, but they're usually around 300 km. That means he's going 7-8 km/s.\\n\\nIn space there are no other forces acting on either the shuttle or the guy, so they stay in the same position relative to each other. If he were to become unable to return to the ship, he would presumably run out of oxygen, or slowly fall into the atmosphere and burn up.\",\n  \"Hope you don't mind me asking another question, but why aren't there any stars visible in this photo?\"],\n 'answers_urls.url': [],\n 'document': '',\n 'q_id': 'nyxfp',\n 'selftext': '_URL_0_\\n\\nThis was on the front page earlier and I have a few questions about it. Is it possible to calculate how fast the astronaut would be orbiting the earth? Also how does he stay close to the shuttle so that he can return safely, i.e is he orbiting at the same speed and can therefore stay next to it? And finally if his propulsion system failed, would he eventually re-enter the atmosphere and presumably die?',\n 'selftext_urls.url': ['http://apod.nasa.gov/apod/image/1201/freeflyer_nasa_3000.jpg'],\n 'subreddit': 'askscience',\n 'title': 'Few questions about this space walk photograph.',\n 'title_urls.url': []}\n```", "```py\n>>> def preprocess_function(examples):\n...     return tokenizer([\" \".join(x) for x in examples[\"answers.text\"]])\n```", "```py\n>>> tokenized_eli5 = eli5.map(\n...     preprocess_function,\n...     batched=True,\n...     num_proc=4,\n...     remove_columns=eli5[\"train\"].column_names,\n... )\n```", "```py\n>>> block_size = 128\n\n>>> def group_texts(examples):\n...     # Concatenate all texts.\n...     concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}\n...     total_length = len(concatenated_examples[list(examples.keys())[0]])\n...     # We drop the small remainder, we could add padding if the model supported it instead of this drop, you can\n...     # customize this part to your needs.\n...     if total_length >= block_size:\n...         total_length = (total_length // block_size) * block_size\n...     # Split by chunks of block_size.\n...     result = {\n...         k: [t[i : i + block_size] for i in range(0, total_length, block_size)]\n...         for k, t in concatenated_examples.items()\n...     }\n...     return result\n```", "```py\n>>> lm_dataset = tokenized_eli5.map(group_texts, batched=True, num_proc=4)\n```", "```py\n>>> from transformers import DataCollatorForLanguageModeling\n\n>>> tokenizer.pad_token = tokenizer.eos_token\n>>> data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm_probability=0.15)\n```", "```py\n>>> from transformers import DataCollatorForLanguageModeling\n\n>>> data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm_probability=0.15, return_tensors=\"tf\")\n```", "```py\n>>> from transformers import AutoModelForMaskedLM\n\n>>> model = AutoModelForMaskedLM.from_pretrained(\"distilroberta-base\")\n```", "```py\n>>> training_args = TrainingArguments(\n...     output_dir=\"my_awesome_eli5_mlm_model\",\n...     evaluation_strategy=\"epoch\",\n...     learning_rate=2e-5,\n...     num_train_epochs=3,\n...     weight_decay=0.01,\n...     push_to_hub=True,\n... )\n\n>>> trainer = Trainer(\n...     model=model,\n...     args=training_args,\n...     train_dataset=lm_dataset[\"train\"],\n...     eval_dataset=lm_dataset[\"test\"],\n...     data_collator=data_collator,\n... )\n\n>>> trainer.train()\n```", "```py\n>>> import math\n\n>>> eval_results = trainer.evaluate()\n>>> print(f\"Perplexity: {math.exp(eval_results['eval_loss']):.2f}\")\nPerplexity: 8.76\n```", "```py\n>>> trainer.push_to_hub()\n```", "```py\n>>> from transformers import create_optimizer, AdamWeightDecay\n\n>>> optimizer = AdamWeightDecay(learning_rate=2e-5, weight_decay_rate=0.01)\n```", "```py\n>>> from transformers import TFAutoModelForMaskedLM\n\n>>> model = TFAutoModelForMaskedLM.from_pretrained(\"distilroberta-base\")\n```", "```py\n>>> tf_train_set = model.prepare_tf_dataset(\n...     lm_dataset[\"train\"],\n...     shuffle=True,\n...     batch_size=16,\n...     collate_fn=data_collator,\n... )\n\n>>> tf_test_set = model.prepare_tf_dataset(\n...     lm_dataset[\"test\"],\n...     shuffle=False,\n...     batch_size=16,\n...     collate_fn=data_collator,\n... )\n```", "```py\n>>> import tensorflow as tf\n\n>>> model.compile(optimizer=optimizer)  # No loss argument!\n```", "```py\n>>> from transformers.keras_callbacks import PushToHubCallback\n\n>>> callback = PushToHubCallback(\n...     output_dir=\"my_awesome_eli5_mlm_model\",\n...     tokenizer=tokenizer,\n... )\n```", "```py\n>>> model.fit(x=tf_train_set, validation_data=tf_test_set, epochs=3, callbacks=[callback])\n```", "```py\n>>> text = \"The Milky Way is a <mask> galaxy.\"\n```", "```py\n>>> from transformers import pipeline\n\n>>> mask_filler = pipeline(\"fill-mask\", \"stevhliu/my_awesome_eli5_mlm_model\")\n>>> mask_filler(text, top_k=3)\n[{'score': 0.5150994658470154,\n  'token': 21300,\n  'token_str': ' spiral',\n  'sequence': 'The Milky Way is a spiral galaxy.'},\n {'score': 0.07087188959121704,\n  'token': 2232,\n  'token_str': ' massive',\n  'sequence': 'The Milky Way is a massive galaxy.'},\n {'score': 0.06434620916843414,\n  'token': 650,\n  'token_str': ' small',\n  'sequence': 'The Milky Way is a small galaxy.'}]\n```", "```py\n>>> from transformers import AutoTokenizer\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"stevhliu/my_awesome_eli5_mlm_model\")\n>>> inputs = tokenizer(text, return_tensors=\"pt\")\n>>> mask_token_index = torch.where(inputs[\"input_ids\"] == tokenizer.mask_token_id)[1]\n```", "```py\n>>> from transformers import AutoModelForMaskedLM\n\n>>> model = AutoModelForMaskedLM.from_pretrained(\"stevhliu/my_awesome_eli5_mlm_model\")\n>>> logits = model(**inputs).logits\n>>> mask_token_logits = logits[0, mask_token_index, :]\n```", "```py\n>>> top_3_tokens = torch.topk(mask_token_logits, 3, dim=1).indices[0].tolist()\n\n>>> for token in top_3_tokens:\n...     print(text.replace(tokenizer.mask_token, tokenizer.decode([token])))\nThe Milky Way is a spiral galaxy.\nThe Milky Way is a massive galaxy.\nThe Milky Way is a small galaxy.\n```", "```py\n>>> from transformers import AutoTokenizer\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"stevhliu/my_awesome_eli5_mlm_model\")\n>>> inputs = tokenizer(text, return_tensors=\"tf\")\n>>> mask_token_index = tf.where(inputs[\"input_ids\"] == tokenizer.mask_token_id)[0, 1]\n```", "```py\n>>> from transformers import TFAutoModelForMaskedLM\n\n>>> model = TFAutoModelForMaskedLM.from_pretrained(\"stevhliu/my_awesome_eli5_mlm_model\")\n>>> logits = model(**inputs).logits\n>>> mask_token_logits = logits[0, mask_token_index, :]\n```", "```py\n>>> top_3_tokens = tf.math.top_k(mask_token_logits, 3).indices.numpy()\n\n>>> for token in top_3_tokens:\n...     print(text.replace(tokenizer.mask_token, tokenizer.decode([token])))\nThe Milky Way is a spiral galaxy.\nThe Milky Way is a massive galaxy.\nThe Milky Way is a small galaxy.\n```"]