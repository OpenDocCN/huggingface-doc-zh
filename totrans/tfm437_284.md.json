["```py\n>>> from transformers import SegformerModel, SegformerConfig\n\n>>> # Initializing a SegFormer nvidia/segformer-b0-finetuned-ade-512-512 style configuration\n>>> configuration = SegformerConfig()\n\n>>> # Initializing a model from the nvidia/segformer-b0-finetuned-ade-512-512 style configuration\n>>> model = SegformerModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, SegformerModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"nvidia/mit-b0\")\n>>> model = SegformerModel.from_pretrained(\"nvidia/mit-b0\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 256, 16, 16]\n```", "```py\n>>> from transformers import AutoImageProcessor, SegformerForImageClassification\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"nvidia/mit-b0\")\n>>> model = SegformerForImageClassification.from_pretrained(\"nvidia/mit-b0\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = logits.argmax(-1).item()\n>>> print(model.config.id2label[predicted_label])\ntabby, tabby cat\n```", "```py\n>>> from transformers import AutoImageProcessor, SegformerForSemanticSegmentation\n>>> from PIL import Image\n>>> import requests\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"nvidia/segformer-b0-finetuned-ade-512-512\")\n>>> model = SegformerForSemanticSegmentation.from_pretrained(\"nvidia/segformer-b0-finetuned-ade-512-512\")\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits  # shape (batch_size, num_labels, height/4, width/4)\n>>> list(logits.shape)\n[1, 150, 128, 128]\n```", "```py\n>>> from transformers import AutoImageProcessor, TFSegformerModel\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"nvidia/mit-b0\")\n>>> model = TFSegformerModel.from_pretrained(\"nvidia/mit-b0\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 256, 16, 16]\n```", "```py\n>>> from transformers import AutoImageProcessor, TFSegformerForImageClassification\n>>> import tensorflow as tf\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"nvidia/mit-b0\")\n>>> model = TFSegformerForImageClassification.from_pretrained(\"nvidia/mit-b0\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = int(tf.math.argmax(logits, axis=-1))\n>>> print(model.config.id2label[predicted_label])\ntabby, tabby cat\n```", "```py\n>>> from transformers import AutoImageProcessor, TFSegformerForSemanticSegmentation\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"nvidia/segformer-b0-finetuned-ade-512-512\")\n>>> model = TFSegformerForSemanticSegmentation.from_pretrained(\"nvidia/segformer-b0-finetuned-ade-512-512\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"tf\")\n>>> outputs = model(**inputs, training=False)\n>>> # logits are of shape (batch_size, num_labels, height/4, width/4)\n>>> logits = outputs.logits\n>>> list(logits.shape)\n[1, 150, 128, 128]\n```"]