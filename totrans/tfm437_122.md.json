["```py\nfrom transformers import AutoProcessor\n\nprocessor = AutoProcessor.from_pretrained(\"bert-base-cased\")\n\n# Push the processor to your namespace with the name \"my-finetuned-bert\".\nprocessor.push_to_hub(\"my-finetuned-bert\")\n\n# Push the processor to an organization with the name \"my-finetuned-bert\".\nprocessor.push_to_hub(\"huggingface/my-finetuned-bert\")\n```", "```py\n>>> import tensorflow_datasets as tfds\n\n>>> dataset = tfds.load(\"squad\")\n\n>>> training_examples = get_examples_from_dataset(dataset, evaluate=False)\n>>> evaluation_examples = get_examples_from_dataset(dataset, evaluate=True)\n```", "```py\nprocessor = SquadV2Processor()\nexamples = processor.get_dev_examples(data_dir)\n\nfeatures = squad_convert_examples_to_features(\n    examples=examples,\n    tokenizer=tokenizer,\n    max_seq_length=args.max_seq_length,\n    doc_stride=args.doc_stride,\n    max_query_length=args.max_query_length,\n    is_training=not evaluate,\n)\n```", "```py\n# Loading a V2 processor\nprocessor = SquadV2Processor()\nexamples = processor.get_dev_examples(squad_v2_data_dir)\n\n# Loading a V1 processor\nprocessor = SquadV1Processor()\nexamples = processor.get_dev_examples(squad_v1_data_dir)\n\nfeatures = squad_convert_examples_to_features(\n    examples=examples,\n    tokenizer=tokenizer,\n    max_seq_length=max_seq_length,\n    doc_stride=args.doc_stride,\n    max_query_length=max_query_length,\n    is_training=not evaluate,\n)\n```", "```py\n# tensorflow_datasets only handle Squad V1.\ntfds_examples = tfds.load(\"squad\")\nexamples = SquadV1Processor().get_examples_from_dataset(tfds_examples, evaluate=evaluate)\n\nfeatures = squad_convert_examples_to_features(\n    examples=examples,\n    tokenizer=tokenizer,\n    max_seq_length=max_seq_length,\n    doc_stride=args.doc_stride,\n    max_query_length=max_query_length,\n    is_training=not evaluate,\n)\n```"]