- en: AsymmetricAutoencoderKL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/diffusers/api/models/asymmetricautoencoderkl](https://huggingface.co/docs/diffusers/api/models/asymmetricautoencoderkl)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/14.5491e2eb.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Docstring.93f6f462.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/CodeBlock.57fe6e13.js">
  prefs: []
  type: TYPE_NORMAL
- en: 'Improved larger variational autoencoder (VAE) model with KL loss for inpainting
    task: [Designing a Better Asymmetric VQGAN for StableDiffusion](https://arxiv.org/abs/2306.04632)
    by Zixin Zhu, Xuelu Feng, Dongdong Chen, Jianmin Bao, Le Wang, Yinpeng Chen, Lu
    Yuan, Gang Hua.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*StableDiffusion is a revolutionary text-to-image generator that is causing
    a stir in the world of image generation and editing. Unlike traditional methods
    that learn a diffusion model in pixel space, StableDiffusion learns a diffusion
    model in the latent space via a VQGAN, ensuring both efficiency and quality. It
    not only supports image generation tasks, but also enables image editing for real
    images, such as image inpainting and local editing. However, we have observed
    that the vanilla VQGAN used in StableDiffusion leads to significant information
    loss, causing distortion artifacts even in non-edited image regions. To this end,
    we propose a new asymmetric VQGAN with two simple designs. Firstly, in addition
    to the input from the encoder, the decoder contains a conditional branch that
    incorporates information from task-specific priors, such as the unmasked image
    region in inpainting. Secondly, the decoder is much heavier than the encoder,
    allowing for more detailed recovery while only slightly increasing the total inference
    cost. The training cost of our asymmetric VQGAN is cheap, and we only need to
    retrain a new asymmetric decoder while keeping the vanilla VQGAN encoder and StableDiffusion
    unchanged. Our asymmetric VQGAN can be widely used in StableDiffusion-based inpainting
    and local editing methods. Extensive experiments demonstrate that it can significantly
    improve the inpainting and editing performance, while maintaining the original
    text-to-image capability. The code is available at [https://github.com/buxiangzhiren/Asymmetric_VQGAN](https://github.com/buxiangzhiren/Asymmetric_VQGAN)*'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation results can be found in section 4.1 of the original paper.
  prefs: []
  type: TYPE_NORMAL
- en: Available checkpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://huggingface.co/cross-attention/asymmetric-autoencoder-kl-x-1-5](https://huggingface.co/cross-attention/asymmetric-autoencoder-kl-x-1-5)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://huggingface.co/cross-attention/asymmetric-autoencoder-kl-x-2](https://huggingface.co/cross-attention/asymmetric-autoencoder-kl-x-2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: AsymmetricAutoencoderKL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.AsymmetricAutoencoderKL'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_asym_kl.py#L26)'
  prefs: []
  type: TYPE_NORMAL
- en: '( in_channels: int = 3 out_channels: int = 3 down_block_types: Tuple = (''DownEncoderBlock2D'',)
    down_block_out_channels: Tuple = (64,) layers_per_down_block: int = 1 up_block_types:
    Tuple = (''UpDecoderBlock2D'',) up_block_out_channels: Tuple = (64,) layers_per_up_block:
    int = 1 act_fn: str = ''silu'' latent_channels: int = 4 norm_num_groups: int =
    32 sample_size: int = 32 scaling_factor: float = 0.18215 )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**in_channels** (int, *optional*, defaults to 3) — Number of channels in the
    input image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**out_channels** (int, *optional*, defaults to 3) — Number of channels in the
    output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**down_block_types** (`Tuple[str]`, *optional*, defaults to `("DownEncoderBlock2D",)`)
    — Tuple of downsample block types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**down_block_out_channels** (`Tuple[int]`, *optional*, defaults to `(64,)`)
    — Tuple of down block output channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**layers_per_down_block** (`int`, *optional*, defaults to `1`) — Number layers
    for down block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**up_block_types** (`Tuple[str]`, *optional*, defaults to `("UpDecoderBlock2D",)`)
    — Tuple of upsample block types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**up_block_out_channels** (`Tuple[int]`, *optional*, defaults to `(64,)`) —
    Tuple of up block output channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**layers_per_up_block** (`int`, *optional*, defaults to `1`) — Number layers
    for up block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**act_fn** (`str`, *optional*, defaults to `"silu"`) — The activation function
    to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**latent_channels** (`int`, *optional*, defaults to 4) — Number of channels
    in the latent space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample_size** (`int`, *optional*, defaults to `32`) — Sample input size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**norm_num_groups** (`int`, *optional*, defaults to `32`) — Number of groups
    to use for the first normalization layer in ResNet blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**scaling_factor** (`float`, *optional*, defaults to 0.18215) — The component-wise
    standard deviation of the trained latent space computed using the first batch
    of the training set. This is used to scale the latent space to have unit variance
    when training the diffusion model. The latents are scaled with the formula `z
    = z * scaling_factor` before being passed to the diffusion model. When decoding,
    the latents are scaled back to the original scale with the formula: `z = 1 / scaling_factor
    * z`. For more details, refer to sections 4.3.2 and D.1 of the [High-Resolution
    Image Synthesis with Latent Diffusion Models](https://arxiv.org/abs/2112.10752)
    paper.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing a Better Asymmetric VQGAN for StableDiffusion [https://arxiv.org/abs/2306.04632](https://arxiv.org/abs/2306.04632)
    . A VAE model with KL loss for encoding images into latents and decoding latent
    representations into images.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin).
    Check the superclass documentation for it’s generic methods implemented for all
    models (such as downloading or saving).
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/autoencoder_asym_kl.py#L158)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample: FloatTensor mask: Optional = None sample_posterior: bool = False
    return_dict: bool = True generator: Optional = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — Input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mask** (`torch.FloatTensor`, *optional*, defaults to `None`) — Optional inpainting
    mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample_posterior** (`bool`, *optional*, defaults to `False`) — Whether to
    sample from the posterior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a `DecoderOutput` instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AutoencoderKLOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.models.modeling_outputs.AutoencoderKLOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/modeling_outputs.py#L6)'
  prefs: []
  type: TYPE_NORMAL
- en: '( latent_dist: DiagonalGaussianDistribution )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**latent_dist** (`DiagonalGaussianDistribution`) — Encoded outputs of `Encoder`
    represented as the mean and logvar of `DiagonalGaussianDistribution`. `DiagonalGaussianDistribution`
    allows for sampling latents from the distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output of AutoencoderKL encoding method.
  prefs: []
  type: TYPE_NORMAL
- en: DecoderOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.models.autoencoders.vae.DecoderOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/autoencoders/vae.py#L33)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample: FloatTensor )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — The decoded output sample from the last layer of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output of decoding method.
  prefs: []
  type: TYPE_NORMAL
