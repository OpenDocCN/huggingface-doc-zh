- en: Automatic speech recognition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/asr](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/asr)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/TksaY_FDgnk](https://www.youtube-nocookie.com/embed/TksaY_FDgnk)'
  prefs: []
  type: TYPE_NORMAL
- en: Automatic speech recognition (ASR) converts a speech signal to text, mapping
    a sequence of audio inputs to text outputs. Virtual assistants like Siri and Alexa
    use ASR models to help users everyday, and there are many other useful user-facing
    applications like live captioning and note-taking during meetings.
  prefs: []
  type: TYPE_NORMAL
- en: 'This guide will show you how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Finetune [Wav2Vec2](https://huggingface.co/facebook/wav2vec2-base) on the [MInDS-14](https://huggingface.co/datasets/PolyAI/minds14)
    dataset to transcribe audio to text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your finetuned model for inference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The task illustrated in this tutorial is supported by the following model architectures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Data2VecAudio](../model_doc/data2vec-audio), [Hubert](../model_doc/hubert),
    [M-CTC-T](../model_doc/mctct), [SEW](../model_doc/sew), [SEW-D](../model_doc/sew-d),
    [UniSpeech](../model_doc/unispeech), [UniSpeechSat](../model_doc/unispeech-sat),
    [Wav2Vec2](../model_doc/wav2vec2), [Wav2Vec2-BERT](../model_doc/wav2vec2-bert),
    [Wav2Vec2-Conformer](../model_doc/wav2vec2-conformer), [WavLM](../model_doc/wavlm)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We encourage you to login to your Hugging Face account so you can upload and
    share your model with the community. When prompted, enter your token to login:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Load MInDS-14 dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start by loading a smaller subset of the [MInDS-14](https://huggingface.co/datasets/PolyAI/minds14)
    dataset from the ðŸ¤— Datasets library. Thisâ€™ll give you a chance to experiment and
    make sure everything works before spending more time training on the full dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Split the datasetâ€™s `train` split into a train and test set with the `~Dataset.train_test_split`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then take a look at the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'While the dataset contains a lot of useful information, like `lang_id` and
    `english_transcription`, youâ€™ll focus on the `audio` and `transcription` in this
    guide. Remove the other columns with the [remove_columns](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.remove_columns)
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the example again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`audio`: a 1-dimensional `array` of the speech signal that must be called to
    load and resample the audio file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transcription`: the target text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocess
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is to load a Wav2Vec2 processor to process the audio signal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The MInDS-14 dataset has a sampling rate of 8000kHz (you can find this information
    in its [dataset card](https://huggingface.co/datasets/PolyAI/minds14)), which
    means youâ€™ll need to resample the dataset to 16000kHz to use the pretrained Wav2Vec2
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the `transcription` above, the text contains a mix of upper
    and lowercase characters. The Wav2Vec2 tokenizer is only trained on uppercase
    characters so youâ€™ll need to make sure the text matches the tokenizerâ€™s vocabulary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a preprocessing function that:'
  prefs: []
  type: TYPE_NORMAL
- en: Calls the `audio` column to load and resample the audio file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extracts the `input_values` from the audio file and tokenize the `transcription`
    column with the processor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply the preprocessing function over the entire dataset, use ðŸ¤— Datasets
    [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)
    function. You can speed up `map` by increasing the number of processes with the
    `num_proc` parameter. Remove the columns you donâ€™t need with the [remove_columns](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.remove_columns)
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: ðŸ¤— Transformers doesnâ€™t have a data collator for ASR, so youâ€™ll need to adapt
    the [DataCollatorWithPadding](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DataCollatorWithPadding)
    to create a batch of examples. Itâ€™ll also dynamically pad your text and labels
    to the length of the longest element in its batch (instead of the entire dataset)
    so they are a uniform length. While it is possible to pad your text in the `tokenizer`
    function by setting `padding=True`, dynamic padding is more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike other data collators, this specific data collator needs to apply a different
    padding method to `input_values` and `labels`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now instantiate your `DataCollatorForCTCWithPadding`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Including a metric during training is often helpful for evaluating your modelâ€™s
    performance. You can quickly load a evaluation method with the ðŸ¤— [Evaluate](https://huggingface.co/docs/evaluate/index)
    library. For this task, load the [word error rate](https://huggingface.co/spaces/evaluate-metric/wer)
    (WER) metric (see the ðŸ¤— Evaluate [quick tour](https://huggingface.co/docs/evaluate/a_quick_tour)
    to learn more about how to load and compute a metric):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a function that passes your predictions and labels to `compute`
    to calculate the WER:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Your `compute_metrics` function is ready to go now, and youâ€™ll return to it
    when you setup your training.
  prefs: []
  type: TYPE_NORMAL
- en: Train
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: If you arenâ€™t familiar with finetuning a model with the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    take a look at the basic tutorial [here](../training#train-with-pytorch-trainer)!
  prefs: []
  type: TYPE_NORMAL
- en: 'Youâ€™re ready to start training your model now! Load Wav2Vec2 with [AutoModelForCTC](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForCTC).
    Specify the reduction to apply with the `ctc_loss_reduction` parameter. It is
    often better to use the average instead of the default summation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, only three steps remain:'
  prefs: []
  type: TYPE_NORMAL
- en: Define your training hyperparameters in [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments).
    The only required parameter is `output_dir` which specifies where to save your
    model. Youâ€™ll push this model to the Hub by setting `push_to_hub=True` (you need
    to be signed in to Hugging Face to upload your model). At the end of each epoch,
    the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    will evaluate the WER and save the training checkpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the training arguments to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    along with the model, dataset, tokenizer, data collator, and `compute_metrics`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)
    to finetune your model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once training is completed, share your model to the Hub with the [push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)
    method so everyone can use your model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: For a more in-depth example of how to finetune a model for automatic speech
    recognition, take a look at this blog [post](https://huggingface.co/blog/fine-tune-wav2vec2-english)
    for English ASR and this [post](https://huggingface.co/blog/fine-tune-xlsr-wav2vec2)
    for multilingual ASR.
  prefs: []
  type: TYPE_NORMAL
- en: Inference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Great, now that youâ€™ve finetuned a model, you can use it for inference!
  prefs: []
  type: TYPE_NORMAL
- en: Load an audio file youâ€™d like to run inference on. Remember to resample the
    sampling rate of the audio file to match the sampling rate of the model if you
    need to!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The simplest way to try out your finetuned model for inference is to use it
    in a [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline).
    Instantiate a `pipeline` for automatic speech recognition with your model, and
    pass your audio file to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The transcription is decent, but it could be better! Try finetuning your model
    on more examples to get even better results!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also manually replicate the results of the `pipeline` if youâ€™d like:'
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: 'Load a processor to preprocess the audio file and transcription and return
    the `input` as PyTorch tensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass your inputs to the model and return the logits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the predicted `input_ids` with the highest probability, and use the processor
    to decode the predicted `input_ids` back into text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
