["```py\ndef from_pretrained(model_id: str) -> MyModelClass:\n   # Download model from Hub\n   cached_model = hf_hub_download(\n      repo_id=repo_id,\n      filename=\"model.pkl\",\n      library_name=\"fastai\",\n      library_version=get_fastai_version(),\n   )\n\n   # Load model\n    return load_model(cached_model)\n```", "```py\ndef push_to_hub(model: MyModelClass, repo_name: str) -> None:\n   api = HfApi()\n\n   # Create repo if not existing yet and get the associated repo_id\n   repo_id = api.create_repo(repo_name, exist_ok=True)\n\n   # Save all files in a temporary directory and push them in a single commit\n   with TemporaryDirectory() as tmpdir:\n      tmpdir = Path(tmpdir)\n\n      # Save weights\n      save_model(model, tmpdir / \"model.safetensors\")\n\n      # Generate model card\n      card = generate_model_card(model)\n      (tmpdir / \"README.md\").write_text(card)\n\n      # Save logs\n      # Save figures\n      # Save evaluation metrics\n      # ...\n\n      # Push to hub\n      return api.upload_folder(repo_id=repo_id, folder_path=tmpdir)\n```", "```py\n>>> import torch\n>>> import torch.nn as nn\n>>> from huggingface_hub import PyTorchModelHubMixin\n\n# 1\\. Define your Pytorch model exactly the same way you are used to\n>>> class MyModel(nn.Module, PyTorchModelHubMixin): # multiple inheritance\n...     def __init__(self):\n...         super().__init__() \n...         self.param = nn.Parameter(torch.rand(3, 4))\n...         self.linear = nn.Linear(4, 5)\n\n...     def forward(self, x):\n...         return self.linear(x + self.param)\n>>> model = MyModel()\n\n# 2\\. (optional) Save model to local directory\n>>> model.save_pretrained(\"path/to/my-awesome-model\")\n\n# 3\\. Push model weights to the Hub\n>>> model.push_to_hub(\"my-awesome-model\")\n\n# 4\\. Initialize model from the Hub\n>>> model = MyModel.from_pretrained(\"username/my-awesome-model\")\n```", "```py\nfrom huggingface_hub import ModelHubMixin\n\nclass PyTorchModelHubMixin(ModelHubMixin):\n   (...)\n```", "```py\nfrom huggingface_hub import ModelCard, ModelCardData\n\nclass PyTorchModelHubMixin(ModelHubMixin):\n   (...)\n\n   def _save_pretrained(self, save_directory: Path):\n      \"\"\"Generate Model Card and save weights from a Pytorch model to a local directory.\"\"\"\n      model_card = ModelCard.from_template(\n         card_data=ModelCardData(\n            license='mit',\n            library_name=\"pytorch\",\n            ...\n         ),\n         model_summary=...,\n         model_type=...,\n         ...\n      )\n      (save_directory / \"README.md\").write_text(str(model))\n      torch.save(obj=self.module.state_dict(), f=save_directory / \"pytorch_model.bin\")\n```", "```py\nclass PyTorchModelHubMixin(ModelHubMixin):\n   (...)\n\n @classmethod # Must be a classmethod!\n   def _from_pretrained( cls,\n      *,\n      model_id: str,\n      revision: str,\n      cache_dir: str,\n      force_download: bool,\n      proxies: Optional[Dict],\n      resume_download: bool,\n      local_files_only: bool,\n      token: Union[str, bool, None],\n      map_location: str = \"cpu\", # additional argument\n      strict: bool = False, # additional argument\n      **model_kwargs, ):\n      \"\"\"Load Pytorch pretrained weights and return the loaded model.\"\"\"\n      if os.path.isdir(model_id): # Can either be a local directory\n         print(\"Loading weights from local directory\")\n         model_file = os.path.join(model_id, \"pytorch_model.bin\")\n      else: # Or a model on the Hub\n         model_file = hf_hub_download( # Download from the hub, passing same input args\n            repo_id=model_id,\n            filename=\"pytorch_model.bin\",\n            revision=revision,\n            cache_dir=cache_dir,\n            force_download=force_download,\n            proxies=proxies,\n            resume_download=resume_download,\n            token=token,\n            local_files_only=local_files_only,\n         )\n\n      # Load model and return - custom logic depending on your framework\n      model = cls(**model_kwargs)\n      state_dict = torch.load(model_file, map_location=torch.device(map_location))\n      model.load_state_dict(state_dict, strict=strict)\n      model.eval()\n      return model\n```"]