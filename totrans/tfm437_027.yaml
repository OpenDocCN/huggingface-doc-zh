- en: Audio classification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/audio_classification](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/audio_classification)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/KWwzcmG98Ds](https://www.youtube-nocookie.com/embed/KWwzcmG98Ds)'
  prefs: []
  type: TYPE_NORMAL
- en: Audio classification - just like with text - assigns a class label output from
    the input data. The only difference is instead of text inputs, you have raw audio
    waveforms. Some practical applications of audio classification include identifying
    speaker intent, language classification, and even animal species by their sounds.
  prefs: []
  type: TYPE_NORMAL
- en: 'This guide will show you how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Finetune [Wav2Vec2](https://huggingface.co/facebook/wav2vec2-base) on the [MInDS-14](https://huggingface.co/datasets/PolyAI/minds14)
    dataset to classify speaker intent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your finetuned model for inference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The task illustrated in this tutorial is supported by the following model architectures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Audio Spectrogram Transformer](../model_doc/audio-spectrogram-transformer),
    [Data2VecAudio](../model_doc/data2vec-audio), [Hubert](../model_doc/hubert), [SEW](../model_doc/sew),
    [SEW-D](../model_doc/sew-d), [UniSpeech](../model_doc/unispeech), [UniSpeechSat](../model_doc/unispeech-sat),
    [Wav2Vec2](../model_doc/wav2vec2), [Wav2Vec2-BERT](../model_doc/wav2vec2-bert),
    [Wav2Vec2-Conformer](../model_doc/wav2vec2-conformer), [WavLM](../model_doc/wavlm),
    [Whisper](../model_doc/whisper)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We encourage you to login to your Hugging Face account so you can upload and
    share your model with the community. When prompted, enter your token to login:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Load MInDS-14 dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by loading the MInDS-14 dataset from the ðŸ¤— Datasets library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Split the datasetâ€™s `train` split into a smaller train and test set with the
    [train_test_split](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.train_test_split)
    method. Thisâ€™ll give you a chance to experiment and make sure everything works
    before spending more time on the full dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then take a look at the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'While the dataset contains a lot of useful information, like `lang_id` and
    `english_transcription`, youâ€™ll focus on the `audio` and `intent_class` in this
    guide. Remove the other columns with the [remove_columns](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.remove_columns)
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at an example now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`audio`: a 1-dimensional `array` of the speech signal that must be called to
    load and resample the audio file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`intent_class`: represents the class id of the speakerâ€™s intent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To make it easier for the model to get the label name from the label id, create
    a dictionary that maps the label name to an integer and vice versa:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can convert the label id to a label name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Preprocess
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is to load a Wav2Vec2 feature extractor to process the audio
    signal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The MInDS-14 dataset has a sampling rate of 8000khz (you can find this information
    in itâ€™s [dataset card](https://huggingface.co/datasets/PolyAI/minds14)), which
    means youâ€™ll need to resample the dataset to 16000kHz to use the pretrained Wav2Vec2
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a preprocessing function that:'
  prefs: []
  type: TYPE_NORMAL
- en: Calls the `audio` column to load, and if necessary, resample the audio file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checks if the sampling rate of the audio file matches the sampling rate of the
    audio data a model was pretrained with. You can find this information in the Wav2Vec2
    [model card](https://huggingface.co/facebook/wav2vec2-base).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a maximum input length to batch longer inputs without truncating them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply the preprocessing function over the entire dataset, use ðŸ¤— Datasets
    [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)
    function. You can speed up `map` by setting `batched=True` to process multiple
    elements of the dataset at once. Remove the columns you donâ€™t need, and rename
    `intent_class` to `label` because thatâ€™s the name the model expects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Including a metric during training is often helpful for evaluating your modelâ€™s
    performance. You can quickly load a evaluation method with the ðŸ¤— [Evaluate](https://huggingface.co/docs/evaluate/index)
    library. For this task, load the [accuracy](https://huggingface.co/spaces/evaluate-metric/accuracy)
    metric (see the ðŸ¤— Evaluate [quick tour](https://huggingface.co/docs/evaluate/a_quick_tour)
    to learn more about how to load and compute a metric):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a function that passes your predictions and labels to `compute`
    to calculate the accuracy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Your `compute_metrics` function is ready to go now, and youâ€™ll return to it
    when you setup your training.
  prefs: []
  type: TYPE_NORMAL
- en: Train
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: If you arenâ€™t familiar with finetuning a model with the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    take a look at the basic tutorial [here](../training#train-with-pytorch-trainer)!
  prefs: []
  type: TYPE_NORMAL
- en: 'Youâ€™re ready to start training your model now! Load Wav2Vec2 with [AutoModelForAudioClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForAudioClassification)
    along with the number of expected labels, and the label mappings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, only three steps remain:'
  prefs: []
  type: TYPE_NORMAL
- en: Define your training hyperparameters in [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments).
    The only required parameter is `output_dir` which specifies where to save your
    model. Youâ€™ll push this model to the Hub by setting `push_to_hub=True` (you need
    to be signed in to Hugging Face to upload your model). At the end of each epoch,
    the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    will evaluate the accuracy and save the training checkpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the training arguments to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    along with the model, dataset, tokenizer, data collator, and `compute_metrics`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)
    to finetune your model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once training is completed, share your model to the Hub with the [push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)
    method so everyone can use your model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For a more in-depth example of how to finetune a model for audio classification,
    take a look at the corresponding [PyTorch notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/audio_classification.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: Inference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Great, now that youâ€™ve finetuned a model, you can use it for inference!
  prefs: []
  type: TYPE_NORMAL
- en: Load an audio file youâ€™d like to run inference on. Remember to resample the
    sampling rate of the audio file to match the sampling rate of the model if you
    need to!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The simplest way to try out your finetuned model for inference is to use it
    in a [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline).
    Instantiate a `pipeline` for audio classification with your model, and pass your
    audio file to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also manually replicate the results of the `pipeline` if youâ€™d like:'
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: 'Load a feature extractor to preprocess the audio file and return the `input`
    as PyTorch tensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass your inputs to the model and return the logits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the class with the highest probability, and use the modelâ€™s `id2label`
    mapping to convert it to a label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
