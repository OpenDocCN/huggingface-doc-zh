- en: Pipeline callbacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/diffusers/using-diffusers/callback](https://huggingface.co/docs/diffusers/using-diffusers/callback)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/157.0676479a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Tip.230e2334.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/CodeBlock.57fe6e13.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
  prefs: []
  type: TYPE_NORMAL
- en: The denoising loop of a pipeline can be modified with custom defined functions
    using the `callback_on_step_end` parameter. This can be really useful for *dynamically*
    adjusting certain pipeline attributes, or modifying tensor variables. The flexibility
    of callbacks opens up some interesting use-cases such as changing the prompt embeddings
    at each timestep, assigning different weights to the prompt embeddings, and editing
    the guidance scale.
  prefs: []
  type: TYPE_NORMAL
- en: This guide will show you how to use the `callback_on_step_end` parameter to
    disable classifier-free guidance (CFG) after 40% of the inference steps to save
    compute with minimal cost to performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The callback function should have the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pipe` (or the pipeline instance) provides access to useful properties such
    as `num_timestep` and `guidance_scale`. You can modify these properties by updating
    the underlying attributes. For this example, youâ€™ll disable CFG by setting `pipe._guidance_scale=0.0`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step_index` and `timestep` tell you where you are in the denoising loop. Use
    `step_index` to turn off CFG after reaching 40% of `num_timestep`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callback_kwargs` is a dict that contains tensor variables you can modify during
    the denoising loop. It only includes variables specified in the `callback_on_step_end_tensor_inputs`
    argument, which is passed to the pipelineâ€™s `__call__` method. Different pipelines
    may use different sets of variables, so please check a pipelineâ€™s `_callback_tensor_inputs`
    attribute for the list of variables you can modify. Some common variables include
    `latents` and `prompt_embeds`. For this function, change the batch size of `prompt_embeds`
    after setting `guidance_scale=0.0` in order for it to work properly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your callback function should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can pass the callback function to the `callback_on_step_end` parameter
    and the `prompt_embeds` to `callback_on_step_end_tensor_inputs`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The callback function is executed at the end of each denoising step, and modifies
    the pipeline attributes and tensor variables for the next denoising step.
  prefs: []
  type: TYPE_NORMAL
- en: With callbacks, you can implement features such as dynamic CFG without having
    to modify the underlying code at all!
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ¤— Diffusers currently only supports `callback_on_step_end`, but feel free to
    open a [feature request](https://github.com/huggingface/diffusers/issues/new/choose)
    if you have a cool use-case and require a callback function with a different execution
    point!
  prefs: []
  type: TYPE_NORMAL
- en: Interrupt the diffusion process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Interrupting the diffusion process is particularly useful when building UIs
    that work with Diffusers because it allows users to stop the generation process
    if theyâ€™re unhappy with the intermediate results. You can incorporate this into
    your pipeline with a callback.
  prefs: []
  type: TYPE_NORMAL
- en: The interruption callback is supported for text-to-image, image-to-image, and
    inpainting for the [StableDiffusionPipeline](../api/pipelines/stable_diffusion/overview)
    and [StableDiffusionXLPipeline](../api/pipelines/stable_diffusion/stable_diffusion_xl).
  prefs: []
  type: TYPE_NORMAL
- en: 'This callback function should take the following arguments: `pipe`, `i`, `t`,
    and `callback_kwargs` (this must be returned). Set the pipelineâ€™s `_interrupt`
    attribute to `True` to stop the diffusion process after a certain number of steps.
    You are also free to implement your own custom stopping logic inside the callback.'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the diffusion process is stopped after 10 steps even though
    `num_inference_steps` is set to 50.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
