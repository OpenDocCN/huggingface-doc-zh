- en: processors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers.js/api/processors](https://huggingface.co/docs/transformers.js/api/processors)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers.js/main/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/entry/start.d68a6d16.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/scheduler.b108d059.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/singletons.e4b794f0.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/paths.0114e475.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/entry/app.c6513cb2.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/index.008de539.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/nodes/0.7513fd35.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/nodes/7.3c9c3e9d.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/CodeBlock.3968c746.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/Heading.88bfeb84.js">
  prefs: []
  type: TYPE_NORMAL
- en: Processors are used to prepare non-textual inputs (e.g., image or audio) for
    a model.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Using a `WhisperProcessor` to prepare an audio input for a model.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[processors](#module_processors)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*static*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.FeatureExtractor](#module_processors.FeatureExtractor) ⇐ `Callable`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new FeatureExtractor(config)`](#new_module_processors.FeatureExtractor_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.ImageFeatureExtractor](#module_processors.ImageFeatureExtractor) ⇐ `FeatureExtractor`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ImageFeatureExtractor(config)`](#new_module_processors.ImageFeatureExtractor_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.thumbnail(image, size, [resample])`](#module_processors.ImageFeatureExtractor+thumbnail)
    ⇒ `Promise.<RawImage>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.crop_margin(image, gray_threshold)`](#module_processors.ImageFeatureExtractor+crop_margin)
    ⇒ `Promise.<RawImage>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.pad_image(pixelData, imgDims, padSize, options)`](#module_processors.ImageFeatureExtractor+pad_image)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.rescale(pixelData)`](#module_processors.ImageFeatureExtractor+rescale) ⇒
    `void`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.get_resize_output_image_size(image, size)`](#module_processors.ImageFeatureExtractor+get_resize_output_image_size)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.resize(image)`](#module_processors.ImageFeatureExtractor+resize) ⇒ `Promise.<RawImage>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.preprocess(image, overrides)`](#module_processors.ImageFeatureExtractor+preprocess)
    ⇒ `Promise.<PreprocessedImage>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call(images, ...args)`](#module_processors.ImageFeatureExtractor+_call)
    ⇒ `Promise.<ImageFeatureExtractorResult>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.DetrFeatureExtractor](#module_processors.DetrFeatureExtractor) ⇐ `ImageFeatureExtractor`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call(images)`](#module_processors.DetrFeatureExtractor+_call) ⇒ `Promise.<DetrFeatureExtractorResult>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.post_process_object_detection()`](#module_processors.DetrFeatureExtractor+post_process_object_detection)
    : `post_process_object_detection`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold,
    num_labels)`](#module_processors.DetrFeatureExtractor+remove_low_and_no_objects)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.check_segment_validity(mask_labels, mask_probs, k, mask_threshold, overlap_mask_area_threshold)`](#module_processors.DetrFeatureExtractor+check_segment_validity)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.compute_segments(mask_probs, pred_scores, pred_labels, mask_threshold, overlap_mask_area_threshold,
    label_ids_to_fuse, target_size)`](#module_processors.DetrFeatureExtractor+compute_segments)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.post_process_panoptic_segmentation(outputs, [threshold], [mask_threshold],
    [overlap_mask_area_threshold], [label_ids_to_fuse], [target_sizes])`](#module_processors.DetrFeatureExtractor+post_process_panoptic_segmentation)
    ⇒ `Array.<{segmentation: Tensor, segments_info: Array<{id: number, label_id: number,
    score: number}>}>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.Processor](#module_processors.Processor) ⇐ `Callable`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new Processor(feature_extractor)`](#new_module_processors.Processor_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call(input, ...args)`](#module_processors.Processor+_call) ⇒ `Promise.<any>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.WhisperProcessor](#module_processors.WhisperProcessor) ⇐ `Processor`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call(audio)`](#module_processors.WhisperProcessor+_call) ⇒ `Promise.<any>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.AutoProcessor](#module_processors.AutoProcessor)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.from_pretrained(pretrained_model_name_or_path, options)`](#module_processors.AutoProcessor.from_pretrained)
    ⇒ `Promise.<Processor>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*inner*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~center_to_corners_format(arr)`](#module_processors..center_to_corners_format)
    ⇒ `Array.<number>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~enforce_size_divisibility(size, divisor)`](#module_processors..enforce_size_divisibility)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~HeightWidth`](#module_processors..HeightWidth) : `*`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ImageFeatureExtractorResult`](#module_processors..ImageFeatureExtractorResult)
    : `object`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~PreprocessedImage`](#module_processors..PreprocessedImage) : `object`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~DetrFeatureExtractorResult`](#module_processors..DetrFeatureExtractorResult)
    : `object`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~SamImageProcessorResult`](#module_processors..SamImageProcessorResult) :
    `object`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: processors.FeatureExtractor ⇐ <code> Callable </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Base class for feature extractors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static class of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extends**: `Callable`'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new FeatureExtractor(config)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Constructs a new FeatureExtractor instance.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| config | `Object` | The configuration for the feature extractor. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: processors.ImageFeatureExtractor ⇐ <code> FeatureExtractor </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Feature extractor for image models.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static class of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extends**: `FeatureExtractor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[.ImageFeatureExtractor](#module_processors.ImageFeatureExtractor) ⇐ `FeatureExtractor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ImageFeatureExtractor(config)`](#new_module_processors.ImageFeatureExtractor_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.thumbnail(image, size, [resample])`](#module_processors.ImageFeatureExtractor+thumbnail)
    ⇒ `Promise.<RawImage>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.crop_margin(image, gray_threshold)`](#module_processors.ImageFeatureExtractor+crop_margin)
    ⇒ `Promise.<RawImage>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.pad_image(pixelData, imgDims, padSize, options)`](#module_processors.ImageFeatureExtractor+pad_image)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.rescale(pixelData)`](#module_processors.ImageFeatureExtractor+rescale) ⇒
    `void`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.get_resize_output_image_size(image, size)`](#module_processors.ImageFeatureExtractor+get_resize_output_image_size)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.resize(image)`](#module_processors.ImageFeatureExtractor+resize) ⇒ `Promise.<RawImage>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.preprocess(image, overrides)`](#module_processors.ImageFeatureExtractor+preprocess)
    ⇒ `Promise.<PreprocessedImage>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call(images, ...args)`](#module_processors.ImageFeatureExtractor+_call)
    ⇒ `Promise.<ImageFeatureExtractorResult>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new ImageFeatureExtractor(config)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Constructs a new ImageFeatureExtractor instance.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| config | `Object` | The configuration for the feature extractor. |'
  prefs: []
  type: TYPE_TB
- en: '| config.image_mean | `Array.<number>` | The mean values for image normalization.
    |'
  prefs: []
  type: TYPE_TB
- en: '| config.image_std | `Array.<number>` | The standard deviation values for image
    normalization. |'
  prefs: []
  type: TYPE_TB
- en: '| config.do_rescale | `boolean` | Whether to rescale the image pixel values
    to the [0,1] range. |'
  prefs: []
  type: TYPE_TB
- en: '| config.rescale_factor | `number` | The factor to use for rescaling the image
    pixel values. |'
  prefs: []
  type: TYPE_TB
- en: '| config.do_normalize | `boolean` | Whether to normalize the image pixel values.
    |'
  prefs: []
  type: TYPE_TB
- en: '| config.do_resize | `boolean` | Whether to resize the image. |'
  prefs: []
  type: TYPE_TB
- en: '| config.resample | `number` | What method to use for resampling. |'
  prefs: []
  type: TYPE_TB
- en: '| config.size | `number` &#124; `Object` | The size to resize the image to.
    |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageFeatureExtractor.thumbnail(image, size, [resample]) ⇒ <code> Promise. <
    RawImage > </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Resize the image to make a thumbnail. The image is resized so that no dimension
    is larger than any corresponding dimension of the specified size.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<RawImage>` - The resized image.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| image | `RawImage` |  | The image to be resized. |'
  prefs: []
  type: TYPE_TB
- en: '| size | `Object` |  | The size `{"height": h, "width": w}` to resize the image
    to. |'
  prefs: []
  type: TYPE_TB
- en: '| [resample] | `string` &#124; `0` &#124; `1` &#124; `2` &#124; `3` &#124;
    `4` &#124; `5` | `2` | The resampling filter to use. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageFeatureExtractor.crop_margin(image, gray_threshold) ⇒ <code> Promise. <
    RawImage > </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Crops the margin of the image. Gray pixels are considered margin (i.e., pixels
    with a value below the threshold).
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<RawImage>` - The cropped image.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| image | `RawImage` |  | The image to be cropped. |'
  prefs: []
  type: TYPE_TB
- en: '| gray_threshold | `number` | `200` | Value below which pixels are considered
    to be gray. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageFeatureExtractor.pad_image(pixelData, imgDims, padSize, options) ⇒ <code>
    * </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pad the image by a certain amount.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `*` - The padded pixel data and image dimensions.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| pixelData | `Float32Array` |  | The pixel data to pad. |'
  prefs: []
  type: TYPE_TB
- en: '| imgDims | `Array.<number>` |  | The dimensions of the image. |'
  prefs: []
  type: TYPE_TB
- en: '| padSize | `*` |  | The dimensions of the padded image. |'
  prefs: []
  type: TYPE_TB
- en: '| options | `Object` |  | The options for padding. |'
  prefs: []
  type: TYPE_TB
- en: '| [options.mode] | `''constant''` &#124; `''symmetric''` | `''constant''` |
    The type of padding to add. |'
  prefs: []
  type: TYPE_TB
- en: '| [options.center] | `boolean` | `false` | Whether to center the image. |'
  prefs: []
  type: TYPE_TB
- en: '| [options.constant_values] | `number` | `0` | The constant value to use for
    padding. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageFeatureExtractor.rescale(pixelData) ⇒ <code> void </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rescale the image’ pixel values by `this.rescale_factor`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| pixelData | `Float32Array` | The pixel data to rescale. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageFeatureExtractor.get_resize_output_image_size(image, size) ⇒ <code> * </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Find the target (width, height) dimension of the output image after resizing
    given the input image and the desired size.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `*` - The target (width, height) dimension of the output image
    after resizing.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| image | `RawImage` | The image to resize. |'
  prefs: []
  type: TYPE_TB
- en: '| size | `any` | The size to use for resizing the image. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageFeatureExtractor.resize(image) ⇒ <code> Promise. < RawImage > </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Resizes the image.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<RawImage>` - The resized image.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| image | `RawImage` | The image to resize. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageFeatureExtractor.preprocess(image, overrides) ⇒ <code> Promise. < PreprocessedImage
    > </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Preprocesses the given image.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<PreprocessedImage>` - The preprocessed image.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| image | `RawImage` | The image to preprocess. |'
  prefs: []
  type: TYPE_TB
- en: '| overrides | `Object` | The overrides for the preprocessing options. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageFeatureExtractor._call(images, ...args) ⇒ <code> Promise. < ImageFeatureExtractorResult
    > </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calls the feature extraction process on an array of images, preprocesses each
    image, and concatenates the resulting features into a single Tensor.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageFeatureExtractor`](#module_processors.ImageFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<ImageFeatureExtractorResult>` - An object containing
    the concatenated pixel values (and other metadata) of the preprocessed images.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| images | `Array.<RawImage>` | The image(s) to extract features from. |'
  prefs: []
  type: TYPE_TB
- en: '| ...args | `any` | Additional arguments. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: processors.DetrFeatureExtractor ⇐ <code> ImageFeatureExtractor </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Detr Feature Extractor.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static class of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extends**: `ImageFeatureExtractor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[.DetrFeatureExtractor](#module_processors.DetrFeatureExtractor) ⇐ `ImageFeatureExtractor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call(images)`](#module_processors.DetrFeatureExtractor+_call) ⇒ `Promise.<DetrFeatureExtractorResult>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.post_process_object_detection()`](#module_processors.DetrFeatureExtractor+post_process_object_detection)
    : `post_process_object_detection`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold,
    num_labels)`](#module_processors.DetrFeatureExtractor+remove_low_and_no_objects)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.check_segment_validity(mask_labels, mask_probs, k, mask_threshold, overlap_mask_area_threshold)`](#module_processors.DetrFeatureExtractor+check_segment_validity)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.compute_segments(mask_probs, pred_scores, pred_labels, mask_threshold, overlap_mask_area_threshold,
    label_ids_to_fuse, target_size)`](#module_processors.DetrFeatureExtractor+compute_segments)
    ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.post_process_panoptic_segmentation(outputs, [threshold], [mask_threshold],
    [overlap_mask_area_threshold], [label_ids_to_fuse], [target_sizes])`](#module_processors.DetrFeatureExtractor+post_process_panoptic_segmentation)
    ⇒ `Array.<{segmentation: Tensor, segments_info: Array<{id: number, label_id: number,
    score: number}>}>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: detrFeatureExtractor._call(images) ⇒ <code> Promise. < DetrFeatureExtractorResult
    > </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calls the feature extraction process on an array of images, preprocesses each
    image, and concatenates the resulting features into a single Tensor.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<DetrFeatureExtractorResult>` - An object containing
    the concatenated pixel values of the preprocessed images.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| images | `Array.<RawImage>` | The image(s) to extract features from. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'detrFeatureExtractor.post_process_object_detection() : <code> post_process_object_detection
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: detrFeatureExtractor.remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold,
    num_labels) ⇒ <code> * </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Binarize the given masks using `object_mask_threshold`, it returns the associated
    values of `masks`, `scores` and `labels`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `*` - The binarized masks, the scores, and the labels.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| class_logits | `Tensor` | The class logits. |'
  prefs: []
  type: TYPE_TB
- en: '| mask_logits | `Tensor` | The mask logits. |'
  prefs: []
  type: TYPE_TB
- en: '| object_mask_threshold | `number` | A number between 0 and 1 used to binarize
    the masks. |'
  prefs: []
  type: TYPE_TB
- en: '| num_labels | `number` | The number of labels. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: detrFeatureExtractor.check_segment_validity(mask_labels, mask_probs, k, mask_threshold,
    overlap_mask_area_threshold) ⇒ <code> * </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Checks whether the segment is valid or not.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `*` - Whether the segment is valid or not, and the indices of
    the valid labels.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| mask_labels | `Int32Array` |  | Labels for each pixel in the mask. |'
  prefs: []
  type: TYPE_TB
- en: '| mask_probs | `Array.<Tensor>` |  | Probabilities for each pixel in the masks.
    |'
  prefs: []
  type: TYPE_TB
- en: '| k | `number` |  | The class id of the segment. |'
  prefs: []
  type: TYPE_TB
- en: '| mask_threshold | `number` | `0.5` | The mask threshold. |'
  prefs: []
  type: TYPE_TB
- en: '| overlap_mask_area_threshold | `number` | `0.8` | The overlap mask area threshold.
    |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: detrFeatureExtractor.compute_segments(mask_probs, pred_scores, pred_labels,
    mask_threshold, overlap_mask_area_threshold, label_ids_to_fuse, target_size) ⇒
    <code> * </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Computes the segments.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `*` - The computed segments.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| mask_probs | `Array.<Tensor>` |  | The mask probabilities. |'
  prefs: []
  type: TYPE_TB
- en: '| pred_scores | `Array.<number>` |  | The predicted scores. |'
  prefs: []
  type: TYPE_TB
- en: '| pred_labels | `Array.<number>` |  | The predicted labels. |'
  prefs: []
  type: TYPE_TB
- en: '| mask_threshold | `number` |  | The mask threshold. |'
  prefs: []
  type: TYPE_TB
- en: '| overlap_mask_area_threshold | `number` |  | The overlap mask area threshold.
    |'
  prefs: []
  type: TYPE_TB
- en: '| label_ids_to_fuse | `Set.<number>` |  | The label ids to fuse. |'
  prefs: []
  type: TYPE_TB
- en: '| target_size | `Array.<number>` |  | The target size of the image. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'detrFeatureExtractor.post_process_panoptic_segmentation(outputs, [threshold],
    [mask_threshold], [overlap_mask_area_threshold], [label_ids_to_fuse], [target_sizes])
    ⇒ <code> Array. < {segmentation: Tensor, segments_info: Array < {id: number, label_id:
    number, score: number} > } > </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Post-process the model output to generate the final panoptic segmentation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`DetrFeatureExtractor`](#module_processors.DetrFeatureExtractor)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| outputs | `*` |  | The model output to post process |'
  prefs: []
  type: TYPE_TB
- en: '| [threshold] | `number` | `0.5` | The probability score threshold to keep
    predicted instance masks. |'
  prefs: []
  type: TYPE_TB
- en: '| [mask_threshold] | `number` | `0.5` | Threshold to use when turning the predicted
    masks into binary values. |'
  prefs: []
  type: TYPE_TB
- en: '| [overlap_mask_area_threshold] | `number` | `0.8` | The overlap mask area
    threshold to merge or discard small disconnected parts within each binary instance
    mask. |'
  prefs: []
  type: TYPE_TB
- en: '| [label_ids_to_fuse] | `Set.<number>` |  | The labels in this state will have
    all their instances be fused together. |'
  prefs: []
  type: TYPE_TB
- en: '| [target_sizes] | `Array.<Array<number>>` |  | The target sizes to resize
    the masks to. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: processors.Processor ⇐ <code> Callable </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Represents a Processor that extracts features from an input.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static class of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extends**: `Callable`'
  prefs: []
  type: TYPE_NORMAL
- en: '[.Processor](#module_processors.Processor) ⇐ `Callable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new Processor(feature_extractor)`](#new_module_processors.Processor_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call(input, ...args)`](#module_processors.Processor+_call) ⇒ `Promise.<any>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new Processor(feature_extractor)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creates a new Processor with the given feature extractor.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| feature_extractor | `FeatureExtractor` | The function used to extract features
    from the input. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: processor._call(input, ...args) ⇒ <code> Promise. < any > </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calls the feature_extractor function with the given input.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`Processor`](#module_processors.Processor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<any>` - A Promise that resolves with the extracted features.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| input | `any` | The input to extract features from. |'
  prefs: []
  type: TYPE_TB
- en: '| ...args | `any` | Additional arguments. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: processors.WhisperProcessor ⇐ <code> Processor </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Represents a WhisperProcessor that extracts features from an audio input.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static class of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extends**: `Processor`'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: whisperProcessor._call(audio) ⇒ <code> Promise. < any > </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calls the feature_extractor function with the given audio input.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`WhisperProcessor`](#module_processors.WhisperProcessor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<any>` - A Promise that resolves with the extracted features.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| audio | `any` | The audio input to extract features from. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: processors.AutoProcessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Helper class which is used to instantiate pretrained processors with the `from_pretrained`
    function. The chosen processor class is determined by the type specified in the
    processor config.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Load a processor using `from_pretrained`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Run an image through a processor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: AutoProcessor.from_pretrained(pretrained_model_name_or_path, options) ⇒ <code>
    Promise. < Processor > </code>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instantiate one of the processor classes of the library from a pretrained model.
  prefs: []
  type: TYPE_NORMAL
- en: The processor class to instantiate is selected based on the `feature_extractor_type`
    property of the config object (either passed as an argument or loaded from `pretrained_model_name_or_path`
    if possible)
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static method of [`AutoProcessor`](#module_processors.AutoProcessor)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<Processor>` - A new instance of the Processor class.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| pretrained_model_name_or_path | `string` | The name or path of the pretrained
    model. Can be either:'
  prefs: []
  type: TYPE_NORMAL
- en: A string, the *model id* of a pretrained processor hosted inside a model repo
    on huggingface.co. Valid model ids can be located at the root-level, like `bert-base-uncased`,
    or namespaced under a user or organization name, like `dbmdz/bert-base-german-cased`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A path to a *directory* containing processor files, e.g., `./my_model_directory/`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| options | `*` | Additional options for loading the processor. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: processors~center_to_corners_format(arr) ⇒ <code> Array. < number > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Converts bounding boxes from center format to corners format.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner method of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Array.<number>` - The coodinates for the top-left and bottom-right
    corners of the box (top_left_x, top_left_y, bottom_right_x, bottom_right_y)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| arr | `Array.<number>` | The coordinate for the center of the box and its
    width, height dimensions (center_x, center_y, width, height) |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: processors~enforce_size_divisibility(size, divisor) ⇒ <code> * </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rounds the height and width down to the closest multiple of size_divisibility
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner method of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `*` - The rounded size.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| size | `*` | The size of the image |'
  prefs: []
  type: TYPE_TB
- en: '| divisor | `number` | The divisor to use. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'processors~HeightWidth : <code> * </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Named tuple to indicate the order we are using is (height x width), even though
    the Graphics’ industry standard is (width x height).
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'processors~ImageFeatureExtractorResult : <code> object </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| pixel_values | `Tensor` | The pixel values of the batched preprocessed images.
    |'
  prefs: []
  type: TYPE_TB
- en: '| original_sizes | `Array.<HeightWidth>` | Array of two-dimensional tuples
    like [[480, 640]]. |'
  prefs: []
  type: TYPE_TB
- en: '| reshaped_input_sizes | `Array.<HeightWidth>` | Array of two-dimensional tuples
    like [[1000, 1330]]. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'processors~PreprocessedImage : <code> object </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| original_size | `HeightWidth` | The original size of the image. |'
  prefs: []
  type: TYPE_TB
- en: '| reshaped_input_size | `HeightWidth` | The reshaped input size of the image.
    |'
  prefs: []
  type: TYPE_TB
- en: '| pixel_values | `Tensor` | The pixel values of the preprocessed image. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'processors~DetrFeatureExtractorResult : <code> object </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| pixel_mask | `Tensor` |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'processors~SamImageProcessorResult : <code> object </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`processors`](#module_processors)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| pixel_values | `Tensor` |'
  prefs: []
  type: TYPE_TB
- en: '| original_sizes | `Array.<HeightWidth>` |'
  prefs: []
  type: TYPE_TB
- en: '| reshaped_input_sizes | `Array.<HeightWidth>` |'
  prefs: []
  type: TYPE_TB
- en: '| [input_points] | `Tensor` |'
  prefs: []
  type: TYPE_TB
- en: '| [input_labels] | `Tensor` |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
