- en: Backbones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/backbones](https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/backbones)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: 'Backbones are models used for feature extraction for computer vision tasks.
    One can use a model as backbone in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: initializing `AutoBackbone` class with a pretrained model,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: initializing a supported backbone configuration and passing it to the model
    architecture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using AutoBackbone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use `AutoBackbone` class to initialize a model as a backbone and get
    the feature maps for any stage. You can define `out_indices` to indicate the index
    of the layers which you would like to get the feature maps from. You can also
    use `out_features` if you know the name of the layers. You can use them interchangeably.
    If you are using both `out_indices` and `out_features`, ensure they are consistent.
    Not passing any of the feature map arguments will make the backbone yield the
    feature maps of the last layer. To visualize how stages look like, let’s take
    the Swin model. Each stage is responsible from feature extraction, outputting
    feature maps.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0082aeea101c6158e81d141de7c17869.png)'
  prefs: []
  type: TYPE_IMG
- en: Illustrating feature maps of the first stage looks like below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b23a620d2613215c06ab98736baab7a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s see with an example. Note that `out_indices=(0,)` results in yielding
    the stem of the model. Stem refers to the stage before the first feature extraction
    stage. In above diagram, it refers to patch partition. We would like to have the
    feature maps from stem, first, and second stage of the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`feature_maps` object now has three feature maps, each can be accessed like
    below. Say we would like to get the feature map of the stem.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can get the feature maps of first and second stages like below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Initializing Backbone Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In computer vision, models consist of backbone, neck, and a head. Backbone extracts
    the features, neck transforms the output of the backbone and head is used for
    the main task (e.g. object detection). You can initialize neck and head with model
    backbones by passing a model configuration to `backbone_config`. For example,
    below you can see how to initialize the [MaskFormer](../model_doc/maskformer)
    model with instance segmentation head with [ResNet](../model_doc/resnet) backbone.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can also initialize a backbone with random weights to initialize the model
    neck with it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`timm` models are also supported in transformers through `TimmBackbone` and
    `TimmBackboneConfig`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
