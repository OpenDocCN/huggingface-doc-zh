- en: Backbones
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 骨干
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/backbones](https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/backbones)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/backbones](https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/backbones)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Backbones are models used for feature extraction for computer vision tasks.
    One can use a model as backbone in two ways:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 骨干是用于计算机视觉任务的特征提取模型。可以通过两种方式之一将模型用作骨干：
- en: initializing `AutoBackbone` class with a pretrained model,
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预训练模型初始化`AutoBackbone`类，
- en: initializing a supported backbone configuration and passing it to the model
    architecture.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化支持的骨干配置并将其传递给模型架构。
- en: Using AutoBackbone
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用AutoBackbone
- en: You can use `AutoBackbone` class to initialize a model as a backbone and get
    the feature maps for any stage. You can define `out_indices` to indicate the index
    of the layers which you would like to get the feature maps from. You can also
    use `out_features` if you know the name of the layers. You can use them interchangeably.
    If you are using both `out_indices` and `out_features`, ensure they are consistent.
    Not passing any of the feature map arguments will make the backbone yield the
    feature maps of the last layer. To visualize how stages look like, let’s take
    the Swin model. Each stage is responsible from feature extraction, outputting
    feature maps.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`AutoBackbone`类初始化一个模型作为骨干，并获取任何阶段的特征图。您可以定义`out_indices`来指示您想要从哪些层获取特征图。如果您知道层的名称，也可以使用`out_features`。您可以互换使用它们。如果同时使用`out_indices`和`out_features`，请确保它们是一致的。不传递任何特征图参数将使骨干产生最后一层的特征图。为了可视化各个阶段的外观，让我们以Swin模型为例。每个阶段负责特征提取，输出特征图。
- en: '![](../Images/0082aeea101c6158e81d141de7c17869.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0082aeea101c6158e81d141de7c17869.png)'
- en: Illustrating feature maps of the first stage looks like below.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一阶段的特征图如下所示。
- en: '![](../Images/b23a620d2613215c06ab98736baab7a8.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b23a620d2613215c06ab98736baab7a8.png)'
- en: Let’s see with an example. Note that `out_indices=(0,)` results in yielding
    the stem of the model. Stem refers to the stage before the first feature extraction
    stage. In above diagram, it refers to patch partition. We would like to have the
    feature maps from stem, first, and second stage of the model.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来看看。请注意，`out_indices=(0,)`会导致产生模型的stem。Stem指的是第一个特征提取阶段之前的阶段。在上图中，它指的是patch分区。我们希望从stem、第一阶段和第二阶段获取特征图。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`feature_maps` object now has three feature maps, each can be accessed like
    below. Say we would like to get the feature map of the stem.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`feature_maps`对象现在有三个特征图，每个都可以像下面这样访问。假设我们想要获取stem的特征图。'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can get the feature maps of first and second stages like below.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以像下面这样获取第一阶段和第二阶段的特征图。
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Initializing Backbone Configuration
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化骨干配置
- en: In computer vision, models consist of backbone, neck, and a head. Backbone extracts
    the features, neck transforms the output of the backbone and head is used for
    the main task (e.g. object detection). You can initialize neck and head with model
    backbones by passing a model configuration to `backbone_config`. For example,
    below you can see how to initialize the [MaskFormer](../model_doc/maskformer)
    model with instance segmentation head with [ResNet](../model_doc/resnet) backbone.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机视觉中，模型由骨干、neck和头部组成。骨干提取特征，neck转换骨干的输出，头部用于主要任务（例如目标检测）。您可以通过将模型配置传递给`backbone_config`来使用模型骨干初始化neck和头部。例如，您可以看到如何使用[ResNet](../model_doc/resnet)骨干初始化带有实例分割头部的[MaskFormer](../model_doc/maskformer)模型。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can also initialize a backbone with random weights to initialize the model
    neck with it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用随机权重初始化骨干，以初始化模型的neck。
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`timm` models are also supported in transformers through `TimmBackbone` and
    `TimmBackboneConfig`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`TimmBackbone`和`TimmBackboneConfig`，transformers还支持`timm`模型。
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
