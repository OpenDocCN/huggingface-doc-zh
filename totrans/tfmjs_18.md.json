["```py\nimport { pipeline } from '@xenova/transformers';\n\nconst classifier = await pipeline('sentiment-analysis');\nconst output = await classifier('I love transformers!');\n// [{'label': 'POSITIVE', 'score': 0.999817686}]\n```", "```py\nconst classifier = await pipeline('sentiment-analysis', 'Xenova/distilbert-base-uncased-finetuned-sst-2-english');\nconst output = await classifier('I love transformers!');\n// [{ label: 'POSITIVE', score: 0.999788761138916 }]\n```", "```py\nconst classifier = await pipeline('sentiment-analysis', 'Xenova/bert-base-multilingual-uncased-sentiment');\nconst output = await classifier('Le meilleur film de tous les temps.', { topk: 5 });\n// [\n//   { label: '5 stars', score: 0.9610759615898132 },\n//   { label: '4 stars', score: 0.03323351591825485 },\n//   { label: '3 stars', score: 0.0036155181005597115 },\n//   { label: '1 star', score: 0.0011325967498123646 },\n//   { label: '2 stars', score: 0.0009423971059732139 }\n// ]\n```", "```py\nconst classifier = await pipeline('text-classification', 'Xenova/toxic-bert');\nconst output = await classifier('I hate you!', { topk: null });\n// [\n//   { label: 'toxic', score: 0.9593140482902527 },\n//   { label: 'insult', score: 0.16187334060668945 },\n//   { label: 'obscene', score: 0.03452680632472038 },\n//   { label: 'identity_hate', score: 0.0223250575363636 },\n//   { label: 'threat', score: 0.019197041168808937 },\n//   { label: 'severe_toxic', score: 0.005651099607348442 }\n// ]\n```", "```py\nconst classifier = await pipeline('token-classification', 'Xenova/bert-base-NER');\nconst output = await classifier('My name is Sarah and I live in London');\n// [\n//   { entity: 'B-PER', score: 0.9980202913284302, index: 4, word: 'Sarah' },\n//   { entity: 'B-LOC', score: 0.9994474053382874, index: 9, word: 'London' }\n// ]\n```", "```py\nconst classifier = await pipeline('token-classification', 'Xenova/bert-base-NER');\nconst output = await classifier('Sarah lives in the United States of America', { ignore_labels: [] });\n// [\n//   { entity: 'B-PER', score: 0.9966587424278259, index: 1, word: 'Sarah' },\n//   { entity: 'O', score: 0.9987385869026184, index: 2, word: 'lives' },\n//   { entity: 'O', score: 0.9990072846412659, index: 3, word: 'in' },\n//   { entity: 'O', score: 0.9988298416137695, index: 4, word: 'the' },\n//   { entity: 'B-LOC', score: 0.9995510578155518, index: 5, word: 'United' },\n//   { entity: 'I-LOC', score: 0.9990395307540894, index: 6, word: 'States' },\n//   { entity: 'I-LOC', score: 0.9986724853515625, index: 7, word: 'of' },\n//   { entity: 'I-LOC', score: 0.9975294470787048, index: 8, word: 'America' }\n// ]\n```", "```py\nconst answerer = await pipeline('question-answering', 'Xenova/distilbert-base-uncased-distilled-squad');\nconst question = 'Who was Jim Henson?';\nconst context = 'Jim Henson was a nice puppet.';\nconst output = await answerer(question, context);\n// {\n//   answer: \"a nice puppet\",\n//   score: 0.5768911502526741\n// }\n```", "```py\nconst unmasker = await pipeline('fill-mask', 'Xenova/bert-base-cased');\nconst output = await unmasker('The goal of life is [MASK].');\n// [\n//   { token_str: 'survival', score: 0.06137419492006302, token: 8115, sequence: 'The goal of life is survival.' },\n//   { token_str: 'love', score: 0.03902450203895569, token: 1567, sequence: 'The goal of life is love.' },\n//   { token_str: 'happiness', score: 0.03253183513879776, token: 9266, sequence: 'The goal of life is happiness.' },\n//   { token_str: 'freedom', score: 0.018736306577920914, token: 4438, sequence: 'The goal of life is freedom.' },\n//   { token_str: 'life', score: 0.01859794743359089, token: 1297, sequence: 'The goal of life is life.' }\n// ]\n```", "```py\nconst unmasker = await pipeline('fill-mask', 'Xenova/bert-base-cased');\nconst output = await unmasker('The Milky Way is a [MASK] galaxy.', { topk: 1 });\n// [{ token_str: 'spiral', score: 0.6299987435340881, token: 14061, sequence: 'The Milky Way is a spiral galaxy.' }]\n```", "```py\nconst generator = await pipeline('text2text-generation', 'Xenova/LaMini-Flan-T5-783M');\nconst output = await generator('how can I become more healthy?', {\n  max_new_tokens: 100,\n});\n// [{ generated_text: \"To become more healthy, you can: 1\\. Eat a balanced diet with plenty of fruits, vegetables, whole grains, lean proteins, and healthy fats. 2\\. Stay hydrated by drinking plenty of water. 3\\. Get enough sleep and manage stress levels. 4\\. Avoid smoking and excessive alcohol consumption. 5\\. Regularly exercise and maintain a healthy weight. 6\\. Practice good hygiene and sanitation. 7\\. Seek medical attention if you experience any health issues.\" }]\n```", "```py\nconst generator = await pipeline('summarization', 'Xenova/distilbart-cnn-6-6');\nconst text = 'The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, ' +\n  'and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. ' +\n  'During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest ' +\n  'man-made structure in the world, a title it held for 41 years until the Chrysler Building in New ' +\n  'York City was finished in 1930\\. It was the first structure to reach a height of 300 metres. Due to ' +\n  'the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the ' +\n  'Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second ' +\n  'tallest free-standing structure in France after the Millau Viaduct.';\nconst output = await generator(text, {\n  max_new_tokens: 100,\n});\n// [{ summary_text: ' The Eiffel Tower is about the same height as an 81-storey building and the tallest structure in Paris. It is the second tallest free-standing structure in France after the Millau Viaduct.' }]\n```", "```py\nconst translator = await pipeline('translation', 'Xenova/nllb-200-distilled-600M');\nconst output = await translator('\u091c\u0940\u0935\u0928 \u090f\u0915 \u091a\u0949\u0915\u0932\u0947\u091f \u092c\u0949\u0915\u094d\u0938 \u0915\u0940 \u0924\u0930\u0939 \u0939\u0948\u0964', {\n  src_lang: 'hin_Deva', // Hindi\n  tgt_lang: 'fra_Latn', // French\n});\n// [{ translation_text: 'La vie est comme une bo\u00eete \u00e0 chocolat.' }]\n```", "```py\nconst translator = await pipeline('translation', 'Xenova/m2m100_418M');\nconst output = await translator('\u751f\u6d3b\u5c31\u50cf\u4e00\u76d2\u5de7\u514b\u529b\u3002', {\n  src_lang: 'zh', // Chinese\n  tgt_lang: 'en', // English\n});\n// [{ translation_text: 'Life is like a box of chocolate.' }]\n```", "```py\nconst translator = await pipeline('translation', 'Xenova/mbart-large-50-many-to-many-mmt');\nconst output = await translator('\u0938\u0902\u092f\u0941\u0915\u094d\u0924 \u0930\u093e\u0937\u094d\u091f\u094d\u0930 \u0915\u0947 \u092a\u094d\u0930\u092e\u0941\u0916 \u0915\u093e \u0915\u0939\u0928\u093e \u0939\u0948 \u0915\u093f \u0938\u0940\u0930\u093f\u092f\u093e \u092e\u0947\u0902 \u0915\u094b\u0908 \u0938\u0948\u0928\u094d\u092f \u0938\u092e\u093e\u0927\u093e\u0928 \u0928\u0939\u0940\u0902 \u0939\u0948', {\n  src_lang: 'hi_IN', // Hindi\n  tgt_lang: 'fr_XX', // French\n});\n// [{ translation_text: 'Le chef des Nations affirme qu 'il n 'y a military solution in Syria.' }]\n```", "```py\nconst generator = await pipeline('text-generation', 'Xenova/distilgpt2');\nconst text = 'I enjoy walking with my cute dog,';\nconst output = await generator(text);\n// [{ generated_text: \"I enjoy walking with my cute dog, and I love to play with the other dogs.\" }]\n```", "```py\nconst generator = await pipeline('text-generation', 'Xenova/distilgpt2');\nconst text = 'Once upon a time, there was';\nconst output = await generator(text, {\n  temperature: 2,\n  max_new_tokens: 10,\n  repetition_penalty: 1.5,\n  no_repeat_ngram_size: 2,\n  num_beams: 2,\n  num_return_sequences: 2,\n});\n// [{\n//   \"generated_text\": \"Once upon a time, there was an abundance of information about the history and activities that\"\n// }, {\n//   \"generated_text\": \"Once upon a time, there was an abundance of information about the most important and influential\"\n// }]\n```", "```py\nconst generator = await pipeline('text-generation', 'Xenova/codegen-350M-mono');\nconst text = 'def fib(n):';\nconst output = await generator(text, {\n  max_new_tokens: 44,\n});\n// [{\n//   generated_text: 'def fib(n):\\n' +\n//     '    if n == 0:\\n' +\n//     '        return 0\\n' +\n//     '    elif n == 1:\\n' +\n//     '        return 1\\n' +\n//     '    else:\\n' +\n//     '        return fib(n-1) + fib(n-2)\\n'\n// }]\n```", "```py\nconst classifier = await pipeline('zero-shot-classification', 'Xenova/mobilebert-uncased-mnli');\nconst text = 'Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.';\nconst labels = [ 'mobile', 'billing', 'website', 'account access' ];\nconst output = await classifier(text, labels);\n// {\n//   sequence: 'Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.',\n//   labels: [ 'mobile', 'website', 'billing', 'account access' ],\n//   scores: [ 0.5562091040482018, 0.1843621307860853, 0.13942646639336376, 0.12000229877234923 ]\n// }\n```", "```py\nconst classifier = await pipeline('zero-shot-classification', 'Xenova/nli-deberta-v3-xsmall');\nconst text = 'I have a problem with my iphone that needs to be resolved asap!';\nconst labels = [ 'urgent', 'not urgent', 'phone', 'tablet', 'computer' ];\nconst output = await classifier(text, labels, { multi_label: true });\n// {\n//   sequence: 'I have a problem with my iphone that needs to be resolved asap!',\n//   labels: [ 'urgent', 'phone', 'computer', 'tablet', 'not urgent' ],\n//   scores: [ 0.9958870956360275, 0.9923963400697035, 0.002333537946160235, 0.0015134138567598765, 0.0010699384208377163 ]\n// }\n```", "```py\nconst extractor = await pipeline('feature-extraction', 'Xenova/bert-base-uncased', { revision: 'default' });\nconst output = await extractor('This is a simple test.');\n// Tensor {\n//   type: 'float32',\n//   data: Float32Array [0.05939924716949463, 0.021655935794115067, ...],\n//   dims: [1, 8, 768]\n// }\n```", "```py\nconst extractor = await pipeline('feature-extraction', 'Xenova/bert-base-uncased', { revision: 'default' });\nconst output = await extractor('This is a simple test.', { pooling: 'mean', normalize: true });\n// Tensor {\n//   type: 'float32',\n//   data: Float32Array [0.03373778983950615, -0.010106077417731285, ...],\n//   dims: [1, 768]\n// }\n```", "```py\nconst extractor = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');\nconst output = await extractor('This is a simple test.', { pooling: 'mean', normalize: true });\n// Tensor {\n//   type: 'float32',\n//   data: Float32Array [0.09094982594251633, -0.014774246141314507, ...],\n//   dims: [1, 384]\n// }\n```", "```py\nconst classifier = await pipeline('audio-classification', 'Xenova/wav2vec2-large-xlsr-53-gender-recognition-librispeech');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\nconst output = await classifier(url);\n// [\n//   { label: 'male', score: 0.9981542229652405 },\n//   { label: 'female', score: 0.001845747814513743 }\n// ]\n```", "```py\nconst classifier = await pipeline('audio-classification', 'Xenova/ast-finetuned-audioset-10-10-0.4593');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cat_meow.wav';\nconst output = await classifier(url, { topk: 4 });\n// [\n//   { label: 'Meow', score: 0.5617874264717102 },\n//   { label: 'Cat', score: 0.22365376353263855 },\n//   { label: 'Domestic animals, pets', score: 0.1141069084405899 },\n//   { label: 'Animal', score: 0.08985692262649536 },\n// ]\n```", "```py\nconst classifier = await pipeline('zero-shot-audio-classification', 'Xenova/clap-htsat-unfused');\nconst audio = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/dog_barking.wav';\nconst candidate_labels = ['dog', 'vaccum cleaner'];\nconst scores = await classifier(audio, candidate_labels);\n// [\n//   { score: 0.9993992447853088, label: 'dog' },\n//   { score: 0.0006007603369653225, label: 'vaccum cleaner' }\n// ]\n```", "```py\nconst transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\nconst output = await transcriber(url);\n// { text: \" And so my fellow Americans ask not what your country can do for you, ask what you can do for your country.\" }\n```", "```py\nconst transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\nconst output = await transcriber(url, { return_timestamps: true });\n// {\n//   text: \" And so my fellow Americans ask not what your country can do for you, ask what you can do for your country.\"\n//   chunks: [\n//     { timestamp: [0, 8],  text: \" And so my fellow Americans ask not what your country can do for you\" }\n//     { timestamp: [8, 11], text: \" ask what you can do for your country.\" }\n//   ]\n// }\n```", "```py\nconst transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\nconst output = await transcriber(url, { return_timestamps: 'word' });\n// {\n//   \"text\": \" And so my fellow Americans ask not what your country can do for you ask what you can do for your country.\",\n//   \"chunks\": [\n//     { \"text\": \" And\", \"timestamp\": [0, 0.78] },\n//     { \"text\": \" so\", \"timestamp\": [0.78, 1.06] },\n//     { \"text\": \" my\", \"timestamp\": [1.06, 1.46] },\n//     ...\n//     { \"text\": \" for\", \"timestamp\": [9.72, 9.92] },\n//     { \"text\": \" your\", \"timestamp\": [9.92, 10.22] },\n//     { \"text\": \" country.\", \"timestamp\": [10.22, 13.5] }\n//   ]\n// }\n```", "```py\nconst transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/french-audio.mp3';\nconst output = await transcriber(url, { language: 'french', task: 'transcribe' });\n// { text: \" J'adore, j'aime, je n'aime pas, je d\u00e9teste.\" }\n```", "```py\nconst transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/french-audio.mp3';\nconst output = await transcriber(url, { language: 'french', task: 'translate' });\n// { text: \" I love, I like, I don't like, I hate.\" }\n```", "```py\nconst transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/ted_60.wav';\nconst output = await transcriber(url, { chunk_length_s: 30, stride_length_s: 5 });\n// { text: \" So in college, I was a government major, which means [...] So I'd start off light and I'd bump it up\" }\n```", "```py\nconst captioner = await pipeline('image-to-text', 'Xenova/vit-gpt2-image-captioning');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\nconst output = await captioner(url);\n// [{ generated_text: 'a cat laying on a couch with another cat' }]\n```", "```py\nconst captioner = await pipeline('image-to-text', 'Xenova/trocr-small-handwritten');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/handwriting.jpg';\nconst output = await captioner(url);\n// [{ generated_text: 'Mr. Brown commented icily.' }]\n```", "```py\nconst classifier = await pipeline('image-classification', 'Xenova/vit-base-patch16-224');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\nconst output = await classifier(url);\n// [\n//   { label: 'tiger, Panthera tigris', score: 0.632695734500885 },\n// ]\n```", "```py\nconst classifier = await pipeline('image-classification', 'Xenova/vit-base-patch16-224');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\nconst output = await classifier(url, { topk: 3 });\n// [\n//   { label: 'tiger, Panthera tigris', score: 0.632695734500885 },\n//   { label: 'tiger cat', score: 0.3634825646877289 },\n//   { label: 'lion, king of beasts, Panthera leo', score: 0.00045060308184474707 },\n// ]\n```", "```py\nconst classifier = await pipeline('image-classification', 'Xenova/vit-base-patch16-224');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\nconst output = await classifier(url, { topk: 0 });\n// [\n//   { label: 'tiger, Panthera tigris', score: 0.632695734500885 },\n//   { label: 'tiger cat', score: 0.3634825646877289 },\n//   { label: 'lion, king of beasts, Panthera leo', score: 0.00045060308184474707 },\n//   { label: 'jaguar, panther, Panthera onca, Felis onca', score: 0.00035465499968267977 },\n//   ...\n// ]\n```", "```py\nconst segmenter = await pipeline('image-segmentation', 'Xenova/detr-resnet-50-panoptic');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\nconst output = await segmenter(url);\n// [\n//   { label: 'remote', score: 0.9984649419784546, mask: RawImage { ... } },\n//   { label: 'cat', score: 0.9994316101074219, mask: RawImage { ... } }\n// ]\n```", "```py\nconst classifier = await pipeline('zero-shot-image-classification', 'Xenova/clip-vit-base-patch32');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\nconst output = await classifier(url, ['tiger', 'horse', 'dog']);\n// [\n//   { score: 0.9993917942047119, label: 'tiger' },\n//   { score: 0.0003519294841680676, label: 'horse' },\n//   { score: 0.0002562698791734874, label: 'dog' }\n// ]\n```", "```py\nconst detector = await pipeline('object-detection', 'Xenova/detr-resnet-50');\nconst img = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\nconst output = await detector(img, { threshold: 0.9 });\n// [{\n//   score: 0.9976370930671692,\n//   label: \"remote\",\n//   box: { xmin: 31, ymin: 68, xmax: 190, ymax: 118 }\n// },\n// ...\n// {\n//   score: 0.9984092116355896,\n//   label: \"cat\",\n//   box: { xmin: 331, ymin: 19, xmax: 649, ymax: 371 }\n// }]\n```", "```py\nconst detector = await pipeline('zero-shot-object-detection', 'Xenova/owlvit-base-patch32');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/astronaut.png';\nconst candidate_labels = ['human face', 'rocket', 'helmet', 'american flag'];\nconst output = await detector(url, candidate_labels);\n// [\n//   {\n//     score: 0.24392342567443848,\n//     label: 'human face',\n//     box: { xmin: 180, ymin: 67, xmax: 274, ymax: 175 }\n//   },\n//   {\n//     score: 0.15129457414150238,\n//     label: 'american flag',\n//     box: { xmin: 0, ymin: 4, xmax: 106, ymax: 513 }\n//   },\n//   {\n//     score: 0.13649864494800568,\n//     label: 'helmet',\n//     box: { xmin: 277, ymin: 337, xmax: 511, ymax: 511 }\n//   },\n//   {\n//     score: 0.10262022167444229,\n//     label: 'rocket',\n//     box: { xmin: 352, ymin: -1, xmax: 463, ymax: 287 }\n//   }\n// ]\n```", "```py\nconst detector = await pipeline('zero-shot-object-detection', 'Xenova/owlvit-base-patch32');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/beach.png';\nconst candidate_labels = ['hat', 'book', 'sunglasses', 'camera'];\nconst output = await detector(url, candidate_labels, { topk: 4, threshold: 0.05 });\n// [\n//   {\n//     score: 0.1606510728597641,\n//     label: 'sunglasses',\n//     box: { xmin: 347, ymin: 229, xmax: 429, ymax: 264 }\n//   },\n//   {\n//     score: 0.08935828506946564,\n//     label: 'hat',\n//     box: { xmin: 38, ymin: 174, xmax: 258, ymax: 364 }\n//   },\n//   {\n//     score: 0.08530698716640472,\n//     label: 'camera',\n//     box: { xmin: 187, ymin: 350, xmax: 260, ymax: 411 }\n//   },\n//   {\n//     score: 0.08349756896495819,\n//     label: 'book',\n//     box: { xmin: 261, ymin: 280, xmax: 494, ymax: 425 }\n//   }\n// ]\n```", "```py\nconst qa_pipeline = await pipeline('document-question-answering', 'Xenova/donut-base-finetuned-docvqa');\nconst image = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/invoice.png';\nconst question = 'What is the invoice number?';\nconst output = await qa_pipeline(image, question);\n// [{ answer: 'us-001' }]\n```", "```py\nconst synthesizer = await pipeline('text-to-speech', 'Xenova/speecht5_tts', { quantized: false });\nconst speaker_embeddings = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/speaker_embeddings.bin';\nconst out = await synthesizer('Hello, my dog is cute', { speaker_embeddings });\n// {\n//   audio: Float32Array(26112) [-0.00005657337896991521, 0.00020583874720614403, ...],\n//   sampling_rate: 16000\n// }\n```", "```py\nimport wavefile from 'wavefile';\nimport fs from 'fs';\n\nconst wav = new wavefile.WaveFile();\nwav.fromScratch(1, out.sampling_rate, '32f', out.audio);\nfs.writeFileSync('out.wav', wav.toBuffer());\n```", "```py\nconst synthesizer = await pipeline('text-to-speech', 'Xenova/mms-tts-fra');\nconst out = await synthesizer('Bonjour');\n// {\n//   audio: Float32Array(23808) [-0.00037693005288019776, 0.0003325853613205254, ...],\n//   sampling_rate: 16000\n// }\n```", "```py\nconst upscaler = await pipeline('image-to-image', 'Xenova/swin2SR-classical-sr-x2-64');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/butterfly.jpg';\nconst output = await upscaler(url);\n// RawImage {\n//   data: Uint8Array(786432) [ 41, 31, 24,  43, ... ],\n//   width: 512,\n//   height: 512,\n//   channels: 3\n// }\n```", "```py\nconst depth_estimator = await pipeline('depth-estimation', 'Xenova/dpt-hybrid-midas');\nconst url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\nconst out = await depth_estimator(url);\n// {\n//   predicted_depth: Tensor {\n//     dims: [ 384, 384 ],\n//     type: 'float32',\n//     data: Float32Array(147456) [ 542.859130859375, 545.2833862304688, 546.1649169921875, ... ],\n//     size: 147456\n//   },\n//   depth: RawImage {\n//     data: Uint8Array(307200) [ 86, 86, 86, ... ],\n//     width: 640,\n//     height: 480,\n//     channels: 1\n//   }\n// }\n```"]