["```py\nfrom transformers import load_tool\n\n# simple calculator tool that runs +-/* operations\ncalc_tool = load_tool(\"ybelkada/simple-calculator\")\n\n# python interpreter that executes program and returns outputs\npy_tool = load_tool(\"lvwerra/python-interpreter\")\n\n# wikipedia search index that returns best search match\nwiki_tool = load_tool(\"vwxyzjn/pyserini-wikipedia-kilt-doc\")\n```", "```py\ncalc_tool(\"1/2\")\n>>> \"0.5\"\n```", "```py\ndef add(text):\n    int_1, int_2 = text.split(\"+\")\n    result = int(int_1) + int(int_2)\n    return str(result)\n\nprint(add(\"1+1\"))\n>>> \"2\"\n```", "```py\n\"<request><TOOL_NAME>QUERY<call>TOOL_RESPONSE<response>\"\n```", "```py\n\"<request><Calculator>1/2<call>0.5<response>\"\n```", "```py\nprompt = \"\"\"\\\nWhat is 13-3?\n<request><SimpleCalculatorTool>13-3<call>10.0<response>\nResult=10<submit>\n\"\"\"\n\ndef reward_fn(result, answer):\n    \"\"\"Simplified reward function returning 1 if result matches answer and 0 otherwise.\"\"\"\n    result_parsed = result.split(\"=\")[1].split(\"<\")[0]\n    return int(result_parsed==answer)\n\ntext_env = TextEnvironemnt(\n    model=model, \n    tokenizer=tokenizer,\n    tools= {\"SimpleCalculatorTool\": load_tool(\"ybelkada/simple-calculator\")},\n    reward_fn=exact_match_reward,\n    prompt=prompt, \n    max_turns=1\n    max_tool_response=100\n    generation_kwargs={\"do_sample\": \"true\"}\n)\n```", "```py\nqueries = [\"What is 1/2?\"]\nanswers = [\"0.5\"]\n\nqueries, responses, masks, rewards, histories = text_env.run(queries, answers=answers)\n```", "```py\ntrain_stats = ppo_trainer.step(queries, responses, rewards, masks)\n```", "```py\n( model = None tokenizer = None tools = None reward_fn = None prompt = None max_turns = 4 max_tool_reponse = 100 max_length = None generation_kwargs = None )\n```", "```py\n( histories **reward_kwargs )\n```", "```py\n( histories )\n```", "```py\n( text )\n```", "```py\n( queries **rewards_kwargs )\n```", "```py\n( history )\n```", "```py\n( history model_turn = True )\n```", "```py\n( histories model_turn = True )\n```", "```py\n( text tokens system = True )\n```", "```py\n( text tokens system = True )\n```", "```py\n( truncated = False )\n```", "```py\n( )\n```", "```py\n( show_legend = False )\n```", "```py\n( tokenizer show_legend = False )\n```", "```py\n( )\n```"]