- en: UNet3DConditionModel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/models/unet3d-cond](https://huggingface.co/docs/diffusers/api/models/unet3d-cond)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet](https://huggingface.co/papers/1505.04597) model was originally introduced
    by Ronneberger et al. for biomedical image segmentation, but it is also commonly
    used in ü§ó Diffusers because it outputs images that are the same size as the input.
    It is one of the most important components of a diffusion system because it facilitates
    the actual diffusion process. There are several variants of the UNet model in
    ü§ó Diffusers, depending on it‚Äôs number of dimensions and whether it is a conditional
    model or not. This is a 3D UNet conditional model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*There is large consent that successful training of deep networks requires
    many thousand annotated training samples. In this paper, we present a network
    and training strategy that relies on the strong use of data augmentation to use
    the available annotated samples more efficiently. The architecture consists of
    a contracting path to capture context and a symmetric expanding path that enables
    precise localization. We show that such a network can be trained end-to-end from
    very few images and outperforms the prior best method (a sliding-window convolutional
    network) on the ISBI challenge for segmentation of neuronal structures in electron
    microscopic stacks. Using the same network trained on transmitted light microscopy
    images (phase contrast and DIC) we won the ISBI cell tracking challenge 2015 in
    these categories by a large margin. Moreover, the network is fast. Segmentation
    of a 512x512 image takes less than a second on a recent GPU. The full implementation
    (based on Caffe) and the trained networks are available at [http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net](http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net).*'
  prefs: []
  type: TYPE_NORMAL
- en: UNet3DConditionModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.UNet3DConditionModel`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_3d_condition.py#L64)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample_size` (`int` or `Tuple[int, int]`, *optional*, defaults to `None`)
    ‚Äî Height and width of input/output sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_channels` (`int`, *optional*, defaults to 4) ‚Äî The number of channels in
    the input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`out_channels` (`int`, *optional*, defaults to 4) ‚Äî The number of channels
    in the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`down_block_types` (`Tuple[str]`, *optional*, defaults to `("CrossAttnDownBlock2D",
    "CrossAttnDownBlock2D", "CrossAttnDownBlock2D", "DownBlock2D")`) ‚Äî The tuple of
    downsample blocks to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`up_block_types` (`Tuple[str]`, *optional*, defaults to `("UpBlock2D", "CrossAttnUpBlock2D",
    "CrossAttnUpBlock2D", "CrossAttnUpBlock2D")`) ‚Äî The tuple of upsample blocks to
    use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`block_out_channels` (`Tuple[int]`, *optional*, defaults to `(320, 640, 1280,
    1280)`) ‚Äî The tuple of output channels for each block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layers_per_block` (`int`, *optional*, defaults to 2) ‚Äî The number of layers
    per block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downsample_padding` (`int`, *optional*, defaults to 1) ‚Äî The padding to use
    for the downsampling convolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mid_block_scale_factor` (`float`, *optional*, defaults to 1.0) ‚Äî The scale
    factor to use for the mid block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`act_fn` (`str`, *optional*, defaults to `"silu"`) ‚Äî The activation function
    to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`norm_num_groups` (`int`, *optional*, defaults to 32) ‚Äî The number of groups
    to use for the normalization. If `None`, normalization and activation layers is
    skipped in post-processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`norm_eps` (`float`, *optional*, defaults to 1e-5) ‚Äî The epsilon to use for
    the normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attention_dim` (`int`, *optional*, defaults to 1280) ‚Äî The dimension
    of the cross attention features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_head_dim` (`int`, *optional*, defaults to 8) ‚Äî The dimension of
    the attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_attention_heads` (`int`, *optional*) ‚Äî The number of attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A conditional 3D UNet model that takes a noisy sample, conditional state, and
    a timestep and returns a sample shaped output.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin).
    Check the superclass documentation for it‚Äôs generic methods implemented for all
    models (such as downloading or saving).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `disable_freeu`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_3d_condition.py#L498)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Disables the FreeU mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `enable_forward_chunking`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_3d_condition.py#L412)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`chunk_size` (`int`, *optional*) ‚Äî The chunk size of the feed-forward layers.
    If not specified, will run feed-forward layer individually over each tensor of
    dim=`dim`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dim` (`int`, *optional*, defaults to `0`) ‚Äî The dimension over which the feed-forward
    computation should be chunked. Choose between dim=0 (batch) or dim=1 (sequence
    length).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets the attention processor to use [feed forward chunking](https://huggingface.co/blog/reformer#2-chunked-feed-forward-layers).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `enable_freeu`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_3d_condition.py#L473)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`s1` (`float`) ‚Äî Scaling factor for stage 1 to attenuate the contributions
    of the skip features. This is done to mitigate the ‚Äúoversmoothing effect‚Äù in the
    enhanced denoising process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s2` (`float`) ‚Äî Scaling factor for stage 2 to attenuate the contributions
    of the skip features. This is done to mitigate the ‚Äúoversmoothing effect‚Äù in the
    enhanced denoising process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b1` (`float`) ‚Äî Scaling factor for stage 1 to amplify the contributions of
    backbone features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b2` (`float`) ‚Äî Scaling factor for stage 2 to amplify the contributions of
    backbone features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables the FreeU mechanism from [https://arxiv.org/abs/2309.11497](https://arxiv.org/abs/2309.11497).
  prefs: []
  type: TYPE_NORMAL
- en: The suffixes after the scaling factors represent the stage blocks where they
    are being applied.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the [official repository](https://github.com/ChenyangSi/FreeU)
    for combinations of values that are known to work well for different pipelines
    such as Stable Diffusion v1, v2, and Stable Diffusion XL.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_3d_condition.py#L518)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor`) ‚Äî The noisy input tensor with the following
    shape `(batch, num_frames, channel, height, width`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestep` (`torch.FloatTensor` or `float` or `int`) ‚Äî The number of timesteps
    to denoise an input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`torch.FloatTensor`) ‚Äî The encoder hidden states with
    shape `(batch, sequence_length, feature_dim)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_labels` (`torch.Tensor`, *optional*, defaults to `None`) ‚Äî Optional
    class labels for conditioning. Their embeddings will be summed with the timestep
    embeddings. timestep_cond ‚Äî (`torch.Tensor`, *optional*, defaults to `None`):
    Conditional embeddings for timestep. If provided, the embeddings will be summed
    with the samples passed through the `self.time_embedding` layer to obtain the
    timestep embeddings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask` (`torch.Tensor`, *optional*, defaults to `None`) ‚Äî An attention
    mask of shape `(batch, key_tokens)` is applied to `encoder_hidden_states`. If
    `1` the mask is kept, otherwise if `0` it is discarded. Mask will be converted
    into a bias, which adds large negative values to the attention scores corresponding
    to ‚Äúdiscard‚Äù tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attention_kwargs` (`dict`, *optional*) ‚Äî A kwargs dictionary that if
    specified is passed along to the `AttentionProcessor` as defined under `self.processor`
    in [diffusers.models.attention_processor](https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/attention_processor.py).
    down_block_additional_residuals ‚Äî (`tuple` of `torch.Tensor`, *optional*): A tuple
    of tensors that if specified are added to the residuals of down unet blocks. mid_block_additional_residual
    ‚Äî (`torch.Tensor`, *optional*): A tensor that if specified is added to the residual
    of the middle unet block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or not to
    return a `~models.unet_3d_condition.UNet3DConditionOutput` instead of a plain
    tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attention_kwargs` (`dict`, *optional*) ‚Äî A kwargs dictionary that if
    specified is passed along to the `AttnProcessor`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`~models.unet_3d_condition.UNet3DConditionOutput` or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If `return_dict` is True, an `~models.unet_3d_condition.UNet3DConditionOutput`
    is returned, otherwise a `tuple` is returned where the first element is the sample
    tensor.
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet3DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet3d-cond#diffusers.UNet3DConditionModel)
    forward method.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_attention_slice`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_3d_condition.py#L312)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`slice_size` (`str` or `int` or `list(int)`, *optional*, defaults to `"auto"`)
    ‚Äî When `"auto"`, input to the attention heads is halved, so attention is computed
    in two steps. If `"max"`, maximum amount of memory is saved by running only one
    slice at a time. If a number is provided, uses as many slices as `attention_head_dim
    // slice_size`. In this case, `attention_head_dim` must be a multiple of `slice_size`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable sliced attention computation.
  prefs: []
  type: TYPE_NORMAL
- en: When this option is enabled, the attention module splits the input tensor in
    slices to compute attention in several steps. This is useful for saving some memory
    in exchange for a small decrease in speed.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_attn_processor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_3d_condition.py#L378)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`processor` (`dict` of `AttentionProcessor` or only `AttentionProcessor`) ‚Äî
    The instantiated processor class or a dictionary of processor classes that will
    be set as the processor for **all** `Attention` layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `processor` is a dict, the key needs to define the path to the corresponding
    cross attention processor. This is strongly recommended when setting trainable
    attention processors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sets the attention processor to use to compute attention.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_default_attn_processor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_3d_condition.py#L453)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Disables custom attention processors and sets the default attention implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `unload_lora`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_3d_condition.py#L507)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Unloads LoRA weights.
  prefs: []
  type: TYPE_NORMAL
- en: UNet3DConditionOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.models.unets.unet_3d_condition.UNet3DConditionOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_3d_condition.py#L51)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor` of shape `(batch_size, num_frames, num_channels,
    height, width)`) ‚Äî The hidden states output conditioned on `encoder_hidden_states`
    input. Output of last layer of model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of [UNet3DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet3d-cond#diffusers.UNet3DConditionModel).
  prefs: []
  type: TYPE_NORMAL
