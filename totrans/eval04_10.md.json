["```py\nfrom datasets import load_dataset\n\nds = load_dataset(\"imdb\")\n```", "```py\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ntext_clf = Pipeline([\n        ('vect', CountVectorizer()),\n        ('tfidf', TfidfTransformer()),\n        ('clf', MultinomialNB()),\n])\n\ntext_clf.fit(ds[\"train\"][\"text\"], ds[\"train\"][\"label\"])\n```", "```py\nclass ScikitEvalPipeline:\n    def __init__(self, pipeline):\n        self.pipeline = pipeline\n        self.task = \"text-classification\"\n\n    def __call__(self, input_texts, **kwargs):\n        return [{\"label\": p} for p in self.pipeline.predict(input_texts)]\n\npipe = ScikitEvalPipeline(text_clf)\n```", "```py\nfrom evaluate import evaluator\n\ntask_evaluator = evaluator(\"text-classification\")\ntask_evaluator.compute(pipe, ds[\"test\"], \"accuracy\")\n\n>>> {'accuracy': 0.82956}\n```", "```py\npip install spacytextblob\npython -m textblob.download_corpora\npython -m spacy download en_core_web_sm\n```", "```py\nimport spacy\n\nnlp = spacy.load('en_core_web_sm')\nnlp.add_pipe('spacytextblob')\n```", "```py\ntexts = [\"This movie is horrible\", \"This movie is awesome\"]\nresults = nlp.pipe(texts)\n\nfor txt, res in zip(texts, results):\n    print(f\"{text} | Polarity: {res._.blob.polarity}\")\n```", "```py\nclass SpacyEvalPipeline:\n    def __init__(self, nlp):\n        self.nlp = nlp\n        self.task = \"text-classification\"\n\n    def __call__(self, input_texts, **kwargs):\n        results =[]\n        for p in self.nlp.pipe(input_texts):\n            if p._.blob.polarity>=0:\n                results.append({\"label\": 1})\n            else:\n                results.append({\"label\": 0})\n        return results\n\npipe = SpacyEvalPipeline(nlp)\n```", "```py\neval.compute(pipe, ds[\"test\"], \"accuracy\")\n>>> {'accuracy': 0.6914}\n```"]