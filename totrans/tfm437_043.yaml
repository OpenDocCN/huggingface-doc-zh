- en: Text to speech
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本到语音
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/text-to-speech](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/text-to-speech)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/tasks/text-to-speech](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/text-to-speech)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Text-to-speech (TTS) is the task of creating natural-sounding speech from text,
    where the speech can be generated in multiple languages and for multiple speakers.
    Several text-to-speech models are currently available in 🤗 Transformers, such
    as [Bark](../model_doc/bark), [MMS](../model_doc/mms), [VITS](../model_doc/vits)
    and [SpeechT5](../model_doc/speecht5).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 文本到语音（TTS）是从文本创建自然语音的任务，语音可以用多种语言和多个说话者生成。目前在🤗 Transformers中有几种文本到语音模型，如[Bark](../model_doc/bark)、[MMS](../model_doc/mms)、[VITS](../model_doc/vits)和[SpeechT5](../model_doc/speecht5)。
- en: 'You can easily generate audio using the `"text-to-audio"` pipeline (or its
    alias - `"text-to-speech"`). Some models, like Bark, can also be conditioned to
    generate non-verbal communications such as laughing, sighing and crying, or even
    add music. Here’s an example of how you would use the `"text-to-speech"` pipeline
    with Bark:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松使用`"text-to-audio"`流水线（或其别名`"text-to-speech"`）生成音频。一些模型，如Bark，还可以被调节以生成非语言交流，如笑声、叹息和哭泣，甚至添加音乐。以下是您如何使用`"text-to-speech"`流水线与Bark的示例：
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here’s a code snippet you can use to listen to the resulting audio in a notebook:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个代码片段，您可以使用它在笔记本中听取生成的音频：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more examples on what Bark and other pretrained TTS models can do, refer
    to our [Audio course](https://huggingface.co/learn/audio-course/chapter6/pre-trained_models).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Bark和其他预训练TTS模型的更多示例，请参考我们的[音频课程](https://huggingface.co/learn/audio-course/chapter6/pre-trained_models)。
- en: If you are looking to fine-tune a TTS model, the only text-to-speech models
    currently available in 🤗 Transformers are [SpeechT5](model_doc/speecht5) and [FastSpeech2Conformer](model_doc/fastspeech2_conformer),
    though more will be added in the future. SpeechT5 is pre-trained on a combination
    of speech-to-text and text-to-speech data, allowing it to learn a unified space
    of hidden representations shared by both text and speech. This means that the
    same pre-trained model can be fine-tuned for different tasks. Furthermore, SpeechT5
    supports multiple speakers through x-vector speaker embeddings.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要微调TTS模型，目前在🤗 Transformers中唯一可用的文本到语音模型是[SpeechT5](model_doc/speecht5)和[FastSpeech2Conformer](model_doc/fastspeech2_conformer)，未来将会添加更多。SpeechT5在文本到语音和语音到文本数据的组合上进行了预训练，使其能够学习文本和语音共享的隐藏表示空间。这意味着相同的预训练模型可以用于不同的任务。此外，SpeechT5通过x-vector说话者嵌入支持多个说话者。
- en: 'The remainder of this guide illustrates how to:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南的其余部分将说明如何：
- en: Fine-tune [SpeechT5](../model_doc/speecht5) that was originally trained on English
    speech on the Dutch (`nl`) language subset of the [VoxPopuli](https://huggingface.co/datasets/facebook/voxpopuli)
    dataset.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微调[SpeechT5](../model_doc/speecht5)，该模型最初是在英语语音上进行训练的，在[VoxPopuli](https://huggingface.co/datasets/facebook/voxpopuli)数据集的荷兰语（`nl`）语言子集上。
- en: 'Use your refined model for inference in one of two ways: using a pipeline or
    directly.'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您精炼的模型进行推理的两种方式之一：使用流水线或直接。
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保已安装所有必要的库：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Install 🤗Transformers from source as not all the SpeechT5 features have been
    merged into an official release yet:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从源代码安装🤗Transformers，因为并非所有SpeechT5功能都已合并到官方发布中：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To follow this guide you will need a GPU. If you’re working in a notebook,
    run the following line to check if a GPU is available:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要按照本指南操作，您将需要一个GPU。如果您在笔记本中工作，请运行以下命令以检查GPU是否可用：
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'or alternatively for AMD GPUs:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或者适用于AMD GPU：
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We encourage you to log in to your Hugging Face account to upload and share
    your model with the community. When prompted, enter your token to log in:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励您登录您的Hugging Face账户，将您的模型上传并与社区分享。在提示时，输入您的令牌以登录：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Load the dataset
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据集
- en: '[VoxPopuli](https://huggingface.co/datasets/facebook/voxpopuli) is a large-scale
    multilingual speech corpus consisting of data sourced from 2009-2020 European
    Parliament event recordings. It contains labelled audio-transcription data for
    15 European languages. In this guide, we are using the Dutch language subset,
    feel free to pick another subset.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[VoxPopuli](https://huggingface.co/datasets/facebook/voxpopuli)是一个大规模的多语音语料库，包含2009-2020年欧洲议会活动录音的数据。它包含了15种欧洲语言的带标签音频转录数据。在本指南中，我们使用荷兰语子集，可以随意选择其他子集。'
- en: Note that VoxPopuli or any other automated speech recognition (ASR) dataset
    may not be the most suitable option for training TTS models. The features that
    make it beneficial for ASR, such as excessive background noise, are typically
    undesirable in TTS. However, finding top-quality, multilingual, and multi-speaker
    TTS datasets can be quite challenging.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，VoxPopuli或任何其他自动语音识别（ASR）数据集可能不是训练TTS模型的最佳选择。对于ASR有益的特性，如过多的背景噪音，在TTS中通常是不希望的。然而，找到高质量、多语言和多说话者的TTS数据集可能会非常具有挑战性。
- en: 'Let’s load the data:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们加载数据：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '20968 examples should be sufficient for fine-tuning. SpeechT5 expects audio
    data to have a sampling rate of 16 kHz, so make sure the examples in the dataset
    meet this requirement:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 20968个示例应该足够进行微调。SpeechT5期望音频数据的采样率为16 kHz，因此请确保数据集中的示例符合此要求：
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Preprocess the data
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理数据
- en: 'Let’s begin by defining the model checkpoint to use and loading the appropriate
    processor:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先定义要使用的模型检查点并加载适当的处理器：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Text cleanup for SpeechT5 tokenization
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SpeechT5分词的文本清理
- en: 'Start by cleaning up the text data. You’ll need the tokenizer part of the processor
    to process the text:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先清理文本数据。您将需要处理文本的分词器部分：
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The dataset examples contain `raw_text` and `normalized_text` features. When
    deciding which feature to use as the text input, consider that the SpeechT5 tokenizer
    doesn’t have any tokens for numbers. In `normalized_text` the numbers are written
    out as text. Thus, it is a better fit, and we recommend using `normalized_text`
    as input text.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集示例包含`raw_text`和`normalized_text`特征。在决定使用哪个特征作为文本输入时，请考虑SpeechT5分词器没有任何数字标记。在`normalized_text`中，数字被写成文本。因此，它更适合，我们建议使用`normalized_text`作为输入文本。
- en: Because SpeechT5 was trained on the English language, it may not recognize certain
    characters in the Dutch dataset. If left as is, these characters will be converted
    to `<unk>` tokens. However, in Dutch, certain characters like `à` are used to
    stress syllables. In order to preserve the meaning of the text, we can replace
    this character with a regular `a`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因为SpeechT5是在英语上进行训练的，可能无法识别荷兰数据集中的某些字符。如果保持原样，这些字符将被转换为`<unk>`标记。然而，在荷兰语中，像`à`这样的特定字符用于强调音节。为了保留文本的含义，我们可以用普通的`a`替换这个字符。
- en: To identify unsupported tokens, extract all unique characters in the dataset
    using the `SpeechT5Tokenizer` which works with characters as tokens. To do this,
    write the `extract_all_chars` mapping function that concatenates the transcriptions
    from all examples into one string and converts it to a set of characters. Make
    sure to set `batched=True` and `batch_size=-1` in `dataset.map()` so that all
    transcriptions are available at once for the mapping function.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了识别不支持的标记，使用`SpeechT5Tokenizer`提取数据集中的所有唯一字符，该分词器使用字符作为标记。为此，编写`extract_all_chars`映射函数，将所有示例的转录连接成一个字符串，并将其转换为字符集。确保在`dataset.map()`中设置`batched=True`和`batch_size=-1`，以便所有转录都可以一次性用于映射函数。
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now you have two sets of characters: one with the vocabulary from the dataset
    and one with the vocabulary from the tokenizer. To identify any unsupported characters
    in the dataset, you can take the difference between these two sets. The resulting
    set will contain the characters that are in the dataset but not in the tokenizer.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您有两组字符：一组来自数据集的词汇表，另一组来自分词器的词汇表。为了识别数据集中的任何不支持的字符，您可以取这两组之间的差集。结果集将包含数据集中存在但不在分词器中的字符。
- en: '[PRE12]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To handle the unsupported characters identified in the previous step, define
    a function that maps these characters to valid tokens. Note that spaces are already
    replaced by `▁` in the tokenizer and don’t need to be handled separately.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理前一步骤中识别出的不支持的字符，定义一个函数，将这些字符映射到有效的标记。请注意，分词器中的空格已经被替换为`▁`，不需要单独处理。
- en: '[PRE13]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now that you have dealt with special characters in the text, it’s time to shift
    focus to the audio data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经处理了文本中的特殊字符，是时候将重点转移到音频数据上了。
- en: Speakers
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发言者
- en: The VoxPopuli dataset includes speech from multiple speakers, but how many speakers
    are represented in the dataset? To determine this, we can count the number of
    unique speakers and the number of examples each speaker contributes to the dataset.
    With a total of 20,968 examples in the dataset, this information will give us
    a better understanding of the distribution of speakers and examples in the data.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: VoxPopuli数据集包含多位发言者的讲话，但数据集中代表了多少位发言者？为了确定这一点，我们可以计算独特发言者的数量以及每位发言者对数据集的贡献示例数量。在数据集中共有20,968个示例，这些信息将帮助我们更好地了解数据中发言者和示例的分布。
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: By plotting a histogram you can get a sense of how much data there is for each
    speaker.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过绘制直方图，您可以了解每位发言者的数据量。
- en: '[PRE15]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Speakers histogram](../Images/6da9c92a3752085ee6b533eafde281f1.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![发言者直方图](../Images/6da9c92a3752085ee6b533eafde281f1.png)'
- en: The histogram reveals that approximately one-third of the speakers in the dataset
    have fewer than 100 examples, while around ten speakers have more than 500 examples.
    To improve training efficiency and balance the dataset, we can limit the data
    to speakers with between 100 and 400 examples.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图显示，数据集中大约三分之一的发言者拥有少于100个示例，而大约有十位发言者拥有超过500个示例。为了提高训练效率并平衡数据集，我们可以将数据限制在具有100到400个示例之间的发言者。
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s check how many speakers remain:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查还剩下多少发言者：
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let’s see how many examples are left:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看还剩下多少示例：
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You are left with just under 10,000 examples from approximately 40 unique speakers,
    which should be sufficient.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在剩下大约40位独特发言者的不到10,000个示例，这应该足够了。
- en: Note that some speakers with few examples may actually have more audio available
    if the examples are long. However, determining the total amount of audio for each
    speaker requires scanning through the entire dataset, which is a time-consuming
    process that involves loading and decoding each audio file. As such, we have chosen
    to skip this step here.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一些示例较少的发言者实际上可能有更多的音频可用，如果示例很长。然而，确定每位发言者的总音频量需要扫描整个数据集，这是一个耗时的过程，涉及加载和解码每个音频文件。因此，我们选择跳过这一步骤。
- en: Speaker embeddings
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发言者嵌入
- en: To enable the TTS model to differentiate between multiple speakers, you’ll need
    to create a speaker embedding for each example. The speaker embedding is an additional
    input into the model that captures a particular speaker’s voice characteristics.
    To generate these speaker embeddings, use the pre-trained [spkrec-xvect-voxceleb](https://huggingface.co/speechbrain/spkrec-xvect-voxceleb)
    model from SpeechBrain.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使TTS模型能够区分多个发言者，您需要为每个示例创建一个发言者嵌入。发言者嵌入是模型的另一个输入，捕捉特定发言者的语音特征。为了生成这些发言者嵌入，使用SpeechBrain中的预训练[spkrec-xvect-voxceleb](https://huggingface.co/speechbrain/spkrec-xvect-voxceleb)模型。
- en: Create a function `create_speaker_embedding()` that takes an input audio waveform
    and outputs a 512-element vector containing the corresponding speaker embedding.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`create_speaker_embedding()`的函数，该函数接受输入音频波形，并输出一个包含相应发言者嵌入的512元素向量。
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It’s important to note that the `speechbrain/spkrec-xvect-voxceleb` model was
    trained on English speech from the VoxCeleb dataset, whereas the training examples
    in this guide are in Dutch. While we believe that this model will still generate
    reasonable speaker embeddings for our Dutch dataset, this assumption may not hold
    true in all cases.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: For optimal results, we recommend training an X-vector model on the target speech
    first. This will ensure that the model is better able to capture the unique voice
    characteristics present in the Dutch language.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Processing the dataset
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, let’s process the data into the format the model expects. Create a
    `prepare_dataset` function that takes in a single example and uses the `SpeechT5Processor`
    object to tokenize the input text and load the target audio into a log-mel spectrogram.
    It should also add the speaker embeddings as an additional input.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Verify the processing is correct by looking at a single example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Speaker embeddings should be a 512-element vector:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The labels should be a log-mel spectrogram with 80 mel bins.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Log-mel spectrogram with 80 mel bins](../Images/68b429200bca2c16fafb5b391302d4d7.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: 'Side note: If you find this spectrogram confusing, it may be due to your familiarity
    with the convention of placing low frequencies at the bottom and high frequencies
    at the top of a plot. However, when plotting spectrograms as an image using the
    matplotlib library, the y-axis is flipped and the spectrograms appear upside down.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Now apply the processing function to the entire dataset. This will take between
    5 and 10 minutes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You’ll see a warning saying that some examples in the dataset are longer than
    the maximum input length the model can handle (600 tokens). Remove those examples
    from the dataset. Here we go even further and to allow for larger batch sizes
    we remove anything over 200 tokens.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, create a basic train/test split:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Data collator
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to combine multiple examples into a batch, you need to define a custom
    data collator. This collator will pad shorter sequences with padding tokens, ensuring
    that all examples have the same length. For the spectrogram labels, the padded
    portions are replaced with the special value `-100`. This special value instructs
    the model to ignore that part of the spectrogram when calculating the spectrogram
    loss.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In SpeechT5, the input to the decoder part of the model is reduced by a factor
    2\. In other words, it throws away every other timestep from the target sequence.
    The decoder then predicts a sequence that is twice as long. Since the original
    target sequence length may be odd, the data collator makes sure to round the maximum
    length of the batch down to be a multiple of 2.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Train the model
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the pre-trained model from the same checkpoint as you used for loading
    the processor:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `use_cache=True` option is incompatible with gradient checkpointing. Disable
    it for training.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Define the training arguments. Here we are not computing any evaluation metrics
    during the training process. Instead, we’ll only look at the loss:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Instantiate the `Trainer` object and pass the model, dataset, and data collator
    to it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: And with that, you’re ready to start training! Training will take several hours.
    Depending on your GPU, it is possible that you will encounter a CUDA “out-of-memory”
    error when you start training. In this case, you can reduce the `per_device_train_batch_size`
    incrementally by factors of 2 and increase `gradient_accumulation_steps` by 2x
    to compensate.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To be able to use your checkpoint with a pipeline, make sure to save the processor
    with the checkpoint:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Push the final model to the 🤗 Hub:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Inference
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inference with a pipeline
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Great, now that you’ve fine-tuned a model, you can use it for inference! First,
    let’s see how you can use it with a corresponding pipeline. Let’s create a `"text-to-speech"`
    pipeline with your checkpoint:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Pick a piece of text in Dutch you’d like narrated, e.g.:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To use SpeechT5 with the pipeline, you’ll need a speaker embedding. Let’s get
    it from an example in the test dataset:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要在管道中使用SpeechT5，您需要一个说话者嵌入。让我们从测试数据集中的一个示例中获取它：
- en: '[PRE38]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now you can pass the text and speaker embeddings to the pipeline, and it will
    take care of the rest:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以将文本和说话者嵌入传递给管道，它会处理剩下的部分：
- en: '[PRE39]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You can then listen to the result:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您可以听结果：
- en: '[PRE40]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Run inference manually
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动运行推断
- en: You can achieve the same inference results without using the pipeline, however,
    more steps will be required.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在不使用管道的情况下实现相同的推断结果，但是需要更多的步骤。
- en: 'Load the model from the 🤗 Hub:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 从🤗 Hub加载模型：
- en: '[PRE41]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Pick an example from the test dataset obtain a speaker embedding.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从测试数据集中选择一个示例获取说话者嵌入。
- en: '[PRE42]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Define the input text and tokenize it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 定义输入文本并对其进行标记化。
- en: '[PRE43]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a spectrogram with your model:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的模型创建一个频谱图：
- en: '[PRE44]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Visualize the spectrogram, if you’d like to:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，可视化频谱图：
- en: '[PRE45]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![Generated log-mel spectrogram](../Images/8bcf491c8356ebfa61722c3c271cd0f7.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: ！[生成的对数梅尔频谱图]（../Images/8bcf491c8356ebfa61722c3c271cd0f7.png）
- en: Finally, use the vocoder to turn the spectrogram into sound.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用声码器将频谱图转换为声音。
- en: '[PRE46]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: In our experience, obtaining satisfactory results from this model can be challenging.
    The quality of the speaker embeddings appears to be a significant factor. Since
    SpeechT5 was pre-trained with English x-vectors, it performs best when using English
    speaker embeddings. If the synthesized speech sounds poor, try using a different
    speaker embedding.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的经验，从这个模型获得令人满意的结果可能具有挑战性。说话者嵌入的质量似乎是一个重要因素。由于SpeechT5是用英语x-vectors预训练的，因此在使用英语说话者嵌入时表现最佳。如果合成的语音听起来很差，尝试使用不同的说话者嵌入。
- en: Increasing the training duration is also likely to enhance the quality of the
    results. Even so, the speech clearly is Dutch instead of English, and it does
    capture the voice characteristics of the speaker (compare to the original audio
    in the example). Another thing to experiment with is the model’s configuration.
    For example, try using `config.reduction_factor = 1` to see if this improves the
    results.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 增加训练持续时间也可能会提高结果的质量。即使如此，语音明显是荷兰语而不是英语，并且它捕捉到说话者的声音特征（与示例中的原始音频进行比较）。另一个要尝试的是模型的配置。例如，尝试使用`config.reduction_factor
    = 1`，看看是否会改善结果。
- en: Finally, it is essential to consider ethical considerations. Although TTS technology
    has numerous useful applications, it may also be used for malicious purposes,
    such as impersonating someone’s voice without their knowledge or consent. Please
    use TTS judiciously and responsibly.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，重要的是考虑道德考量。尽管TTS技术有许多有用的应用，但也可能被用于恶意目的，例如未经他们的知识或同意冒充某人的声音。请明智和负责任地使用TTS。
