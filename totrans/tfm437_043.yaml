- en: Text to speech
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/text-to-speech](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/text-to-speech)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Text-to-speech (TTS) is the task of creating natural-sounding speech from text,
    where the speech can be generated in multiple languages and for multiple speakers.
    Several text-to-speech models are currently available in ü§ó Transformers, such
    as [Bark](../model_doc/bark), [MMS](../model_doc/mms), [VITS](../model_doc/vits)
    and [SpeechT5](../model_doc/speecht5).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily generate audio using the `"text-to-audio"` pipeline (or its
    alias - `"text-to-speech"`). Some models, like Bark, can also be conditioned to
    generate non-verbal communications such as laughing, sighing and crying, or even
    add music. Here‚Äôs an example of how you would use the `"text-to-speech"` pipeline
    with Bark:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here‚Äôs a code snippet you can use to listen to the resulting audio in a notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For more examples on what Bark and other pretrained TTS models can do, refer
    to our [Audio course](https://huggingface.co/learn/audio-course/chapter6/pre-trained_models).
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking to fine-tune a TTS model, the only text-to-speech models
    currently available in ü§ó Transformers are [SpeechT5](model_doc/speecht5) and [FastSpeech2Conformer](model_doc/fastspeech2_conformer),
    though more will be added in the future. SpeechT5 is pre-trained on a combination
    of speech-to-text and text-to-speech data, allowing it to learn a unified space
    of hidden representations shared by both text and speech. This means that the
    same pre-trained model can be fine-tuned for different tasks. Furthermore, SpeechT5
    supports multiple speakers through x-vector speaker embeddings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The remainder of this guide illustrates how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tune [SpeechT5](../model_doc/speecht5) that was originally trained on English
    speech on the Dutch (`nl`) language subset of the [VoxPopuli](https://huggingface.co/datasets/facebook/voxpopuli)
    dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use your refined model for inference in one of two ways: using a pipeline or
    directly.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Install ü§óTransformers from source as not all the SpeechT5 features have been
    merged into an official release yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To follow this guide you will need a GPU. If you‚Äôre working in a notebook,
    run the following line to check if a GPU is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'or alternatively for AMD GPUs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We encourage you to log in to your Hugging Face account to upload and share
    your model with the community. When prompted, enter your token to log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Load the dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[VoxPopuli](https://huggingface.co/datasets/facebook/voxpopuli) is a large-scale
    multilingual speech corpus consisting of data sourced from 2009-2020 European
    Parliament event recordings. It contains labelled audio-transcription data for
    15 European languages. In this guide, we are using the Dutch language subset,
    feel free to pick another subset.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that VoxPopuli or any other automated speech recognition (ASR) dataset
    may not be the most suitable option for training TTS models. The features that
    make it beneficial for ASR, such as excessive background noise, are typically
    undesirable in TTS. However, finding top-quality, multilingual, and multi-speaker
    TTS datasets can be quite challenging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs load the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '20968 examples should be sufficient for fine-tuning. SpeechT5 expects audio
    data to have a sampling rate of 16 kHz, so make sure the examples in the dataset
    meet this requirement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Preprocess the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let‚Äôs begin by defining the model checkpoint to use and loading the appropriate
    processor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Text cleanup for SpeechT5 tokenization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Start by cleaning up the text data. You‚Äôll need the tokenizer part of the processor
    to process the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The dataset examples contain `raw_text` and `normalized_text` features. When
    deciding which feature to use as the text input, consider that the SpeechT5 tokenizer
    doesn‚Äôt have any tokens for numbers. In `normalized_text` the numbers are written
    out as text. Thus, it is a better fit, and we recommend using `normalized_text`
    as input text.
  prefs: []
  type: TYPE_NORMAL
- en: Because SpeechT5 was trained on the English language, it may not recognize certain
    characters in the Dutch dataset. If left as is, these characters will be converted
    to `<unk>` tokens. However, in Dutch, certain characters like `√†` are used to
    stress syllables. In order to preserve the meaning of the text, we can replace
    this character with a regular `a`.
  prefs: []
  type: TYPE_NORMAL
- en: To identify unsupported tokens, extract all unique characters in the dataset
    using the `SpeechT5Tokenizer` which works with characters as tokens. To do this,
    write the `extract_all_chars` mapping function that concatenates the transcriptions
    from all examples into one string and converts it to a set of characters. Make
    sure to set `batched=True` and `batch_size=-1` in `dataset.map()` so that all
    transcriptions are available at once for the mapping function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you have two sets of characters: one with the vocabulary from the dataset
    and one with the vocabulary from the tokenizer. To identify any unsupported characters
    in the dataset, you can take the difference between these two sets. The resulting
    set will contain the characters that are in the dataset but not in the tokenizer.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To handle the unsupported characters identified in the previous step, define
    a function that maps these characters to valid tokens. Note that spaces are already
    replaced by `‚ñÅ` in the tokenizer and don‚Äôt need to be handled separately.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now that you have dealt with special characters in the text, it‚Äôs time to shift
    focus to the audio data.
  prefs: []
  type: TYPE_NORMAL
- en: Speakers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The VoxPopuli dataset includes speech from multiple speakers, but how many speakers
    are represented in the dataset? To determine this, we can count the number of
    unique speakers and the number of examples each speaker contributes to the dataset.
    With a total of 20,968 examples in the dataset, this information will give us
    a better understanding of the distribution of speakers and examples in the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: By plotting a histogram you can get a sense of how much data there is for each
    speaker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Speakers histogram](../Images/6da9c92a3752085ee6b533eafde281f1.png)'
  prefs: []
  type: TYPE_IMG
- en: The histogram reveals that approximately one-third of the speakers in the dataset
    have fewer than 100 examples, while around ten speakers have more than 500 examples.
    To improve training efficiency and balance the dataset, we can limit the data
    to speakers with between 100 and 400 examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let‚Äôs check how many speakers remain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let‚Äôs see how many examples are left:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You are left with just under 10,000 examples from approximately 40 unique speakers,
    which should be sufficient.
  prefs: []
  type: TYPE_NORMAL
- en: Note that some speakers with few examples may actually have more audio available
    if the examples are long. However, determining the total amount of audio for each
    speaker requires scanning through the entire dataset, which is a time-consuming
    process that involves loading and decoding each audio file. As such, we have chosen
    to skip this step here.
  prefs: []
  type: TYPE_NORMAL
- en: Speaker embeddings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To enable the TTS model to differentiate between multiple speakers, you‚Äôll need
    to create a speaker embedding for each example. The speaker embedding is an additional
    input into the model that captures a particular speaker‚Äôs voice characteristics.
    To generate these speaker embeddings, use the pre-trained [spkrec-xvect-voxceleb](https://huggingface.co/speechbrain/spkrec-xvect-voxceleb)
    model from SpeechBrain.
  prefs: []
  type: TYPE_NORMAL
- en: Create a function `create_speaker_embedding()` that takes an input audio waveform
    and outputs a 512-element vector containing the corresponding speaker embedding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It‚Äôs important to note that the `speechbrain/spkrec-xvect-voxceleb` model was
    trained on English speech from the VoxCeleb dataset, whereas the training examples
    in this guide are in Dutch. While we believe that this model will still generate
    reasonable speaker embeddings for our Dutch dataset, this assumption may not hold
    true in all cases.
  prefs: []
  type: TYPE_NORMAL
- en: For optimal results, we recommend training an X-vector model on the target speech
    first. This will ensure that the model is better able to capture the unique voice
    characteristics present in the Dutch language.
  prefs: []
  type: TYPE_NORMAL
- en: Processing the dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, let‚Äôs process the data into the format the model expects. Create a
    `prepare_dataset` function that takes in a single example and uses the `SpeechT5Processor`
    object to tokenize the input text and load the target audio into a log-mel spectrogram.
    It should also add the speaker embeddings as an additional input.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the processing is correct by looking at a single example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Speaker embeddings should be a 512-element vector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The labels should be a log-mel spectrogram with 80 mel bins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![Log-mel spectrogram with 80 mel bins](../Images/68b429200bca2c16fafb5b391302d4d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Side note: If you find this spectrogram confusing, it may be due to your familiarity
    with the convention of placing low frequencies at the bottom and high frequencies
    at the top of a plot. However, when plotting spectrograms as an image using the
    matplotlib library, the y-axis is flipped and the spectrograms appear upside down.'
  prefs: []
  type: TYPE_NORMAL
- en: Now apply the processing function to the entire dataset. This will take between
    5 and 10 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You‚Äôll see a warning saying that some examples in the dataset are longer than
    the maximum input length the model can handle (600 tokens). Remove those examples
    from the dataset. Here we go even further and to allow for larger batch sizes
    we remove anything over 200 tokens.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a basic train/test split:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Data collator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to combine multiple examples into a batch, you need to define a custom
    data collator. This collator will pad shorter sequences with padding tokens, ensuring
    that all examples have the same length. For the spectrogram labels, the padded
    portions are replaced with the special value `-100`. This special value instructs
    the model to ignore that part of the spectrogram when calculating the spectrogram
    loss.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In SpeechT5, the input to the decoder part of the model is reduced by a factor
    2\. In other words, it throws away every other timestep from the target sequence.
    The decoder then predicts a sequence that is twice as long. Since the original
    target sequence length may be odd, the data collator makes sure to round the maximum
    length of the batch down to be a multiple of 2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Train the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Load the pre-trained model from the same checkpoint as you used for loading
    the processor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `use_cache=True` option is incompatible with gradient checkpointing. Disable
    it for training.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the training arguments. Here we are not computing any evaluation metrics
    during the training process. Instead, we‚Äôll only look at the loss:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Instantiate the `Trainer` object and pass the model, dataset, and data collator
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: And with that, you‚Äôre ready to start training! Training will take several hours.
    Depending on your GPU, it is possible that you will encounter a CUDA ‚Äúout-of-memory‚Äù
    error when you start training. In this case, you can reduce the `per_device_train_batch_size`
    incrementally by factors of 2 and increase `gradient_accumulation_steps` by 2x
    to compensate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To be able to use your checkpoint with a pipeline, make sure to save the processor
    with the checkpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Push the final model to the ü§ó Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Inference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inference with a pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Great, now that you‚Äôve fine-tuned a model, you can use it for inference! First,
    let‚Äôs see how you can use it with a corresponding pipeline. Let‚Äôs create a `"text-to-speech"`
    pipeline with your checkpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Pick a piece of text in Dutch you‚Äôd like narrated, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To use SpeechT5 with the pipeline, you‚Äôll need a speaker embedding. Let‚Äôs get
    it from an example in the test dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can pass the text and speaker embeddings to the pipeline, and it will
    take care of the rest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then listen to the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Run inference manually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can achieve the same inference results without using the pipeline, however,
    more steps will be required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the model from the ü§ó Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Pick an example from the test dataset obtain a speaker embedding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Define the input text and tokenize it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a spectrogram with your model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Visualize the spectrogram, if you‚Äôd like to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '![Generated log-mel spectrogram](../Images/8bcf491c8356ebfa61722c3c271cd0f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, use the vocoder to turn the spectrogram into sound.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In our experience, obtaining satisfactory results from this model can be challenging.
    The quality of the speaker embeddings appears to be a significant factor. Since
    SpeechT5 was pre-trained with English x-vectors, it performs best when using English
    speaker embeddings. If the synthesized speech sounds poor, try using a different
    speaker embedding.
  prefs: []
  type: TYPE_NORMAL
- en: Increasing the training duration is also likely to enhance the quality of the
    results. Even so, the speech clearly is Dutch instead of English, and it does
    capture the voice characteristics of the speaker (compare to the original audio
    in the example). Another thing to experiment with is the model‚Äôs configuration.
    For example, try using `config.reduction_factor = 1` to see if this improves the
    results.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it is essential to consider ethical considerations. Although TTS technology
    has numerous useful applications, it may also be used for malicious purposes,
    such as impersonating someone‚Äôs voice without their knowledge or consent. Please
    use TTS judiciously and responsibly.
  prefs: []
  type: TYPE_NORMAL
