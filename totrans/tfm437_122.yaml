- en: Processors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/processors](https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/processors)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: 'Processors can mean two different things in the Transformers library:'
  prefs: []
  type: TYPE_NORMAL
- en: the objects that pre-process inputs for multi-modal models such as [Wav2Vec2](../model_doc/wav2vec2)
    (speech and text) or [CLIP](../model_doc/clip) (text and vision)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deprecated objects that were used in older versions of the library to preprocess
    data for GLUE or SQUAD.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-modal processors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any multi-modal model will require an object to encode or decode the data that
    groups several modalities (among text, vision and audio). This is handled by objects
    called processors, which group together two or more processing objects such as
    tokenizers (for the text modality), image processors (for vision) and feature
    extractors (for audio).
  prefs: []
  type: TYPE_NORMAL
- en: 'Those processors inherit from the following base class that implements the
    saving and loading functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '### `class transformers.ProcessorMixin`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L56)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is a mixin used to provide saving/loading functionality for all processor
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_args_and_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L365)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`processor_dict` (`Dict[str, Any]`) â€” Dictionary that will be used to instantiate
    the processor object. Such a dictionary can be retrieved from a pretrained checkpoint
    by leveraging the `~processing_utils.ProcessingMixin.to_dict` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`) â€” Additional parameters from which to initialize
    the processor object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`~processing_utils.ProcessingMixin`'
  prefs: []
  type: TYPE_NORMAL
- en: The processor object instantiated from those parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates a type of `~processing_utils.ProcessingMixin` from a Python dictionary
    of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_pretrained`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L406)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pretrained_model_name_or_path` (`str` or `os.PathLike`) â€” This can be either:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a string, the *model id* of a pretrained feature_extractor hosted inside a model
    repo on huggingface.co. Valid model ids can be located at the root-level, like
    `bert-base-uncased`, or namespaced under a user or organization name, like `dbmdz/bert-base-german-cased`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a path to a *directory* containing a feature extractor file saved using the
    [save_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained)
    method, e.g., `./my_model_directory/`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a path or url to a saved feature extractor JSON *file*, e.g., `./my_model_directory/preprocessor_config.json`.
    **kwargs â€” Additional keyword arguments passed along to both [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained)
    and `~tokenization_utils_base.PreTrainedTokenizer.from_pretrained`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantiate a processor associated with a pretrained model.
  prefs: []
  type: TYPE_NORMAL
- en: This class method is simply calling the feature extractor [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained),
    image processor [ImageProcessingMixin](/docs/transformers/v4.37.2/en/internal/image_processing_utils#transformers.ImageProcessingMixin)
    and the tokenizer `~tokenization_utils_base.PreTrainedTokenizer.from_pretrained`
    methods. Please refer to the docstrings of the methods above for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_processor_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L256)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pretrained_model_name_or_path` (`str` or `os.PathLike`) â€” The identifier of
    the pre-trained checkpoint from which we want the dictionary of parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subfolder` (`str`, *optional*, defaults to `""`) â€” In case the relevant files
    are located inside a subfolder of the model repo on huggingface.co, you can specify
    the folder name here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Tuple[Dict, Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary(ies) that will be used to instantiate the processor object.
  prefs: []
  type: TYPE_NORMAL
- en: From a `pretrained_model_name_or_path`, resolve to a dictionary of parameters,
    to be used for instantiating a processor of type `~processing_utils.ProcessingMixin`
    using `from_args_and_dict`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `push_to_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/utils/hub.py#L755)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) â€” The name of the repository you want to push your processor
    to. It should contain your organization name when pushing to a given organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_temp_dir` (`bool`, *optional*) â€” Whether or not to use a temporary directory
    to store the files saved before they are pushed to the Hub. Will default to `True`
    if there is no directory named like `repo_id`, `False` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*) â€” Message to commit while pushing. Will
    default to `"Upload processor"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*) â€” Whether or not the repository created should
    be private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) â€” The token to use as HTTP bearer authorization
    for remote files. If `True`, will use the token generated when running `huggingface-cli
    login` (stored in `~/.huggingface`). Will default to `True` if `repo_url` is not
    specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_shard_size` (`int` or `str`, *optional*, defaults to `"5GB"`) â€” Only applicable
    for models. The maximum size for a checkpoint before being sharded. Checkpoints
    shard will then be each of size lower than this size. If expressed as a string,
    needs to be digits followed by a unit (like `"5MB"`). We default it to `"5GB"`
    so that users can easily load models on free-tier Google Colab instances without
    any CPU OOM issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`bool`, *optional*, defaults to `False`) â€” Whether or not to create
    a PR with the uploaded files or directly commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe_serialization` (`bool`, *optional*, defaults to `True`) â€” Whether or
    not to convert the model weights in safetensors format for safer serialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) â€” Branch to push the uploaded files to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str`, *optional*) â€” The description of the commit that
    will be created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (`List[str]`, *optional*) â€” List of tags to push on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload the processor files to the ðŸ¤— Model Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '#### `register_for_auto_class`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L471)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`auto_class` (`str` or `type`, *optional*, defaults to `"AutoProcessor"`) â€”
    The auto class to register this new feature extractor with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Register this class with a given auto class. This should only be used for custom
    feature extractors as the ones in the library are already mapped with `AutoProcessor`.
  prefs: []
  type: TYPE_NORMAL
- en: This API is experimental and may have some slight breaking changes in the next
    releases.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `save_pretrained`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L167)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`save_directory` (`str` or `os.PathLike`) â€” Directory where the feature extractor
    JSON file and the tokenizer files will be saved (directory will be created if
    it does not exist).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push_to_hub` (`bool`, *optional*, defaults to `False`) â€” Whether or not to
    push your model to the Hugging Face model hub after saving it. You can specify
    the repository you want to push to with `repo_id` (will default to the name of
    `save_directory` in your namespace).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`, *optional*) â€” Additional key word arguments passed
    along to the [push_to_hub()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.push_to_hub)
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saves the attributes of this processor (feature extractor, tokenizerâ€¦) in the
    specified directory so that it can be reloaded using the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.ProcessorMixin.from_pretrained)
    method.
  prefs: []
  type: TYPE_NORMAL
- en: This class method is simply calling [save_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained)
    and [save_pretrained()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained).
    Please refer to the docstrings of the methods above for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L102)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Dict[str, Any]`'
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary of all the attributes that make up this processor instance.
  prefs: []
  type: TYPE_NORMAL
- en: Serializes this instance to a Python dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_json_file`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L151)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`json_file_path` (`str` or `os.PathLike`) â€” Path to the JSON file in which
    this processor instanceâ€™s parameters will be saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save this instance to a JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_json_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L140)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: String containing all the attributes that make up this feature_extractor instance
    in JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: Serializes this instance to a JSON string.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated processors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All processors follow the same architecture which is that of the [DataProcessor](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.DataProcessor).
    The processor returns a list of [InputExample](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.InputExample).
    These [InputExample](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.InputExample)
    can be converted to [InputFeatures](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.InputFeatures)
    in order to be fed to the model.
  prefs: []
  type: TYPE_NORMAL
- en: '### `class transformers.DataProcessor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L80)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Base class for data converters for sequence classification data sets.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_dev_examples`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L97)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Gets a collection of [InputExample](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.InputExample)
    for the dev set.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_example_from_tensor_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L83)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Gets an example from a dict with tensorflow tensors.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_labels`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L105)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Gets the list of labels for this data set.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_test_examples`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L101)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Gets a collection of [InputExample](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.InputExample)
    for the test set.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_train_examples`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L93)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Gets a collection of [InputExample](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.InputExample)
    for the train set.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `tfds_map`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L109)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Some tensorflow_datasets datasets are not formatted the same way the GLUE datasets
    are. This method converts examples to the correct format.
  prefs: []
  type: TYPE_NORMAL
- en: '### `class transformers.InputExample`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: A single training/test example for simple sequence classification.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_json_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L49)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Serializes this instance to a JSON string.
  prefs: []
  type: TYPE_NORMAL
- en: '### `class transformers.InputFeatures`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L54)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A single set of features of data. Property names are the same names as the corresponding
    inputs to a model.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_json_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/utils.py#L75)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Serializes this instance to a JSON string.
  prefs: []
  type: TYPE_NORMAL
- en: GLUE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[General Language Understanding Evaluation (GLUE)](https://gluebenchmark.com/)
    is a benchmark that evaluates the performance of models across a diverse set of
    existing NLU tasks. It was released together with the paper [GLUE: A multi-task
    benchmark and analysis platform for natural language understanding](https://openreview.net/pdf?id=rJ4km2R5t7)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This library hosts a total of 10 processors for the following tasks: MRPC,
    MNLI, MNLI (mismatched), CoLA, SST2, STSB, QQP, QNLI, RTE and WNLI.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Those processors are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`~data.processors.utils.MrpcProcessor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~data.processors.utils.MnliProcessor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~data.processors.utils.MnliMismatchedProcessor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~data.processors.utils.Sst2Processor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~data.processors.utils.StsbProcessor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~data.processors.utils.QqpProcessor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~data.processors.utils.QnliProcessor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~data.processors.utils.RteProcessor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~data.processors.utils.WnliProcessor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, the following method can be used to load values from a data file
    and convert them to a list of [InputExample](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.InputExample).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `transformers.glue_convert_examples_to_features`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/glue.py#L41)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Loads a data file into a list of `InputFeatures`
  prefs: []
  type: TYPE_NORMAL
- en: XNLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[The Cross-Lingual NLI Corpus (XNLI)](https://www.nyu.edu/projects/bowman/xnli/)
    is a benchmark that evaluates the quality of cross-lingual text representations.
    XNLI is crowd-sourced dataset based on [*MultiNLI*](http://www.nyu.edu/projects/bowman/multinli/):
    pairs of text are labeled with textual entailment annotations for 15 different
    languages (including both high-resource language such as English and low-resource
    languages such as Swahili).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It was released together with the paper [XNLI: Evaluating Cross-lingual Sentence
    Representations](https://arxiv.org/abs/1809.05053)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This library hosts the processor to load the XNLI data:'
  prefs: []
  type: TYPE_NORMAL
- en: '`~data.processors.utils.XnliProcessor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please note that since the gold labels are available on the test set, evaluation
    is performed on the test set.
  prefs: []
  type: TYPE_NORMAL
- en: An example using these processors is given in the [run_xnli.py](https://github.com/huggingface/transformers/tree/main/examples/pytorch/text-classification/run_xnli.py)
    script.
  prefs: []
  type: TYPE_NORMAL
- en: SQuAD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[The Stanford Question Answering Dataset (SQuAD)](https://rajpurkar.github.io/SQuAD-explorer//)
    is a benchmark that evaluates the performance of models on question answering.
    Two versions are available, v1.1 and v2.0\. The first version (v1.1) was released
    together with the paper [SQuAD: 100,000+ Questions for Machine Comprehension of
    Text](https://arxiv.org/abs/1606.05250). The second version (v2.0) was released
    alongside the paper [Know What You Donâ€™t Know: Unanswerable Questions for SQuAD](https://arxiv.org/abs/1806.03822).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This library hosts a processor for each of the two versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Processors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Those processors are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`~data.processors.utils.SquadV1Processor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`~data.processors.utils.SquadV2Processor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They both inherit from the abstract class `~data.processors.utils.SquadProcessor`
  prefs: []
  type: TYPE_NORMAL
- en: '### `class transformers.data.processors.squad.SquadProcessor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/squad.py#L541)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Processor for the SQuAD data set. overridden by SquadV1Processor and SquadV2Processor,
    used by the version 1.1 and version 2.0 of SQuAD, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_dev_examples`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/squad.py#L629)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Returns the evaluation example from the data directory.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_examples_from_dataset`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/squad.py#L574)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Creates a list of `SquadExample` using a TFDS dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '#### `get_train_examples`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/squad.py#L607)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Returns the training examples from the data directory.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the following method can be used to convert SQuAD examples into
    `~data.processors.utils.SquadFeatures` that can be used as model inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `transformers.squad_convert_examples_to_features`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/data/processors/squad.py#L316)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Converts a list of examples into a list of features that can be directly given
    as input to a model. It is model-dependant and takes advantage of many of the
    tokenizerâ€™s features to create the modelâ€™s inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: These processors as well as the aforementioned method can be used with files
    containing the data as well as with the *tensorflow_datasets* package. Examples
    are given below.
  prefs: []
  type: TYPE_NORMAL
- en: Example usage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is an example using the processors as well as the conversion method using
    data files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Using *tensorflow_datasets* is as easy as using a data file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Another example using these processors is given in the [run_squad.py](https://github.com/huggingface/transformers/tree/main/examples/legacy/question-answering/run_squad.py)
    script.
  prefs: []
  type: TYPE_NORMAL
