["```py\n>>> from transformers import LayoutLMv3Config, LayoutLMv3Model\n\n>>> # Initializing a LayoutLMv3 microsoft/layoutlmv3-base style configuration\n>>> configuration = LayoutLMv3Config()\n\n>>> # Initializing a model (with random weights) from the microsoft/layoutlmv3-base style configuration\n>>> model = LayoutLMv3Model(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoProcessor, AutoModel\n>>> from datasets import load_dataset\n\n>>> processor = AutoProcessor.from_pretrained(\"microsoft/layoutlmv3-base\", apply_ocr=False)\n>>> model = AutoModel.from_pretrained(\"microsoft/layoutlmv3-base\")\n\n>>> dataset = load_dataset(\"nielsr/funsd-layoutlmv3\", split=\"train\")\n>>> example = dataset[0]\n>>> image = example[\"image\"]\n>>> words = example[\"tokens\"]\n>>> boxes = example[\"bboxes\"]\n\n>>> encoding = processor(image, words, boxes=boxes, return_tensors=\"pt\")\n\n>>> outputs = model(**encoding)\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoProcessor, AutoModelForSequenceClassification\n>>> from datasets import load_dataset\n>>> import torch\n\n>>> processor = AutoProcessor.from_pretrained(\"microsoft/layoutlmv3-base\", apply_ocr=False)\n>>> model = AutoModelForSequenceClassification.from_pretrained(\"microsoft/layoutlmv3-base\")\n\n>>> dataset = load_dataset(\"nielsr/funsd-layoutlmv3\", split=\"train\")\n>>> example = dataset[0]\n>>> image = example[\"image\"]\n>>> words = example[\"tokens\"]\n>>> boxes = example[\"bboxes\"]\n\n>>> encoding = processor(image, words, boxes=boxes, return_tensors=\"pt\")\n>>> sequence_label = torch.tensor([1])\n\n>>> outputs = model(**encoding, labels=sequence_label)\n>>> loss = outputs.loss\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoProcessor, AutoModelForTokenClassification\n>>> from datasets import load_dataset\n\n>>> processor = AutoProcessor.from_pretrained(\"microsoft/layoutlmv3-base\", apply_ocr=False)\n>>> model = AutoModelForTokenClassification.from_pretrained(\"microsoft/layoutlmv3-base\", num_labels=7)\n\n>>> dataset = load_dataset(\"nielsr/funsd-layoutlmv3\", split=\"train\")\n>>> example = dataset[0]\n>>> image = example[\"image\"]\n>>> words = example[\"tokens\"]\n>>> boxes = example[\"bboxes\"]\n>>> word_labels = example[\"ner_tags\"]\n\n>>> encoding = processor(image, words, boxes=boxes, word_labels=word_labels, return_tensors=\"pt\")\n\n>>> outputs = model(**encoding)\n>>> loss = outputs.loss\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoProcessor, AutoModelForQuestionAnswering\n>>> from datasets import load_dataset\n>>> import torch\n\n>>> processor = AutoProcessor.from_pretrained(\"microsoft/layoutlmv3-base\", apply_ocr=False)\n>>> model = AutoModelForQuestionAnswering.from_pretrained(\"microsoft/layoutlmv3-base\")\n\n>>> dataset = load_dataset(\"nielsr/funsd-layoutlmv3\", split=\"train\")\n>>> example = dataset[0]\n>>> image = example[\"image\"]\n>>> question = \"what's his name?\"\n>>> words = example[\"tokens\"]\n>>> boxes = example[\"bboxes\"]\n\n>>> encoding = processor(image, question, words, boxes=boxes, return_tensors=\"pt\")\n>>> start_positions = torch.tensor([1])\n>>> end_positions = torch.tensor([3])\n\n>>> outputs = model(**encoding, start_positions=start_positions, end_positions=end_positions)\n>>> loss = outputs.loss\n>>> start_scores = outputs.start_logits\n>>> end_scores = outputs.end_logits\n```", "```py\n>>> from transformers import AutoProcessor, TFAutoModel\n>>> from datasets import load_dataset\n\n>>> processor = AutoProcessor.from_pretrained(\"microsoft/layoutlmv3-base\", apply_ocr=False)\n>>> model = TFAutoModel.from_pretrained(\"microsoft/layoutlmv3-base\")\n\n>>> dataset = load_dataset(\"nielsr/funsd-layoutlmv3\", split=\"train\")\n>>> example = dataset[0]\n>>> image = example[\"image\"]\n>>> words = example[\"tokens\"]\n>>> boxes = example[\"bboxes\"]\n\n>>> encoding = processor(image, words, boxes=boxes, return_tensors=\"tf\")\n\n>>> outputs = model(**encoding)\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoProcessor, TFAutoModelForSequenceClassification\n>>> from datasets import load_dataset\n>>> import tensorflow as tf\n\n>>> processor = AutoProcessor.from_pretrained(\"microsoft/layoutlmv3-base\", apply_ocr=False)\n>>> model = TFAutoModelForSequenceClassification.from_pretrained(\"microsoft/layoutlmv3-base\")\n\n>>> dataset = load_dataset(\"nielsr/funsd-layoutlmv3\", split=\"train\")\n>>> example = dataset[0]\n>>> image = example[\"image\"]\n>>> words = example[\"tokens\"]\n>>> boxes = example[\"bboxes\"]\n\n>>> encoding = processor(image, words, boxes=boxes, return_tensors=\"tf\")\n>>> sequence_label = tf.convert_to_tensor([1])\n\n>>> outputs = model(**encoding, labels=sequence_label)\n>>> loss = outputs.loss\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoProcessor, TFAutoModelForTokenClassification\n>>> from datasets import load_dataset\n\n>>> processor = AutoProcessor.from_pretrained(\"microsoft/layoutlmv3-base\", apply_ocr=False)\n>>> model = TFAutoModelForTokenClassification.from_pretrained(\"microsoft/layoutlmv3-base\", num_labels=7)\n\n>>> dataset = load_dataset(\"nielsr/funsd-layoutlmv3\", split=\"train\")\n>>> example = dataset[0]\n>>> image = example[\"image\"]\n>>> words = example[\"tokens\"]\n>>> boxes = example[\"bboxes\"]\n>>> word_labels = example[\"ner_tags\"]\n\n>>> encoding = processor(image, words, boxes=boxes, word_labels=word_labels, return_tensors=\"tf\")\n\n>>> outputs = model(**encoding)\n>>> loss = outputs.loss\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoProcessor, TFAutoModelForQuestionAnswering\n>>> from datasets import load_dataset\n>>> import tensorflow as tf\n\n>>> processor = AutoProcessor.from_pretrained(\"microsoft/layoutlmv3-base\", apply_ocr=False)\n>>> model = TFAutoModelForQuestionAnswering.from_pretrained(\"microsoft/layoutlmv3-base\")\n\n>>> dataset = load_dataset(\"nielsr/funsd-layoutlmv3\", split=\"train\")\n>>> example = dataset[0]\n>>> image = example[\"image\"]\n>>> question = \"what's his name?\"\n>>> words = example[\"tokens\"]\n>>> boxes = example[\"bboxes\"]\n\n>>> encoding = processor(image, question, words, boxes=boxes, return_tensors=\"tf\")\n>>> start_positions = tf.convert_to_tensor([1])\n>>> end_positions = tf.convert_to_tensor([3])\n\n>>> outputs = model(**encoding, start_positions=start_positions, end_positions=end_positions)\n>>> loss = outputs.loss\n>>> start_scores = outputs.start_logits\n>>> end_scores = outputs.end_logits\n```"]