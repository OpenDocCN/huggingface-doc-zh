- en: DreamBooth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/training/dreambooth](https://huggingface.co/docs/diffusers/training/dreambooth)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: '[DreamBooth](https://huggingface.co/papers/2208.12242) is a training technique
    that updates the entire diffusion model by training on just a few images of a
    subject or style. It works by associating a special word in the prompt with the
    example images.'
  prefs: []
  type: TYPE_NORMAL
- en: If youâ€™re training on a GPU with limited vRAM, you should try enabling the `gradient_checkpointing`
    and `mixed_precision` parameters in the training command. You can also reduce
    your memory footprint by using memory-efficient attention with [xFormers](../optimization/xformers).
    JAX/Flax training is also supported for efficient training on TPUs and GPUs, but
    it doesnâ€™t support gradient checkpointing or xFormers. You should have a GPU with
    >30GB of memory if you want to train faster with Flax.
  prefs: []
  type: TYPE_NORMAL
- en: This guide will explore the [train_dreambooth.py](https://github.com/huggingface/diffusers/blob/main/examples/dreambooth/train_dreambooth.py)
    script to help you become more familiar with it, and how you can adapt it for
    your own use-case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the script, make sure you install the library from source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the example folder with the training script and install the required
    dependencies for the script youâ€™re using:'
  prefs: []
  type: TYPE_NORMAL
- en: PyTorchFlax
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: ðŸ¤— Accelerate is a library for helping you train on multiple GPUs/TPUs or with
    mixed-precision. Itâ€™ll automatically configure your training setup based on your
    hardware and environment. Take a look at the ðŸ¤— Accelerate [Quick tour](https://huggingface.co/docs/accelerate/quicktour)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize an ðŸ¤— Accelerate environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To setup a default ðŸ¤— Accelerate environment without choosing any configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or if your environment doesnâ€™t support an interactive shell, like a notebook,
    you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, if you want to train a model on your own dataset, take a look at the
    [Create a dataset for training](create_dataset) guide to learn how to create a
    dataset that works with the training script.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections highlight parts of the training script that are important
    for understanding how to modify it, but it doesnâ€™t cover every aspect of the script
    in detail. If youâ€™re interested in learning more, feel free to read through the
    [script](https://github.com/huggingface/diffusers/blob/main/examples/dreambooth/train_dreambooth.py)
    and let us know if you have any questions or concerns.
  prefs: []
  type: TYPE_NORMAL
- en: Script parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DreamBooth is very sensitive to training hyperparameters, and it is easy to
    overfit. Read the [Training Stable Diffusion with Dreambooth using ðŸ§¨ Diffusers](https://huggingface.co/blog/dreambooth)
    blog post for recommended settings for different subjects to help you choose the
    appropriate hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: The training script offers many parameters for customizing your training run.
    All of the parameters and their descriptions are found in the [`parse_args()`](https://github.com/huggingface/diffusers/blob/072e00897a7cf4302c347a63ec917b4b8add16d4/examples/dreambooth/train_dreambooth.py#L228)
    function. The parameters are set with default values that should work pretty well
    out-of-the-box, but you can also set your own values in the training command if
    youâ€™d like.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to train in the bf16 format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Some basic and important parameters to know and specify are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--pretrained_model_name_or_path`: the name of the model on the Hub or a local
    path to the pretrained model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--instance_data_dir`: path to a folder containing the training dataset (example
    images)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--instance_prompt`: the text prompt that contains the special word for the
    example images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--train_text_encoder`: whether to also train the text encoder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--output_dir`: where to save the trained model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--push_to_hub`: whether to push the trained model to the Hub'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--checkpointing_steps`: frequency of saving a checkpoint as the model trains;
    this is useful if for some reason training is interrupted, you can continue training
    from that checkpoint by adding `--resume_from_checkpoint` to your training command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Min-SNR weighting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [Min-SNR](https://huggingface.co/papers/2303.09556) weighting strategy can
    help with training by rebalancing the loss to achieve faster convergence. The
    training script supports predicting `epsilon` (noise) or `v_prediction`, but Min-SNR
    is compatible with both prediction types. This weighting strategy is only supported
    by PyTorch and is unavailable in the Flax training script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `--snr_gamma` parameter and set it to the recommended value of 5.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Prior preservation loss
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prior preservation loss is a method that uses a modelâ€™s own generated samples
    to help it learn how to generate more diverse images. Because these generated
    sample images belong to the same class as the images you provided, they help the
    model retain what it has learned about the class and how it can use what it already
    knows about the class to make new compositions.
  prefs: []
  type: TYPE_NORMAL
- en: '`--with_prior_preservation`: whether to use prior preservation loss'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--prior_loss_weight`: controls the influence of the prior preservation loss
    on the model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--class_data_dir`: path to a folder containing the generated class sample
    images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--class_prompt`: the text prompt describing the class of the generated sample
    images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Train text encoder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To improve the quality of the generated outputs, you can also train the text
    encoder in addition to the UNet. This requires additional memory and youâ€™ll need
    a GPU with at least 24GB of vRAM. If you have the necessary hardware, then training
    the text encoder produces better results, especially when generating images of
    faces. Enable this option by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Training script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'DreamBooth comes with its own dataset classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`DreamBoothDataset`](https://github.com/huggingface/diffusers/blob/072e00897a7cf4302c347a63ec917b4b8add16d4/examples/dreambooth/train_dreambooth.py#L604):
    preprocesses the images and class images, and tokenizes the prompts for training'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`PromptDataset`](https://github.com/huggingface/diffusers/blob/072e00897a7cf4302c347a63ec917b4b8add16d4/examples/dreambooth/train_dreambooth.py#L738):
    generates the prompt embeddings to generate the class images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you enabled [prior preservation loss](https://github.com/huggingface/diffusers/blob/072e00897a7cf4302c347a63ec917b4b8add16d4/examples/dreambooth/train_dreambooth.py#L842),
    the class images are generated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next is the [`main()`](https://github.com/huggingface/diffusers/blob/072e00897a7cf4302c347a63ec917b4b8add16d4/examples/dreambooth/train_dreambooth.py#L799)
    function which handles setting up the dataset for training and the training loop
    itself. The script loads the [tokenizer](https://github.com/huggingface/diffusers/blob/072e00897a7cf4302c347a63ec917b4b8add16d4/examples/dreambooth/train_dreambooth.py#L898),
    [scheduler and models](https://github.com/huggingface/diffusers/blob/072e00897a7cf4302c347a63ec917b4b8add16d4/examples/dreambooth/train_dreambooth.py#L912C1-L912C1):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, itâ€™s time to [create the training dataset](https://github.com/huggingface/diffusers/blob/072e00897a7cf4302c347a63ec917b4b8add16d4/examples/dreambooth/train_dreambooth.py#L1073)
    and DataLoader from `DreamBoothDataset`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, the [training loop](https://github.com/huggingface/diffusers/blob/072e00897a7cf4302c347a63ec917b4b8add16d4/examples/dreambooth/train_dreambooth.py#L1151)
    takes care of the remaining steps such as converting images to latent space, adding
    noise to the input, predicting the noise residual, and calculating the loss.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about how the training loop works, check out the [Understanding
    pipelines, models and schedulers](../using-diffusers/write_own_pipeline) tutorial
    which breaks down the basic pattern of the denoising process.
  prefs: []
  type: TYPE_NORMAL
- en: Launch the script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Youâ€™re now ready to launch the training script! ðŸš€
  prefs: []
  type: TYPE_NORMAL
- en: For this guide, youâ€™ll download some images of a [dog](https://huggingface.co/datasets/diffusers/dog-example)
    and store them in a directory. But remember, you can create and use your own dataset
    if you want (see the [Create a dataset for training](create_dataset) guide).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Set the environment variable `MODEL_NAME` to a model id on the Hub or a path
    to a local model, `INSTANCE_DIR` to the path where you just downloaded the dog
    images to, and `OUTPUT_DIR` to where you want to save the model. Youâ€™ll use `sks`
    as the special word to tie the training to.
  prefs: []
  type: TYPE_NORMAL
- en: 'If youâ€™re interested in following along with the training process, you can
    periodically save generated images as training progresses. Add the following parameters
    to the training command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: One more thing before you launch the script! Depending on the GPU you have,
    you may need to enable certain optimizations to train DreamBooth.
  prefs: []
  type: TYPE_NORMAL
- en: 16GB12GB8GB
  prefs: []
  type: TYPE_NORMAL
- en: 'On a 16GB GPU, you can use bitsandbytes 8-bit optimizer and gradient checkpointing
    to help you train a DreamBooth model. Install bitsandbytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following parameter to your training command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: PyTorchFlax
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Once training is complete, you can use your newly trained model for inference!
  prefs: []
  type: TYPE_NORMAL
- en: Canâ€™t wait to try your model for inference before training is complete? ðŸ¤­ Make
    sure you have the latest version of ðŸ¤— Accelerate installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: PyTorchFlax
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: LoRA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LoRA is a training technique for significantly reducing the number of trainable
    parameters. As a result, training is faster and it is easier to store the resulting
    weights because they are a lot smaller (~100MBs). Use the [train_dreambooth_lora.py](https://github.com/huggingface/diffusers/blob/main/examples/dreambooth/train_dreambooth_lora.py)
    script to train with LoRA.
  prefs: []
  type: TYPE_NORMAL
- en: The LoRA training script is discussed in more detail in the [LoRA training](lora)
    guide.
  prefs: []
  type: TYPE_NORMAL
- en: Stable Diffusion XL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Stable Diffusion XL (SDXL) is a powerful text-to-image model that generates
    high-resolution images, and it adds a second text-encoder to its architecture.
    Use the [train_dreambooth_lora_sdxl.py](https://github.com/huggingface/diffusers/blob/main/examples/dreambooth/train_dreambooth_lora_sdxl.py)
    script to train a SDXL model with LoRA.
  prefs: []
  type: TYPE_NORMAL
- en: The SDXL training script is discussed in more detail in the [SDXL training](sdxl)
    guide.
  prefs: []
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Congratulations on training your DreamBooth model! To learn more about how
    to use your new model, the following guide may be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to [load a DreamBooth](../using-diffusers/loading_adapters) model
    for inference if you trained your model with LoRA.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
