["```py\n>>> from transformers import AutoImageProcessor, AutoBackbone\n>>> import torch\n>>> from PIL import Image\n>>> import requests\n\n>>> processor = AutoImageProcessor.from_pretrained(\"microsoft/swin-tiny-patch4-window7-224\")\n>>> model = AutoBackbone.from_pretrained(\"microsoft/swin-tiny-patch4-window7-224\", out_indices=(0,1,2))\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> inputs = processor(image, return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n>>> feature_maps = outputs.feature_maps\n```", "```py\n>>> list(feature_maps[0].shape)\n[1, 96, 56, 56]\n```", "```py\n>>> list(feature_maps[1].shape)\n[1, 96, 56, 56]\n>>> list(feature_maps[2].shape)\n[1, 192, 28, 28]\n```", "```py\nfrom transformers import MaskFormerConfig, MaskFormerForInstanceSegmentation, ResNetConfig\n\nbackbone_config = ResNetConfig.from_pretrained(\"microsoft/resnet-50\")\nconfig = MaskFormerConfig(backbone_config=backbone_config)\nmodel = MaskFormerForInstanceSegmentation(config)\n```", "```py\nbackbone_config = ResNetConfig()\nconfig = MaskFormerConfig(backbone_config=backbone_config)\nmodel = MaskFormerForInstanceSegmentation(config)\n```", "```py\nfrom transformers import TimmBackboneConfig, TimmBackbone\n\nbackbone_config = TimmBackboneConfig(\"resnet50\")\nmodel = TimmBackbone(config=backbone_config)\n```"]