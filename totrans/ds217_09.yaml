- en: Preprocess
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/datasets/use_dataset](https://huggingface.co/docs/datasets/use_dataset)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/datasets/v2.17.0/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/entry/start.146395b0.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/scheduler.bdbef820.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/singletons.98dc5b8b.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/index.8a885b74.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/paths.a483fec8.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/entry/app.e612c4fb.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/index.c0aea24a.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/nodes/0.5e8dbda6.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/nodes/51.b0ceaff2.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/Tip.31005f7d.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/CodeBlock.6ccca92e.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/Markdown.1f17db59.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/IconTensorflow.bdd96fa9.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/Heading.2eb892cb.js">
  prefs: []
  type: TYPE_NORMAL
- en: In addition to loading datasets, ðŸ¤— Datasets other main goal is to offer a diverse
    set of preprocessing functions to get a dataset into an appropriate format for
    training with your machine learning framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many possible ways to preprocess a dataset, and it all depends on
    your specific dataset. Sometimes you may need to rename a column, and other times
    you might need to unflatten nested fields. ðŸ¤— Datasets provides a way to do most
    of these things. But in nearly all preprocessing cases, depending on your dataset
    modality, youâ€™ll need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Tokenize a text dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resample an audio dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply transforms to an image dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last preprocessing step is usually setting your dataset format to be compatible
    with your machine learning frameworkâ€™s expected input format.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tutorial, youâ€™ll also need to install the ðŸ¤— Transformers library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Grab a dataset of your choice and follow along!
  prefs: []
  type: TYPE_NORMAL
- en: Tokenize text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Models cannot process raw text, so youâ€™ll need to convert the text into numbers.
    Tokenization provides a way to do this by dividing text into individual words
    called *tokens*. Tokens are finally converted to numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Check out the [Tokenizers](https://huggingface.co/course/chapter2/4?fw=pt) section
    in Chapter 2 of the Hugging Face course to learn more about tokenization and different
    tokenization algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: '**1**. Start by loading the [rotten_tomatoes](https://huggingface.co/datasets/rotten_tomatoes)
    dataset and the tokenizer corresponding to a pretrained [BERT](https://huggingface.co/bert-base-uncased)
    model. Using the same tokenizer as the pretrained model is important because you
    want to make sure the text is split in the same way.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**2**. Call your tokenizer on the first row of `text` in the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The tokenizer returns a dictionary with three items:'
  prefs: []
  type: TYPE_NORMAL
- en: '`input_ids`: the numbers representing the tokens in the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token_type_ids`: indicates which sequence a token belongs to if there is more
    than one sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask`: indicates whether a token should be masked or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These values are actually the model inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**3**. The fastest way to tokenize your entire dataset is to use the [map()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.map)
    function. This function speeds up tokenization by applying the tokenizer to batches
    of examples instead of individual examples. Set the `batched` parameter to `True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**4**. Set the format of your dataset to be compatible with your machine learning
    framework:'
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the [set_format()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.set_format)
    function to set the dataset format to be compatible with PyTorch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the [to_tf_dataset()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.to_tf_dataset)
    function to set the dataset format to be compatible with TensorFlow. Youâ€™ll also
    need to import a [data collator](https://huggingface.co/docs/transformers/main_classes/data_collator#transformers.DataCollatorWithPadding)
    from ðŸ¤— Transformers to combine the varying sequence lengths into a single batch
    of equal lengths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**5**. The dataset is now ready for training with your machine learning framework!'
  prefs: []
  type: TYPE_NORMAL
- en: Resample audio signals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Audio inputs like text datasets need to be divided into discrete data points.
    This is known as *sampling*; the sampling rate tells you how much of the speech
    signal is captured per second. It is important to make sure the sampling rate
    of your dataset matches the sampling rate of the data used to pretrain the model
    youâ€™re using. If the sampling rates are different, the pretrained model may perform
    poorly on your dataset because it doesnâ€™t recognize the differences in the sampling
    rate.
  prefs: []
  type: TYPE_NORMAL
- en: '**1**. Start by loading the [MInDS-14](https://huggingface.co/datasets/PolyAI/minds14)
    dataset, the [Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)
    feature, and the feature extractor corresponding to a pretrained [Wav2Vec2](https://huggingface.co/facebook/wav2vec2-base-960h)
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**2**. Index into the first row of the dataset. When you call the `audio` column
    of the dataset, it is automatically decoded and resampled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**3**. Reading a dataset card is incredibly useful and can give you a lot of
    information about the dataset. A quick look at the MInDS-14 dataset card tells
    you the sampling rate is 8kHz. Likewise, you can get many details about a model
    from its model card. The Wav2Vec2 model card says it was sampled on 16kHz speech
    audio. This means youâ€™ll need to upsample the MInDS-14 dataset to match the sampling
    rate of the model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the [cast_column()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.cast_column)
    function and set the `sampling_rate` parameter in the [Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)
    feature to upsample the audio signal. When you call the `audio` column now, it
    is decoded and resampled to 16kHz:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**4**. Use the [map()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.map)
    function to resample the entire dataset to 16kHz. This function speeds up resampling
    by applying the feature extractor to batches of examples instead of individual
    examples. Set the `batched` parameter to `True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**5**. The dataset is now ready for training with your machine learning framework!'
  prefs: []
  type: TYPE_NORMAL
- en: Apply data augmentations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most common preprocessing youâ€™ll do with image datasets is *data augmentation*,
    a process that introduces random variations to an image without changing the meaning
    of the data. This can mean changing the color properties of an image or randomly
    cropping an image. You are free to use any data augmentation library you like,
    and ðŸ¤— Datasets will help you apply your data augmentations to your dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '**1**. Start by loading the [Beans](https://huggingface.co/datasets/beans)
    dataset, the `Image` feature, and the feature extractor corresponding to a pretrained
    [ViT](https://huggingface.co/google/vit-base-patch16-224-in21k) model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**2**. Index into the first row of the dataset. When you call the `image` column
    of the dataset, the underlying PIL object is automatically decoded into an image.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**3**. Now, you can apply some transforms to the image. Feel free to take a
    look at the [various transforms available](https://pytorch.org/vision/stable/auto_examples/plot_transforms.html#sphx-glr-auto-examples-plot-transforms-py)
    in torchvision and choose one youâ€™d like to experiment with. This example applies
    a transform that randomly rotates the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**4**. Use the [set_transform()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.set_transform)
    function to apply the transform on-the-fly. When you index into the image `pixel_values`,
    the transform is applied, and your image gets rotated.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**5**. The dataset is now ready for training with your machine learning framework!'
  prefs: []
  type: TYPE_NORMAL
