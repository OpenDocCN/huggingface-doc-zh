["```py\n>>> import PIL\n>>> import requests\n>>> import torch\n>>> from io import BytesIO\n\n>>> from diffusers import StableDiffusionInpaintPipeline\n\n>>> def download_image(url):\n...     response = requests.get(url)\n...     return PIL.Image.open(BytesIO(response.content)).convert(\"RGB\")\n\n>>> img_url = \"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png\"\n>>> mask_url = \"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png\"\n\n>>> init_image = download_image(img_url).resize((512, 512))\n>>> mask_image = download_image(mask_url).resize((512, 512))\n\n>>> pipe = StableDiffusionInpaintPipeline.from_pretrained(\n...     \"runwayml/stable-diffusion-inpainting\", torch_dtype=torch.float16\n... )\n>>> pipe = pipe.to(\"cuda\")\n\n>>> prompt = \"Face of a yellow cat, high resolution, sitting on a park bench\"\n>>> image = pipe(prompt=prompt, image=init_image, mask_image=mask_image).images[0]\n```", "```py\n>>> import torch\n>>> from diffusers import StableDiffusionPipeline\n\n>>> pipe = StableDiffusionPipeline.from_pretrained(\n...     \"runwayml/stable-diffusion-v1-5\",\n...     torch_dtype=torch.float16,\n...     use_safetensors=True,\n... )\n\n>>> prompt = \"a photo of an astronaut riding a horse on mars\"\n>>> pipe.enable_attention_slicing()\n>>> image = pipe(prompt).images[0]\n```", "```py\n>>> import torch\n>>> from diffusers import DiffusionPipeline\n>>> from xformers.ops import MemoryEfficientAttentionFlashAttentionOp\n\n>>> pipe = DiffusionPipeline.from_pretrained(\"stabilityai/stable-diffusion-2-1\", torch_dtype=torch.float16)\n>>> pipe = pipe.to(\"cuda\")\n>>> pipe.enable_xformers_memory_efficient_attention(attention_op=MemoryEfficientAttentionFlashAttentionOp)\n>>> # Workaround for not accepting attention shape using VAE for Flash Attention\n>>> pipe.vae.enable_xformers_memory_efficient_attention(attention_op=None)\n```", "```py\nfrom diffusers import StableDiffusionPipeline\nimport torch\n\nmodel_id = \"runwayml/stable-diffusion-v1-5\"\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16).to(\"cuda\")\n\npipe.load_textual_inversion(\"sd-concepts-library/cat-toy\")\n\nprompt = \"A <cat-toy> backpack\"\n\nimage = pipe(prompt, num_inference_steps=50).images[0]\nimage.save(\"cat-backpack.png\")\n```", "```py\nfrom diffusers import StableDiffusionPipeline\nimport torch\n\nmodel_id = \"runwayml/stable-diffusion-v1-5\"\npipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16).to(\"cuda\")\n\npipe.load_textual_inversion(\"./charturnerv2.pt\", token=\"charturnerv2\")\n\nprompt = \"charturnerv2, multiple views of the same character in the same outfit, a character turnaround of a woman wearing a black jacket and red shirt, best quality, intricate details.\"\n\nimage = pipe(prompt, num_inference_steps=50).images[0]\nimage.save(\"character.png\")\n```", "```py\n>>> import jax\n>>> import numpy as np\n>>> from flax.jax_utils import replicate\n>>> from flax.training.common_utils import shard\n>>> import PIL\n>>> import requests\n>>> from io import BytesIO\n>>> from diffusers import FlaxStableDiffusionInpaintPipeline\n\n>>> def download_image(url):\n...     response = requests.get(url)\n...     return PIL.Image.open(BytesIO(response.content)).convert(\"RGB\")\n\n>>> img_url = \"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo.png\"\n>>> mask_url = \"https://raw.githubusercontent.com/CompVis/latent-diffusion/main/data/inpainting_examples/overture-creations-5sI6fQgYIuo_mask.png\"\n\n>>> init_image = download_image(img_url).resize((512, 512))\n>>> mask_image = download_image(mask_url).resize((512, 512))\n\n>>> pipeline, params = FlaxStableDiffusionInpaintPipeline.from_pretrained(\n...     \"xvjiarui/stable-diffusion-2-inpainting\"\n... )\n\n>>> prompt = \"Face of a yellow cat, high resolution, sitting on a park bench\"\n>>> prng_seed = jax.random.PRNGKey(0)\n>>> num_inference_steps = 50\n\n>>> num_samples = jax.device_count()\n>>> prompt = num_samples * [prompt]\n>>> init_image = num_samples * [init_image]\n>>> mask_image = num_samples * [mask_image]\n>>> prompt_ids, processed_masked_images, processed_masks = pipeline.prepare_inputs(\n...     prompt, init_image, mask_image\n... )\n# shard inputs and rng\n\n>>> params = replicate(params)\n>>> prng_seed = jax.random.split(prng_seed, jax.device_count())\n>>> prompt_ids = shard(prompt_ids)\n>>> processed_masked_images = shard(processed_masked_images)\n>>> processed_masks = shard(processed_masks)\n\n>>> images = pipeline(\n...     prompt_ids, processed_masks, processed_masked_images, params, prng_seed, num_inference_steps, jit=True\n... ).images\n>>> images = pipeline.numpy_to_pil(np.asarray(images.reshape((num_samples,) + images.shape[-3:])))\n```"]