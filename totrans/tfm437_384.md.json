["```py\n>>> from transformers import InformerConfig, InformerModel\n\n>>> # Initializing an Informer configuration with 12 time steps for prediction\n>>> configuration = InformerConfig(prediction_length=12)\n\n>>> # Randomly initializing a model (with random weights) from the configuration\n>>> model = InformerModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from huggingface_hub import hf_hub_download\n>>> import torch\n>>> from transformers import InformerModel\n\n>>> file = hf_hub_download(\n...     repo_id=\"hf-internal-testing/tourism-monthly-batch\", filename=\"train-batch.pt\", repo_type=\"dataset\"\n... )\n>>> batch = torch.load(file)\n\n>>> model = InformerModel.from_pretrained(\"huggingface/informer-tourism-monthly\")\n\n>>> # during training, one provides both past and future values\n>>> # as well as possible additional features\n>>> outputs = model(\n...     past_values=batch[\"past_values\"],\n...     past_time_features=batch[\"past_time_features\"],\n...     past_observed_mask=batch[\"past_observed_mask\"],\n...     static_categorical_features=batch[\"static_categorical_features\"],\n...     static_real_features=batch[\"static_real_features\"],\n...     future_values=batch[\"future_values\"],\n...     future_time_features=batch[\"future_time_features\"],\n... )\n\n>>> last_hidden_state = outputs.last_hidden_state\n```", "```py\n>>> from huggingface_hub import hf_hub_download\n>>> import torch\n>>> from transformers import InformerForPrediction\n\n>>> file = hf_hub_download(\n...     repo_id=\"hf-internal-testing/tourism-monthly-batch\", filename=\"train-batch.pt\", repo_type=\"dataset\"\n... )\n>>> batch = torch.load(file)\n\n>>> model = InformerForPrediction.from_pretrained(\n...     \"huggingface/informer-tourism-monthly\"\n... )\n\n>>> # during training, one provides both past and future values\n>>> # as well as possible additional features\n>>> outputs = model(\n...     past_values=batch[\"past_values\"],\n...     past_time_features=batch[\"past_time_features\"],\n...     past_observed_mask=batch[\"past_observed_mask\"],\n...     static_categorical_features=batch[\"static_categorical_features\"],\n...     static_real_features=batch[\"static_real_features\"],\n...     future_values=batch[\"future_values\"],\n...     future_time_features=batch[\"future_time_features\"],\n... )\n\n>>> loss = outputs.loss\n>>> loss.backward()\n\n>>> # during inference, one only provides past values\n>>> # as well as possible additional features\n>>> # the model autoregressively generates future values\n>>> outputs = model.generate(\n...     past_values=batch[\"past_values\"],\n...     past_time_features=batch[\"past_time_features\"],\n...     past_observed_mask=batch[\"past_observed_mask\"],\n...     static_categorical_features=batch[\"static_categorical_features\"],\n...     static_real_features=batch[\"static_real_features\"],\n...     future_time_features=batch[\"future_time_features\"],\n... )\n\n>>> mean_prediction = outputs.sequences.mean(dim=1)\n```"]