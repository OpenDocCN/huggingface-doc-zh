- en: M-CTC-T
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: M-CTC-T
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/mctct](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/mctct)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/mctct](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/mctct)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: This model is in maintenance mode only, so we won’t accept any new PRs changing
    its code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型目前仅处于维护模式，因此我们不会接受任何更改其代码的新PR。
- en: 'If you run into any issues running this model, please reinstall the last version
    that supported this model: v4.30.0. You can do so by running the following command:
    `pip install -U transformers==4.30.0`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在运行此模型时遇到任何问题，请重新安装支持此模型的最后一个版本：v4.30.0。您可以通过运行以下命令来执行：`pip install -U transformers==4.30.0`。
- en: Overview
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: The M-CTC-T model was proposed in [Pseudo-Labeling For Massively Multilingual
    Speech Recognition](https://arxiv.org/abs/2111.00161) by Loren Lugosch, Tatiana
    Likhomanenko, Gabriel Synnaeve, and Ronan Collobert. The model is a 1B-param transformer
    encoder, with a CTC head over 8065 character labels and a language identification
    head over 60 language ID labels. It is trained on Common Voice (version 6.1, December
    2020 release) and VoxPopuli. After training on Common Voice and VoxPopuli, the
    model is trained on Common Voice only. The labels are unnormalized character-level
    transcripts (punctuation and capitalization are not removed). The model takes
    as input Mel filterbank features from a 16Khz audio signal.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: M-CTC-T模型是由Loren Lugosch、Tatiana Likhomanenko、Gabriel Synnaeve和Ronan Collobert在[Pseudo-Labeling
    For Massively Multilingual Speech Recognition](https://arxiv.org/abs/2111.00161)中提出的。该模型是一个10亿参数的Transformer编码器，具有8065个字符标签的CTC头部和60个语言ID标签的语言识别头部。它在Common
    Voice（版本6.1，2020年12月发布）和VoxPopuli上进行训练。在对Common Voice和VoxPopuli进行训练后，该模型仅在Common
    Voice上进行训练。标签是未归一化的字符级转录（标点符号和大写字母未删除）。该模型接受来自16KHz音频信号的Mel滤波器特征作为输入。
- en: 'The abstract from the paper is the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 论文摘要如下：
- en: '*Semi-supervised learning through pseudo-labeling has become a staple of state-of-the-art
    monolingual speech recognition systems. In this work, we extend pseudo-labeling
    to massively multilingual speech recognition with 60 languages. We propose a simple
    pseudo-labeling recipe that works well even with low-resource languages: train
    a supervised multilingual model, fine-tune it with semi-supervised learning on
    a target language, generate pseudo-labels for that language, and train a final
    model using pseudo-labels for all languages, either from scratch or by fine-tuning.
    Experiments on the labeled Common Voice and unlabeled VoxPopuli datasets show
    that our recipe can yield a model with better performance for many languages that
    also transfers well to LibriSpeech.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*通过伪标记进行半监督学习已成为最先进的单语音识别系统的基本技术。在这项工作中，我们将伪标记扩展到包含60种语言的大规模多语音识别。我们提出了一个简单的伪标记配方，即使在资源稀缺的语言中也能很好地工作：训练一个监督的多语言模型，用半监督学习在目标语言上微调它，为该语言生成伪标签，并使用所有语言的伪标签训练最终模型，可以从头开始或通过微调。在标记的Common
    Voice和未标记的VoxPopuli数据集上的实验表明，我们的配方可以产生性能更好的模型，对许多语言也具有良好的迁移性能，可以转移到LibriSpeech。*'
- en: This model was contributed by [cwkeam](https://huggingface.co/cwkeam). The original
    code can be found [here](https://github.com/flashlight/wav2letter/tree/main/recipes/mling_pl).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型由[cwkeam](https://huggingface.co/cwkeam)贡献。原始代码可在[此处](https://github.com/flashlight/wav2letter/tree/main/recipes/mling_pl)找到。
- en: Usage tips
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用提示
- en: The PyTorch version of this model is only available in torch 1.9 and higher.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型的PyTorch版本仅在torch 1.9及更高版本中可用。
- en: Resources
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: '[Automatic speech recognition task guide](../tasks/asr)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自动语音识别任务指南](../tasks/asr)'
- en: MCTCTConfig
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MCTCTConfig
- en: '### `class transformers.MCTCTConfig`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.MCTCTConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/configuration_mctct.py#L29)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/configuration_mctct.py#L29)'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`vocab_size` (`int`, *optional*, defaults to 8065) — Vocabulary size of the
    M-CTC-T model. Defines the number of different tokens that can be represented
    by the `inputs_ids` passed when calling [MCTCTModel](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTModel).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vocab_size` (`int`, *optional*, 默认为8065) — M-CTC-T模型的词汇量。定义了在调用[MCTCTModel](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTModel)时可以由`inputs_ids`表示的不同标记数量。'
- en: '`hidden_size` (`int`, *optional*, defaults to 1536) — Dimension of the encoder
    layers and the pooler layer.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_size` (`int`, *optional*, 默认为1536) — 编码器层和池化器层的维度。'
- en: '`num_hidden_layers` (`int`, *optional*, defaults to 36) — Number of hidden
    layers in the Transformer encoder.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_hidden_layers` (`int`, *optional*, 默认为36) — Transformer编码器中的隐藏层数量。'
- en: '`intermediate_size` (`int`, *optional*, defaults to 6144) — Dimension of the
    “intermediate” (i.e., feed-forward) layer in the Transformer encoder.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`intermediate_size` (`int`, *optional*, 默认为6144) — Transformer编码器中“中间”（即前馈）层的维度。'
- en: '`num_attention_heads` (`int`, *optional*, defaults to 4) — Number of attention
    heads for each attention layer in the Transformer encoder.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_attention_heads` (`int`, *optional*, 默认为4) — Transformer编码器中每个注意力层的注意力头数量。'
- en: '`attention_head_dim` (`int`, *optional*, defaults to 384) — Dimensions of each
    attention head for each attention layer in the Transformer encoder.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_head_dim` (`int`, *optional*, 默认为384) — Transformer编码器中每个注意力层的每个注意力头的维度。'
- en: '`max_position_embeddings` (`int`, *optional*, defaults to 920) — The maximum
    sequence length that this model might ever be used with (after log-mel spectrogram
    extraction).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_position_embeddings` (`int`, *optional*, 默认为920) — 该模型可能会与之一起使用的最大序列长度（在对数梅尔频谱提取之后）。'
- en: '`layer_norm_eps` (`float`, *optional*, defaults to 1e-05) — The epsilon used
    by the layer normalization layers.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layer_norm_eps` (`float`, *optional*, 默认为1e-05) — 层归一化层使用的epsilon值。'
- en: '`layerdrop` (`float`, *optional*, defaults to 0.3) — The probability of dropping
    an encoder layer during training. The default 0.3 value is used in the original
    implementation.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layerdrop` (`float`, *optional*, 默认为0.3) — 训练过程中丢弃编码器层的概率。默认值0.3在原始实现中使用。'
- en: '`hidden_act` (`str` or `function`, *optional*, defaults to `"relu"`) — The
    non-linear activation function (function or string) in the encoder and pooler.
    If string, `"gelu"`, `"relu"`, `"selu"` and `"gelu_new"` are supported.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_act` (`str` or `function`, *optional*, defaults to `"relu"`) — 编码器和池化器中的非线性激活函数（函数或字符串）。如果是字符串，支持`"gelu"`、`"relu"`、`"selu"`和`"gelu_new"`。'
- en: '`initializer_range` (`float`, *optional*, defaults to 0.02) — The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_range` (`float`, *optional*, defaults to 0.02) — 用于初始化所有权重矩阵的截断正态初始化器的标准差。'
- en: '`hidden_dropout_prob` (`float`, *optional*, defaults to 0.3) — The dropout
    probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_dropout_prob` (`float`, *optional*, defaults to 0.3) — 嵌入层、编码器和池化器中所有全连接层的丢失概率。'
- en: '`attention_probs_dropout_prob` (`float`, *optional*, defaults to 0.3) — The
    dropout ratio for the attention probabilities.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_probs_dropout_prob` (`float`, *optional*, defaults to 0.3) — 注意力概率的丢失比例。'
- en: '`pad_token_id` (`int`, *optional*, defaults to 1) — The tokenizer index of
    the pad token.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pad_token_id` (`int`, *optional*, defaults to 1) — 填充标记的分词器索引。'
- en: '`bos_token_id` (`int`, *optional*, defaults to 0) — The tokenizer index of
    the bos token.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bos_token_id` (`int`, *optional*, defaults to 0) — bos标记的分词器索引。'
- en: '`eos_token_id` (`int`, *optional*, defaults to 2) — The tokenizer index of
    the eos token.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eos_token_id` (`int`, *optional*, defaults to 2) — eos标记的分词器索引。'
- en: '`conv_glu_dim` (`int`, *optional*, defaults to 1) — The dimension of the output
    of the `Conv1dSubsampler` layer in which GLU is applied on. Though the original
    Flashlight code uses the value of 2, here it’s adapted to 1 due to transposition
    differences.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conv_glu_dim` (`int`, *optional*, defaults to 1) — 在应用GLU的`Conv1dSubsampler`层的输出维度。尽管原始的Flashlight代码使用值为2，但这里由于转置差异，将其调整为1。'
- en: '`conv_dropout` (`int`, *optional*, defaults to 0.3) — The probability of randomly
    dropping the `Conv1dSubsampler` layer during training.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conv_dropout` (`int`, *optional*, defaults to 0.3) — 训练期间随机丢弃`Conv1dSubsampler`层的概率。'
- en: '`num_conv_layers` (`int`, *optional*, defaults to 1) — Number of convolution
    layers before applying transformer encoder layers.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_conv_layers` (`int`, *optional*, defaults to 1) — 在应用变换器编码器层之前的卷积层数。'
- en: '`conv_kernel` (`Sequence[int]`, *optional*, defaults to `(7,)`) — The kernel
    size of the 1D convolution applied before transformer layers. `len(conv_kernel)`
    must be equal to `num_conv_layers`.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conv_kernel` (`Sequence[int]`, *optional*, defaults to `(7,)`) — 在变换器层之前应用的1D卷积的内核大小。`conv_kernel`的长度必须等于`num_conv_layers`。'
- en: '`conv_stride` (`Sequence[int]`, *optional*, defaults to `(3,)`) — The stride
    length of the 1D convolution applied before transformer layers. `len(conv_stride)`
    must be equal to `num_conv_layers`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conv_stride` (`Sequence[int]`, *optional*, defaults to `(3,)`) — 在变换器层之前应用的1D卷积的步长长度。`conv_stride`的长度必须等于`num_conv_layers`。'
- en: '`input_feat_per_channel` (`int`, *optional*, defaults to 80) — Feature dimensions
    of the channels of the input to the Conv1D layer.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_feat_per_channel` (`int`, *optional*, defaults to 80) — 输入到Conv1D层通道的特征维度。'
- en: '`input_channels` (`int`, *optional*, defaults to 1) — Number of input channels
    of the input to the Conv1D layer.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_channels` (`int`, *optional*, defaults to 1) — 输入到Conv1D层的输入通道数。'
- en: '`conv_channels` (`List[int]`, *optional*) — Channel sizes of intermediate Conv1D
    layers.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`conv_channels` (`List[int]`, *optional*) — 中间Conv1D层的通道大小。'
- en: '`ctc_loss_reduction` (`str`, *optional*, defaults to `"sum"`) — Specifies the
    reduction to apply to the output of `torch.nn.CTCLoss`. Only relevant when training
    an instance of [MCTCTForCTC](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTForCTC).'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ctc_loss_reduction` (`str`, *optional*, defaults to `"sum"`) — 指定应用于`torch.nn.CTCLoss`输出的减少方式。仅在训练[MCTCTForCTC](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTForCTC)实例时相关。'
- en: '`ctc_zero_infinity` (`bool`, *optional*, defaults to `False`) — Whether to
    zero infinite losses and the associated gradients of `torch.nn.CTCLoss`. Infinite
    losses mainly occur when the inputs are too short to be aligned to the targets.
    Only relevant when training an instance of [MCTCTForCTC](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTForCTC).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ctc_zero_infinity` (`bool`, *optional*, defaults to `False`) — 是否将`torch.nn.CTCLoss`的无限损失和相关梯度归零。当输入太短无法与目标对齐时，主要会出现无限损失。仅在训练[MCTCTForCTC](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTForCTC)实例时相关。'
- en: This is the configuration class to store the configuration of a [MCTCTModel](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTModel).
    It is used to instantiate an M-CTC-T model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the M-CTC-T [speechbrain/m-ctc-t-large](https://huggingface.co/speechbrain/m-ctc-t-large)
    architecture.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于存储[MCTCTModel](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTModel)配置的配置类。根据指定的参数实例化一个M-CTC-T模型，定义模型架构。使用默认值实例化配置将产生类似于M-CTC-T
    [speechbrain/m-ctc-t-large](https://huggingface.co/speechbrain/m-ctc-t-large)架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)的文档以获取更多信息。
- en: 'Example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: MCTCTFeatureExtractor
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MCTCTFeatureExtractor
- en: '### `class transformers.MCTCTFeatureExtractor`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.MCTCTFeatureExtractor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/feature_extraction_mctct.py#L33)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/feature_extraction_mctct.py#L33)'
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`feature_size` (`int`, defaults to 80) — The feature dimension of the extracted
    features. This is the number of mel_frequency'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feature_size` (`int`, defaults to 80) — 提取特征的特征维度。这是梅尔频率的数量'
- en: '`sampling_rate` (`int`, defaults to 16000) — The sampling rate at which the
    audio files should be digitalized expressed in hertz (Hz).'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sampling_rate`（`int`，默认为 16000）— 音频文件应数字化的采样率，以赫兹（Hz）表示。'
- en: '`padding_value` (`float`, defaults to 0.0) — The value that is used to fill
    the padding values.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding_value`（`float`，默认为 0.0）— 用于填充值的值。'
- en: '`hop_length` (`int`, defaults to 10) — Number of audio samples between windows.
    Otherwise referred to as “shift” in many papers.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hop_length`（`int`，默认为 10）— 窗口之间的音频样本数。在许多论文中也称为“shift”。'
- en: '`win_length` (`int`, defaults to 25) — Number of ms per window'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`win_length`（`int`，默认为 25）— 每个窗口的毫秒数。'
- en: '`win_function` (`str`, defaults to `"hamming_window"`) — Name for the window
    function used for windowing, must be accessible via `torch.{win_function}`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`win_function`（`str`，默认为 `"hamming_window"`）— 用于窗口化的窗口函数的名称，必须可以通过 `torch.{win_function}`
    访问。'
- en: '`frame_signal_scale` (`float`, defaults to 32768.0) — Constant multiplied in
    creating the frames before applying DFT.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frame_signal_scale`（`float`，默认为 32768.0）— 在应用 DFT 之前创建帧时乘以的常数。'
- en: '`preemphasis_coeff` (`float`, defaults to 0.97) — Constant multiplied in applying
    Pre-emphasis before DFT.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`preemphasis_coeff`（`float`，默认为 0.97）— 在应用 DFT 之前乘以的常数。'
- en: '`mel_floor` (`float` defaults to 1.0) — Minimum value of mel frequency banks.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mel_floor`（`float`，默认为 1.0）— Mel 频率组的最小值。'
- en: '`normalize_means` (`bool`, *optional*, defaults to `True`) — Whether or not
    to zero-mean normalize the extracted features.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normalize_means`（`bool`，*可选*，默认为 `True`）— 是否对提取的特征进行零均值归一化。'
- en: '`normalize_vars` (`bool`, *optional*, defaults to `True`) — Whether or not
    to unit-variance normalize the extracted features.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normalize_vars`（`bool`，*可选*，默认为 `True`）— 是否对提取的特征进行单位方差归一化。'
- en: Constructs a M-CTC-T feature extractor.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 构建 M-CTC-T 特征提取器。
- en: This feature extractor inherits from [SequenceFeatureExtractor](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor)
    which contains most of the main methods. Users should refer to this superclass
    for more information regarding those methods. This code has been adapted from
    Flashlight’s C++ code. For more information about the implementation, one can
    refer to this [notebook](https://colab.research.google.com/drive/1GLtINkkhzms-IsdcGy_-tVCkv0qNF-Gt#scrollTo=pMCRGMmUC_an)
    that takes the user step-by-step in the implementation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '此特征提取器继承自 [SequenceFeatureExtractor](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor)，其中包含大多数主要方法。用户应参考此超类以获取有关这些方法的更多信息。此代码已从
    Flashlight 的 C++ 代码进行了调整。有关实现的更多信息，用户可以参考这个 [笔记本](https://colab.research.google.com/drive/1GLtINkkhzms-IsdcGy_-tVCkv0qNF-Gt#scrollTo=pMCRGMmUC_an)，该笔记本逐步引导用户进行实现。 '
- en: '#### `__call__`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `__call__`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/feature_extraction_mctct.py#L161)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/feature_extraction_mctct.py#L161)'
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`raw_speech` (`torch.Tensor`, `np.ndarray`, `List[float]`, `List[torch.Tensor]`,
    `List[np.ndarray]`, `List[List[float]]`) — The sequence or batch of sequences
    to be padded. Each sequence can be a tensor, a numpy array, a list of float values,
    a list of tensors, a list of numpy arrays or a list of list of float values. Must
    be mono channel audio, not stereo, i.e. single float per timestep.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw_speech`（`torch.Tensor`，`np.ndarray`，`List[float]`，`List[torch.Tensor]`，`List[np.ndarray]`，`List[List[float]]`）—
    要填充的序列或序列批次。每个序列可以是张量、numpy 数组、浮点值列表、张量列表、numpy 数组列表或浮点值列表列表。必须是单声道音频，不是立体声，即每个时间步长一个浮点数。'
- en: '`padding` (`bool`, `str` or [PaddingStrategy](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.utils.PaddingStrategy),
    *optional*, defaults to `False`) — Select a strategy to pad the returned sequences
    (according to the model’s padding side and padding index) among:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding`（`bool`，`str` 或 [PaddingStrategy](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.utils.PaddingStrategy)，*可选*，默认为
    `False`）— 选择一种策略来填充返回的序列（根据模型的填充方向和填充索引）：'
- en: '`True` or `''longest''`: Pad to the longest sequence in the batch (or no padding
    if only a single sequence if provided).'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`True` 或 `''longest''`：填充到批次中最长的序列（如果只提供一个序列，则不填充）。'
- en: '`''max_length''`: Pad to a maximum length specified with the argument `max_length`
    or to the maximum acceptable input length for the model if that argument is not
    provided.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''max_length''`：填充到由参数 `max_length` 指定的最大长度，或者如果未提供该参数，则填充到模型的最大可接受输入长度。'
- en: '`False` or `''do_not_pad''` (default): No padding (i.e., can output a batch
    with sequences of different lengths).'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`False` 或 `''do_not_pad''`（默认）：无填充（即可以输出具有不同长度序列的批次）。'
- en: '`max_length` (`int`, *optional*) — Maximum length of the returned list and
    optionally padding length (see above).'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_length`（`int`，*可选*）— 返回列表的最大长度和可选填充长度（见上文）。'
- en: '`truncation` (`bool`) — Activates truncation to cut input sequences longer
    than *max_length* to *max_length*.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`truncation`（`bool`）— 激活截断以将输入序列截断为比 *max_length* 更长的 *max_length*。'
- en: '`pad_to_multiple_of` (`int`, *optional*) — If set will pad the sequence to
    a multiple of the provided value.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pad_to_multiple_of`（`int`，*可选*）— 如果设置，将填充序列到提供的值的倍数。'
- en: This is especially useful to enable the use of Tensor Cores on NVIDIA hardware
    with compute capability `>= 7.5` (Volta), or on TPUs which benefit from having
    sequence lengths be a multiple of 128.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这对于启用 NVIDIA 硬件上的 Tensor Cores 特别有用，其计算能力为`>= 7.5`（Volta），或者对于受益于序列长度为 128 的
    TPUs。
- en: '`return_attention_mask` (`bool`, *optional*) — Whether to return the attention
    mask. If left to the default, will return the attention mask according to the
    specific feature_extractor’s default.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_attention_mask`（`bool`，*可选*）— 是否返回注意力掩码。如果保持默认设置，将根据特定 feature_extractor
    的默认设置返回注意力掩码。'
- en: '[What are attention masks?](../glossary#attention-mask)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是注意力掩码？](../glossary#attention-mask)'
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) — If set, will return tensors instead of list of python integers.
    Acceptable values are:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors`（`str` 或 [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType)，*可选*）—
    如果设置，将返回张量而不是 Python 整数列表。可接受的值为：'
- en: '`''tf''`: Return TensorFlow `tf.constant` objects.'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''tf''`: 返回 TensorFlow `tf.constant` 对象。'
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''pt''`: 返回 PyTorch `torch.Tensor` 对象。'
- en: '`''np''`: Return Numpy `np.ndarray` objects.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''np''`: 返回 Numpy `np.ndarray` 对象。'
- en: '`sampling_rate` (`int`, *optional*) — The sampling rate at which the `raw_speech`
    input was sampled. It is strongly recommended to pass `sampling_rate` at the forward
    call to prevent silent errors.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sampling_rate` (`int`, *可选*) — `raw_speech` 输入的采样率。强烈建议在前向调用时传递 `sampling_rate`
    以防止潜在错误。'
- en: '`padding_value` (`float`, defaults to 0.0) —'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding_value` (`float`, 默认为 0.0) —'
- en: Main method to featurize and prepare for the model one or several sequence(s).
    sequences. It returns the log-mel spectrogram of the input audio, as implemented
    in the original Flashlight MFSC feature extraction code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对一个或多个序列进行特征化和准备模型的主要方法。它返回输入音频的对数梅尔频谱图，这是在原始 Flashlight MFSC 特征提取代码中实现的。
- en: MCTCTProcessor
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MCTCTProcessor
- en: '### `class transformers.MCTCTProcessor`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.MCTCTProcessor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/processing_mctct.py#L24)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/processing_mctct.py#L24)'
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`feature_extractor` (`MCTCTFeatureExtractor`) — An instance of [MCTCTFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTFeatureExtractor).
    The feature extractor is a required input.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`feature_extractor` (`MCTCTFeatureExtractor`) — [MCTCTFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTFeatureExtractor)
    的一个实例。特征提取器是必需的输入。'
- en: '`tokenizer` (`AutoTokenizer`) — An instance of [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer).
    The tokenizer is a required input.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tokenizer` (`AutoTokenizer`) — [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer)
    的一个实例。分词器是必需的输入。'
- en: Constructs a MCTCT processor which wraps a MCTCT feature extractor and a MCTCT
    tokenizer into a single processor.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 MCTCT 处理器，将 MCTCT 特征提取器和 MCTCT 分词器包装成一个单一处理器。
- en: '[MCTCTProcessor](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTProcessor)
    offers all the functionalities of [MCTCTFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTFeatureExtractor)
    and [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer).
    See the [**call**()](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTProcessor.__call__)
    and [decode()](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTProcessor.decode)
    for more information.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[MCTCTProcessor](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTProcessor)
    提供了 [MCTCTFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTFeatureExtractor)
    和 [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer)
    的所有功能。查看 [**call**()](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTProcessor.__call__)
    和 [decode()](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTProcessor.decode)
    获取更多信息。'
- en: '#### `__call__`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `__call__`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/processing_mctct.py#L46)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/processing_mctct.py#L46)'
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When used in normal mode, this method forwards all its arguments to MCTCTFeatureExtractor’s
    [**call**()](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTFeatureExtractor.__call__)
    and returns its output. If used in the context `as_target_processor()` this method
    forwards all its arguments to AutoTokenizer’s `__call__()`. Please refer to the
    doctsring of the above two methods for more information.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常模式下使用时，此方法将所有参数转发到 MCTCTFeatureExtractor 的 [**call**()](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTFeatureExtractor.__call__)
    并返回其输出。如果在上下文 `as_target_processor()` 中使用此方法，则将所有参数转发到 AutoTokenizer 的 `__call__()`。请参考上述两种方法的文档获取更多信息。
- en: '#### `from_pretrained`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `from_pretrained`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L406)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L406)'
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pretrained_model_name_or_path` (`str` or `os.PathLike`) — This can be either:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pretrained_model_name_or_path` (`str` 或 `os.PathLike`) — 可以是：'
- en: a string, the *model id* of a pretrained feature_extractor hosted inside a model
    repo on huggingface.co. Valid model ids can be located at the root-level, like
    `bert-base-uncased`, or namespaced under a user or organization name, like `dbmdz/bert-base-german-cased`.
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字符串，预训练特征提取器的 *模型 id*，托管在 huggingface.co 上的模型仓库内。有效的模型 id 可以位于根级别，如 `bert-base-uncased`，或者在用户或组织名称下命名空间化，如
    `dbmdz/bert-base-german-cased`。
- en: a path to a *directory* containing a feature extractor file saved using the
    [save_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained)
    method, e.g., `./my_model_directory/`.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含使用 [save_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained)
    方法保存的特征提取器文件的 *目录* 的路径，例如 `./my_model_directory/`。
- en: a path or url to a saved feature extractor JSON *file*, e.g., `./my_model_directory/preprocessor_config.json`.
    **kwargs — Additional keyword arguments passed along to both [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained)
    and `~tokenization_utils_base.PreTrainedTokenizer.from_pretrained`.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个已保存的特征提取器 JSON *文件* 的路径或 URL，例如 `./my_model_directory/preprocessor_config.json`。**kwargs
    — 传递给 [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained)
    和 `~tokenization_utils_base.PreTrainedTokenizer.from_pretrained` 的额外关键字参数。
- en: Instantiate a processor associated with a pretrained model.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化与预训练模型相关联的处理器。
- en: This class method is simply calling the feature extractor [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained),
    image processor [ImageProcessingMixin](/docs/transformers/v4.37.2/en/internal/image_processing_utils#transformers.ImageProcessingMixin)
    and the tokenizer `~tokenization_utils_base.PreTrainedTokenizer.from_pretrained`
    methods. Please refer to the docstrings of the methods above for more information.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此类方法只是调用特征提取器的[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained)、图像处理器[ImageProcessingMixin](/docs/transformers/v4.37.2/en/internal/image_processing_utils#transformers.ImageProcessingMixin)和标记器`~tokenization_utils_base.PreTrainedTokenizer.from_pretrained`方法。请参考上述方法的文档字符串以获取更多信息。
- en: '#### `save_pretrained`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `save_pretrained`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L167)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/processing_utils.py#L167)'
- en: '[PRE7]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`save_directory` (`str` or `os.PathLike`) — Directory where the feature extractor
    JSON file and the tokenizer files will be saved (directory will be created if
    it does not exist).'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`save_directory` (`str`或`os.PathLike`) — 将保存特征提取器JSON文件和标记器文件的目录（如果目录不存在，则将创建目录）。'
- en: '`push_to_hub` (`bool`, *optional*, defaults to `False`) — Whether or not to
    push your model to the Hugging Face model hub after saving it. You can specify
    the repository you want to push to with `repo_id` (will default to the name of
    `save_directory` in your namespace).'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`push_to_hub` (`bool`，*可选*，默认为`False`) — 保存模型后是否将模型推送到Hugging Face模型中心。您可以使用`repo_id`指定要推送到的存储库（将默认为您的命名空间中的`save_directory`名称）。'
- en: '`kwargs` (`Dict[str, Any]`, *optional*) — Additional key word arguments passed
    along to the [push_to_hub()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.push_to_hub)
    method.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` (`Dict[str, Any]`，*可选*） — 传递给[push_to_hub()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.push_to_hub)方法的其他关键字参数。'
- en: Saves the attributes of this processor (feature extractor, tokenizer…) in the
    specified directory so that it can be reloaded using the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.ProcessorMixin.from_pretrained)
    method.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将此处理器的属性（特征提取器、标记器等）保存在指定目录中，以便可以使用[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/processors#transformers.ProcessorMixin.from_pretrained)方法重新加载。
- en: This class method is simply calling [save_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained)
    and [save_pretrained()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained).
    Please refer to the docstrings of the methods above for more information.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此类方法只是调用[save_pretrained()](/docs/transformers/v4.37.2/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained)和[save_pretrained()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained)。请参考上述方法的文档字符串以获取更多信息。
- en: '#### `batch_decode`'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `batch_decode`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/processing_mctct.py#L84)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/processing_mctct.py#L84)'
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method forwards all its arguments to AutoTokenizer’s [batch_decode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.batch_decode).
    Please refer to the docstring of this method for more information.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将其所有参数转发给AutoTokenizer的[batch_decode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.batch_decode)。请参考此方法的文档字符串以获取更多信息。
- en: '#### `decode`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `decode`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/processing_mctct.py#L121)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/processing_mctct.py#L121)'
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This method forwards all its arguments to AutoTokenizer’s [decode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.decode).
    Please refer to the docstring of this method for more information.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将其所有参数转发给AutoTokenizer的[decode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.decode)。请参考此方法的文档字符串以获取更多信息。
- en: MCTCTModel
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MCTCTModel
- en: '### `class transformers.MCTCTModel`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.MCTCTModel`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/modeling_mctct.py#L633)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/modeling_mctct.py#L633)'
- en: '[PRE10]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Parameters
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([MCTCTConfig](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config` ([MCTCTConfig](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTConfig))
    — 具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型相关的权重，只会加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: The bare M-CTC-T Model transformer outputting raw hidden-states without any
    specific head on top. This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    sub-class. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: M-CTC-T模型变压器裸露输出原始隐藏状态，没有任何特定的头部。这个模型是PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)的子类。将其用作常规的PyTorch模块，并参考PyTorch文档以获取有关一般用法和行为的所有相关信息。
- en: '#### `forward`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/modeling_mctct.py#L647)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/modeling_mctct.py#L647)'
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Parameters
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`input_features` (`torch.LongTensor` of shape `(batch_size, sequence_length)`)
    — Indices of input sequence tokens in the vocabulary.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_features` (`torch.LongTensor`，形状为`(batch_size, sequence_length)`) —
    词汇表中输入序列令牌的索引。'
- en: Indices can be obtained using [Wav2Vec2CTCTokenizer](/docs/transformers/v4.37.2/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer).
    See [PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)
    and [PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)
    for details.
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用[Wav2Vec2CTCTokenizer](/docs/transformers/v4.37.2/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer)获取索引。有关详细信息，请参阅[PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)和[PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)。
- en: '[What are input IDs?](../glossary#input-ids)'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是输入ID？](../glossary#input-ids)'
- en: '`attention_mask` (`torch.FloatTensor` of shape `(batch_size, sequence_length)`,
    *optional*) — Mask to avoid performing attention on padding token indices. Mask
    values selected in `[0, 1]`:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask` (`torch.FloatTensor`，形状为`(batch_size, sequence_length)`，*optional*)
    — 避免在填充令牌索引上执行注意力的掩码。掩码值在`[0, 1]`中选择：'
- en: 1 for tokens that are `not masked`,
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1表示未被`masked`的令牌，
- en: 0 for tokens that are `masked`.
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0表示被`masked`的令牌。
- en: '[What are attention masks?](../glossary#attention-mask)'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是注意力掩码？](../glossary#attention-mask)'
- en: '`head_mask` (`torch.FloatTensor` of shape `(num_heads,)` or `(num_layers, num_heads)`,
    *optional*) — Mask to nullify selected heads of the self-attention modules. Mask
    values selected in `[0, 1]`:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`head_mask` (`torch.FloatTensor`，形状为`(num_heads,)`或`(num_layers, num_heads)`，*optional*)
    — 用于使自注意力模块中选择的头部失效的掩码。掩码值在`[0, 1]`中选择：'
- en: 1 indicates the head is `not masked`,
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1表示头部未被`masked`，
- en: 0 indicates the head is `masked`.
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0表示头部被`masked`。
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions` (`bool`，*optional*) — 是否返回所有注意力层的注意力张量。有关更多详细信息，请参阅返回张量中的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`，*optional*) — 是否返回所有层的隐藏状态。有关更多详细信息，请参阅返回张量中的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *optional*) — 是否返回一个[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是一个普通的元组。'
- en: Returns
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[transformers.modeling_outputs.BaseModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput)
    or `tuple(torch.FloatTensor)`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '[transformers.modeling_outputs.BaseModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput)或`tuple(torch.FloatTensor)`'
- en: A [transformers.modeling_outputs.BaseModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([MCTCTConfig](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTConfig))
    and inputs.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[transformers.modeling_outputs.BaseModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput)或一个`torch.FloatTensor`元组（如果传递`return_dict=False`或`config.return_dict=False`）包含各种元素，具体取决于配置（[MCTCTConfig](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTConfig)）和输入。
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`) — Sequence of hidden-states at the output of the last layer of
    the model.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_hidden_state` (`torch.FloatTensor`，形状为`(batch_size, sequence_length,
    hidden_size)`) — 模型最后一层的隐藏状态序列。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states` (`tuple(torch.FloatTensor)`，*optional*，当传递`output_hidden_states=True`或`config.output_hidden_states=True`时返回）
    — 形状为`(batch_size, sequence_length, hidden_size)`的`torch.FloatTensor`元组（如果模型有嵌入层，则为嵌入的输出+每层的输出）。'
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每层模型的隐藏状态加上可选的初始嵌入输出。
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attentions` (`tuple(torch.FloatTensor)`，*optional*，当传递`output_attentions=True`或`config.output_attentions=True`时返回）
    — 形状为`(batch_size, num_heads, sequence_length, sequence_length)`的`torch.FloatTensor`元组（每层一个）。'
- en: Attentions weights after the attention softmax, used to compute the weighted
    average in the self-attention heads.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意力softmax后的注意力权重，用于计算自注意力头中的加权平均值。
- en: The [MCTCTModel](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTModel)
    forward method, overrides the `__call__` special method.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[MCTCTModel](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTModel)的前向方法，覆盖`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的配方需要在此函数内定义，但应该在此之后调用`Module`实例而不是这个，因为前者负责运行预处理和后处理步骤，而后者则默默地忽略它们。
- en: 'Example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE12]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: MCTCTForCTC
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MCTCTForCTC
- en: '### `class transformers.MCTCTForCTC`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.MCTCTForCTC`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/modeling_mctct.py#L693)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/modeling_mctct.py#L693)'
- en: '[PRE13]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Parameters
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([MCTCTConfig](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`（[MCTCTConfig](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTConfig)）—
    具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型相关的权重，只会加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: MCTCT Model with a `language modeling` head on top for Connectionist Temporal
    Classification (CTC). This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    sub-class. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用带有顶部`语言建模`头的MCTCT模型，用于连接主义时间分类（CTC）。这个模型是PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)的子类。将其用作常规的PyTorch模块，并参考PyTorch文档以获取与一般用法和行为相关的所有事项。
- en: '#### `forward`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/modeling_mctct.py#L717)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deprecated/mctct/modeling_mctct.py#L717)'
- en: '[PRE14]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Parameters
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`input_features` (`torch.LongTensor` of shape `({0})`) — Indices of input sequence
    tokens in the vocabulary.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_features`（形状为`({0})`的`torch.LongTensor`）— 词汇表中输入序列标记的索引。'
- en: Indices can be obtained using [Wav2Vec2CTCTokenizer](/docs/transformers/v4.37.2/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer).
    See [PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)
    and [PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)
    for details.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用[Wav2Vec2CTCTokenizer](/docs/transformers/v4.37.2/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer)获取索引。有关详细信息，请参阅[PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)和[PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)。
- en: '[What are input IDs?](../glossary#input-ids)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是输入ID？](../glossary#input-ids)'
- en: '`attention_mask` (`torch.FloatTensor` of shape `({0})`, *optional*) — Mask
    to avoid performing attention on padding token indices. Mask values selected in
    `[0, 1]`:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask`（形状为`({0})`的`torch.FloatTensor`，*可选*）— 用于避免在填充标记索引上执行注意力的掩码。掩码值在`[0,
    1]`中选择：'
- en: 1 for tokens that are `not masked`,
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1表示`未被掩码`的标记，
- en: 0 for tokens that are `masked`.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0表示`被掩码`的标记。
- en: '[What are attention masks?](../glossary#attention-mask)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是注意力掩码？](../glossary#attention-mask)'
- en: '`head_mask` (`torch.FloatTensor` of shape `(num_heads,)` or `(num_layers, num_heads)`,
    *optional*) — Mask to nullify selected heads of the self-attention modules. Mask
    values selected in `[0, 1]`:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`head_mask`（形状为`(num_heads,)`或`(num_layers, num_heads)`的`torch.FloatTensor`，*可选*）—
    用于使自注意力模块的选定头部失效的掩码。掩码值在`[0, 1]`中选择：'
- en: 1 indicates the head is `not masked`,
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1表示头部`未被掩码`，
- en: 0 indicates the head is `masked`.
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0表示头部被`掩码`。
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions`（`bool`，*可选*）— 是否返回所有注意力层的注意力张量。有关更多详细信息，请参阅返回的张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states`（`bool`，*可选*）— 是否返回所有层的隐藏状态。有关更多详细信息，请参阅返回的张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict`（`bool`，*可选*）— 是否返回一个[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是一个普通元组。'
- en: '`labels` (`torch.LongTensor` of shape `(batch_size, target_length)`, *optional*)
    — Labels for connectionist temporal classification. Note that `target_length`
    has to be smaller or equal to the sequence length of the output logits. Indices
    are selected in `[-100, 0, ..., config.vocab_size - 1]`. All labels set to `-100`
    are ignored (masked), the loss is only computed for labels in `[0, ..., config.vocab_size
    - 1]`.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labels`（形状为`(batch_size, target_length)`的`torch.LongTensor`，*可选*）— 用于连接主义时间分类的标签。请注意，`target_length`必须小于或等于输出logits的序列长度。索引在`[-100,
    0, ..., config.vocab_size - 1]`中选择。所有标签设置为`-100`都将被忽略（掩码），损失仅计算标签在`[0, ..., config.vocab_size
    - 1]`中的情况。'
- en: Returns
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[transformers.modeling_outputs.CausalLMOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.CausalLMOutput)
    or `tuple(torch.FloatTensor)`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[transformers.modeling_outputs.CausalLMOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.CausalLMOutput)或`tuple(torch.FloatTensor)`'
- en: A [transformers.modeling_outputs.CausalLMOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.CausalLMOutput)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([MCTCTConfig](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTConfig))
    and inputs.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[transformers.modeling_outputs.CausalLMOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.CausalLMOutput)或一个`torch.FloatTensor`元组（如果传递了`return_dict=False`或`config.return_dict=False`时）包含根据配置（[MCTCTConfig](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTConfig)）和输入的不同元素。
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Language modeling loss (for next-token prediction).'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss`（形状为`(1,)`的`torch.FloatTensor`，*可选*，当提供`labels`时返回）— 语言建模损失（用于下一个标记预测）。'
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, sequence_length, config.vocab_size)`)
    — Prediction scores of the language modeling head (scores for each vocabulary
    token before SoftMax).'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits`（形状为`(batch_size, sequence_length, config.vocab_size)`的`torch.FloatTensor`）—
    语言建模头的预测分数（SoftMax之前每个词汇标记的分数）。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states`（`tuple(torch.FloatTensor)`，*可选*，当传递`output_hidden_states=True`或`config.output_hidden_states=True`时返回）—
    形状为`(batch_size, sequence_length, hidden_size)`的`torch.FloatTensor`元组（如果模型有嵌入层，则为嵌入输出的一个
    + 每层输出的一个）。'
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模型在每一层输出的隐藏状态，加上可选的初始嵌入输出。
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attentions`（`tuple(torch.FloatTensor)`，*可选*，当传递`output_attentions=True`或`config.output_attentions=True`时返回）—
    形状为`(batch_size, num_heads, sequence_length, sequence_length)`的`torch.FloatTensor`元组（每层一个）。'
- en: Attentions weights after the attention softmax, used to compute the weighted
    average in the self-attention heads.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意力权重在注意力softmax之后，用于计算自注意力头中的加权平均值。
- en: The [MCTCTForCTC](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTForCTC)
    forward method, overrides the `__call__` special method.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[MCTCTForCTC](/docs/transformers/v4.37.2/en/model_doc/mctct#transformers.MCTCTForCTC)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前向传播的配方需要在此函数内定义，但应该在此之后调用`Module`实例，而不是这个函数，因为前者负责运行前后处理步骤，而后者则默默地忽略它们。
- en: 'Example:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE15]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
