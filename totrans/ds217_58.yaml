- en: All about metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/datasets/about_metrics](https://huggingface.co/docs/datasets/about_metrics)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/datasets/v2.17.0/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/entry/start.146395b0.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/scheduler.bdbef820.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/singletons.98dc5b8b.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/index.8a885b74.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/paths.a483fec8.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/entry/app.e612c4fb.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/index.c0aea24a.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/nodes/0.5e8dbda6.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/nodes/8.3c643b0a.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/Tip.31005f7d.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/Heading.2eb892cb.js">
  prefs: []
  type: TYPE_NORMAL
- en: Metrics is deprecated in ðŸ¤— Datasets. To learn more about how to use metrics,
    take a look at the library ðŸ¤— [Evaluate](https://huggingface.co/docs/evaluate/index)!
    In addition to metrics, you can find more tools for evaluating models and datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'ðŸ¤— Datasets provides access to a wide range of NLP metrics. You can load metrics
    associated with benchmark datasets like GLUE or SQuAD, and complex metrics like
    BLEURT or BERTScore, with a single command: [load_metric()](/docs/datasets/v2.17.0/en/package_reference/loading_methods#datasets.load_metric).
    Once youâ€™ve loaded a metric, easily compute and evaluate a modelâ€™s performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'ELI5: load_metric'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loading a dataset and loading a metric share many similarities. This was an
    intentional design choice because we wanted to create a simple and unified experience.
    When you call [load_metric()](/docs/datasets/v2.17.0/en/package_reference/loading_methods#datasets.load_metric),
    the metric loading script is downloaded and imported from GitHub (if it hasnâ€™t
    already been downloaded before). It contains information about the metric such
    as itâ€™s citation, homepage, and description.
  prefs: []
  type: TYPE_NORMAL
- en: The metric loading script will instantiate and return a [Metric](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Metric)
    object. This stores the predictions and references, which you need to compute
    the metric values. The [Metric](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Metric)
    object is stored as an Apache Arrow table. As a result, the predictions and references
    are stored directly on disk with memory-mapping. This enables ðŸ¤— Datasets to do
    a lazy computation of the metric, and makes it easier to gather all the predictions
    in a distributed setting.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed evaluation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Computing metrics in a distributed environment can be tricky. Metric evaluation
    is executed in separate Python processes, or nodes, on different subsets of a
    dataset. Typically, when a metric score is additive (`f(AuB) = f(A) + f(B)`),
    you can use distributed reduce operations to gather the scores for each subset
    of the dataset. But when a metric is non-additive (`f(AuB) â‰  f(A) + f(B)`), itâ€™s
    not that simple. For example, you canâ€™t take the sum of the [F1](https://huggingface.co/metrics/f1)
    scores of each data subset as your **final metric**.
  prefs: []
  type: TYPE_NORMAL
- en: A common way to overcome this issue is to fallback on single process evaluation.
    The metrics are evaluated on a single GPU, which becomes inefficient.
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ¤— Datasets solves this issue by only computing the final metric on the first
    node. The predictions and references are computed and provided to the metric separately
    for each node. These are temporarily stored in an Apache Arrow table, avoiding
    cluttering the GPU or CPU memory. When you are ready to [Metric.compute()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Metric.compute)
    the final metric, the first node is able to access the predictions and references
    stored on all the other nodes. Once it has gathered all the predictions and references,
    [Metric.compute()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Metric.compute)
    will perform the final metric evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: This solution allows ðŸ¤— Datasets to perform distributed predictions, which is
    important for evaluation speed in distributed settings. At the same time, you
    can also use complex non-additive metrics without wasting valuable GPU or CPU
    memory.
  prefs: []
  type: TYPE_NORMAL
