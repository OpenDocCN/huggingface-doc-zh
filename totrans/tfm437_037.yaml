- en: Image-to-Image Task Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/image_to_image](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/image_to_image)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Image-to-Image task is the task where an application receives an image and outputs
    another image. This has various subtasks, including image enhancement (super resolution,
    low light enhancement, deraining and so on), image inpainting, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'This guide will show you how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use an image-to-image pipeline for super resolution task,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run image-to-image models for same task without a pipeline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that as of the time this guide is released, `image-to-image` pipeline only
    supports super resolution task.
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s begin by installing the necessary libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can now initialize the pipeline with a [Swin2SR model](https://huggingface.co/caidas/swin2SR-lightweight-x2-64).
    We can then infer with the pipeline by calling it with an image. As of now, only
    [Swin2SR models](https://huggingface.co/models?sort=trending&search=swin2sr) are
    supported in this pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, letâ€™s load an image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Photo of a cat](../Images/5579617dcca3856fe157c96460c7ccc9.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now do inference with the pipeline. We will get an upscaled version of
    the cat image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you wish to do inference yourself with no pipeline, you can use the `Swin2SRForImageSuperResolution`
    and `Swin2SRImageProcessor` classes of transformers. We will use the same model
    checkpoint for this. Letâ€™s initialize the model and the processor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`pipeline` abstracts away the preprocessing and postprocessing steps that we
    have to do ourselves, so letâ€™s preprocess the image. We will pass the image to
    the processor and then move the pixel values to GPU.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We can now infer the image by passing pixel values to the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Output is an object of type `ImageSuperResolutionOutput` that looks like below
    ðŸ‘‡
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We need to get the `reconstruction` and post-process it for visualization. Letâ€™s
    see how it looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We need to squeeze the output and get rid of axis 0, clip the values, then convert
    it to be numpy float. Then we will arrange axes to have the shape [1072, 880],
    and finally, bring the output back to range [0, 255].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Upscaled photo of a cat](../Images/bddb9797cb61a73629120e3f5fb0035f.png)'
  prefs: []
  type: TYPE_IMG
