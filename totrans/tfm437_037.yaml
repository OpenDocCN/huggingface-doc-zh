- en: Image-to-Image Task Guide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像到图像任务指南
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/image_to_image](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/image_to_image)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/transformers/v4.37.2/en/tasks/image_to_image](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/image_to_image)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Image-to-Image task is the task where an application receives an image and outputs
    another image. This has various subtasks, including image enhancement (super resolution,
    low light enhancement, deraining and so on), image inpainting, and more.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图像到图像任务是一个应用程序接收图像并输出另一幅图像的任务。这包括各种子任务，包括图像增强（超分辨率、低光增强、去雨等）、图像修补等。
- en: 'This guide will show you how to:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南将向您展示如何：
- en: Use an image-to-image pipeline for super resolution task,
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图像到图像管道进行超分辨率任务，
- en: Run image-to-image models for same task without a pipeline.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行相同任务的图像到图像模型，而不使用管道。
- en: Note that as of the time this guide is released, `image-to-image` pipeline only
    supports super resolution task.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，截至本指南发布时，`图像到图像`管道仅支持超分辨率任务。
- en: Let’s begin by installing the necessary libraries.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始安装必要的库。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We can now initialize the pipeline with a [Swin2SR model](https://huggingface.co/caidas/swin2SR-lightweight-x2-64).
    We can then infer with the pipeline by calling it with an image. As of now, only
    [Swin2SR models](https://huggingface.co/models?sort=trending&search=swin2sr) are
    supported in this pipeline.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用[Swin2SR模型](https://huggingface.co/caidas/swin2SR-lightweight-x2-64)初始化管道。然后，通过调用图像来推断管道。目前，此管道仅支持[Swin2SR模型](https://huggingface.co/models?sort=trending&search=swin2sr)。
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, let’s load an image.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们加载一张图像。
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Photo of a cat](../Images/5579617dcca3856fe157c96460c7ccc9.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![一只猫的照片](../Images/5579617dcca3856fe157c96460c7ccc9.png)'
- en: We can now do inference with the pipeline. We will get an upscaled version of
    the cat image.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用管道进行推断。我们将得到一张猫图像的放大版本。
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you wish to do inference yourself with no pipeline, you can use the `Swin2SRForImageSuperResolution`
    and `Swin2SRImageProcessor` classes of transformers. We will use the same model
    checkpoint for this. Let’s initialize the model and the processor.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望自己进行推断而不使用管道，可以使用transformers的`Swin2SRForImageSuperResolution`和`Swin2SRImageProcessor`类。我们将使用相同的模型检查点。让我们初始化模型和处理器。
- en: '[PRE6]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`pipeline` abstracts away the preprocessing and postprocessing steps that we
    have to do ourselves, so let’s preprocess the image. We will pass the image to
    the processor and then move the pixel values to GPU.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`pipeline`抽象了我们必须自己完成的预处理和后处理步骤，因此让我们对图像进行预处理。我们将图像传递给处理器，然后将像素值移动到GPU。'
- en: '[PRE7]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can now infer the image by passing pixel values to the model.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过将像素值传递给模型来推断图像。
- en: '[PRE8]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Output is an object of type `ImageSuperResolutionOutput` that looks like below
    👇
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是一个类型为`ImageSuperResolutionOutput`的对象，看起来像下面这样👇
- en: '[PRE9]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We need to get the `reconstruction` and post-process it for visualization. Let’s
    see how it looks like.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要获取`reconstruction`并对其进行后处理以进行可视化。让我们看看它是什么样子的。
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We need to squeeze the output and get rid of axis 0, clip the values, then convert
    it to be numpy float. Then we will arrange axes to have the shape [1072, 880],
    and finally, bring the output back to range [0, 255].
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要挤压输出并去掉轴0，裁剪值，然后将其转换为numpy浮点数。然后我们将排列轴以获得形状[1072, 880]，最后将输出带回范围[0, 255]。
- en: '[PRE11]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Upscaled photo of a cat](../Images/bddb9797cb61a73629120e3f5fb0035f.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![一只猫的放大照片](../Images/bddb9797cb61a73629120e3f5fb0035f.png)'
