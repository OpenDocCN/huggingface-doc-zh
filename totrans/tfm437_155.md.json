["```py\n>>> from transformers import DebertaConfig, DebertaModel\n\n>>> # Initializing a DeBERTa microsoft/deberta-base style configuration\n>>> configuration = DebertaConfig()\n\n>>> # Initializing a model (with random weights) from the microsoft/deberta-base style configuration\n>>> model = DebertaModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import DebertaTokenizer\n\n>>> tokenizer = DebertaTokenizer.from_pretrained(\"microsoft/deberta-base\")\n>>> tokenizer(\"Hello world\")[\"input_ids\"]\n[1, 31414, 232, 2]\n\n>>> tokenizer(\" Hello world\")[\"input_ids\"]\n[1, 20920, 232, 2]\n```", "```py\n0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1\n| first sequence    | second sequence |\n```", "```py\n>>> from transformers import DebertaTokenizerFast\n\n>>> tokenizer = DebertaTokenizerFast.from_pretrained(\"microsoft/deberta-base\")\n>>> tokenizer(\"Hello world\")[\"input_ids\"]\n[1, 31414, 232, 2]\n\n>>> tokenizer(\" Hello world\")[\"input_ids\"]\n[1, 20920, 232, 2]\n```", "```py\n0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1\n| first sequence    | second sequence |\n```", "```py\n>>> from transformers import AutoTokenizer, DebertaModel\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"microsoft/deberta-base\")\n>>> model = DebertaModel.from_pretrained(\"microsoft/deberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, DebertaForMaskedLM\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"lsanochkin/deberta-large-feedback\")\n>>> model = DebertaForMaskedLM.from_pretrained(\"lsanochkin/deberta-large-feedback\")\n\n>>> inputs = tokenizer(\"The capital of France is [MASK].\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # retrieve index of [MASK]\n>>> mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[0].nonzero(as_tuple=True)[0]\n\n>>> predicted_token_id = logits[0, mask_token_index].argmax(axis=-1)\n>>> tokenizer.decode(predicted_token_id)\n' Paris'\n\n>>> labels = tokenizer(\"The capital of France is Paris.\", return_tensors=\"pt\")[\"input_ids\"]\n>>> # mask labels of non-[MASK] tokens\n>>> labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -100)\n\n>>> outputs = model(**inputs, labels=labels)\n>>> round(outputs.loss.item(), 2)\n0.54\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, DebertaForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"microsoft/deberta-base\")\n>>> model = DebertaForSequenceClassification.from_pretrained(\"microsoft/deberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_id = logits.argmax().item()\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = DebertaForSequenceClassification.from_pretrained(\"microsoft/deberta-base\", num_labels=num_labels)\n\n>>> labels = torch.tensor([1])\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, DebertaForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"microsoft/deberta-base\")\n>>> model = DebertaForSequenceClassification.from_pretrained(\"microsoft/deberta-base\", problem_type=\"multi_label_classification\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_ids = torch.arange(0, logits.shape[-1])[torch.sigmoid(logits).squeeze(dim=0) > 0.5]\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = DebertaForSequenceClassification.from_pretrained(\n...     \"microsoft/deberta-base\", num_labels=num_labels, problem_type=\"multi_label_classification\"\n... )\n\n>>> labels = torch.sum(\n...     torch.nn.functional.one_hot(predicted_class_ids[None, :].clone(), num_classes=num_labels), dim=1\n... ).to(torch.float)\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, DebertaForTokenClassification\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"microsoft/deberta-base\")\n>>> model = DebertaForTokenClassification.from_pretrained(\"microsoft/deberta-base\")\n\n>>> inputs = tokenizer(\n...     \"HuggingFace is a company based in Paris and New York\", add_special_tokens=False, return_tensors=\"pt\"\n... )\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_token_class_ids = logits.argmax(-1)\n\n>>> # Note that tokens are classified rather then input words which means that\n>>> # there might be more predicted token classes than words.\n>>> # Multiple token classes might account for the same word\n>>> predicted_tokens_classes = [model.config.id2label[t.item()] for t in predicted_token_class_ids[0]]\n\n>>> labels = predicted_token_class_ids\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, DebertaForQuestionAnswering\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"Palak/microsoft_deberta-large_squad\")\n>>> model = DebertaForQuestionAnswering.from_pretrained(\"Palak/microsoft_deberta-large_squad\")\n\n>>> question, text = \"Who was Jim Henson?\", \"Jim Henson was a nice puppet\"\n\n>>> inputs = tokenizer(question, text, return_tensors=\"pt\")\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> answer_start_index = outputs.start_logits.argmax()\n>>> answer_end_index = outputs.end_logits.argmax()\n\n>>> predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]\n>>> tokenizer.decode(predict_answer_tokens, skip_special_tokens=True)\n' a nice puppet'\n\n>>> # target is \"nice puppet\"\n>>> target_start_index = torch.tensor([12])\n>>> target_end_index = torch.tensor([14])\n\n>>> outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)\n>>> loss = outputs.loss\n>>> round(loss.item(), 2)\n0.14\n```", "```py\n>>> from transformers import AutoTokenizer, TFDebertaModel\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"kamalkraj/deberta-base\")\n>>> model = TFDebertaModel.from_pretrained(\"kamalkraj/deberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"tf\")\n>>> outputs = model(inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, TFDebertaForMaskedLM\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"kamalkraj/deberta-base\")\n>>> model = TFDebertaForMaskedLM.from_pretrained(\"kamalkraj/deberta-base\")\n\n>>> inputs = tokenizer(\"The capital of France is [MASK].\", return_tensors=\"tf\")\n>>> logits = model(**inputs).logits\n\n>>> # retrieve index of [MASK]\n>>> mask_token_index = tf.where((inputs.input_ids == tokenizer.mask_token_id)[0])\n>>> selected_logits = tf.gather_nd(logits[0], indices=mask_token_index)\n\n>>> predicted_token_id = tf.math.argmax(selected_logits, axis=-1)\n```", "```py\n>>> labels = tokenizer(\"The capital of France is Paris.\", return_tensors=\"tf\")[\"input_ids\"]\n>>> # mask labels of non-[MASK] tokens\n>>> labels = tf.where(inputs.input_ids == tokenizer.mask_token_id, labels, -100)\n\n>>> outputs = model(**inputs, labels=labels)\n```", "```py\n>>> from transformers import AutoTokenizer, TFDebertaForSequenceClassification\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"kamalkraj/deberta-base\")\n>>> model = TFDebertaForSequenceClassification.from_pretrained(\"kamalkraj/deberta-base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"tf\")\n\n>>> logits = model(**inputs).logits\n\n>>> predicted_class_id = int(tf.math.argmax(logits, axis=-1)[0])\n```", "```py\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = TFDebertaForSequenceClassification.from_pretrained(\"kamalkraj/deberta-base\", num_labels=num_labels)\n\n>>> labels = tf.constant(1)\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, TFDebertaForTokenClassification\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"kamalkraj/deberta-base\")\n>>> model = TFDebertaForTokenClassification.from_pretrained(\"kamalkraj/deberta-base\")\n\n>>> inputs = tokenizer(\n...     \"HuggingFace is a company based in Paris and New York\", add_special_tokens=False, return_tensors=\"tf\"\n... )\n\n>>> logits = model(**inputs).logits\n>>> predicted_token_class_ids = tf.math.argmax(logits, axis=-1)\n\n>>> # Note that tokens are classified rather then input words which means that\n>>> # there might be more predicted token classes than words.\n>>> # Multiple token classes might account for the same word\n>>> predicted_tokens_classes = [model.config.id2label[t] for t in predicted_token_class_ids[0].numpy().tolist()]\n```", "```py\n>>> labels = predicted_token_class_ids\n>>> loss = tf.math.reduce_mean(model(**inputs, labels=labels).loss)\n```", "```py\n>>> from transformers import AutoTokenizer, TFDebertaForQuestionAnswering\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"kamalkraj/deberta-base\")\n>>> model = TFDebertaForQuestionAnswering.from_pretrained(\"kamalkraj/deberta-base\")\n\n>>> question, text = \"Who was Jim Henson?\", \"Jim Henson was a nice puppet\"\n\n>>> inputs = tokenizer(question, text, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n\n>>> answer_start_index = int(tf.math.argmax(outputs.start_logits, axis=-1)[0])\n>>> answer_end_index = int(tf.math.argmax(outputs.end_logits, axis=-1)[0])\n\n>>> predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]\n```", "```py\n>>> # target is \"nice puppet\"\n>>> target_start_index = tf.constant([14])\n>>> target_end_index = tf.constant([15])\n\n>>> outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)\n>>> loss = tf.math.reduce_mean(outputs.loss)\n```"]