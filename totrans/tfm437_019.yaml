- en: Token classification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/transformers/v4.37.2/en/tasks/token_classification](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/token_classification)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/359.8d52c1d8.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Tip.c2ecdbf4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Youtube.e1129c6f.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/DocNotebookDropdown.3e6b3817.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Markdown.fef84341.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/stores.c16bc1a5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/wVHdVlPScxA](https://www.youtube-nocookie.com/embed/wVHdVlPScxA)'
  prefs: []
  type: TYPE_NORMAL
- en: Token classification assigns a label to individual tokens in a sentence. One
    of the most common token classification tasks is Named Entity Recognition (NER).
    NER attempts to find a label for each entity in a sentence, such as a person,
    location, or organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'This guide will show you how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Finetune [DistilBERT](https://huggingface.co/distilbert-base-uncased) on the
    [WNUT 17](https://huggingface.co/datasets/wnut_17) dataset to detect new entities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your finetuned model for inference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The task illustrated in this tutorial is supported by the following model architectures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[ALBERT](../model_doc/albert), [BERT](../model_doc/bert), [BigBird](../model_doc/big_bird),
    [BioGpt](../model_doc/biogpt), [BLOOM](../model_doc/bloom), [BROS](../model_doc/bros),
    [CamemBERT](../model_doc/camembert), [CANINE](../model_doc/canine), [ConvBERT](../model_doc/convbert),
    [Data2VecText](../model_doc/data2vec-text), [DeBERTa](../model_doc/deberta), [DeBERTa-v2](../model_doc/deberta-v2),
    [DistilBERT](../model_doc/distilbert), [ELECTRA](../model_doc/electra), [ERNIE](../model_doc/ernie),
    [ErnieM](../model_doc/ernie_m), [ESM](../model_doc/esm), [Falcon](../model_doc/falcon),
    [FlauBERT](../model_doc/flaubert), [FNet](../model_doc/fnet), [Funnel Transformer](../model_doc/funnel),
    [GPT-Sw3](../model_doc/gpt-sw3), [OpenAI GPT-2](../model_doc/gpt2), [GPTBigCode](../model_doc/gpt_bigcode),
    [GPT Neo](../model_doc/gpt_neo), [GPT NeoX](../model_doc/gpt_neox), [I-BERT](../model_doc/ibert),
    [LayoutLM](../model_doc/layoutlm), [LayoutLMv2](../model_doc/layoutlmv2), [LayoutLMv3](../model_doc/layoutlmv3),
    [LiLT](../model_doc/lilt), [Longformer](../model_doc/longformer), [LUKE](../model_doc/luke),
    [MarkupLM](../model_doc/markuplm), [MEGA](../model_doc/mega), [Megatron-BERT](../model_doc/megatron-bert),
    [MobileBERT](../model_doc/mobilebert), [MPNet](../model_doc/mpnet), [MPT](../model_doc/mpt),
    [MRA](../model_doc/mra), [Nezha](../model_doc/nezha), [NystrÃ¶mformer](../model_doc/nystromformer),
    [Phi](../model_doc/phi), [QDQBert](../model_doc/qdqbert), [RemBERT](../model_doc/rembert),
    [RoBERTa](../model_doc/roberta), [RoBERTa-PreLayerNorm](../model_doc/roberta-prelayernorm),
    [RoCBert](../model_doc/roc_bert), [RoFormer](../model_doc/roformer), [SqueezeBERT](../model_doc/squeezebert),
    [XLM](../model_doc/xlm), [XLM-RoBERTa](../model_doc/xlm-roberta), [XLM-RoBERTa-XL](../model_doc/xlm-roberta-xl),
    [XLNet](../model_doc/xlnet), [X-MOD](../model_doc/xmod), [YOSO](../model_doc/yoso)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We encourage you to login to your Hugging Face account so you can upload and
    share your model with the community. When prompted, enter your token to login:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Load WNUT 17 dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by loading the WNUT 17 dataset from the ðŸ¤— Datasets library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Each number in `ner_tags` represents an entity. Convert the numbers to their
    label names to find out what the entities are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The letter that prefixes each `ner_tag` indicates the token position of the
    entity:'
  prefs: []
  type: TYPE_NORMAL
- en: '`B-` indicates the beginning of an entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`I-` indicates a token is contained inside the same entity (for example, the
    `State` token is a part of an entity like `Empire State Building`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0` indicates the token doesnâ€™t correspond to any entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocess
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/iY2AZYdZAr0](https://www.youtube-nocookie.com/embed/iY2AZYdZAr0)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to load a DistilBERT tokenizer to preprocess the `tokens`
    field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you saw in the example `tokens` field above, it looks like the input has
    already been tokenized. But the input actually hasnâ€™t been tokenized yet and youâ€™ll
    need to set `is_split_into_words=True` to tokenize the words into subwords. For
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this adds some special tokens `[CLS]` and `[SEP]` and the subword
    tokenization creates a mismatch between the input and labels. A single word corresponding
    to a single label may now be split into two subwords. Youâ€™ll need to realign the
    tokens and labels by:'
  prefs: []
  type: TYPE_NORMAL
- en: Mapping all tokens to their corresponding word with the [`word_ids`](https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.BatchEncoding.word_ids)
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assigning the label `-100` to the special tokens `[CLS]` and `[SEP]` so theyâ€™re
    ignored by the PyTorch loss function (see [CrossEntropyLoss](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only labeling the first token of a given word. Assign `-100` to other subtokens
    from the same word.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is how you can create a function to realign the tokens and labels, and
    truncate sequences to be no longer than DistilBERTâ€™s maximum input length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply the preprocessing function over the entire dataset, use ðŸ¤— Datasets
    [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)
    function. You can speed up the `map` function by setting `batched=True` to process
    multiple elements of the dataset at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now create a batch of examples using [DataCollatorWithPadding](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DataCollatorWithPadding).
    Itâ€™s more efficient to *dynamically pad* the sentences to the longest length in
    a batch during collation, instead of padding the whole dataset to the maximum
    length.
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Including a metric during training is often helpful for evaluating your modelâ€™s
    performance. You can quickly load a evaluation method with the ðŸ¤— [Evaluate](https://huggingface.co/docs/evaluate/index)
    library. For this task, load the [seqeval](https://huggingface.co/spaces/evaluate-metric/seqeval)
    framework (see the ðŸ¤— Evaluate [quick tour](https://huggingface.co/docs/evaluate/a_quick_tour)
    to learn more about how to load and compute a metric). Seqeval actually produces
    several scores: precision, recall, F1, and accuracy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the NER labels first, and then create a function that passes your true
    predictions and true labels to `compute` to calculate the scores:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Your `compute_metrics` function is ready to go now, and youâ€™ll return to it
    when you setup your training.
  prefs: []
  type: TYPE_NORMAL
- en: Train
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start training your model, create a map of the expected ids to their
    labels with `id2label` and `label2id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: If you arenâ€™t familiar with finetuning a model with the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    take a look at the basic tutorial [here](../training#train-with-pytorch-trainer)!
  prefs: []
  type: TYPE_NORMAL
- en: 'Youâ€™re ready to start training your model now! Load DistilBERT with [AutoModelForTokenClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForTokenClassification)
    along with the number of expected labels, and the label mappings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, only three steps remain:'
  prefs: []
  type: TYPE_NORMAL
- en: Define your training hyperparameters in [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments).
    The only required parameter is `output_dir` which specifies where to save your
    model. Youâ€™ll push this model to the Hub by setting `push_to_hub=True` (you need
    to be signed in to Hugging Face to upload your model). At the end of each epoch,
    the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    will evaluate the seqeval scores and save the training checkpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the training arguments to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    along with the model, dataset, tokenizer, data collator, and `compute_metrics`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)
    to finetune your model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once training is completed, share your model to the Hub with the [push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)
    method so everyone can use your model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: If you arenâ€™t familiar with finetuning a model with Keras, take a look at the
    basic tutorial [here](../training#train-a-tensorflow-model-with-keras)!
  prefs: []
  type: TYPE_NORMAL
- en: 'To finetune a model in TensorFlow, start by setting up an optimizer function,
    learning rate schedule, and some training hyperparameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can load DistilBERT with [TFAutoModelForTokenClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForTokenClassification)
    along with the number of expected labels, and the label mappings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert your datasets to the `tf.data.Dataset` format with [prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the model for training with [`compile`](https://keras.io/api/models/model_training_apis/#compile-method).
    Note that Transformers models all have a default task-relevant loss function,
    so you donâ€™t need to specify one unless you want to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The last two things to setup before you start training is to compute the seqeval
    scores from the predictions, and provide a way to push your model to the Hub.
    Both are done by using [Keras callbacks](../main_classes/keras_callbacks).
  prefs: []
  type: TYPE_NORMAL
- en: 'Pass your `compute_metrics` function to [KerasMetricCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.KerasMetricCallback):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify where to push your model and tokenizer in the [PushToHubCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.PushToHubCallback):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then bundle your callbacks together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, youâ€™re ready to start training your model! Call [`fit`](https://keras.io/api/models/model_training_apis/#fit-method)
    with your training and validation datasets, the number of epochs, and your callbacks
    to finetune the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Once training is completed, your model is automatically uploaded to the Hub
    so everyone can use it!
  prefs: []
  type: TYPE_NORMAL
- en: For a more in-depth example of how to finetune a model for token classification,
    take a look at the corresponding [PyTorch notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/token_classification.ipynb)
    or [TensorFlow notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/token_classification-tf.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: Inference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Great, now that youâ€™ve finetuned a model, you can use it for inference!
  prefs: []
  type: TYPE_NORMAL
- en: 'Grab some text youâ€™d like to run inference on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The simplest way to try out your finetuned model for inference is to use it
    in a [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline).
    Instantiate a `pipeline` for NER with your model, and pass your text to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also manually replicate the results of the `pipeline` if youâ€™d like:'
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: 'Tokenize the text and return PyTorch tensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass your inputs to the model and return the `logits`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the class with the highest probability, and use the modelâ€™s `id2label`
    mapping to convert it to a text label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: 'Tokenize the text and return TensorFlow tensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass your inputs to the model and return the `logits`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the class with the highest probability, and use the modelâ€™s `id2label`
    mapping to convert it to a text label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
