- en: Token classification
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记分类
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/token_classification](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/token_classification)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/transformers/v4.37.2/en/tasks/token_classification](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/token_classification)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/wVHdVlPScxA](https://www.youtube-nocookie.com/embed/wVHdVlPScxA)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube-nocookie.com/embed/wVHdVlPScxA](https://www.youtube-nocookie.com/embed/wVHdVlPScxA)'
- en: Token classification assigns a label to individual tokens in a sentence. One
    of the most common token classification tasks is Named Entity Recognition (NER).
    NER attempts to find a label for each entity in a sentence, such as a person,
    location, or organization.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 标记分类为句子中的每个单词分配一个标签。最常见的标记分类任务之一是命名实体识别（NER）。NER试图为句子中的每个实体找到一个标签，比如人名、地点或组织。
- en: 'This guide will show you how to:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南将向您展示如何：
- en: Finetune [DistilBERT](https://huggingface.co/distilbert-base-uncased) on the
    [WNUT 17](https://huggingface.co/datasets/wnut_17) dataset to detect new entities.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在WNUT 17数据集上对[DistilBERT](https://huggingface.co/distilbert-base-uncased)进行微调，以检测新实体。
- en: Use your finetuned model for inference.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您微调的模型进行推断。
- en: 'The task illustrated in this tutorial is supported by the following model architectures:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中演示的任务由以下模型架构支持：
- en: '[ALBERT](../model_doc/albert), [BERT](../model_doc/bert), [BigBird](../model_doc/big_bird),
    [BioGpt](../model_doc/biogpt), [BLOOM](../model_doc/bloom), [BROS](../model_doc/bros),
    [CamemBERT](../model_doc/camembert), [CANINE](../model_doc/canine), [ConvBERT](../model_doc/convbert),
    [Data2VecText](../model_doc/data2vec-text), [DeBERTa](../model_doc/deberta), [DeBERTa-v2](../model_doc/deberta-v2),
    [DistilBERT](../model_doc/distilbert), [ELECTRA](../model_doc/electra), [ERNIE](../model_doc/ernie),
    [ErnieM](../model_doc/ernie_m), [ESM](../model_doc/esm), [Falcon](../model_doc/falcon),
    [FlauBERT](../model_doc/flaubert), [FNet](../model_doc/fnet), [Funnel Transformer](../model_doc/funnel),
    [GPT-Sw3](../model_doc/gpt-sw3), [OpenAI GPT-2](../model_doc/gpt2), [GPTBigCode](../model_doc/gpt_bigcode),
    [GPT Neo](../model_doc/gpt_neo), [GPT NeoX](../model_doc/gpt_neox), [I-BERT](../model_doc/ibert),
    [LayoutLM](../model_doc/layoutlm), [LayoutLMv2](../model_doc/layoutlmv2), [LayoutLMv3](../model_doc/layoutlmv3),
    [LiLT](../model_doc/lilt), [Longformer](../model_doc/longformer), [LUKE](../model_doc/luke),
    [MarkupLM](../model_doc/markuplm), [MEGA](../model_doc/mega), [Megatron-BERT](../model_doc/megatron-bert),
    [MobileBERT](../model_doc/mobilebert), [MPNet](../model_doc/mpnet), [MPT](../model_doc/mpt),
    [MRA](../model_doc/mra), [Nezha](../model_doc/nezha), [Nyströmformer](../model_doc/nystromformer),
    [Phi](../model_doc/phi), [QDQBert](../model_doc/qdqbert), [RemBERT](../model_doc/rembert),
    [RoBERTa](../model_doc/roberta), [RoBERTa-PreLayerNorm](../model_doc/roberta-prelayernorm),
    [RoCBert](../model_doc/roc_bert), [RoFormer](../model_doc/roformer), [SqueezeBERT](../model_doc/squeezebert),
    [XLM](../model_doc/xlm), [XLM-RoBERTa](../model_doc/xlm-roberta), [XLM-RoBERTa-XL](../model_doc/xlm-roberta-xl),
    [XLNet](../model_doc/xlnet), [X-MOD](../model_doc/xmod), [YOSO](../model_doc/yoso)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[ALBERT](../model_doc/albert), [BERT](../model_doc/bert), [BigBird](../model_doc/big_bird),
    [BioGpt](../model_doc/biogpt), [BLOOM](../model_doc/bloom), [BROS](../model_doc/bros),
    [CamemBERT](../model_doc/camembert), [CANINE](../model_doc/canine), [ConvBERT](../model_doc/convbert),
    [Data2VecText](../model_doc/data2vec-text), [DeBERTa](../model_doc/deberta), [DeBERTa-v2](../model_doc/deberta-v2),
    [DistilBERT](../model_doc/distilbert), [ELECTRA](../model_doc/electra), [ERNIE](../model_doc/ernie),
    [ErnieM](../model_doc/ernie_m), [ESM](../model_doc/esm), [Falcon](../model_doc/falcon),
    [FlauBERT](../model_doc/flaubert), [FNet](../model_doc/fnet), [Funnel Transformer](../model_doc/funnel),
    [GPT-Sw3](../model_doc/gpt-sw3), [OpenAI GPT-2](../model_doc/gpt2), [GPTBigCode](../model_doc/gpt_bigcode),
    [GPT Neo](../model_doc/gpt_neo), [GPT NeoX](../model_doc/gpt_neox), [I-BERT](../model_doc/ibert),
    [LayoutLM](../model_doc/layoutlm), [LayoutLMv2](../model_doc/layoutlmv2), [LayoutLMv3](../model_doc/layoutlmv3),
    [LiLT](../model_doc/lilt), [Longformer](../model_doc/longformer), [LUKE](../model_doc/luke),
    [MarkupLM](../model_doc/markuplm), [MEGA](../model_doc/mega), [Megatron-BERT](../model_doc/megatron-bert),
    [MobileBERT](../model_doc/mobilebert), [MPNet](../model_doc/mpnet), [MPT](../model_doc/mpt),
    [MRA](../model_doc/mra), [Nezha](../model_doc/nezha), [Nyströmformer](../model_doc/nystromformer),
    [Phi](../model_doc/phi), [QDQBert](../model_doc/qdqbert), [RemBERT](../model_doc/rembert),
    [RoBERTa](../model_doc/roberta), [RoBERTa-PreLayerNorm](../model_doc/roberta-prelayernorm),
    [RoCBert](../model_doc/roc_bert), [RoFormer](../model_doc/roformer), [SqueezeBERT](../model_doc/squeezebert),
    [XLM](../model_doc/xlm), [XLM-RoBERTa](../model_doc/xlm-roberta), [XLM-RoBERTa-XL](../model_doc/xlm-roberta-xl),
    [XLNet](../model_doc/xlnet), [X-MOD](../model_doc/xmod), [YOSO](../model_doc/yoso)'
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保已安装所有必要的库：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We encourage you to login to your Hugging Face account so you can upload and
    share your model with the community. When prompted, enter your token to login:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励您登录您的Hugging Face账户，这样您就可以上传和分享您的模型给社区。在提示时，输入您的令牌以登录：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Load WNUT 17 dataset
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载WNUT 17数据集
- en: 'Start by loading the WNUT 17 dataset from the 🤗 Datasets library:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先从🤗数据集库中加载WNUT 17数据集：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then take a look at an example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后看一个例子：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Each number in `ner_tags` represents an entity. Convert the numbers to their
    label names to find out what the entities are:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`ner_tags`中的每个数字代表一个实体。将数字转换为它们的标签名称，以找出这些实体是什么：'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The letter that prefixes each `ner_tag` indicates the token position of the
    entity:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`ner_tag`前缀的字母表示实体的标记位置：
- en: '`B-` indicates the beginning of an entity.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`B-`表示一个实体的开始。'
- en: '`I-` indicates a token is contained inside the same entity (for example, the
    `State` token is a part of an entity like `Empire State Building`).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`I-`表示一个单词包含在同一个实体中（例如，`State`单词是`Empire State Building`这样一个实体的一部分）。'
- en: '`0` indicates the token doesn’t correspond to any entity.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`0`表示该标记不对应任何实体。'
- en: Preprocess
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理
- en: '[https://www.youtube-nocookie.com/embed/iY2AZYdZAr0](https://www.youtube-nocookie.com/embed/iY2AZYdZAr0)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube-nocookie.com/embed/iY2AZYdZAr0](https://www.youtube-nocookie.com/embed/iY2AZYdZAr0)'
- en: 'The next step is to load a DistilBERT tokenizer to preprocess the `tokens`
    field:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是加载一个DistilBERT分词器来预处理`tokens`字段：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you saw in the example `tokens` field above, it looks like the input has
    already been tokenized. But the input actually hasn’t been tokenized yet and you’ll
    need to set `is_split_into_words=True` to tokenize the words into subwords. For
    example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上面的示例 `tokens` 字段中看到的，看起来输入已经被标记化了。但实际上输入还没有被标记化，您需要设置 `is_split_into_words=True`
    将单词标记化为子词。例如：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, this adds some special tokens `[CLS]` and `[SEP]` and the subword
    tokenization creates a mismatch between the input and labels. A single word corresponding
    to a single label may now be split into two subwords. You’ll need to realign the
    tokens and labels by:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这会添加一些特殊标记 `[CLS]` 和 `[SEP]`，子词标记化会导致输入和标签之间的不匹配。现在，一个对应于单个标签的单词可能会被拆分为两个子词。您需要通过以下方式重新对齐标记和标签：
- en: Mapping all tokens to their corresponding word with the [`word_ids`](https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.BatchEncoding.word_ids)
    method.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [`word_ids`](https://huggingface.co/docs/transformers/main_classes/tokenizer#transformers.BatchEncoding.word_ids)
    方法将所有标记映射到它们对应的单词。
- en: Assigning the label `-100` to the special tokens `[CLS]` and `[SEP]` so they’re
    ignored by the PyTorch loss function (see [CrossEntropyLoss](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html)).
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标签 `-100` 分配给特殊标记 `[CLS]` 和 `[SEP]`，以便它们被 PyTorch 损失函数忽略（参见 [CrossEntropyLoss](https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html)）。
- en: Only labeling the first token of a given word. Assign `-100` to other subtokens
    from the same word.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅标记给定单词的第一个标记。将其他来自同一单词的子标记分配为 `-100`。
- en: 'Here is how you can create a function to realign the tokens and labels, and
    truncate sequences to be no longer than DistilBERT’s maximum input length:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何创建一个函数来重新对齐标记和标签，并截断序列，使其不超过 DistilBERT 的最大输入长度：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To apply the preprocessing function over the entire dataset, use 🤗 Datasets
    [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)
    function. You can speed up the `map` function by setting `batched=True` to process
    multiple elements of the dataset at once:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要在整个数据集上应用预处理函数，请使用 🤗 Datasets [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)
    函数。您可以通过设置 `batched=True` 来加速 `map` 函数，以一次处理数据集的多个元素：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now create a batch of examples using [DataCollatorWithPadding](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DataCollatorWithPadding).
    It’s more efficient to *dynamically pad* the sentences to the longest length in
    a batch during collation, instead of padding the whole dataset to the maximum
    length.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用 [DataCollatorWithPadding](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DataCollatorWithPadding)
    创建一批示例。在整理过程中，将句子动态填充到批次中的最大长度，而不是将整个数据集填充到最大长度。
- en: PytorchHide Pytorch content
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: PytorchHide Pytorch 内容
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: TensorFlowHide TensorFlow content
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlowHide TensorFlow 内容
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Evaluate
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 评估
- en: 'Including a metric during training is often helpful for evaluating your model’s
    performance. You can quickly load a evaluation method with the 🤗 [Evaluate](https://huggingface.co/docs/evaluate/index)
    library. For this task, load the [seqeval](https://huggingface.co/spaces/evaluate-metric/seqeval)
    framework (see the 🤗 Evaluate [quick tour](https://huggingface.co/docs/evaluate/a_quick_tour)
    to learn more about how to load and compute a metric). Seqeval actually produces
    several scores: precision, recall, F1, and accuracy.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练过程中包含一个指标通常有助于评估模型的性能。您可以使用 🤗 [Evaluate](https://huggingface.co/docs/evaluate/index)
    库快速加载评估方法。对于这个任务，加载 [seqeval](https://huggingface.co/spaces/evaluate-metric/seqeval)
    框架（查看 🤗 Evaluate [快速入门](https://huggingface.co/docs/evaluate/a_quick_tour) 了解如何加载和计算指标）。Seqeval
    实际上会生成几个分数：精确度、召回率、F1 和准确度。
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Get the NER labels first, and then create a function that passes your true
    predictions and true labels to `compute` to calculate the scores:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先获取 NER 标签，然后创建一个函数，将您的真实预测和真实标签传递给 `compute` 来计算分数：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Your `compute_metrics` function is ready to go now, and you’ll return to it
    when you setup your training.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 `compute_metrics` 函数现在已经准备就绪，当您设置训练时会返回到它。
- en: Train
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练
- en: 'Before you start training your model, create a map of the expected ids to their
    labels with `id2label` and `label2id`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始训练模型之前，使用 `id2label` 和 `label2id` 创建预期 id 到标签的映射：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: PytorchHide Pytorch content
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: PytorchHide Pytorch 内容
- en: If you aren’t familiar with finetuning a model with the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    take a look at the basic tutorial [here](../training#train-with-pytorch-trainer)!
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉使用 [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    对模型进行微调，请查看这里的基本教程 [here](../training#train-with-pytorch-trainer)！
- en: 'You’re ready to start training your model now! Load DistilBERT with [AutoModelForTokenClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForTokenClassification)
    along with the number of expected labels, and the label mappings:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好开始训练您的模型了！使用 [AutoModelForTokenClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForTokenClassification)
    加载 DistilBERT，以及预期标签数和标签映射：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At this point, only three steps remain:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，只剩下三个步骤：
- en: Define your training hyperparameters in [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments).
    The only required parameter is `output_dir` which specifies where to save your
    model. You’ll push this model to the Hub by setting `push_to_hub=True` (you need
    to be signed in to Hugging Face to upload your model). At the end of each epoch,
    the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    will evaluate the seqeval scores and save the training checkpoint.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)
    中定义您的训练超参数。唯一必需的参数是 `output_dir`，指定保存模型的位置。通过设置 `push_to_hub=True` 将此模型推送到 Hub（您需要登录
    Hugging Face 以上传模型）。在每个时代结束时，[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    将评估 seqeval 分数并保存训练检查点。
- en: Pass the training arguments to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    along with the model, dataset, tokenizer, data collator, and `compute_metrics`
    function.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将训练参数传递给[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)，以及模型、数据集、分词器、数据整理器和`compute_metrics`函数。
- en: Call [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)
    to finetune your model.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用[train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)来微调您的模型。
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once training is completed, share your model to the Hub with the [push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)
    method so everyone can use your model:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 培训完成后，使用[push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)方法将您的模型共享到Hub，以便每个人都可以使用您的模型：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: TensorFlowHide TensorFlow content
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏TensorFlow内容
- en: If you aren’t familiar with finetuning a model with Keras, take a look at the
    basic tutorial [here](../training#train-a-tensorflow-model-with-keras)!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉使用Keras微调模型，请查看基本教程[这里](../training#train-a-tensorflow-model-with-keras)！
- en: 'To finetune a model in TensorFlow, start by setting up an optimizer function,
    learning rate schedule, and some training hyperparameters:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要在TensorFlow中微调模型，请首先设置优化器函数、学习率调度和一些训练超参数：
- en: '[PRE17]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then you can load DistilBERT with [TFAutoModelForTokenClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForTokenClassification)
    along with the number of expected labels, and the label mappings:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以加载DistilBERT与[TFAutoModelForTokenClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForTokenClassification)以及预期标签的数量和标签映射：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Convert your datasets to the `tf.data.Dataset` format with [prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset)将数据集转换为`tf.data.Dataset`格式：
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Configure the model for training with [`compile`](https://keras.io/api/models/model_training_apis/#compile-method).
    Note that Transformers models all have a default task-relevant loss function,
    so you don’t need to specify one unless you want to:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`compile`](https://keras.io/api/models/model_training_apis/#compile-method)配置模型进行训练。请注意，Transformers模型都有一个默认的与任务相关的损失函数，因此除非您想要指定一个，否则不需要指定：
- en: '[PRE20]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The last two things to setup before you start training is to compute the seqeval
    scores from the predictions, and provide a way to push your model to the Hub.
    Both are done by using [Keras callbacks](../main_classes/keras_callbacks).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始训练之前设置的最后两件事是从预测中计算seqeval分数，并提供一种将您的模型推送到Hub的方法。这两者都可以使用[Keras callbacks](../main_classes/keras_callbacks)来完成。
- en: 'Pass your `compute_metrics` function to [KerasMetricCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.KerasMetricCallback):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的`compute_metrics`函数传递给[KerasMetricCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.KerasMetricCallback)：
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Specify where to push your model and tokenizer in the [PushToHubCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.PushToHubCallback):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在[PushToHubCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.PushToHubCallback)中指定要推送模型和分词器的位置：
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then bundle your callbacks together:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将您的回调捆绑在一起：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, you’re ready to start training your model! Call [`fit`](https://keras.io/api/models/model_training_apis/#fit-method)
    with your training and validation datasets, the number of epochs, and your callbacks
    to finetune the model:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您已经准备好开始训练您的模型了！使用您的训练和验证数据集、时代数和回调调用[`fit`](https://keras.io/api/models/model_training_apis/#fit-method)来微调模型：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Once training is completed, your model is automatically uploaded to the Hub
    so everyone can use it!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦训练完成，您的模型将自动上传到Hub，以便每个人都可以使用它！
- en: For a more in-depth example of how to finetune a model for token classification,
    take a look at the corresponding [PyTorch notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/token_classification.ipynb)
    or [TensorFlow notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/token_classification-tf.ipynb).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何为标记分类微调模型的更深入示例，请查看相应的[PyTorch笔记本](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/token_classification.ipynb)或[TensorFlow笔记本](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/token_classification-tf.ipynb)。
- en: Inference
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推理
- en: Great, now that you’ve finetuned a model, you can use it for inference!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在您已经微调了一个模型，可以用它进行推理了！
- en: 'Grab some text you’d like to run inference on:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一些您想要运行推理的文本：
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The simplest way to try out your finetuned model for inference is to use it
    in a [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline).
    Instantiate a `pipeline` for NER with your model, and pass your text to it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用您微调的模型进行推理的最简单方法是在[pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)中使用它。用您的模型实例化一个NER的`pipeline`，并将文本传递给它：
- en: '[PRE26]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can also manually replicate the results of the `pipeline` if you’d like:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您也可以手动复制`pipeline`的结果：
- en: PytorchHide Pytorch content
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏Pytorch内容
- en: 'Tokenize the text and return PyTorch tensors:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对文本进行标记化并返回PyTorch张量：
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Pass your inputs to the model and return the `logits`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的输入传递给模型并返回`logits`：
- en: '[PRE28]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Get the class with the highest probability, and use the model’s `id2label`
    mapping to convert it to a text label:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 获取具有最高概率的类，并使用模型的`id2label`映射将其转换为文本标签：
- en: '[PRE29]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: TensorFlowHide TensorFlow content
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏TensorFlow内容
- en: 'Tokenize the text and return TensorFlow tensors:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对文本进行标记化并返回TensorFlow张量：
- en: '[PRE30]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Pass your inputs to the model and return the `logits`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将您的输入传递给模型并返回`logits`：
- en: '[PRE31]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Get the class with the highest probability, and use the model’s `id2label`
    mapping to convert it to a text label:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 获取具有最高概率的类，并使用模型的`id2label`映射将其转换为文本标签：
- en: '[PRE32]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
