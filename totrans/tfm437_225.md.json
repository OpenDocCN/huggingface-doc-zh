["```py\n>>> from transformers import RealmConfig, RealmEmbedder\n\n>>> # Initializing a REALM realm-cc-news-pretrained-* style configuration\n>>> configuration = RealmConfig()\n\n>>> # Initializing a model (with random weights) from the google/realm-cc-news-pretrained-embedder style configuration\n>>> model = RealmEmbedder(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1\n| first sequence    | second sequence |\n```", "```py\n>>> from transformers import RealmTokenizer\n\n>>> # batch_size = 2, num_candidates = 2\n>>> text = [[\"Hello world!\", \"Nice to meet you!\"], [\"The cute cat.\", \"The adorable dog.\"]]\n\n>>> tokenizer = RealmTokenizer.from_pretrained(\"google/realm-cc-news-pretrained-encoder\")\n>>> tokenized_text = tokenizer.batch_encode_candidates(text, max_length=10, return_tensors=\"pt\")\n```", "```py\n>>> from transformers import RealmTokenizerFast\n\n>>> # batch_size = 2, num_candidates = 2\n>>> text = [[\"Hello world!\", \"Nice to meet you!\"], [\"The cute cat.\", \"The adorable dog.\"]]\n\n>>> tokenizer = RealmTokenizerFast.from_pretrained(\"google/realm-cc-news-pretrained-encoder\")\n>>> tokenized_text = tokenizer.batch_encode_candidates(text, max_length=10, return_tensors=\"pt\")\n```", "```py\n>>> from transformers import AutoTokenizer, RealmEmbedder\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/realm-cc-news-pretrained-embedder\")\n>>> model = RealmEmbedder.from_pretrained(\"google/realm-cc-news-pretrained-embedder\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> projected_score = outputs.projected_score\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, RealmScorer\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/realm-cc-news-pretrained-scorer\")\n>>> model = RealmScorer.from_pretrained(\"google/realm-cc-news-pretrained-scorer\", num_candidates=2)\n\n>>> # batch_size = 2, num_candidates = 2\n>>> input_texts = [\"How are you?\", \"What is the item in the picture?\"]\n>>> candidates_texts = [[\"Hello world!\", \"Nice to meet you!\"], [\"A cute cat.\", \"An adorable dog.\"]]\n\n>>> inputs = tokenizer(input_texts, return_tensors=\"pt\")\n>>> candidates_inputs = tokenizer.batch_encode_candidates(candidates_texts, max_length=10, return_tensors=\"pt\")\n\n>>> outputs = model(\n...     **inputs,\n...     candidate_input_ids=candidates_inputs.input_ids,\n...     candidate_attention_mask=candidates_inputs.attention_mask,\n...     candidate_token_type_ids=candidates_inputs.token_type_ids,\n... )\n>>> relevance_score = outputs.relevance_score\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, RealmKnowledgeAugEncoder\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/realm-cc-news-pretrained-encoder\")\n>>> model = RealmKnowledgeAugEncoder.from_pretrained(\n...     \"google/realm-cc-news-pretrained-encoder\", num_candidates=2\n... )\n\n>>> # batch_size = 2, num_candidates = 2\n>>> text = [[\"Hello world!\", \"Nice to meet you!\"], [\"The cute cat.\", \"The adorable dog.\"]]\n\n>>> inputs = tokenizer.batch_encode_candidates(text, max_length=10, return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n```", "```py\n>>> import torch\n>>> from transformers import RealmForOpenQA, RealmRetriever, AutoTokenizer\n\n>>> retriever = RealmRetriever.from_pretrained(\"google/realm-orqa-nq-openqa\")\n>>> tokenizer = AutoTokenizer.from_pretrained(\"google/realm-orqa-nq-openqa\")\n>>> model = RealmForOpenQA.from_pretrained(\"google/realm-orqa-nq-openqa\", retriever=retriever)\n\n>>> question = \"Who is the pioneer in modern computer science?\"\n>>> question_ids = tokenizer([question], return_tensors=\"pt\")\n>>> answer_ids = tokenizer(\n...     [\"alan mathison turing\"],\n...     add_special_tokens=False,\n...     return_token_type_ids=False,\n...     return_attention_mask=False,\n... ).input_ids\n\n>>> reader_output, predicted_answer_ids = model(**question_ids, answer_ids=answer_ids, return_dict=False)\n>>> predicted_answer = tokenizer.decode(predicted_answer_ids)\n>>> loss = reader_output.loss\n```"]