["```py\n>>> from datasets import Dataset\n>>> data = [[1, 2],[3, 4]]\n>>> ds = Dataset.from_dict({\"data\": data})\n>>> ds = ds.with_format(\"tf\")\n>>> ds[0]\n{'data': <tf.Tensor: shape=(2,), dtype=int64, numpy=array([1, 2])>}\n>>> ds[:2]\n{'data': <tf.Tensor: shape=(2, 2), dtype=int64, numpy=\narray([[1, 2],\n       [3, 4]])>}\n```", "```py\n>>> ds[:]\n{'data': <tf.Tensor: shape=(2, 2), dtype=int64, numpy=\narray([[1, 2],\n       [3, 4]])>}\n```", "```py\n>>> from datasets import Dataset\n>>> data = [[[1, 2],[3, 4]],[[5, 6],[7, 8]]]\n>>> ds = Dataset.from_dict({\"data\": data})\n>>> ds = ds.with_format(\"tf\")\n>>> ds[0]\n{'data': <tf.RaggedTensor [[1, 2], [3, 4]]>}\n```", "```py\n>>> from datasets import Dataset, Features, Array2D\n>>> data = [[[1, 2],[3, 4]],[[5, 6],[7, 8]]]\n>>> features = Features({\"data\": Array2D(shape=(2, 2), dtype='int32')})\n>>> ds = Dataset.from_dict({\"data\": data}, features=features)\n>>> ds = ds.with_format(\"tf\")\n>>> ds[0]\n{'data': <tf.Tensor: shape=(2, 2), dtype=int64, numpy=\n array([[1, 2],\n        [3, 4]])>}\n>>> ds[:2]\n{'data': <tf.Tensor: shape=(2, 2, 2), dtype=int64, numpy=\n array([[[1, 2],\n         [3, 4]],\n\n        [[5, 6],\n         [7, 8]]])>}\n```", "```py\n>>> from datasets import Dataset, Features, ClassLabel\n>>> labels = [0, 0, 1]\n>>> features = Features({\"label\": ClassLabel(names=[\"negative\", \"positive\"])})\n>>> ds = Dataset.from_dict({\"label\": labels}, features=features) \n>>> ds = ds.with_format(\"tf\")  \n>>> ds[:3]\n{'label': <tf.Tensor: shape=(3,), dtype=int64, numpy=array([0, 0, 1])>}\n```", "```py\n>>> from datasets import Dataset, Features \n>>> text = [\"foo\", \"bar\"]\n>>> data = [0, 1] \n>>> ds = Dataset.from_dict({\"text\": text, \"data\": data})  \n>>> ds = ds.with_format(\"tf\") \n>>> ds[:2]\n{'text': <tf.Tensor: shape=(2,), dtype=string, numpy=array([b'foo', b'bar'], dtype=object)>,\n 'data': <tf.Tensor: shape=(2,), dtype=int64, numpy=array([0, 1])>}\n```", "```py\n>>> ds = ds.with_format(\"tf\", columns=[\"data\"], output_all_columns=True)\n>>> ds[:2]\n{'data': <tf.Tensor: shape=(2,), dtype=int64, numpy=array([0, 1])>,\n 'text': ['foo', 'bar']}\n```", "```py\n>>> from datasets import Dataset, Features, Audio, Image\n>>> images = [\"path/to/image.png\"] * 10\n>>> features = Features({\"image\": Image()})\n>>> ds = Dataset.from_dict({\"image\": images}, features=features) \n>>> ds = ds.with_format(\"tf\")  \n>>> ds[0]\n{'image': <tf.Tensor: shape=(512, 512, 4), dtype=uint8, numpy=\n array([[[255, 215, 106, 255],\n         [255, 215, 106, 255],\n         ...,\n         [255, 255, 255, 255],\n         [255, 255, 255, 255]]], dtype=uint8)>}\n>>> ds[:2]\n{'image': <tf.Tensor: shape=(2, 512, 512, 4), dtype=uint8, numpy=\n array([[[[255, 215, 106, 255],\n          [255, 215, 106, 255],\n          ...,\n          [255, 255, 255, 255],\n          [255, 255, 255, 255]]]], dtype=uint8)>}\n```", "```py\n>>> from datasets import Dataset, Features, Audio, Image\n>>> audio = [\"path/to/audio.wav\"] * 10\n>>> features = Features({\"audio\": Audio()})\n>>> ds = Dataset.from_dict({\"audio\": audio}, features=features) \n>>> ds = ds.with_format(\"tf\")  \n>>> ds[0][\"audio\"][\"array\"]\n<tf.Tensor: shape=(202311,), dtype=float32, numpy=\narray([ 6.1035156e-05,  1.5258789e-05,  1.6784668e-04, ...,\n       -1.5258789e-05, -1.5258789e-05,  1.5258789e-05], dtype=float32)>\n>>> ds[0][\"audio\"][\"sampling_rate\"]\n<tf.Tensor: shape=(), dtype=int32, numpy=44100>\n```", "```py\n>>> from datasets import Dataset\n>>> data = {\"inputs\": [[1, 2],[3, 4]], \"labels\": [0, 1]}\n>>> ds = Dataset.from_dict(data)\n>>> tf_ds = ds.to_tf_dataset(\n            columns=[\"inputs\"],\n            label_cols=[\"labels\"],\n            batch_size=2,\n            shuffle=True\n            )\n```", "```py\n>>> model.fit(tf_ds, epochs=2)\n```"]