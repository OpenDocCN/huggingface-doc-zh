["```py\nfrom diffusers import DDIMPipeline\nimport numpy as np\n\nmodel_id = \"google/ddpm-cifar10-32\"\n\n# load model and scheduler\nddim = DDIMPipeline.from_pretrained(model_id, use_safetensors=True)\n\n# run pipeline for just two steps and return numpy tensor\nimage = ddim(num_inference_steps=2, output_type=\"np\").images\nprint(np.abs(image).sum())\n```", "```py\nimport torch\nfrom diffusers import DDIMPipeline\nimport numpy as np\n\nmodel_id = \"google/ddpm-cifar10-32\"\n\n# load model and scheduler\nddim = DDIMPipeline.from_pretrained(model_id, use_safetensors=True)\n\n# create a generator for reproducibility\ngenerator = torch.Generator(device=\"cpu\").manual_seed(0)\n\n# run pipeline for just two steps and return numpy tensor\nimage = ddim(num_inference_steps=2, output_type=\"np\", generator=generator).images\nprint(np.abs(image).sum())\n```", "```py\nimport torch\nfrom diffusers import DDIMPipeline\nimport numpy as np\n\nmodel_id = \"google/ddpm-cifar10-32\"\n\n# load model and scheduler\nddim = DDIMPipeline.from_pretrained(model_id, use_safetensors=True)\nddim.to(\"cuda\")\n\n# create a generator for reproducibility\ngenerator = torch.Generator(device=\"cuda\").manual_seed(0)\n\n# run pipeline for just two steps and return numpy tensor\nimage = ddim(num_inference_steps=2, output_type=\"np\", generator=generator).images\nprint(np.abs(image).sum())\n```", "```py\nimport torch\nfrom diffusers import DDIMPipeline\nimport numpy as np\n\nmodel_id = \"google/ddpm-cifar10-32\"\n\n# load model and scheduler\nddim = DDIMPipeline.from_pretrained(model_id, use_safetensors=True)\nddim.to(\"cuda\")\n\n# create a generator for reproducibility; notice you don't place it on the GPU!\ngenerator = torch.manual_seed(0)\n\n# run pipeline for just two steps and return numpy tensor\nimage = ddim(num_inference_steps=2, output_type=\"np\", generator=generator).images\nprint(np.abs(image).sum())\n```", "```py\nimport os\nimport torch\n\nos.environ[\"CUBLAS_WORKSPACE_CONFIG\"] = \":16:8\"\n\ntorch.backends.cudnn.benchmark = False\ntorch.use_deterministic_algorithms(True)\n```", "```py\nimport torch\nfrom diffusers import DDIMScheduler, StableDiffusionPipeline\n\nmodel_id = \"runwayml/stable-diffusion-v1-5\"\npipe = StableDiffusionPipeline.from_pretrained(model_id, use_safetensors=True).to(\"cuda\")\npipe.scheduler = DDIMScheduler.from_config(pipe.scheduler.config)\ng = torch.Generator(device=\"cuda\")\n\nprompt = \"A bear is playing a guitar on Times Square\"\n\ng.manual_seed(0)\nresult1 = pipe(prompt=prompt, num_inference_steps=50, generator=g, output_type=\"latent\").images\n\ng.manual_seed(0)\nresult2 = pipe(prompt=prompt, num_inference_steps=50, generator=g, output_type=\"latent\").images\n\nprint(\"L_inf dist =\", abs(result1 - result2).max())\n\"L_inf dist = tensor(0., device='cuda:0')\"\n```"]