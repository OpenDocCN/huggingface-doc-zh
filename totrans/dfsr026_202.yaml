- en: Latent Consistency Model Multistep Scheduler
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/schedulers/lcm](https://huggingface.co/docs/diffusers/api/schedulers/lcm)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Multistep and onestep scheduler (Algorithm 3) introduced alongside latent consistency
    models in the paper [Latent Consistency Models: Synthesizing High-Resolution Images
    with Few-Step Inference](https://arxiv.org/abs/2310.04378) by Simian Luo, Yiqin
    Tan, Longbo Huang, Jian Li, and Hang Zhao. This scheduler should be able to generate
    good samples from [LatentConsistencyModelPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/latent_consistency_models#diffusers.LatentConsistencyModelPipeline)
    in 1-8 steps.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: LCMScheduler
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.LCMScheduler`'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_lcm.py#L134)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '`num_train_timesteps` (`int`, defaults to 1000) — The number of diffusion steps
    to train the model.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beta_start` (`float`, defaults to 0.0001) — The starting `beta` value of inference.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beta_end` (`float`, defaults to 0.02) — The final `beta` value.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beta_schedule` (`str`, defaults to `"linear"`) — The beta schedule, a mapping
    from a beta range to a sequence of betas for stepping the model. Choose from `linear`,
    `scaled_linear`, or `squaredcos_cap_v2`.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trained_betas` (`np.ndarray`, *optional*) — Pass an array of betas directly
    to the constructor to bypass `beta_start` and `beta_end`.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`original_inference_steps` (`int`, *optional*, defaults to 50) — The default
    number of inference steps used to generate a linearly-spaced timestep schedule,
    from which we will ultimately take `num_inference_steps` evenly spaced timesteps
    to form the final timestep schedule.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clip_sample` (`bool`, defaults to `True`) — Clip the predicted sample for
    numerical stability.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clip_sample_range` (`float`, defaults to 1.0) — The maximum magnitude for
    sample clipping. Valid only when `clip_sample=True`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set_alpha_to_one` (`bool`, defaults to `True`) — Each diffusion step uses
    the alphas product value at that step and at the previous one. For the final step
    there is no previous alpha. When this option is `True` the previous alpha product
    is fixed to `1`, otherwise it uses the alpha value at step 0.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`steps_offset` (`int`, defaults to 0) — An offset added to the inference steps.
    You can use a combination of `offset=1` and `set_alpha_to_one=False` to make the
    last step use step 0 for the previous alpha product like in Stable Diffusion.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prediction_type` (`str`, defaults to `epsilon`, *optional*) — Prediction type
    of the scheduler function; can be `epsilon` (predicts the noise of the diffusion
    process), `sample` (directly predicts the noisy sample`) or` v_prediction` (see
    section 2.4 of [Imagen Video](https://imagen.research.google/video/paper.pdf)
    paper).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`thresholding` (`bool`, defaults to `False`) — Whether to use the “dynamic
    thresholding” method. This is unsuitable for latent-space diffusion models such
    as Stable Diffusion.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dynamic_thresholding_ratio` (`float`, defaults to 0.995) — The ratio for the
    dynamic thresholding method. Valid only when `thresholding=True`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sample_max_value` (`float`, defaults to 1.0) — The threshold value for dynamic
    thresholding. Valid only when `thresholding=True`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestep_spacing` (`str`, defaults to `"leading"`) — The way the timesteps
    should be scaled. Refer to Table 2 of the [Common Diffusion Noise Schedules and
    Sample Steps are Flawed](https://huggingface.co/papers/2305.08891) for more information.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestep_scaling` (`float`, defaults to 10.0) — The factor the timesteps will
    be multiplied by when calculating the consistency model boundary conditions `c_skip`
    and `c_out`. Increasing this will decrease the approximation error (although the
    approximation error at the default of `10.0` is already pretty small).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rescale_betas_zero_snr` (`bool`, defaults to `False`) — Whether to rescale
    the betas to have zero terminal SNR. This enables the model to generate very bright
    and dark samples instead of limiting it to samples with medium brightness. Loosely
    related to [`--offset_noise`](https://github.com/huggingface/diffusers/blob/74fd735eb073eb1d774b1ab4154a0876eb82f055/examples/dreambooth/train_dreambooth.py#L506).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_betas_zero_snr` (`bool`，默认为`False`) — 是否重新缩放beta值以使终端信噪比为零。这使模型能够生成非常明亮和黑暗的样本，而不是将其限制为具有中等亮度的样本。与[`--offset_noise`](https://github.com/huggingface/diffusers/blob/74fd735eb073eb1d774b1ab4154a0876eb82f055/examples/dreambooth/train_dreambooth.py#L506)
    loosely相关。'
- en: '`LCMScheduler` extends the denoising procedure introduced in denoising diffusion
    probabilistic models (DDPMs) with non-Markovian guidance.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`LCMScheduler` 扩展了引入非马尔可夫引导的去噪扩散概率模型（DDPMs）的过程。'
- en: This model inherits from [SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)
    and [ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin).
    [~ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin)
    takes care of storing all config attributes that are passed in the scheduler’s
    `__init__` function, such as `num_train_timesteps`. They can be accessed via `scheduler.config.num_train_timesteps`.
    [SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)
    provides general loading and saving functionality via the [SchedulerMixin.save_pretrained()](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin.save_pretrained)
    and [from_pretrained()](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin.from_pretrained)
    functions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型继承自[SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)和[ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin)。[~ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin)负责存储传递给调度程序的`__init__`函数的所有配置属性，例如`num_train_timesteps`。可以通过`scheduler.config.num_train_timesteps`访问它们。[SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)通过[SchedulerMixin.save_pretrained()](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin.save_pretrained)和[from_pretrained()](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin.from_pretrained)函数提供一般的加载和保存功能。
- en: '#### `scale_model_input`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `scale_model_input`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_lcm.py#L276)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_lcm.py#L276)'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parameters
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`sample` (`torch.FloatTensor`) — The input sample.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 输入样本。'
- en: '`timestep` (`int`, *optional*) — The current timestep in the diffusion chain.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep` (`int`, *可选*) — 扩散链中的当前时间步长。'
- en: Returns
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`torch.FloatTensor`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`torch.FloatTensor`'
- en: A scaled input sample.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个经过缩放的输入样本。
- en: Ensures interchangeability with schedulers that need to scale the denoising
    model input depending on the current timestep.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 确保与需要根据当前时间步长缩放去噪模型输入的调度程序可互换。
- en: '#### `set_timesteps`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `set_timesteps`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_lcm.py#L326)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_lcm.py#L326)'
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`num_inference_steps` (`int`, *optional*) — The number of diffusion steps used
    when generating samples with a pre-trained model. If used, `timesteps` must be
    `None`.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_inference_steps` (`int`, *可选*) — 使用预训练模型生成样本时使用的扩散步数。如果使用，`timesteps`必须为`None`。'
- en: '`device` (`str` or `torch.device`, *optional*) — The device to which the timesteps
    should be moved to. If `None`, the timesteps are not moved.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`device` (`str`或`torch.device`，*可选*) — 时间步长应移动到的设备。如果为`None`，则不移动时间步长。'
- en: '`original_inference_steps` (`int`, *optional*) — The original number of inference
    steps, which will be used to generate a linearly-spaced timestep schedule (which
    is different from the standard `diffusers` implementation). We will then take
    `num_inference_steps` timesteps from this schedule, evenly spaced in terms of
    indices, and use that as our final timestep schedule. If not set, this will default
    to the `original_inference_steps` attribute.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`original_inference_steps` (`int`, *可选*) — 原始推断步数，将用于生成线性间隔的时间步长计划（与标准`diffusers`实现不同）。然后我们将从该计划中取`num_inference_steps`个时间步长，以索引均匀间隔，并将其用作我们的最终时间步长计划。如果未设置，将默认为`original_inference_steps`属性。'
- en: '`timesteps` (`List[int]`, *optional*) — Custom timesteps used to support arbitrary
    spacing between timesteps. If `None`, then the default timestep spacing strategy
    of equal spacing between timesteps on the training/distillation timestep schedule
    is used. If `timesteps` is passed, `num_inference_steps` must be `None`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timesteps` (`List[int]`, *可选*) — 用于支持时间步长之间任意间隔的自定义时间步长。如果为`None`，则使用默认的时间步长间隔策略，即在训练/蒸馏时间步长计划上的时间步长均匀间隔。如果传递了`timesteps`，则`num_inference_steps`必须为`None`。'
- en: Sets the discrete timesteps used for the diffusion chain (to be run before inference).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用于扩散链的离散时间步长（在推断之前运行）。
- en: '#### `step`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `step`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_lcm.py#L474)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_lcm.py#L474)'
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`model_output` (`torch.FloatTensor`) — The direct output from learned diffusion
    model.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_output` (`torch.FloatTensor`) — 从学习扩散模型直接输出的结果。'
- en: '`timestep` (`float`) — The current discrete timestep in the diffusion chain.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestep` (`float`) — 扩散链中的当前离散时间步长。'
- en: '`sample` (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample` (`torch.FloatTensor`) — 由扩散过程创建的样本的当前实例。'
- en: '`generator` (`torch.Generator`, *optional*) — A random number generator.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generator` (`torch.Generator`，*可选*) — 一个随机数生成器。'
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a `LCMSchedulerOutput` or `tuple`.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`，*可选*，默认为`True`) — 是否返回`LCMSchedulerOutput`或`tuple`。'
- en: Returns
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`~schedulers.scheduling_utils.LCMSchedulerOutput` or `tuple`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`~schedulers.scheduling_utils.LCMSchedulerOutput`或`tuple`'
- en: If return_dict is `True`, `LCMSchedulerOutput` is returned, otherwise a tuple
    is returned where the first element is the sample tensor.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`return_dict`为`True`，则返回`LCMSchedulerOutput`，否则返回一个元组，其中第一个元素是样本张量。
- en: Predict the sample from the previous timestep by reversing the SDE. This function
    propagates the diffusion process from the learned model outputs (most often the
    predicted noise).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过反转SDE来预测上一个时间步的样本。这个函数从学习模型的输出（通常是预测的噪音）中传播扩散过程。
