- en: Getting Started with Repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/hub/repositories-getting-started](https://huggingface.co/docs/hub/repositories-getting-started)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: This beginner-friendly guide will help you get the basic skills you need to
    create and manage your repository on the Hub. Each section builds on the previous
    one, so feel free to choose where to start!
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This document shows how to handle repositories through the web interface as
    well as through the terminal. There are no requirements if working with the UI.
    If you want to work with the terminal, please follow these installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have `git` available as a CLI command yet, you will need to [install
    Git](https://git-scm.com/downloads) for your platform. You will also need to [install
    Git LFS](https://git-lfs.github.com/), which will be used to handle large files
    such as images and model weights.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to push your code to the Hub, you‚Äôll need to authenticate somehow.
    The easiest way to do this is by installing the [`huggingface_hub` CLI](https://huggingface.co/docs/huggingface_hub/index)
    and running the login command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**The content in the Getting Started section of this document is also available
    as a video!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/rkCly_cbMBk](https://www.youtube-nocookie.com/embed/rkCly_cbMBk)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the Hub‚Äôs web interface you can easily create repositories, add files
    (even large ones!), explore models, visualize diffs, and much more. There are
    three kinds of repositories on the Hub, and in this guide you‚Äôll be creating a
    **model repository** for demonstration purposes. For information on creating and
    managing models, datasets, and Spaces, refer to their respective documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new repository, visit [huggingface.co/new](http://huggingface.co/new):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/825ed4e1bd52fa22997b40656eaebfb8.png) ![](../Images/77d602013a3f41affd419a51761ef089.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Specify the owner of the repository: this can be either you or any of the organizations
    you‚Äôre affiliated with.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your model‚Äôs name. This will also be the name of the repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify whether you want your model to be public or private.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the license. You can leave the *License* field blank for now. To learn
    about licenses, visit the [**Licenses**](repositories-licenses) documentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After creating your model repository, you should see a page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b8a5758bf9c38709a31af5588e27279.png) ![](../Images/ba4b116652b69df2ade9f4daf4da260d.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the Hub prompts you to create a *Model Card*, which you can learn
    about in the [**Model Cards documentation**](./model-cards). Including a Model
    Card in your model repo is best practice, but since we‚Äôre only making a test repo
    at the moment we can skip this.
  prefs: []
  type: TYPE_NORMAL
- en: Adding files to a repository (Web UI)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add files to your repository via the web UI, start by selecting the **Files**
    tab, navigating to the desired directory, and then clicking **Add file**. You‚Äôll
    be given the option to create a new file or upload a file directly from your computer.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc3c94199d0198fb388a6400a5d9cee0.png) ![](../Images/ae68f18bed5b11beaca6ae2e8db0b382.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choosing to create a new file will take you to the following editor screen,
    where you can choose a name for your file, add content, and save your file with
    a message that summarizes your changes. Instead of directly committing the new
    file to your repo‚Äôs `main` branch, you can select `Open as a pull request` to
    create a [Pull Request](./repositories-pull-requests-discussions).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8efb496bc51c88aba57efb963dafdc6c.png) ![](../Images/08714b47a7f2f5aca4e4d49f6dbb2ed9.png)'
  prefs: []
  type: TYPE_IMG
- en: Uploading a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you choose *Upload file* you‚Äôll be able to choose a local file to upload,
    along with a message summarizing your changes to the repo.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6c8162bf1a659b6658acc7b0f84ccae8.png) ![](../Images/2a85833d48d70b55262c8831a8ed8d89.png)'
  prefs: []
  type: TYPE_IMG
- en: As with creating new files, you can select `Open as a pull request` to create
    a [Pull Request](./repositories-pull-requests-discussions) instead of adding your
    changes directly to the `main` branch of your repo.
  prefs: []
  type: TYPE_NORMAL
- en: Adding files to a repository (terminal)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cloning repositories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Downloading repositories to your local machine is called *cloning*. You can
    use the following commands to load your repo and navigate to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can clone over SSH with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You‚Äôll need to add your SSH public key to [your user settings](https://huggingface.co/settings/keys)
    to push changes or access private repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Set up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now‚Äôs the time, you can add any files you want to the repository! üî•
  prefs: []
  type: TYPE_NORMAL
- en: 'Do you have files larger than 10MB? Those files should be tracked with `git-lfs`,
    which you can initialize with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that if your files are larger than **5GB** you‚Äôll also need to run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When you use Hugging Face to create a repository, Hugging Face automatically
    provides a list of common file extensions for common Machine Learning large files
    in the `.gitattributes` file, which `git-lfs` uses to efficiently track changes
    to your large files. However, you might need to add new extensions if your file
    types are not already handled. You can do so with `git lfs track "*.your_extension"`.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use Git to save new files and any changes to already existing files
    as a bundle of changes called a *commit*, which can be thought of as a ‚Äúrevision‚Äù
    to your project. To create a commit, you have to `add` the files to let Git know
    that we‚Äôre planning on saving the changes and then `commit` those changes. In
    order to sync the new commit with the Hugging Face Hub, you then `push` the commit
    to the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: And you‚Äôre done! You can check your repository on Hugging Face with all the
    recently added files. For example, in the screenshot below the user added a number
    of files. Note that some files in this example have a size of `1.04 GB`, so the
    repo uses Git LFS to track it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9953cf6a131114707f2d2eedafedb1a9.png) ![](../Images/8ad3b293db30a82c311663ee674a55ce.png)'
  prefs: []
  type: TYPE_IMG
- en: If you cloned the repository with HTTP, you might be asked to fill your username
    and password on every push operation. The simplest way to avoid repetition is
    to [switch to SSH](#cloning-repositories), instead of HTTP. Alternatively, if
    you have to use HTTP, you might find it helpful to setup a [git credential helper](https://git-scm.com/docs/gitcredentials#_avoiding_repetition)
    to autofill your username and password.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing a repo‚Äôs history
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every time you go through the `add`-`commit`-`push` cycle, the repo will keep
    track of every change you‚Äôve made to your files. The UI allows you to explore
    the model files and commits and to see the difference (also known as *diff*) introduced
    by each commit. To see the history, you can click on the **History: X commits**
    link.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d76df24dc23c178f6481c7b7b17ce6c4.png) ![](../Images/1b6dddeebe9b109f3730327e7ced4812.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can click on an individual commit to see what changes that commit introduced:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a7fa82b615cd013f4ac87f5da7165a86.png) ![](../Images/1d621a105d21b0df6db4627d4778aa28.png)'
  prefs: []
  type: TYPE_IMG
