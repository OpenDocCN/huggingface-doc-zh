- en: Deformable DETR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/deformable_detr](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/deformable_detr)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Deformable DETR model was proposed in [Deformable DETR: Deformable Transformers
    for End-to-End Object Detection](https://arxiv.org/abs/2010.04159) by Xizhou Zhu,
    Weijie Su, Lewei Lu, Bin Li, Xiaogang Wang, Jifeng Dai. Deformable DETR mitigates
    the slow convergence issues and limited feature spatial resolution of the original
    [DETR](detr) by leveraging a new deformable attention module which only attends
    to a small set of key sampling points around a reference.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*DETR has been recently proposed to eliminate the need for many hand-designed
    components in object detection while demonstrating good performance. However,
    it suffers from slow convergence and limited feature spatial resolution, due to
    the limitation of Transformer attention modules in processing image feature maps.
    To mitigate these issues, we proposed Deformable DETR, whose attention modules
    only attend to a small set of key sampling points around a reference. Deformable
    DETR can achieve better performance than DETR (especially on small objects) with
    10 times less training epochs. Extensive experiments on the COCO benchmark demonstrate
    the effectiveness of our approach.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![drawing](../Images/840536d35745dda097869c1c27a80c35.png) Deformable DETR
    architecture. Taken from the [original paper](https://arxiv.org/abs/2010.04159).'
  prefs: []
  type: TYPE_NORMAL
- en: This model was contributed by [nielsr](https://huggingface.co/nielsr). The original
    code can be found [here](https://github.com/fundamentalvision/Deformable-DETR).
  prefs: []
  type: TYPE_NORMAL
- en: Usage tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Training Deformable DETR is equivalent to training the original [DETR](detr)
    model. See the [resources](#resources) section below for demo notebooks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of official Hugging Face and community (indicated by üåé) resources to
    help you get started with Deformable DETR.
  prefs: []
  type: TYPE_NORMAL
- en: Object Detection
  prefs: []
  type: TYPE_NORMAL
- en: Demo notebooks regarding inference + fine-tuning on a custom dataset for [DeformableDetrForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection)
    can be found [here](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/Deformable-DETR).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See also: [Object detection task guide](../tasks/object_detection).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you‚Äôre interested in submitting a resource to be included here, please feel
    free to open a Pull Request and we‚Äôll review it! The resource should ideally demonstrate
    something new instead of duplicating an existing resource.
  prefs: []
  type: TYPE_NORMAL
- en: DeformableDetrImageProcessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.DeformableDetrImageProcessor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deformable_detr/image_processing_deformable_detr.py#L756)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`format` (`str`, *optional*, defaults to `"coco_detection"`) ‚Äî Data format
    of the annotations. One of ‚Äúcoco_detection‚Äù or ‚Äúcoco_panoptic‚Äù.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) ‚Äî Controls whether to
    resize the image‚Äôs (height, width) dimensions to the specified `size`. Can be
    overridden by the `do_resize` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (`Dict[str, int]` *optional*, defaults to `{"shortest_edge" -- 800,
    "longest_edge": 1333}`): Size of the image‚Äôs (height, width) dimensions after
    resizing. Can be overridden by the `size` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `PILImageResampling.BILINEAR`)
    ‚Äî Resampling filter to use if resizing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) ‚Äî Controls whether to
    rescale the image by the specified scale `rescale_factor`. Can be overridden by
    the `do_rescale` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) ‚Äî Scale
    factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method. do_normalize ‚Äî Controls whether to normalize
    the image. Can be overridden by the `do_normalize` parameter in the `preprocess`
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_DEFAULT_MEAN`)
    ‚Äî Mean values to use when normalizing the image. Can be a single value or a list
    of values, one for each channel. Can be overridden by the `image_mean` parameter
    in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_DEFAULT_STD`)
    ‚Äî Standard deviation values to use when normalizing the image. Can be a single
    value or a list of values, one for each channel. Can be overridden by the `image_std`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_pad` (`bool`, *optional*, defaults to `True`) ‚Äî Controls whether to pad
    the image to the largest image in a batch and create a pixel mask. Can be overridden
    by the `do_pad` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructs a Deformable DETR image processor.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `preprocess`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deformable_detr/image_processing_deformable_detr.py#L1097)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`images` (`ImageInput`) ‚Äî Image or batch of images to preprocess. Expects a
    single or batch of images with pixel values ranging from 0 to 255\. If passing
    in images with pixel values between 0 and 1, set `do_rescale=False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`annotations` (`AnnotationType` or `List[AnnotationType]`, *optional*) ‚Äî List
    of annotations associated with the image or batch of images. If annotation is
    for object detection, the annotations should be a dictionary with the following
    keys:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚Äúimage_id‚Äù (`int`): The image id.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚Äúannotations‚Äù (`List[Dict]`): List of annotations for an image. Each annotation
    should be a dictionary. An image can have no annotations, in which case the list
    should be empty. If annotation is for segmentation, the annotations should be
    a dictionary with the following keys:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚Äúimage_id‚Äù (`int`): The image id.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚Äúsegments_info‚Äù (`List[Dict]`): List of segments for an image. Each segment
    should be a dictionary. An image can have no segments, in which case the list
    should be empty.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚Äúfile_name‚Äù (`str`): The file name of the image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_segmentation_masks` (`bool`, *optional*, defaults to self.return_segmentation_masks)
    ‚Äî Whether to return segmentation masks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`masks_path` (`str` or `pathlib.Path`, *optional*) ‚Äî Path to the directory
    containing the segmentation masks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_resize` (`bool`, *optional*, defaults to self.do_resize) ‚Äî Whether to resize
    the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (`Dict[str, int]`, *optional*, defaults to self.size) ‚Äî Size of the
    image after resizing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resample` (`PILImageResampling`, *optional*, defaults to self.resample) ‚Äî
    Resampling filter to use when resizing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_rescale` (`bool`, *optional*, defaults to self.do_rescale) ‚Äî Whether to
    rescale the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rescale_factor` (`float`, *optional*, defaults to self.rescale_factor) ‚Äî Rescale
    factor to use when rescaling the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_normalize` (`bool`, *optional*, defaults to self.do_normalize) ‚Äî Whether
    to normalize the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to self.image_mean)
    ‚Äî Mean to use when normalizing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to self.image_std)
    ‚Äî Standard deviation to use when normalizing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_pad` (`bool`, *optional*, defaults to self.do_pad) ‚Äî Whether to pad the
    image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`format` (`str` or `AnnotationFormat`, *optional*, defaults to self.format)
    ‚Äî Format of the annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or `TensorType`, *optional*, defaults to self.return_tensors)
    ‚Äî Type of tensors to return. If `None`, will return the list of images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data_format` (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`)
    ‚Äî The channel dimension format for the output image. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Use the channel dimension format of the input image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) ‚Äî The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocess an image or a batch of images so that it can be used by the model.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `post_process_object_detection`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deformable_detr/image_processing_deformable_detr.py#L1373)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs` (`DetrObjectDetectionOutput`) ‚Äî Raw outputs of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`threshold` (`float`, *optional*) ‚Äî Score threshold to keep object detection
    predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target_sizes` (`torch.Tensor` or `List[Tuple[int, int]]`, *optional*) ‚Äî Tensor
    of shape `(batch_size, 2)` or list of tuples (`Tuple[int, int]`) containing the
    target size (height, width) of each image in the batch. If left to None, predictions
    will not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top_k` (`int`, *optional*, defaults to 100) ‚Äî Keep only top k bounding boxes
    before filtering by thresholding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries, each dictionary containing the scores, labels and boxes
    for an image in the batch as predicted by the model.
  prefs: []
  type: TYPE_NORMAL
- en: Converts the raw output of [DeformableDetrForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection)
    into final bounding boxes in (top_left_x, top_left_y, bottom_right_x, bottom_right_y)
    format. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: DeformableDetrFeatureExtractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.DeformableDetrFeatureExtractor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deformable_detr/feature_extraction_deformable_detr.py#L36)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '#### `__call__`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Preprocess an image or a batch of images.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `post_process_object_detection`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deformable_detr/image_processing_deformable_detr.py#L1373)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs` (`DetrObjectDetectionOutput`) ‚Äî Raw outputs of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`threshold` (`float`, *optional*) ‚Äî Score threshold to keep object detection
    predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target_sizes` (`torch.Tensor` or `List[Tuple[int, int]]`, *optional*) ‚Äî Tensor
    of shape `(batch_size, 2)` or list of tuples (`Tuple[int, int]`) containing the
    target size (height, width) of each image in the batch. If left to None, predictions
    will not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top_k` (`int`, *optional*, defaults to 100) ‚Äî Keep only top k bounding boxes
    before filtering by thresholding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries, each dictionary containing the scores, labels and boxes
    for an image in the batch as predicted by the model.
  prefs: []
  type: TYPE_NORMAL
- en: Converts the raw output of [DeformableDetrForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/deformable_detr#transformers.DeformableDetrForObjectDetection)
    into final bounding boxes in (top_left_x, top_left_y, bottom_right_x, bottom_right_y)
    format. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: DeformableDetrConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.DeformableDetrConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deformable_detr/configuration_deformable_detr.py#L30)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`use_timm_backbone` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or not
    to use the `timm` library for the backbone. If set to `False`, will use the `AutoBackbone`
    API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backbone_config` (`PretrainedConfig` or `dict`, *optional*) ‚Äî The configuration
    of the backbone model. Only used in case `use_timm_backbone` is set to `False`
    in which case it will default to `ResNetConfig()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_channels` (`int`, *optional*, defaults to 3) ‚Äî The number of input channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_queries` (`int`, *optional*, defaults to 300) ‚Äî Number of object queries,
    i.e. detection slots. This is the maximal number of objects [DeformableDetrModel](/docs/transformers/v4.37.2/en/model_doc/deformable_detr#transformers.DeformableDetrModel)
    can detect in a single image. In case `two_stage` is set to `True`, we use `two_stage_num_proposals`
    instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d_model` (`int`, *optional*, defaults to 256) ‚Äî Dimension of the layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_layers` (`int`, *optional*, defaults to 6) ‚Äî Number of encoder layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_layers` (`int`, *optional*, defaults to 6) ‚Äî Number of decoder layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_attention_heads` (`int`, *optional*, defaults to 8) ‚Äî Number of attention
    heads for each attention layer in the Transformer encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_attention_heads` (`int`, *optional*, defaults to 8) ‚Äî Number of attention
    heads for each attention layer in the Transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_ffn_dim` (`int`, *optional*, defaults to 1024) ‚Äî Dimension of the
    ‚Äúintermediate‚Äù (often named feed-forward) layer in decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_ffn_dim` (`int`, *optional*, defaults to 1024) ‚Äî Dimension of the
    ‚Äúintermediate‚Äù (often named feed-forward) layer in decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activation_function` (`str` or `function`, *optional*, defaults to `"relu"`)
    ‚Äî The non-linear activation function (function or string) in the encoder and pooler.
    If string, `"gelu"`, `"relu"`, `"silu"` and `"gelu_new"` are supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dropout` (`float`, *optional*, defaults to 0.1) ‚Äî The dropout probability
    for all fully connected layers in the embeddings, encoder, and pooler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_dropout` (`float`, *optional*, defaults to 0.0) ‚Äî The dropout ratio
    for the attention probabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activation_dropout` (`float`, *optional*, defaults to 0.0) ‚Äî The dropout ratio
    for activations inside the fully connected layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`init_std` (`float`, *optional*, defaults to 0.02) ‚Äî The standard deviation
    of the truncated_normal_initializer for initializing all weight matrices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`init_xavier_std` (`float`, *optional*, defaults to 1) ‚Äî The scaling factor
    used for the Xavier initialization gain in the HM Attention map module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_layerdrop` (`float`, *optional*, defaults to 0.0) ‚Äî The LayerDrop
    probability for the encoder. See the [LayerDrop paper](see [https://arxiv.org/abs/1909.11556](https://arxiv.org/abs/1909.11556))
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxiliary_loss` (`bool`, *optional*, defaults to `False`) ‚Äî Whether auxiliary
    decoding losses (loss at each decoder layer) are to be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`position_embedding_type` (`str`, *optional*, defaults to `"sine"`) ‚Äî Type
    of position embeddings to be used on top of the image features. One of `"sine"`
    or `"learned"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backbone` (`str`, *optional*, defaults to `"resnet50"`) ‚Äî Name of convolutional
    backbone to use in case `use_timm_backbone` = `True`. Supports any convolutional
    backbone from the timm package. For a list of all available models, see [this
    page](https://rwightman.github.io/pytorch-image-models/#load-a-pretrained-model).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_pretrained_backbone` (`bool`, *optional*, defaults to `True`) ‚Äî Whether
    to use pretrained weights for the backbone. Only supported when `use_timm_backbone`
    = `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dilation` (`bool`, *optional*, defaults to `False`) ‚Äî Whether to replace stride
    with dilation in the last convolutional block (DC5). Only supported when `use_timm_backbone`
    = `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_cost` (`float`, *optional*, defaults to 1) ‚Äî Relative weight of the
    classification error in the Hungarian matching cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bbox_cost` (`float`, *optional*, defaults to 5) ‚Äî Relative weight of the L1
    error of the bounding box coordinates in the Hungarian matching cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`giou_cost` (`float`, *optional*, defaults to 2) ‚Äî Relative weight of the generalized
    IoU loss of the bounding box in the Hungarian matching cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_loss_coefficient` (`float`, *optional*, defaults to 1) ‚Äî Relative weight
    of the Focal loss in the panoptic segmentation loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dice_loss_coefficient` (`float`, *optional*, defaults to 1) ‚Äî Relative weight
    of the DICE/F-1 loss in the panoptic segmentation loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bbox_loss_coefficient` (`float`, *optional*, defaults to 5) ‚Äî Relative weight
    of the L1 bounding box loss in the object detection loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`giou_loss_coefficient` (`float`, *optional*, defaults to 2) ‚Äî Relative weight
    of the generalized IoU loss in the object detection loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eos_coefficient` (`float`, *optional*, defaults to 0.1) ‚Äî Relative classification
    weight of the ‚Äòno-object‚Äô class in the object detection loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_feature_levels` (`int`, *optional*, defaults to 4) ‚Äî The number of input
    feature levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_n_points` (`int`, *optional*, defaults to 4) ‚Äî The number of sampled
    keys in each feature level for each attention head in the encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_n_points` (`int`, *optional*, defaults to 4) ‚Äî The number of sampled
    keys in each feature level for each attention head in the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`two_stage` (`bool`, *optional*, defaults to `False`) ‚Äî Whether to apply a
    two-stage deformable DETR, where the region proposals are also generated by a
    variant of Deformable DETR, which are further fed into the decoder for iterative
    bounding box refinement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`two_stage_num_proposals` (`int`, *optional*, defaults to 300) ‚Äî The number
    of region proposals to be generated, in case `two_stage` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with_box_refine` (`bool`, *optional*, defaults to `False`) ‚Äî Whether to apply
    iterative bounding box refinement, where each decoder layer refines the bounding
    boxes based on the predictions from the previous layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`focal_alpha` (`float`, *optional*, defaults to 0.25) ‚Äî Alpha parameter in
    the focal loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disable_custom_kernels` (`bool`, *optional*, defaults to `False`) ‚Äî Disable
    the use of custom CUDA and CPU kernels. This option is necessary for the ONNX
    export, as custom kernels are not supported by PyTorch ONNX export.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a [DeformableDetrModel](/docs/transformers/v4.37.2/en/model_doc/deformable_detr#transformers.DeformableDetrModel).
    It is used to instantiate a Deformable DETR model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the Deformable DETR [SenseTime/deformable-detr](https://huggingface.co/SenseTime/deformable-detr)
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: DeformableDetrModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.DeformableDetrModel`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deformable_detr/modeling_deformable_detr.py#L1445)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([DeformableDetrConfig](/docs/transformers/v4.37.2/en/model_doc/deformable_detr#transformers.DeformableDetrConfig))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bare Deformable DETR Model (consisting of a backbone and encoder-decoder
    Transformer) outputting raw hidden-states without any specific head on top.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deformable_detr/modeling_deformable_detr.py#L1601)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) ‚Äî Pixel values. Padding will be ignored by default should you provide
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [DeformableDetrImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`pixel_mask` (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*)
    ‚Äî Mask to avoid performing attention on padding pixel values. Mask values selected
    in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for pixels that are real (i.e. `not masked`),
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for pixels that are padding (i.e. `masked`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attention_mask` (`torch.FloatTensor` of shape `(batch_size, num_queries)`,
    *optional*) ‚Äî Not used by default. Can be used to mask object queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_outputs` (`tuple(tuple(torch.FloatTensor)`, *optional*) ‚Äî Tuple consists
    of (`last_hidden_state`, *optional*: `hidden_states`, *optional*: `attentions`)
    `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)`, *optional*)
    is a sequence of hidden-states at the output of the last layer of the encoder.
    Used in the cross-attention of the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) ‚Äî Optionally, instead of passing the flattened feature
    map (output of the backbone + projection layer), you can choose to directly pass
    a flattened representation of an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, num_queries,
    hidden_size)`, *optional*) ‚Äî Optionally, instead of initializing the queries with
    a tensor of zeros, you can choose to directly pass an embedded representation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) ‚Äî Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.deformable_detr.modeling_deformable_detr.DeformableDetrModelOutput`
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.deformable_detr.modeling_deformable_detr.DeformableDetrModelOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([DeformableDetrConfig](/docs/transformers/v4.37.2/en/model_doc/deformable_detr#transformers.DeformableDetrConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`init_reference_points` (`torch.FloatTensor` of shape `(batch_size, num_queries,
    4)`) ‚Äî Initial reference points sent through the Transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, num_queries,
    hidden_size)`) ‚Äî Sequence of hidden-states at the output of the last layer of
    the decoder of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`intermediate_hidden_states` (`torch.FloatTensor` of shape `(batch_size, config.decoder_layers,
    num_queries, hidden_size)`) ‚Äî Stacked intermediate hidden states (output of each
    layer of the decoder).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`intermediate_reference_points` (`torch.FloatTensor` of shape `(batch_size,
    config.decoder_layers, num_queries, 4)`) ‚Äî Stacked intermediate reference points
    (reference points of each layer of the decoder).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    ‚Äî Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each layer) of shape `(batch_size, num_queries, hidden_size)`. Hidden-states
    of the decoder at the output of each layer plus the initial embedding outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) ‚Äî
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    num_queries, num_queries)`. Attentions weights of the decoder, after the attention
    softmax, used to compute the weighted average in the self-attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_queries, num_heads, 4, 4)`. Attentions
    weights of the decoder‚Äôs cross-attention layer, after the attention softmax, used
    to compute the weighted average in the cross-attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) ‚Äî Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    ‚Äî Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states of the encoder at the output of each layer plus the initial embedding
    outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) ‚Äî
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_queries,
    num_heads, 4, 4)`. Attentions weights of the encoder, after the attention softmax,
    used to compute the weighted average in the self-attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enc_outputs_class` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    config.num_labels)`, *optional*, returned when `config.with_box_refine=True` and
    `config.two_stage=True`) ‚Äî Predicted bounding boxes scores where the top `config.two_stage_num_proposals`
    scoring bounding boxes are picked as region proposals in the first stage. Output
    of bounding box binary classification (i.e. foreground and background).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enc_outputs_coord_logits` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    4)`, *optional*, returned when `config.with_box_refine=True` and `config.two_stage=True`)
    ‚Äî Logits of predicted bounding boxes coordinates in the first stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [DeformableDetrModel](/docs/transformers/v4.37.2/en/model_doc/deformable_detr#transformers.DeformableDetrModel)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: DeformableDetrForObjectDetection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.DeformableDetrForObjectDetection`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deformable_detr/modeling_deformable_detr.py#L1802)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([DeformableDetrConfig](/docs/transformers/v4.37.2/en/model_doc/deformable_detr#transformers.DeformableDetrConfig))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deformable DETR Model (consisting of a backbone and encoder-decoder Transformer)
    with object detection heads on top, for tasks such as COCO detection.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/deformable_detr/modeling_deformable_detr.py#L1863)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) ‚Äî Pixel values. Padding will be ignored by default should you provide
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [DeformableDetrImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`pixel_mask` (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*)
    ‚Äî Mask to avoid performing attention on padding pixel values. Mask values selected
    in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for pixels that are real (i.e. `not masked`),
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for pixels that are padding (i.e. `masked`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attention_mask` (`torch.FloatTensor` of shape `(batch_size, num_queries)`,
    *optional*) ‚Äî Not used by default. Can be used to mask object queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_outputs` (`tuple(tuple(torch.FloatTensor)`, *optional*) ‚Äî Tuple consists
    of (`last_hidden_state`, *optional*: `hidden_states`, *optional*: `attentions`)
    `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)`, *optional*)
    is a sequence of hidden-states at the output of the last layer of the encoder.
    Used in the cross-attention of the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) ‚Äî Optionally, instead of passing the flattened feature
    map (output of the backbone + projection layer), you can choose to directly pass
    a flattened representation of an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, num_queries,
    hidden_size)`, *optional*) ‚Äî Optionally, instead of initializing the queries with
    a tensor of zeros, you can choose to directly pass an embedded representation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) ‚Äî Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labels` (`List[Dict]` of len `(batch_size,)`, *optional*) ‚Äî Labels for computing
    the bipartite matching loss. List of dicts, each dictionary containing at least
    the following 2 keys: ‚Äòclass_labels‚Äô and ‚Äòboxes‚Äô (the class labels and bounding
    boxes of an image in the batch respectively). The class labels themselves should
    be a `torch.LongTensor` of len `(number of bounding boxes in the image,)` and
    the boxes a `torch.FloatTensor` of shape `(number of bounding boxes in the image,
    4)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.deformable_detr.modeling_deformable_detr.DeformableDetrObjectDetectionOutput`
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.deformable_detr.modeling_deformable_detr.DeformableDetrObjectDetectionOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([DeformableDetrConfig](/docs/transformers/v4.37.2/en/model_doc/deformable_detr#transformers.DeformableDetrConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    are provided)) ‚Äî Total loss as a linear combination of a negative log-likehood
    (cross-entropy) for class prediction and a bounding box loss. The latter is defined
    as a linear combination of the L1 loss and the generalized scale-invariant IoU
    loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loss_dict` (`Dict`, *optional*) ‚Äî A dictionary containing the individual losses.
    Useful for logging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes
    + 1)`) ‚Äî Classification logits (including no-object) for all queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pred_boxes` (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`)
    ‚Äî Normalized boxes coordinates for all queries, represented as (center_x, center_y,
    width, height). These values are normalized in [0, 1], relative to the size of
    each individual image in the batch (disregarding possible padding). You can use
    `~DeformableDetrProcessor.post_process_object_detection` to retrieve the unnormalized
    bounding boxes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxiliary_outputs` (`list[Dict]`, *optional*) ‚Äî Optional, only returned when
    auxilary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)
    and labels are provided. It is a list of dictionaries containing the two above
    keys (`logits` and `pred_boxes`) for each decoder layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, num_queries,
    hidden_size)`, *optional*) ‚Äî Sequence of hidden-states at the output of the last
    layer of the decoder of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    ‚Äî Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each layer) of shape `(batch_size, num_queries, hidden_size)`. Hidden-states
    of the decoder at the output of each layer plus the initial embedding outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) ‚Äî
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    num_queries, num_queries)`. Attentions weights of the decoder, after the attention
    softmax, used to compute the weighted average in the self-attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_queries, num_heads, 4, 4)`. Attentions
    weights of the decoder‚Äôs cross-attention layer, after the attention softmax, used
    to compute the weighted average in the cross-attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) ‚Äî Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    ‚Äî Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states of the encoder at the output of each layer plus the initial embedding
    outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) ‚Äî
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, sequence_length,
    num_heads, 4, 4)`. Attentions weights of the encoder, after the attention softmax,
    used to compute the weighted average in the self-attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`intermediate_hidden_states` (`torch.FloatTensor` of shape `(batch_size, config.de`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
