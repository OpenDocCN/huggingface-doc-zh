["```py\n>>> from transformers import AutoTokenizer\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"bert-base-uncased\")\n```", "```py\n>>> sequence = \"In a hole in the ground there lived a hobbit.\"\n>>> print(tokenizer(sequence))\n{'input_ids': [101, 1999, 1037, 4920, 1999, 1996, 2598, 2045, 2973, 1037, 7570, 10322, 4183, 1012, 102], \n 'token_type_ids': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \n 'attention_mask': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]}\n```", "```py\n>>> from transformers import AutoImageProcessor\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"google/vit-base-patch16-224\")\n```", "```py\n>>> from transformers import AutoFeatureExtractor\n\n>>> feature_extractor = AutoFeatureExtractor.from_pretrained(\n...     \"ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition\"\n... )\n```", "```py\n>>> from transformers import AutoProcessor\n\n>>> processor = AutoProcessor.from_pretrained(\"microsoft/layoutlmv2-base-uncased\")\n```", "```py\n>>> from transformers import AutoModelForSequenceClassification\n\n>>> model = AutoModelForSequenceClassification.from_pretrained(\"distilbert-base-uncased\")\n```", "```py\n>>> from transformers import AutoModelForTokenClassification\n\n>>> model = AutoModelForTokenClassification.from_pretrained(\"distilbert-base-uncased\")\n```", "```py\n>>> from transformers import TFAutoModelForSequenceClassification\n\n>>> model = TFAutoModelForSequenceClassification.from_pretrained(\"distilbert-base-uncased\")\n```", "```py\n>>> from transformers import TFAutoModelForTokenClassification\n\n>>> model = TFAutoModelForTokenClassification.from_pretrained(\"distilbert-base-uncased\")\n```", "```py\n>>> from transformers import AutoImageProcessor, AutoBackbone\n>>> import torch\n>>> from PIL import Image\n>>> import requests\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n>>> processor = AutoImageProcessor.from_pretrained(\"microsoft/swin-tiny-patch4-window7-224\")\n>>> model = AutoBackbone.from_pretrained(\"microsoft/swin-tiny-patch4-window7-224\", out_indices=(0,))\n\n>>> inputs = processor(image, return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n>>> feature_maps = outputs.feature_maps\n>>> list(feature_maps[-1].shape)\n[1, 96, 56, 56]\n```"]