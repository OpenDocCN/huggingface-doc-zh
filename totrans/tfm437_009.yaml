- en: Fine-tune a pretrained model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers/v4.37.2/en/training](https://huggingface.co/docs/transformers/v4.37.2/en/training)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/372.3057d38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Tip.c2ecdbf4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Youtube.e1129c6f.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/DocNotebookDropdown.3e6b3817.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Markdown.fef84341.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/stores.c16bc1a5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
  prefs: []
  type: TYPE_NORMAL
- en: 'There are significant benefits to using a pretrained model. It reduces computation
    costs, your carbon footprint, and allows you to use state-of-the-art models without
    having to train one from scratch. 🤗 Transformers provides access to thousands
    of pretrained models for a wide range of tasks. When you use a pretrained model,
    you train it on a dataset specific to your task. This is known as fine-tuning,
    an incredibly powerful training technique. In this tutorial, you will fine-tune
    a pretrained model with a deep learning framework of your choice:'
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tune a pretrained model with 🤗 Transformers [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fine-tune a pretrained model in TensorFlow with Keras.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fine-tune a pretrained model in native PyTorch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prepare a dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/_BZearw7f0w](https://www.youtube-nocookie.com/embed/_BZearw7f0w)'
  prefs: []
  type: TYPE_NORMAL
- en: Before you can fine-tune a pretrained model, download a dataset and prepare
    it for training. The previous tutorial showed you how to process data for training,
    and now you get an opportunity to put those skills to the test!
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by loading the [Yelp Reviews](https://huggingface.co/datasets/yelp_review_full)
    dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you now know, you need a tokenizer to process the text and include a padding
    and truncation strategy to handle any variable sequence lengths. To process your
    dataset in one step, use 🤗 Datasets [`map`](https://huggingface.co/docs/datasets/process#map)
    method to apply a preprocessing function over the entire dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you like, you can create a smaller subset of the full dataset to fine-tune
    on to reduce the time it takes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Train
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point, you should follow the section corresponding to the framework
    you want to use. You can use the links in the right sidebar to jump to the one
    you want - and if you want to hide all of the content for a given framework, just
    use the button at the top-right of that framework’s block!
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/nvBXf7s7vTI](https://www.youtube-nocookie.com/embed/nvBXf7s7vTI)'
  prefs: []
  type: TYPE_NORMAL
- en: Train with PyTorch Trainer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 🤗 Transformers provides a [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    class optimized for training 🤗 Transformers models, making it easier to start
    training without manually writing your own training loop. The [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    API supports a wide range of training options and features such as logging, gradient
    accumulation, and mixed precision.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by loading your model and specify the number of expected labels. From
    the Yelp Review [dataset card](https://huggingface.co/datasets/yelp_review_full#data-fields),
    you know there are five labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You will see a warning about some of the pretrained weights not being used and
    some weights being randomly initialized. Don’t worry, this is completely normal!
    The pretrained head of the BERT model is discarded, and replaced with a randomly
    initialized classification head. You will fine-tune this new model head on your
    sequence classification task, transferring the knowledge of the pretrained model
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Training hyperparameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, create a [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)
    class which contains all the hyperparameters you can tune as well as flags for
    activating different training options. For this tutorial you can start with the
    default training [hyperparameters](https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments),
    but feel free to experiment with these to find your optimal settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify where to save the checkpoints from your training:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    does not automatically evaluate model performance during training. You’ll need
    to pass [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    a function to compute and report metrics. The [🤗 Evaluate](https://huggingface.co/docs/evaluate/index)
    library provides a simple [`accuracy`](https://huggingface.co/spaces/evaluate-metric/accuracy)
    function you can load with the `evaluate.load` (see this [quicktour](https://huggingface.co/docs/evaluate/a_quick_tour)
    for more information) function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Call `compute` on `metric` to calculate the accuracy of your predictions. Before
    passing your predictions to `compute`, you need to convert the logits to predictions
    (remember all 🤗 Transformers models return logits):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you’d like to monitor your evaluation metrics during fine-tuning, specify
    the `evaluation_strategy` parameter in your training arguments to report the evaluation
    metric at the end of each epoch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Trainer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    object with your model, training arguments, training and test datasets, and evaluation
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then fine-tune your model by calling [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/rnTGBy2ax1c](https://www.youtube-nocookie.com/embed/rnTGBy2ax1c)'
  prefs: []
  type: TYPE_NORMAL
- en: Train a TensorFlow model with Keras
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also train 🤗 Transformers models in TensorFlow with the Keras API!
  prefs: []
  type: TYPE_NORMAL
- en: Loading data for Keras
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you want to train a 🤗 Transformers model with the Keras API, you need to
    convert your dataset to a format that Keras understands. If your dataset is small,
    you can just convert the whole thing to NumPy arrays and pass it to Keras. Let’s
    try that first before we do anything more complicated.
  prefs: []
  type: TYPE_NORMAL
- en: First, load a dataset. We’ll use the CoLA dataset from the [GLUE benchmark](https://huggingface.co/datasets/glue),
    since it’s a simple binary text classification task, and just take the training
    split for now.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, load a tokenizer and tokenize the data as NumPy arrays. Note that the
    labels are already a list of 0 and 1s, so we can just convert that directly to
    a NumPy array without tokenization!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, load, [`compile`](https://keras.io/api/models/model_training_apis/#compile-method),
    and [`fit`](https://keras.io/api/models/model_training_apis/#fit-method) the model.
    Note that Transformers models all have a default task-relevant loss function,
    so you don’t need to specify one unless you want to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You don’t have to pass a loss argument to your models when you `compile()` them!
    Hugging Face models automatically choose a loss that is appropriate for their
    task and model architecture if this argument is left blank. You can always override
    this by specifying a loss yourself if you want to!
  prefs: []
  type: TYPE_NORMAL
- en: This approach works great for smaller datasets, but for larger datasets, you
    might find it starts to become a problem. Why? Because the tokenized array and
    labels would have to be fully loaded into memory, and because NumPy doesn’t handle
    “jagged” arrays, so every tokenized sample would have to be padded to the length
    of the longest sample in the whole dataset. That’s going to make your array even
    bigger, and all those padding tokens will slow down training too!
  prefs: []
  type: TYPE_NORMAL
- en: Loading data as a tf.data.Dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to avoid slowing down training, you can load your data as a `tf.data.Dataset`
    instead. Although you can write your own `tf.data` pipeline if you want, we have
    two convenience methods for doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset):
    This is the method we recommend in most cases. Because it is a method on your
    model, it can inspect the model to automatically figure out which columns are
    usable as model inputs, and discard the others to make a simpler, more performant
    dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[to_tf_dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.to_tf_dataset):
    This method is more low-level, and is useful when you want to exactly control
    how your dataset is created, by specifying exactly which `columns` and `label_cols`
    to include.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before you can use [prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset),
    you will need to add the tokenizer outputs to your dataset as columns, as shown
    in the following code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Remember that Hugging Face datasets are stored on disk by default, so this will
    not inflate your memory usage! Once the columns have been added, you can stream
    batches from the dataset and add padding to each batch, which greatly reduces
    the number of padding tokens compared to padding the entire dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the code sample above, you need to pass the tokenizer to `prepare_tf_dataset`
    so it can correctly pad batches as they’re loaded. If all the samples in your
    dataset are the same length and no padding is necessary, you can skip this argument.
    If you need to do something more complex than just padding samples (e.g. corrupting
    tokens for masked language modelling), you can use the `collate_fn` argument instead
    to pass a function that will be called to transform the list of samples into a
    batch and apply any preprocessing you want. See our [examples](https://github.com/huggingface/transformers/tree/main/examples)
    or [notebooks](https://huggingface.co/docs/transformers/notebooks) to see this
    approach in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve created a `tf.data.Dataset`, you can compile and fit the model
    as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Train in native PyTorch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/Dh9CL8fyG80](https://www.youtube-nocookie.com/embed/Dh9CL8fyG80)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    takes care of the training loop and allows you to fine-tune a model in a single
    line of code. For users who prefer to write their own training loop, you can also
    fine-tune a 🤗 Transformers model in native PyTorch.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you may need to restart your notebook or execute the following
    code to free some memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Next, manually postprocess `tokenized_dataset` to prepare it for training.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the `text` column because the model does not accept raw text as an input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Rename the `label` column to `labels` because the model expects the argument
    to be named `labels`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the format of the dataset to return PyTorch tensors instead of lists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then create a smaller subset of the dataset as previously shown to speed up
    the fine-tuning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: DataLoader
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a `DataLoader` for your training and test datasets so you can iterate
    over batches of data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Load your model with the number of expected labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Optimizer and learning rate scheduler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create an optimizer and learning rate scheduler to fine-tune the model. Let’s
    use the [`AdamW`](https://pytorch.org/docs/stable/generated/torch.optim.AdamW.html)
    optimizer from PyTorch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the default learning rate scheduler from [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, specify `device` to use a GPU if you have access to one. Otherwise,
    training on a CPU may take several hours instead of a couple of minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Get free access to a cloud GPU if you don’t have one with a hosted notebook
    like [Colaboratory](https://colab.research.google.com/) or [SageMaker StudioLab](https://studiolab.sagemaker.aws/).
  prefs: []
  type: TYPE_NORMAL
- en: Great, now you are ready to train! 🥳
  prefs: []
  type: TYPE_NORMAL
- en: Training loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To keep track of your training progress, use the [tqdm](https://tqdm.github.io/)
    library to add a progress bar over the number of training steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like how you added an evaluation function to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    you need to do the same when you write your own training loop. But instead of
    calculating and reporting the metric at the end of each epoch, this time you’ll
    accumulate all the batches with `add_batch` and calculate the metric at the very
    end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Additional resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more fine-tuning examples, refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[🤗 Transformers Examples](https://github.com/huggingface/transformers/tree/main/examples)
    includes scripts to train common NLP tasks in PyTorch and TensorFlow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[🤗 Transformers Notebooks](notebooks) contains various notebooks on how to
    fine-tune a model for specific tasks in PyTorch and TensorFlow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
