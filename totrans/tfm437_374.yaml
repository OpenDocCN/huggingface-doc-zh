- en: VipLlava
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/vipllava](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/vipllava)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The VipLlava model was proposed in [Making Large Multimodal Models Understand
    Arbitrary Visual Prompts](https://arxiv.org/abs/2312.00784) by Mu Cai, Haotian
    Liu, Siva Karthik Mustikovela, Gregory P. Meyer, Yuning Chai, Dennis Park, Yong
    Jae Lee.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: VipLlava enhances the training protocol of Llava by marking images and interact
    with the model using natural cues like a “red bounding box” or “pointed arrow”
    during training.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '*While existing large vision-language multimodal models focus on whole image
    understanding, there is a prominent gap in achieving region-specific comprehension.
    Current approaches that use textual coordinates or spatial encodings often fail
    to provide a user-friendly interface for visual prompting. To address this challenge,
    we introduce a novel multimodal model capable of decoding arbitrary visual prompts.
    This allows users to intuitively mark images and interact with the model using
    natural cues like a “red bounding box” or “pointed arrow”. Our simple design directly
    overlays visual markers onto the RGB image, eliminating the need for complex region
    encodings, yet achieves state-of-the-art performance on region-understanding tasks
    like Visual7W, PointQA, and Visual Commonsense Reasoning benchmark. Furthermore,
    we present ViP-Bench, a comprehensive benchmark to assess the capability of models
    in understanding visual prompts across multiple dimensions, enabling future research
    in this domain. Code, data, and model are publicly available.*'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'Tips:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: The architecture is similar than llava architecture except that the multi-modal
    projector takes a set of concatenated vision hidden states and has an additional
    layernorm layer on that module.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We advise users to use `padding_side="left"` when computing batched generation
    as it leads to more accurate results. Simply make sure to call `processor.tokenizer.padding_side
    = "left"` before generating.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note the model has not been explicitly trained to process multiple images in
    the same prompt, although this is technically possible, you may experience inaccurate
    results.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For better results, we recommend users to prompt the model with the correct
    prompt format:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For multiple turns conversation:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The original code can be found [here](https://github.com/mu-cai/ViP-LLaVA).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: This model was contributed by [Younes Belkada](https://huggingface.co/ybelkada)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: VipLlavaConfig
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.VipLlavaConfig`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/vipllava/configuration_vipllava.py#L28)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '`vision_config` (`VipLlavaVisionConfig`, *optional*) — Custom vision config
    or dict'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_config` (`Union[AutoConfig, dict]`, *optional*) — The config object of
    the text backbone. Can be any of `LlamaConfig` or `MistralConfig`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_index` (`int`, *optional*, defaults to -100) — The ignore index for
    the loss function.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_token_index` (`int`, *optional*, defaults to 32000) — The image token
    index to encode the image prompt.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`projector_hidden_act` (`str`, *optional*, defaults to `"gelu"`) — The activation
    function used by the multimodal projector.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`projector_layernorm_eps` (`float`, *optional*, defaults to 1e-05) — The layer
    norm epsilon of the projector layernorm'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vision_feature_layers` (`List[int]`, *optional*, defaults to `[-2, -5, -8,
    -11, 6]`) — The list of layers to select the vision features from.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vocab_size` (`int`, *optional*, defaults to 32000) — Vocabulary size of the
    VipLlava model. Defines the number of different tokens that can be represented
    by the `inputs_ids` passed when calling [~VipLlavaForConditionalGeneration](/docs/transformers/v4.37.2/en/model_doc/vipllava#transformers.VipLlavaForConditionalGeneration)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a [VipLlavaForConditionalGeneration](/docs/transformers/v4.37.2/en/model_doc/vipllava#transformers.VipLlavaForConditionalGeneration).
    It is used to instantiate an VipLlava model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the VipLlava-9B.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: e.g. [ybelkada/vip-llava-7b-hf](https://huggingface.co/ybelkada/vip-llava-7b-hf)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: VipLlavaForConditionalGeneration
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.VipLlavaForConditionalGeneration`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/vipllava/modeling_vipllava.py#L240)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([VipLlavaConfig](/docs/transformers/v4.37.2/en/model_doc/vipllava#transformers.VipLlavaConfig)
    or `VipLlavaVisionConfig`) — Model configuration class with all the parameters
    of the model. Initializing with a config file does not load the weights associated
    with the model, only the configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VIPLLAVA model which consists of a vision backbone and a language model.
    This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/vipllava/modeling_vipllava.py#L356)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '`input_ids` (`torch.LongTensor` of shape `(batch_size, sequence_length)`) —
    Indices of input sequence tokens in the vocabulary. Padding will be ignored by
    default should you provide it.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indices can be obtained using [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer).
    See [PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)
    and [PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)
    for details.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[What are input IDs?](../glossary#input-ids)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, image_size,
    image_size)) -- The tensors corresponding to the input images. Pixel values can
    be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [CLIPImageProcessor.__call__()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details ([]`LlavaProcessor`] uses [CLIPImageProcessor](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPImageProcessor)
    for processing images).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask` (`torch.Tensor` of shape `(batch_size, sequence_length)`,
    *optional*) — Mask to avoid performing attention on padding token indices. Mask
    values selected in `[0, 1]`:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for tokens that are `not masked`,
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for tokens that are `masked`.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Indices can be obtained using [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer).
    See [PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)
    and [PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)
    for details.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `past_key_values` is used, optionally only the last `decoder_input_ids` have
    to be input (see `past_key_values`).
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you want to change padding behavior, you should read `modeling_opt._prepare_decoder_attention_mask`
    and modify to your needs. See diagram 1 in [the paper](https://arxiv.org/abs/1910.13461)
    for more information on the default strategy.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 1 indicates the head is `not masked`,
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 indicates the head is `masked`.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`position_ids` (`torch.LongTensor` of shape `(batch_size, sequence_length)`,
    *optional*) — Indices of positions of each input sequence tokens in the position
    embeddings. Selected in the range `[0, config.n_positions - 1]`. [What are position
    IDs?](../glossary#position-ids)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`past_key_values` (`tuple(tuple(torch.FloatTensor))`, *optional*, returned
    when `use_cache=True` is passed or when `config.use_cache=True`) — Tuple of `tuple(torch.FloatTensor)`
    of length `config.n_layers`, with each tuple having 2 tensors of shape `(batch_size,
    num_heads, sequence_length, embed_size_per_head)`) and 2 additional tensors of
    shape `(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains pre-computed hidden-states (key and values in the self-attention blocks
    and in the cross-attention blocks) that can be used (see `past_key_values` input)
    to speed up sequential decoding.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids`
    (those that don’t have their past key value states given to this model) of shape
    `(batch_size, 1)` instead of all `decoder_input_ids` of shape `(batch_size, sequence_length)`.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Optionally, instead of passing `input_ids` you can
    choose to directly pass an embedded representation. This is useful if you want
    more control over how to convert `input_ids` indices into associated vectors than
    the model’s internal embedding lookup matrix.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_cache` (`bool`, *optional*) — If set to `True`, `past_key_values` key
    value states are returned and can be used to speed up decoding (see `past_key_values`).'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Args — labels (`torch.LongTensor` of shape `(batch_size, sequence_length)`,
    *optional*): Labels for computing the masked language modeling loss. Indices should
    either be in `[0, ..., config.vocab_size]` or -100 (see `input_ids` docstring).
    Tokens with indices set to `-100` are ignored (masked), the loss is only computed
    for the tokens with labels in `[0, ..., config.vocab_size]`.'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Returns
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.vipllava.modeling_vipllava.VipLlavaCausalLMOutputWithPast`
    or `tuple(torch.FloatTensor)`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.vipllava.modeling_vipllava.VipLlavaCausalLMOutputWithPast`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([VipLlavaConfig](/docs/transformers/v4.37.2/en/model_doc/vipllava#transformers.VipLlavaConfig))
    and inputs.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Language modeling loss (for next-token prediction).'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`损失` (`torch.FloatTensor`，形状为`(1,)`，*可选*，在提供`labels`时返回) — 语言建模损失（用于下一个标记的预测）。'
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, sequence_length, config.vocab_size)`)
    — Prediction scores of the language modeling head (scores for each vocabulary
    token before SoftMax).'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits` (`torch.FloatTensor`，形状为`(batch_size, sequence_length, config.vocab_size)`)
    — 语言建模头的预测分数（SoftMax之前每个词汇标记的分数）。'
- en: '`past_key_values` (`tuple(tuple(torch.FloatTensor))`, *optional*, returned
    when `use_cache=True` is passed or when `config.use_cache=True`) — Tuple of `tuple(torch.FloatTensor)`
    of length `config.n_layers`, with each tuple having 2 tensors of shape `(batch_size,
    num_heads, sequence_length, embed_size_per_head)`)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`past_key_values` (`tuple(tuple(torch.FloatTensor))`，*可选*，当传递`use_cache=True`或`config.use_cache=True`时返回)
    — 长度为`config.n_layers`的`tuple(torch.FloatTensor)`元组，每个元组有2个形状为`(batch_size, num_heads,
    sequence_length, embed_size_per_head)`的张量）'
- en: Contains pre-computed hidden-states (key and values in the self-attention blocks)
    that can be used (see `past_key_values` input) to speed up sequential decoding.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含预先计算的隐藏状态（自注意力块中的键和值），可用于加速顺序解码（查看`past_key_values`输入）。
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states` (`tuple(torch.FloatTensor)`，*可选*，当传递`output_hidden_states=True`或`config.output_hidden_states=True`时返回)
    — 形状为`(batch_size, sequence_length, hidden_size)`的`torch.FloatTensor`元组（如果模型有嵌入层，则为嵌入的输出+每层的输出）。'
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模型在每一层输出的隐藏状态以及可选的初始嵌入输出。
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attentions` (`tuple(torch.FloatTensor)`，*可选*，当传递`output_attentions=True`或`config.output_attentions=True`时返回)
    — 形状为`(batch_size, num_heads, sequence_length, sequence_length)`的`torch.FloatTensor`元组（每层一个）。'
- en: Attentions weights after the attention softmax, used to compute the weighted
    average in the self-attention heads.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意力softmax后的注意力权重，用于计算自注意力头中的加权平均值。
- en: '`image_hidden_states` (`tuple(torch.FloatTensor)`, *optional*) — Tuple of `torch.FloatTensor`
    (one for the output of the image embeddings, `(batch_size, num_images, sequence_length,
    hidden_size)`.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_hidden_states` (`tuple(torch.FloatTensor)`，*可选*) — 形状为`(batch_size,
    num_images, sequence_length, hidden_size)`的`torch.FloatTensor`元组（用于图像嵌入的输出）。'
- en: image_hidden_states of the model produced by the vision encoder, and optionally
    by the perceiver
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由视觉编码器生成的模型的图像隐藏状态，以及可选的感知器
- en: The [VipLlavaForConditionalGeneration](/docs/transformers/v4.37.2/en/model_doc/vipllava#transformers.VipLlavaForConditionalGeneration)
    forward method, overrides the `__call__` special method.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[VipLlavaForConditionalGeneration](/docs/transformers/v4.37.2/en/model_doc/vipllava#transformers.VipLlavaForConditionalGeneration)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的步骤需要在此函数内定义，但应该在此之后调用`Module`实例，而不是在此处调用，因为前者会处理运行前后处理步骤，而后者会默默地忽略它们。
- en: 'Example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
