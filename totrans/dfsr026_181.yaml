- en: Value-guided planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/diffusers/api/pipelines/value_guided_sampling](https://huggingface.co/docs/diffusers/api/pipelines/value_guided_sampling)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/85.3a008274.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Tip.230e2334.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Docstring.93f6f462.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ§ª This is an experimental pipeline for reinforcement learning!
  prefs: []
  type: TYPE_NORMAL
- en: This pipeline is based on the [Planning with Diffusion for Flexible Behavior
    Synthesis](https://huggingface.co/papers/2205.09991) paper by Michael Janner,
    Yilun Du, Joshua B. Tenenbaum, Sergey Levine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Model-based reinforcement learning methods often use learning only for the
    purpose of estimating an approximate dynamics model, offloading the rest of the
    decision-making work to classical trajectory optimizers. While conceptually simple,
    this combination has a number of empirical shortcomings, suggesting that learned
    models may not be well-suited to standard trajectory optimization. In this paper,
    we consider what it would look like to fold as much of the trajectory optimization
    pipeline as possible into the modeling problem, such that sampling from the model
    and planning with it become nearly identical. The core of our technical approach
    lies in a diffusion probabilistic model that plans by iteratively denoising trajectories.
    We show how classifier-guided sampling and image inpainting can be reinterpreted
    as coherent planning strategies, explore the unusual and useful properties of
    diffusion-based planning methods, and demonstrate the effectiveness of our framework
    in control settings that emphasize long-horizon decision-making and test-time
    flexibility.*'
  prefs: []
  type: TYPE_NORMAL
- en: You can find additional information about the model on the [project page](https://diffusion-planning.github.io/),
    the [original codebase](https://github.com/jannerm/diffuser), or try it out in
    a demo [notebook](https://colab.research.google.com/drive/1rXm8CX4ZdN5qivjJ2lhwhkOmt_m0CvU0#scrollTo=6HXJvhyqcITc&uniqifier=1).
  prefs: []
  type: TYPE_NORMAL
- en: The script to run the model is available [here](https://github.com/huggingface/diffusers/tree/main/examples/reinforcement_learning).
  prefs: []
  type: TYPE_NORMAL
- en: Make sure to check out the Schedulers [guide](../../using-diffusers/schedulers)
    to learn how to explore the tradeoff between scheduler speed and quality, and
    see the [reuse components across pipelines](../../using-diffusers/loading#reuse-components-across-pipelines)
    section to learn how to efficiently load the same components into multiple pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: ValueGuidedRLPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.experimental.ValueGuidedRLPipeline`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/experimental/rl/value_guided_sampling.py#L25)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`value_function` ([UNet1DModel](/docs/diffusers/v0.26.3/en/api/models/unet#diffusers.UNet1DModel))
    â€” A specialized UNet for fine-tuning trajectories base on reward.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unet` ([UNet1DModel](/docs/diffusers/v0.26.3/en/api/models/unet#diffusers.UNet1DModel))
    â€” UNet architecture to denoise the encoded trajectories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scheduler` ([SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin))
    â€” A scheduler to be used in combination with `unet` to denoise the encoded trajectories.
    Default for this application is [DDPMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/ddpm#diffusers.DDPMScheduler).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`env` () â€” An environment following the OpenAI gym API to act in. For now only
    Hopper has pretrained models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipeline for value-guided sampling from a diffusion model trained to predict
    sequences of states.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline).
    Check the superclass documentation for the generic methods implemented for all
    pipelines (downloading, saving, running on a particular device, etc.).
  prefs: []
  type: TYPE_NORMAL
