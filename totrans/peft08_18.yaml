- en: Contribute to PEFT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/peft/developer_guides/contributing](https://huggingface.co/docs/peft/developer_guides/contributing)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/peft/v0.8.2/en/_app/immutable/assets/0.e3b0c442.css" rel="modulepreload">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/entry/start.c9bed6ec.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/scheduler.d627b047.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/singletons.95cf6adf.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/index.a57a1c33.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/paths.5d07c46f.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/entry/app.72c78cae.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/index.d48c4817.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/nodes/0.aa346fde.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/nodes/7.3fd3fd76.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/CodeBlock.5da89496.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/Heading.47e562a9.js">
  prefs: []
  type: TYPE_NORMAL
- en: We are happy to accept contributions to PEFT. If you plan to contribute, please
    read this to make the process as smooth as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For code contributions to PEFT, you should choose the [“source”](../install#source)
    installation method.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to creating a pull request, follow the [Creating a pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)
    guide by GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Tests and code quality checks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regardless of the contribution type (unless it’s only about the docs), you should
    run tests and code quality checks before creating a PR to ensure your contribution
    doesn’t break anything and follows the project standards.
  prefs: []
  type: TYPE_NORMAL
- en: 'We provide a Makefile to execute the necessary tests. Run the code below for
    the unit test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run one of the following to either only check or check and fix code quality
    and style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Running all the tests can take a couple of minutes, so during development it
    can be more efficient to only run tests specific to your change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This should finish much quicker and allow for faster iteration. However, you
    should still run the whole test suite before creating a PR because your change
    can inadvertently break tests that at first glance are unrelated.
  prefs: []
  type: TYPE_NORMAL
- en: If your change is specific to a hardware setting (e.g., it requires CUDA), take
    a look at [tests/test_gpu_examples.py](https://github.com/huggingface/peft/blob/1c1c7fdaa6e6abaa53939b865dee1eded82ad032/tests/test_gpu_examples.py)
    and [tests/test_common_gpu.py](https://github.com/huggingface/peft/blob/1c1c7fdaa6e6abaa53939b865dee1eded82ad032/tests/test_common_gpu.py)
    to see if it makes sense to add tests there. If your change could have an effect
    on saving and loading models, please run the tests with the `--regression` flag
    to trigger regression tests.
  prefs: []
  type: TYPE_NORMAL
- en: It can happen that while you’re working on your PR, the underlying code base
    changes due to other changes being merged. If that happens – especially when there
    is a merge conflict – please update your branch with the latest changes. This
    can be a merge or a rebase, and we’ll squash and merge the PR once it’s ready.
  prefs: []
  type: TYPE_NORMAL
- en: PR description
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When opening a PR, please provide a nice description of the change you’re proposing.
    If it relates to other issues or PRs, please reference them. Providing a good
    description not only helps the reviewers review your code better and faster, it
    can also be used later (as a basis) for the commit message which helps with long
    term maintenance of the project.
  prefs: []
  type: TYPE_NORMAL
- en: If your code makes some non-trivial changes, it may also be a good idea to add
    comments to the code to explain those changes. For example, if you had to iterate
    on your implementation multiple times because the most obvious way didn’t work,
    it’s a good indication that a code comment is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Bugfixes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Please give a description of the circumstances that led to the bug. If there
    is an existing issue, please link to it (e.g., “Resolves #12345”).'
  prefs: []
  type: TYPE_NORMAL
- en: Ideally when a bugfix is provided, it should be accompanied by a test for the
    bug. The test should fail with the current code and pass with the bugfix. Add
    a comment to the test that references the issue or PR. Without a test, it is more
    difficult to prevent regressions in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Add a new fine-tuning method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: New parameter-efficient fine-tuning methods are developed all the time. If you
    would like to add a new and promising method to PEFT, please follow these steps.
  prefs: []
  type: TYPE_NORMAL
- en: Before you start to implement the new method, please open a GitHub issue with
    your proposal. This way, the maintainers can give you some early feedback.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Please add a link to the source (usually a paper) of the method. Some evidence
    should be provided there is general interest in using the method. We will not
    add new methods that are freshly published, but there is no evidence of demand
    for it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When implementing the method, it makes sense to look for existing implementations
    that already exist as a guide. Moreover, when you structure your code, please
    take inspiration from the other PEFT methods. For example, if your method is similar
    to LoRA, it makes sense to structure your code similarly or even reuse some functions
    or classes where it makes sense (some code duplication is okay, but don’t overdo
    it).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ideally, in addition to the implementation of the new method, there should also
    be examples (notebooks, scripts), documentation, and an extensive test suite that
    proves the method works with a variety of tasks. However, this can be more challenging
    so it is acceptable to only provide the implementation and at least one working
    example. Documentation and tests can be added in follow up PRs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have something that seems to be working, don’t hesitate to create a
    draft PR even if it’s not in a mergeable state yet. The maintainers are happy
    to give you feedback and guidance along the way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add other features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is best if you first open an issue on GitHub with a proposal to add the new
    feature. This way, you can discuss with the maintainers if it makes sense to add
    the feature before spending too much time on implementing it.
  prefs: []
  type: TYPE_NORMAL
- en: New features should generally be accompanied by tests and documentation or examples.
    Without the latter, users will have a hard time discovering your cool new feature.
  prefs: []
  type: TYPE_NORMAL
- en: Changes to the code should be implemented in a backward-compatible way. For
    example, existing code should continue to work the same way after the feature
    is merged.
  prefs: []
  type: TYPE_NORMAL
