- en: Contribute to PEFT
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为PEFT做出贡献
- en: 'Original text: [https://huggingface.co/docs/peft/developer_guides/contributing](https://huggingface.co/docs/peft/developer_guides/contributing)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/peft/developer_guides/contributing](https://huggingface.co/docs/peft/developer_guides/contributing)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: We are happy to accept contributions to PEFT. If you plan to contribute, please
    read this to make the process as smooth as possible.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们很高兴接受对PEFT的贡献。如果您计划贡献，请阅读此内容，以使过程尽可能顺利。
- en: Installation
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: For code contributions to PEFT, you should choose the [“source”](../install#source)
    installation method.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PEFT的代码贡献，您应该选择[“source”](../install#source)安装方法。
- en: If you are new to creating a pull request, follow the [Creating a pull request](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)
    guide by GitHub.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次创建拉取请求，请按照GitHub的[创建拉取请求](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)指南操作。
- en: Tests and code quality checks
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试和代码质量检查
- en: Regardless of the contribution type (unless it’s only about the docs), you should
    run tests and code quality checks before creating a PR to ensure your contribution
    doesn’t break anything and follows the project standards.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论贡献类型如何（除非仅涉及文档），在创建PR之前，您应该运行测试和代码质量检查，以确保您的贡献不会破坏任何内容并遵循项目标准。
- en: 'We provide a Makefile to execute the necessary tests. Run the code below for
    the unit test:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供一个Makefile来执行必要的测试。运行以下代码进行单元测试：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run one of the following to either only check or check and fix code quality
    and style:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码之一，要么只检查，要么检查并修复代码质量和风格：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Running all the tests can take a couple of minutes, so during development it
    can be more efficient to only run tests specific to your change:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 运行所有测试可能需要几分钟，因此在开发过程中，只运行特定于您更改的测试可能更有效。
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This should finish much quicker and allow for faster iteration. However, you
    should still run the whole test suite before creating a PR because your change
    can inadvertently break tests that at first glance are unrelated.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该更快完成，从而实现更快的迭代。但是，您仍应在创建PR之前运行整个测试套件，因为您的更改可能会无意中破坏乍一看与之无关的测试。
- en: If your change is specific to a hardware setting (e.g., it requires CUDA), take
    a look at [tests/test_gpu_examples.py](https://github.com/huggingface/peft/blob/1c1c7fdaa6e6abaa53939b865dee1eded82ad032/tests/test_gpu_examples.py)
    and [tests/test_common_gpu.py](https://github.com/huggingface/peft/blob/1c1c7fdaa6e6abaa53939b865dee1eded82ad032/tests/test_common_gpu.py)
    to see if it makes sense to add tests there. If your change could have an effect
    on saving and loading models, please run the tests with the `--regression` flag
    to trigger regression tests.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的更改特定于硬件设置（例如，需要CUDA），请查看[tests/test_gpu_examples.py](https://github.com/huggingface/peft/blob/1c1c7fdaa6e6abaa53939b865dee1eded82ad032/tests/test_gpu_examples.py)和[tests/test_common_gpu.py](https://github.com/huggingface/peft/blob/1c1c7fdaa6e6abaa53939b865dee1eded82ad032/tests/test_common_gpu.py)，看看是否有必要在那里添加测试。如果您的更改可能会影响保存和加载模型，请使用`--regression`标志运行测试以触发回归测试。
- en: It can happen that while you’re working on your PR, the underlying code base
    changes due to other changes being merged. If that happens – especially when there
    is a merge conflict – please update your branch with the latest changes. This
    can be a merge or a rebase, and we’ll squash and merge the PR once it’s ready.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在您处理PR时，由于其他更改被合并而导致底层代码库发生更改是可能的。如果发生这种情况-特别是在出现合并冲突时-请使用最新更改更新您的分支。这可以是合并或变基，一旦准备就绪，我们将压缩并合并PR。
- en: PR description
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PR描述
- en: When opening a PR, please provide a nice description of the change you’re proposing.
    If it relates to other issues or PRs, please reference them. Providing a good
    description not only helps the reviewers review your code better and faster, it
    can also be used later (as a basis) for the commit message which helps with long
    term maintenance of the project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开PR时，请提供对您提出的更改的良好描述。如果与其他问题或PR相关，请引用它们。提供良好的描述不仅有助于审阅人员更好更快地审查您的代码，还可以稍后（作为基础）用于提交消息，有助于项目的长期维护。
- en: If your code makes some non-trivial changes, it may also be a good idea to add
    comments to the code to explain those changes. For example, if you had to iterate
    on your implementation multiple times because the most obvious way didn’t work,
    it’s a good indication that a code comment is needed.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的代码进行了一些重要更改，也可以添加注释来解释这些更改。例如，如果您不得不多次迭代您的实现，因为最明显的方法不起作用，那么需要添加代码注释。
- en: Bugfixes
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bug修复
- en: 'Please give a description of the circumstances that led to the bug. If there
    is an existing issue, please link to it (e.g., “Resolves #12345”).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请描述导致错误的情况。如果存在问题，请链接到它（例如，“解决＃12345”）。
- en: Ideally when a bugfix is provided, it should be accompanied by a test for the
    bug. The test should fail with the current code and pass with the bugfix. Add
    a comment to the test that references the issue or PR. Without a test, it is more
    difficult to prevent regressions in the future.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，提供bug修复时，应该附带一个针对该bug的测试。测试应该在当前代码中失败，并在bug修复后通过。在测试中添加一个引用问题或PR的注释。没有测试，将更难以防止未来的回归。
- en: Add a new fine-tuning method
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新的微调方法
- en: New parameter-efficient fine-tuning methods are developed all the time. If you
    would like to add a new and promising method to PEFT, please follow these steps.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 新的参数高效微调方法正在不断开发。如果您想将新的有前途的方法添加到PEFT，请按照以下步骤。
- en: Before you start to implement the new method, please open a GitHub issue with
    your proposal. This way, the maintainers can give you some early feedback.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始实现新方法之前，请通过GitHub提出您的建议。这样，维护者可以给您一些早期反馈。
- en: Please add a link to the source (usually a paper) of the method. Some evidence
    should be provided there is general interest in using the method. We will not
    add new methods that are freshly published, but there is no evidence of demand
    for it.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请添加方法的来源链接（通常是一篇论文）。应提供一些证据表明有人对使用该方法感兴趣。我们不会添加刚刚发布的新方法，但没有需求的证据。
- en: When implementing the method, it makes sense to look for existing implementations
    that already exist as a guide. Moreover, when you structure your code, please
    take inspiration from the other PEFT methods. For example, if your method is similar
    to LoRA, it makes sense to structure your code similarly or even reuse some functions
    or classes where it makes sense (some code duplication is okay, but don’t overdo
    it).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在实现方法时，最好查找已经存在的实现作为指南。此外，当您构建代码时，请从其他PEFT方法中汲取灵感。例如，如果您的方法类似于LoRA，那么将代码结构化或者在合适的地方重用一些函数或类是有意义的（一些代码重复是可以接受的，但不要过度）。
- en: Ideally, in addition to the implementation of the new method, there should also
    be examples (notebooks, scripts), documentation, and an extensive test suite that
    proves the method works with a variety of tasks. However, this can be more challenging
    so it is acceptable to only provide the implementation and at least one working
    example. Documentation and tests can be added in follow up PRs.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理想情况下，除了实现新方法之外，还应该有示例（笔记本，脚本），文档和一个广泛的测试套件，证明该方法可以与各种任务一起工作。然而，这可能更具挑战性，因此只提供实现和至少一个可工作的示例是可以接受的。文档和测试可以在后续的PR中添加。
- en: Once you have something that seems to be working, don’t hesitate to create a
    draft PR even if it’s not in a mergeable state yet. The maintainers are happy
    to give you feedback and guidance along the way.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您有了似乎有效的东西，请不要犹豫，即使它还没有达到可合并的状态，也可以创建一个草案PR。维护者很乐意在这个过程中给您反馈和指导。
- en: Add other features
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加其他功能
- en: It is best if you first open an issue on GitHub with a proposal to add the new
    feature. This way, you can discuss with the maintainers if it makes sense to add
    the feature before spending too much time on implementing it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最好先在GitHub上提出添加新功能的建议。这样，您可以在花费太多时间实现之前与维护者讨论是否有意义添加该功能。
- en: New features should generally be accompanied by tests and documentation or examples.
    Without the latter, users will have a hard time discovering your cool new feature.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能通常应该附带测试和文档或示例。没有后者，用户将很难发现您的新功能。
- en: Changes to the code should be implemented in a backward-compatible way. For
    example, existing code should continue to work the same way after the feature
    is merged.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对代码的更改应该以向后兼容的方式实现。例如，在功能合并后，现有代码应该继续以相同的方式工作。
