["```py\n>>> from diffusers import DiffusionPipeline\n>>> import torch\n\n>>> pipe = DiffusionPipeline.from_pretrained(\"SimianLuo/LCM_Dreamshaper_v7\")\n>>> # To save GPU memory, torch.float16 can be used, but it may compromise image quality.\n>>> pipe.to(torch_device=\"cuda\", torch_dtype=torch.float32)\n\n>>> prompt = \"Self-portrait oil painting, a beautiful cyborg with golden hair, 8k\"\n\n>>> # Can be set to 1~50 steps. LCM support fast inference even <= 4 steps. Recommend: 1~8 steps.\n>>> num_inference_steps = 4\n>>> images = pipe(prompt=prompt, num_inference_steps=num_inference_steps, guidance_scale=8.0).images\n>>> images[0].save(\"image.png\")\n```", "```py\n>>> from diffusers import AutoPipelineForImage2Image\n>>> import torch\n>>> import PIL\n\n>>> pipe = AutoPipelineForImage2Image.from_pretrained(\"SimianLuo/LCM_Dreamshaper_v7\")\n>>> # To save GPU memory, torch.float16 can be used, but it may compromise image quality.\n>>> pipe.to(torch_device=\"cuda\", torch_dtype=torch.float32)\n\n>>> prompt = \"High altitude snowy mountains\"\n>>> image = PIL.Image.open(\"./snowy_mountains.png\")\n\n>>> # Can be set to 1~50 steps. LCM support fast inference even <= 4 steps. Recommend: 1~8 steps.\n>>> num_inference_steps = 4\n>>> images = pipe(\n...     prompt=prompt, image=image, num_inference_steps=num_inference_steps, guidance_scale=8.0\n... ).images\n\n>>> images[0].save(\"image.png\")\n```"]