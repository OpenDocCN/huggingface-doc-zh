- en: Using GPU Spaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://huggingface.co/docs/hub/spaces-gpus](https://huggingface.co/docs/hub/spaces-gpus)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/hub/main/en/_app/immutable/assets/0.e3b0c442.css" rel="modulepreload">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/entry/start.e368d515.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/scheduler.d6170356.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/singletons.7c936848.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/paths.e886be64.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/entry/app.eaa965a0.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/index.fcd4cc08.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/nodes/0.98ea1774.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/nodes/110.da9e6bda.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/Tip.b09c67cf.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/CodeBlock.7b16bdef.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/Heading.8660bd0e.js">
  prefs: []
  type: TYPE_NORMAL
- en: You can upgrade your Space to use a GPU accelerator using the *Settings* button
    in the top navigation bar of the Space. You can even request a free upgrade if
    you are building a cool demo for a side project!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f250872d73732a4ae6f12dd2dfa240d2.png) ![](../Images/666b57cb00f4f222cf0073074268799c.png)Longer-term,
    we would also like to expose non-GPU hardware, like HPU, IPU or TPU. If you have
    a specific AI hardware you''d like to run on, please let us know (website at huggingface.co).'
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as your Space is running on GPU you can see which hardware it‚Äôs running
    on directly from this badge:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/68b2c747962ca5143f60782b8531081c.png) ![](../Images/bb429b5fd1102e9c89033e8c763fb07f.png)'
  prefs: []
  type: TYPE_IMG
- en: Hardware Specs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following table, you can see the Specs for the different upgrade options.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Hardware** | **GPU Memory** | **CPU** | **Memory** | **Disk** | **Hourly
    Price** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| CPU Basic | - | 2 vCPU | 16 GB | 50 GB | Free! |'
  prefs: []
  type: TYPE_TB
- en: '| CPU Upgrade | - | 8 vCPU | 32 GB | 50 GB | $0.03 |'
  prefs: []
  type: TYPE_TB
- en: '| Nvidia T4 - small | 16GB | 4 vCPU | 15 GB | 50 GB | $0.60 |'
  prefs: []
  type: TYPE_TB
- en: '| Nvidia T4 - medium | 16GB | 8 vCPU | 30 GB | 100 GB | $0.90 |'
  prefs: []
  type: TYPE_TB
- en: '| Nvidia A10G - small | 24GB | 4 vCPU | 15 GB | 110 GB | $1.05 |'
  prefs: []
  type: TYPE_TB
- en: '| Nvidia A10G - large | 24GB | 12 vCPU | 46 GB | 200 GB | $3.15 |'
  prefs: []
  type: TYPE_TB
- en: '| Nvidia A100 - large | 40GB | 12 vCPU | 142 GB | 1000 GB | $4.13 |'
  prefs: []
  type: TYPE_TB
- en: Configure hardware programmatically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can programmatically configure your Space hardware using `huggingface_hub`.
    This allows for a wide range of use cases where you need to dynamically assign
    GPUs. Check out [this guide](https://huggingface.co/docs/huggingface_hub/main/en/guides/manage_spaces)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Framework specific requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most Spaces should run out of the box after a GPU upgrade, but sometimes you‚Äôll
    need to install CUDA versions of the machine learning frameworks you use. Please,
    follow this guide to ensure your Space takes advantage of the improved hardware.
  prefs: []
  type: TYPE_NORMAL
- en: PyTorch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You‚Äôll need to install a version of PyTorch compatible with the built-in CUDA
    drivers. Adding the following two lines to your `requirements.txt` file should
    work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify whether the installation was successful by running the following
    code in your `app.py` and checking the output in your Space logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Many frameworks automatically use the GPU if one is available. This is the
    case for the Pipelines in ü§ó `transformers`, `fastai` and many others. In other
    cases, or if you use PyTorch directly, you may need to move your models and data
    to the GPU to ensure computation is done on the accelerator and not on the CPU.
    You can use PyTorch‚Äôs `.to()` syntax, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: JAX
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you use JAX, you need to specify the URL that contains CUDA compatible packages.
    Please, add the following lines to your `requirements.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After that, you can verify the installation by printing the output from the
    following code and checking it in your Space logs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tensorflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default `tensorflow` installation should recognize the CUDA device. Just
    add `tensorflow` to your `requirements.txt` file and use the following code in
    your `app.py` to verify in your Space logs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Billing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Billing on Spaces is based on hardware usage and is computed by the minute:
    you get charged for every minute the Space runs on the requested hardware, regardless
    of whether the Space is used.'
  prefs: []
  type: TYPE_NORMAL
- en: During a Space‚Äôs lifecycle, it is only billed when the Space is actually `Running`.
    This means that there is no cost during build or startup.
  prefs: []
  type: TYPE_NORMAL
- en: If a running Space starts to fail, it will be automatically suspended and the
    billing will stop.
  prefs: []
  type: TYPE_NORMAL
- en: Spaces running on free hardware are suspended automatically if they are not
    used for an extended period of time (e.g. two days). Upgraded Spaces run indefinitely
    by default, even if there is no usage. You can change this behavior by [setting
    a custom ‚Äúsleep time‚Äù](#sleep-time) in the Space‚Äôs settings. To interrupt the
    billing on your Space, you can change the Hardware to CPU basic, or [pause](#pause)
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Additional information about billing can be found in the [dedicated Hub-wide
    section](./billing).
  prefs: []
  type: TYPE_NORMAL
- en: Community GPU Grants
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Do you have an awesome Space but need help covering the GPU hardware upgrade
    costs? We love helping out those with an innovative Space so please feel free
    to apply for a community GPU grant and see if yours makes the cut! This application
    can be found in your Space hardware repo settings in the lower left corner under
    ‚Äúsleep time settings‚Äù:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Community GPU Grant](../Images/53688f2d91512644bb224b818b9a356d.png)'
  prefs: []
  type: TYPE_IMG
- en: Set a custom sleep time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your Space runs on the default `cpu-basic` hardware, it will go to sleep
    if inactive for more than a set time (currently, 48 hours). Anyone visiting your
    Space will restart it automatically.
  prefs: []
  type: TYPE_NORMAL
- en: If you want your Space never to deactivate or if you want to set a custom sleep
    time, you need to upgrade to a paid Hardware.
  prefs: []
  type: TYPE_NORMAL
- en: By default, an upgraded Space will never go to sleep. However, you can use this
    setting for your upgraded Space to become idle (`stopped` stage) when it‚Äôs unused
    üò¥. You are not going to be charged for the upgraded hardware while it is asleep.
    The Space will ‚Äòwake up‚Äô or get restarted once it receives a new visitor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following interface will then be available in your Spaces hardware settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/13dc5075b8c78365eb0eed9b0def888f.png) ![](../Images/e279b61cfbb67cbfafc33ca4ee956593.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following options are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f217013f6a02f28770fef1607f219710.png) ![](../Images/7bcb6e2518414ad6d4b5fe06c961dcb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Pausing a Space
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can `pause` a Space from the repo settings. A ‚Äúpaused‚Äù Space means that
    the Space is on hold and will not use resources until manually restarted, and
    only the owner of a paused Space can restart it. Paused time is not billed.
  prefs: []
  type: TYPE_NORMAL
