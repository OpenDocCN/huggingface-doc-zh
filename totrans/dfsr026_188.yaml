- en: DDIMScheduler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://huggingface.co/docs/diffusers/api/schedulers/ddim](https://huggingface.co/docs/diffusers/api/schedulers/ddim)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/89.81ccd2a7.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Tip.230e2334.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Docstring.93f6f462.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/CodeBlock.57fe6e13.js">
  prefs: []
  type: TYPE_NORMAL
- en: '[Denoising Diffusion Implicit Models](https://huggingface.co/papers/2010.02502)
    (DDIM) by Jiaming Song, Chenlin Meng and Stefano Ermon.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Denoising diffusion probabilistic models (DDPMs) have achieved high quality
    image generation without adversarial training, yet they require simulating a Markov
    chain for many steps to produce a sample. To accelerate sampling, we present denoising
    diffusion implicit models (DDIMs), a more efficient class of iterative implicit
    probabilistic models with the same training procedure as DDPMs. In DDPMs, the
    generative process is defined as the reverse of a Markovian diffusion process.
    We construct a class of non-Markovian diffusion processes that lead to the same
    training objective, but whose reverse process can be much faster to sample from.
    We empirically demonstrate that DDIMs can produce high quality samples 10√ó to
    50√ó faster in terms of wall-clock time compared to DDPMs, allow us to trade off
    computation for sample quality, and can perform semantically meaningful image
    interpolation directly in the latent space.*'
  prefs: []
  type: TYPE_NORMAL
- en: The original codebase of this paper can be found at [ermongroup/ddim](https://github.com/ermongroup/ddim),
    and you can contact the author on [tsong.me](https://tsong.me/).
  prefs: []
  type: TYPE_NORMAL
- en: Tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The paper [Common Diffusion Noise Schedules and Sample Steps are Flawed](https://huggingface.co/papers/2305.08891)
    claims that a mismatch between the training and inference settings leads to suboptimal
    inference generation results for Stable Diffusion. To fix this, the authors propose:'
  prefs: []
  type: TYPE_NORMAL
- en: üß™ This is an experimental feature!
  prefs: []
  type: TYPE_NORMAL
- en: rescale the noise schedule to enforce zero terminal signal-to-noise ratio (SNR)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: train a model with `v_prediction` (add the following argument to the [train_text_to_image.py](https://github.com/huggingface/diffusers/blob/main/examples/text_to_image/train_text_to_image.py)
    or [train_text_to_image_lora.py](https://github.com/huggingface/diffusers/blob/main/examples/text_to_image/train_text_to_image_lora.py)
    scripts)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: change the sampler to always start from the last timestep
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: rescale classifier-free guidance to prevent over-exposure
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: DDIMScheduler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.DDIMScheduler'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_ddim.py#L131)'
  prefs: []
  type: TYPE_NORMAL
- en: '( num_train_timesteps: int = 1000 beta_start: float = 0.0001 beta_end: float
    = 0.02 beta_schedule: str = ''linear'' trained_betas: Union = None clip_sample:
    bool = True set_alpha_to_one: bool = True steps_offset: int = 0 prediction_type:
    str = ''epsilon'' thresholding: bool = False dynamic_thresholding_ratio: float
    = 0.995 clip_sample_range: float = 1.0 sample_max_value: float = 1.0 timestep_spacing:
    str = ''leading'' rescale_betas_zero_snr: bool = False )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**num_train_timesteps** (`int`, defaults to 1000) ‚Äî The number of diffusion
    steps to train the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beta_start** (`float`, defaults to 0.0001) ‚Äî The starting `beta` value of
    inference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beta_end** (`float`, defaults to 0.02) ‚Äî The final `beta` value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beta_schedule** (`str`, defaults to `"linear"`) ‚Äî The beta schedule, a mapping
    from a beta range to a sequence of betas for stepping the model. Choose from `linear`,
    `scaled_linear`, or `squaredcos_cap_v2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trained_betas** (`np.ndarray`, *optional*) ‚Äî Pass an array of betas directly
    to the constructor to bypass `beta_start` and `beta_end`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip_sample** (`bool`, defaults to `True`) ‚Äî Clip the predicted sample for
    numerical stability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clip_sample_range** (`float`, defaults to 1.0) ‚Äî The maximum magnitude for
    sample clipping. Valid only when `clip_sample=True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**set_alpha_to_one** (`bool`, defaults to `True`) ‚Äî Each diffusion step uses
    the alphas product value at that step and at the previous one. For the final step
    there is no previous alpha. When this option is `True` the previous alpha product
    is fixed to `1`, otherwise it uses the alpha value at step 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**steps_offset** (`int`, defaults to 0) ‚Äî An offset added to the inference
    steps. You can use a combination of `offset=1` and `set_alpha_to_one=False` to
    make the last step use step 0 for the previous alpha product like in Stable Diffusion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**prediction_type** (`str`, defaults to `epsilon`, *optional*) ‚Äî Prediction
    type of the scheduler function; can be `epsilon` (predicts the noise of the diffusion
    process), `sample` (directly predicts the noisy sample`) or` v_prediction` (see
    section 2.4 of [Imagen Video](https://imagen.research.google/video/paper.pdf)
    paper).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**thresholding** (`bool`, defaults to `False`) ‚Äî Whether to use the ‚Äúdynamic
    thresholding‚Äù method. This is unsuitable for latent-space diffusion models such
    as Stable Diffusion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dynamic_thresholding_ratio** (`float`, defaults to 0.995) ‚Äî The ratio for
    the dynamic thresholding method. Valid only when `thresholding=True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample_max_value** (`float`, defaults to 1.0) ‚Äî The threshold value for dynamic
    thresholding. Valid only when `thresholding=True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestep_spacing** (`str`, defaults to `"leading"`) ‚Äî The way the timesteps
    should be scaled. Refer to Table 2 of the [Common Diffusion Noise Schedules and
    Sample Steps are Flawed](https://huggingface.co/papers/2305.08891) for more information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rescale_betas_zero_snr** (`bool`, defaults to `False`) ‚Äî Whether to rescale
    the betas to have zero terminal SNR. This enables the model to generate very bright
    and dark samples instead of limiting it to samples with medium brightness. Loosely
    related to [`--offset_noise`](https://github.com/huggingface/diffusers/blob/74fd735eb073eb1d774b1ab4154a0876eb82f055/examples/dreambooth/train_dreambooth.py#L506).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DDIMScheduler` extends the denoising procedure introduced in denoising diffusion
    probabilistic models (DDPMs) with non-Markovian guidance.'
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)
    and [ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin).
    Check the superclass documentation for the generic methods the library implements
    for all schedulers such as loading and saving.
  prefs: []
  type: TYPE_NORMAL
- en: '#### scale_model_input'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_ddim.py#L238)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample: FloatTensor timestep: Optional = None ) ‚Üí `torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) ‚Äî The input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestep** (`int`, *optional*) ‚Äî The current timestep in the diffusion chain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: A scaled input sample.
  prefs: []
  type: TYPE_NORMAL
- en: Ensures interchangeability with schedulers that need to scale the denoising
    model input depending on the current timestep.
  prefs: []
  type: TYPE_NORMAL
- en: '#### set_timesteps'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_ddim.py#L299)'
  prefs: []
  type: TYPE_NORMAL
- en: '( num_inference_steps: int device: Union = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**num_inference_steps** (`int`) ‚Äî The number of diffusion steps used when generating
    samples with a pre-trained model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets the discrete timesteps used for the diffusion chain (to be run before inference).
  prefs: []
  type: TYPE_NORMAL
- en: '#### step'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_ddim.py#L344)'
  prefs: []
  type: TYPE_NORMAL
- en: '( model_output: FloatTensor timestep: int sample: FloatTensor eta: float =
    0.0 use_clipped_model_output: bool = False generator = None variance_noise: Optional
    = None return_dict: bool = True ) ‚Üí `~schedulers.scheduling_utils.DDIMSchedulerOutput`
    or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**model_output** (`torch.FloatTensor`) ‚Äî The direct output from learned diffusion
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestep** (`float`) ‚Äî The current discrete timestep in the diffusion chain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) ‚Äî A current instance of a sample created by
    the diffusion process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eta** (`float`) ‚Äî The weight of noise for added noise in diffusion step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**use_clipped_model_output** (`bool`, defaults to `False`) ‚Äî If `True`, computes
    ‚Äúcorrected‚Äù `model_output` from the clipped predicted original sample. Necessary
    because predicted original sample is clipped to [-1, 1] when `self.config.clip_sample`
    is `True`. If no clipping has happened, ‚Äúcorrected‚Äù `model_output` would coincide
    with the one provided as input and `use_clipped_model_output` has no effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**generator** (`torch.Generator`, *optional*) ‚Äî A random number generator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**variance_noise** (`torch.FloatTensor`) ‚Äî Alternative to generating noise
    with `generator` by directly providing the noise for the variance itself. Useful
    for methods such as `CycleDiffusion`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*, defaults to `True`) ‚Äî Whether or not to
    return a [DDIMSchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/ddim#diffusers.schedulers.scheduling_ddim.DDIMSchedulerOutput)
    or `tuple`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`~schedulers.scheduling_utils.DDIMSchedulerOutput` or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If return_dict is `True`, [DDIMSchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/ddim#diffusers.schedulers.scheduling_ddim.DDIMSchedulerOutput)
    is returned, otherwise a tuple is returned where the first element is the sample
    tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Predict the sample from the previous timestep by reversing the SDE. This function
    propagates the diffusion process from the learned model outputs (most often the
    predicted noise).
  prefs: []
  type: TYPE_NORMAL
- en: DDIMSchedulerOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.schedulers.scheduling_ddim.DDIMSchedulerOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_ddim.py#L31)'
  prefs: []
  type: TYPE_NORMAL
- en: '( prev_sample: FloatTensor pred_original_sample: Optional = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**prev_sample** (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)` for images) ‚Äî Computed sample `(x_{t-1})` of previous timestep. `prev_sample`
    should be used as next model input in the denoising loop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pred_original_sample** (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)` for images) ‚Äî The predicted denoised sample `(x_{0})` based on
    the model output from the current timestep. `pred_original_sample` can be used
    to preview progress or for guidance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output class for the scheduler‚Äôs `step` function output.
  prefs: []
  type: TYPE_NORMAL
