- en: ControlNet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/diffusers/api/models/controlnet](https://huggingface.co/docs/diffusers/api/models/controlnet)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/18.6ad6dc7e.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Docstring.93f6f462.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/CodeBlock.57fe6e13.js">
  prefs: []
  type: TYPE_NORMAL
- en: The ControlNet model was introduced in [Adding Conditional Control to Text-to-Image
    Diffusion Models](https://huggingface.co/papers/2302.05543) by Lvmin Zhang, Anyi
    Rao, Maneesh Agrawala. It provides a greater degree of control over text-to-image
    generation by conditioning the model on additional inputs such as edge maps, depth
    maps, segmentation maps, and keypoints for pose detection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*We present ControlNet, a neural network architecture to add spatial conditioning
    controls to large, pretrained text-to-image diffusion models. ControlNet locks
    the production-ready large diffusion models, and reuses their deep and robust
    encoding layers pretrained with billions of images as a strong backbone to learn
    a diverse set of conditional controls. The neural architecture is connected with
    “zero convolutions” (zero-initialized convolution layers) that progressively grow
    the parameters from zero and ensure that no harmful noise could affect the finetuning.
    We test various conditioning controls, eg, edges, depth, segmentation, human pose,
    etc, with Stable Diffusion, using single or multiple conditions, with or without
    prompts. We show that the training of ControlNets is robust with small (<50k)
    and large (>1m) datasets. Extensive results show that ControlNet may facilitate
    wider applications to control image diffusion models.*'
  prefs: []
  type: TYPE_NORMAL
- en: Loading from the original format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default the [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)
    should be loaded with [from_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.from_pretrained),
    but it can also be loaded from the original format using `FromOriginalControlnetMixin.from_single_file`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ControlNetModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.ControlNetModel'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L111)'
  prefs: []
  type: TYPE_NORMAL
- en: '( in_channels: int = 4 conditioning_channels: int = 3 flip_sin_to_cos: bool
    = True freq_shift: int = 0 down_block_types: Tuple = (''CrossAttnDownBlock2D'',
    ''CrossAttnDownBlock2D'', ''CrossAttnDownBlock2D'', ''DownBlock2D'') mid_block_type:
    Optional = ''UNetMidBlock2DCrossAttn'' only_cross_attention: Union = False block_out_channels:
    Tuple = (320, 640, 1280, 1280) layers_per_block: int = 2 downsample_padding: int
    = 1 mid_block_scale_factor: float = 1 act_fn: str = ''silu'' norm_num_groups:
    Optional = 32 norm_eps: float = 1e-05 cross_attention_dim: int = 1280 transformer_layers_per_block:
    Union = 1 encoder_hid_dim: Optional = None encoder_hid_dim_type: Optional = None
    attention_head_dim: Union = 8 num_attention_heads: Union = None use_linear_projection:
    bool = False class_embed_type: Optional = None addition_embed_type: Optional =
    None addition_time_embed_dim: Optional = None num_class_embeds: Optional = None
    upcast_attention: bool = False resnet_time_scale_shift: str = ''default'' projection_class_embeddings_input_dim:
    Optional = None controlnet_conditioning_channel_order: str = ''rgb'' conditioning_embedding_out_channels:
    Optional = (16, 32, 96, 256) global_pool_conditions: bool = False addition_embed_type_num_heads:
    int = 64 )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**in_channels** (`int`, defaults to 4) — The number of channels in the input
    sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flip_sin_to_cos** (`bool`, defaults to `True`) — Whether to flip the sin
    to cos in the time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**freq_shift** (`int`, defaults to 0) — The frequency shift to apply to the
    time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**down_block_types** (`tuple[str]`, defaults to `("CrossAttnDownBlock2D", "CrossAttnDownBlock2D",
    "CrossAttnDownBlock2D", "DownBlock2D")`) — The tuple of downsample blocks to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**only_cross_attention** (`Union[bool, Tuple[bool]]`, defaults to `False`)
    —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**block_out_channels** (`tuple[int]`, defaults to `(320, 640, 1280, 1280)`)
    — The tuple of output channels for each block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**layers_per_block** (`int`, defaults to 2) — The number of layers per block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**downsample_padding** (`int`, defaults to 1) — The padding to use for the
    downsampling convolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mid_block_scale_factor** (`float`, defaults to 1) — The scale factor to use
    for the mid block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**act_fn** (`str`, defaults to “silu”) — The activation function to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**norm_num_groups** (`int`, *optional*, defaults to 32) — The number of groups
    to use for the normalization. If None, normalization and activation layers is
    skipped in post-processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**norm_eps** (`float`, defaults to 1e-5) — The epsilon to use for the normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_attention_dim** (`int`, defaults to 1280) — The dimension of the cross
    attention features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_layers_per_block** (`int` or `Tuple[int]`, *optional*, defaults
    to 1) — The number of transformer blocks of type `BasicTransformerBlock`. Only
    relevant for `~models.unet_2d_blocks.CrossAttnDownBlock2D`, `~models.unet_2d_blocks.CrossAttnUpBlock2D`,
    `~models.unet_2d_blocks.UNetMidBlock2DCrossAttn`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoder_hid_dim** (`int`, *optional*, defaults to None) — If `encoder_hid_dim_type`
    is defined, `encoder_hidden_states` will be projected from `encoder_hid_dim` dimension
    to `cross_attention_dim`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoder_hid_dim_type** (`str`, *optional*, defaults to `None`) — If given,
    the `encoder_hidden_states` and potentially other embeddings are down-projected
    to text embeddings of dimension `cross_attention` according to `encoder_hid_dim_type`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attention_head_dim** (`Union[int, Tuple[int]]`, defaults to 8) — The dimension
    of the attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**use_linear_projection** (`bool`, defaults to `False`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**class_embed_type** (`str`, *optional*, defaults to `None`) — The type of
    class embedding to use which is ultimately summed with the time embeddings. Choose
    from None, `"timestep"`, `"identity"`, `"projection"`, or `"simple_projection"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**addition_embed_type** (`str`, *optional*, defaults to `None`) — Configures
    an optional embedding which will be summed with the time embeddings. Choose from
    `None` or “text”. “text” will use the `TextTimeEmbedding` layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_class_embeds** (`int`, *optional*, defaults to 0) — Input dimension of
    the learnable embedding matrix to be projected to `time_embed_dim`, when performing
    class conditioning with `class_embed_type` equal to `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**upcast_attention** (`bool`, defaults to `False`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**resnet_time_scale_shift** (`str`, defaults to `"default"`) — Time scale shift
    config for ResNet blocks (see `ResnetBlock2D`). Choose from `default` or `scale_shift`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**projection_class_embeddings_input_dim** (`int`, *optional*, defaults to `None`)
    — The dimension of the `class_labels` input when `class_embed_type="projection"`.
    Required when `class_embed_type="projection"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**controlnet_conditioning_channel_order** (`str`, defaults to `"rgb"`) — The
    channel order of conditional image. Will convert to `rgb` if it’s `bgr`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**conditioning_embedding_out_channels** (`tuple[int]`, *optional*, defaults
    to `(16, 32, 96, 256)`) — The tuple of output channel for each block in the `conditioning_embedding`
    layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**global_pool_conditions** (`bool`, defaults to `False`) — TODO(Patrick) -
    unused parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**addition_embed_type_num_heads** (`int`, defaults to 64) — The number of heads
    to use for the `TextTimeEmbedding` layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A ControlNet model.
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L663)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample: FloatTensor timestep: Union encoder_hidden_states: Tensor controlnet_cond:
    FloatTensor conditioning_scale: float = 1.0 class_labels: Optional = None timestep_cond:
    Optional = None attention_mask: Optional = None added_cond_kwargs: Optional =
    None cross_attention_kwargs: Optional = None guess_mode: bool = False return_dict:
    bool = True ) → [ControlNetOutput](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.models.controlnet.ControlNetOutput)
    **or** `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — The noisy input tensor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestep** (`Union[torch.Tensor, float, int]`) — The number of timesteps
    to denoise an input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoder_hidden_states** (`torch.Tensor`) — The encoder hidden states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**controlnet_cond** (`torch.FloatTensor`) — The conditional input tensor of
    shape `(batch_size, sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**conditioning_scale** (`float`, defaults to `1.0`) — The scale factor for
    ControlNet outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**class_labels** (`torch.Tensor`, *optional*, defaults to `None`) — Optional
    class labels for conditioning. Their embeddings will be summed with the timestep
    embeddings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestep_cond** (`torch.Tensor`, *optional*, defaults to `None`) — Additional
    conditional embeddings for timestep. If provided, the embeddings will be summed
    with the timestep_embedding passed through the `self.time_embedding` layer to
    obtain the final timestep embeddings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attention_mask** (`torch.Tensor`, *optional*, defaults to `None`) — An attention
    mask of shape `(batch, key_tokens)` is applied to `encoder_hidden_states`. If
    `1` the mask is kept, otherwise if `0` it is discarded. Mask will be converted
    into a bias, which adds large negative values to the attention scores corresponding
    to “discard” tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**added_cond_kwargs** (`dict`) — Additional conditions for the Stable Diffusion
    XL UNet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_attention_kwargs** (`dict[str]`, *optional*, defaults to `None`) —
    A kwargs dictionary that if specified is passed along to the `AttnProcessor`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**guess_mode** (`bool`, defaults to `False`) — In this mode, the ControlNet
    encoder tries its best to recognize the input content of the input even if you
    remove all prompts. A `guidance_scale` between 3.0 and 5.0 is recommended.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, defaults to `True`) — Whether or not to return a [ControlNetOutput](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.models.controlnet.ControlNetOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[ControlNetOutput](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.models.controlnet.ControlNetOutput)
    **or** `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If `return_dict` is `True`, a [ControlNetOutput](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.models.controlnet.ControlNetOutput)
    is returned, otherwise a tuple is returned where the first element is the sample
    tensor.
  prefs: []
  type: TYPE_NORMAL
- en: The [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)
    forward method.
  prefs: []
  type: TYPE_NORMAL
- en: '#### from_unet'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L444)'
  prefs: []
  type: TYPE_NORMAL
- en: '( unet: UNet2DConditionModel controlnet_conditioning_channel_order: str = ''rgb''
    conditioning_embedding_out_channels: Optional = (16, 32, 96, 256) load_weights_from_unet:
    bool = True conditioning_channels: int = 3 )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**unet** (`UNet2DConditionModel`) — The UNet model weights to copy to the [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel).
    All configuration options are also copied where applicable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantiate a [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel)
    from [UNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.UNet2DConditionModel).
  prefs: []
  type: TYPE_NORMAL
- en: '#### set_attention_slice'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L594)'
  prefs: []
  type: TYPE_NORMAL
- en: '( slice_size: Union )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**slice_size** (`str` or `int` or `list(int)`, *optional*, defaults to `"auto"`)
    — When `"auto"`, input to the attention heads is halved, so attention is computed
    in two steps. If `"max"`, maximum amount of memory is saved by running only one
    slice at a time. If a number is provided, uses as many slices as `attention_head_dim
    // slice_size`. In this case, `attention_head_dim` must be a multiple of `slice_size`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable sliced attention computation.
  prefs: []
  type: TYPE_NORMAL
- en: When this option is enabled, the attention module splits the input tensor in
    slices to compute attention in several steps. This is useful for saving some memory
    in exchange for a small decrease in speed.
  prefs: []
  type: TYPE_NORMAL
- en: '#### set_attn_processor'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L543)'
  prefs: []
  type: TYPE_NORMAL
- en: '( processor: Union )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**processor** (`dict` of `AttentionProcessor` or only `AttentionProcessor`)
    — The instantiated processor class or a dictionary of processor classes that will
    be set as the processor for **all** `Attention` layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `processor` is a dict, the key needs to define the path to the corresponding
    cross attention processor. This is strongly recommended when setting trainable
    attention processors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sets the attention processor to use to compute attention.
  prefs: []
  type: TYPE_NORMAL
- en: '#### set_default_attn_processor'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L578)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Disables custom attention processors and sets the default attention implementation.
  prefs: []
  type: TYPE_NORMAL
- en: ControlNetOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.models.controlnet.ControlNetOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet.py#L46)'
  prefs: []
  type: TYPE_NORMAL
- en: '( down_block_res_samples: Tuple mid_block_res_sample: Tensor )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**down_block_res_samples** (`tuple[torch.Tensor]`) — A tuple of downsample
    activations at different resolutions for each downsampling block. Each tensor
    should be of shape `(batch_size, channel * resolution, height //resolution, width
    // resolution)`. Output can be used to condition the original UNet’s downsampling
    activations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mid_down_block_re_sample** (`torch.Tensor`) — The activation of the midde
    block (the lowest sample resolution). Each tensor should be of shape `(batch_size,
    channel * lowest_resolution, height // lowest_resolution, width // lowest_resolution)`.
    Output can be used to condition the original UNet’s middle block activation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of [ControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.ControlNetModel).
  prefs: []
  type: TYPE_NORMAL
- en: FlaxControlNetModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.FlaxControlNetModel'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet_flax.py#L103)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample_size: int = 32 in_channels: int = 4 down_block_types: Tuple = (''CrossAttnDownBlock2D'',
    ''CrossAttnDownBlock2D'', ''CrossAttnDownBlock2D'', ''DownBlock2D'') only_cross_attention:
    Union = False block_out_channels: Tuple = (320, 640, 1280, 1280) layers_per_block:
    int = 2 attention_head_dim: Union = 8 num_attention_heads: Union = None cross_attention_dim:
    int = 1280 dropout: float = 0.0 use_linear_projection: bool = False dtype: dtype
    = <class ''jax.numpy.float32''> flip_sin_to_cos: bool = True freq_shift: int =
    0 controlnet_conditioning_channel_order: str = ''rgb'' conditioning_embedding_out_channels:
    Tuple = (16, 32, 96, 256) parent: Union = <flax.linen.module._Sentinel object
    at 0x7fbd557629e0> name: Optional = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample_size** (`int`, *optional*) — The size of the input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**in_channels** (`int`, *optional*, defaults to 4) — The number of channels
    in the input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**down_block_types** (`Tuple[str]`, *optional*, defaults to `("FlaxCrossAttnDownBlock2D",
    "FlaxCrossAttnDownBlock2D", "FlaxCrossAttnDownBlock2D", "FlaxDownBlock2D")`) —
    The tuple of downsample blocks to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**block_out_channels** (`Tuple[int]`, *optional*, defaults to `(320, 640, 1280,
    1280)`) — The tuple of output channels for each block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**layers_per_block** (`int`, *optional*, defaults to 2) — The number of layers
    per block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attention_head_dim** (`int` or `Tuple[int]`, *optional*, defaults to 8) —
    The dimension of the attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_attention_heads** (`int` or `Tuple[int]`, *optional*) — The number of
    attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_attention_dim** (`int`, *optional*, defaults to 768) — The dimension
    of the cross attention features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dropout** (`float`, *optional*, defaults to 0) — Dropout probability for
    down, up and bottleneck blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flip_sin_to_cos** (`bool`, *optional*, defaults to `True`) — Whether to flip
    the sin to cos in the time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**freq_shift** (`int`, *optional*, defaults to 0) — The frequency shift to
    apply to the time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**controlnet_conditioning_channel_order** (`str`, *optional*, defaults to `rgb`)
    — The channel order of conditional image. Will convert to `rgb` if it’s `bgr`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**conditioning_embedding_out_channels** (`tuple`, *optional*, defaults to `(16,
    32, 96, 256)`) — The tuple of output channel for each block in the `conditioning_embedding`
    layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A ControlNet model.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [FlaxModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.FlaxModelMixin).
    Check the superclass documentation for it’s generic methods implemented for all
    models (such as downloading or saving).
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a Flax Linen [`flax.linen.Module`](https://flax.readthedocs.io/en/latest/flax.linen.html#module)
    subclass. Use it as a regular Flax Linen module and refer to the Flax documentation
    for all matters related to its general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inherent JAX features such as the following are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Just-In-Time (JIT) compilation](https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Automatic Differentiation](https://jax.readthedocs.io/en/latest/jax.html#automatic-differentiation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vectorization](https://jax.readthedocs.io/en/latest/jax.html#vectorization-vmap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Parallelization](https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FlaxControlNetOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.models.controlnet_flax.FlaxControlNetOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/controlnet_flax.py#L33)'
  prefs: []
  type: TYPE_NORMAL
- en: '( down_block_res_samples: Array mid_block_res_sample: Array )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**down_block_res_samples** (`jnp.ndarray`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mid_block_res_sample** (`jnp.ndarray`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of [FlaxControlNetModel](/docs/diffusers/v0.26.3/en/api/models/controlnet#diffusers.FlaxControlNetModel).
  prefs: []
  type: TYPE_NORMAL
- en: '#### replace'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/flax/struct.py#L111)'
  prefs: []
  type: TYPE_NORMAL
- en: ( **updates )
  prefs: []
  type: TYPE_NORMAL
- en: “Returns a new object replacing the specified fields with new values.
  prefs: []
  type: TYPE_NORMAL
