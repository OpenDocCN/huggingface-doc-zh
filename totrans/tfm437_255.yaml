- en: Conditional DETR
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件DETR
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/conditional_detr](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/conditional_detr)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/conditional_detr](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/conditional_detr)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: The Conditional DETR model was proposed in [Conditional DETR for Fast Training
    Convergence](https://arxiv.org/abs/2108.06152) by Depu Meng, Xiaokang Chen, Zejia
    Fan, Gang Zeng, Houqiang Li, Yuhui Yuan, Lei Sun, Jingdong Wang. Conditional DETR
    presents a conditional cross-attention mechanism for fast DETR training. Conditional
    DETR converges 6.7× to 10× faster than DETR.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 条件DETR模型是由孟德普、陈晓康、范泽佳、曾刚、李厚强、袁宇辉、孙磊、王京东在[用于快速训练收敛的条件DETR](https://arxiv.org/abs/2108.06152)中提出的。条件DETR提出了一种用于快速DETR训练的条件交叉注意力机制。条件DETR的收敛速度比DETR快6.7倍至10倍。
- en: 'The abstract from the paper is the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 论文摘要如下：
- en: '*The recently-developed DETR approach applies the transformer encoder and decoder
    architecture to object detection and achieves promising performance. In this paper,
    we handle the critical issue, slow training convergence, and present a conditional
    cross-attention mechanism for fast DETR training. Our approach is motivated by
    that the cross-attention in DETR relies highly on the content embeddings for localizing
    the four extremities and predicting the box, which increases the need for high-quality
    content embeddings and thus the training difficulty. Our approach, named conditional
    DETR, learns a conditional spatial query from the decoder embedding for decoder
    multi-head cross-attention. The benefit is that through the conditional spatial
    query, each cross-attention head is able to attend to a band containing a distinct
    region, e.g., one object extremity or a region inside the object box. This narrows
    down the spatial range for localizing the distinct regions for object classification
    and box regression, thus relaxing the dependence on the content embeddings and
    easing the training. Empirical results show that conditional DETR converges 6.7×
    faster for the backbones R50 and R101 and 10× faster for stronger backbones DC5-R50
    and DC5-R101\. Code is available at [https://github.com/Atten4Vis/ConditionalDETR](https://github.com/Atten4Vis/ConditionalDETR).*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*最近开发的DETR方法将Transformer编码器和解码器架构应用于目标检测，并取得了令人满意的性能。在本文中，我们处理了关键问题，即训练收敛速度慢，并提出了一种用于快速DETR训练的条件交叉注意力机制。我们的方法受到了DETR中的交叉注意力高度依赖内容嵌入以定位四个极点并预测框的启发，这增加了对高质量内容嵌入的需求，从而增加了训练难度。我们的方法，称为条件DETR，从解码器嵌入中学习一个条件空间查询，用于解码器多头交叉注意力。好处在于通过条件空间查询，每个交叉注意力头都能关注包含不同区域的带，例如一个对象极点或对象框内的区域。这缩小了用于定位不同区域进行对象分类和框回归的空间范围，从而减轻了对内容嵌入的依赖并简化了训练。实证结果表明，对于骨干网络R50和R101，条件DETR的收敛速度提高了6.7倍，对于更强大的骨干网络DC5-R50和DC5-R101，提高了10倍。代码可在[https://github.com/Atten4Vis/ConditionalDETR](https://github.com/Atten4Vis/ConditionalDETR)找到。*'
- en: '![drawing](../Images/c6d995d857b4d1e1828dfe68ed28fb0d.png) Conditional DETR
    shows much faster convergence compared to the original DETR. Taken from the [original
    paper](https://arxiv.org/abs/2108.06152).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![图示](../Images/c6d995d857b4d1e1828dfe68ed28fb0d.png) 条件DETR相对于原始DETR显示出更快的收敛速度。摘自[原始论文](https://arxiv.org/abs/2108.06152)。'
- en: This model was contributed by [DepuMeng](https://huggingface.co/DepuMeng). The
    original code can be found [here](https://github.com/Atten4Vis/ConditionalDETR).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型由[DepuMeng](https://huggingface.co/DepuMeng)贡献。原始代码可在[此处](https://github.com/Atten4Vis/ConditionalDETR)找到。
- en: Resources
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: '[Object detection task guide](../tasks/object_detection)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[目标检测任务指南](../tasks/object_detection)'
- en: ConditionalDetrConfig
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ConditionalDetrConfig
- en: '### `class transformers.ConditionalDetrConfig`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.ConditionalDetrConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/configuration_conditional_detr.py#L36)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/configuration_conditional_detr.py#L36)'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`use_timm_backbone` (`bool`, *optional*, defaults to `True`) — Whether or not
    to use the `timm` library for the backbone. If set to `False`, will use the `AutoBackbone`
    API.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_timm_backbone` (`bool`, *可选*, 默认为`True`) — 是否使用`timm`库作为骨干。如果设置为`False`，将使用`AutoBackbone`
    API。'
- en: '`backbone_config` (`PretrainedConfig` or `dict`, *optional*) — The configuration
    of the backbone model. Only used in case `use_timm_backbone` is set to `False`
    in which case it will default to `ResNetConfig()`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backbone_config` (`PretrainedConfig`或`dict`, *可选*) — 骨干模型的配置。仅在`use_timm_backbone`设置为`False`时使用，此时默认为`ResNetConfig()`。'
- en: '`num_channels` (`int`, *optional*, defaults to 3) — The number of input channels.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_channels` (`int`, *可选*, 默认为3) — 输入通道的数量。'
- en: '`num_queries` (`int`, *optional*, defaults to 100) — Number of object queries,
    i.e. detection slots. This is the maximal number of objects [ConditionalDetrModel](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrModel)
    can detect in a single image. For COCO, we recommend 100 queries.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_queries` (`int`, *可选*, 默认为100) — 对象查询的数量，即检测槽位。这是[ConditionalDetrModel](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrModel)在单个图像中可以检测到的对象的最大数量。对于COCO数据集，我们建议使用100个查询。'
- en: '`d_model` (`int`, *optional*, defaults to 256) — Dimension of the layers.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d_model` (`int`, *可选*, 默认为256) — 层的维度。'
- en: '`encoder_layers` (`int`, *optional*, defaults to 6) — Number of encoder layers.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_layers` (`int`, *可选*, 默认为6) — 编码器层数。'
- en: '`decoder_layers` (`int`, *optional*, defaults to 6) — Number of decoder layers.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_layers` (`int`, *可选*, 默认为6) — 解码器层数。'
- en: '`encoder_attention_heads` (`int`, *optional*, defaults to 8) — Number of attention
    heads for each attention layer in the Transformer encoder.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_attention_heads` (`int`, *可选*, 默认为8) — Transformer编码器中每个注意力层的注意力头数。'
- en: '`decoder_attention_heads` (`int`, *optional*, defaults to 8) — Number of attention
    heads for each attention layer in the Transformer decoder.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_attention_heads` (`int`, *可选*, 默认为8) — Transformer解码器中每个注意力层的注意力头数。'
- en: '`decoder_ffn_dim` (`int`, *optional*, defaults to 2048) — Dimension of the
    “intermediate” (often named feed-forward) layer in decoder.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_ffn_dim` (`int`, *optional*, defaults to 2048) — 解码器中“中间”（通常称为前馈）层的维度。'
- en: '`encoder_ffn_dim` (`int`, *optional*, defaults to 2048) — Dimension of the
    “intermediate” (often named feed-forward) layer in decoder.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_ffn_dim` (`int`, *optional*, defaults to 2048) — 解码器中“中间”（通常称为前馈）层的维度。'
- en: '`activation_function` (`str` or `function`, *optional*, defaults to `"relu"`)
    — The non-linear activation function (function or string) in the encoder and pooler.
    If string, `"gelu"`, `"relu"`, `"silu"` and `"gelu_new"` are supported.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activation_function` (`str` or `function`, *optional*, defaults to `"relu"`)
    — 编码器和池化器中的非线性激活函数（函数或字符串）。如果是字符串，支持`"gelu"`、`"relu"`、`"silu"`和`"gelu_new"`。'
- en: '`dropout` (`float`, *optional*, defaults to 0.1) — The dropout probability
    for all fully connected layers in the embeddings, encoder, and pooler.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dropout` (`float`, *optional*, defaults to 0.1) — 嵌入、编码器和池化器中所有全连接层的丢弃概率。'
- en: '`attention_dropout` (`float`, *optional*, defaults to 0.0) — The dropout ratio
    for the attention probabilities.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_dropout` (`float`, *optional*, defaults to 0.0) — 注意力概率的丢弃比率。'
- en: '`activation_dropout` (`float`, *optional*, defaults to 0.0) — The dropout ratio
    for activations inside the fully connected layer.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`activation_dropout` (`float`, *optional*, defaults to 0.0) — 全连接层内激活的丢弃比率。'
- en: '`init_std` (`float`, *optional*, defaults to 0.02) — The standard deviation
    of the truncated_normal_initializer for initializing all weight matrices.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init_std` (`float`, *optional*, defaults to 0.02) — 用于初始化所有权重矩阵的截断正态初始化器的标准差。'
- en: '`init_xavier_std` (`float`, *optional*, defaults to 1) — The scaling factor
    used for the Xavier initialization gain in the HM Attention map module.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`init_xavier_std` (`float`, *optional*, defaults to 1) — 用于HM Attention map模块中Xavier初始化增益的缩放因子。'
- en: '`encoder_layerdrop` (`float`, *optional*, defaults to 0.0) — The LayerDrop
    probability for the encoder. See the [LayerDrop paper](see [https://arxiv.org/abs/1909.11556](https://arxiv.org/abs/1909.11556))
    for more details.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder_layerdrop` (`float`, *optional*, defaults to 0.0) — 编码器的LayerDrop概率。有关更多详细信息，请参阅[LayerDrop论文](see
    [https://arxiv.org/abs/1909.11556](https://arxiv.org/abs/1909.11556))。'
- en: '`decoder_layerdrop` (`float`, *optional*, defaults to 0.0) — The LayerDrop
    probability for the decoder. See the [LayerDrop paper](see [https://arxiv.org/abs/1909.11556](https://arxiv.org/abs/1909.11556))
    for more details.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_layerdrop` (`float`, *optional*, defaults to 0.0) — 解码器的LayerDrop概率。有关更多详细信息，请参阅[LayerDrop论文](see
    [https://arxiv.org/abs/1909.11556](https://arxiv.org/abs/1909.11556))。'
- en: '`auxiliary_loss` (`bool`, *optional*, defaults to `False`) — Whether auxiliary
    decoding losses (loss at each decoder layer) are to be used.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auxiliary_loss` (`bool`, *optional*, defaults to `False`) — 是否使用辅助解码损失（每个解码器层的损失）。'
- en: '`position_embedding_type` (`str`, *optional*, defaults to `"sine"`) — Type
    of position embeddings to be used on top of the image features. One of `"sine"`
    or `"learned"`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`position_embedding_type` (`str`, *optional*, defaults to `"sine"`) — 在图像特征之上使用的位置嵌入的类型。其中之一是`"sine"`或`"learned"`。'
- en: '`backbone` (`str`, *optional*, defaults to `"resnet50"`) — Name of convolutional
    backbone to use in case `use_timm_backbone` = `True`. Supports any convolutional
    backbone from the timm package. For a list of all available models, see [this
    page](https://rwightman.github.io/pytorch-image-models/#load-a-pretrained-model).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backbone` (`str`, *optional*, defaults to `"resnet50"`) — 在`use_timm_backbone`
    = `True`时要使用的卷积主干的名称。支持timm包中的任何卷积主干。有关所有可用模型的列表，请参见[此页面](https://rwightman.github.io/pytorch-image-models/#load-a-pretrained-model)。'
- en: '`use_pretrained_backbone` (`bool`, *optional*, defaults to `True`) — Whether
    to use pretrained weights for the backbone. Only supported when `use_timm_backbone`
    = `True`.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_pretrained_backbone` (`bool`, *optional*, defaults to `True`) — 是否对主干使用预训练权重。仅在`use_timm_backbone`
    = `True`时支持。'
- en: '`dilation` (`bool`, *optional*, defaults to `False`) — Whether to replace stride
    with dilation in the last convolutional block (DC5). Only supported when `use_timm_backbone`
    = `True`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dilation` (`bool`, *optional*, defaults to `False`) — 是否在最后的卷积块（DC5）中用膨胀替换步幅。仅在`use_timm_backbone`
    = `True`时支持。'
- en: '`class_cost` (`float`, *optional*, defaults to 1) — Relative weight of the
    classification error in the Hungarian matching cost.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_cost` (`float`, *optional*, defaults to 1) — 匈牙利匹配成本中分类错误的相对权重。'
- en: '`bbox_cost` (`float`, *optional*, defaults to 5) — Relative weight of the L1
    error of the bounding box coordinates in the Hungarian matching cost.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bbox_cost` (`float`, *optional*, defaults to 5) — 匈牙利匹配成本中边界框坐标的L1误差的相对权重。'
- en: '`giou_cost` (`float`, *optional*, defaults to 2) — Relative weight of the generalized
    IoU loss of the bounding box in the Hungarian matching cost.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giou_cost` (`float`, *optional*, defaults to 2) — 匈牙利匹配成本中边界框的广义IoU损失的相对权重。'
- en: '`mask_loss_coefficient` (`float`, *optional*, defaults to 1) — Relative weight
    of the Focal loss in the panoptic segmentation loss.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_loss_coefficient` (`float`, *optional*, defaults to 1) — 全景分割损失中Focal损失的相对权重。'
- en: '`dice_loss_coefficient` (`float`, *optional*, defaults to 1) — Relative weight
    of the DICE/F-1 loss in the panoptic segmentation loss.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dice_loss_coefficient` (`float`, *optional*, defaults to 1) — 全景分割损失中DICE/F-1损失的相对权重。'
- en: '`bbox_loss_coefficient` (`float`, *optional*, defaults to 5) — Relative weight
    of the L1 bounding box loss in the object detection loss.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bbox_loss_coefficient` (`float`, *optional*, defaults to 5) — 目标检测损失中L1边界框损失的相对权重。'
- en: '`giou_loss_coefficient` (`float`, *optional*, defaults to 2) — Relative weight
    of the generalized IoU loss in the object detection loss.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giou_loss_coefficient` (`float`, *optional*, defaults to 2) — 目标检测损失中广义IoU损失的相对权重。'
- en: '`eos_coefficient` (`float`, *optional*, defaults to 0.1) — Relative classification
    weight of the ‘no-object’ class in the object detection loss.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eos_coefficient` (`float`, *optional*, defaults to 0.1) — 目标检测损失中“无物体”类别的相对分类权重。'
- en: '`focal_alpha` (`float`, *optional*, defaults to 0.25) — Alpha parameter in
    the focal loss.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`focal_alpha` (`float`, *optional*, defaults to 0.25) — 焦点损失中的Alpha参数。'
- en: This is the configuration class to store the configuration of a [ConditionalDetrModel](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrModel).
    It is used to instantiate a Conditional DETR model according to the specified
    arguments, defining the model architecture. Instantiating a configuration with
    the defaults will yield a similar configuration to that of the Conditional DETR
    [microsoft/conditional-detr-resnet-50](https://huggingface.co/microsoft/conditional-detr-resnet-50)
    architecture.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于存储[ConditionalDetrModel](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrModel)配置的配置类。根据指定的参数实例化一个Conditional
    DETR模型，定义模型架构。使用默认值实例化配置将产生类似于Conditional DETR [microsoft/conditional-detr-resnet-50](https://huggingface.co/microsoft/conditional-detr-resnet-50)架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)的文档以获取更多信息。
- en: 'Examples:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: ConditionalDetrImageProcessor
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ConditionalDetrImageProcessor
- en: '### `class transformers.ConditionalDetrImageProcessor`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.ConditionalDetrImageProcessor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L758)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L758)'
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`format` (`str`, *optional*, defaults to `"coco_detection"`) — Data format
    of the annotations. One of “coco_detection” or “coco_panoptic”.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format` (`str`, *optional*, 默认为 `"coco_detection"`) — 注释的数据格式。其中之一为“coco_detection”或“coco_panoptic”。'
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) — Controls whether to
    resize the image’s (height, width) dimensions to the specified `size`. Can be
    overridden by the `do_resize` parameter in the `preprocess` method.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`, *optional*, 默认为 `True`) — 控制是否将图像的（高度，宽度）尺寸调整为指定的`size`。可以被`preprocess`方法中的`do_resize`参数覆盖。'
- en: '`size` (`Dict[str, int]` *optional*, defaults to `{"shortest_edge" -- 800,
    "longest_edge": 1333}`): Size of the image’s (height, width) dimensions after
    resizing. Can be overridden by the `size` parameter in the `preprocess` method.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]` *optional*, 默认为 `{"shortest_edge" -- 800, "longest_edge":
    1333}`): 调整大小后的图像（高度，宽度）尺寸。可以被`preprocess`方法中的`size`参数覆盖。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `PILImageResampling.BILINEAR`)
    — Resampling filter to use if resizing the image.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`PILImageResampling`, *optional*, 默认为 `PILImageResampling.BILINEAR`)
    — 如果调整图像大小，则使用的重采样滤波器。'
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) — Controls whether to
    rescale the image by the specified scale `rescale_factor`. Can be overridden by
    the `do_rescale` parameter in the `preprocess` method.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale` (`bool`, *optional*, 默认为 `True`) — 控制是否按指定比例`rescale_factor`重新调整图像。可以被`preprocess`方法中的`do_rescale`参数覆盖。'
- en: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) — Scale
    factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method. do_normalize — Controls whether to normalize
    the image. Can be overridden by the `do_normalize` parameter in the `preprocess`
    method.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor` (`int` 或 `float`, *optional*, 默认为 `1/255`) — 如果重新调整图像，则使用的比例因子。可以被`preprocess`方法中的`rescale_factor`参数覆盖。`do_normalize`
    — 控制是否对图像进行归一化。可以被`preprocess`方法中的`do_normalize`参数覆盖。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_DEFAULT_MEAN`)
    — Mean values to use when normalizing the image. Can be a single value or a list
    of values, one for each channel. Can be overridden by the `image_mean` parameter
    in the `preprocess` method.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean` (`float` 或 `List[float]`, *optional*, 默认为 `IMAGENET_DEFAULT_MEAN`)
    — 在归一化图像时使用的均值。可以是单个值或值列表，每个通道一个值。可以被`preprocess`方法中的`image_mean`参数覆盖。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_DEFAULT_STD`)
    — Standard deviation values to use when normalizing the image. Can be a single
    value or a list of values, one for each channel. Can be overridden by the `image_std`
    parameter in the `preprocess` method.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` 或 `List[float]`, *optional*, 默认为 `IMAGENET_DEFAULT_STD`)
    — 在归一化图像时使用的标准差值。可以是单个值或值列表，每个通道一个值。可以被`preprocess`方法中的`image_std`参数覆盖。'
- en: '`do_pad` (`bool`, *optional*, defaults to `True`) — Controls whether to pad
    the image to the largest image in a batch and create a pixel mask. Can be overridden
    by the `do_pad` parameter in the `preprocess` method.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_pad` (`bool`, *optional*, defaults to `True`) — 控制是否将图像填充到批处理中最大的图像并创建像素掩码。可以被`preprocess`方法中的`do_pad`参数覆盖。'
- en: Constructs a Conditional Detr image processor.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个Conditional Detr图像处理器。
- en: '#### `preprocess`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `preprocess`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1099)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1099)'
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`images` (`ImageInput`) — Image or batch of images to preprocess. Expects a
    single or batch of images with pixel values ranging from 0 to 255\. If passing
    in images with pixel values between 0 and 1, set `do_rescale=False`.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images` (`ImageInput`) — 要预处理的图像或图像批次。期望单个图像或带有像素值范围从0到255的图像批次。如果传入像素值在0到1之间的图像，请设置`do_rescale=False`。'
- en: '`annotations` (`AnnotationType` or `List[AnnotationType]`, *optional*) — List
    of annotations associated with the image or batch of images. If annotation is
    for object detection, the annotations should be a dictionary with the following
    keys:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`annotations` (`AnnotationType` 或 `List[AnnotationType]`, *optional*) — 与图像或图像批次关联的注释列表。如果注释用于目标检测，则注释应为具有以下键的字典：'
- en: '“image_id” (`int`): The image id.'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“image_id” (`int`): 图像id。'
- en: '“annotations” (`List[Dict]`): List of annotations for an image. Each annotation
    should be a dictionary. An image can have no annotations, in which case the list
    should be empty. If annotation is for segmentation, the annotations should be
    a dictionary with the following keys:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“annotations” (`List[Dict]`): 图像的注释列表。每个注释应为一个字典。一个图像可能没有注释，此时列表应为空。如果注释用于分割，注释应为一个具有以下键的字典：'
- en: '“image_id” (`int`): The image id.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“image_id” (`int`): 图像id。'
- en: '“segments_info” (`List[Dict]`): List of segments for an image. Each segment
    should be a dictionary. An image can have no segments, in which case the list
    should be empty.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“segments_info” (`List[Dict]`): 图像的分段列表。每个分段应为一个字典。一个图像可能没有分段，此时列表应为空。'
- en: '“file_name” (`str`): The file name of the image.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“file_name” (`str`): 图像的文件名。'
- en: '`return_segmentation_masks` (`bool`, *optional*, defaults to self.return_segmentation_masks)
    — Whether to return segmentation masks.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_segmentation_masks` (`bool`, *可选*, 默认为self.return_segmentation_masks)
    — 是否返回分割掩模。'
- en: '`masks_path` (`str` or `pathlib.Path`, *optional*) — Path to the directory
    containing the segmentation masks.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`masks_path` (`str` 或 `pathlib.Path`, *可选*) — 包含分割掩模的目录路径。'
- en: '`do_resize` (`bool`, *optional*, defaults to self.do_resize) — Whether to resize
    the image.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`, *可选*, 默认为self.do_resize) — 是否调整图像大小。'
- en: '`size` (`Dict[str, int]`, *optional*, defaults to self.size) — Size of the
    image after resizing.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]`, *可选*, 默认为self.size) — 调整大小后的图像尺寸。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to self.resample) —
    Resampling filter to use when resizing the image.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`PILImageResampling`, *可选*, 默认为self.resample) — 调整图像大小时使用的重采样滤波器。'
- en: '`do_rescale` (`bool`, *optional*, defaults to self.do_rescale) — Whether to
    rescale the image.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale` (`bool`, *可选*, 默认为self.do_rescale) — 是否重新缩放图像。'
- en: '`rescale_factor` (`float`, *optional*, defaults to self.rescale_factor) — Rescale
    factor to use when rescaling the image.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor` (`float`, *可选*, 默认为self.rescale_factor) — 重新缩放图像时使用的缩放因子。'
- en: '`do_normalize` (`bool`, *optional*, defaults to self.do_normalize) — Whether
    to normalize the image.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize` (`bool`, *可选*, 默认为self.do_normalize) — 是否规范化图像。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to self.image_mean)
    — Mean to use when normalizing the image.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean` (`float` 或 `List[float]`, *可选*, 默认为self.image_mean) — 在规范化图像时使用的均值。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to self.image_std)
    — Standard deviation to use when normalizing the image.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` 或 `List[float]`, *可选*, 默认为self.image_std) — 在规范化图像时使用的标准差。'
- en: '`do_pad` (`bool`, *optional*, defaults to self.do_pad) — Whether to pad the
    image.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_pad` (`bool`, *可选*, 默认为self.do_pad) — 是否填充图像。'
- en: '`format` (`str` or `AnnotationFormat`, *optional*, defaults to self.format)
    — Format of the annotations.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format` (`str` 或 `AnnotationFormat`, *可选*, 默认为self.format) — 注释的格式。'
- en: '`return_tensors` (`str` or `TensorType`, *optional*, defaults to self.return_tensors)
    — Type of tensors to return. If `None`, will return the list of images.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors` (`str` 或 `TensorType`, *可选*, 默认为self.return_tensors) — 要返回的张量类型。如果为`None`，将返回图像列表。'
- en: '`data_format` (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`)
    — The channel dimension format for the output image. Can be one of:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_format` (`ChannelDimension` 或 `str`, *可选*, 默认为 `ChannelDimension.FIRST`)
    — 输出图像的通道维度格式。可以是以下之一：'
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_first"` 或 `ChannelDimension.FIRST`: 图像以 (通道数, 高度, 宽度) 格式。'
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_last"` 或 `ChannelDimension.LAST`: 图像以 (高度, 宽度, 通道数) 格式。'
- en: 'Unset: Use the channel dimension format of the input image.'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '未设置: 使用输入图像的通道维度格式。'
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) — The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_data_format` (`ChannelDimension` 或 `str`, *可选*) — 输入图像的通道维度格式。如果未设置，则从输入图像中推断通道维度格式。可以是以下之一：'
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_first"` 或 `ChannelDimension.FIRST`: 图像以 (通道数, 高度, 宽度) 格式。'
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_last"` 或 `ChannelDimension.LAST`: 图像以 (高度, 宽度, 通道数) 格式。'
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"none"` 或 `ChannelDimension.NONE`: 图像以 (高度, 宽度) 格式。'
- en: Preprocess an image or a batch of images so that it can be used by the model.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对图像或图像批次进行预处理，以便模型可以使用。
- en: '#### `post_process_object_detection`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`post_process_object_detection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1376)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1376)'
- en: '[PRE4]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`outputs` (`DetrObjectDetectionOutput`) — Raw outputs of the model.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs` (`DetrObjectDetectionOutput`) — 模型的原始输出。'
- en: '`threshold` (`float`, *optional*) — Score threshold to keep object detection
    predictions.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold` (`float`, *可选*) — 保留对象检测预测的分数阈值。'
- en: '`target_sizes` (`torch.Tensor` or `List[Tuple[int, int]]`, *optional*) — Tensor
    of shape `(batch_size, 2)` or list of tuples (`Tuple[int, int]`) containing the
    target size (height, width) of each image in the batch. If left to None, predictions
    will not be resized.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_sizes` (`torch.Tensor` 或 `List[Tuple[int, int]]`, *可选*) — 形状为 `(batch_size,
    2)` 的张量或包含每个图像目标大小 (高度, 宽度) 的元组列表 (`Tuple[int, int]`)。如果保留为None，则预测将不会被调整大小。'
- en: '`top_k` (`int`, *optional*, defaults to 100) — Keep only top k bounding boxes
    before filtering by thresholding.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top_k` (`int`, *可选*, 默认为100) — 在通过阈值过滤之前仅保留前k个边界框。'
- en: Returns
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[Dict]`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[Dict]`'
- en: A list of dictionaries, each dictionary containing the scores, labels and boxes
    for an image in the batch as predicted by the model.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个字典包含模型预测的批次中图像的分数、标签和框。
- en: Converts the raw output of [ConditionalDetrForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection)
    into final bounding boxes in (top_left_x, top_left_y, bottom_right_x, bottom_right_y)
    format. Only supports PyTorch.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '#### `post_process_instance_segmentation`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1483)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs` ([ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation))
    — Raw outputs of the model.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`threshold` (`float`, *optional*, defaults to 0.5) — The probability score
    threshold to keep predicted instance masks.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_threshold` (`float`, *optional*, defaults to 0.5) — Threshold to use
    when turning the predicted masks into binary values.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overlap_mask_area_threshold` (`float`, *optional*, defaults to 0.8) — The
    overlap mask area threshold to merge or discard small disconnected parts within
    each binary instance mask.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target_sizes` (`List[Tuple]`, *optional*) — List of length (batch_size), where
    each list item (`Tuple[int, int]]`) corresponds to the requested final size (height,
    width) of each prediction. If unset, predictions will not be resized.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_coco_annotation` (`bool`, *optional*) — Defaults to `False`. If set
    to `True`, segmentation maps are returned in COCO run-length encoding (RLE) format.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Dict]`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of dictionaries, one per image, each dictionary containing two keys:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`segmentation` — A tensor of shape `(height, width)` where each pixel represents
    a `segment_id` or `List[List]` run-length encoding (RLE) of the segmentation map
    if return_coco_annotation is set to `True`. Set to `None` if no mask if found
    above `threshold`.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`segments_info` — A dictionary that contains additional information on each
    segment.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id` — An integer representing the `segment_id`.'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_id` — An integer representing the label / semantic class id corresponding
    to `segment_id`.'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`score` — Prediction score of segment with `segment_id`.'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Converts the output of [ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)
    into instance segmentation predictions. Only supports PyTorch.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '#### `post_process_semantic_segmentation`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1435)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs` ([ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation))
    — Raw outputs of the model.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target_sizes` (`List[Tuple[int, int]]`, *optional*) — A list of tuples (`Tuple[int,
    int]`) containing the target size (height, width) of each image in the batch.
    If unset, predictions will not be resized.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '`List[torch.Tensor]`'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: A list of length `batch_size`, where each item is a semantic segmentation map
    of shape (height, width) corresponding to the target_sizes entry (if `target_sizes`
    is specified). Each entry of each `torch.Tensor` correspond to a semantic class
    id.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Converts the output of [ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)
    into semantic segmentation maps. Only supports PyTorch.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '#### `post_process_panoptic_segmentation`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1567)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '`outputs` ([ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation))
    — The outputs from [ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation).'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`threshold` (`float`, *optional*, defaults to 0.5) — The probability score
    threshold to keep predicted instance masks.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold` (`float`, *可选*, 默认为0.5) — 保留预测实例掩码的概率分数阈值。'
- en: '`mask_threshold` (`float`, *optional*, defaults to 0.5) — Threshold to use
    when turning the predicted masks into binary values.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_threshold` (`float`, *可选*, 默认为0.5) — 将预测的掩码转换为二进制值时使用的阈值。'
- en: '`overlap_mask_area_threshold` (`float`, *optional*, defaults to 0.8) — The
    overlap mask area threshold to merge or discard small disconnected parts within
    each binary instance mask.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overlap_mask_area_threshold` (`float`, *可选*, 默认为0.8) — 合并或丢弃每个二进制实例掩码中的小断开部分的重叠掩码区域阈值。'
- en: '`label_ids_to_fuse` (`Set[int]`, *optional*) — The labels in this state will
    have all their instances be fused together. For instance we could say there can
    only be one sky in an image, but several persons, so the label ID for sky would
    be in that set, but not the one for person.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_ids_to_fuse` (`Set[int]`, *可选*) — 此状态中的标签将使其所有实例被融合在一起。例如，我们可以说一张图像中只能有一个天空，但可以有几个人，因此天空的标签ID将在该集合中，但人的标签ID不在其中。'
- en: '`target_sizes` (`List[Tuple]`, *optional*) — List of length (batch_size), where
    each list item (`Tuple[int, int]]`) corresponds to the requested final size (height,
    width) of each prediction in batch. If unset, predictions will not be resized.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_sizes` (`List[Tuple]`, *可选*) — 长度为(batch_size)的列表，其中每个列表项(`Tuple[int,
    int]]`)对应于批处理中每个预测的请求的最终大小(高度，宽度)。如果未设置，预测将不会被调整大小。'
- en: Returns
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[Dict]`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[Dict]`'
- en: 'A list of dictionaries, one per image, each dictionary containing two keys:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个图像一个字典，每个字典包含两个键：
- en: '`segmentation` — a tensor of shape `(height, width)` where each pixel represents
    a `segment_id` or `None` if no mask if found above `threshold`. If `target_sizes`
    is specified, segmentation is resized to the corresponding `target_sizes` entry.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`segmentation` — 形状为`(高度，宽度)`的张量，其中每个像素代表一个`segment_id`，如果未找到高于`threshold`的掩码，则为`None`。如果指定了`target_sizes`，则将分割调整为相应的`target_sizes`条目。'
- en: '`segments_info` — A dictionary that contains additional information on each
    segment.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`segments_info` — 包含每个段的附加信息的字典。'
- en: '`id` — an integer representing the `segment_id`.'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` — 代表`segment_id`的整数。'
- en: '`label_id` — An integer representing the label / semantic class id corresponding
    to `segment_id`.'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_id` — 代表与`segment_id`对应的标签/语义类别id的整数。'
- en: '`was_fused` — a boolean, `True` if `label_id` was in `label_ids_to_fuse`, `False`
    otherwise. Multiple instances of the same class / label were fused and assigned
    a single `segment_id`.'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`was_fused` — 一个布尔值，如果`label_id`在`label_ids_to_fuse`中，则为`True`，否则为`False`。同一类别/标签的多个实例被融合并分配一个单独的`segment_id`。'
- en: '`score` — Prediction score of segment with `segment_id`.'
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`score` — 具有`segment_id`的段的预测分数。'
- en: Converts the output of [ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)
    into image panoptic segmentation predictions. Only supports PyTorch.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 将[ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)的输出转换为图像全景分割预测。仅支持PyTorch。
- en: ConditionalDetrFeatureExtractor
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ConditionalDetrFeatureExtractor
- en: '### `class transformers.ConditionalDetrFeatureExtractor`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.ConditionalDetrFeatureExtractor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/feature_extraction_conditional_detr.py#L36)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/feature_extraction_conditional_detr.py#L36)'
- en: '[PRE8]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '#### `__call__`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `__call__`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
- en: '[PRE9]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Preprocess an image or a batch of images.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理一张图像或一批图像。
- en: '#### `post_process_object_detection`'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `post_process_object_detection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1376)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1376)'
- en: '[PRE10]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Parameters
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`outputs` (`DetrObjectDetectionOutput`) — Raw outputs of the model.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs` (`DetrObjectDetectionOutput`) — 模型的原始输出。'
- en: '`threshold` (`float`, *optional*) — Score threshold to keep object detection
    predictions.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold` (`float`, *可选*) — 保留对象检测预测的分数阈值。'
- en: '`target_sizes` (`torch.Tensor` or `List[Tuple[int, int]]`, *optional*) — Tensor
    of shape `(batch_size, 2)` or list of tuples (`Tuple[int, int]`) containing the
    target size (height, width) of each image in the batch. If left to None, predictions
    will not be resized.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_sizes` (`torch.Tensor`或`List[Tuple[int, int]]`, *可选*) — 形状为`(batch_size,
    2)`的张量或包含每个图像的目标大小(高度，宽度)的元组列表(`Tuple[int, int]`)。如果为None，预测将不会被调整大小。'
- en: '`top_k` (`int`, *optional*, defaults to 100) — Keep only top k bounding boxes
    before filtering by thresholding.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top_k` (`int`, *可选*, 默认为100) — 在通过阈值筛选之前仅保留前k个边界框。'
- en: Returns
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[Dict]`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[Dict]`'
- en: A list of dictionaries, each dictionary containing the scores, labels and boxes
    for an image in the batch as predicted by the model.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个字典包含模型预测的批处理中每个图像的分数、标签和框。
- en: Converts the raw output of [ConditionalDetrForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection)
    into final bounding boxes in (top_left_x, top_left_y, bottom_right_x, bottom_right_y)
    format. Only supports PyTorch.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 将[ConditionalDetrForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection)的原始输出转换为最终的边界框，格式为(top_left_x,
    top_left_y, bottom_right_x, bottom_right_y)。仅支持PyTorch。
- en: '#### `post_process_instance_segmentation`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `post_process_instance_segmentation`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1483)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1483)'
- en: '[PRE11]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Parameters
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`outputs` ([ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation))
    — Raw outputs of the model.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs` ([ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation))
    — 模型的原始输出。'
- en: '`threshold` (`float`, *optional*, defaults to 0.5) — The probability score
    threshold to keep predicted instance masks.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold`（`float`，*可选*，默认为0.5）- 保留预测实例掩码的概率分数阈值。'
- en: '`mask_threshold` (`float`, *optional*, defaults to 0.5) — Threshold to use
    when turning the predicted masks into binary values.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_threshold`（`float`，*可选*，默认为0.5）- 在将预测的掩码转换为二进制值时使用的阈值。'
- en: '`overlap_mask_area_threshold` (`float`, *optional*, defaults to 0.8) — The
    overlap mask area threshold to merge or discard small disconnected parts within
    each binary instance mask.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overlap_mask_area_threshold`（`float`，*可选*，默认为0.8）- 用于合并或丢弃每个二进制实例掩码中的小不连续部分的重叠掩码区域阈值。'
- en: '`target_sizes` (`List[Tuple]`, *optional*) — List of length (batch_size), where
    each list item (`Tuple[int, int]]`) corresponds to the requested final size (height,
    width) of each prediction. If unset, predictions will not be resized.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_sizes`（`List[Tuple]`，*可选*）- 长度为（batch_size）的列表，其中每个列表项（`Tuple[int,
    int]]`）对应于每个预测的请求最终大小（高度，宽度）。如果未设置，预测将不会被调整大小。'
- en: '`return_coco_annotation` (`bool`, *optional*) — Defaults to `False`. If set
    to `True`, segmentation maps are returned in COCO run-length encoding (RLE) format.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_coco_annotation`（`bool`，*可选*）- 默认为`False`。如果设置为`True`，则以COCO运行长度编码（RLE）格式返回分割地图。'
- en: Returns
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[Dict]`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[Dict]`'
- en: 'A list of dictionaries, one per image, each dictionary containing two keys:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个图像一个字典，每个字典包含两个键：
- en: '`segmentation` — A tensor of shape `(height, width)` where each pixel represents
    a `segment_id` or `List[List]` run-length encoding (RLE) of the segmentation map
    if return_coco_annotation is set to `True`. Set to `None` if no mask if found
    above `threshold`.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`segmentation` - 形状为（高度，宽度）的张量，其中每个像素表示`segment_id`或分割地图的`List[List]`运行长度编码（RLE），如果return_coco_annotation设置为`True`。如果未找到高于`threshold`的掩码，则设置为`None`。'
- en: '`segments_info` — A dictionary that contains additional information on each
    segment.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`segments_info` - 包含每个段的其他信息的字典。'
- en: '`id` — An integer representing the `segment_id`.'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` - 表示`segment_id`的整数。'
- en: '`label_id` — An integer representing the label / semantic class id corresponding
    to `segment_id`.'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_id` - 表示与`segment_id`对应的标签/语义类别id的整数。'
- en: '`score` — Prediction score of segment with `segment_id`.'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`score` - 具有`segment_id`的段的预测分数。'
- en: Converts the output of [ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)
    into instance segmentation predictions. Only supports PyTorch.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将[ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)的输出转换为实例分割预测。仅支持PyTorch。
- en: '#### `post_process_semantic_segmentation`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `post_process_semantic_segmentation`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1435)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1435)'
- en: '[PRE12]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Parameters
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`outputs` ([ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation))
    — Raw outputs of the model.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs`（[ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)）-
    模型的原始输出。'
- en: '`target_sizes` (`List[Tuple[int, int]]`, *optional*) — A list of tuples (`Tuple[int,
    int]`) containing the target size (height, width) of each image in the batch.
    If unset, predictions will not be resized.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_sizes`（`List[Tuple[int, int]]`，*可选*）- 包含批处理中每个图像的目标大小（高度，宽度）的元组列表（`Tuple[int,
    int]`）。如果未设置，预测将不会被调整大小。'
- en: Returns
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[torch.Tensor]`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[torch.Tensor]`'
- en: A list of length `batch_size`, where each item is a semantic segmentation map
    of shape (height, width) corresponding to the target_sizes entry (if `target_sizes`
    is specified). Each entry of each `torch.Tensor` correspond to a semantic class
    id.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一个长度为`batch_size`的列表，其中每个项目都是一个形状为（高度，宽度）的语义分割地图，对应于`target_sizes`条目（如果指定了`target_sizes`）。每个`torch.Tensor`的每个条目对应一个语义类别id。
- en: Converts the output of [ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)
    into semantic segmentation maps. Only supports PyTorch.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 将[ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)的输出转换为语义分割地图。仅支持PyTorch。
- en: '#### `post_process_panoptic_segmentation`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `post_process_panoptic_segmentation`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1567)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/image_processing_conditional_detr.py#L1567)'
- en: '[PRE13]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Parameters
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`outputs` ([ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation))
    — The outputs from [ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation).'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs`（[ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)）-
    来自[ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)的输出。'
- en: '`threshold` (`float`, *optional*, defaults to 0.5) — The probability score
    threshold to keep predicted instance masks.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold`（`float`，*可选*，默认为0.5）- 保留预测实例掩码的概率分数阈值。'
- en: '`mask_threshold` (`float`, *optional*, defaults to 0.5) — Threshold to use
    when turning the predicted masks into binary values.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mask_threshold`（`float`，*可选*，默认为0.5）- 在将预测的掩码转换为二进制值时使用的阈值。'
- en: '`overlap_mask_area_threshold` (`float`, *optional*, defaults to 0.8) — The
    overlap mask area threshold to merge or discard small disconnected parts within
    each binary instance mask.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`overlap_mask_area_threshold`（`float`，*可选*，默认为0.8）- 用于合并或丢弃每个二进制实例掩码中的小不连续部分的重叠掩码区域阈值。'
- en: '`label_ids_to_fuse` (`Set[int]`, *optional*) — The labels in this state will
    have all their instances be fused together. For instance we could say there can
    only be one sky in an image, but several persons, so the label ID for sky would
    be in that set, but not the one for person.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_ids_to_fuse`（`Set[int]`，*可选*）- 此状态中的标签将使其所有实例被融合在一起。例如，我们可以说图像中只能有一个天空，但可以有几个人，因此天空的标签ID将在该集合中，但人的标签ID不在其中。'
- en: '`target_sizes` (`List[Tuple]`, *optional*) — List of length (batch_size), where
    each list item (`Tuple[int, int]]`) corresponds to the requested final size (height,
    width) of each prediction in batch. If unset, predictions will not be resized.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_sizes`（`List[Tuple]`，*可选*）— 长度为（batch_size）的列表，其中每个列表项（`Tuple[int,
    int]`）对应于批处理中每个预测的请求的最终大小（高度，宽度）。如果未设置，预测将不会被调整大小。'
- en: Returns
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[Dict]`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[Dict]`'
- en: 'A list of dictionaries, one per image, each dictionary containing two keys:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个图像一个字典，每个字典包含两个键：
- en: '`segmentation` — a tensor of shape `(height, width)` where each pixel represents
    a `segment_id` or `None` if no mask if found above `threshold`. If `target_sizes`
    is specified, segmentation is resized to the corresponding `target_sizes` entry.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`segmentation` — 形状为`(height, width)`的张量，其中每个像素表示一个`segment_id`，如果未找到上面`threshold`的掩码，则表示`None`。如果指定了`target_sizes`，则将分割调整为相应的`target_sizes`条目。'
- en: '`segments_info` — A dictionary that contains additional information on each
    segment.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`segments_info` — 包含每个段的附加信息的字典。'
- en: '`id` — an integer representing the `segment_id`.'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id` — 表示`segment_id`的整数。'
- en: '`label_id` — An integer representing the label / semantic class id corresponding
    to `segment_id`.'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label_id` — 表示与`segment_id`对应的标签/语义类别id的整数。'
- en: '`was_fused` — a boolean, `True` if `label_id` was in `label_ids_to_fuse`, `False`
    otherwise. Multiple instances of the same class / label were fused and assigned
    a single `segment_id`.'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`was_fused` — 一个布尔值，如果`label_id`在`label_ids_to_fuse`中，则为`True`，否则为`False`。同一类别/标签的多个实例被融合并分配一个单一的`segment_id`。'
- en: '`score` — Prediction score of segment with `segment_id`.'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`score` — 具有`segment_id`的段的预测分数。'
- en: Converts the output of [ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)
    into image panoptic segmentation predictions. Only supports PyTorch.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 将[ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)的输出转换为图像全景分割预测。仅支持PyTorch。
- en: ConditionalDetrModel
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ConditionalDetrModel
- en: '### `class transformers.ConditionalDetrModel`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.ConditionalDetrModel`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/modeling_conditional_detr.py#L1565)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/modeling_conditional_detr.py#L1565)'
- en: '[PRE14]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Parameters
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([ConditionalDetrConfig](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`（[ConditionalDetrConfig](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig)）—
    具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型关联的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: The bare Conditional DETR Model (consisting of a backbone and encoder-decoder
    Transformer) outputting raw hidden-states without any specific head on top.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 裸的Conditional DETR模型（由骨干和编码器-解码器Transformer组成），输出原始隐藏状态，没有特定的头部。
- en: This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型继承自[PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel)。查看超类文档以获取库为所有模型实现的通用方法（如下载或保存、调整输入嵌入、修剪头等）。
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型还是一个PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规PyTorch模块，并参考PyTorch文档以获取与一般用法和行为相关的所有内容。
- en: '#### `forward`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/modeling_conditional_detr.py#L1606)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/modeling_conditional_detr.py#L1606)'
- en: '[PRE15]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Parameters
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Padding will be ignored by default should you provide
    it.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values`（形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`）—
    像素值。默认情况下将忽略填充。'
- en: Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [ConditionalDetrImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以使用[AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor)获取像素值。有关详细信息，请参阅[ConditionalDetrImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)。
- en: '`pixel_mask` (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*)
    — Mask to avoid performing attention on padding pixel values. Mask values selected
    in `[0, 1]`:'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_mask`（形状为`(batch_size, height, width)`的`torch.LongTensor`，*可选*）— 避免在填充像素值上执行注意力的掩码。掩码值选在`[0,
    1]`中：'
- en: 1 for pixels that are real (i.e. `not masked`),
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于真实的像素（即“未遮罩”），
- en: 0 for pixels that are padding (i.e. `masked`).
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于填充的像素（即“遮罩”），值为0。
- en: '[What are attention masks?](../glossary#attention-mask)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[什么是注意力掩码？](../glossary#attention-mask)'
- en: '`decoder_attention_mask` (`torch.FloatTensor` of shape `(batch_size, num_queries)`,
    *optional*) — Not used by default. Can be used to mask object queries.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`decoder_attention_mask`（形状为`(batch_size, num_queries)`的`torch.FloatTensor`，*可选*）—
    默认情况下不使用。可用于遮罩对象查询。'
- en: '`encoder_outputs` (`tuple(tuple(torch.FloatTensor)`, *optional*) — Tuple consists
    of (`last_hidden_state`, *optional*: `hidden_states`, *optional*: `attentions`)
    `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)`, *optional*)
    is a sequence of hidden-states at the output of the last layer of the encoder.
    Used in the cross-attention of the decoder.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Optionally, instead of passing the flattened feature
    map (output of the backbone + projection layer), you can choose to directly pass
    a flattened representation of an image.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, num_queries,
    hidden_size)`, *optional*) — Optionally, instead of initializing the queries with
    a tensor of zeros, you can choose to directly pass an embedded representation.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrModelOutput`
    or `tuple(torch.FloatTensor)`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrModelOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([ConditionalDetrConfig](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig))
    and inputs.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`) — Sequence of hidden-states at the output of the last layer of
    the decoder of the model.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states of the decoder at the output of each layer plus the initial embedding
    outputs.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`. Attentions weights of the decoder, after the
    attention softmax, used to compute the weighted average in the self-attention
    heads.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Attentions weights of the decoder’s cross-attention layer, after the attention
    softmax, used to compute the weighted average in the cross-attention heads.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states of the encoder at the output of each layer plus the initial embedding
    outputs.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`. Attentions weights of the encoder, after the
    attention softmax, used to compute the weighted average in the self-attention
    heads.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`intermediate_hidden_states` (`torch.FloatTensor` of shape `(config.decoder_layers,
    batch_size, sequence_length, hidden_size)`, *optional*, returned when `config.auxiliary_loss=True`)
    — Intermediate decoder activations, i.e. the output of each decoder layer, each
    of them gone through a layernorm.'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [ConditionalDetrModel](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrModel)
    forward method, overrides the `__call__` special method.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: ConditionalDetrForObjectDetection
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.ConditionalDetrForObjectDetection`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/modeling_conditional_detr.py#L1734)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Parameters
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([ConditionalDetrConfig](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CONDITIONAL_DETR Model (consisting of a backbone and encoder-decoder Transformer)
    with object detection heads on top, for tasks such as COCO detection.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/modeling_conditional_detr.py#L1767)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Parameters
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Padding will be ignored by default should you provide
    it.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [ConditionalDetrImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`pixel_mask` (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*)
    — Mask to avoid performing attention on padding pixel values. Mask values selected
    in `[0, 1]`:'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for pixels that are real (i.e. `not masked`),
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for pixels that are padding (i.e. `masked`).
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attention_mask` (`torch.FloatTensor` of shape `(batch_size, num_queries)`,
    *optional*) — Not used by default. Can be used to mask object queries.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_outputs` (`tuple(tuple(torch.FloatTensor)`, *optional*) — Tuple consists
    of (`last_hidden_state`, *optional*: `hidden_states`, *optional*: `attentions`)
    `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)`, *optional*)
    is a sequence of hidden-states at the output of the last layer of the encoder.
    Used in the cross-attention of the decoder.'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Optionally, instead of passing the flattened feature
    map (output of the backbone + projection layer), you can choose to directly pass
    a flattened representation of an image.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, num_queries,
    hidden_size)`, *optional*) — Optionally, instead of initializing the queries with
    a tensor of zeros, you can choose to directly pass an embedded representation.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labels` (`List[Dict]` of len `(batch_size,)`, *optional*) — Labels for computing
    the bipartite matching loss. List of dicts, each dictionary containing at least
    the following 2 keys: ‘class_labels’ and ‘boxes’ (the class labels and bounding
    boxes of an image in the batch respectively). The class labels themselves should
    be a `torch.LongTensor` of len `(number of bounding boxes in the image,)` and
    the boxes a `torch.FloatTensor` of shape `(number of bounding boxes in the image,
    4)`.'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput`
    or `tuple(torch.FloatTensor)`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrObjectDetectionOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([ConditionalDetrConfig](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig))
    and inputs.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    are provided)) — Total loss as a linear combination of a negative log-likehood
    (cross-entropy) for class prediction and a bounding box loss. The latter is defined
    as a linear combination of the L1 loss and the generalized scale-invariant IoU
    loss.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loss_dict` (`Dict`, *optional*) — A dictionary containing the individual losses.
    Useful for logging.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes
    + 1)`) — Classification logits (including no-object) for all queries.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pred_boxes` (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`)
    — Normalized boxes coordinates for all queries, represented as (center_x, center_y,
    width, height). These values are normalized in [0, 1], relative to the size of
    each individual image in the batch (disregarding possible padding). You can use
    [post_process_object_detection()](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor.post_process_object_detection)
    to retrieve the unnormalized bounding boxes.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxiliary_outputs` (`list[Dict]`, *optional*) — Optional, only returned when
    auxilary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)
    and labels are provided. It is a list of dictionaries containing the two above
    keys (`logits` and `pred_boxes`) for each decoder layer.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Sequence of hidden-states at the output of the last
    layer of the decoder of the model.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states of the decoder at the output of each layer plus the initial embedding
    outputs.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`. Attentions weights of the decoder, after the
    attention softmax, used to compute the weighted average in the self-attention
    heads.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Attentions weights of the decoder’s cross-attention layer, after the attention
    softmax, used to compute the weighted average in the cross-attention heads.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states of the encoder at the output of each layer plus the initial embedding
    outputs.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`. Attentions weights of the encoder, after the
    attention softmax, used to compute the weighted average in the self-attention
    heads.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [ConditionalDetrForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForObjectDetection)
    forward method, overrides the `__call__` special method.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: ConditionalDetrForSegmentation
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.ConditionalDetrForSegmentation`'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/modeling_conditional_detr.py#L1921)'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Parameters
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([ConditionalDetrConfig](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CONDITIONAL_DETR Model (consisting of a backbone and encoder-decoder Transformer)
    with a segmentation head on top, for tasks such as COCO panoptic.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/conditional_detr/modeling_conditional_detr.py#L1951)'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Parameters
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Padding will be ignored by default should you provide
    it.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [ConditionalDetrImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`pixel_mask` (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*)
    — Mask to avoid performing attention on padding pixel values. Mask values selected
    in `[0, 1]`:'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for pixels that are real (i.e. `not masked`),
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for pixels that are padding (i.e. `masked`).
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attention_mask` (`torch.FloatTensor` of shape `(batch_size, num_queries)`,
    *optional*) — Not used by default. Can be used to mask object queries.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_outputs` (`tuple(tuple(torch.FloatTensor)`, *optional*) — Tuple consists
    of (`last_hidden_state`, *optional*: `hidden_states`, *optional*: `attentions`)
    `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)`, *optional*)
    is a sequence of hidden-states at the output of the last layer of the encoder.
    Used in the cross-attention of the decoder.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Optionally, instead of passing the flattened feature
    map (output of the backbone + projection layer), you can choose to directly pass
    a flattened representation of an image.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, num_queries,
    hidden_size)`, *optional*) — Optionally, instead of initializing the queries with
    a tensor of zeros, you can choose to directly pass an embedded representation.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labels` (`List[Dict]` of len `(batch_size,)`, *optional*) — Labels for computing
    the bipartite matching loss, DICE/F-1 loss and Focal loss. List of dicts, each
    dictionary containing at least the following 3 keys: ‘class_labels’, ‘boxes’ and
    ‘masks’ (the class labels, bounding boxes and segmentation masks of an image in
    the batch respectively). The class labels themselves should be a `torch.LongTensor`
    of len `(number of bounding boxes in the image,)`, the boxes a `torch.FloatTensor`
    of shape `(number of bounding boxes in the image, 4)` and the masks a `torch.FloatTensor`
    of shape `(number of bounding boxes in the image, height, width)`.'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrSegmentationOutput`
    or `tuple(torch.FloatTensor)`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.conditional_detr.modeling_conditional_detr.ConditionalDetrSegmentationOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([ConditionalDetrConfig](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrConfig))
    and inputs.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    are provided)) — Total loss as a linear combination of a negative log-likehood
    (cross-entropy) for class prediction and a bounding box loss. The latter is defined
    as a linear combination of the L1 loss and the generalized scale-invariant IoU
    loss.'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loss_dict` (`Dict`, *optional*) — A dictionary containing the individual losses.
    Useful for logging.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes
    + 1)`) — Classification logits (including no-object) for all queries.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pred_boxes` (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`)
    — Normalized boxes coordinates for all queries, represented as (center_x, center_y,
    width, height). These values are normalized in [0, 1], relative to the size of
    each individual image in the batch (disregarding possible padding). You can use
    [post_process_object_detection()](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor.post_process_object_detection)
    to retrieve the unnormalized bounding boxes.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pred_masks` (`torch.FloatTensor` of shape `(batch_size, num_queries, height/4,
    width/4)`) — Segmentation masks logits for all queries. See also [post_process_semantic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor.post_process_semantic_segmentation)
    or [post_process_instance_segmentation()](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor.post_process_instance_segmentation)
    [post_process_panoptic_segmentation()](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrFeatureExtractor.post_process_panoptic_segmentation)
    to evaluate semantic, instance and panoptic segmentation masks respectively.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxiliary_outputs` (`list[Dict]`, *optional*) — Optional, only returned when
    auxiliary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)
    and labels are provided. It is a list of dictionaries containing the two above
    keys (`logits` and `pred_boxes`) for each decoder layer.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Sequence of hidden-states at the output of the last
    layer of the decoder of the model.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states of the decoder at the output of each layer plus the initial embedding
    outputs.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`. Attentions weights of the decoder, after the
    attention softmax, used to compute the weighted average in the self-attention
    heads.'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Attentions weights of the decoder’s cross-attention layer, after the attention
    softmax, used to compute the weighted average in the cross-attention heads.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    — Tuple of `torch.FloatTensor` (one for the output of the embeddings + one for
    the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states of the encoder at the output of each layer plus the initial embedding
    outputs.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) —
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`. Attentions weights of the encoder, after the
    attention softmax, used to compute the weighted average in the self-attention
    heads.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [ConditionalDetrForSegmentation](/docs/transformers/v4.37.2/en/model_doc/conditional_detr#transformers.ConditionalDetrForSegmentation)
    forward method, overrides the `__call__` special method.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
