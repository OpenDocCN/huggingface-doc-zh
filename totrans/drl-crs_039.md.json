["```py\npip install -r https://raw.githubusercontent.com/huggingface/deep-rl-class/main/notebooks/unit2/requirements-unit2.txt\n```", "```py\nsudo apt-get update\nsudo apt-get install -y python3-opengl\napt install ffmpeg xvfb\npip3 install pyvirtualdisplay\n```", "```py\nimport os\n\nos.kill(os.getpid(), 9)\n```", "```py\n# Virtual display\nfrom pyvirtualdisplay import Display\n\nvirtual_display = Display(visible=0, size=(1400, 900))\nvirtual_display.start()\n```", "```py\nimport numpy as np\nimport gymnasium as gym\nimport random\nimport imageio\nimport os\nimport tqdm\n\nimport pickle5 as pickle\nfrom tqdm.notebook import tqdm\n```", "```py\n# Create the FrozenLake-v1 environment using 4x4 map and non-slippery version and render_mode=\"rgb_array\"\nenv = gym.make()  # TODO use the correct parameters\n```", "```py\nenv = gym.make(\"FrozenLake-v1\", map_name=\"4x4\", is_slippery=False, render_mode=\"rgb_array\")\n```", "```py\ndesc=[\"SFFF\", \"FHFH\", \"FFFH\", \"HFFG\"]\ngym.make('FrozenLake-v1', desc=desc, is_slippery=True)\n```", "```py\n# We create our environment with gym.make(\"<name_of_the_environment>\")- `is_slippery=False`: The agent always moves in the intended direction due to the non-slippery nature of the frozen lake (deterministic).\nprint(\"_____OBSERVATION SPACE_____ \\n\")\nprint(\"Observation Space\", env.observation_space)\nprint(\"Sample observation\", env.observation_space.sample())  # Get a random observation\n```", "```py\nprint(\"\\n _____ACTION SPACE_____ \\n\")\nprint(\"Action Space Shape\", env.action_space.n)\nprint(\"Action Space Sample\", env.action_space.sample())  # Take a random action\n```", "```py\nstate_space =\nprint(\"There are \", state_space, \" possible states\")\n\naction_space =\nprint(\"There are \", action_space, \" possible actions\")\n```", "```py\n# Let's create our Qtable of size (state_space, action_space) and initialized each values at 0 using np.zeros. np.zeros needs a tuple (a,b)\ndef initialize_q_table(state_space, action_space):\n  Qtable =\n  return Qtable\n```", "```py\nQtable_frozenlake = initialize_q_table(state_space, action_space)\n```", "```py\nstate_space = env.observation_space.n\nprint(\"There are \", state_space, \" possible states\")\n\naction_space = env.action_space.n\nprint(\"There are \", action_space, \" possible actions\")\n```", "```py\n# Let's create our Qtable of size (state_space, action_space) and initialized each values at 0 using np.zeros\ndef initialize_q_table(state_space, action_space):\n    Qtable = np.zeros((state_space, action_space))\n    return Qtable\n```", "```py\nQtable_frozenlake = initialize_q_table(state_space, action_space)\n```", "```py\ndef greedy_policy(Qtable, state):\n  # Exploitation: take the action with the highest state, action value\n  action =\n\n  return action\n```", "```py\ndef greedy_policy(Qtable, state):\n    # Exploitation: take the action with the highest state, action value\n    action = np.argmax(Qtable[state][:])\n\n    return action\n```", "```py\ndef epsilon_greedy_policy(Qtable, state, epsilon):\n  # Randomly generate a number between 0 and 1\n  random_num =\n  # if random_num > greater than epsilon --> exploitation\n  if random_num > epsilon:\n    # Take the action with the highest value given a state\n    # np.argmax can be useful here\n    action =\n  # else --> exploration\n  else:\n    action = # Take a random action\n\n  return action\n```", "```py\ndef epsilon_greedy_policy(Qtable, state, epsilon):\n    # Randomly generate a number between 0 and 1\n    random_num = random.uniform(0, 1)\n    # if random_num > greater than epsilon --> exploitation\n    if random_num > epsilon:\n        # Take the action with the highest value given a state\n        # np.argmax can be useful here\n        action = greedy_policy(Qtable, state)\n    # else --> exploration\n    else:\n        action = env.action_space.sample()\n\n    return action\n```", "```py\n# Training parameters\nn_training_episodes = 10000  # Total training episodes\nlearning_rate = 0.7  # Learning rate\n\n# Evaluation parameters\nn_eval_episodes = 100  # Total number of test episodes\n\n# Environment parameters\nenv_id = \"FrozenLake-v1\"  # Name of the environment\nmax_steps = 99  # Max steps per episode\ngamma = 0.95  # Discounting rate\neval_seed = []  # The evaluation seed of the environment\n\n# Exploration parameters\nmax_epsilon = 1.0  # Exploration probability at start\nmin_epsilon = 0.05  # Minimum exploration probability\ndecay_rate = 0.0005  # Exponential decay rate for exploration prob\n```", "```py\nFor episode in the total of training episodes:\n\nReduce epsilon (since we need less and less exploration)\nReset the environment\n\n  For step in max timesteps:\n    Choose the action At using epsilon greedy policy\n    Take the action (a) and observe the outcome state(s') and reward (r)\n    Update the Q-value Q(s,a) using Bellman equation Q(s,a) + lr [R(s,a) + gamma * max Q(s',a') - Q(s,a)]\n    If done, finish the episode\n    Our next state is the new state\n```", "```py\ndef train(n_training_episodes, min_epsilon, max_epsilon, decay_rate, env, max_steps, Qtable):\n  for episode in tqdm(range(n_training_episodes)):\n    # Reduce epsilon (because we need less and less exploration)\n    epsilon = min_epsilon + (max_epsilon - min_epsilon)*np.exp(-decay_rate*episode)\n    # Reset the environment\n    state, info = env.reset()\n    step = 0\n    terminated = False\n    truncated = False\n\n    # repeat\n    for step in range(max_steps):\n      # Choose the action At using epsilon greedy policy\n      action =\n\n      # Take action At and observe Rt+1 and St+1\n      # Take the action (a) and observe the outcome state(s') and reward (r)\n      new_state, reward, terminated, truncated, info =\n\n      # Update Q(s,a):= Q(s,a) + lr [R(s,a) + gamma * max Q(s',a') - Q(s,a)]\n      Qtable[state][action] =\n\n      # If terminated or truncated finish the episode\n      if terminated or truncated:\n        break\n\n      # Our next state is the new state\n      state = new_state\n  return Qtable\n```", "```py\ndef train(n_training_episodes, min_epsilon, max_epsilon, decay_rate, env, max_steps, Qtable):\n    for episode in tqdm(range(n_training_episodes)):\n        # Reduce epsilon (because we need less and less exploration)\n        epsilon = min_epsilon + (max_epsilon - min_epsilon) * np.exp(-decay_rate * episode)\n        # Reset the environment\n        state, info = env.reset()\n        step = 0\n        terminated = False\n        truncated = False\n\n        # repeat\n        for step in range(max_steps):\n            # Choose the action At using epsilon greedy policy\n            action = epsilon_greedy_policy(Qtable, state, epsilon)\n\n            # Take action At and observe Rt+1 and St+1\n            # Take the action (a) and observe the outcome state(s') and reward (r)\n            new_state, reward, terminated, truncated, info = env.step(action)\n\n            # Update Q(s,a):= Q(s,a) + lr [R(s,a) + gamma * max Q(s',a') - Q(s,a)]\n            Qtable[state][action] = Qtable[state][action] + learning_rate * (\n                reward + gamma * np.max(Qtable[new_state]) - Qtable[state][action]\n            )\n\n            # If terminated or truncated finish the episode\n            if terminated or truncated:\n                break\n\n            # Our next state is the new state\n            state = new_state\n    return Qtable\n```", "```py\nQtable_frozenlake = train(n_training_episodes, min_epsilon, max_epsilon, decay_rate, env, max_steps, Qtable_frozenlake)\n```", "```py\nQtable_frozenlake\n```", "```py\ndef evaluate_agent(env, max_steps, n_eval_episodes, Q, seed):\n    \"\"\"\n    Evaluate the agent for ``n_eval_episodes`` episodes and returns average reward and std of reward.\n    :param env: The evaluation environment\n    :param n_eval_episodes: Number of episode to evaluate the agent\n    :param Q: The Q-table\n    :param seed: The evaluation seed array (for taxi-v3)\n    \"\"\"\n    episode_rewards = []\n    for episode in tqdm(range(n_eval_episodes)):\n        if seed:\n            state, info = env.reset(seed=seed[episode])\n        else:\n            state, info = env.reset()\n        step = 0\n        truncated = False\n        terminated = False\n        total_rewards_ep = 0\n\n        for step in range(max_steps):\n            # Take the action (index) that have the maximum expected future reward given that state\n            action = greedy_policy(Q, state)\n            new_state, reward, terminated, truncated, info = env.step(action)\n            total_rewards_ep += reward\n\n            if terminated or truncated:\n                break\n            state = new_state\n        episode_rewards.append(total_rewards_ep)\n    mean_reward = np.mean(episode_rewards)\n    std_reward = np.std(episode_rewards)\n\n    return mean_reward, std_reward\n```", "```py\n# Evaluate our Agent\nmean_reward, std_reward = evaluate_agent(env, max_steps, n_eval_episodes, Qtable_frozenlake, eval_seed)\nprint(f\"Mean_reward={mean_reward:.2f} +/- {std_reward:.2f}\")\n```", "```py\nfrom huggingface_hub import HfApi, snapshot_download\nfrom huggingface_hub.repocard import metadata_eval_result, metadata_save\n\nfrom pathlib import Path\nimport datetime\nimport json\n```", "```py\ndef record_video(env, Qtable, out_directory, fps=1):\n    \"\"\"\n    Generate a replay video of the agent\n    :param env\n    :param Qtable: Qtable of our agent\n    :param out_directory\n    :param fps: how many frame per seconds (with taxi-v3 and frozenlake-v1 we use 1)\n    \"\"\"\n    images = []\n    terminated = False\n    truncated = False\n    state, info = env.reset(seed=random.randint(0, 500))\n    img = env.render()\n    images.append(img)\n    while not terminated or truncated:\n        # Take the action (index) that have the maximum expected future reward given that state\n        action = np.argmax(Qtable[state][:])\n        state, reward, terminated, truncated, info = env.step(\n            action\n        )  # We directly put next_state = state for recording logic\n        img = env.render()\n        images.append(img)\n    imageio.mimsave(out_directory, [np.array(img) for i, img in enumerate(images)], fps=fps)\n```", "```py\ndef push_to_hub(repo_id, model, env, video_fps=1, local_repo_path=\"hub\"):\n    \"\"\"\n    Evaluate, Generate a video and Upload a model to Hugging Face Hub.\n    This method does the complete pipeline:\n    - It evaluates the model\n    - It generates the model card\n    - It generates a replay video of the agent\n    - It pushes everything to the Hub\n\n    :param repo_id: repo_id: id of the model repository from the Hugging Face Hub\n    :param env\n    :param video_fps: how many frame per seconds to record our video replay\n    (with taxi-v3 and frozenlake-v1 we use 1)\n    :param local_repo_path: where the local repository is\n    \"\"\"\n    _, repo_name = repo_id.split(\"/\")\n\n    eval_env = env\n    api = HfApi()\n\n    # Step 1: Create the repo\n    repo_url = api.create_repo(\n        repo_id=repo_id,\n        exist_ok=True,\n    )\n\n    # Step 2: Download files\n    repo_local_path = Path(snapshot_download(repo_id=repo_id))\n\n    # Step 3: Save the model\n    if env.spec.kwargs.get(\"map_name\"):\n        model[\"map_name\"] = env.spec.kwargs.get(\"map_name\")\n        if env.spec.kwargs.get(\"is_slippery\", \"\") == False:\n            model[\"slippery\"] = False\n\n    # Pickle the model\n    with open((repo_local_path) / \"q-learning.pkl\", \"wb\") as f:\n        pickle.dump(model, f)\n\n    # Step 4: Evaluate the model and build JSON with evaluation metrics\n    mean_reward, std_reward = evaluate_agent(\n        eval_env, model[\"max_steps\"], model[\"n_eval_episodes\"], model[\"qtable\"], model[\"eval_seed\"]\n    )\n\n    evaluate_data = {\n        \"env_id\": model[\"env_id\"],\n        \"mean_reward\": mean_reward,\n        \"n_eval_episodes\": model[\"n_eval_episodes\"],\n        \"eval_datetime\": datetime.datetime.now().isoformat(),\n    }\n\n    # Write a JSON file called \"results.json\" that will contain the\n    # evaluation results\n    with open(repo_local_path / \"results.json\", \"w\") as outfile:\n        json.dump(evaluate_data, outfile)\n\n    # Step 5: Create the model card\n    env_name = model[\"env_id\"]\n    if env.spec.kwargs.get(\"map_name\"):\n        env_name += \"-\" + env.spec.kwargs.get(\"map_name\")\n\n    if env.spec.kwargs.get(\"is_slippery\", \"\") == False:\n        env_name += \"-\" + \"no_slippery\"\n\n    metadata = {}\n    metadata[\"tags\"] = [env_name, \"q-learning\", \"reinforcement-learning\", \"custom-implementation\"]\n\n    # Add metrics\n    eval = metadata_eval_result(\n        model_pretty_name=repo_name,\n        task_pretty_name=\"reinforcement-learning\",\n        task_id=\"reinforcement-learning\",\n        metrics_pretty_name=\"mean_reward\",\n        metrics_id=\"mean_reward\",\n        metrics_value=f\"{mean_reward:.2f} +/- {std_reward:.2f}\",\n        dataset_pretty_name=env_name,\n        dataset_id=env_name,\n    )\n\n    # Merges both dictionaries\n    metadata = {**metadata, **eval}\n\n    model_card = f\"\"\"\n  # **Q-Learning** Agent playing1 **{env_id}**\n  This is a trained model of a **Q-Learning** agent playing **{env_id}** .\n\n  ## Usage\n\n  model = load_from_hub(repo_id=\"{repo_id}\", filename=\"q-learning.pkl\")\n\n  # Don't forget to check if you need to add additional attributes (is_slippery=False etc)\n  env = gym.make(model[\"env_id\"])\n  \"\"\"\n\n    evaluate_agent(env, model[\"max_steps\"], model[\"n_eval_episodes\"], model[\"qtable\"], model[\"eval_seed\"])\n\n    readme_path = repo_local_path / \"README.md\"\n    readme = \"\"\n    print(readme_path.exists())\n    if readme_path.exists():\n        with readme_path.open(\"r\", encoding=\"utf8\") as f:\n            readme = f.read()\n    else:\n        readme = model_card\n\n    with readme_path.open(\"w\", encoding=\"utf-8\") as f:\n        f.write(readme)\n\n    # Save our metrics to Readme metadata\n    metadata_save(readme_path, metadata)\n\n    # Step 6: Record a video\n    video_path = repo_local_path / \"replay.mp4\"\n    record_video(env, model[\"qtable\"], video_path, video_fps)\n\n    # Step 7\\. Push everything to the Hub\n    api.upload_folder(\n        repo_id=repo_id,\n        folder_path=repo_local_path,\n        path_in_repo=\".\",\n    )\n\n    print(\"Your model is pushed to the Hub. You can view your model here: \", repo_url)\n```", "```py\nfrom huggingface_hub import notebook_login\n\nnotebook_login()\n```", "```py\nmodel = {\n    \"env_id\": env_id,\n    \"max_steps\": max_steps,\n    \"n_training_episodes\": n_training_episodes,\n    \"n_eval_episodes\": n_eval_episodes,\n    \"eval_seed\": eval_seed,\n    \"learning_rate\": learning_rate,\n    \"gamma\": gamma,\n    \"max_epsilon\": max_epsilon,\n    \"min_epsilon\": min_epsilon,\n    \"decay_rate\": decay_rate,\n    \"qtable\": Qtable_frozenlake,\n}\n```", "```py\nmodel\n```", "```py\nusername = \"\"  # FILL THIS\nrepo_name = \"q-FrozenLake-v1-4x4-noSlippery\"\npush_to_hub(repo_id=f\"{username}/{repo_name}\", model=model, env=env)\n```", "```py\nenv = gym.make(\"Taxi-v3\", render_mode=\"rgb_array\")\n```", "```py\nstate_space = env.observation_space.n\nprint(\"There are \", state_space, \" possible states\")\n```", "```py\naction_space = env.action_space.n\nprint(\"There are \", action_space, \" possible actions\")\n```", "```py\n# Create our Q table with state_size rows and action_size columns (500x6)\nQtable_taxi = initialize_q_table(state_space, action_space)\nprint(Qtable_taxi)\nprint(\"Q-table shape: \", Qtable_taxi.shape)\n```", "```py\n# Training parameters\nn_training_episodes = 25000  # Total training episodes\nlearning_rate = 0.7  # Learning rate\n\n# Evaluation parameters\nn_eval_episodes = 100  # Total number of test episodes\n\n# DO NOT MODIFY EVAL_SEED\neval_seed = [\n    16,\n    54,\n    165,\n    177,\n    191,\n    191,\n    120,\n    80,\n    149,\n    178,\n    48,\n    38,\n    6,\n    125,\n    174,\n    73,\n    50,\n    172,\n    100,\n    148,\n    146,\n    6,\n    25,\n    40,\n    68,\n    148,\n    49,\n    167,\n    9,\n    97,\n    164,\n    176,\n    61,\n    7,\n    54,\n    55,\n    161,\n    131,\n    184,\n    51,\n    170,\n    12,\n    120,\n    113,\n    95,\n    126,\n    51,\n    98,\n    36,\n    135,\n    54,\n    82,\n    45,\n    95,\n    89,\n    59,\n    95,\n    124,\n    9,\n    113,\n    58,\n    85,\n    51,\n    134,\n    121,\n    169,\n    105,\n    21,\n    30,\n    11,\n    50,\n    65,\n    12,\n    43,\n    82,\n    145,\n    152,\n    97,\n    106,\n    55,\n    31,\n    85,\n    38,\n    112,\n    102,\n    168,\n    123,\n    97,\n    21,\n    83,\n    158,\n    26,\n    80,\n    63,\n    5,\n    81,\n    32,\n    11,\n    28,\n    148,\n]  # Evaluation seed, this ensures that all classmates agents are trained on the same taxi starting position\n# Each seed has a specific starting state\n\n# Environment parameters\nenv_id = \"Taxi-v3\"  # Name of the environment\nmax_steps = 99  # Max steps per episode\ngamma = 0.95  # Discounting rate\n\n# Exploration parameters\nmax_epsilon = 1.0  # Exploration probability at start\nmin_epsilon = 0.05  # Minimum exploration probability\ndecay_rate = 0.005  # Exponential decay rate for exploration prob\n```", "```py\nQtable_taxi = train(n_training_episodes, min_epsilon, max_epsilon, decay_rate, env, max_steps, Qtable_taxi)\nQtable_taxi\n```", "```py\nmodel = {\n    \"env_id\": env_id,\n    \"max_steps\": max_steps,\n    \"n_training_episodes\": n_training_episodes,\n    \"n_eval_episodes\": n_eval_episodes,\n    \"eval_seed\": eval_seed,\n    \"learning_rate\": learning_rate,\n    \"gamma\": gamma,\n    \"max_epsilon\": max_epsilon,\n    \"min_epsilon\": min_epsilon,\n    \"decay_rate\": decay_rate,\n    \"qtable\": Qtable_taxi,\n}\n```", "```py\nusername = \"\"  # FILL THIS\nrepo_name = \"\"  # FILL THIS\npush_to_hub(repo_id=f\"{username}/{repo_name}\", model=model, env=env)\n```", "```py\nfrom urllib.error import HTTPError\n\nfrom huggingface_hub import hf_hub_download\n\ndef load_from_hub(repo_id: str, filename: str) -> str:\n    \"\"\"\n    Download a model from Hugging Face Hub.\n    :param repo_id: id of the model repository from the Hugging Face Hub\n    :param filename: name of the model zip file from the repository\n    \"\"\"\n    # Get the model from the Hub, download and cache the model on your local disk\n    pickle_model = hf_hub_download(repo_id=repo_id, filename=filename)\n\n    with open(pickle_model, \"rb\") as f:\n        downloaded_model_file = pickle.load(f)\n\n    return downloaded_model_file\n```", "```py\nmodel = load_from_hub(repo_id=\"ThomasSimonini/q-Taxi-v3\", filename=\"q-learning.pkl\")  # Try to use another model\n\nprint(model)\nenv = gym.make(model[\"env_id\"])\n\nevaluate_agent(env, model[\"max_steps\"], model[\"n_eval_episodes\"], model[\"qtable\"], model[\"eval_seed\"])\n```", "```py\nmodel = load_from_hub(\n    repo_id=\"ThomasSimonini/q-FrozenLake-v1-no-slippery\", filename=\"q-learning.pkl\"\n)  # Try to use another model\n\nenv = gym.make(model[\"env_id\"], is_slippery=False)\n\nevaluate_agent(env, model[\"max_steps\"], model[\"n_eval_episodes\"], model[\"qtable\"], model[\"eval_seed\"])\n```"]