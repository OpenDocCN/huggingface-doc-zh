- en: Detailed parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/api-inference/detailed_parameters](https://huggingface.co/docs/api-inference/detailed_parameters)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Which task is used by this model ?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general the ü§ó Hosted API Inference accepts a simple string as an input. However,
    more advanced usage depends on the ‚Äútask‚Äù that the model solves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ‚Äútask‚Äù of a model is defined here on it‚Äôs model page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea0de97591cf0b5303fe051e1664d6bc.png) ![](../Images/192c21317e5fcdfd06ff0e3e37893ad3.png)'
  prefs: []
  type: TYPE_IMG
- en: Natural Language Processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fill Mask task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tries to fill in a hole with a missing word (token to be precise). That‚Äôs the
    base task for BERT models.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [bert-base-uncased](https://huggingface.co/bert-base-uncased)
    (it‚Äôs a simple model, but fun to play with).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required): | a string to be filled from, must contain the [MASK]
    token (check model card for exact name of the mask) |'
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **sequence** | The actual sequence of tokens that ran against the model (may
    contain special tokens) |'
  prefs: []
  type: TYPE_TB
- en: '| **score** | The probability for this token. |'
  prefs: []
  type: TYPE_TB
- en: '| **token** | The id of the token |'
  prefs: []
  type: TYPE_TB
- en: '| **token_str** | The string representation of the token |'
  prefs: []
  type: TYPE_TB
- en: Summarization task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This task is well known to summarize longer text into shorter text. Be careful,
    some models have a maximum length of input. That means that the summary cannot
    handle full books for instance. Be careful when choosing your model. If you want
    to discuss your summarization needs, please get in touch with us: [api-enterprise@huggingface.co](mailto:api-enterprise@huggingface.co)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [facebook/bart-large-cnn](https://huggingface.co/facebook/bart-large-cnn).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) | a string to be summarized |'
  prefs: []
  type: TYPE_TB
- en: '| **parameters** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| min_length | (Default: `None`). Integer to define the minimum length **in
    tokens** of the output summary. |'
  prefs: []
  type: TYPE_TB
- en: '| max_length | (Default: `None`). Integer to define the maximum length **in
    tokens** of the output summary. |'
  prefs: []
  type: TYPE_TB
- en: '| top_k | (Default: `None`). Integer to define the top tokens considered within
    the `sample` operation to create new text. |'
  prefs: []
  type: TYPE_TB
- en: '| top_p | (Default: `None`). Float to define the tokens that are within the
    `sample` operation of text generation. Add tokens in the sample for more probable
    to least probable until the sum of the probabilities is greater than `top_p`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| temperature | (Default: `1.0`). Float (0.0-100.0). The temperature of the
    sampling operation. 1 means regular sampling, `0` means always take the highest
    score, `100.0` is getting closer to uniform probability. |'
  prefs: []
  type: TYPE_TB
- en: '| repetition_penalty | (Default: `None`). Float (0.0-100.0). The more a token
    is used within generation the more it is penalized to not be picked in successive
    generation passes. |'
  prefs: []
  type: TYPE_TB
- en: '| max_time | (Default: `None`). Float (0-120.0). The amount of time in seconds
    that the query should take maximum. Network can cause some overhead so it will
    be a soft limit. |'
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **summary_text** | The string after summarization |'
  prefs: []
  type: TYPE_TB
- en: Question Answering task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Want to have a nice know-it-all bot that can answer any question?
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [deepset/roberta-base-squad2](https://huggingface.co/deepset/roberta-base-squad2).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§óTransformers](https://github.com/huggingface/transformers)
    and [AllenNLP](https://github.com/allenai/allennlp)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: Return value is a dict.
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **answer** | A string that‚Äôs the answer within the text. |'
  prefs: []
  type: TYPE_TB
- en: '| **score** | A float that represents how likely that the answer is correct
    |'
  prefs: []
  type: TYPE_TB
- en: '| **start** | The index (string wise) of the start of the answer within `context`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **stop** | The index (string wise) of the stop of the answer within `context`.
    |'
  prefs: []
  type: TYPE_TB
- en: Table Question Answering task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don‚Äôt know SQL? Don‚Äôt want to dive into a large spreadsheet? Ask questions in
    plain english!
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [google/tapas-base-finetuned-wtq](https://huggingface.co/google/tapas-base-finetuned-wtq).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) |  |'
  prefs: []
  type: TYPE_TB
- en: '| query (required) | The query in plain text that you want to ask the table
    |'
  prefs: []
  type: TYPE_TB
- en: '| table (required) | A table of data represented as a dict of list where entries
    are headers and the lists are all the values, all lists must have the same size.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **answer** | The plaintext answer |'
  prefs: []
  type: TYPE_TB
- en: '| **coordinates** | a list of coordinates of the cells referenced in the answer
    |'
  prefs: []
  type: TYPE_TB
- en: '| **cells** | a list of coordinates of the cells contents |'
  prefs: []
  type: TYPE_TB
- en: '| **aggregator** | The aggregator used to get the answer |'
  prefs: []
  type: TYPE_TB
- en: Sentence Similarity task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calculate the semantic similarity between one text and a list of other sentences
    by comparing their embeddings.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [sentence-transformers/all-MiniLM-L6-v2](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [Sentence Transformers](https://www.sbert.net/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) |  |'
  prefs: []
  type: TYPE_TB
- en: '| source_sentence (required) | The string that you wish to compare the other
    strings with. This can be a phrase, sentence, or longer passage, depending on
    the model being used. |'
  prefs: []
  type: TYPE_TB
- en: '| sentences (required) | A list of strings which will be compared against the
    source_sentence. |'
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: The return value is a list of similarity scores, given as floats.
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **Scores** | The associated similarity score for each of the given strings
    |'
  prefs: []
  type: TYPE_TB
- en: Text Classification task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Usually used for sentiment-analysis this will output the likelihood of classes
    of an input.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) | a string to be classified |'
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **label** | The label for the class (model specific) |'
  prefs: []
  type: TYPE_TB
- en: '| **score** | A floats that represents how likely is that the text belongs
    the this class. |'
  prefs: []
  type: TYPE_TB
- en: Text Generation task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use to continue text from a prompt. This is a very generic task.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [gpt2](https://huggingface.co/gpt2) (it‚Äôs a simple model,
    but fun to play with).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required): | a string to be generated from |'
  prefs: []
  type: TYPE_TB
- en: '| **parameters** | dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| top_k | (Default: `None`). Integer to define the top tokens considered within
    the `sample` operation to create new text. |'
  prefs: []
  type: TYPE_TB
- en: '| top_p | (Default: `None`). Float to define the tokens that are within the
    `sample` operation of text generation. Add tokens in the sample for more probable
    to least probable until the sum of the probabilities is greater than `top_p`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| temperature | (Default: `1.0`). Float (0.0-100.0). The temperature of the
    sampling operation. 1 means regular sampling, `0` means always take the highest
    score, `100.0` is getting closer to uniform probability. |'
  prefs: []
  type: TYPE_TB
- en: '| repetition_penalty | (Default: `None`). Float (0.0-100.0). The more a token
    is used within generation the more it is penalized to not be picked in successive
    generation passes. |'
  prefs: []
  type: TYPE_TB
- en: '| max_new_tokens | (Default: `None`). Int (0-250). The amount of new tokens
    to be generated, this does **not** include the input length it is a estimate of
    the size of generated text you want. Each new tokens slows down the request, so
    look for balance between response times and length of text generated. |'
  prefs: []
  type: TYPE_TB
- en: '| max_time | (Default: `None`). Float (0-120.0). The amount of time in seconds
    that the query should take maximum. Network can cause some overhead so it will
    be a soft limit. Use that in combination with `max_new_tokens` for best results.
    |'
  prefs: []
  type: TYPE_TB
- en: '| return_full_text | (Default: `True`). Bool. If set to False, the return results
    will **not** contain the original query making it easier for prompting. |'
  prefs: []
  type: TYPE_TB
- en: '| num_return_sequences | (Default: `1`). Integer. The number of proposition
    you want to be returned. |'
  prefs: []
  type: TYPE_TB
- en: '| do_sample | (Optional: `True`). Bool. Whether or not to use sampling, use
    greedy decoding otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **generated_text** | The continuated string |'
  prefs: []
  type: TYPE_TB
- en: Text2Text Generation task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Essentially [Text-generation task](#text-generation-task). But uses Encoder-Decoder
    architecture, so might change in the future for more options.
  prefs: []
  type: TYPE_NORMAL
- en: Token Classification task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Usually used for sentence parsing, either grammatical, or Named Entity Recognition
    (NER) to understand keywords contained within text.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [dbmdz/bert-large-cased-finetuned-conll03-english](https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers),
    [Flair](https://github.com/flairNLP/flair)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) | a string to be classified |'
  prefs: []
  type: TYPE_TB
- en: '| **parameters** | a dict containing the following key: |'
  prefs: []
  type: TYPE_TB
- en: '| aggregation_strategy | (Default: `simple`). There are several aggregation
    strategies: `none`: Every token gets classified without further aggregation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`simple`: Entities are grouped according to the default schema (B-, I- tags
    get merged when the tag is similar).'
  prefs: []
  type: TYPE_NORMAL
- en: '`first`: Same as the `simple` strategy except words cannot end up with different
    tags. Words will use the tag of the first token when there is ambiguity.'
  prefs: []
  type: TYPE_NORMAL
- en: '`average`: Same as the `simple` strategy except words cannot end up with different
    tags. Scores are averaged across tokens and then the maximum label is applied.'
  prefs: []
  type: TYPE_NORMAL
- en: '`max`: Same as the `simple` strategy except words cannot end up with different
    tags. Word entity will be the token with the maximum score. |'
  prefs: []
  type: TYPE_NORMAL
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **entity_group** | The type for the entity being recognized (model specific).
    |'
  prefs: []
  type: TYPE_TB
- en: '| **score** | How likely the entity was recognized. |'
  prefs: []
  type: TYPE_TB
- en: '| **word** | The string that was captured |'
  prefs: []
  type: TYPE_TB
- en: '| **start** | The offset stringwise where the answer is located. Useful to
    disambiguate if `word` occurs multiple times. |'
  prefs: []
  type: TYPE_TB
- en: '| **end** | The offset stringwise where the answer is located. Useful to disambiguate
    if `word` occurs multiple times. |'
  prefs: []
  type: TYPE_TB
- en: Named Entity Recognition (NER) task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See [Token-classification task](#token-classification-task)
  prefs: []
  type: TYPE_NORMAL
- en: Translation task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task is well known to translate text from one language to another
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [Helsinki-NLP/opus-mt-ru-en](https://huggingface.co/Helsinki-NLP/opus-mt-ru-en).
    Helsinki-NLP uploaded many models with many language pairs. **Recommended model**:
    [t5-base](https://huggingface.co/t5-base).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) | a string to be translated in the original languages
    |'
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **translation_text** | The string after translation |'
  prefs: []
  type: TYPE_TB
- en: Zero-Shot Classification task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task is super useful to try out classification with zero code, you simply
    pass a sentence/paragraph and the possible labels for that sentence, and you get
    a result.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [facebook/bart-large-mnli](https://huggingface.co/facebook/bart-large-mnli).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) | a string or list of strings |'
  prefs: []
  type: TYPE_TB
- en: '| **parameters** (required) | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| candidate_labels (required) | a list of strings that are potential classes
    for `inputs`. (max 10 candidate_labels, for more, simply run multiple requests,
    results are going to be misleading if using too many candidate_labels anyway.
    If you want to keep the exact same, you can simply run `multi_label=True` and
    do the scaling on your end. ) |'
  prefs: []
  type: TYPE_TB
- en: '| multi_label | (Default: `false`) Boolean that is set to True if classes can
    overlap |'
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: 'Response:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **sequence** | The string sent as an input |'
  prefs: []
  type: TYPE_TB
- en: '| **labels** | The list of strings for labels that you sent (in order) |'
  prefs: []
  type: TYPE_TB
- en: '| **scores** | a list of floats that correspond the the probability of label,
    in the same order as `labels`. |'
  prefs: []
  type: TYPE_TB
- en: Conversational task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task corresponds to any chatbot like structure. Models tend to have shorter
    max_length, so please check with caution when using a given model if you need
    long range dependency or not.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [microsoft/DialoGPT-large](https://huggingface.co/microsoft/DialoGPT-large).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) |  |'
  prefs: []
  type: TYPE_TB
- en: '| text (required) | The last input from the user in the conversation. |'
  prefs: []
  type: TYPE_TB
- en: '| generated_responses | A list of strings corresponding to the earlier replies
    from the model. |'
  prefs: []
  type: TYPE_TB
- en: '| past_user_inputs | A list of strings corresponding to the earlier replies
    from the user. Should be of the same length of `generated_responses`. |'
  prefs: []
  type: TYPE_TB
- en: '| **parameters** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| min_length | (Default: `None`). Integer to define the minimum length **in
    tokens** of the output summary. |'
  prefs: []
  type: TYPE_TB
- en: '| max_length | (Default: `None`). Integer to define the maximum length **in
    tokens** of the output summary. |'
  prefs: []
  type: TYPE_TB
- en: '| top_k | (Default: `None`). Integer to define the top tokens considered within
    the `sample` operation to create new text. |'
  prefs: []
  type: TYPE_TB
- en: '| top_p | (Default: `None`). Float to define the tokens that are within the
    `sample` operation of text generation. Add tokens in the sample for more probable
    to least probable until the sum of the probabilities is greater than `top_p`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| temperature | (Default: `1.0`). Float (0.0-100.0). The temperature of the
    sampling operation. 1 means regular sampling, `0` means always take the highest
    score, `100.0` is getting closer to uniform probability. |'
  prefs: []
  type: TYPE_TB
- en: '| repetition_penalty | (Default: `None`). Float (0.0-100.0). The more a token
    is used within generation the more it is penalized to not be picked in successive
    generation passes. |'
  prefs: []
  type: TYPE_TB
- en: '| max_time | (Default: `None`). Float (0-120.0). The amount of time in seconds
    that the query should take maximum. Network can cause some overhead so it will
    be a soft limit. |'
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **generated_text** | The answer of the bot |'
  prefs: []
  type: TYPE_TB
- en: '| **conversation** | A facility dictionnary to send back for the next input
    (with the new user input addition). |'
  prefs: []
  type: TYPE_TB
- en: '| past_user_inputs | List of strings. The last inputs from the user in the
    conversation, *after the model has run.* |'
  prefs: []
  type: TYPE_TB
- en: '| generated_responses | List of strings. The last outputs from the model in
    the conversation, *after the model has run.* |'
  prefs: []
  type: TYPE_TB
- en: Feature Extraction task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some text and outputs raw float values, that are usually consumed
    as part of a semantic database/semantic search.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [Sentence-transformers](https://huggingface.co/sentence-transformers/paraphrase-xlm-r-multilingual-v1).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)
    [Sentence-transformers](https://github.com/UKPLab/sentence-transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required): | a string or a list of strings to get the features
    from. |'
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **A list of float (or list of list of floats)** | The numbers that are the
    representation features of the input. |'
  prefs: []
  type: TYPE_TB
- en: Returned values are a list of floats, or a list of list of floats (depending
    on if you sent a string or a list of string, and if the automatic reduction, usually
    mean_pooling for instance was applied for you or not. This should be explained
    on the model's README.
  prefs: []
  type: TYPE_NORMAL
- en: Audio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Automatic Speech Recognition task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some audio input and outputs the said words within the audio
    files.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [Check your langage](https://huggingface.co/models?pipeline_tag=automatic-speech-recognition).'
  prefs: []
  type: TYPE_NORMAL
- en: '**English**: [facebook/wav2vec2-large-960h-lv60-self](https://huggingface.co/facebook/wav2vec2-large-960h-lv60-self).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)
    [ESPnet](https://github.com/espnet/espnet) and [SpeechBrain](https://github.com/speechbrain/speechbrain)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a binary payload that simply contains
    your audio file. We try to support most formats (Flac, Wav, Mp3, Ogg etc...).
    And we automatically rescale the sampling rate to the appropriate rate for the
    given model (usually 16KHz).
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **no parameter** (required) | a binary representation of the audio file.
    No other parameters are currently allowed. |'
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  prefs: []
  type: TYPE_NORMAL
- en: 'Response:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **text** | The string that was recognized within the audio file. |'
  prefs: []
  type: TYPE_TB
- en: Audio Classification task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some audio input and outputs the likelihood of classes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [superb/hubert-large-superb-er](https://huggingface.co/superb/hubert-large-superb-er).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)
    [SpeechBrain](https://github.com/speechbrain/speechbrain)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a binary payload that simply contains
    your audio file. We try to support most formats (Flac, Wav, Mp3, Ogg etc...).
    And we automatically rescale the sampling rate to the appropriate rate for the
    given model (usually 16KHz).
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **no parameter** (required) | a binary representation of the audio file.
    No other parameters are currently allowed. |'
  prefs: []
  type: TYPE_TB
- en: Return value is a dict
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **label** | The label for the class (model specific) |'
  prefs: []
  type: TYPE_TB
- en: '| **score** | A float that represents how likely it is that the audio file
    belongs to this class. |'
  prefs: []
  type: TYPE_TB
- en: Computer Vision
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image Classification task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some image input and outputs the likelihood of classes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [google/vit-base-patch16-224](https://huggingface.co/google/vit-base-patch16-224).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a binary payload that simply contains
    your image file. We support all image formats [Pillow supports](https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html).
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **no parameter** (required) | a binary representation of the image file.
    No other parameters are currently allowed. |'
  prefs: []
  type: TYPE_TB
- en: Return value is a dict
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **label** | The label for the class (model specific) |'
  prefs: []
  type: TYPE_TB
- en: '| **score** | A float that represents how likely it is that the image file
    belongs to this class. |'
  prefs: []
  type: TYPE_TB
- en: Object Detection task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some image input and outputs the likelihood of classes & bounding
    boxes of detected objects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [facebook/detr-resnet-50](https://huggingface.co/facebook/detr-resnet-50).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a binary payload that simply contains
    your image file. We support all image formats [Pillow supports](https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html).
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **no parameter** (required) | a binary representation of the image file.
    No other parameters are currently allowed. |'
  prefs: []
  type: TYPE_TB
- en: Return value is a dict
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **label** | The label for the class (model specific) of a detected object.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **score** | A float that represents how likely it is that the detected object
    belongs to the given class. |'
  prefs: []
  type: TYPE_TB
- en: '| **box** | A dict (with keys [xmin,ymin,xmax,ymax]) representing the bounding
    box of a detected object. |'
  prefs: []
  type: TYPE_TB
- en: Image Segmentation task
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some image input and outputs the likelihood of classes & bounding
    boxes of detected objects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [facebook/detr-resnet-50-panoptic](https://huggingface.co/facebook/detr-resnet-50-panoptic).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: When sending your request, you should send a binary payload that simply contains
    your image file. We support all image formats [Pillow supports](https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html).
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **no parameter** (required) | a binary representation of the image file.
    No other parameters are currently allowed. |'
  prefs: []
  type: TYPE_TB
- en: Return value is a dict
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '| Returned values |  |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| **label** | The label for the class (model specific) of a segment. |'
  prefs: []
  type: TYPE_TB
- en: '| **score** | A float that represents how likely it is that the segment belongs
    to the given class. |'
  prefs: []
  type: TYPE_TB
- en: '| **mask** | A str (base64 str of a single channel black-and-white img) representing
    the mask of a segment. |'
  prefs: []
  type: TYPE_TB
