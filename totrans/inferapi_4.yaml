- en: Detailed parameters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/api-inference/detailed_parameters](https://huggingface.co/docs/api-inference/detailed_parameters)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Which task is used by this model ?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In general the ü§ó Hosted API Inference accepts a simple string as an input. However,
    more advanced usage depends on the ‚Äútask‚Äù that the model solves.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'The ‚Äútask‚Äù of a model is defined here on it‚Äôs model page:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea0de97591cf0b5303fe051e1664d6bc.png) ![](../Images/192c21317e5fcdfd06ff0e3e37893ad3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
- en: Natural Language Processing
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fill Mask task
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tries to fill in a hole with a missing word (token to be precise). That‚Äôs the
    base task for BERT models.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [bert-base-uncased](https://huggingface.co/bert-base-uncased)
    (it‚Äôs a simple model, but fun to play with).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required): | a string to be filled from, must contain the [MASK]
    token (check model card for exact name of the mask) |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| Returned values |  |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| **sequence** | The actual sequence of tokens that ran against the model (may
    contain special tokens) |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| **score** | The probability for this token. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: '| **token** | The id of the token |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| **token_str** | The string representation of the token |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: Summarization task
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This task is well known to summarize longer text into shorter text. Be careful,
    some models have a maximum length of input. That means that the summary cannot
    handle full books for instance. Be careful when choosing your model. If you want
    to discuss your summarization needs, please get in touch with us: [api-enterprise@huggingface.co](mailto:api-enterprise@huggingface.co)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [facebook/bart-large-cnn](https://huggingface.co/facebook/bart-large-cnn).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) | a string to be summarized |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| **parameters** | a dict containing the following keys: |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| min_length | (Default: `None`). Integer to define the minimum length **in
    tokens** of the output summary. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| max_length | (Default: `None`). Integer to define the maximum length **in
    tokens** of the output summary. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| top_k | (Default: `None`). Integer to define the top tokens considered within
    the `sample` operation to create new text. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: '| top_p | (Default: `None`). Float to define the tokens that are within the
    `sample` operation of text generation. Add tokens in the sample for more probable
    to least probable until the sum of the probabilities is greater than `top_p`.
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| temperature | (Default: `1.0`). Float (0.0-100.0). The temperature of the
    sampling operation. 1 means regular sampling, `0` means always take the highest
    score, `100.0` is getting closer to uniform probability. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| repetition_penalty | (Default: `None`). Float (0.0-100.0). The more a token
    is used within generation the more it is penalized to not be picked in successive
    generation passes. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| max_time | (Default: `None`). Float (0-120.0). The amount of time in seconds
    that the query should take maximum. Network can cause some overhead so it will
    be a soft limit. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '| Returned values |  |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| **summary_text** | The string after summarization |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: Question Answering task
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Want to have a nice know-it-all bot that can answer any question?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [deepset/roberta-base-squad2](https://huggingface.co/deepset/roberta-base-squad2).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§óTransformers](https://github.com/huggingface/transformers)
    and [AllenNLP](https://github.com/allenai/allennlp)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Return value is a dict.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| Returned values |  |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
- en: '| **answer** | A string that‚Äôs the answer within the text. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: '| **score** | A float that represents how likely that the answer is correct
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| **start** | The index (string wise) of the start of the answer within `context`.
    |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| **stop** | The index (string wise) of the stop of the answer within `context`.
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: Table Question Answering task
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don‚Äôt know SQL? Don‚Äôt want to dive into a large spreadsheet? Ask questions in
    plain english!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [google/tapas-base-finetuned-wtq](https://huggingface.co/google/tapas-base-finetuned-wtq).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) |  |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
- en: '| query (required) | The query in plain text that you want to ask the table
    |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
- en: '| table (required) | A table of data represented as a dict of list where entries
    are headers and the lists are all the values, all lists must have the same size.
    |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| Returned values |  |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
- en: '| **answer** | The plaintext answer |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
- en: '| **coordinates** | a list of coordinates of the cells referenced in the answer
    |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
- en: '| **cells** | a list of coordinates of the cells contents |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
- en: '| **aggregator** | The aggregator used to get the answer |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
- en: Sentence Similarity task
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Calculate the semantic similarity between one text and a list of other sentences
    by comparing their embeddings.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [sentence-transformers/all-MiniLM-L6-v2](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2).'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [Sentence Transformers](https://www.sbert.net/index.html)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) |  |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
- en: '| source_sentence (required) | The string that you wish to compare the other
    strings with. This can be a phrase, sentence, or longer passage, depending on
    the model being used. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
- en: '| sentences (required) | A list of strings which will be compared against the
    source_sentence. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
- en: The return value is a list of similarity scores, given as floats.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| Returned values |  |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
- en: '| **Scores** | The associated similarity score for each of the given strings
    |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
- en: Text Classification task
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Usually used for sentiment-analysis this will output the likelihood of classes
    of an input.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) | a string to be classified |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '| Returned values |  |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
- en: '| **label** | The label for the class (model specific) |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| **score** | A floats that represents how likely is that the text belongs
    the this class. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: Text Generation task
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use to continue text from a prompt. This is a very generic task.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [gpt2](https://huggingface.co/gpt2) (it‚Äôs a simple model,
    but fun to play with).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required): | a string to be generated from |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
- en: '| **parameters** | dict containing the following keys: |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
- en: '| top_k | (Default: `None`). Integer to define the top tokens considered within
    the `sample` operation to create new text. |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| top_k | (ÈªòËÆ§Ôºö`None`)„ÄÇÊï¥Êï∞ÔºåÁî®‰∫éÂÆö‰πâÂú®`sample`Êìç‰Ωú‰∏≠ËÄÉËôëÁöÑÂâçÂá†‰∏™Ê†áËÆ∞Ôºå‰ª•ÁîüÊàêÊñ∞ÊñáÊú¨„ÄÇ |'
- en: '| top_p | (Default: `None`). Float to define the tokens that are within the
    `sample` operation of text generation. Add tokens in the sample for more probable
    to least probable until the sum of the probabilities is greater than `top_p`.
    |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| top_p | (ÈªòËÆ§Ôºö`None`)„ÄÇÊµÆÁÇπÊï∞ÔºåÁî®‰∫éÂÆö‰πâÂú®ÊñáÊú¨ÁîüÊàêÁöÑ`sample`Êìç‰Ωú‰∏≠ÁöÑÊ†áËÆ∞„ÄÇÂ∞ÜÊ†áËÆ∞Ê∑ªÂä†Âà∞Ê†∑Êú¨‰∏≠Ôºå‰ª•‰ΩøÊ¶ÇÁéáÊúÄÂ§ßÁöÑÊ†áËÆ∞ÊúÄ‰∏çÂèØËÉΩÔºåÁõ¥Âà∞Ê¶ÇÁéá‰πãÂíåÂ§ß‰∫é`top_p`„ÄÇ'
- en: '| temperature | (Default: `1.0`). Float (0.0-100.0). The temperature of the
    sampling operation. 1 means regular sampling, `0` means always take the highest
    score, `100.0` is getting closer to uniform probability. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| temperature | (ÈªòËÆ§Ôºö`1.0`)„ÄÇÊµÆÁÇπÊï∞Ôºà0.0-100.0Ôºâ„ÄÇÈááÊ†∑Êìç‰ΩúÁöÑÊ∏©Â∫¶„ÄÇ1Ë°®Á§∫Â∏∏ËßÑÈááÊ†∑Ôºå`0`Ë°®Á§∫ÂßãÁªàÈÄâÊã©ÊúÄÈ´òÂàÜÊï∞Ôºå`100.0`Êé•ËøëÂùáÂåÄÊ¶ÇÁéá„ÄÇ'
- en: '| repetition_penalty | (Default: `None`). Float (0.0-100.0). The more a token
    is used within generation the more it is penalized to not be picked in successive
    generation passes. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| repetition_penalty | (ÈªòËÆ§Ôºö`None`)„ÄÇÊµÆÁÇπÊï∞Ôºà0.0-100.0Ôºâ„ÄÇÂú®ÁîüÊàê‰∏≠‰ΩøÁî®‰∏Ä‰∏™Ê†áËÆ∞ÁöÑÊ¨°Êï∞Ë∂äÂ§öÔºåÂÆÉÂ∞±Ë∂äÂèóÂà∞ÊÉ©ÁΩöÔºå‰ª•‰æøÂú®ËøûÁª≠ÁöÑÁîüÊàêËøáÁ®ã‰∏≠‰∏çË¢´ÈÄâÊã©„ÄÇ'
- en: '| max_new_tokens | (Default: `None`). Int (0-250). The amount of new tokens
    to be generated, this does **not** include the input length it is a estimate of
    the size of generated text you want. Each new tokens slows down the request, so
    look for balance between response times and length of text generated. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| max_new_tokens | (ÈªòËÆ§Ôºö`None`)„ÄÇÊï¥Êï∞Ôºà0-250Ôºâ„ÄÇË¶ÅÁîüÊàêÁöÑÊñ∞Ê†áËÆ∞ÁöÑÊï∞ÈáèÔºåËøô**‰∏ç**ÂåÖÊã¨ËæìÂÖ•ÈïøÂ∫¶ÔºåÂÆÉÊòØÊÇ®ÊÉ≥Ë¶ÅÁîüÊàêÁöÑÊñáÊú¨Â§ßÂ∞èÁöÑ‰º∞ËÆ°„ÄÇÊØè‰∏™Êñ∞Ê†áËÆ∞ÈÉΩ‰ºöÂáèÊÖ¢ËØ∑Ê±ÇÈÄüÂ∫¶ÔºåÂõ†Ê≠§ËØ∑Âú®ÂìçÂ∫îÊó∂Èó¥ÂíåÁîüÊàêÊñáÊú¨ÈïøÂ∫¶‰πãÈó¥ÂØªÊâæÂπ≥Ë°°„ÄÇ'
- en: '| max_time | (Default: `None`). Float (0-120.0). The amount of time in seconds
    that the query should take maximum. Network can cause some overhead so it will
    be a soft limit. Use that in combination with `max_new_tokens` for best results.
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| max_time | (ÈªòËÆ§Ôºö`None`)„ÄÇÊµÆÁÇπÊï∞Ôºà0-120.0Ôºâ„ÄÇÊü•ËØ¢Â∫îËØ•ÊúÄÂ§öËä±Ë¥πÁöÑÊó∂Èó¥ÈáèÔºà‰ª•Áßí‰∏∫Âçï‰ΩçÔºâ„ÄÇÁΩëÁªúÂèØËÉΩ‰ºöÂØºËá¥‰∏Ä‰∫õÂºÄÈîÄÔºåÂõ†Ê≠§ËøôÂ∞ÜÊòØ‰∏Ä‰∏™ËΩØÈôêÂà∂„ÄÇ‰∏é`max_new_tokens`ÁªìÂêà‰ΩøÁî®‰ª•Ëé∑ÂæóÊúÄ‰Ω≥ÁªìÊûú„ÄÇ'
- en: '| return_full_text | (Default: `True`). Bool. If set to False, the return results
    will **not** contain the original query making it easier for prompting. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| return_full_text | (ÈªòËÆ§Ôºö`True`)„ÄÇÂ∏ÉÂ∞îÂÄº„ÄÇÂ¶ÇÊûúËÆæÁΩÆ‰∏∫FalseÔºåÂàôËøîÂõûÁªìÊûúÂ∞Ü**‰∏ç**ÂåÖÂê´ÂéüÂßãÊü•ËØ¢Ôºå‰ΩøÊèêÁ§∫Êõ¥Âä†ÁÆÄÂçï„ÄÇ'
- en: '| num_return_sequences | (Default: `1`). Integer. The number of proposition
    you want to be returned. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| num_return_sequences | (ÈªòËÆ§Ôºö`1`)„ÄÇÊï¥Êï∞„ÄÇË¶ÅËøîÂõûÁöÑÂª∫ËÆÆÊï∞Èáè„ÄÇ'
- en: '| do_sample | (Optional: `True`). Bool. Whether or not to use sampling, use
    greedy decoding otherwise. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| do_sample | (ÂèØÈÄâÔºö`True`)„ÄÇÂ∏ÉÂ∞îÂÄº„ÄÇÊòØÂê¶‰ΩøÁî®ÈááÊ†∑ÔºåÂê¶Âàô‰ΩøÁî®Ë¥™Â©™Ëß£Á†Å„ÄÇ'
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| **options** | ÂåÖÂê´‰ª•‰∏ãÈîÆÁöÑÂ≠óÂÖ∏Ôºö |'
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| use_cache | (ÈªòËÆ§Ôºö`true`)„ÄÇÂ∏ÉÂ∞îÂÄº„ÄÇÊé®Êñ≠API‰∏äÊúâ‰∏Ä‰∏™ÁºìÂ≠òÂ±ÇÔºåÂèØ‰ª•Âä†Âø´Êàë‰ª¨Â∑≤ÁªèÁúãÂà∞ÁöÑËØ∑Ê±Ç„ÄÇÂ§ßÂ§öÊï∞Ê®°ÂûãÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®Ëøô‰∫õÁªìÊûúÔºåÂõ†‰∏∫Ê®°ÂûãÊòØÁ°ÆÂÆöÊÄßÁöÑÔºàÊÑèÂë≥ÁùÄÁªìÊûúÊó†ËÆ∫Â¶Ç‰ΩïÈÉΩÂ∞ÜÁõ∏ÂêåÔºâ„ÄÇ‰ΩÜÊòØÔºåÂ¶ÇÊûúÊÇ®‰ΩøÁî®ÁöÑÊòØÈùûÁ°ÆÂÆöÊÄßÊ®°ÂûãÔºåÂèØ‰ª•ËÆæÁΩÆÊ≠§ÂèÇÊï∞‰ª•Èò≤Ê≠¢‰ΩøÁî®ÁºìÂ≠òÊú∫Âà∂Ôºå‰ªéËÄåÂØºËá¥ÁúüÊ≠£ÁöÑÊñ∞Êü•ËØ¢„ÄÇ'
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| wait_for_model | (ÈªòËÆ§Ôºö`false`) Â∏ÉÂ∞îÂÄº„ÄÇÂ¶ÇÊûúÊ®°ÂûãÂ∞öÊú™ÂáÜÂ§áÂ•ΩÔºåÂàôÁ≠âÂæÖÂÆÉÔºåËÄå‰∏çÊòØÊî∂Âà∞503„ÄÇËøôÂ∞ÜÈôêÂà∂Ëé∑ÂèñÊé®Êñ≠ÊâÄÈúÄÁöÑËØ∑Ê±ÇÊï∞Èáè„ÄÇÂª∫ËÆÆ‰ªÖÂú®Êî∂Âà∞503ÈîôËØØÂêéÂ∞ÜÊ≠§Ê†áÂøóËÆæÁΩÆ‰∏∫trueÔºåÂõ†‰∏∫ÂÆÉÂ∞ÜÈôêÂà∂Â∫îÁî®Á®ãÂ∫è‰∏≠ÁöÑÊåÇËµ∑Âà∞Â∑≤Áü•‰ΩçÁΩÆ„ÄÇ'
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ËøîÂõûÂÄºÂèØ‰ª•ÊòØÂ≠óÂÖ∏Ôºå‰πüÂèØ‰ª•ÊòØÂ≠óÂÖ∏ÂàóË°®ÔºàÂ¶ÇÊûúÊÇ®ÂèëÈÄÅ‰∫ÜËæìÂÖ•ÂàóË°®Ôºâ
- en: PythonJavaScriptcURL
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: PythonJavaScriptcURL
- en: '[PRE12]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '| Returned values |  |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| ËøîÂõûÂÄº |  |'
- en: '| :-- | :-- |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| **generated_text** | The continuated string |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| **generated_text** | ËøûÁª≠ÁöÑÂ≠óÁ¨¶‰∏≤ |'
- en: Text2Text Generation task
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ÊñáÊú¨Âà∞ÊñáÊú¨ÁîüÊàê‰ªªÂä°
- en: Essentially [Text-generation task](#text-generation-task). But uses Encoder-Decoder
    architecture, so might change in the future for more options.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Âü∫Êú¨‰∏äÊòØ[ÊñáÊú¨ÁîüÊàê‰ªªÂä°](#text-generation-task)„ÄÇ‰ΩÜ‰ΩøÁî®ÁºñÁ†ÅÂô®-Ëß£Á†ÅÂô®Êû∂ÊûÑÔºåÂõ†Ê≠§Â∞ÜÊù•ÂèØËÉΩ‰ºöÊúâÊõ¥Â§öÈÄâÈ°π„ÄÇ
- en: Token Classification task
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ê†áËÆ∞ÂàÜÁ±ª‰ªªÂä°
- en: Usually used for sentence parsing, either grammatical, or Named Entity Recognition
    (NER) to understand keywords contained within text.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ÈÄöÂ∏∏Áî®‰∫éÂè•Â≠êËß£ÊûêÔºåÊó†ËÆ∫ÊòØËØ≠Ê≥ïËøòÊòØÂëΩÂêçÂÆû‰ΩìËØÜÂà´ÔºàNERÔºâÔºå‰ª•‰∫ÜËß£ÊñáÊú¨‰∏≠ÂåÖÂê´ÁöÑÂÖ≥ÈîÆÂ≠ó„ÄÇ
- en: '**Recommended model**: [dbmdz/bert-large-cased-finetuned-conll03-english](https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**Êé®ËçêÊ®°Âûã**Ôºö[dbmdz/bert-large-cased-finetuned-conll03-english](https://huggingface.co/dbmdz/bert-large-cased-finetuned-conll03-english)'
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers),
    [Flair](https://github.com/flairNLP/flair)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ÂèØÁî®‰∫éÔºö[ü§ó Transformers](https://github.com/huggingface/transformers), [Flair](https://github.com/flairNLP/flair)
- en: 'Example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Á§∫‰æãÔºö
- en: PythonJavaScriptcURL
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: PythonJavaScriptcURL
- en: '[PRE13]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ÂèëÈÄÅËØ∑Ê±ÇÊó∂ÔºåÂ∫îÂèëÈÄÅJSONÁºñÁ†ÅÁöÑÊúâÊïàËΩΩËç∑„ÄÇ‰ª•‰∏ãÊòØÊâÄÊúâÈÄâÈ°π
- en: '| All parameters |  |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| ÊâÄÊúâÂèÇÊï∞ |  |'
- en: '| :-- | :-- |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| **inputs** (required) | a string to be classified |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| **inputs** (required) | ÈúÄË¶ÅÂàÜÁ±ªÁöÑÂ≠óÁ¨¶‰∏≤ |'
- en: '| **parameters** | a dict containing the following key: |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| **parameters** | ÂåÖÂê´‰ª•‰∏ãÈîÆÁöÑÂ≠óÂÖ∏Ôºö |'
- en: '| aggregation_strategy | (Default: `simple`). There are several aggregation
    strategies: `none`: Every token gets classified without further aggregation.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '| aggregation_strategy | (ÈªòËÆ§Ôºö`simple`)„ÄÇÊúâÂá†ÁßçËÅöÂêàÁ≠ñÁï•Ôºö`none`ÔºöÊØè‰∏™Ê†áËÆ∞ÈÉΩ‰ºöË¢´ÂàÜÁ±ªÔºåÊó†ÈúÄËøõ‰∏ÄÊ≠•ËÅöÂêà„ÄÇ'
- en: '`simple`: Entities are grouped according to the default schema (B-, I- tags
    get merged when the tag is similar).'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`simple`: ÂÆû‰ΩìÊ†πÊçÆÈªòËÆ§Ê®°ÂºèËøõË°åÂàÜÁªÑÔºàÂΩìÊ†áËÆ∞Áõ∏‰ººÊó∂ÔºåB-„ÄÅI-Ê†áËÆ∞‰ºöÂêàÂπ∂Ôºâ„ÄÇ'
- en: '`first`: Same as the `simple` strategy except words cannot end up with different
    tags. Words will use the tag of the first token when there is ambiguity.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`first`: ‰∏é`simple`Á≠ñÁï•Áõ∏ÂêåÔºå‰ΩÜÂçïËØç‰∏çËÉΩ‰ª•‰∏çÂêåÁöÑÊ†áËÆ∞ÁªìÊùü„ÄÇÂΩìÂ≠òÂú®Ê≠ß‰πâÊó∂ÔºåÂçïËØçÂ∞Ü‰ΩøÁî®Á¨¨‰∏Ä‰∏™Ê†áËÆ∞ÁöÑÊ†áËÆ∞„ÄÇ'
- en: '`average`: Same as the `simple` strategy except words cannot end up with different
    tags. Scores are averaged across tokens and then the maximum label is applied.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '`max`: Same as the `simple` strategy except words cannot end up with different
    tags. Word entity will be the token with the maximum score. |'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '| Returned values |  |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
- en: '| **entity_group** | The type for the entity being recognized (model specific).
    |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
- en: '| **score** | How likely the entity was recognized. |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
- en: '| **word** | The string that was captured |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
- en: '| **start** | The offset stringwise where the answer is located. Useful to
    disambiguate if `word` occurs multiple times. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
- en: '| **end** | The offset stringwise where the answer is located. Useful to disambiguate
    if `word` occurs multiple times. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
- en: Named Entity Recognition (NER) task
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: See [Token-classification task](#token-classification-task)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Translation task
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task is well known to translate text from one language to another
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [Helsinki-NLP/opus-mt-ru-en](https://huggingface.co/Helsinki-NLP/opus-mt-ru-en).
    Helsinki-NLP uploaded many models with many language pairs. **Recommended model**:
    [t5-base](https://huggingface.co/t5-base).'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) | a string to be translated in the original languages
    |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '| Returned values |  |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
- en: '| **translation_text** | The string after translation |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
- en: Zero-Shot Classification task
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task is super useful to try out classification with zero code, you simply
    pass a sentence/paragraph and the possible labels for that sentence, and you get
    a result.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [facebook/bart-large-mnli](https://huggingface.co/facebook/bart-large-mnli).'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) | a string or list of strings |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
- en: '| **parameters** (required) | a dict containing the following keys: |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
- en: '| candidate_labels (required) | a list of strings that are potential classes
    for `inputs`. (max 10 candidate_labels, for more, simply run multiple requests,
    results are going to be misleading if using too many candidate_labels anyway.
    If you want to keep the exact same, you can simply run `multi_label=True` and
    do the scaling on your end. ) |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
- en: '| multi_label | (Default: `false`) Boolean that is set to True if classes can
    overlap |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'Response:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '| Returned values |  |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
- en: '| **sequence** | The string sent as an input |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
- en: '| **labels** | The list of strings for labels that you sent (in order) |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
- en: '| **scores** | a list of floats that correspond the the probability of label,
    in the same order as `labels`. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
- en: Conversational task
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task corresponds to any chatbot like structure. Models tend to have shorter
    max_length, so please check with caution when using a given model if you need
    long range dependency or not.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [microsoft/DialoGPT-large](https://huggingface.co/microsoft/DialoGPT-large).'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When sending your request, you should send a JSON encoded payload. Here are
    all the options
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required) |  |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
- en: '| text (required) | The last input from the user in the conversation. |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
- en: '| generated_responses | A list of strings corresponding to the earlier replies
    from the model. |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
- en: '| past_user_inputs | A list of strings corresponding to the earlier replies
    from the user. Should be of the same length of `generated_responses`. |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
- en: '| **parameters** | a dict containing the following keys: |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
- en: '| min_length | (Default: `None`). Integer to define the minimum length **in
    tokens** of the output summary. |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
- en: '| max_length | (Default: `None`). Integer to define the maximum length **in
    tokens** of the output summary. |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
- en: '| top_k | (Default: `None`). Integer to define the top tokens considered within
    the `sample` operation to create new text. |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
- en: '| top_p | (Default: `None`). Float to define the tokens that are within the
    `sample` operation of text generation. Add tokens in the sample for more probable
    to least probable until the sum of the probabilities is greater than `top_p`.
    |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
- en: '| temperature | (Default: `1.0`). Float (0.0-100.0). The temperature of the
    sampling operation. 1 means regular sampling, `0` means always take the highest
    score, `100.0` is getting closer to uniform probability. |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
- en: '| repetition_penalty | (Default: `None`). Float (0.0-100.0). The more a token
    is used within generation the more it is penalized to not be picked in successive
    generation passes. |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
- en: '| max_time | (Default: `None`). Float (0-120.0). The amount of time in seconds
    that the query should take maximum. Network can cause some overhead so it will
    be a soft limit. |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '| Returned values |  |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-277
  prefs: []
  type: TYPE_TB
- en: '| **generated_text** | The answer of the bot |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
- en: '| **conversation** | A facility dictionnary to send back for the next input
    (with the new user input addition). |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
- en: '| past_user_inputs | List of strings. The last inputs from the user in the
    conversation, *after the model has run.* |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
- en: '| generated_responses | List of strings. The last outputs from the model in
    the conversation, *after the model has run.* |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
- en: Feature Extraction task
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some text and outputs raw float values, that are usually consumed
    as part of a semantic database/semantic search.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [Sentence-transformers](https://huggingface.co/sentence-transformers/paraphrase-xlm-r-multilingual-v1).'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)
    [Sentence-transformers](https://github.com/UKPLab/sentence-transformers)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
- en: '| **inputs** (required): | a string or a list of strings to get the features
    from. |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
- en: '| **options** | a dict containing the following keys: |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
- en: '| use_cache | (Default: `true`). Boolean. There is a cache layer on the inference
    API to speedup requests we have already seen. Most models can use those results
    as is as models are deterministic (meaning the results will be the same anyway).
    However if you use a non deterministic model, you can set this parameter to prevent
    the caching mechanism from being used resulting in a real new query. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
- en: '| wait_for_model | (Default: `false`) Boolean. If the model is not ready, wait
    for it instead of receiving 503\. It limits the number of requests required to
    get your inference done. It is advised to only set this flag to true after receiving
    a 503 error as it will limit hanging in your application to known places. |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '| Returned values |  |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
- en: '| **A list of float (or list of list of floats)** | The numbers that are the
    representation features of the input. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
- en: Returned values are a list of floats, or a list of list of floats (depending
    on if you sent a string or a list of string, and if the automatic reduction, usually
    mean_pooling for instance was applied for you or not. This should be explained
    on the model's README.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Audio
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Automatic Speech Recognition task
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some audio input and outputs the said words within the audio
    files.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [Check your langage](https://huggingface.co/models?pipeline_tag=automatic-speech-recognition).'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '**English**: [facebook/wav2vec2-large-960h-lv60-self](https://huggingface.co/facebook/wav2vec2-large-960h-lv60-self).'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)
    [ESPnet](https://github.com/espnet/espnet) and [SpeechBrain](https://github.com/speechbrain/speechbrain)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When sending your request, you should send a binary payload that simply contains
    your audio file. We try to support most formats (Flac, Wav, Mp3, Ogg etc...).
    And we automatically rescale the sampling rate to the appropriate rate for the
    given model (usually 16KHz).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
- en: '| **no parameter** (required) | a binary representation of the audio file.
    No other parameters are currently allowed. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
- en: Return value is either a dict or a list of dicts if you sent a list of inputs
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'Response:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '| Returned values |  |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
- en: '| **text** | The string that was recognized within the audio file. |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
- en: Audio Classification task
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some audio input and outputs the likelihood of classes.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [superb/hubert-large-superb-er](https://huggingface.co/superb/hubert-large-superb-er).'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)
    [SpeechBrain](https://github.com/speechbrain/speechbrain)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When sending your request, you should send a binary payload that simply contains
    your audio file. We try to support most formats (Flac, Wav, Mp3, Ogg etc...).
    And we automatically rescale the sampling rate to the appropriate rate for the
    given model (usually 16KHz).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
- en: '| **no parameter** (required) | a binary representation of the audio file.
    No other parameters are currently allowed. |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
- en: Return value is a dict
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '| Returned values |  |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
- en: '| **label** | The label for the class (model specific) |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
- en: '| **score** | A float that represents how likely it is that the audio file
    belongs to this class. |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
- en: Computer Vision
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image Classification task
  id: totrans-337
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some image input and outputs the likelihood of classes.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [google/vit-base-patch16-224](https://huggingface.co/google/vit-base-patch16-224).'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When sending your request, you should send a binary payload that simply contains
    your image file. We support all image formats [Pillow supports](https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html).
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
- en: '| **no parameter** (required) | a binary representation of the image file.
    No other parameters are currently allowed. |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
- en: Return value is a dict
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '| Returned values |  |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
- en: '| **label** | The label for the class (model specific) |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
- en: '| **score** | A float that represents how likely it is that the image file
    belongs to this class. |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
- en: Object Detection task
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some image input and outputs the likelihood of classes & bounding
    boxes of detected objects.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [facebook/detr-resnet-50](https://huggingface.co/facebook/detr-resnet-50).'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When sending your request, you should send a binary payload that simply contains
    your image file. We support all image formats [Pillow supports](https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html).
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
- en: '| **no parameter** (required) | a binary representation of the image file.
    No other parameters are currently allowed. |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
- en: Return value is a dict
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '| Returned values |  |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
- en: '| **label** | The label for the class (model specific) of a detected object.
    |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
- en: '| **score** | A float that represents how likely it is that the detected object
    belongs to the given class. |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
- en: '| **box** | A dict (with keys [xmin,ymin,xmax,ymax]) representing the bounding
    box of a detected object. |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
- en: Image Segmentation task
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This task reads some image input and outputs the likelihood of classes & bounding
    boxes of detected objects.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: '**Recommended model**: [facebook/detr-resnet-50-panoptic](https://huggingface.co/facebook/detr-resnet-50-panoptic).'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: 'Available with: [ü§ó Transformers](https://github.com/huggingface/transformers)'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: 'Request:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: When sending your request, you should send a binary payload that simply contains
    your image file. We support all image formats [Pillow supports](https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '| All parameters |  |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
- en: '| **no parameter** (required) | a binary representation of the image file.
    No other parameters are currently allowed. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
- en: Return value is a dict
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: PythonJavaScriptcURL
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '| Returned values |  |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
- en: '| **label** | The label for the class (model specific) of a segment. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
- en: '| **score** | A float that represents how likely it is that the segment belongs
    to the given class. |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
- en: '| **mask** | A str (base64 str of a single channel black-and-white img) representing
    the mask of a segment. |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
