- en: DPMSolverMultistepScheduler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/diffusers/api/schedulers/multistep_dpm_solver](https://huggingface.co/docs/diffusers/api/schedulers/multistep_dpm_solver)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/102.0934772f.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Tip.230e2334.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Docstring.93f6f462.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
  prefs: []
  type: TYPE_NORMAL
- en: '`DPMSolverMultistep` is a multistep scheduler from [DPM-Solver: A Fast ODE
    Solver for Diffusion Probabilistic Model Sampling in Around 10 Steps](https://huggingface.co/papers/2206.00927)
    and [DPM-Solver++: Fast Solver for Guided Sampling of Diffusion Probabilistic
    Models](https://huggingface.co/papers/2211.01095) by Cheng Lu, Yuhao Zhou, Fan
    Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu.'
  prefs: []
  type: TYPE_NORMAL
- en: DPMSolver (and the improved version DPMSolver++) is a fast dedicated high-order
    solver for diffusion ODEs with convergence order guarantee. Empirically, DPMSolver
    sampling with only 20 steps can generate high-quality samples, and it can generate
    quite good samples even in 10 steps.
  prefs: []
  type: TYPE_NORMAL
- en: Tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is recommended to set `solver_order` to 2 for guide sampling, and `solver_order=3`
    for unconditional sampling.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic thresholding from [Imagen](https://huggingface.co/papers/2205.11487)
    is supported, and for pixel-space diffusion models, you can set both `algorithm_type="dpmsolver++"`
    and `thresholding=True` to use the dynamic thresholding. This thresholding method
    is unsuitable for latent-space diffusion models such as Stable Diffusion.
  prefs: []
  type: TYPE_NORMAL
- en: The SDE variant of DPMSolver and DPM-Solver++ is also supported, but only for
    the first and second-order solvers. This is a fast SDE solver for the reverse
    diffusion SDE. It is recommended to use the second-order `sde-dpmsolver++`.
  prefs: []
  type: TYPE_NORMAL
- en: DPMSolverMultistepScheduler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.DPMSolverMultistepScheduler'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep.py#L74)'
  prefs: []
  type: TYPE_NORMAL
- en: '( num_train_timesteps: int = 1000 beta_start: float = 0.0001 beta_end: float
    = 0.02 beta_schedule: str = ''linear'' trained_betas: Union = None solver_order:
    int = 2 prediction_type: str = ''epsilon'' thresholding: bool = False dynamic_thresholding_ratio:
    float = 0.995 sample_max_value: float = 1.0 algorithm_type: str = ''dpmsolver++''
    solver_type: str = ''midpoint'' lower_order_final: bool = True euler_at_final:
    bool = False use_karras_sigmas: Optional = False use_lu_lambdas: Optional = False
    final_sigmas_type: Optional = ''zero'' lambda_min_clipped: float = -inf variance_type:
    Optional = None timestep_spacing: str = ''linspace'' steps_offset: int = 0 )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**num_train_timesteps** (`int`, defaults to 1000) — The number of diffusion
    steps to train the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beta_start** (`float`, defaults to 0.0001) — The starting `beta` value of
    inference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beta_end** (`float`, defaults to 0.02) — The final `beta` value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**beta_schedule** (`str`, defaults to `"linear"`) — The beta schedule, a mapping
    from a beta range to a sequence of betas for stepping the model. Choose from `linear`,
    `scaled_linear`, or `squaredcos_cap_v2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**trained_betas** (`np.ndarray`, *optional*) — Pass an array of betas directly
    to the constructor to bypass `beta_start` and `beta_end`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**solver_order** (`int`, defaults to 2) — The DPMSolver order which can be
    `1` or `2` or `3`. It is recommended to use `solver_order=2` for guided sampling,
    and `solver_order=3` for unconditional sampling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**prediction_type** (`str`, defaults to `epsilon`, *optional*) — Prediction
    type of the scheduler function; can be `epsilon` (predicts the noise of the diffusion
    process), `sample` (directly predicts the noisy sample`) or` v_prediction` (see
    section 2.4 of [Imagen Video](https://imagen.research.google/video/paper.pdf)
    paper).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**thresholding** (`bool`, defaults to `False`) — Whether to use the “dynamic
    thresholding” method. This is unsuitable for latent-space diffusion models such
    as Stable Diffusion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dynamic_thresholding_ratio** (`float`, defaults to 0.995) — The ratio for
    the dynamic thresholding method. Valid only when `thresholding=True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample_max_value** (`float`, defaults to 1.0) — The threshold value for dynamic
    thresholding. Valid only when `thresholding=True` and `algorithm_type="dpmsolver++"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**algorithm_type** (`str`, defaults to `dpmsolver++`) — Algorithm type for
    the solver; can be `dpmsolver`, `dpmsolver++`, `sde-dpmsolver` or `sde-dpmsolver++`.
    The `dpmsolver` type implements the algorithms in the [DPMSolver](https://huggingface.co/papers/2206.00927)
    paper, and the `dpmsolver++` type implements the algorithms in the [DPMSolver++](https://huggingface.co/papers/2211.01095)
    paper. It is recommended to use `dpmsolver++` or `sde-dpmsolver++` with `solver_order=2`
    for guided sampling like in Stable Diffusion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**solver_type** (`str`, defaults to `midpoint`) — Solver type for the second-order
    solver; can be `midpoint` or `heun`. The solver type slightly affects the sample
    quality, especially for a small number of steps. It is recommended to use `midpoint`
    solvers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lower_order_final** (`bool`, defaults to `True`) — Whether to use lower-order
    solvers in the final steps. Only valid for < 15 inference steps. This can stabilize
    the sampling of DPMSolver for steps < 15, especially for steps <= 10.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**euler_at_final** (`bool`, defaults to `False`) — Whether to use Euler’s method
    in the final step. It is a trade-off between numerical stability and detail richness.
    This can stabilize the sampling of the SDE variant of DPMSolver for small number
    of inference steps, but sometimes may result in blurring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**use_karras_sigmas** (`bool`, *optional*, defaults to `False`) — Whether to
    use Karras sigmas for step sizes in the noise schedule during the sampling process.
    If `True`, the sigmas are determined according to a sequence of noise levels {σi}.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**use_lu_lambdas** (`bool`, *optional*, defaults to `False`) — Whether to use
    the uniform-logSNR for step sizes proposed by Lu’s DPM-Solver in the noise schedule
    during the sampling process. If `True`, the sigmas and time steps are determined
    according to a sequence of `lambda(t)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**final_sigmas_type** (`str`, defaults to `"zero"`) — The final `sigma` value
    for the noise schedule during the sampling process. If `"sigma_min"`, the final
    sigma is the same as the last sigma in the training schedule. If `zero`, the final
    sigma is set to 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**lambda_min_clipped** (`float`, defaults to `-inf`) — Clipping threshold for
    the minimum value of `lambda(t)` for numerical stability. This is critical for
    the cosine (`squaredcos_cap_v2`) noise schedule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**variance_type** (`str`, *optional*) — Set to “learned” or “learned_range”
    for diffusion models that predict variance. If set, the model’s output contains
    the predicted Gaussian variance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestep_spacing** (`str`, defaults to `"linspace"`) — The way the timesteps
    should be scaled. Refer to Table 2 of the [Common Diffusion Noise Schedules and
    Sample Steps are Flawed](https://huggingface.co/papers/2305.08891) for more information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**steps_offset** (`int`, defaults to 0) — An offset added to the inference
    steps. You can use a combination of `offset=1` and `set_alpha_to_one=False` to
    make the last step use step 0 for the previous alpha product like in Stable Diffusion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DPMSolverMultistepScheduler` is a fast dedicated high-order solver for diffusion
    ODEs.'
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)
    and [ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin).
    Check the superclass documentation for the generic methods the library implements
    for all schedulers such as loading and saving.
  prefs: []
  type: TYPE_NORMAL
- en: '#### convert_model_output'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep.py#L419)'
  prefs: []
  type: TYPE_NORMAL
- en: '( model_output: FloatTensor *args sample: FloatTensor = None **kwargs ) → `torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**model_output** (`torch.FloatTensor`) — The direct output from the learned
    diffusion model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: The converted model output.
  prefs: []
  type: TYPE_NORMAL
- en: Convert the model output to the corresponding type the DPMSolver/DPMSolver++
    algorithm needs. DPM-Solver is designed to discretize an integral of the noise
    prediction model, and DPM-Solver++ is designed to discretize an integral of the
    data prediction model.
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm and model type are decoupled. You can use either DPMSolver or
    DPMSolver++ for both noise prediction and data prediction models.
  prefs: []
  type: TYPE_NORMAL
- en: '#### dpm_solver_first_order_update'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep.py#L518)'
  prefs: []
  type: TYPE_NORMAL
- en: '( model_output: FloatTensor *args sample: FloatTensor = None noise: Optional
    = None **kwargs ) → `torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**model_output** (`torch.FloatTensor`) — The direct output from the learned
    diffusion model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: The sample tensor at the previous timestep.
  prefs: []
  type: TYPE_NORMAL
- en: One step for the first-order DPMSolver (equivalent to DDIM).
  prefs: []
  type: TYPE_NORMAL
- en: '#### multistep_dpm_solver_second_order_update'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep.py#L587)'
  prefs: []
  type: TYPE_NORMAL
- en: '( model_output_list: List *args sample: FloatTensor = None noise: Optional
    = None **kwargs ) → `torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**model_output_list** (`List[torch.FloatTensor]`) — The direct outputs from
    learned diffusion model at current and latter timesteps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: The sample tensor at the previous timestep.
  prefs: []
  type: TYPE_NORMAL
- en: One step for the second-order multistep DPMSolver.
  prefs: []
  type: TYPE_NORMAL
- en: '#### multistep_dpm_solver_third_order_update'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep.py#L710)'
  prefs: []
  type: TYPE_NORMAL
- en: '( model_output_list: List *args sample: FloatTensor = None **kwargs ) → `torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**model_output_list** (`List[torch.FloatTensor]`) — The direct outputs from
    learned diffusion model at current and latter timesteps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — A current instance of a sample created by
    diffusion process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: The sample tensor at the previous timestep.
  prefs: []
  type: TYPE_NORMAL
- en: One step for the third-order multistep DPMSolver.
  prefs: []
  type: TYPE_NORMAL
- en: '#### scale_model_input'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep.py#L892)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample: FloatTensor *args **kwargs ) → `torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — The input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: A scaled input sample.
  prefs: []
  type: TYPE_NORMAL
- en: Ensures interchangeability with schedulers that need to scale the denoising
    model input depending on the current timestep.
  prefs: []
  type: TYPE_NORMAL
- en: '#### set_timesteps'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep.py#L239)'
  prefs: []
  type: TYPE_NORMAL
- en: '( num_inference_steps: int = None device: Union = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**num_inference_steps** (`int`) — The number of diffusion steps used when generating
    samples with a pre-trained model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**device** (`str` or `torch.device`, *optional*) — The device to which the
    timesteps should be moved to. If `None`, the timesteps are not moved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets the discrete timesteps used for the diffusion chain (to be run before inference).
  prefs: []
  type: TYPE_NORMAL
- en: '#### step'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_dpmsolver_multistep.py#L814)'
  prefs: []
  type: TYPE_NORMAL
- en: '( model_output: FloatTensor timestep: int sample: FloatTensor generator = None
    return_dict: bool = True ) → [SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**model_output** (`torch.FloatTensor`) — The direct output from learned diffusion
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestep** (`int`) — The current discrete timestep in the diffusion chain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**generator** (`torch.Generator`, *optional*) — A random number generator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`) — Whether or not to return a [SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    or `tuple`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If return_dict is `True`, [SchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/dpm_discrete_ancestral#diffusers.schedulers.scheduling_utils.SchedulerOutput)
    is returned, otherwise a tuple is returned where the first element is the sample
    tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Predict the sample from the previous timestep by reversing the SDE. This function
    propagates the sample with the multistep DPMSolver.
  prefs: []
  type: TYPE_NORMAL
- en: SchedulerOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.schedulers.scheduling_utils.SchedulerOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_utils.py#L50)'
  prefs: []
  type: TYPE_NORMAL
- en: '( prev_sample: FloatTensor )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**prev_sample** (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)` for images) — Computed sample `(x_{t-1})` of previous timestep. `prev_sample`
    should be used as next model input in the denoising loop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base class for the output of a scheduler’s `step` function.
  prefs: []
  type: TYPE_NORMAL
