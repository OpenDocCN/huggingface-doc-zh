- en: '@huggingface/inference'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/huggingface.js/inference/modules](https://huggingface.co/docs/huggingface.js/inference/modules)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[HfInference](classes/HfInference)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HfInferenceEndpoint](classes/HfInferenceEndpoint)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[InferenceOutputError](classes/InferenceOutputError)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[AudioClassificationOutputValue](interfaces/AudioClassificationOutputValue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AudioToAudioOutputValue](interfaces/AudioToAudioOutputValue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AutomaticSpeechRecognitionOutput](interfaces/AutomaticSpeechRecognitionOutput)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BaseArgs](interfaces/BaseArgs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ConversationalOutput](interfaces/ConversationalOutput)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DocumentQuestionAnsweringOutput](interfaces/DocumentQuestionAnsweringOutput)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ImageClassificationOutputValue](interfaces/ImageClassificationOutputValue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ImageSegmentationOutputValue](interfaces/ImageSegmentationOutputValue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ImageToTextOutput](interfaces/ImageToTextOutput)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ObjectDetectionOutputValue](interfaces/ObjectDetectionOutputValue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Options](interfaces/Options)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[QuestionAnsweringOutput](interfaces/QuestionAnsweringOutput)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SummarizationOutput](interfaces/SummarizationOutput)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TableQuestionAnsweringOutput](interfaces/TableQuestionAnsweringOutput)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TextGenerationOutput](interfaces/TextGenerationOutput)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TextGenerationStreamBestOfSequence](interfaces/TextGenerationStreamBestOfSequence)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TextGenerationStreamDetails](interfaces/TextGenerationStreamDetails)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TextGenerationStreamOutput](interfaces/TextGenerationStreamOutput)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TextGenerationStreamPrefillToken](interfaces/TextGenerationStreamPrefillToken)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TextGenerationStreamToken](interfaces/TextGenerationStreamToken)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TokenClassificationOutputValue](interfaces/TokenClassificationOutputValue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TranslationOutputValue](interfaces/TranslationOutputValue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[VisualQuestionAnsweringOutput](interfaces/VisualQuestionAnsweringOutput)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ZeroShotClassificationOutputValue](interfaces/ZeroShotClassificationOutputValue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ZeroShotImageClassificationOutputValue](interfaces/ZeroShotImageClassificationOutputValue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type Aliases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AudioClassificationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `AudioClassificationArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `data`:
    `Blob` | `ArrayBuffer` }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/audioClassification.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/audioClassification.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: AudioClassificationReturn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `AudioClassificationReturn`: [`AudioClassificationOutputValue`](interfaces/AudioClassificationOutputValue)[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/audioClassification.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/audioClassification.ts#L24)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: AudioToAudioArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `AudioToAudioArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `data`: `Blob`
    | `ArrayBuffer` }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/audioToAudio.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/audioToAudio.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: AudioToAudioReturn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `AudioToAudioReturn`: [`AudioToAudioOutputValue`](interfaces/AudioToAudioOutputValue)[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/audioToAudio.ts:29](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/audioToAudio.ts#L29)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: AutomaticSpeechRecognitionArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `AutomaticSpeechRecognitionArgs`: [`BaseArgs`](interfaces/BaseArgs) & {
    `data`: `Blob` | `ArrayBuffer` }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/automaticSpeechRecognition.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/automaticSpeechRecognition.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ConversationalArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ConversationalArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`: {
    `generated_responses?`: `string`[] ; `past_user_inputs?`: `string`[] ; `text`:
    `string` } ; `parameters?`: { `max_length?`: `number` ; `max_time?`: `number`
    ; `min_length?`: `number` ; `repetition_penalty?`: `number` ; `temperature?`:
    `number` ; `top_k?`: `number` ; `top_p?`: `number` } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/conversational.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/conversational.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: DocumentQuestionAnsweringArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `DocumentQuestionAnsweringArgs`: [`BaseArgs`](interfaces/BaseArgs) & {
    `inputs`: { `image`: `Blob` | `ArrayBuffer` ; `question`: `string` } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/multimodal/documentQuestionAnswering.ts:8](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/multimodal/documentQuestionAnswering.ts#L8)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: FeatureExtractionArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `FeatureExtractionArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`:
    `string` | `string`[] }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/featureExtraction.ts:6](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/featureExtraction.ts#L6)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: FeatureExtractionOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `FeatureExtractionOutput`: (`number` | `number`[] | `number`[][])[]'
  prefs: []
  type: TYPE_NORMAL
- en: Returned values are a multidimensional array of floats (dimension depending
    on if you sent a string or a list of string, and if the automatic reduction, usually
    mean_pooling for instance was applied for you or not. This should be explained
    on the model’s README).
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/featureExtraction.ts:19](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/featureExtraction.ts#L19)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: FillMaskArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `FillMaskArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`: `string`
    }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/fillMask.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/fillMask.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: FillMaskOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `FillMaskOutput`: { `score`: `number` ; `sequence`: `string` ; `token`:
    `number` ; `token_str`: `string` }[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/fillMask.ts:9](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/fillMask.ts#L9)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ImageClassificationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ImageClassificationArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `data`:
    `Blob` | `ArrayBuffer` }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageClassification.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageClassification.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ImageClassificationOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ImageClassificationOutput`: [`ImageClassificationOutputValue`](interfaces/ImageClassificationOutputValue)[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageClassification.ts:23](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageClassification.ts#L23)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ImageSegmentationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ImageSegmentationArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `data`:
    `Blob` | `ArrayBuffer` }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageSegmentation.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageSegmentation.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ImageSegmentationOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ImageSegmentationOutput`: [`ImageSegmentationOutputValue`](interfaces/ImageSegmentationOutputValue)[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageSegmentation.ts:27](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageSegmentation.ts#L27)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ImageToImageArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ImageToImageArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`: `Blob`
    | `ArrayBuffer` ; `parameters?`: { `guess_mode?`: `boolean` ; `guidance_scale?`:
    `number` ; `height?`: `number` ; `negative_prompt?`: `string` ; `num_inference_steps?`:
    `number` ; `prompt?`: `string` ; `strength?`: `number` ; `width?`: `number` }
    }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageToImage.ts:6](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageToImage.ts#L6)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ImageToImageOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ImageToImageOutput`: `Blob`'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageToImage.ts:55](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageToImage.ts#L55)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ImageToTextArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ImageToTextArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `data`: `Blob`
    | `ArrayBuffer` }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageToText.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageToText.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: InferenceTask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `InferenceTask`: `Exclude`<`PipelineType`, `"other"`>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/types.ts:40](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/types.ts#L40)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ObjectDetectionArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ObjectDetectionArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `data`: `Blob`
    | `ArrayBuffer` }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/objectDetection.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/objectDetection.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ObjectDetectionOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ObjectDetectionOutput`: [`ObjectDetectionOutputValue`](interfaces/ObjectDetectionOutputValue)[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/objectDetection.ts:33](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/objectDetection.ts#L33)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: QuestionAnsweringArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `QuestionAnsweringArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`:
    { `context`: `string` ; `question`: `string` } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/questionAnswering.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/questionAnswering.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: RequestArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `RequestArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `data`: `Blob` | `ArrayBuffer`
    } | { `inputs`: `unknown` } & { `accessToken?`: `string` ; `parameters?`: `Record`<`string`,
    `unknown`> }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/types.ts:57](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/types.ts#L57)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: SentenceSimilarityArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `SentenceSimilarityArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`:
    `Record`<`string`, `unknown`> | `Record`<`string`, `unknown`>[] }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/sentenceSimilarity.ts:6](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/sentenceSimilarity.ts#L6)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: SentenceSimilarityOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `SentenceSimilarityOutput`: `number`[]'
  prefs: []
  type: TYPE_NORMAL
- en: Returned values are a list of floats
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/sentenceSimilarity.ts:19](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/sentenceSimilarity.ts#L19)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: SummarizationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `SummarizationArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`: `string`
    ; `parameters?`: { `max_length?`: `number` ; `max_time?`: `number` ; `min_length?`:
    `number` ; `repetition_penalty?`: `number` ; `temperature?`: `number` ; `top_k?`:
    `number` ; `top_p?`: `number` } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/summarization.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/summarization.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TableQuestionAnsweringArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TableQuestionAnsweringArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`:
    { `query`: `string` ; `table`: `Record`<`string`, `string`[]> } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/tableQuestionAnswering.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/tableQuestionAnswering.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TabularClassificationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TabularClassificationArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`:
    { `data`: `Record`<`string`, `string`[]> } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/tabular/tabularClassification.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/tabular/tabularClassification.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TabularClassificationOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TabularClassificationOutput`: `number`[]'
  prefs: []
  type: TYPE_NORMAL
- en: A list of predicted labels for each row
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/tabular/tabularClassification.ts:17](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/tabular/tabularClassification.ts#L17)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TabularRegressionArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TabularRegressionArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`:
    { `data`: `Record`<`string`, `string`[]> } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/tabular/tabularRegression.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/tabular/tabularRegression.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TabularRegressionOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TabularRegressionOutput`: `number`[]'
  prefs: []
  type: TYPE_NORMAL
- en: a list of predicted values for each row
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/tabular/tabularRegression.ts:17](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/tabular/tabularRegression.ts#L17)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TextClassificationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TextClassificationArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`:
    `string` }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/textClassification.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textClassification.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TextClassificationOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TextClassificationOutput`: { `label`: `string` ; `score`: `number` }[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/textClassification.ts:12](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textClassification.ts#L12)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TextGenerationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TextGenerationArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`: `string`
    ; `parameters?`: { `do_sample?`: `boolean` ; `max_new_tokens?`: `number` ; `max_time?`:
    `number` ; `num_return_sequences?`: `number` ; `repetition_penalty?`: `number`
    ; `return_full_text?`: `boolean` ; `stop_sequences?`: `string`[] ; `temperature?`:
    `number` ; `top_k?`: `number` ; `top_p?`: `number` ; `truncate?`: `number` } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/textGeneration.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textGeneration.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TextGenerationStreamFinishReason
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TextGenerationStreamFinishReason`: `"length"` | `"eos_token"` | `"stop_sequence"`'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/textGenerationStream.ts:46](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textGenerationStream.ts#L46)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TextToImageArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TextToImageArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`: `string`
    ; `parameters?`: { `guidance_scale?`: `number` ; `height?`: `number` ; `negative_prompt?`:
    `string` ; `num_inference_steps?`: `number` ; `width?`: `number` } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/textToImage.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/textToImage.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TextToImageOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TextToImageOutput`: `Blob`'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/textToImage.ts:35](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/textToImage.ts#L35)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TextToSpeechArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TextToSpeechArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`: `string`
    }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/textToSpeech.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/textToSpeech.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TextToSpeechOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TextToSpeechOutput`: `Blob`'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/textToSpeech.ts:12](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/textToSpeech.ts#L12)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TokenClassificationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TokenClassificationArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`:
    `string` ; `parameters?`: { `aggregation_strategy?`: `"none"` | `"simple"` | `"first"`
    | `"average"` | `"max"` } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/tokenClassification.ts:6](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/tokenClassification.ts#L6)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TokenClassificationOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TokenClassificationOutput`: [`TokenClassificationOutputValue`](interfaces/TokenClassificationOutputValue)[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/tokenClassification.ts:52](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/tokenClassification.ts#L52)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TranslationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TranslationArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`: `string`
    | `string`[] }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/translation.ts:5](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/translation.ts#L5)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: TranslationOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `TranslationOutput`: [`TranslationOutputValue`](interfaces/TranslationOutputValue)
    | [`TranslationOutputValue`](interfaces/TranslationOutputValue)[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/translation.ts:19](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/translation.ts#L19)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: VisualQuestionAnsweringArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `VisualQuestionAnsweringArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`:
    { `image`: `Blob` | `ArrayBuffer` ; `question`: `string` } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/multimodal/visualQuestionAnswering.ts:6](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/multimodal/visualQuestionAnswering.ts#L6)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ZeroShotClassificationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ZeroShotClassificationArgs`: [`BaseArgs`](interfaces/BaseArgs) & { `inputs`:
    `string` | `string`[] ; `parameters`: { `candidate_labels`: `string`[] ; `multi_label?`:
    `boolean` } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/zeroShotClassification.ts:6](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/zeroShotClassification.ts#L6)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ZeroShotClassificationOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ZeroShotClassificationOutput`: [`ZeroShotClassificationOutputValue`](interfaces/ZeroShotClassificationOutputValue)[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/zeroShotClassification.ts:29](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/zeroShotClassification.ts#L29)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ZeroShotImageClassificationArgs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ZeroShotImageClassificationArgs`: [`BaseArgs`](interfaces/BaseArgs) &
    { `inputs`: { `image`: `Blob` | `ArrayBuffer` } ; `parameters`: { `candidate_labels`:
    `string`[] } }'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/zeroShotImageClassification.ts:7](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/zeroShotImageClassification.ts#L7)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: ZeroShotImageClassificationOutput
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Ƭ `ZeroShotImageClassificationOutput`: [`ZeroShotImageClassificationOutputValue`](interfaces/ZeroShotImageClassificationOutputValue)[]'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/zeroShotImageClassification.ts:27](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/zeroShotImageClassification.ts#L27)'
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: audioClassification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `audioClassification`(`args`, `options?`): `Promise`<[`AudioClassificationReturn`](modules#audioclassificationreturn)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task reads some audio input and outputs the likelihood of classes. Recommended
    model: superb/hubert-large-superb-er'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`AudioClassificationArgs`](modules#audioclassificationargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`AudioClassificationReturn`](modules#audioclassificationreturn)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/audioClassification.ts:30](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/audioClassification.ts#L30)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: audioToAudio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `audioToAudio`(`args`, `options?`): `Promise`<[`AudioToAudioReturn`](modules#audiotoaudioreturn)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task reads some audio input and outputs one or multiple audio files. Example
    model: speechbrain/sepformer-wham does audio source separation.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`AudioToAudioArgs`](modules#audiotoaudioargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`AudioToAudioReturn`](modules#audiotoaudioreturn)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/audioToAudio.ts:35](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/audioToAudio.ts#L35)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: automaticSpeechRecognition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `automaticSpeechRecognition`(`args`, `options?`): `Promise`<[`AutomaticSpeechRecognitionOutput`](interfaces/AutomaticSpeechRecognitionOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task reads some audio input and outputs the said words within the audio
    files. Recommended model (english language): facebook/wav2vec2-large-960h-lv60-self'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`AutomaticSpeechRecognitionArgs`](modules#automaticspeechrecognitionargs)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`AutomaticSpeechRecognitionOutput`](interfaces/AutomaticSpeechRecognitionOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/automaticSpeechRecognition.ts:23](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/automaticSpeechRecognition.ts#L23)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: conversational
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `conversational`(`args`, `options?`): `Promise`<[`ConversationalOutput`](interfaces/ConversationalOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task corresponds to any chatbot like structure. Models tend to have shorter
    max_length, so please check with caution when using a given model if you need
    long range dependency or not. Recommended model: microsoft/DialoGPT-large.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`ConversationalArgs`](modules#conversationalargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`ConversationalOutput`](interfaces/ConversationalOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/conversational.ts:65](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/conversational.ts#L65)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: documentQuestionAnswering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `documentQuestionAnswering`(`args`, `options?`): `Promise`<[`DocumentQuestionAnsweringOutput`](interfaces/DocumentQuestionAnsweringOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Answers a question on a document image. Recommended model: impira/layoutlm-document-qa.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`DocumentQuestionAnsweringArgs`](modules#documentquestionansweringargs)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`DocumentQuestionAnsweringOutput`](interfaces/DocumentQuestionAnsweringOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/multimodal/documentQuestionAnswering.ts:42](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/multimodal/documentQuestionAnswering.ts#L42)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: featureExtraction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `featureExtraction`(`args`, `options?`): `Promise`<[`FeatureExtractionOutput`](modules#featureextractionoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: This task reads some text and outputs raw float values, that are usually consumed
    as part of a semantic database/semantic search.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`FeatureExtractionArgs`](modules#featureextractionargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`FeatureExtractionOutput`](modules#featureextractionoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/featureExtraction.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/featureExtraction.ts#L24)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: fillMask
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `fillMask`(`args`, `options?`): `Promise`<[`FillMaskOutput`](modules#fillmaskoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Tries to fill in a hole with a missing word (token to be precise). That’s the
    base task for BERT models.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`FillMaskArgs`](modules#fillmaskargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`FillMaskOutput`](modules#fillmaskoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/fillMask.ts:31](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/fillMask.ts#L31)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageClassification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `imageClassification`(`args`, `options?`): `Promise`<[`ImageClassificationOutput`](modules#imageclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task reads some image input and outputs the likelihood of classes. Recommended
    model: google/vit-base-patch16-224'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`ImageClassificationArgs`](modules#imageclassificationargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`ImageClassificationOutput`](modules#imageclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageClassification.ts:29](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageClassification.ts#L29)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageSegmentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `imageSegmentation`(`args`, `options?`): `Promise`<[`ImageSegmentationOutput`](modules#imagesegmentationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task reads some image input and outputs the likelihood of classes & bounding
    boxes of detected objects. Recommended model: facebook/detr-resnet-50-panoptic'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`ImageSegmentationArgs`](modules#imagesegmentationargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`ImageSegmentationOutput`](modules#imagesegmentationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageSegmentation.ts:33](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageSegmentation.ts#L33)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageToImage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `imageToImage`(`args`, `options?`): `Promise`<[`ImageToImageOutput`](modules#imagetoimageoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task reads some text input and outputs an image. Recommended model: lllyasviel/sd-controlnet-depth'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`ImageToImageArgs`](modules#imagetoimageargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`ImageToImageOutput`](modules#imagetoimageoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageToImage.ts:61](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageToImage.ts#L61)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: imageToText
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `imageToText`(`args`, `options?`): `Promise`<[`ImageToTextOutput`](interfaces/ImageToTextOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: This task reads some image input and outputs the text caption.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`ImageToTextArgs`](modules#imagetotextargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`ImageToTextOutput`](interfaces/ImageToTextOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/imageToText.ts:22](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/imageToText.ts#L22)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: objectDetection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `objectDetection`(`args`, `options?`): `Promise`<[`ObjectDetectionOutput`](modules#objectdetectionoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task reads some image input and outputs the likelihood of classes & bounding
    boxes of detected objects. Recommended model: facebook/detr-resnet-50'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`ObjectDetectionArgs`](modules#objectdetectionargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`ObjectDetectionOutput`](modules#objectdetectionoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/objectDetection.ts:39](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/objectDetection.ts#L39)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: questionAnswering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `questionAnswering`(`args`, `options?`): `Promise`<[`QuestionAnsweringOutput`](interfaces/QuestionAnsweringOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Want to have a nice know-it-all bot that can answer any question?. Recommended
    model: deepset/roberta-base-squad2'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`QuestionAnsweringArgs`](modules#questionansweringargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`QuestionAnsweringOutput`](interfaces/QuestionAnsweringOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/questionAnswering.ts:34](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/questionAnswering.ts#L34)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `request`<`T`>(`args`, `options?`): `Promise`<`T`>'
  prefs: []
  type: TYPE_NORMAL
- en: Primitive to make custom calls to Inference Endpoints
  prefs: []
  type: TYPE_NORMAL
- en: Type parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name |'
  prefs: []
  type: TYPE_TB
- en: '| :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `T` |'
  prefs: []
  type: TYPE_TB
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`RequestArgs`](modules#requestargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) & { `task?`: `string` ; `taskHint?`:
    [`InferenceTask`](modules#inferencetask) } |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<`T`>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/custom/request.ts:7](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/custom/request.ts#L7)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: sentenceSimilarity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `sentenceSimilarity`(`args`, `options?`): `Promise`<[`SentenceSimilarityOutput`](modules#sentencesimilarityoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Calculate the semantic similarity between one text and a list of other sentences
    by comparing their embeddings.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`SentenceSimilarityArgs`](modules#sentencesimilarityargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`SentenceSimilarityOutput`](modules#sentencesimilarityoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/sentenceSimilarity.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/sentenceSimilarity.ts#L24)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: streamingRequest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `streamingRequest`<`T`>(`args`, `options?`): `AsyncGenerator`<`T`>'
  prefs: []
  type: TYPE_NORMAL
- en: Primitive to make custom inference calls that expect server-sent events, and
    returns the response through a generator
  prefs: []
  type: TYPE_NORMAL
- en: Type parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name |'
  prefs: []
  type: TYPE_TB
- en: '| :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `T` |'
  prefs: []
  type: TYPE_TB
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`RequestArgs`](modules#requestargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) & { `task?`: `string` ; `taskHint?`:
    [`InferenceTask`](modules#inferencetask) } |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`AsyncGenerator`<`T`>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/custom/streamingRequest.ts:9](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/custom/streamingRequest.ts#L9)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: summarization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `summarization`(`args`, `options?`): `Promise`<[`SummarizationOutput`](interfaces/SummarizationOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: This task is well known to summarize longer text into shorter text. Be careful,
    some models have a maximum length of input. That means that the summary cannot
    handle full books for instance. Be careful when choosing your model.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`SummarizationArgs`](modules#summarizationargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`SummarizationOutput`](interfaces/SummarizationOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/summarization.ts:52](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/summarization.ts#L52)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: tableQuestionAnswering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `tableQuestionAnswering`(`args`, `options?`): `Promise`<[`TableQuestionAnsweringOutput`](interfaces/TableQuestionAnsweringOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t know SQL? Don’t want to dive into a large spreadsheet? Ask questions
    in plain english! Recommended model: google/tapas-base-finetuned-wtq.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`TableQuestionAnsweringArgs`](modules#tablequestionansweringargs)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`TableQuestionAnsweringOutput`](interfaces/TableQuestionAnsweringOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/tableQuestionAnswering.ts:40](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/tableQuestionAnswering.ts#L40)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: tabularClassification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `tabularClassification`(`args`, `options?`): `Promise`<[`TabularClassificationOutput`](modules#tabularclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Predicts target label for a given set of features in tabular form. Typically,
    you will want to train a classification model on your training data and use it
    with your new data of the same format. Example model: vvmnnnkv/wine-quality'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`TabularClassificationArgs`](modules#tabularclassificationargs)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`TabularClassificationOutput`](modules#tabularclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/tabular/tabularClassification.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/tabular/tabularClassification.ts#L24)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: tabularRegression
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `tabularRegression`(`args`, `options?`): `Promise`<[`TabularRegressionOutput`](modules#tabularregressionoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Predicts target value for a given set of features in tabular form. Typically,
    you will want to train a regression model on your training data and use it with
    your new data of the same format. Example model: scikit-learn/Fish-Weight'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`TabularRegressionArgs`](modules#tabularregressionargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`TabularRegressionOutput`](modules#tabularregressionoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/tabular/tabularRegression.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/tabular/tabularRegression.ts#L24)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: textClassification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `textClassification`(`args`, `options?`): `Promise`<[`TextClassificationOutput`](modules#textclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually used for sentiment-analysis this will output the likelihood of classes
    of an input. Recommended model: distilbert-base-uncased-finetuned-sst-2-english'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`TextClassificationArgs`](modules#textclassificationargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`TextClassificationOutput`](modules#textclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/textClassification.ts:26](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textClassification.ts#L26)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: textGeneration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `textGeneration`(`args`, `options?`): `Promise`<[`TextGenerationOutput`](interfaces/TextGenerationOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use to continue text from a prompt. This is a very generic task. Recommended
    model: gpt2 (it’s a simple model, but fun to play with).'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`TextGenerationArgs`](modules#textgenerationargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`TextGenerationOutput`](interfaces/TextGenerationOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/textGeneration.ts:68](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textGeneration.ts#L68)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: textGenerationStream
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `textGenerationStream`(`args`, `options?`): `AsyncGenerator`<[`TextGenerationStreamOutput`](interfaces/TextGenerationStreamOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Use to continue text from a prompt. Same as `textGeneration` but returns generator
    that can be read one token at a time
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`TextGenerationArgs`](modules#textgenerationargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`AsyncGenerator`<[`TextGenerationStreamOutput`](interfaces/TextGenerationStreamOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/textGenerationStream.ts:87](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/textGenerationStream.ts#L87)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: textToImage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `textToImage`(`args`, `options?`): `Promise`<[`TextToImageOutput`](modules#texttoimageoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task reads some text input and outputs an image. Recommended model: stabilityai/stable-diffusion-2'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`TextToImageArgs`](modules#texttoimageargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`TextToImageOutput`](modules#texttoimageoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/textToImage.ts:41](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/textToImage.ts#L41)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: textToSpeech
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `textToSpeech`(`args`, `options?`): `Promise`<[`TextToSpeechOutput`](modules#texttospeechoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task synthesize an audio of a voice pronouncing a given text. Recommended
    model: espnet/kan-bayashi_ljspeech_vits'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`TextToSpeechArgs`](modules#texttospeechargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`TextToSpeechOutput`](modules#texttospeechoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/audio/textToSpeech.ts:18](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/audio/textToSpeech.ts#L18)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: tokenClassification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `tokenClassification`(`args`, `options?`): `Promise`<[`TokenClassificationOutput`](modules#tokenclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually used for sentence parsing, either grammatical, or Named Entity Recognition
    (NER) to understand keywords contained within text. Recommended model: dbmdz/bert-large-cased-finetuned-conll03-english'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`TokenClassificationArgs`](modules#tokenclassificationargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`TokenClassificationOutput`](modules#tokenclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/tokenClassification.ts:57](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/tokenClassification.ts#L57)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: translation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `translation`(`args`, `options?`): `Promise`<[`TranslationOutput`](modules#translationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task is well known to translate text from one language to another. Recommended
    model: Helsinki-NLP/opus-mt-ru-en.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`TranslationArgs`](modules#translationargs) |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`TranslationOutput`](modules#translationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/translation.ts:24](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/translation.ts#L24)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: visualQuestionAnswering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `visualQuestionAnswering`(`args`, `options?`): `Promise`<[`VisualQuestionAnsweringOutput`](interfaces/VisualQuestionAnsweringOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Answers a question on an image. Recommended model: dandelin/vilt-b32-finetuned-vqa.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`VisualQuestionAnsweringArgs`](modules#visualquestionansweringargs)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`VisualQuestionAnsweringOutput`](interfaces/VisualQuestionAnsweringOutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/multimodal/visualQuestionAnswering.ts:32](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/multimodal/visualQuestionAnswering.ts#L32)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: zeroShotClassification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `zeroShotClassification`(`args`, `options?`): `Promise`<[`ZeroShotClassificationOutput`](modules#zeroshotclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'This task is super useful to try out classification with zero code, you simply
    pass a sentence/paragraph and the possible labels for that sentence, and you get
    a result. Recommended model: facebook/bart-large-mnli.'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`ZeroShotClassificationArgs`](modules#zeroshotclassificationargs)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`ZeroShotClassificationOutput`](modules#zeroshotclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/nlp/zeroShotClassification.ts:34](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/nlp/zeroShotClassification.ts#L34)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: zeroShotImageClassification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '▸ `zeroShotImageClassification`(`args`, `options?`): `Promise`<[`ZeroShotImageClassificationOutput`](modules#zeroshotimageclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: 'Classify an image to specified classes. Recommended model: openai/clip-vit-large-patch14-336'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Name | Type |'
  prefs: []
  type: TYPE_TB
- en: '| :-- | :-- |'
  prefs: []
  type: TYPE_TB
- en: '| `args` | [`ZeroShotImageClassificationArgs`](modules#zeroshotimageclassificationargs)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `options?` | [`Options`](interfaces/Options) |'
  prefs: []
  type: TYPE_TB
- en: Returns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Promise`<[`ZeroShotImageClassificationOutput`](modules#zeroshotimageclassificationoutput)>'
  prefs: []
  type: TYPE_NORMAL
- en: Defined in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[inference/src/tasks/cv/zeroShotImageClassification.ts:33](https://github.com/huggingface/huggingface.js/blob/main/packages/inference/src/tasks/cv/zeroShotImageClassification.ts#L33)'
  prefs: []
  type: TYPE_NORMAL
