- en: Knowledge Distillation for Computer Vision
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机视觉知识蒸馏
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/knowledge_distillation_for_image_classification](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/knowledge_distillation_for_image_classification)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/tasks/knowledge_distillation_for_image_classification](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/knowledge_distillation_for_image_classification)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge distillation is a technique used to transfer knowledge from a larger,
    more complex model (teacher) to a smaller, simpler model (student). To distill
    knowledge from one model to another, we take a pre-trained teacher model trained
    on a certain task (image classification for this case) and randomly initialize
    a student model to be trained on image classification. Next, we train the student
    model to minimize the difference between it’s outputs and the teacher’s outputs,
    thus making it mimic the behavior. It was first introduced in [Distilling the
    Knowledge in a Neural Network by Hinton et al](https://arxiv.org/abs/1503.02531).
    In this guide, we will do task-specific knowledge distillation. We will use the
    [beans dataset](https://huggingface.co/datasets/beans) for this.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 知识蒸馏是一种技术，用于将知识从一个更大、更复杂的模型（教师）转移到一个更小、更简单的模型（学生）。为了从一个模型中提取知识到另一个模型，我们采用一个在特定任务上（本例中为图像分类）训练过的预训练教师模型，并随机初始化一个学生模型用于图像分类训练。接下来，我们训练学生模型以最小化其输出与教师输出之间的差异，从而使其模仿行为。这最初是由
    [Hinton 等人在神经网络中提取知识](https://arxiv.org/abs/1503.02531) 中首次引入的。在这个指南中，我们将进行特定任务的知识蒸馏。我们将使用
    [beans 数据集](https://huggingface.co/datasets/beans)。
- en: This guide demonstrates how you can distill a [fine-tuned ViT model](https://huggingface.co/merve/vit-mobilenet-beans-224)
    (teacher model) to a [MobileNet](https://huggingface.co/google/mobilenet_v2_1.4_224)
    (student model) using the [Trainer API](https://huggingface.co/docs/transformers/en/main_classes/trainer#trainer)
    of 🤗 Transformers.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指南演示了如何使用 🤗 Transformers 的 [Trainer API](https://huggingface.co/docs/transformers/en/main_classes/trainer#trainer)
    将一个 [fine-tuned ViT 模型](https://huggingface.co/merve/vit-mobilenet-beans-224)（教师模型）蒸馏到一个
    [MobileNet](https://huggingface.co/google/mobilenet_v2_1.4_224)（学生模型）。
- en: Let’s install the libraries needed for distillation and evaluating the process.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装进行蒸馏和评估过程所需的库。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we are using the `merve/beans-vit-224` model as teacher model.
    It’s an image classification model, based on `google/vit-base-patch16-224-in21k`
    fine-tuned on beans dataset. We will distill this model to a randomly initialized
    MobileNetV2.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 `merve/beans-vit-224` 模型作为教师模型。这是一个基于 `google/vit-base-patch16-224-in21k`
    在 beans 数据集上微调的图像分类模型。我们将将这个模型蒸馏到一个随机初始化的 MobileNetV2。
- en: We will now load the dataset.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将加载数据集。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can use an image processor from either of the models, as in this case they
    return the same output with same resolution. We will use the `map()` method of
    `dataset` to apply the preprocessing to every split of the dataset.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从任一模型中使用图像处理器，因为在这种情况下它们返回相同分辨率的相同输出。我们将使用 `dataset` 的 `map()` 方法将预处理应用于数据集的每个拆分。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Essentially, we want the student model (a randomly initialized MobileNet) to
    mimic the teacher model (fine-tuned vision transformer). To achieve this, we first
    get the logits output from the teacher and the student. Then, we divide each of
    them by the parameter `temperature` which controls the importance of each soft
    target. A parameter called `lambda` weighs the importance of the distillation
    loss. In this example, we will use `temperature=5` and `lambda=0.5`. We will use
    the Kullback-Leibler Divergence loss to compute the divergence between the student
    and teacher. Given two data P and Q, KL Divergence explains how much extra information
    we need to represent P using Q. If two are identical, their KL divergence is zero,
    as there’s no other information needed to explain P from Q. Thus, in the context
    of knowledge distillation, KL divergence is useful.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们希望学生模型（随机初始化的 MobileNet）模仿教师模型（微调的视觉变换器）。为了实现这一点，我们首先从教师和学生中获取 logits
    输出。然后，我们将它们中的每一个除以控制每个软目标重要性的参数 `temperature`。一个称为 `lambda` 的参数权衡了蒸馏损失的重要性。在这个例子中，我们将使用
    `temperature=5` 和 `lambda=0.5`。我们将使用 Kullback-Leibler 散度损失来计算学生和教师之间的差异。给定两个数据
    P 和 Q，KL 散度解释了我们需要多少额外信息来用 Q 表示 P。如果两者相同，它们的 KL 散度为零，因为不需要其他信息来解释 P。因此，在知识蒸馏的背景下，KL
    散度是有用的。
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We will now login to Hugging Face Hub so we can push our model to the Hugging
    Face Hub through the `Trainer`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将登录到 Hugging Face Hub，这样我们就可以通过 `Trainer` 将我们的模型推送到 Hugging Face Hub。
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s set the `TrainingArguments`, the teacher model and the student model.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置 `TrainingArguments`、教师模型和学生模型。
- en: '[PRE5]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can use `compute_metrics` function to evaluate our model on the test set.
    This function will be used during the training process to compute the `accuracy`
    & `f1` of our model.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `compute_metrics` 函数在测试集上评估我们的模型。这个函数将在训练过程中用于计算我们模型的 `准确率` 和 `f1`。
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let’s initialize the `Trainer` with the training arguments we defined. We will
    also initialize our data collator.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用我们定义的训练参数初始化 `Trainer`。我们还将初始化我们的数据收集器。
- en: '[PRE7]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can now train our model.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以训练我们的模型。
- en: '[PRE8]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can evaluate the model on the test set.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在测试集上评估模型。
- en: '[PRE9]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: On test set, our model reaches 72 percent accuracy. To have a sanity check over
    efficiency of distillation, we also trained MobileNet on the beans dataset from
    scratch with the same hyperparameters and observed 63 percent accuracy on the
    test set. We invite the readers to try different pre-trained teacher models, student
    architectures, distillation parameters and report their findings. The training
    logs and checkpoints for distilled model can be found in [this repository](https://huggingface.co/merve/vit-mobilenet-beans-224),
    and MobileNetV2 trained from scratch can be found in this [repository](https://huggingface.co/merve/resnet-mobilenet-beans-5).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试集上，我们的模型达到了72％的准确率。为了对蒸馏效率进行合理性检查，我们还使用相同的超参数从头开始在豆类数据集上训练MobileNet，并观察到测试集上的63％准确率。我们邀请读者尝试不同的预训练教师模型、学生架构、蒸馏参数，并报告他们的发现。蒸馏模型的训练日志和检查点可以在[此存储库](https://huggingface.co/merve/vit-mobilenet-beans-224)中找到，从头开始训练的MobileNetV2可以在此[存储库](https://huggingface.co/merve/resnet-mobilenet-beans-5)中找到。
