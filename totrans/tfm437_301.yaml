- en: YOLOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/yolos](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/yolos)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/308.596f52f9.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Tip.c2ecdbf4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Docstring.17db21ae.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/ExampleCodeBlock.4f515aa9.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/PipelineTag.44585822.js">
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The YOLOS model was proposed in [You Only Look at One Sequence: Rethinking
    Transformer in Vision through Object Detection](https://arxiv.org/abs/2106.00666)
    by Yuxin Fang, Bencheng Liao, Xinggang Wang, Jiemin Fang, Jiyang Qi, Rui Wu, Jianwei
    Niu, Wenyu Liu. YOLOS proposes to just leverage the plain [Vision Transformer
    (ViT)](vit) for object detection, inspired by DETR. It turns out that a base-sized
    encoder-only Transformer can also achieve 42 AP on COCO, similar to DETR and much
    more complex frameworks such as Faster R-CNN.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Can Transformer perform 2D object- and region-level recognition from a pure
    sequence-to-sequence perspective with minimal knowledge about the 2D spatial structure?
    To answer this question, we present You Only Look at One Sequence (YOLOS), a series
    of object detection models based on the vanilla Vision Transformer with the fewest
    possible modifications, region priors, as well as inductive biases of the target
    task. We find that YOLOS pre-trained on the mid-sized ImageNet-1k dataset only
    can already achieve quite competitive performance on the challenging COCO object
    detection benchmark, e.g., YOLOS-Base directly adopted from BERT-Base architecture
    can obtain 42.0 box AP on COCO val. We also discuss the impacts as well as limitations
    of current pre-train schemes and model scaling strategies for Transformer in vision
    through YOLOS.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![drawing](../Images/b49c1370806db7d0d200d783ed143c9f.png) YOLOS architecture.
    Taken from the [original paper](https://arxiv.org/abs/2106.00666).'
  prefs: []
  type: TYPE_NORMAL
- en: This model was contributed by [nielsr](https://huggingface.co/nielsr). The original
    code can be found [here](https://github.com/hustvl/YOLOS).
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of official Hugging Face and community (indicated by üåé) resources to
    help you get started with YOLOS.
  prefs: []
  type: TYPE_NORMAL
- en: Object Detection
  prefs: []
  type: TYPE_NORMAL
- en: All example notebooks illustrating inference + fine-tuning [YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)
    on a custom dataset can be found [here](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/YOLOS).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See also: [Object detection task guide](../tasks/object_detection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you‚Äôre interested in submitting a resource to be included here, please feel
    free to open a Pull Request and we‚Äôll review it! The resource should ideally demonstrate
    something new instead of duplicating an existing resource.
  prefs: []
  type: TYPE_NORMAL
- en: Use [YolosImageProcessor](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosImageProcessor)
    for preparing images (and optional targets) for the model. Contrary to [DETR](detr),
    YOLOS doesn‚Äôt require a `pixel_mask` to be created.
  prefs: []
  type: TYPE_NORMAL
- en: YolosConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.YolosConfig'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/configuration_yolos.py#L35)'
  prefs: []
  type: TYPE_NORMAL
- en: ( hidden_size = 768 num_hidden_layers = 12 num_attention_heads = 12 intermediate_size
    = 3072 hidden_act = 'gelu' hidden_dropout_prob = 0.0 attention_probs_dropout_prob
    = 0.0 initializer_range = 0.02 layer_norm_eps = 1e-12 image_size = [512, 864]
    patch_size = 16 num_channels = 3 qkv_bias = True num_detection_tokens = 100 use_mid_position_embeddings
    = True auxiliary_loss = False class_cost = 1 bbox_cost = 5 giou_cost = 2 bbox_loss_coefficient
    = 5 giou_loss_coefficient = 2 eos_coefficient = 0.1 **kwargs )
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**hidden_size** (`int`, *optional*, defaults to 768) ‚Äî Dimensionality of the
    encoder layers and the pooler layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_hidden_layers** (`int`, *optional*, defaults to 12) ‚Äî Number of hidden
    layers in the Transformer encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_attention_heads** (`int`, *optional*, defaults to 12) ‚Äî Number of attention
    heads for each attention layer in the Transformer encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**intermediate_size** (`int`, *optional*, defaults to 3072) ‚Äî Dimensionality
    of the ‚Äúintermediate‚Äù (i.e., feed-forward) layer in the Transformer encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hidden_act** (`str` or `function`, *optional*, defaults to `"gelu"`) ‚Äî The
    non-linear activation function (function or string) in the encoder and pooler.
    If string, `"gelu"`, `"relu"`, `"selu"` and `"gelu_new"` are supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hidden_dropout_prob** (`float`, *optional*, defaults to 0.0) ‚Äî The dropout
    probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attention_probs_dropout_prob** (`float`, *optional*, defaults to 0.0) ‚Äî The
    dropout ratio for the attention probabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**initializer_range** (`float`, *optional*, defaults to 0.02) ‚Äî The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**layer_norm_eps** (`float`, *optional*, defaults to 1e-12) ‚Äî The epsilon used
    by the layer normalization layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_size** (`List[int]`, *optional*, defaults to `[512, 864]`) ‚Äî The size
    (resolution) of each image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**patch_size** (`int`, *optional*, defaults to 16) ‚Äî The size (resolution)
    of each patch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_channels** (`int`, *optional*, defaults to 3) ‚Äî The number of input channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**qkv_bias** (`bool`, *optional*, defaults to `True`) ‚Äî Whether to add a bias
    to the queries, keys and values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_detection_tokens** (`int`, *optional*, defaults to 100) ‚Äî The number
    of detection tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**use_mid_position_embeddings** (`bool`, *optional*, defaults to `True`) ‚Äî
    Whether to use the mid-layer position encodings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**auxiliary_loss** (`bool`, *optional*, defaults to `False`) ‚Äî Whether auxiliary
    decoding losses (loss at each decoder layer) are to be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**class_cost** (`float`, *optional*, defaults to 1) ‚Äî Relative weight of the
    classification error in the Hungarian matching cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bbox_cost** (`float`, *optional*, defaults to 5) ‚Äî Relative weight of the
    L1 error of the bounding box coordinates in the Hungarian matching cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**giou_cost** (`float`, *optional*, defaults to 2) ‚Äî Relative weight of the
    generalized IoU loss of the bounding box in the Hungarian matching cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bbox_loss_coefficient** (`float`, *optional*, defaults to 5) ‚Äî Relative weight
    of the L1 bounding box loss in the object detection loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**giou_loss_coefficient** (`float`, *optional*, defaults to 2) ‚Äî Relative weight
    of the generalized IoU loss in the object detection loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**eos_coefficient** (`float`, *optional*, defaults to 0.1) ‚Äî Relative classification
    weight of the ‚Äòno-object‚Äô class in the object detection loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a [YolosModel](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosModel).
    It is used to instantiate a YOLOS model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the YOLOS [hustvl/yolos-base](https://huggingface.co/hustvl/yolos-base)
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: YolosImageProcessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.YolosImageProcessor'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L668)'
  prefs: []
  type: TYPE_NORMAL
- en: '( format: Union = <AnnotationFormat.COCO_DETECTION: ''coco_detection''> do_resize:
    bool = True size: Dict = None resample: Resampling = <Resampling.BILINEAR: 2>
    do_rescale: bool = True rescale_factor: Union = 0.00392156862745098 do_normalize:
    bool = True image_mean: Union = None image_std: Union = None do_pad: bool = True
    **kwargs )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**format** (`str`, *optional*, defaults to `"coco_detection"`) ‚Äî Data format
    of the annotations. One of ‚Äúcoco_detection‚Äù or ‚Äúcoco_panoptic‚Äù.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_resize** (`bool`, *optional*, defaults to `True`) ‚Äî Controls whether to
    resize the image‚Äôs (height, width) dimensions to the specified `size`. Can be
    overridden by the `do_resize` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size** (`Dict[str, int]` *optional*, defaults to `{"shortest_edge" -- 800,
    "longest_edge": 1333}`): Size of the image‚Äôs (height, width) dimensions after
    resizing. Can be overridden by the `size` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**resample** (`PILImageResampling`, *optional*, defaults to `PILImageResampling.BILINEAR`)
    ‚Äî Resampling filter to use if resizing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_rescale** (`bool`, *optional*, defaults to `True`) ‚Äî Controls whether
    to rescale the image by the specified scale `rescale_factor`. Can be overridden
    by the `do_rescale` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rescale_factor** (`int` or `float`, *optional*, defaults to `1/255`) ‚Äî Scale
    factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method. do_normalize ‚Äî Controls whether to normalize
    the image. Can be overridden by the `do_normalize` parameter in the `preprocess`
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_mean** (`float` or `List[float]`, *optional*, defaults to `IMAGENET_DEFAULT_MEAN`)
    ‚Äî Mean values to use when normalizing the image. Can be a single value or a list
    of values, one for each channel. Can be overridden by the `image_mean` parameter
    in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_std** (`float` or `List[float]`, *optional*, defaults to `IMAGENET_DEFAULT_STD`)
    ‚Äî Standard deviation values to use when normalizing the image. Can be a single
    value or a list of values, one for each channel. Can be overridden by the `image_std`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_pad** (`bool`, *optional*, defaults to `True`) ‚Äî Controls whether to pad
    the image to the largest image in a batch and create a pixel mask. Can be overridden
    by the `do_pad` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructs a Detr image processor.
  prefs: []
  type: TYPE_NORMAL
- en: '#### preprocess'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L1006)'
  prefs: []
  type: TYPE_NORMAL
- en: '( images: Union annotations: Union = None return_segmentation_masks: bool =
    None masks_path: Union = None do_resize: Optional = None size: Optional = None
    resample = None do_rescale: Optional = None rescale_factor: Union = None do_normalize:
    Optional = None image_mean: Union = None image_std: Union = None do_pad: Optional
    = None format: Union = None return_tensors: Union = None data_format: Union =
    <ChannelDimension.FIRST: ''channels_first''> input_data_format: Union = None **kwargs
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**images** (`ImageInput`) ‚Äî Image or batch of images to preprocess. Expects
    a single or batch of images with pixel values ranging from 0 to 255\. If passing
    in images with pixel values between 0 and 1, set `do_rescale=False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**annotations** (`AnnotationType` or `List[AnnotationType]`, *optional*) ‚Äî
    List of annotations associated with the image or batch of images. If annotation
    is for object detection, the annotations should be a dictionary with the following
    keys:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚Äúimage_id‚Äù (`int`): The image id.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚Äúannotations‚Äù (`List[Dict]`): List of annotations for an image. Each annotation
    should be a dictionary. An image can have no annotations, in which case the list
    should be empty. If annotation is for segmentation, the annotations should be
    a dictionary with the following keys:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚Äúimage_id‚Äù (`int`): The image id.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚Äúsegments_info‚Äù (`List[Dict]`): List of segments for an image. Each segment
    should be a dictionary. An image can have no segments, in which case the list
    should be empty.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '‚Äúfile_name‚Äù (`str`): The file name of the image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_segmentation_masks** (`bool`, *optional*, defaults to self.return_segmentation_masks)
    ‚Äî Whether to return segmentation masks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**masks_path** (`str` or `pathlib.Path`, *optional*) ‚Äî Path to the directory
    containing the segmentation masks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_resize** (`bool`, *optional*, defaults to self.do_resize) ‚Äî Whether to
    resize the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size** (`Dict[str, int]`, *optional*, defaults to self.size) ‚Äî Size of the
    image after resizing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**resample** (`PILImageResampling`, *optional*, defaults to self.resample)
    ‚Äî Resampling filter to use when resizing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_rescale** (`bool`, *optional*, defaults to self.do_rescale) ‚Äî Whether
    to rescale the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rescale_factor** (`float`, *optional*, defaults to self.rescale_factor) ‚Äî
    Rescale factor to use when rescaling the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_normalize** (`bool`, *optional*, defaults to self.do_normalize) ‚Äî Whether
    to normalize the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_mean** (`float` or `List[float]`, *optional*, defaults to self.image_mean)
    ‚Äî Mean to use when normalizing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_std** (`float` or `List[float]`, *optional*, defaults to self.image_std)
    ‚Äî Standard deviation to use when normalizing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_pad** (`bool`, *optional*, defaults to self.do_pad) ‚Äî Whether to pad the
    image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**format** (`str` or `AnnotationFormat`, *optional*, defaults to self.format)
    ‚Äî Format of the annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_tensors** (`str` or `TensorType`, *optional*, defaults to self.return_tensors)
    ‚Äî Type of tensors to return. If `None`, will return the list of images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_format** (`str` or `ChannelDimension`, *optional*, defaults to self.data_format)
    ‚Äî The channel dimension format of the image. If not provided, it will be the same
    as the input image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_data_format** (`ChannelDimension` or `str`, *optional*) ‚Äî The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocess an image or a batch of images so that it can be used by the model.
  prefs: []
  type: TYPE_NORMAL
- en: '#### pad'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L951)'
  prefs: []
  type: TYPE_NORMAL
- en: '( images: List constant_values: Union = 0 return_pixel_mask: bool = False return_tensors:
    Union = None data_format: Optional = None input_data_format: Union = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**image** (`np.ndarray`) ‚Äî Image to pad.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**constant_values** (`float` or `Iterable[float]`, *optional*) ‚Äî The value
    to use for the padding if `mode` is `"constant"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_pixel_mask** (`bool`, *optional*, defaults to `True`) ‚Äî Whether to
    return a pixel mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_tensors** (`str` or `TensorType`, *optional*) ‚Äî The type of tensors
    to return. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Return a list of `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_format** (`str` or `ChannelDimension`, *optional*) ‚Äî The channel dimension
    format of the image. If not provided, it will be the same as the input image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_data_format** (`ChannelDimension` or `str`, *optional*) ‚Äî The channel
    dimension format of the input image. If not provided, it will be inferred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pads a batch of images to the bottom and right of the image with zeros to the
    size of largest height and width in the batch and optionally returns their corresponding
    pixel mask.
  prefs: []
  type: TYPE_NORMAL
- en: '#### post_process_object_detection'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L1274)'
  prefs: []
  type: TYPE_NORMAL
- en: '( outputs threshold: float = 0.5 target_sizes: Union = None ) ‚Üí `List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**outputs** (`YolosObjectDetectionOutput`) ‚Äî Raw outputs of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**threshold** (`float`, *optional*) ‚Äî Score threshold to keep object detection
    predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target_sizes** (`torch.Tensor` or `List[Tuple[int, int]]`, *optional*) ‚Äî
    Tensor of shape `(batch_size, 2)` or list of tuples (`Tuple[int, int]`) containing
    the target size `(height, width)` of each image in the batch. If unset, predictions
    will not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries, each dictionary containing the scores, labels and boxes
    for an image in the batch as predicted by the model.
  prefs: []
  type: TYPE_NORMAL
- en: Converts the raw output of [YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)
    into final bounding boxes in (top_left_x, top_left_y, bottom_right_x, bottom_right_y)
    format. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: YolosFeatureExtractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.YolosFeatureExtractor'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/feature_extraction_yolos.py#L36)'
  prefs: []
  type: TYPE_NORMAL
- en: ( *args **kwargs )
  prefs: []
  type: TYPE_NORMAL
- en: '#### __call__'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
  prefs: []
  type: TYPE_NORMAL
- en: ( images **kwargs )
  prefs: []
  type: TYPE_NORMAL
- en: Preprocess an image or a batch of images.
  prefs: []
  type: TYPE_NORMAL
- en: '#### pad'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L951)'
  prefs: []
  type: TYPE_NORMAL
- en: '( images: List constant_values: Union = 0 return_pixel_mask: bool = False return_tensors:
    Union = None data_format: Optional = None input_data_format: Union = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**image** (`np.ndarray`) ‚Äî Image to pad.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**constant_values** (`float` or `Iterable[float]`, *optional*) ‚Äî The value
    to use for the padding if `mode` is `"constant"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_pixel_mask** (`bool`, *optional*, defaults to `True`) ‚Äî Whether to
    return a pixel mask.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_tensors** (`str` or `TensorType`, *optional*) ‚Äî The type of tensors
    to return. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Return a list of `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_format** (`str` or `ChannelDimension`, *optional*) ‚Äî The channel dimension
    format of the image. If not provided, it will be the same as the input image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_data_format** (`ChannelDimension` or `str`, *optional*) ‚Äî The channel
    dimension format of the input image. If not provided, it will be inferred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pads a batch of images to the bottom and right of the image with zeros to the
    size of largest height and width in the batch and optionally returns their corresponding
    pixel mask.
  prefs: []
  type: TYPE_NORMAL
- en: '#### post_process_object_detection'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L1274)'
  prefs: []
  type: TYPE_NORMAL
- en: '( outputs threshold: float = 0.5 target_sizes: Union = None ) ‚Üí `List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**outputs** (`YolosObjectDetectionOutput`) ‚Äî Raw outputs of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**threshold** (`float`, *optional*) ‚Äî Score threshold to keep object detection
    predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target_sizes** (`torch.Tensor` or `List[Tuple[int, int]]`, *optional*) ‚Äî
    Tensor of shape `(batch_size, 2)` or list of tuples (`Tuple[int, int]`) containing
    the target size `(height, width)` of each image in the batch. If unset, predictions
    will not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of dictionaries, each dictionary containing the scores, labels and boxes
    for an image in the batch as predicted by the model.
  prefs: []
  type: TYPE_NORMAL
- en: Converts the raw output of [YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)
    into final bounding boxes in (top_left_x, top_left_y, bottom_right_x, bottom_right_y)
    format. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: YolosModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.YolosModel'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L583)'
  prefs: []
  type: TYPE_NORMAL
- en: '( config: YolosConfig add_pooling_layer: bool = True )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**config** ([YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bare YOLOS Model transformer outputting raw hidden-states without any specific
    head on top. This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L615)'
  prefs: []
  type: TYPE_NORMAL
- en: '( pixel_values: Optional = None head_mask: Optional = None output_attentions:
    Optional = None output_hidden_states: Optional = None return_dict: Optional =
    None ) ‚Üí [transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**pixel_values** (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) ‚Äî Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [YolosImageProcessor.**call**()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**head_mask** (`torch.FloatTensor` of shape `(num_heads,)` or `(num_layers,
    num_heads)`, *optional*) ‚Äî Mask to nullify selected heads of the self-attention
    modules. Mask values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 indicates the head is **not masked**,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 indicates the head is **masked**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_attentions** (`bool`, *optional*) ‚Äî Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_hidden_states** (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`) ‚Äî Sequence of hidden-states at the output of the last layer of
    the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pooler_output** (`torch.FloatTensor` of shape `(batch_size, hidden_size)`)
    ‚Äî Last layer hidden-state of the first token of the sequence (classification token)
    after further processing through the layers used for the auxiliary pretraining
    task. E.g. for BERT-family of models, this returns the classification token after
    processing through a linear layer and a tanh activation function. The linear layer
    weights are trained from the next sentence prediction (classification) objective
    during pretraining.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights after the attention softmax, used to compute the weighted
    average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [YolosModel](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosModel)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: YolosForObjectDetection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.YolosForObjectDetection'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L689)'
  prefs: []
  type: TYPE_NORMAL
- en: '( config: YolosConfig )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**config** ([YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YOLOS Model (consisting of a ViT encoder) with object detection heads on top,
    for tasks such as COCO detection.
  prefs: []
  type: TYPE_NORMAL
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L722)'
  prefs: []
  type: TYPE_NORMAL
- en: '( pixel_values: FloatTensor labels: Optional = None output_attentions: Optional
    = None output_hidden_states: Optional = None return_dict: Optional = None ) ‚Üí
    `transformers.models.yolos.modeling_yolos.YolosObjectDetectionOutput` or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**pixel_values** (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) ‚Äî Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [YolosImageProcessor.**call**()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**head_mask** (`torch.FloatTensor` of shape `(num_heads,)` or `(num_layers,
    num_heads)`, *optional*) ‚Äî Mask to nullify selected heads of the self-attention
    modules. Mask values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 indicates the head is **not masked**,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 indicates the head is **masked**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_attentions** (`bool`, *optional*) ‚Äî Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_hidden_states** (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**labels** (`List[Dict]` of len `(batch_size,)`, *optional*) ‚Äî Labels for computing
    the bipartite matching loss. List of dicts, each dictionary containing at least
    the following 2 keys: `''class_labels''` and `''boxes''` (the class labels and
    bounding boxes of an image in the batch respectively). The class labels themselves
    should be a `torch.LongTensor` of len `(number of bounding boxes in the image,)`
    and the boxes a `torch.FloatTensor` of shape `(number of bounding boxes in the
    image, 4)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.yolos.modeling_yolos.YolosObjectDetectionOutput` or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.yolos.modeling_yolos.YolosObjectDetectionOutput` or a
    tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**loss** (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    are provided)) ‚Äî Total loss as a linear combination of a negative log-likehood
    (cross-entropy) for class prediction and a bounding box loss. The latter is defined
    as a linear combination of the L1 loss and the generalized scale-invariant IoU
    loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**loss_dict** (`Dict`, *optional*) ‚Äî A dictionary containing the individual
    losses. Useful for logging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**logits** (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes
    + 1)`) ‚Äî Classification logits (including no-object) for all queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pred_boxes** (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`)
    ‚Äî Normalized boxes coordinates for all queries, represented as (center_x, center_y,
    width, height). These values are normalized in [0, 1], relative to the size of
    each individual image in the batch (disregarding possible padding). You can use
    `post_process()` to retrieve the unnormalized bounding boxes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**auxiliary_outputs** (`list[Dict]`, *optional*) ‚Äî Optional, only returned
    when auxilary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)
    and labels are provided. It is a list of dictionaries containing the two above
    keys (`logits` and `pred_boxes`) for each decoder layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) ‚Äî Sequence of hidden-states at the output of the last
    layer of the decoder of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Attentions weights after the attention softmax, used to compute the weighted average
    in the self-attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
