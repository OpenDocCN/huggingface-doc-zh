- en: YOLOS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YOLOS
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/yolos](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/yolos)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/yolos](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/yolos)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: 'The YOLOS model was proposed in [You Only Look at One Sequence: Rethinking
    Transformer in Vision through Object Detection](https://arxiv.org/abs/2106.00666)
    by Yuxin Fang, Bencheng Liao, Xinggang Wang, Jiemin Fang, Jiyang Qi, Rui Wu, Jianwei
    Niu, Wenyu Liu. YOLOS proposes to just leverage the plain [Vision Transformer
    (ViT)](vit) for object detection, inspired by DETR. It turns out that a base-sized
    encoder-only Transformer can also achieve 42 AP on COCO, similar to DETR and much
    more complex frameworks such as Faster R-CNN.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 'YOLOS模型是由Yuxin Fang、Bencheng Liao、Xinggang Wang、Jiemin Fang、Jiyang Qi、Rui Wu、Jianwei
    Niu、Wenyu Liu在[You Only Look at One Sequence: Rethinking Transformer in Vision
    through Object Detection](https://arxiv.org/abs/2106.00666)中提出的。YOLOS建议仅利用普通的[Vision
    Transformer (ViT)](vit)进行目标检测，受到DETR的启发。结果表明，仅使用基本大小的仅编码器Transformer也可以在COCO上实现42
    AP，类似于DETR和更复杂的框架，如Faster R-CNN。'
- en: 'The abstract from the paper is the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 论文摘要如下：
- en: '*Can Transformer perform 2D object- and region-level recognition from a pure
    sequence-to-sequence perspective with minimal knowledge about the 2D spatial structure?
    To answer this question, we present You Only Look at One Sequence (YOLOS), a series
    of object detection models based on the vanilla Vision Transformer with the fewest
    possible modifications, region priors, as well as inductive biases of the target
    task. We find that YOLOS pre-trained on the mid-sized ImageNet-1k dataset only
    can already achieve quite competitive performance on the challenging COCO object
    detection benchmark, e.g., YOLOS-Base directly adopted from BERT-Base architecture
    can obtain 42.0 box AP on COCO val. We also discuss the impacts as well as limitations
    of current pre-train schemes and model scaling strategies for Transformer in vision
    through YOLOS.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Transformer能否从纯序列到序列的角度执行2D对象和区域级别的识别，而对2D空间结构的了解很少？为了回答这个问题，我们提出了You Only Look
    at One Sequence (YOLOS)，这是一系列基于普通Vision Transformer的目标检测模型，只进行了最少的修改、区域先验以及目标任务的归纳偏差。我们发现，仅在中等规模的ImageNet-1k数据集上预训练的YOLOS模型已经可以在具有挑战性的COCO目标检测基准上取得相当有竞争力的性能，例如，直接采用BERT-Base架构的YOLOS-Base在COCO
    val上可以获得42.0的box AP。我们还通过YOLOS讨论了当前预训练方案和Transformer视觉模型扩展策略的影响以及局限性。
- en: '![drawing](../Images/b49c1370806db7d0d200d783ed143c9f.png) YOLOS architecture.
    Taken from the [original paper](https://arxiv.org/abs/2106.00666).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![drawing](../Images/b49c1370806db7d0d200d783ed143c9f.png) YOLOS架构。摘自[原始论文](https://arxiv.org/abs/2106.00666)。'
- en: This model was contributed by [nielsr](https://huggingface.co/nielsr). The original
    code can be found [here](https://github.com/hustvl/YOLOS).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型由[nielsr](https://huggingface.co/nielsr)贡献。原始代码可以在[这里](https://github.com/hustvl/YOLOS)找到。
- en: Resources
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: A list of official Hugging Face and community (indicated by 🌎) resources to
    help you get started with YOLOS.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 官方Hugging Face和社区（由🌎表示）资源列表，可帮助您开始使用YOLOS。
- en: Object Detection
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目标检测
- en: All example notebooks illustrating inference + fine-tuning [YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)
    on a custom dataset can be found [here](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/YOLOS).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有演示推断+微调[YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)在自定义数据集上的示例笔记本可以在[这里](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/YOLOS)找到。
- en: 'See also: [Object detection task guide](../tasks/object_detection)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另请参阅：[目标检测任务指南](../tasks/object_detection)
- en: If you’re interested in submitting a resource to be included here, please feel
    free to open a Pull Request and we’ll review it! The resource should ideally demonstrate
    something new instead of duplicating an existing resource.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣提交资源以包含在此处，请随时提交拉取请求，我们将进行审核！资源应该展示一些新内容，而不是重复现有资源。
- en: Use [YolosImageProcessor](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosImageProcessor)
    for preparing images (and optional targets) for the model. Contrary to [DETR](detr),
    YOLOS doesn’t require a `pixel_mask` to be created.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[YolosImageProcessor](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosImageProcessor)来为模型准备图像（和可选目标）。与[DETR](detr)相反，YOLOS不需要创建`pixel_mask`。
- en: YolosConfig
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YolosConfig
- en: '### `class transformers.YolosConfig`'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.YolosConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/configuration_yolos.py#L35)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/configuration_yolos.py#L35)'
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`hidden_size` (`int`, *optional*, defaults to 768) — Dimensionality of the
    encoder layers and the pooler layer.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_size`（`int`，*可选*，默认为768）— 编码器层和池化层的维度。'
- en: '`num_hidden_layers` (`int`, *optional*, defaults to 12) — Number of hidden
    layers in the Transformer encoder.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_hidden_layers`（`int`，*可选*，默认为12）— Transformer编码器中的隐藏层数量。'
- en: '`num_attention_heads` (`int`, *optional*, defaults to 12) — Number of attention
    heads for each attention layer in the Transformer encoder.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_attention_heads`（`int`，*可选*，默认为12）— Transformer编码器中每个注意力层的注意力头数。'
- en: '`intermediate_size` (`int`, *optional*, defaults to 3072) — Dimensionality
    of the “intermediate” (i.e., feed-forward) layer in the Transformer encoder.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`intermediate_size`（`int`，*可选*，默认为3072）— Transformer编码器中“中间”（即前馈）层的维度。'
- en: '`hidden_act` (`str` or `function`, *optional*, defaults to `"gelu"`) — The
    non-linear activation function (function or string) in the encoder and pooler.
    If string, `"gelu"`, `"relu"`, `"selu"` and `"gelu_new"` are supported.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_act`（`str`或`function`，*可选*，默认为`"gelu"`）— 编码器和池化器中的非线性激活函数（函数或字符串）。如果是字符串，支持`"gelu"`、`"relu"`、`"selu"`和`"gelu_new"`。'
- en: '`hidden_dropout_prob` (`float`, *optional*, defaults to 0.0) — The dropout
    probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_dropout_prob`（`float`，*可选*，默认为0.0）— 嵌入层、编码器和池化器中所有全连接层的dropout概率。'
- en: '`attention_probs_dropout_prob` (`float`, *optional*, defaults to 0.0) — The
    dropout ratio for the attention probabilities.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_probs_dropout_prob` (`float`, *optional*, 默认为0.0) — 注意力概率的丢失比率。'
- en: '`initializer_range` (`float`, *optional*, defaults to 0.02) — The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_range` (`float`, *optional*, 默认为0.02) — 用于初始化所有权重矩阵的截断正态初始化器的标准差。'
- en: '`layer_norm_eps` (`float`, *optional*, defaults to 1e-12) — The epsilon used
    by the layer normalization layers.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layer_norm_eps` (`float`, *optional*, 默认为1e-12) — 层归一化层使用的epsilon。'
- en: '`image_size` (`List[int]`, *optional*, defaults to `[512, 864]`) — The size
    (resolution) of each image.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_size` (`List[int]`, *optional*, 默认为`[512, 864]`) — 每个图像的大小（分辨率）。'
- en: '`patch_size` (`int`, *optional*, defaults to 16) — The size (resolution) of
    each patch.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`patch_size` (`int`, *optional*, 默认为16) — 每个补丁的大小（分辨率）。'
- en: '`num_channels` (`int`, *optional*, defaults to 3) — The number of input channels.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_channels` (`int`, *optional*, 默认为3) — 输入通道的数量。'
- en: '`qkv_bias` (`bool`, *optional*, defaults to `True`) — Whether to add a bias
    to the queries, keys and values.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qkv_bias` (`bool`, *optional*, 默认为`True`) — 是否为查询、键和值添加偏置。'
- en: '`num_detection_tokens` (`int`, *optional*, defaults to 100) — The number of
    detection tokens.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_detection_tokens` (`int`, *optional*, 默认为100) — 检测令牌的数量。'
- en: '`use_mid_position_embeddings` (`bool`, *optional*, defaults to `True`) — Whether
    to use the mid-layer position encodings.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_mid_position_embeddings` (`bool`, *optional*, 默认为`True`) — 是否使用中间层位置编码。'
- en: '`auxiliary_loss` (`bool`, *optional*, defaults to `False`) — Whether auxiliary
    decoding losses (loss at each decoder layer) are to be used.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auxiliary_loss` (`bool`, *optional*, 默认为`False`) — 是否使用辅助解码损失（每个解码器层的损失）。'
- en: '`class_cost` (`float`, *optional*, defaults to 1) — Relative weight of the
    classification error in the Hungarian matching cost.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_cost` (`float`, *optional*, 默认为1) — 匈牙利匹配成本中分类错误的相对权重。'
- en: '`bbox_cost` (`float`, *optional*, defaults to 5) — Relative weight of the L1
    error of the bounding box coordinates in the Hungarian matching cost.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bbox_cost` (`float`, *optional*, 默认为5) — 匈牙利匹配成本中边界框坐标的L1误差的相对权重。'
- en: '`giou_cost` (`float`, *optional*, defaults to 2) — Relative weight of the generalized
    IoU loss of the bounding box in the Hungarian matching cost.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YolosImageProcessor
- en: '`bbox_loss_coefficient` (`float`, *optional*, defaults to 5) — Relative weight
    of the L1 bounding box loss in the object detection loss.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bbox_loss_coefficient` (`float`, *optional*, 默认为5) — 目标检测损失中L1边界框损失的相对权重。'
- en: '`giou_loss_coefficient` (`float`, *optional*, defaults to 2) — Relative weight
    of the generalized IoU loss in the object detection loss.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`giou_loss_coefficient` (`float`, *optional*, 默认为2) — 目标检测损失中广义IoU损失的相对权重。'
- en: '`eos_coefficient` (`float`, *optional*, defaults to 0.1) — Relative classification
    weight of the ‘no-object’ class in the object detection loss.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eos_coefficient` (`float`, *optional*, 默认为0.1) — 目标检测损失中“无对象”类的相对分类权重。'
- en: This is the configuration class to store the configuration of a [YolosModel](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosModel).
    It is used to instantiate a YOLOS model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the YOLOS [hustvl/yolos-base](https://huggingface.co/hustvl/yolos-base)
    architecture.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个配置类，用于存储[YolosModel](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosModel)的配置。根据指定的参数实例化一个YOLOS模型，定义模型架构。使用默认值实例化配置将产生类似于YOLOS
    [hustvl/yolos-base](https://huggingface.co/hustvl/yolos-base)架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)的文档以获取更多信息。
- en: 'Example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: YolosImageProcessor
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`giou_cost` (`float`, *optional*, 默认为2) — 广义IoU损失在匈牙利匹配成本中边界框的相对权重。'
- en: '### `class transformers.YolosImageProcessor`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.YolosImageProcessor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L668)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L668)'
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`format` (`str`, *optional*, defaults to `"coco_detection"`) — Data format
    of the annotations. One of “coco_detection” or “coco_panoptic”.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format` (`str`, *optional*, 默认为`"coco_detection"`) — 注释的数据格式。为“coco_detection”或“coco_panoptic”之一。'
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) — Controls whether to
    resize the image’s (height, width) dimensions to the specified `size`. Can be
    overridden by the `do_resize` parameter in the `preprocess` method.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`, *optional*, 默认为`True`) — 控制是否将图像的（高度，宽度）维度调整为指定的`size`。可以被`preprocess`方法中的`do_resize`参数覆盖。'
- en: '`size` (`Dict[str, int]` *optional*, defaults to `{"shortest_edge" -- 800,
    "longest_edge": 1333}`): Size of the image’s (height, width) dimensions after
    resizing. Can be overridden by the `size` parameter in the `preprocess` method.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]` *optional*, 默认为`{"shortest_edge" -- 800, "longest_edge":
    1333}`): 调整大小后的图像（高度，宽度）维度。可以被`preprocess`方法中的`size`参数覆盖。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `PILImageResampling.BILINEAR`)
    — Resampling filter to use if resizing the image.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`PILImageResampling`, *optional*, 默认为`PILImageResampling.BILINEAR`)
    — 如果调整图像大小，则要使用的重采样滤波器。'
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) — Controls whether to
    rescale the image by the specified scale `rescale_factor`. Can be overridden by
    the `do_rescale` parameter in the `preprocess` method.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale` (`bool`, *optional*, 默认为`True`) — 控制是否按指定比例`rescale_factor`重新缩放图像。可以被`preprocess`方法中的`do_rescale`参数覆盖。'
- en: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) — Scale
    factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method. do_normalize — Controls whether to normalize
    the image. Can be overridden by the `do_normalize` parameter in the `preprocess`
    method.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) — 如果重新缩放图像要使用的比例因子。可以被`preprocess`方法中的`rescale_factor`参数覆盖。do_normalize
    — 控制是否对图像进行归一化。可以被`preprocess`方法中的`do_normalize`参数覆盖。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_DEFAULT_MEAN`)
    — Mean values to use when normalizing the image. Can be a single value or a list
    of values, one for each channel. Can be overridden by the `image_mean` parameter
    in the `preprocess` method.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_DEFAULT_MEAN`)
    — 在归一化图像时使用的均值。可以是单个值或每个通道的值列表。可以被`preprocess`方法中的`image_mean`参数覆盖。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_DEFAULT_STD`)
    — Standard deviation values to use when normalizing the image. Can be a single
    value or a list of values, one for each channel. Can be overridden by the `image_std`
    parameter in the `preprocess` method.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_DEFAULT_STD`)
    — 在归一化图像时使用的标准差值。可以是单个值或每个通道的值列表。可以被`preprocess`方法中的`image_std`参数覆盖。'
- en: '`do_pad` (`bool`, *optional*, defaults to `True`) — Controls whether to pad
    the image to the largest image in a batch and create a pixel mask. Can be overridden
    by the `do_pad` parameter in the `preprocess` method.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_pad` (`bool`, *optional*, defaults to `True`) — 控制是否对图像进行填充以适应批次中最大的图像并创建像素掩模。可以被`preprocess`方法中的`do_pad`参数覆盖。'
- en: Constructs a Detr image processor.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个Detr图像处理器。
- en: '#### `preprocess`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `preprocess`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L1006)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L1006)'
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`images` (`ImageInput`) — Image or batch of images to preprocess. Expects a
    single or batch of images with pixel values ranging from 0 to 255\. If passing
    in images with pixel values between 0 and 1, set `do_rescale=False`.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images` (`ImageInput`) — 要预处理的图像或图像批次。期望单个图像或像素值范围从0到255的图像批次。如果传入像素值在0到1之间的图像，请设置`do_rescale=False`。'
- en: '`annotations` (`AnnotationType` or `List[AnnotationType]`, *optional*) — List
    of annotations associated with the image or batch of images. If annotation is
    for object detection, the annotations should be a dictionary with the following
    keys:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`annotations` (`AnnotationType` or `List[AnnotationType]`, *optional*) — 与图像或图像批次关联的注释列表。如果注释用于目标检测，注释应该是一个具有以下键的字典：'
- en: '“image_id” (`int`): The image id.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“image_id” (`int`): 图像的ID。'
- en: '“annotations” (`List[Dict]`): List of annotations for an image. Each annotation
    should be a dictionary. An image can have no annotations, in which case the list
    should be empty. If annotation is for segmentation, the annotations should be
    a dictionary with the following keys:'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“annotations” (`List[Dict]`): 图像的注释列表。每个注释应该是一个字典。一个图像可以没有注释，此时列表应为空。如果注释用于分割，注释应该是一个具有以下键的字典：'
- en: '“image_id” (`int`): The image id.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“image_id” (`int`): 图像的ID。'
- en: '“segments_info” (`List[Dict]`): List of segments for an image. Each segment
    should be a dictionary. An image can have no segments, in which case the list
    should be empty.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“segments_info” (`List[Dict]`): 图像的段列表。每个段应该是一个字典。一个图像可以没有段，此时列表应为空。'
- en: '“file_name” (`str`): The file name of the image.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '“file_name” (`str`): 图像的文件名。'
- en: '`return_segmentation_masks` (`bool`, *optional*, defaults to self.return_segmentation_masks)
    — Whether to return segmentation masks.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_segmentation_masks` (`bool`, *optional*, defaults to self.return_segmentation_masks)
    — 是否返回分割掩模。'
- en: '`masks_path` (`str` or `pathlib.Path`, *optional*) — Path to the directory
    containing the segmentation masks.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`masks_path` (`str` or `pathlib.Path`, *optional*) — 包含分割掩模的目录路径。'
- en: '`do_resize` (`bool`, *optional*, defaults to self.do_resize) — Whether to resize
    the image.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`, *optional*, defaults to self.do_resize) — 是否调整图像大小。'
- en: '`size` (`Dict[str, int]`, *optional*, defaults to self.size) — Size of the
    image after resizing.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]`, *optional*, defaults to self.size) — 调整大小后的图像尺寸。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to self.resample) —
    Resampling filter to use when resizing the image.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`PILImageResampling`, *optional*, defaults to self.resample) —
    调整图像大小时使用的重采样滤波器。'
- en: '`do_rescale` (`bool`, *optional*, defaults to self.do_rescale) — Whether to
    rescale the image.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale` (`bool`, *optional*, defaults to self.do_rescale) — 是否重新缩放图像。'
- en: '`rescale_factor` (`float`, *optional*, defaults to self.rescale_factor) — Rescale
    factor to use when rescaling the image.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor` (`float`, *optional*, defaults to self.rescale_factor) — 调整图像时使用的缩放因子。'
- en: '`do_normalize` (`bool`, *optional*, defaults to self.do_normalize) — Whether
    to normalize the image.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize` (`bool`, *optional*, defaults to self.do_normalize) — 是否对图像进行归一化。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to self.image_mean)
    — Mean to use when normalizing the image.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean` (`float` or `List[float]`, *optional*, defaults to self.image_mean)
    — 在归一化图像时使用的均值。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to self.image_std)
    — Standard deviation to use when normalizing the image.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` or `List[float]`, *optional*, defaults to self.image_std)
    — 在归一化图像时使用的标准差。'
- en: '`do_pad` (`bool`, *optional*, defaults to self.do_pad) — Whether to pad the
    image.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_pad` (`bool`, *optional*, defaults to self.do_pad) — 是否对图像进行填充。'
- en: '`format` (`str` or `AnnotationFormat`, *optional*, defaults to self.format)
    — Format of the annotations.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format` (`str` or `AnnotationFormat`, *optional*, defaults to self.format)
    — 注释的格式。'
- en: '`return_tensors` (`str` or `TensorType`, *optional*, defaults to self.return_tensors)
    — Type of tensors to return. If `None`, will return the list of images.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors` (`str` or `TensorType`, *optional*, defaults to self.return_tensors)
    — 要返回的张量类型。如果为`None`，将返回图像列表。'
- en: '`data_format` (`str` or `ChannelDimension`, *optional*, defaults to self.data_format)
    — The channel dimension format of the image. If not provided, it will be the same
    as the input image.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_format` (`str` 或 `ChannelDimension`，*可选*，默认为 self.data_format) — 图像的通道维度格式。如果未提供，则与输入图像相同。'
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) — The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_data_format` (`ChannelDimension` 或 `str`，*可选*) — 输入图像的通道维度格式。如果未设置，通道维度格式将从输入图像中推断。可以是以下之一：'
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_first"` 或 `ChannelDimension.FIRST`：图像以 (num_channels, height, width)
    格式。'
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_last"` 或 `ChannelDimension.LAST`：图像以 (height, width, num_channels)
    格式。'
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"none"` 或 `ChannelDimension.NONE`：图像以 (height, width) 格式。'
- en: Preprocess an image or a batch of images so that it can be used by the model.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 对图像或图像批次进行预处理，以便可以被模型使用。
- en: '#### `pad`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `pad`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L951)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L951)'
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`image` (`np.ndarray`) — Image to pad.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image` (`np.ndarray`) — 要填充的图像。'
- en: '`constant_values` (`float` or `Iterable[float]`, *optional*) — The value to
    use for the padding if `mode` is `"constant"`.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constant_values` (`float` 或 `Iterable[float]`，*可选*) — 如果 `mode` 是 `"constant"`，则用于填充的值。'
- en: '`return_pixel_mask` (`bool`, *optional*, defaults to `True`) — Whether to return
    a pixel mask.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_pixel_mask` (`bool`，*可选*，默认为 `True`) — 是否返回像素掩码。'
- en: '`return_tensors` (`str` or `TensorType`, *optional*) — The type of tensors
    to return. Can be one of:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors` (`str` 或 `TensorType`，*可选*) — 要返回的张量类型。可以是以下之一：'
- en: 'Unset: Return a list of `np.ndarray`.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未设置：返回一个 `np.ndarray` 列表。
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.TENSORFLOW` 或 `''tf''`：返回一个 `tf.Tensor` 类型的批次。'
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.PYTORCH` 或 `''pt''`：返回一个 `torch.Tensor` 类型的批次。'
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.NUMPY` 或 `''np''`：返回一个 `np.ndarray` 类型的批次。'
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.JAX` 或 `''jax''`：返回一个 `jax.numpy.ndarray` 类型的批次。'
- en: '`data_format` (`str` or `ChannelDimension`, *optional*) — The channel dimension
    format of the image. If not provided, it will be the same as the input image.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_format` (`str` 或 `ChannelDimension`，*可选*) — 图像的通道维度格式。如果未提供，则与输入图像相同。'
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) — The channel
    dimension format of the input image. If not provided, it will be inferred.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_data_format` (`ChannelDimension` 或 `str`，*可选*) — 输入图像的通道维度格式。如果未提供，则将被推断。'
- en: Pads a batch of images to the bottom and right of the image with zeros to the
    size of largest height and width in the batch and optionally returns their corresponding
    pixel mask.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像批次填充到图像的底部和右侧，用零填充到批次中最大高度和宽度的大小，并可选择返回它们对应的像素掩码。
- en: '#### `post_process_object_detection`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `post_process_object_detection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L1274)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L1274)'
- en: '[PRE5]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`outputs` (`YolosObjectDetectionOutput`) — Raw outputs of the model.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs` (`YolosObjectDetectionOutput`) — 模型的原始输出。'
- en: '`threshold` (`float`, *optional*) — Score threshold to keep object detection
    predictions.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold` (`float`，*可选*) — 保留对象检测预测的分数阈值。'
- en: '`target_sizes` (`torch.Tensor` or `List[Tuple[int, int]]`, *optional*) — Tensor
    of shape `(batch_size, 2)` or list of tuples (`Tuple[int, int]`) containing the
    target size `(height, width)` of each image in the batch. If unset, predictions
    will not be resized.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_sizes` (`torch.Tensor` 或 `List[Tuple[int, int]]`，*可选*) — 形状为 `(batch_size,
    2)` 的张量或包含批次中每个图像目标大小 `(height, width)` 的元组列表 (`Tuple[int, int]`)。如果未设置，预测将不会被调整大小。'
- en: Returns
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[Dict]`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[Dict]`'
- en: A list of dictionaries, each dictionary containing the scores, labels and boxes
    for an image in the batch as predicted by the model.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个字典包含模型预测的批次中图像的分数、标签和框。
- en: Converts the raw output of [YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)
    into final bounding boxes in (top_left_x, top_left_y, bottom_right_x, bottom_right_y)
    format. Only supports PyTorch.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)
    的原始输出转换为最终的边界框，格式为 (top_left_x, top_left_y, bottom_right_x, bottom_right_y)。仅支持
    PyTorch。
- en: YolosFeatureExtractor
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YolosFeatureExtractor
- en: '### `class transformers.YolosFeatureExtractor`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.YolosFeatureExtractor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/feature_extraction_yolos.py#L36)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/feature_extraction_yolos.py#L36)'
- en: '[PRE6]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '#### `__call__`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `__call__`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Preprocess an image or a batch of images.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理图像或图像批次。
- en: '#### `pad`'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `pad`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L951)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L951)'
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Parameters
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`image` (`np.ndarray`) — Image to pad.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image` (`np.ndarray`) — 要填充的图像。'
- en: '`constant_values` (`float` or `Iterable[float]`, *optional*) — The value to
    use for the padding if `mode` is `"constant"`.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`constant_values` (`float` 或 `Iterable[float]`，*可选*) — 如果 `mode` 是 `"constant"`，则用于填充的值。'
- en: '`return_pixel_mask` (`bool`, *optional*, defaults to `True`) — Whether to return
    a pixel mask.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_pixel_mask` (`bool`，*可选*，默认为 `True`) — 是否返回像素掩码。'
- en: '`return_tensors` (`str` or `TensorType`, *optional*) — The type of tensors
    to return. Can be one of:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors` (`str` 或 `TensorType`，*可选*) — 要返回的张量类型。可以是以下之一：'
- en: 'Unset: Return a list of `np.ndarray`.'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未设置：返回一个 `np.ndarray` 列表。
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.TENSORFLOW` 或 `''tf''`：返回类型为 `tf.Tensor` 的批处理。'
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.PYTORCH` 或 `''pt''`：返回类型为 `torch.Tensor` 的批处理。'
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.NUMPY` 或 `''np''`：返回类型为 `np.ndarray` 的批处理。'
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.JAX` 或 `''jax''`：返回类型为 `jax.numpy.ndarray` 的批处理。'
- en: '`data_format` (`str` or `ChannelDimension`, *optional*) — The channel dimension
    format of the image. If not provided, it will be the same as the input image.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_format` (`str` 或 `ChannelDimension`，*可选*) — 图像的通道维度格式。如果未提供，将与输入图像相同。'
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) — The channel
    dimension format of the input image. If not provided, it will be inferred.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_data_format` (`ChannelDimension` 或 `str`，*可选*) — 输入图像的通道维度格式。如果未提供，将被推断。'
- en: Pads a batch of images to the bottom and right of the image with zeros to the
    size of largest height and width in the batch and optionally returns their corresponding
    pixel mask.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将图像批处理填充到图像的底部和右侧，用零填充到批处理中最大高度和宽度的大小，并可选择返回相应的像素掩码。
- en: '#### `post_process_object_detection`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `post_process_object_detection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L1274)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/image_processing_yolos.py#L1274)'
- en: '[PRE9]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Parameters
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`outputs` (`YolosObjectDetectionOutput`) — Raw outputs of the model.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs` (`YolosObjectDetectionOutput`) — 模型的原始输出。'
- en: '`threshold` (`float`, *optional*) — Score threshold to keep object detection
    predictions.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold` (`float`，*可选*) — 保留对象检测预测的分数阈值。'
- en: '`target_sizes` (`torch.Tensor` or `List[Tuple[int, int]]`, *optional*) — Tensor
    of shape `(batch_size, 2)` or list of tuples (`Tuple[int, int]`) containing the
    target size `(height, width)` of each image in the batch. If unset, predictions
    will not be resized.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_sizes` (`torch.Tensor` 或 `List[Tuple[int, int]]`，*可选*) — 形状为 `(batch_size,
    2)` 的张量或包含批处理中每个图像的目标大小 `(height, width)` 的元组列表 (`Tuple[int, int]`)。如果未设置，预测将不会被调整大小。'
- en: Returns
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[Dict]`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[Dict]`'
- en: A list of dictionaries, each dictionary containing the scores, labels and boxes
    for an image in the batch as predicted by the model.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个字典包含批处理中图像的预测得分、标签和框。
- en: Converts the raw output of [YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)
    into final bounding boxes in (top_left_x, top_left_y, bottom_right_x, bottom_right_y)
    format. Only supports PyTorch.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将 [YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)
    的原始输出转换为最终边界框，格式为 (左上角 x、左上角 y、右下角 x、右下角 y)。仅支持 PyTorch。
- en: YolosModel
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YolosModel
- en: '### `class transformers.YolosModel`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.YolosModel`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L583)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L583)'
- en: '[PRE10]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Parameters
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config` ([YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig))
    — 具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型关联的权重，只加载配置。查看 [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    方法以加载模型权重。'
- en: The bare YOLOS Model transformer outputting raw hidden-states without any specific
    head on top. This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 裸 YOLOS 模型变压器输出原始隐藏状态，没有特定的头部在顶部。此模型是 PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    的子类。将其用作常规的 PyTorch 模块，并参考 PyTorch 文档以获取有关一般用法和行为的所有相关信息。
- en: '#### `forward`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L615)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L615)'
- en: '[PRE11]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Parameters
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [YolosImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor`，形状为 `(batch_size, num_channels, height,
    width)`) — 像素值。像素值可以使用 [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor)
    获取。有关详细信息，请参见 [YolosImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)。'
- en: '`head_mask` (`torch.FloatTensor` of shape `(num_heads,)` or `(num_layers, num_heads)`,
    *optional*) — Mask to nullify selected heads of the self-attention modules. Mask
    values selected in `[0, 1]`:'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`head_mask` (`torch.FloatTensor`，形状为 `(num_heads,)` 或 `(num_layers, num_heads)`，*可选*)
    — 用于使自注意力模块中的选定头部失效的掩码。掩码值选定在 `[0, 1]` 中：'
- en: 1 indicates the head is `not masked`,
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 表示头部未被 `masked`，
- en: 0 indicates the head is `masked`.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0 表示头部是 `masked`。
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions` (`bool`，*可选*) — 是否返回所有注意力层的注意力张量。有关更多详细信息，请参见返回张量中的 `attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`，*可选*) — 是否返回所有层的隐藏状态。有关更多详细信息，请参见返回张量中的 `hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict`（`bool`，*可选*）— 是否返回一个[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是一个普通的元组。'
- en: Returns
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)
    or `tuple(torch.FloatTensor)`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)或`tuple(torch.FloatTensor)`'
- en: A [transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig))
    and inputs.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)或一个`torch.FloatTensor`的元组（如果传递了`return_dict=False`或当`config.return_dict=False`时），包括根据配置([YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig))和输入的不同元素。
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`) — Sequence of hidden-states at the output of the last layer of
    the model.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_hidden_state`（形状为`(batch_size, sequence_length, hidden_size)`的`torch.FloatTensor`）—
    模型最后一层的隐藏状态序列。'
- en: '`pooler_output` (`torch.FloatTensor` of shape `(batch_size, hidden_size)`)
    — Last layer hidden-state of the first token of the sequence (classification token)
    after further processing through the layers used for the auxiliary pretraining
    task. E.g. for BERT-family of models, this returns the classification token after
    processing through a linear layer and a tanh activation function. The linear layer
    weights are trained from the next sentence prediction (classification) objective
    during pretraining.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pooler_output`（形状为`(batch_size, hidden_size)`的`torch.FloatTensor`）— 经过用于辅助预训练任务的层进一步处理后的序列第一个标记（分类标记）的最后一层隐藏状态。例如，对于BERT系列模型，这返回经过线性层和tanh激活函数处理后的分类标记。线性层的权重是在预训练期间从下一个句子预测（分类）目标中训练的。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states`（`tuple(torch.FloatTensor)`，*可选*，当传递`output_hidden_states=True`或当`config.output_hidden_states=True`时返回）—
    形状为`(batch_size, sequence_length, hidden_size)`的`torch.FloatTensor`元组（如果模型有嵌入层，则为嵌入的输出+每一层的输出）。'
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模型在每一层的输出的隐藏状态加上可选的初始嵌入输出。
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attentions`（`tuple(torch.FloatTensor)`，*可选*，当传递`output_attentions=True`或当`config.output_attentions=True`时返回）—
    形状为`(batch_size, num_heads, sequence_length, sequence_length)`的`torch.FloatTensor`元组（每层一个）。'
- en: Attentions weights after the attention softmax, used to compute the weighted
    average in the self-attention heads.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在注意力softmax之后的注意力权重，用于计算自注意力头中的加权平均值。
- en: The [YolosModel](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosModel)
    forward method, overrides the `__call__` special method.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '[YolosModel](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosModel)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前向传递的方法需要在此函数内定义，但应该在此之后调用`Module`实例，而不是这个，因为前者负责运行预处理和后处理步骤，而后者会默默地忽略它们。
- en: 'Example:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE12]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: YolosForObjectDetection
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YolosForObjectDetection
- en: '### `class transformers.YolosForObjectDetection`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.YolosForObjectDetection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L689)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L689)'
- en: '[PRE13]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Parameters
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` ([YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`（[YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig)）—
    包含模型所有参数的模型配置类。使用配置文件初始化不会加载与模型相关的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: YOLOS Model (consisting of a ViT encoder) with object detection heads on top,
    for tasks such as COCO detection.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: YOLOS模型（包含ViT编码器），顶部带有目标检测头，用于诸如COCO检测之类的任务。
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型是PyTorch的[torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规的PyTorch模块，并参考PyTorch文档以获取与一般用法和行为相关的所有事项。
- en: '#### `forward`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L722)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/yolos/modeling_yolos.py#L722)'
- en: '[PRE14]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Parameters
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [YolosImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — 像素值。像素值可以使用[AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor)获得。有关详细信息，请参阅[YolosImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)。'
- en: '`head_mask` (`torch.FloatTensor` of shape `(num_heads,)` or `(num_layers, num_heads)`,
    *optional*) — Mask to nullify selected heads of the self-attention modules. Mask
    values selected in `[0, 1]`:'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`head_mask` (`torch.FloatTensor` of shape `(num_heads,)` or `(num_layers, num_heads)`,
    *optional*) — 用于使自注意力模块的选定头部失效的掩码。掩码值选定在`[0, 1]`范围内：'
- en: 1 indicates the head is `not masked`,
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1表示头部未被`masked`，
- en: 0 indicates the head is `masked`.
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0表示头部被`masked`。
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions` (`bool`, *optional*) — 是否返回所有注意力层的注意力张量。有关更多详细信息，请参阅返回张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`, *optional*) — 是否返回所有层的隐藏状态。有关更多详细信息，请参阅返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *optional*) — 是否返回一个[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是一个普通元组。'
- en: '`labels` (`List[Dict]` of len `(batch_size,)`, *optional*) — Labels for computing
    the bipartite matching loss. List of dicts, each dictionary containing at least
    the following 2 keys: `''class_labels''` and `''boxes''` (the class labels and
    bounding boxes of an image in the batch respectively). The class labels themselves
    should be a `torch.LongTensor` of len `(number of bounding boxes in the image,)`
    and the boxes a `torch.FloatTensor` of shape `(number of bounding boxes in the
    image, 4)`.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`labels` (`List[Dict]` of len `(batch_size,)`, *optional*) — 用于计算二分匹配损失的标签。字典列表，每个字典至少包含以下2个键：`''class_labels''`和`''boxes''`（分别是批处理中图像的类别标签和边界框）。类别标签本身应该是长度为`(图像中边界框的数量,)`的`torch.LongTensor`，而框是形状为`(图像中边界框的数量,
    4)`的`torch.FloatTensor`。'
- en: Returns
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`transformers.models.yolos.modeling_yolos.YolosObjectDetectionOutput` or `tuple(torch.FloatTensor)`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformers.models.yolos.modeling_yolos.YolosObjectDetectionOutput`或`tuple(torch.FloatTensor)`'
- en: A `transformers.models.yolos.modeling_yolos.YolosObjectDetectionOutput` or a
    tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig))
    and inputs.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`transformers.models.yolos.modeling_yolos.YolosObjectDetectionOutput`或一个元组`torch.FloatTensor`（如果传递了`return_dict=False`或`config.return_dict=False`时）包含各种元素，取决于配置（[YolosConfig](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosConfig)）和输入。
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    are provided)) — Total loss as a linear combination of a negative log-likehood
    (cross-entropy) for class prediction and a bounding box loss. The latter is defined
    as a linear combination of the L1 loss and the generalized scale-invariant IoU
    loss.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, 当提供`labels`时返回) —
    总损失，作为类别预测的负对数似然（交叉熵）和边界框损失的线性组合。后者被定义为L1损失和广义比例不变IoU损失的线性组合。'
- en: '`loss_dict` (`Dict`, *optional*) — A dictionary containing the individual losses.
    Useful for logging.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss_dict` (`Dict`, *optional*) — 包含各个损失的字典。用于记录。'
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes
    + 1)`) — Classification logits (including no-object) for all queries.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits` (`torch.FloatTensor` of shape `(batch_size, num_queries, num_classes
    + 1)`) — 所有查询的分类logits（包括无对象）。'
- en: '`pred_boxes` (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`)
    — Normalized boxes coordinates for all queries, represented as (center_x, center_y,
    width, height). These values are normalized in [0, 1], relative to the size of
    each individual image in the batch (disregarding possible padding). You can use
    `post_process()` to retrieve the unnormalized bounding boxes.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pred_boxes` (`torch.FloatTensor` of shape `(batch_size, num_queries, 4)`)
    — 所有查询的归一化框坐标，表示为（中心_x，中心_y，宽度，高度）。这些值在[0, 1]范围内归一化，相对于批处理中每个单独图像的大小（忽略可能的填充）。您可以使用`post_process()`来检索未归一化的边界框。'
- en: '`auxiliary_outputs` (`list[Dict]`, *optional*) — Optional, only returned when
    auxilary losses are activated (i.e. `config.auxiliary_loss` is set to `True`)
    and labels are provided. It is a list of dictionaries containing the two above
    keys (`logits` and `pred_boxes`) for each decoder layer.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auxiliary_outputs` (`list[Dict]`, *optional*) — 可选，仅在激活辅助损失（即`config.auxiliary_loss`设置为`True`）并提供标签时返回。这是一个包含每个解码器层的上述两个键（`logits`和`pred_boxes`）的字典列表。'
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — Sequence of hidden-states at the output of the last
    layer of the decoder of the model.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) — 模型解码器最后一层的隐藏状态序列。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.
    Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, 当传递`output_hidden_states=True`或`config.output_hidden_states=True`时返回)
    — `torch.FloatTensor`元组（如果模型有嵌入层，则为嵌入的输出+每个层的输出）的形状为`(batch_size, sequence_length,
    hidden_size)`。模型在每一层输出的隐藏状态加上可选的初始嵌入输出。'
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.
    Attentions weights after the attention softmax, used to compute the weighted average
    in the self-attention heads.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, 当传递`output_attentions=True`或`config.output_attentions=True`时返回)
    — `torch.FloatTensor`元组（每层一个）的形状为`(batch_size, num_heads, sequence_length, sequence_length)`。注意力softmax后的注意力权重，用于计算自注意力头中的加权平均值。'
- en: The [YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)
    forward method, overrides the `__call__` special method.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[YolosForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/yolos#transformers.YolosForObjectDetection)的前向方法覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的方法需要在此函数内定义，但应该在此之后调用`Module`实例，而不是在此处调用，因为前者负责运行前处理和后处理步骤，而后者会默默地忽略它们。
- en: 'Examples:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE15]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
