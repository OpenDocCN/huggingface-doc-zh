- en: Quicktour
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/diffusers/quicktour](https://huggingface.co/docs/diffusers/quicktour)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/132.2c6e75d2.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Tip.230e2334.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/CodeBlock.57fe6e13.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/DocNotebookDropdown.5fa27ace.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
  prefs: []
  type: TYPE_NORMAL
- en: Diffusion models are trained to denoise random Gaussian noise step-by-step to
    generate a sample of interest, such as an image or audio. This has sparked a tremendous
    amount of interest in generative AI, and you have probably seen examples of diffusion
    generated images on the internet. ðŸ§¨ Diffusers is a library aimed at making diffusion
    models widely accessible to everyone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether youâ€™re a developer or an everyday user, this quicktour will introduce
    you to ðŸ§¨ Diffusers and help you get up and generating quickly! There are three
    main components of the library to know about:'
  prefs: []
  type: TYPE_NORMAL
- en: The [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    is a high-level end-to-end class designed to rapidly generate samples from pretrained
    diffusion models for inference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Popular pretrained [model](./api/models) architectures and modules that can
    be used as building blocks for creating diffusion systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many different [schedulers](./api/schedulers/overview) - algorithms that control
    how noise is added for training, and how to generate denoised images during inference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The quicktour will show you how to use the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    for inference, and then walk you through how to combine a model and scheduler
    to replicate whatâ€™s happening inside the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline).
  prefs: []
  type: TYPE_NORMAL
- en: The quicktour is a simplified version of the introductory ðŸ§¨ Diffusers [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/diffusers_intro.ipynb)
    to help you get started quickly. If you want to learn more about ðŸ§¨ Diffusersâ€™
    goal, design philosophy, and additional details about its core API, check out
    the notebook!
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[ðŸ¤— Accelerate](https://huggingface.co/docs/accelerate/index) speeds up model
    loading for inference and training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ðŸ¤— Transformers](https://huggingface.co/docs/transformers/index) is required
    to run the most popular diffusion models, such as [Stable Diffusion](https://huggingface.co/docs/diffusers/api/pipelines/stable_diffusion/overview).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DiffusionPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    is the easiest way to use a pretrained diffusion system for inference. It is an
    end-to-end system containing the model and the scheduler. You can use the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    out-of-the-box for many tasks. Take a look at the table below for some supported
    tasks, and for a complete list of supported tasks, check out the [ðŸ§¨ Diffusers
    Summary](./api/pipelines/overview#diffusers-summary) table.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Task** | **Description** | **Pipeline** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Unconditional Image Generation | generate an image from Gaussian noise |
    [unconditional_image_generation](./using-diffusers/unconditional_image_generation)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Text-Guided Image Generation | generate an image given a text prompt | [conditional_image_generation](./using-diffusers/conditional_image_generation)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Text-Guided Image-to-Image Translation | adapt an image guided by a text
    prompt | [img2img](./using-diffusers/img2img) |'
  prefs: []
  type: TYPE_TB
- en: '| Text-Guided Image-Inpainting | fill the masked part of an image given the
    image, the mask and a text prompt | [inpaint](./using-diffusers/inpaint) |'
  prefs: []
  type: TYPE_TB
- en: '| Text-Guided Depth-to-Image Translation | adapt parts of an image guided by
    a text prompt while preserving structure via depth estimation | [depth2img](./using-diffusers/depth2img)
    |'
  prefs: []
  type: TYPE_TB
- en: Start by creating an instance of a [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    and specify which pipeline checkpoint you would like to download. You can use
    the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    for any [checkpoint](https://huggingface.co/models?library=diffusers&sort=downloads)
    stored on the Hugging Face Hub. In this quicktour, youâ€™ll load the [`stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5)
    checkpoint for text-to-image generation.
  prefs: []
  type: TYPE_NORMAL
- en: For [Stable Diffusion](https://huggingface.co/CompVis/stable-diffusion) models,
    please carefully read the [license](https://huggingface.co/spaces/CompVis/stable-diffusion-license)
    first before running the model. ðŸ§¨ Diffusers implements a [`safety_checker`](https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/safety_checker.py)
    to prevent offensive or harmful content, but the modelâ€™s improved image generation
    capabilities can still produce potentially harmful content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the model with the [from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    downloads and caches all modeling, tokenization, and scheduling components. Youâ€™ll
    see that the Stable Diffusion pipeline is composed of the [UNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.UNet2DConditionModel)
    and [PNDMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/pndm#diffusers.PNDMScheduler)
    among other things:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We strongly recommend running the pipeline on a GPU because the model consists
    of roughly 1.4 billion parameters. You can move the generator object to a GPU,
    just like you would in PyTorch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now you can pass a text prompt to the `pipeline` to generate an image, and then
    access the denoised image. By default, the image output is wrapped in a [`PIL.Image`](https://pillow.readthedocs.io/en/stable/reference/Image.html?highlight=image#the-image-class)
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/020c32038fcd5d69660e0f7072208150.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the image by calling `save`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Local pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also use the pipeline locally. The only difference is you need to download
    the weights first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then load the saved weights into the pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can run the pipeline as you would in the section above.
  prefs: []
  type: TYPE_NORMAL
- en: Swapping schedulers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Different schedulers come with different denoising speeds and quality trade-offs.
    The best way to find out which one works best for you is to try them out! One
    of the main features of ðŸ§¨ Diffusers is to allow you to easily switch between schedulers.
    For example, to replace the default [PNDMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/pndm#diffusers.PNDMScheduler)
    with the [EulerDiscreteScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/euler#diffusers.EulerDiscreteScheduler),
    load it with the [from_config()](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin.from_config)
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Try generating an image with the new scheduler and see if you notice a difference!
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, youâ€™ll take a closer look at the components - the model
    and scheduler - that make up the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    and learn how to use these components to generate an image of a cat.
  prefs: []
  type: TYPE_NORMAL
- en: Models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most models take a noisy sample, and at each timestep it predicts the *noise
    residual* (other models learn to predict the previous sample directly or the velocity
    or [`v-prediction`](https://github.com/huggingface/diffusers/blob/5e5ce13e2f89ac45a0066cb3f369462a3cf1d9ef/src/diffusers/schedulers/scheduling_ddim.py#L110)),
    the difference between a less noisy image and the input image. You can mix and
    match models to create other diffusion systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Models are initiated with the [from_pretrained()](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin.from_pretrained)
    method which also locally caches the model weights so it is faster the next time
    you load the model. For the quicktour, youâ€™ll load the [UNet2DModel](/docs/diffusers/v0.26.3/en/api/models/unet2d#diffusers.UNet2DModel),
    a basic unconditional image generation model with a checkpoint trained on cat
    images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To access the model parameters, call `model.config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The model configuration is a ðŸ§Š frozen ðŸ§Š dictionary, which means those parameters
    canâ€™t be changed after the model is created. This is intentional and ensures that
    the parameters used to define the model architecture at the start remain the same,
    while other parameters can still be adjusted during inference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most important parameters are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sample_size`: the height and width dimension of the input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_channels`: the number of input channels of the input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`down_block_types` and `up_block_types`: the type of down- and upsampling blocks
    used to create the UNet architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`block_out_channels`: the number of output channels of the downsampling blocks;
    also used in reverse order for the number of input channels of the upsampling
    blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layers_per_block`: the number of ResNet blocks present in each UNet block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use the model for inference, create the image shape with random Gaussian
    noise. It should have a `batch` axis because the model can receive multiple random
    noises, a `channel` axis corresponding to the number of input channels, and a
    `sample_size` axis for the height and width of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For inference, pass the noisy image and a `timestep` to the model. The `timestep`
    indicates how noisy the input image is, with more noise at the beginning and less
    at the end. This helps the model determine its position in the diffusion process,
    whether it is closer to the start or the end. Use the `sample` method to get the
    model output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: To generate actual examples though, youâ€™ll need a scheduler to guide the denoising
    process. In the next section, youâ€™ll learn how to couple a model with a scheduler.
  prefs: []
  type: TYPE_NORMAL
- en: Schedulers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Schedulers manage going from a noisy sample to a less noisy sample given the
    model output - in this case, it is the `noisy_residual`.
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ§¨ Diffusers is a toolbox for building diffusion systems. While the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    is a convenient way to get started with a pre-built diffusion system, you can
    also choose your own model and scheduler components separately to build a custom
    diffusion system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the quicktour, youâ€™ll instantiate the [DDPMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/ddpm#diffusers.DDPMScheduler)
    with its [from_config()](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin.from_config)
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: ðŸ’¡ Unlike a model, a scheduler does not have trainable weights and is parameter-free!
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most important parameters are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`num_train_timesteps`: the length of the denoising process or, in other words,
    the number of timesteps required to process random Gaussian noise into a data
    sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beta_schedule`: the type of noise schedule to use for inference and training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beta_start` and `beta_end`: the start and end noise values for the noise schedule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To predict a slightly less noisy image, pass the following to the schedulerâ€™s
    [step()](/docs/diffusers/v0.26.3/en/api/schedulers/ddpm#diffusers.DDPMScheduler.step)
    method: model output, `timestep`, and current `sample`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `less_noisy_sample` can be passed to the next `timestep` where itâ€™ll get
    even less noisy! Letâ€™s bring it all together now and visualize the entire denoising
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a function that postprocesses and displays the denoised image
    as a `PIL.Image`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To speed up the denoising process, move the input and model to a GPU:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a denoising loop that predicts the residual of the less noisy sample,
    and computes the less noisy sample with the scheduler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Sit back and watch as a cat is generated from nothing but noise! ðŸ˜»
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6bad1468d511bff5946306330accda8.png)'
  prefs: []
  type: TYPE_IMG
- en: Next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Hopefully, you generated some cool images with ðŸ§¨ Diffusers in this quicktour!
    For your next steps, you can:'
  prefs: []
  type: TYPE_NORMAL
- en: Train or finetune a model to generate your own images in the [training](./tutorials/basic_training)
    tutorial.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See example official and community [training or finetuning scripts](https://github.com/huggingface/diffusers/tree/main/examples#-diffusers-examples)
    for a variety of use cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more about loading, accessing, changing, and comparing schedulers in the
    [Using different Schedulers](./using-diffusers/schedulers) guide.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore prompt engineering, speed and memory optimizations, and tips and tricks
    for generating higher-quality images with the [Stable Diffusion](./stable_diffusion)
    guide.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dive deeper into speeding up ðŸ§¨ Diffusers with guides on [optimized PyTorch on
    a GPU](./optimization/fp16), and inference guides for running [Stable Diffusion
    on Apple Silicon (M1/M2)](./optimization/mps) and [ONNX Runtime](./optimization/onnx).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
