- en: Hub API Endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/hub/api](https://huggingface.co/docs/hub/api)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: We have open endpoints that you can use to retrieve information from the Hub
    as well as perform certain actions such as creating model, dataset or Space repos.
    We offer a wrapper Python library, [`huggingface_hub`](https://github.com/huggingface/huggingface_hub),
    that allows easy access to these endpoints. We also provide [webhooks](./webhooks)
    to receive real-time incremental info about repos. Enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: The base URL for those endpoints below is `https://huggingface.co`. For example,
    to construct the `/api/models` call below, one can call the URL [https://huggingface.co/api/models](https://huggingface.co/api/models)
  prefs: []
  type: TYPE_NORMAL
- en: The Hub API Playground
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Want to try out our API? Try it out now on our [Playground](https://huggingface.co/spaces/enzostvs/hub-api-playground)!
  prefs: []
  type: TYPE_NORMAL
- en: '[![](../Images/56ed56cd71a0e3d5dd628b64492ac1cc.png)](https://huggingface.co/spaces/enzostvs/hub-api-playground)'
  prefs: []
  type: TYPE_NORMAL
- en: Repo listing API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following endpoints help get information about models, datasets, Spaces,
    and metrics stored on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: When making API calls to retrieve information about repositories, the `createdAt`
    attribute indicates the time when the respective repository was created. It's
    important to note that there is a unique value, `2022-03-02T23:29:04.000Z` assigned
    to all repositories that were created before we began storing creation dates.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Get information from all models in the Hub. The response is paginated, use the
    [`Link` header](https://docs.github.com/en/rest/guides/using-pagination-in-the-rest-api?apiVersion=2022-11-28#link-header)
    to get the next pages. You can specify additional parameters to have more specific
    results.
  prefs: []
  type: TYPE_NORMAL
- en: '`search`: Filter based on substrings for repos and their usernames, such as
    `resnet` or `microsoft`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author`: Filter models by an author or organization, such as `huggingface`
    or `microsoft`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter`: Filter based on tags, such as `text-classification` or `spacy`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort`: Property to use when sorting, such as `downloads` or `author`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`direction`: Direction in which to sort, such as `-1` for descending, and anything
    else for ascending.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit`: Limit the number of models fetched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full`: Whether to fetch most model data, such as all tags, the files, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config`: Whether to also fetch the repo config.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.list_models()`.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/models/{repo_id} or /api/models/{repo_id}/revision/{revision}
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Get all information for a specific model.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `huggingface_hub.model_info(repo_id, revision)`.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/models-tags-by-type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gets all the available model tags hosted in the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `huggingface_hub.get_model_tags()`.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/datasets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Get information from all datasets in the Hub. The response is paginated, use
    the [`Link` header](https://docs.github.com/en/rest/guides/using-pagination-in-the-rest-api?apiVersion=2022-11-28#link-header)
    to get the next pages. You can specify additional parameters to have more specific
    results.
  prefs: []
  type: TYPE_NORMAL
- en: '`search`: Filter based on substrings for repos and their usernames, such as
    `pets` or `microsoft`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author`: Filter datasets by an author or organization, such as `huggingface`
    or `microsoft`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter`: Filter based on tags, such as `task_categories:text-classification`
    or `languages:en`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort`: Property to use when sorting, such as `downloads` or `author`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`direction`: Direction in which to sort, such as `-1` for descending, and anything
    else for ascending.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit`: Limit the number of datasets fetched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full`: Whether to fetch most dataset data, such as all tags, the files, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.list_datasets()`.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/datasets/{repo_id} or /api/datasets/{repo_id}/revision/{revision}
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Get all information for a specific dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '`full`: Whether to fetch most dataset data, such as all tags, the files, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.dataset_info(repo_id, revision)`.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/datasets/{repo_id}/parquet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Get the list of auto-converted parquet files.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/datasets/{repo_id}/parquet/{config}/{split}/{n}.parquet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Get the nth shard of the auto-converted parquet files.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/datasets-tags-by-type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Gets all the available dataset tags hosted in the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `huggingface_hub.get_dataset_tags()`.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/spaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Get information from all Spaces in the Hub. The response is paginated, use the
    [`Link` header](https://docs.github.com/en/rest/guides/using-pagination-in-the-rest-api?apiVersion=2022-11-28#link-header)
    to get the next pages. You can specify additional parameters to have more specific
    results.
  prefs: []
  type: TYPE_NORMAL
- en: '`search`: Filter based on substrings for repos and their usernames, such as
    `resnet` or `microsoft`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author`: Filter models by an author or organization, such as `huggingface`
    or `microsoft`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter`: Filter based on tags, such as `text-classification` or `spacy`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort`: Property to use when sorting, such as `downloads` or `author`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`direction`: Direction in which to sort, such as `-1` for descending, and anything
    else for ascending.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit`: Limit the number of models fetched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full`: Whether to fetch most model data, such as all tags, the files, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.list_spaces()`.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/spaces/{repo_id} or /api/spaces/{repo_id}/revision/{revision}
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Get all information for a specific model.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `huggingface_hub.space_info(repo_id, revision)`.
  prefs: []
  type: TYPE_NORMAL
- en: Repo API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following endpoints manage repository settings like creating and deleting
    a repository.
  prefs: []
  type: TYPE_NORMAL
- en: POST /api/repos/create
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a repository. It’s a model repo by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type`: Type of repo (dataset or space; model by default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: Name of repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`organization`: Name of organization (optional).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private`: Whether the repo is private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sdk`: When the type is `space` (streamlit, gradio, docker or static)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.create_repo()`.
  prefs: []
  type: TYPE_NORMAL
- en: DELETE /api/repos/delete
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Delete a repository. It’s a model repo by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type`: Type of repo (dataset or space; model by default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: Name of repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`organization`: Name of organization (optional).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.delete_repo()`.
  prefs: []
  type: TYPE_NORMAL
- en: PUT /api/repos/{repo_type}/{repo_id}/settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Update repo visibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.update_repo_visibility()`.
  prefs: []
  type: TYPE_NORMAL
- en: POST /api/repos/move
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Move a repository (rename within the same namespace or transfer from user to
    organization).
  prefs: []
  type: TYPE_NORMAL
- en: 'Parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fromRepo`: repo to rename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toRepo`: new name of the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: Type of repo (dataset or space; model by default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.move_repo()`.
  prefs: []
  type: TYPE_NORMAL
- en: User API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following endpoint gets information about a user.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/whoami-v2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Get username and organizations the user belongs to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.whoami()`.
  prefs: []
  type: TYPE_NORMAL
- en: Collections API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use Collections to group repositories from the Hub (Models, Datasets, Spaces
    and Papers) on a dedicated page.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about it in the Collections [guide](./collections.md). Collections
    can also be managed using the Python client (see [guide](https://huggingface.co/docs/huggingface_hub/main/en/guides/collections)).
  prefs: []
  type: TYPE_NORMAL
- en: POST /api/collections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new collection on the Hub with a title, a description (optional) and
    a first item (optional). An item is defined by a type (`model`, `dataset`, `space`
    or `paper`) and an id (repo_id or paper_id on the Hub).
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.create_collection()`.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/collections/{namespace}/{slug}-{id}
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Return information about a collection.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `huggingface_hub.get_collection()`.
  prefs: []
  type: TYPE_NORMAL
- en: GET /api/collections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'List collections from the Hub, based on some criteria. The supported parameters
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`owner` (string): filter collections created by a specific user or organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item` (string): filter collections containing a specific item. Value must
    be the item_type and item_id concatenated. Example: `"models/teknium/OpenHermes-2.5-Mistral-7B"`,
    `"datasets/squad"` or `"papers/2311.12983"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort` (string): sort the returned collections. Supported values are `"lastModified"`,
    `"trending"` (default) and `"upvotes"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit` (int): maximum number (100) of collections per page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`q` (string): filter based on substrings for titles & descriptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no parameter is set, all collections are returned.
  prefs: []
  type: TYPE_NORMAL
- en: The response is paginated. To get all collections, you must follow the [`Link`
    header](https://docs.github.com/en/rest/guides/using-pagination-in-the-rest-api?apiVersion=2022-11-28#link-header).
  prefs: []
  type: TYPE_NORMAL
- en: When listing collections, the item list per collection is truncated to 4 items
    maximum. To retrieve all items from a collection, you need to make an additional
    call using its collection slug.
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.list_collections()`.
  prefs: []
  type: TYPE_NORMAL
- en: PATCH /api/collections/{namespace}/{slug}-{id}
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Update the metadata of a collection on the Hub. You can’t add or modify the
    items of the collection with this method. All fields of the payload are optional.
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.update_collection_metadata()`.
  prefs: []
  type: TYPE_NORMAL
- en: DELETE /api/collections/{namespace}/{slug}-{id}
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Return a collection. This is a non-revertible operation. A deleted collection
    cannot be restored.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `huggingface_hub.delete_collection()`.
  prefs: []
  type: TYPE_NORMAL
- en: POST /api/collections/{namespace}/{slug}-{id}/item
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add an item to a collection. An item is defined by a type (`model`, `dataset`,
    `space` or `paper`) and an id (repo_id or paper_id on the Hub). A note can also
    be attached to the item (optional).
  prefs: []
  type: TYPE_NORMAL
- en: 'Payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.add_collection_item()`.
  prefs: []
  type: TYPE_NORMAL
- en: PATCH /api/collections/{namespace}/{slug}-{id}/items/{item_id}
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Update an item in a collection. You must know the item object id which is different
    from the repo_id/paper_id provided when adding the item to the collection. The
    `item_id` can be retrieved by fetching the collection.
  prefs: []
  type: TYPE_NORMAL
- en: You can update the note attached to the item or the position of the item in
    the collection. Both fields are optional.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This is equivalent to `huggingface_hub.update_collection_item()`.
  prefs: []
  type: TYPE_NORMAL
- en: DELETE /api/collections/{namespace}/{slug}-{id}/items/{item_id}
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remove an item from a collection. You must know the item object id which is
    different from the repo_id/paper_id provided when adding the item to the collection.
    The `item_id` can be retrieved by fetching the collection.
  prefs: []
  type: TYPE_NORMAL
- en: This is equivalent to `huggingface_hub.delete_collection_item()`.
  prefs: []
  type: TYPE_NORMAL
