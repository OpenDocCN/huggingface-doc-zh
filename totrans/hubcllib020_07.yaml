- en: Download files from the Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/huggingface_hub/guides/download](https://huggingface.co/docs/huggingface_hub/guides/download)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: 'The `huggingface_hub` library provides functions to download files from the
    repositories stored on the Hub. You can use these functions independently or integrate
    them into your own library, making it more convenient for your users to interact
    with the Hub. This guide will show you how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and cache a single file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and cache an entire repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download files to a local folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download a single file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [hf_hub_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_download)
    function is the main function for downloading files from the Hub. It downloads
    the remote file, caches it on disk (in a version-aware way), and returns its local
    file path.
  prefs: []
  type: TYPE_NORMAL
- en: The returned filepath is a pointer to the HF local cache. Therefore, it is important
    to not modify the file to avoid having a corrupted cache. If you are interested
    in getting to know more about how files are cached, please refer to our [caching
    guide](./manage-cache).
  prefs: []
  type: TYPE_NORMAL
- en: From latest version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the file to download using the `repo_id`, `repo_type` and `filename`
    parameters. By default, the file will be considered as being part of a `model`
    repo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: From specific version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, the latest version from the `main` branch is downloaded. However,
    in some cases you want to download a file at a particular version (e.g. from a
    specific branch, a PR, a tag or a commit hash). To do so, use the `revision` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** When using the commit hash, it must be the full-length hash instead
    of a 7-character commit hash.'
  prefs: []
  type: TYPE_NORMAL
- en: Construct a download URL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case you want to construct the URL used to download a file from a repo, you
    can use [hf_hub_url()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_url)
    which returns a URL. Note that it is used internally by [hf_hub_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_download).
  prefs: []
  type: TYPE_NORMAL
- en: Download an entire repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[snapshot_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.snapshot_download)
    downloads an entire repository at a given revision. It uses internally [hf_hub_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_download)
    which means all downloaded files are also cached on your local disk. Downloads
    are made concurrently to speed-up the process.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To download a whole repository, just pass the `repo_id` and `repo_type`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[snapshot_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.snapshot_download)
    downloads the latest revision by default. If you want a specific repository revision,
    use the `revision` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Filter files to download
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[snapshot_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.snapshot_download)
    provides an easy way to download a repository. However, you don’t always want
    to download the entire content of a repository. For example, you might want to
    prevent downloading all `.bin` files if you know you’ll only use the `.safetensors`
    weights. You can do that using `allow_patterns` and `ignore_patterns` parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: These parameters accept either a single pattern or a list of patterns. Patterns
    are Standard Wildcards (globbing patterns) as documented [here](https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm).
    The pattern matching is based on [`fnmatch`](https://docs.python.org/3/library/fnmatch.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can use `allow_patterns` to only download JSON configuration
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, `ignore_patterns` can exclude certain files from being downloaded.
    The following example ignores the `.msgpack` and `.h5` file extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you can combine both to precisely filter your download. Here is an
    example to download all json and markdown files except `vocab.json`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Download file(s) to local folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recommended (and default) way to download files from the Hub is to use the
    [cache-system](./manage-cache). You can define your cache location by setting
    `cache_dir` parameter (both in [hf_hub_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_download)
    and [snapshot_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.snapshot_download)).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in some cases you want to download files and move them to a specific
    folder. This is useful to get a workflow closer to what `git` commands offer.
    You can do that using the `local_dir` and `local_dir_use_symlinks` parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`local_dir` must be a path to a folder on your system. The downloaded files
    will keep the same file structure as in the repo. For example if `filename="data/train.csv"`
    and `local_dir="path/to/folder"`, then the returned filepath will be `"path/to/folder/data/train.csv"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_dir_use_symlinks` defines how the file must be saved in your local folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default behavior (`"auto"`) is to duplicate small files (<5MB) and use symlinks
    for bigger files. Symlinks allow to optimize both bandwidth and disk usage. However
    manually editing a symlinked file might corrupt the cache, hence the duplication
    for small files. The 5MB threshold can be configured with the `HF_HUB_LOCAL_DIR_AUTO_SYMLINK_THRESHOLD`
    environment variable.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks=True` is set, all files are symlinked for an optimal
    disk space optimization. This is for example useful when downloading a huge dataset
    with thousands of small files.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, if you don’t want symlinks at all you can disable them (`local_dir_use_symlinks=False`).
    The cache directory will still be used to check wether the file is already cached
    or not. If already cached, the file is **duplicated** from the cache (i.e. saves
    bandwidth but increases disk usage). If the file is not already cached, it will
    be downloaded and moved directly to the local dir. This means that if you need
    to reuse it somewhere else later, it will be **re-downloaded**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is a table that summarizes the different options to help you choose the
    parameters that best suit your use case.
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters | File already cached | Returned path | Can read path? | Can save
    to path? | Optimized bandwidth | Optimized disk usage |'
  prefs: []
  type: TYPE_TB
- en: '| --- | :-: | :-: | :-: | :-: | :-: | :-: |'
  prefs: []
  type: TYPE_TB
- en: '| `local_dir=None` |  | symlink in cache | ✅ | ❌ *(save would corrupt the cache)*
    | ✅ | ✅ |'
  prefs: []
  type: TYPE_TB
- en: '| `local_dir="path/to/folder"` `local_dir_use_symlinks="auto"` |  | file or
    symlink in folder | ✅ | ✅ *(for small files)* ⚠️ *(for big files do not resolve
    path before saving)* | ✅ | ✅ |'
  prefs: []
  type: TYPE_TB
- en: '| `local_dir="path/to/folder"` `local_dir_use_symlinks=True` |  | symlink in
    folder | ✅ | ⚠️ *(do not resolve path before saving)* | ✅ | ✅ |'
  prefs: []
  type: TYPE_TB
- en: '| `local_dir="path/to/folder"` `local_dir_use_symlinks=False` | No | file in
    folder | ✅ | ✅ | ❌ *(if re-run, file is re-downloaded)* | ⚠️ (multiple copies
    if ran in multiple folders) |'
  prefs: []
  type: TYPE_TB
- en: '| `local_dir="path/to/folder"` `local_dir_use_symlinks=False` | Yes | file
    in folder | ✅ | ✅ | ⚠️ *(file has to be cached first)* | ❌ *(file is duplicated)*
    |'
  prefs: []
  type: TYPE_TB
- en: '**Note:** if you are on a Windows machine, you need to enable developer mode
    or run `huggingface_hub` as admin to enable symlinks. Check out the [cache limitations](../guides/manage-cache#limitations)
    section for more details.'
  prefs: []
  type: TYPE_NORMAL
- en: Download from the CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the `huggingface-cli download` command from the terminal to directly
    download files from the Hub. Internally, it uses the same [hf_hub_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_download)
    and [snapshot_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.snapshot_download)
    helpers described above and prints the returned path to the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can download multiple files at once which displays a progress bar and returns
    the snapshot path in which the files are located:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For more details about the CLI download command, please refer to the [CLI guide](./cli#huggingface-cli-download).
  prefs: []
  type: TYPE_NORMAL
- en: Faster downloads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are running on a machine with high bandwidth, you can increase your download
    speed with [`hf_transfer`](https://github.com/huggingface/hf_transfer), a Rust-based
    library developed to speed up file transfers with the Hub. To enable it, install
    the package (`pip install hf_transfer`) and set `HF_HUB_ENABLE_HF_TRANSFER=1`
    as an environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Progress bars are supported in `hf_transfer` starting from version `0.1.4`.
    Consider upgrading (`pip install -U hf-transfer`) if you plan to enable faster
    downloads.
  prefs: []
  type: TYPE_NORMAL
- en: '`hf_transfer` is a power user tool! It is tested and production-ready, but
    it lacks user-friendly features like advanced error handling or proxies. For more
    details, please take a look at this [section](https://huggingface.co/docs/huggingface_hub/hf_transfer).'
  prefs: []
  type: TYPE_NORMAL
