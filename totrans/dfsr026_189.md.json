["```py\n( num_train_timesteps: int = 1000 beta_start: float = 0.0001 beta_end: float = 0.02 beta_schedule: str = 'linear' trained_betas: Union = None variance_type: str = 'fixed_small' clip_sample: bool = True prediction_type: str = 'epsilon' thresholding: bool = False dynamic_thresholding_ratio: float = 0.995 clip_sample_range: float = 1.0 sample_max_value: float = 1.0 timestep_spacing: str = 'leading' steps_offset: int = 0 rescale_betas_zero_snr: int = False )\n```", "```py\n( sample: FloatTensor timestep: Optional = None ) \u2192 export const metadata = 'undefined';torch.FloatTensor\n```", "```py\n( num_inference_steps: Optional = None device: Union = None timesteps: Optional = None )\n```", "```py\n( model_output: FloatTensor timestep: int sample: FloatTensor generator = None return_dict: bool = True ) \u2192 export const metadata = 'undefined';DDPMSchedulerOutput or tuple\n```", "```py\n( prev_sample: FloatTensor pred_original_sample: Optional = None )\n```"]