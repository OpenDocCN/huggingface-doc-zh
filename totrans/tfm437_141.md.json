["```py\n>>> from transformers import BioGptModel, BioGptConfig\n\n>>> # Initializing a BioGPT microsoft/biogpt style configuration\n>>> configuration = BioGptConfig()\n\n>>> # Initializing a model from the microsoft/biogpt style configuration\n>>> model = BioGptModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoTokenizer, BioGptModel\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"microsoft/biogpt\")\n>>> model = BioGptModel.from_pretrained(\"microsoft/biogpt\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, BioGptForCausalLM\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"microsoft/biogpt\")\n>>> model = BioGptForCausalLM.from_pretrained(\"microsoft/biogpt\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs, labels=inputs[\"input_ids\"])\n>>> loss = outputs.loss\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, BioGptForTokenClassification\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"microsoft/biogpt\")\n>>> model = BioGptForTokenClassification.from_pretrained(\"microsoft/biogpt\")\n\n>>> inputs = tokenizer(\n...     \"HuggingFace is a company based in Paris and New York\", add_special_tokens=False, return_tensors=\"pt\"\n... )\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_token_class_ids = logits.argmax(-1)\n\n>>> # Note that tokens are classified rather then input words which means that\n>>> # there might be more predicted token classes than words.\n>>> # Multiple token classes might account for the same word\n>>> predicted_tokens_classes = [model.config.id2label[t.item()] for t in predicted_token_class_ids[0]]\n\n>>> labels = predicted_token_class_ids\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, BioGptForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"microsoft/biogpt\")\n>>> model = BioGptForSequenceClassification.from_pretrained(\"microsoft/biogpt\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_id = logits.argmax().item()\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = BioGptForSequenceClassification.from_pretrained(\"microsoft/biogpt\", num_labels=num_labels)\n\n>>> labels = torch.tensor([1])\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, BioGptForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"microsoft/biogpt\")\n>>> model = BioGptForSequenceClassification.from_pretrained(\"microsoft/biogpt\", problem_type=\"multi_label_classification\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_ids = torch.arange(0, logits.shape[-1])[torch.sigmoid(logits).squeeze(dim=0) > 0.5]\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = BioGptForSequenceClassification.from_pretrained(\n...     \"microsoft/biogpt\", num_labels=num_labels, problem_type=\"multi_label_classification\"\n... )\n\n>>> labels = torch.sum(\n...     torch.nn.functional.one_hot(predicted_class_ids[None, :].clone(), num_classes=num_labels), dim=1\n... ).to(torch.float)\n>>> loss = model(**inputs, labels=labels).loss\n```"]