- en: Tokenizer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/tokenizer](https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/tokenizer)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: 'A tokenizer is in charge of preparing the inputs for a model. The library contains
    tokenizers for all the models. Most of the tokenizers are available in two flavors:
    a full python implementation and a ‚ÄúFast‚Äù implementation based on the Rust library
    [ü§ó Tokenizers](https://github.com/huggingface/tokenizers). The ‚ÄúFast‚Äù implementations
    allows:'
  prefs: []
  type: TYPE_NORMAL
- en: a significant speed-up in particular when doing batched tokenization and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: additional methods to map between the original string (character and words)
    and the token space (e.g. getting the index of the token comprising a given character
    or the span of characters corresponding to a given token).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The base classes [PreTrainedTokenizer](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizer)
    and [PreTrainedTokenizerFast](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast)
    implement the common methods for encoding string inputs in model inputs (see below)
    and instantiating/saving python and ‚ÄúFast‚Äù tokenizers either from a local file
    or directory or from a pretrained tokenizer provided by the library (downloaded
    from HuggingFace‚Äôs AWS S3 repository). They both rely on [PreTrainedTokenizerBase](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase)
    that contains the common methods, and [SpecialTokensMixin](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.SpecialTokensMixin).
  prefs: []
  type: TYPE_NORMAL
- en: '[PreTrainedTokenizer](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizer)
    and [PreTrainedTokenizerFast](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast)
    thus implement the main methods for using all the tokenizers:'
  prefs: []
  type: TYPE_NORMAL
- en: Tokenizing (splitting strings in sub-word token strings), converting tokens
    strings to ids and back, and encoding/decoding (i.e., tokenizing and converting
    to integers).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new tokens to the vocabulary in a way that is independent of the underlying
    structure (BPE, SentencePiece‚Ä¶).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Managing special tokens (like mask, beginning-of-sentence, etc.): adding them,
    assigning them to attributes in the tokenizer for easy access and making sure
    they are not split during tokenization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)
    holds the output of the [PreTrainedTokenizerBase](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase)‚Äôs
    encoding methods (`__call__`, `encode_plus` and `batch_encode_plus`) and is derived
    from a Python dictionary. When the tokenizer is a pure python tokenizer, this
    class behaves just like a standard python dictionary and holds the various model
    inputs computed by these methods (`input_ids`, `attention_mask`‚Ä¶). When the tokenizer
    is a ‚ÄúFast‚Äù tokenizer (i.e., backed by HuggingFace [tokenizers library](https://github.com/huggingface/tokenizers)),
    this class provides in addition several advanced alignment methods which can be
    used to map between the original string (character and words) and the token space
    (e.g., getting the index of the token comprising a given character or the span
    of characters corresponding to a given token).'
  prefs: []
  type: TYPE_NORMAL
- en: PreTrainedTokenizer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.PreTrainedTokenizer`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils.py#L335)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_max_length` (`int`, *optional*) ‚Äî The maximum length (in number of tokens)
    for the inputs to the transformer model. When the tokenizer is loaded with [from_pretrained()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.from_pretrained),
    this will be set to the value stored for the associated model in `max_model_input_sizes`
    (see above). If no value is provided, will default to VERY_LARGE_INTEGER (`int(1e30)`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding_side` (`str`, *optional*) ‚Äî The side on which the model should have
    padding applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is
    picked from the class attribute of the same name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation_side` (`str`, *optional*) ‚Äî The side on which the model should
    have truncation applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default
    value is picked from the class attribute of the same name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chat_template` (`str`, *optional*) ‚Äî A Jinja template string that will be
    used to format lists of chat messages. See [https://huggingface.co/docs/transformers/chat_templating](https://huggingface.co/docs/transformers/chat_templating)
    for a full description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_input_names` (`List[string]`, *optional*) ‚Äî The list of inputs accepted
    by the forward pass of the model (like `"token_type_ids"` or `"attention_mask"`).
    Default value is picked from the class attribute of the same name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bos_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    representing the beginning of a sentence. Will be associated to `self.bos_token`
    and `self.bos_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eos_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    representing the end of a sentence. Will be associated to `self.eos_token` and
    `self.eos_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unk_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    representing an out-of-vocabulary token. Will be associated to `self.unk_token`
    and `self.unk_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sep_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    separating two different sentences in the same input (used by BERT for instance).
    Will be associated to `self.sep_token` and `self.sep_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    used to make arrays of tokens the same size for batching purpose. Will then be
    ignored by attention mechanisms or loss computation. Will be associated to `self.pad_token`
    and `self.pad_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cls_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    representing the class of the input (used by BERT for instance). Will be associated
    to `self.cls_token` and `self.cls_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    representing a masked token (used by masked-language modeling pretraining objectives,
    like BERT). Will be associated to `self.mask_token` and `self.mask_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`additional_special_tokens` (tuple or list of `str` or `tokenizers.AddedToken`,
    *optional*) ‚Äî A tuple or a list of additional special tokens. Add them here to
    ensure they are skipped when decoding with `skip_special_tokens` is set to True.
    If they are not part of the vocabulary, they will be added at the end of the vocabulary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean_up_tokenization_spaces` (`bool`, *optional*, defaults to `True`) ‚Äî Whether
    or not the model should cleanup the spaces that were added when splitting the
    input text during the tokenization process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split_special_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Whether
    or not the special tokens should be split during the tokenization process. The
    default behavior is to not split special tokens. This means that if `<s>` is the
    `bos_token`, then `tokenizer.tokenize("<s>") = [''<s>`]. Otherwise, if `split_special_tokens=True`,
    then `tokenizer.tokenize("<s>")` will be give `[''<'', ''s'', ''>'']`. This argument
    is only supported for `slow` tokenizers for the moment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base class for all slow tokenizers.
  prefs: []
  type: TYPE_NORMAL
- en: Inherits from [PreTrainedTokenizerBase](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase).
  prefs: []
  type: TYPE_NORMAL
- en: Handle all the shared methods for tokenization and special tokens as well as
    methods downloading/caching/loading pretrained tokenizers as well as adding tokens
    to the vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: This class also contain the added tokens in a unified way on top of all tokenizers
    so we don‚Äôt have to handle the specific vocabulary augmentation methods of the
    various underlying dictionary structures (BPE, sentencepiece‚Ä¶).
  prefs: []
  type: TYPE_NORMAL
- en: Class attributes (overridden by derived classes)
  prefs: []
  type: TYPE_NORMAL
- en: '`vocab_files_names` (`Dict[str, str]`) ‚Äî A dictionary with, as keys, the `__init__`
    keyword name of each vocabulary file required by the model, and as associated
    values, the filename for saving the associated file (string).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pretrained_vocab_files_map` (`Dict[str, Dict[str, str]]`) ‚Äî A dictionary of
    dictionaries, with the high-level keys being the `__init__` keyword name of each
    vocabulary file required by the model, the low-level being the `short-cut-names`
    of the pretrained models with, as associated values, the `url` to the associated
    pretrained vocabulary file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_model_input_sizes` (`Dict[str, Optional[int]]`) ‚Äî A dictionary with, as
    keys, the `short-cut-names` of the pretrained models, and as associated values,
    the maximum length of the sequence inputs of this model, or `None` if the model
    has no maximum input size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pretrained_init_configuration` (`Dict[str, Dict[str, Any]]`) ‚Äî A dictionary
    with, as keys, the `short-cut-names` of the pretrained models, and as associated
    values, a dictionary of specific arguments to pass to the `__init__` method of
    the tokenizer class for this pretrained model when loading the tokenizer with
    the [from_pretrained()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.from_pretrained)
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_input_names` (`List[str]`) ‚Äî A list of inputs expected in the forward
    pass of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding_side` (`str`) ‚Äî The default value for the side on which the model
    should have padding applied. Should be `''right''` or `''left''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation_side` (`str`) ‚Äî The default value for the side on which the model
    should have truncation applied. Should be `''right''` or `''left''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `__call__`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L2729)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`text` (`str`, `List[str]`, `List[List[str]]`, *optional*) ‚Äî The sequence or
    batch of sequences to be encoded. Each sequence can be a string or a list of strings
    (pretokenized string). If the sequences are provided as list of strings (pretokenized),
    you must set `is_split_into_words=True` (to lift the ambiguity with a batch of
    sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_pair` (`str`, `List[str]`, `List[List[str]]`, *optional*) ‚Äî The sequence
    or batch of sequences to be encoded. Each sequence can be a string or a list of
    strings (pretokenized string). If the sequences are provided as list of strings
    (pretokenized), you must set `is_split_into_words=True` (to lift the ambiguity
    with a batch of sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_target` (`str`, `List[str]`, `List[List[str]]`, *optional*) ‚Äî The sequence
    or batch of sequences to be encoded as target texts. Each sequence can be a string
    or a list of strings (pretokenized string). If the sequences are provided as list
    of strings (pretokenized), you must set `is_split_into_words=True` (to lift the
    ambiguity with a batch of sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_pair_target` (`str`, `List[str]`, `List[List[str]]`, *optional*) ‚Äî The
    sequence or batch of sequences to be encoded as target texts. Each sequence can
    be a string or a list of strings (pretokenized string). If the sequences are provided
    as list of strings (pretokenized), you must set `is_split_into_words=True` (to
    lift the ambiguity with a batch of sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_special_tokens` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or
    not to add special tokens when encoding the sequences. This will use the underlying
    `PretrainedTokenizerBase.build_inputs_with_special_tokens` function, which defines
    which tokens are automatically added to the input ids. This is usefull if you
    want to add `bos` or `eos` tokens automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (`bool`, `str` or [PaddingStrategy](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.utils.PaddingStrategy),
    *optional*, defaults to `False`) ‚Äî Activates and controls padding. Accepts the
    following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest''`: Pad to the longest sequence in the batch (or no padding
    if only a single sequence if provided).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''max_length''`: Pad to a maximum length specified with the argument `max_length`
    or to the maximum acceptable input length for the model if that argument is not
    provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` or `''do_not_pad''` (default): No padding (i.e., can output a batch
    with sequences of different lengths).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation` (`bool`, `str` or [TruncationStrategy](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy),
    *optional*, defaults to `False`) ‚Äî Activates and controls truncation. Accepts
    the following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest_first''`: Truncate to a maximum length specified with
    the argument `max_length` or to the maximum acceptable input length for the model
    if that argument is not provided. This will truncate token by token, removing
    a token from the longest sequence in the pair if a pair of sequences (or a batch
    of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''only_first''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the first sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''only_second''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the second sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` or `''do_not_truncate''` (default): No truncation (i.e., can output
    batch with sequence lengths greater than the model maximum admissible input size).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*) ‚Äî Controls the maximum length to use by one
    of the truncation/padding parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If left unset or set to `None`, this will use the predefined model maximum length
    if a maximum length is required by one of the truncation/padding parameters. If
    the model has no specific maximum input length (like XLNet) truncation/padding
    to a maximum length will be deactivated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`stride` (`int`, *optional*, defaults to 0) ‚Äî If set to a number along with
    `max_length`, the overflowing tokens returned when `return_overflowing_tokens=True`
    will contain some tokens from the end of the truncated sequence returned to provide
    some overlap between truncated and overflowing sequences. The value of this argument
    defines the number of overlapping tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_split_into_words` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not the input is already pre-tokenized (e.g., split into words). If set to `True`,
    the tokenizer assumes the input is already split into words (for instance, by
    splitting it on whitespace) which it will tokenize. This is useful for NER or
    token classification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_to_multiple_of` (`int`, *optional*) ‚Äî If set will pad the sequence to
    a multiple of the provided value. Requires `padding` to be activated. This is
    especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute
    capability `>= 7.5` (Volta).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) ‚Äî If set, will return tensors instead of list of python integers.
    Acceptable values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''tf''`: Return TensorFlow `tf.constant` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''np''`: Return Numpy `np.ndarray` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_token_type_ids` (`bool`, *optional*) ‚Äî Whether to return token type
    IDs. If left to the default, will return the token type IDs according to the specific
    tokenizer‚Äôs default, defined by the `return_outputs` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are token type IDs?](../glossary#token-type-ids)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_attention_mask` (`bool`, *optional*) ‚Äî Whether to return the attention
    mask. If left to the default, will return the attention mask according to the
    specific tokenizer‚Äôs default, defined by the `return_outputs` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_overflowing_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Whether
    or not to return overflowing token sequences. If a pair of sequences of input
    ids (or a batch of pairs) is provided with `truncation_strategy = longest_first`
    or `True`, an error is raised instead of returning overflowing tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_special_tokens_mask` (`bool`, *optional*, defaults to `False`) ‚Äî Whether
    or not to return special tokens mask information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_offsets_mapping` (`bool`, *optional*, defaults to `False`) ‚Äî Whether
    or not to return `(char_start, char_end)` for each token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is only available on fast tokenizers inheriting from [PreTrainedTokenizerFast](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast),
    if using Python‚Äôs tokenizer, this method will raise `NotImplementedError`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_length` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or not
    to return the lengths of the encoded inputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verbose` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or not to print
    more information and warnings. **kwargs ‚Äî passed to the `self.tokenize()` method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A [BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)
    with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`input_ids` ‚Äî List of token ids to be fed to a model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are input IDs?](../glossary#input-ids)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`token_type_ids` ‚Äî List of token type ids to be fed to a model (when `return_token_type_ids=True`
    or if *‚Äútoken_type_ids‚Äù* is in `self.model_input_names`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are token type IDs?](../glossary#token-type-ids)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`attention_mask` ‚Äî List of indices specifying which tokens should be attended
    to by the model (when `return_attention_mask=True` or if *‚Äúattention_mask‚Äù* is
    in `self.model_input_names`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`overflowing_tokens` ‚Äî List of overflowing tokens sequences (when a `max_length`
    is specified and `return_overflowing_tokens=True`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_truncated_tokens` ‚Äî Number of tokens truncated (when a `max_length` is
    specified and `return_overflowing_tokens=True`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`special_tokens_mask` ‚Äî List of 0s and 1s, with 1 specifying added special
    tokens and 0 specifying regular sequence tokens (when `add_special_tokens=True`
    and `return_special_tokens_mask=True`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length` ‚Äî The length of the inputs (when `return_length=True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main method to tokenize and prepare for the model one or several sequence(s)
    or one or several pair(s) of sequences.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `add_tokens`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L975)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`new_tokens` (`str`, `tokenizers.AddedToken` or a list of *str* or `tokenizers.AddedToken`)
    ‚Äî Tokens are only added if they are not already in the vocabulary. `tokenizers.AddedToken`
    wraps a string token to let you personalize its behavior: whether this token should
    only match against a single word, whether this token should strip all potential
    whitespaces on the left side, whether this token should strip all potential whitespaces
    on the right side, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`special_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Can be used to
    specify if the token is a special token. This mostly change the normalization
    behavior (special tokens like CLS or [MASK] are usually not lower-cased for instance).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See details for `tokenizers.AddedToken` in HuggingFace tokenizers library.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of tokens added to the vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: Add a list of new tokens to the tokenizer class. If the new tokens are not in
    the vocabulary, they are added to it with indices starting from length of the
    current vocabulary and and will be isolated before the tokenization algorithm
    is applied. Added tokens and tokens from the vocabulary of the tokenization algorithm
    are therefore not treated in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Note, when adding new tokens to the vocabulary, you should make sure to also
    resize the token embedding matrix of the model so that its embedding matrix matches
    the tokenizer.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do that, please use the [resize_token_embeddings()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.resize_token_embeddings)
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '#### `add_special_tokens`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L873)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`special_tokens_dict` (dictionary *str* to *str* or `tokenizers.AddedToken`)
    ‚Äî Keys should be in the list of predefined special attributes: [`bos_token`, `eos_token`,
    `unk_token`, `sep_token`, `pad_token`, `cls_token`, `mask_token`, `additional_special_tokens`].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tokens are only added if they are not already in the vocabulary (tested by checking
    if the tokenizer assign the index of the `unk_token` to them).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`replace_additional_special_tokens` (`bool`, *optional*,, defaults to `True`)
    ‚Äî If `True`, the existing list of additional special tokens will be replaced by
    the list provided in `special_tokens_dict`. Otherwise, `self._additional_special_tokens`
    is just extended. In the former case, the tokens will NOT be removed from the
    tokenizer‚Äôs full vocabulary - they are only being flagged as non-special tokens.
    Remember, this only affects which tokens are skipped during decoding, not the
    `added_tokens_encoder` and `added_tokens_decoder`. This means that the previous
    `additional_special_tokens` are still added tokens, and will not be split by the
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of tokens added to the vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: Add a dictionary of special tokens (eos, pad, cls, etc.) to the encoder and
    link them to class attributes. If special tokens are NOT in the vocabulary, they
    are added to it (indexed starting from the last index of the current vocabulary).
  prefs: []
  type: TYPE_NORMAL
- en: When adding new tokens to the vocabulary, you should make sure to also resize
    the token embedding matrix of the model so that its embedding matrix matches the
    tokenizer.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do that, please use the [resize_token_embeddings()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.resize_token_embeddings)
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `add_special_tokens` will ensure your special tokens can be used in several
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Special tokens can be skipped when decoding using `skip_special_tokens = True`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special tokens are carefully handled by the tokenizer (they are never split),
    similar to `AddedTokens`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can easily refer to special tokens using tokenizer class attributes like
    `tokenizer.cls_token`. This makes it easy to develop model-agnostic training and
    fine-tuning scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When possible, special tokens are already registered for provided pretrained
    models (for instance [BertTokenizer](/docs/transformers/v4.37.2/en/model_doc/bert#transformers.BertTokenizer)
    `cls_token` is already registered to be :obj*‚Äô[CLS]‚Äô* and XLM‚Äôs one is also registered
    to be `'</s>'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '#### `apply_chat_template`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L1678)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`conversation` (Union[List[Dict[str, str]], ‚ÄúConversation‚Äù]) ‚Äî A Conversation
    object or list of dicts with ‚Äúrole‚Äù and ‚Äúcontent‚Äù keys, representing the chat
    history so far.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chat_template` (str, *optional*) ‚Äî A Jinja template to use for this conversion.
    If this is not passed, the model‚Äôs default chat template will be used instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_generation_prompt` (bool, *optional*) ‚Äî Whether to end the prompt with
    the token(s) that indicate the start of an assistant message. This is useful when
    you want to generate a response from the model. Note that this argument will be
    passed to the chat template, and so it must be supported in the template for this
    argument to have any effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tokenize` (`bool`, defaults to `True`) ‚Äî Whether to tokenize the output. If
    `False`, the output will be a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (`bool`, defaults to `False`) ‚Äî Whether to pad sequences to the maximum
    length. Has no effect if tokenize is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation` (`bool`, defaults to `False`) ‚Äî Whether to truncate sequences
    at the maximum length. Has no effect if tokenize is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*) ‚Äî Maximum length (in tokens) to use for padding
    or truncation. Has no effect if tokenize is `False`. If not specified, the tokenizer‚Äôs
    `max_length` attribute will be used as a default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) ‚Äî If set, will return tensors of a particular framework. Has no effect
    if tokenize is `False`. Acceptable values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''tf''`: Return TensorFlow `tf.Tensor` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''np''`: Return NumPy `np.ndarray` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''jax''`: Return JAX `jnp.ndarray` objects. **tokenizer_kwargs ‚Äî Additional
    kwargs to pass to the tokenizer.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[int]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of token ids representing the tokenized chat so far, including control
    tokens. This output is ready to pass to the model, either directly or via methods
    like `generate()`.
  prefs: []
  type: TYPE_NORMAL
- en: Converts a Conversation object or a list of dictionaries with `"role"` and `"content"`
    keys to a list of token ids. This method is intended for use with chat models,
    and will read the tokenizer‚Äôs chat_template attribute to determine the format
    and control tokens to use when converting. When chat_template is None, it will
    fall back to the default_chat_template specified at the class level.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `batch_decode`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L3692)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sequences` (`Union[List[int], List[List[int]], np.ndarray, torch.Tensor, tf.Tensor]`)
    ‚Äî List of tokenized input ids. Can be obtained using the `__call__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_special_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not to remove special tokens in the decoding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean_up_tokenization_spaces` (`bool`, *optional*) ‚Äî Whether or not to clean
    up the tokenization spaces. If `None`, will default to `self.clean_up_tokenization_spaces`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (additional keyword arguments, *optional*) ‚Äî Will be passed to the
    underlying model specific decode method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: The list of decoded sentences.
  prefs: []
  type: TYPE_NORMAL
- en: Convert a list of lists of token ids into a list of strings by calling decode.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `decode`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L3726)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`token_ids` (`Union[int, List[int], np.ndarray, torch.Tensor, tf.Tensor]`)
    ‚Äî List of tokenized input ids. Can be obtained using the `__call__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_special_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not to remove special tokens in the decoding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean_up_tokenization_spaces` (`bool`, *optional*) ‚Äî Whether or not to clean
    up the tokenization spaces. If `None`, will default to `self.clean_up_tokenization_spaces`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (additional keyword arguments, *optional*) ‚Äî Will be passed to the
    underlying model specific decode method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: The decoded sentence.
  prefs: []
  type: TYPE_NORMAL
- en: Converts a sequence of ids in a string, using the tokenizer and vocabulary with
    options to remove special tokens and clean up tokenization spaces.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to doing `self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids))`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `encode`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L2537)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`text` (`str`, `List[str]` or `List[int]`) ‚Äî The first sequence to be encoded.
    This can be a string, a list of strings (tokenized string using the `tokenize`
    method) or a list of integers (tokenized string ids using the `convert_tokens_to_ids`
    method).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_pair` (`str`, `List[str]` or `List[int]`, *optional*) ‚Äî Optional second
    sequence to be encoded. This can be a string, a list of strings (tokenized string
    using the `tokenize` method) or a list of integers (tokenized string ids using
    the `convert_tokens_to_ids` method).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_special_tokens` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or
    not to add special tokens when encoding the sequences. This will use the underlying
    `PretrainedTokenizerBase.build_inputs_with_special_tokens` function, which defines
    which tokens are automatically added to the input ids. This is usefull if you
    want to add `bos` or `eos` tokens automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (`bool`, `str` or [PaddingStrategy](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.utils.PaddingStrategy),
    *optional*, defaults to `False`) ‚Äî Activates and controls padding. Accepts the
    following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest''`: Pad to the longest sequence in the batch (or no padding
    if only a single sequence if provided).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''max_length''`: Pad to a maximum length specified with the argument `max_length`
    or to the maximum acceptable input length for the model if that argument is not
    provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` or `''do_not_pad''` (default): No padding (i.e., can output a batch
    with sequences of different lengths).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation` (`bool`, `str` or [TruncationStrategy](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy),
    *optional*, defaults to `False`) ‚Äî Activates and controls truncation. Accepts
    the following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest_first''`: Truncate to a maximum length specified with
    the argument `max_length` or to the maximum acceptable input length for the model
    if that argument is not provided. This will truncate token by token, removing
    a token from the longest sequence in the pair if a pair of sequences (or a batch
    of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''only_first''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the first sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''only_second''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the second sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` or `''do_not_truncate''` (default): No truncation (i.e., can output
    batch with sequence lengths greater than the model maximum admissible input size).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*) ‚Äî Controls the maximum length to use by one
    of the truncation/padding parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If left unset or set to `None`, this will use the predefined model maximum length
    if a maximum length is required by one of the truncation/padding parameters. If
    the model has no specific maximum input length (like XLNet) truncation/padding
    to a maximum length will be deactivated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`stride` (`int`, *optional*, defaults to 0) ‚Äî If set to a number along with
    `max_length`, the overflowing tokens returned when `return_overflowing_tokens=True`
    will contain some tokens from the end of the truncated sequence returned to provide
    some overlap between truncated and overflowing sequences. The value of this argument
    defines the number of overlapping tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_split_into_words` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not the input is already pre-tokenized (e.g., split into words). If set to `True`,
    the tokenizer assumes the input is already split into words (for instance, by
    splitting it on whitespace) which it will tokenize. This is useful for NER or
    token classification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_to_multiple_of` (`int`, *optional*) ‚Äî If set will pad the sequence to
    a multiple of the provided value. Requires `padding` to be activated. This is
    especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute
    capability `>= 7.5` (Volta).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) ‚Äî If set, will return tensors instead of list of python integers.
    Acceptable values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''tf''`: Return TensorFlow `tf.constant` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''np''`: Return Numpy `np.ndarray` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kwargs ‚Äî Passed along to the `.tokenize()` method.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[int]`, `torch.Tensor`, `tf.Tensor` or `np.ndarray`'
  prefs: []
  type: TYPE_NORMAL
- en: The tokenized ids of the text.
  prefs: []
  type: TYPE_NORMAL
- en: Converts a string to a sequence of ids (integer), using the tokenizer and vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: Same as doing `self.convert_tokens_to_ids(self.tokenize(text))`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `push_to_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/utils/hub.py#L755)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) ‚Äî The name of the repository you want to push your tokenizer
    to. It should contain your organization name when pushing to a given organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_temp_dir` (`bool`, *optional*) ‚Äî Whether or not to use a temporary directory
    to store the files saved before they are pushed to the Hub. Will default to `True`
    if there is no directory named like `repo_id`, `False` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*) ‚Äî Message to commit while pushing. Will
    default to `"Upload tokenizer"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*) ‚Äî Whether or not the repository created should
    be private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) ‚Äî The token to use as HTTP bearer authorization
    for remote files. If `True`, will use the token generated when running `huggingface-cli
    login` (stored in `~/.huggingface`). Will default to `True` if `repo_url` is not
    specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_shard_size` (`int` or `str`, *optional*, defaults to `"5GB"`) ‚Äî Only applicable
    for models. The maximum size for a checkpoint before being sharded. Checkpoints
    shard will then be each of size lower than this size. If expressed as a string,
    needs to be digits followed by a unit (like `"5MB"`). We default it to `"5GB"`
    so that users can easily load models on free-tier Google Colab instances without
    any CPU OOM issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or not to create
    a PR with the uploaded files or directly commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe_serialization` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or
    not to convert the model weights in safetensors format for safer serialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) ‚Äî Branch to push the uploaded files to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str`, *optional*) ‚Äî The description of the commit that
    will be created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (`List[str]`, *optional*) ‚Äî List of tags to push on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload the tokenizer files to the ü§ó Model Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '#### `convert_ids_to_tokens`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils.py#L953)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`ids` (`int` or `List[int]`) ‚Äî The token id (or token ids) to convert to tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_special_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not to remove special tokens in the decoding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str` or `List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: The decoded token(s).
  prefs: []
  type: TYPE_NORMAL
- en: Converts a single index or a sequence of indices in a token or a sequence of
    tokens, using the vocabulary and added tokens.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `convert_tokens_to_ids`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils.py#L630)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`tokens` (`str` or `List[str]`) ‚Äî One or several token(s) to convert to token
    id(s).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int` or `List[int]`'
  prefs: []
  type: TYPE_NORMAL
- en: The token id or list of token ids.
  prefs: []
  type: TYPE_NORMAL
- en: Converts a token string (or a sequence of tokens) in a single integer id (or
    a sequence of ids), using the vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_added_vocab`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils.py#L415)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Dict[str, int]`'
  prefs: []
  type: TYPE_NORMAL
- en: The added tokens.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the added tokens in the vocabulary as a dictionary of token to index.
    Results might be different from the fast call because for now we always add the
    tokens even if they are already in the vocabulary. This is something we should
    change.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_special_tokens_to_add`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils.py#L518)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pair` (`bool`, *optional*, defaults to `False`) ‚Äî Whether the number of added
    tokens should be computed in the case of a sequence pair or a single sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of special tokens added to sequences.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of added tokens when encoding a sequence with special tokens.
  prefs: []
  type: TYPE_NORMAL
- en: This encodes a dummy input and checks the number of added tokens, and is therefore
    not efficient. Do not put this inside your training loop.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `prepare_for_tokenization`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils.py#L891)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`text` (`str`) ‚Äî The text to prepare.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_split_into_words` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not the input is already pre-tokenized (e.g., split into words). If set to `True`,
    the tokenizer assumes the input is already split into words (for instance, by
    splitting it on whitespace) which it will tokenize. This is useful for NER or
    token classification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`, *optional*) ‚Äî Keyword arguments to use for the
    tokenization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Tuple[str, Dict[str, Any]]`'
  prefs: []
  type: TYPE_NORMAL
- en: The prepared text and the unused kwargs.
  prefs: []
  type: TYPE_NORMAL
- en: Performs any necessary transformations before tokenization.
  prefs: []
  type: TYPE_NORMAL
- en: This method should pop the arguments from kwargs and return the remaining `kwargs`
    as well. We test the `kwargs` at the end of the encoding process to be sure all
    the arguments have been used.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `tokenize`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils.py#L541)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`text` (`str`) ‚Äî The sequence to be encoded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*`*kwargs` (additional keyword arguments) ‚Äî Passed along to the model-specific
    `prepare_for_tokenization` preprocessing method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: The list of tokens.
  prefs: []
  type: TYPE_NORMAL
- en: Converts a string into a sequence of tokens, using the tokenizer.
  prefs: []
  type: TYPE_NORMAL
- en: Split in words for word-based vocabulary or sub-words for sub-word-based vocabularies
    (BPE/SentencePieces/WordPieces). Takes care of added tokens.
  prefs: []
  type: TYPE_NORMAL
- en: PreTrainedTokenizerFast
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The [PreTrainedTokenizerFast](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast)
    depend on the [tokenizers](https://huggingface.co/docs/tokenizers) library. The
    tokenizers obtained from the ü§ó tokenizers library can be loaded very simply into
    ü§ó transformers. Take a look at the [Using tokenizers from ü§ó tokenizers](../fast_tokenizers)
    page to understand how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: '### `class transformers.PreTrainedTokenizerFast`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_fast.py#L77)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_max_length` (`int`, *optional*) ‚Äî The maximum length (in number of tokens)
    for the inputs to the transformer model. When the tokenizer is loaded with [from_pretrained()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.from_pretrained),
    this will be set to the value stored for the associated model in `max_model_input_sizes`
    (see above). If no value is provided, will default to VERY_LARGE_INTEGER (`int(1e30)`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding_side` (`str`, *optional*) ‚Äî The side on which the model should have
    padding applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default value is
    picked from the class attribute of the same name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation_side` (`str`, *optional*) ‚Äî The side on which the model should
    have truncation applied. Should be selected between [‚Äòright‚Äô, ‚Äòleft‚Äô]. Default
    value is picked from the class attribute of the same name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chat_template` (`str`, *optional*) ‚Äî A Jinja template string that will be
    used to format lists of chat messages. See [https://huggingface.co/docs/transformers/chat_templating](https://huggingface.co/docs/transformers/chat_templating)
    for a full description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_input_names` (`List[string]`, *optional*) ‚Äî The list of inputs accepted
    by the forward pass of the model (like `"token_type_ids"` or `"attention_mask"`).
    Default value is picked from the class attribute of the same name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bos_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    representing the beginning of a sentence. Will be associated to `self.bos_token`
    and `self.bos_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eos_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    representing the end of a sentence. Will be associated to `self.eos_token` and
    `self.eos_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unk_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    representing an out-of-vocabulary token. Will be associated to `self.unk_token`
    and `self.unk_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sep_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    separating two different sentences in the same input (used by BERT for instance).
    Will be associated to `self.sep_token` and `self.sep_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    used to make arrays of tokens the same size for batching purpose. Will then be
    ignored by attention mechanisms or loss computation. Will be associated to `self.pad_token`
    and `self.pad_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cls_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    representing the class of the input (used by BERT for instance). Will be associated
    to `self.cls_token` and `self.cls_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_token` (`str` or `tokenizers.AddedToken`, *optional*) ‚Äî A special token
    representing a masked token (used by masked-language modeling pretraining objectives,
    like BERT). Will be associated to `self.mask_token` and `self.mask_token_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`additional_special_tokens` (tuple or list of `str` or `tokenizers.AddedToken`,
    *optional*) ‚Äî A tuple or a list of additional special tokens. Add them here to
    ensure they are skipped when decoding with `skip_special_tokens` is set to True.
    If they are not part of the vocabulary, they will be added at the end of the vocabulary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean_up_tokenization_spaces` (`bool`, *optional*, defaults to `True`) ‚Äî Whether
    or not the model should cleanup the spaces that were added when splitting the
    input text during the tokenization process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split_special_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Whether
    or not the special tokens should be split during the tokenization process. The
    default behavior is to not split special tokens. This means that if `<s>` is the
    `bos_token`, then `tokenizer.tokenize("<s>") = [''<s>`]. Otherwise, if `split_special_tokens=True`,
    then `tokenizer.tokenize("<s>")` will be give `[''<'', ''s'', ''>'']`. This argument
    is only supported for `slow` tokenizers for the moment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tokenizer_object` (`tokenizers.Tokenizer`) ‚Äî A `tokenizers.Tokenizer` object
    from ü§ó tokenizers to instantiate from. See [Using tokenizers from ü§ó tokenizers](../fast_tokenizers)
    for more information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tokenizer_file` (`str`) ‚Äî A path to a local JSON file representing a previously
    serialized `tokenizers.Tokenizer` object from ü§ó tokenizers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base class for all fast tokenizers (wrapping HuggingFace tokenizers library).
  prefs: []
  type: TYPE_NORMAL
- en: Inherits from [PreTrainedTokenizerBase](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase).
  prefs: []
  type: TYPE_NORMAL
- en: Handles all the shared methods for tokenization and special tokens, as well
    as methods for downloading/caching/loading pretrained tokenizers, as well as adding
    tokens to the vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: This class also contains the added tokens in a unified way on top of all tokenizers
    so we don‚Äôt have to handle the specific vocabulary augmentation methods of the
    various underlying dictionary structures (BPE, sentencepiece‚Ä¶).
  prefs: []
  type: TYPE_NORMAL
- en: Class attributes (overridden by derived classes)
  prefs: []
  type: TYPE_NORMAL
- en: '`vocab_files_names` (`Dict[str, str]`) ‚Äî A dictionary with, as keys, the `__init__`
    keyword name of each vocabulary file required by the model, and as associated
    values, the filename for saving the associated file (string).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pretrained_vocab_files_map` (`Dict[str, Dict[str, str]]`) ‚Äî A dictionary of
    dictionaries, with the high-level keys being the `__init__` keyword name of each
    vocabulary file required by the model, the low-level being the `short-cut-names`
    of the pretrained models with, as associated values, the `url` to the associated
    pretrained vocabulary file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_model_input_sizes` (`Dict[str, Optional[int]]`) ‚Äî A dictionary with, as
    keys, the `short-cut-names` of the pretrained models, and as associated values,
    the maximum length of the sequence inputs of this model, or `None` if the model
    has no maximum input size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pretrained_init_configuration` (`Dict[str, Dict[str, Any]]`) ‚Äî A dictionary
    with, as keys, the `short-cut-names` of the pretrained models, and as associated
    values, a dictionary of specific arguments to pass to the `__init__` method of
    the tokenizer class for this pretrained model when loading the tokenizer with
    the [from_pretrained()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.from_pretrained)
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_input_names` (`List[str]`) ‚Äî A list of inputs expected in the forward
    pass of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding_side` (`str`) ‚Äî The default value for the side on which the model
    should have padding applied. Should be `''right''` or `''left''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation_side` (`str`) ‚Äî The default value for the side on which the model
    should have truncation applied. Should be `''right''` or `''left''`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `__call__`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L2729)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`text` (`str`, `List[str]`, `List[List[str]]`, *optional*) ‚Äî The sequence or
    batch of sequences to be encoded. Each sequence can be a string or a list of strings
    (pretokenized string). If the sequences are provided as list of strings (pretokenized),
    you must set `is_split_into_words=True` (to lift the ambiguity with a batch of
    sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_pair` (`str`, `List[str]`, `List[List[str]]`, *optional*) ‚Äî The sequence
    or batch of sequences to be encoded. Each sequence can be a string or a list of
    strings (pretokenized string). If the sequences are provided as list of strings
    (pretokenized), you must set `is_split_into_words=True` (to lift the ambiguity
    with a batch of sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_target` (`str`, `List[str]`, `List[List[str]]`, *optional*) ‚Äî The sequence
    or batch of sequences to be encoded as target texts. Each sequence can be a string
    or a list of strings (pretokenized string). If the sequences are provided as list
    of strings (pretokenized), you must set `is_split_into_words=True` (to lift the
    ambiguity with a batch of sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_pair_target` (`str`, `List[str]`, `List[List[str]]`, *optional*) ‚Äî The
    sequence or batch of sequences to be encoded as target texts. Each sequence can
    be a string or a list of strings (pretokenized string). If the sequences are provided
    as list of strings (pretokenized), you must set `is_split_into_words=True` (to
    lift the ambiguity with a batch of sequences).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_special_tokens` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or
    not to add special tokens when encoding the sequences. This will use the underlying
    `PretrainedTokenizerBase.build_inputs_with_special_tokens` function, which defines
    which tokens are automatically added to the input ids. This is usefull if you
    want to add `bos` or `eos` tokens automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (`bool`, `str` or [PaddingStrategy](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.utils.PaddingStrategy),
    *optional*, defaults to `False`) ‚Äî Activates and controls padding. Accepts the
    following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest''`: Pad to the longest sequence in the batch (or no padding
    if only a single sequence if provided).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''max_length''`: Pad to a maximum length specified with the argument `max_length`
    or to the maximum acceptable input length for the model if that argument is not
    provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` or `''do_not_pad''` (default): No padding (i.e., can output a batch
    with sequences of different lengths).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation` (`bool`, `str` or [TruncationStrategy](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy),
    *optional*, defaults to `False`) ‚Äî Activates and controls truncation. Accepts
    the following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest_first''`: Truncate to a maximum length specified with
    the argument `max_length` or to the maximum acceptable input length for the model
    if that argument is not provided. This will truncate token by token, removing
    a token from the longest sequence in the pair if a pair of sequences (or a batch
    of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''only_first''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the first sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''only_second''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the second sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` or `''do_not_truncate''` (default): No truncation (i.e., can output
    batch with sequence lengths greater than the model maximum admissible input size).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*) ‚Äî Controls the maximum length to use by one
    of the truncation/padding parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If left unset or set to `None`, this will use the predefined model maximum length
    if a maximum length is required by one of the truncation/padding parameters. If
    the model has no specific maximum input length (like XLNet) truncation/padding
    to a maximum length will be deactivated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`stride` (`int`, *optional*, defaults to 0) ‚Äî If set to a number along with
    `max_length`, the overflowing tokens returned when `return_overflowing_tokens=True`
    will contain some tokens from the end of the truncated sequence returned to provide
    some overlap between truncated and overflowing sequences. The value of this argument
    defines the number of overlapping tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_split_into_words` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not the input is already pre-tokenized (e.g., split into words). If set to `True`,
    the tokenizer assumes the input is already split into words (for instance, by
    splitting it on whitespace) which it will tokenize. This is useful for NER or
    token classification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_to_multiple_of` (`int`, *optional*) ‚Äî If set will pad the sequence to
    a multiple of the provided value. Requires `padding` to be activated. This is
    especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute
    capability `>= 7.5` (Volta).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) ‚Äî If set, will return tensors instead of list of python integers.
    Acceptable values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''tf''`: Return TensorFlow `tf.constant` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''np''`: Return Numpy `np.ndarray` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_token_type_ids` (`bool`, *optional*) ‚Äî Whether to return token type
    IDs. If left to the default, will return the token type IDs according to the specific
    tokenizer‚Äôs default, defined by the `return_outputs` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are token type IDs?](../glossary#token-type-ids)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_attention_mask` (`bool`, *optional*) ‚Äî Whether to return the attention
    mask. If left to the default, will return the attention mask according to the
    specific tokenizer‚Äôs default, defined by the `return_outputs` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_overflowing_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Whether
    or not to return overflowing token sequences. If a pair of sequences of input
    ids (or a batch of pairs) is provided with `truncation_strategy = longest_first`
    or `True`, an error is raised instead of returning overflowing tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_special_tokens_mask` (`bool`, *optional*, defaults to `False`) ‚Äî Whether
    or not to return special tokens mask information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_offsets_mapping` (`bool`, *optional*, defaults to `False`) ‚Äî Whether
    or not to return `(char_start, char_end)` for each token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is only available on fast tokenizers inheriting from [PreTrainedTokenizerFast](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast),
    if using Python‚Äôs tokenizer, this method will raise `NotImplementedError`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_length` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or not
    to return the lengths of the encoded inputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verbose` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or not to print
    more information and warnings. **kwargs ‚Äî passed to the `self.tokenize()` method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A [BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)
    with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`input_ids` ‚Äî List of token ids to be fed to a model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are input IDs?](../glossary#input-ids)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`token_type_ids` ‚Äî List of token type ids to be fed to a model (when `return_token_type_ids=True`
    or if *‚Äútoken_type_ids‚Äù* is in `self.model_input_names`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are token type IDs?](../glossary#token-type-ids)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`attention_mask` ‚Äî List of indices specifying which tokens should be attended
    to by the model (when `return_attention_mask=True` or if *‚Äúattention_mask‚Äù* is
    in `self.model_input_names`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`overflowing_tokens` ‚Äî List of overflowing tokens sequences (when a `max_length`
    is specified and `return_overflowing_tokens=True`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_truncated_tokens` ‚Äî Number of tokens truncated (when a `max_length` is
    specified and `return_overflowing_tokens=True`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`special_tokens_mask` ‚Äî List of 0s and 1s, with 1 specifying added special
    tokens and 0 specifying regular sequence tokens (when `add_special_tokens=True`
    and `return_special_tokens_mask=True`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length` ‚Äî The length of the inputs (when `return_length=True`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main method to tokenize and prepare for the model one or several sequence(s)
    or one or several pair(s) of sequences.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `add_tokens`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L975)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`new_tokens` (`str`, `tokenizers.AddedToken` or a list of *str* or `tokenizers.AddedToken`)
    ‚Äî Tokens are only added if they are not already in the vocabulary. `tokenizers.AddedToken`
    wraps a string token to let you personalize its behavior: whether this token should
    only match against a single word, whether this token should strip all potential
    whitespaces on the left side, whether this token should strip all potential whitespaces
    on the right side, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`special_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Can be used to
    specify if the token is a special token. This mostly change the normalization
    behavior (special tokens like CLS or [MASK] are usually not lower-cased for instance).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See details for `tokenizers.AddedToken` in HuggingFace tokenizers library.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of tokens added to the vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: Add a list of new tokens to the tokenizer class. If the new tokens are not in
    the vocabulary, they are added to it with indices starting from length of the
    current vocabulary and and will be isolated before the tokenization algorithm
    is applied. Added tokens and tokens from the vocabulary of the tokenization algorithm
    are therefore not treated in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Note, when adding new tokens to the vocabulary, you should make sure to also
    resize the token embedding matrix of the model so that its embedding matrix matches
    the tokenizer.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do that, please use the [resize_token_embeddings()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.resize_token_embeddings)
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '#### `add_special_tokens`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L873)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`special_tokens_dict` (dictionary *str* to *str* or `tokenizers.AddedToken`)
    ‚Äî Keys should be in the list of predefined special attributes: [`bos_token`, `eos_token`,
    `unk_token`, `sep_token`, `pad_token`, `cls_token`, `mask_token`, `additional_special_tokens`].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tokens are only added if they are not already in the vocabulary (tested by checking
    if the tokenizer assign the index of the `unk_token` to them).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`replace_additional_special_tokens` (`bool`, *optional*,, defaults to `True`)
    ‚Äî If `True`, the existing list of additional special tokens will be replaced by
    the list provided in `special_tokens_dict`. Otherwise, `self._additional_special_tokens`
    is just extended. In the former case, the tokens will NOT be removed from the
    tokenizer‚Äôs full vocabulary - they are only being flagged as non-special tokens.
    Remember, this only affects which tokens are skipped during decoding, not the
    `added_tokens_encoder` and `added_tokens_decoder`. This means that the previous
    `additional_special_tokens` are still added tokens, and will not be split by the
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of tokens added to the vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: Add a dictionary of special tokens (eos, pad, cls, etc.) to the encoder and
    link them to class attributes. If special tokens are NOT in the vocabulary, they
    are added to it (indexed starting from the last index of the current vocabulary).
  prefs: []
  type: TYPE_NORMAL
- en: When adding new tokens to the vocabulary, you should make sure to also resize
    the token embedding matrix of the model so that its embedding matrix matches the
    tokenizer.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do that, please use the [resize_token_embeddings()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.resize_token_embeddings)
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `add_special_tokens` will ensure your special tokens can be used in several
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Special tokens can be skipped when decoding using `skip_special_tokens = True`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special tokens are carefully handled by the tokenizer (they are never split),
    similar to `AddedTokens`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can easily refer to special tokens using tokenizer class attributes like
    `tokenizer.cls_token`. This makes it easy to develop model-agnostic training and
    fine-tuning scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When possible, special tokens are already registered for provided pretrained
    models (for instance [BertTokenizer](/docs/transformers/v4.37.2/en/model_doc/bert#transformers.BertTokenizer)
    `cls_token` is already registered to be :obj*‚Äô[CLS]‚Äô* and XLM‚Äôs one is also registered
    to be `'</s>'`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '#### `apply_chat_template`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L1678)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`conversation` (Union[List[Dict[str, str]], ‚ÄúConversation‚Äù]) ‚Äî A Conversation
    object or list of dicts with ‚Äúrole‚Äù and ‚Äúcontent‚Äù keys, representing the chat
    history so far.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chat_template` (str, *optional*) ‚Äî A Jinja template to use for this conversion.
    If this is not passed, the model‚Äôs default chat template will be used instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_generation_prompt` (bool, *optional*) ‚Äî Whether to end the prompt with
    the token(s) that indicate the start of an assistant message. This is useful when
    you want to generate a response from the model. Note that this argument will be
    passed to the chat template, and so it must be supported in the template for this
    argument to have any effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tokenize` (`bool`, defaults to `True`) ‚Äî Whether to tokenize the output. If
    `False`, the output will be a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (`bool`, defaults to `False`) ‚Äî Whether to pad sequences to the maximum
    length. Has no effect if tokenize is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation` (`bool`, defaults to `False`) ‚Äî Whether to truncate sequences
    at the maximum length. Has no effect if tokenize is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*) ‚Äî Maximum length (in tokens) to use for padding
    or truncation. Has no effect if tokenize is `False`. If not specified, the tokenizer‚Äôs
    `max_length` attribute will be used as a default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) ‚Äî If set, will return tensors of a particular framework. Has no effect
    if tokenize is `False`. Acceptable values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''tf''`: Return TensorFlow `tf.Tensor` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''np''`: Return NumPy `np.ndarray` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''jax''`: Return JAX `jnp.ndarray` objects. **tokenizer_kwargs ‚Äî Additional
    kwargs to pass to the tokenizer.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[int]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of token ids representing the tokenized chat so far, including control
    tokens. This output is ready to pass to the model, either directly or via methods
    like `generate()`.
  prefs: []
  type: TYPE_NORMAL
- en: Converts a Conversation object or a list of dictionaries with `"role"` and `"content"`
    keys to a list of token ids. This method is intended for use with chat models,
    and will read the tokenizer‚Äôs chat_template attribute to determine the format
    and control tokens to use when converting. When chat_template is None, it will
    fall back to the default_chat_template specified at the class level.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `batch_decode`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L3692)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sequences` (`Union[List[int], List[List[int]], np.ndarray, torch.Tensor, tf.Tensor]`)
    ‚Äî List of tokenized input ids. Can be obtained using the `__call__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_special_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not to remove special tokens in the decoding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean_up_tokenization_spaces` (`bool`, *optional*) ‚Äî Whether or not to clean
    up the tokenization spaces. If `None`, will default to `self.clean_up_tokenization_spaces`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (additional keyword arguments, *optional*) ‚Äî Will be passed to the
    underlying model specific decode method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: The list of decoded sentences.
  prefs: []
  type: TYPE_NORMAL
- en: Convert a list of lists of token ids into a list of strings by calling decode.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `decode`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L3726)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`token_ids` (`Union[int, List[int], np.ndarray, torch.Tensor, tf.Tensor]`)
    ‚Äî List of tokenized input ids. Can be obtained using the `__call__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_special_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not to remove special tokens in the decoding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean_up_tokenization_spaces` (`bool`, *optional*) ‚Äî Whether or not to clean
    up the tokenization spaces. If `None`, will default to `self.clean_up_tokenization_spaces`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (additional keyword arguments, *optional*) ‚Äî Will be passed to the
    underlying model specific decode method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: The decoded sentence.
  prefs: []
  type: TYPE_NORMAL
- en: Converts a sequence of ids in a string, using the tokenizer and vocabulary with
    options to remove special tokens and clean up tokenization spaces.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to doing `self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids))`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `encode`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L2537)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`text` (`str`, `List[str]` or `List[int]`) ‚Äî The first sequence to be encoded.
    This can be a string, a list of strings (tokenized string using the `tokenize`
    method) or a list of integers (tokenized string ids using the `convert_tokens_to_ids`
    method).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_pair` (`str`, `List[str]` or `List[int]`, *optional*) ‚Äî Optional second
    sequence to be encoded. This can be a string, a list of strings (tokenized string
    using the `tokenize` method) or a list of integers (tokenized string ids using
    the `convert_tokens_to_ids` method).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_special_tokens` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or
    not to add special tokens when encoding the sequences. This will use the underlying
    `PretrainedTokenizerBase.build_inputs_with_special_tokens` function, which defines
    which tokens are automatically added to the input ids. This is usefull if you
    want to add `bos` or `eos` tokens automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (`bool`, `str` or [PaddingStrategy](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.utils.PaddingStrategy),
    *optional*, defaults to `False`) ‚Äî Activates and controls padding. Accepts the
    following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest''`: Pad to the longest sequence in the batch (or no padding
    if only a single sequence if provided).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''max_length''`: Pad to a maximum length specified with the argument `max_length`
    or to the maximum acceptable input length for the model if that argument is not
    provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` or `''do_not_pad''` (default): No padding (i.e., can output a batch
    with sequences of different lengths).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation` (`bool`, `str` or [TruncationStrategy](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy),
    *optional*, defaults to `False`) ‚Äî Activates and controls truncation. Accepts
    the following values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` or `''longest_first''`: Truncate to a maximum length specified with
    the argument `max_length` or to the maximum acceptable input length for the model
    if that argument is not provided. This will truncate token by token, removing
    a token from the longest sequence in the pair if a pair of sequences (or a batch
    of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''only_first''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the first sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''only_second''`: Truncate to a maximum length specified with the argument
    `max_length` or to the maximum acceptable input length for the model if that argument
    is not provided. This will only truncate the second sequence of a pair if a pair
    of sequences (or a batch of pairs) is provided.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` or `''do_not_truncate''` (default): No truncation (i.e., can output
    batch with sequence lengths greater than the model maximum admissible input size).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*) ‚Äî Controls the maximum length to use by one
    of the truncation/padding parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If left unset or set to `None`, this will use the predefined model maximum length
    if a maximum length is required by one of the truncation/padding parameters. If
    the model has no specific maximum input length (like XLNet) truncation/padding
    to a maximum length will be deactivated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`stride` (`int`, *optional*, defaults to 0) ‚Äî If set to a number along with
    `max_length`, the overflowing tokens returned when `return_overflowing_tokens=True`
    will contain some tokens from the end of the truncated sequence returned to provide
    some overlap between truncated and overflowing sequences. The value of this argument
    defines the number of overlapping tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_split_into_words` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not the input is already pre-tokenized (e.g., split into words). If set to `True`,
    the tokenizer assumes the input is already split into words (for instance, by
    splitting it on whitespace) which it will tokenize. This is useful for NER or
    token classification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_to_multiple_of` (`int`, *optional*) ‚Äî If set will pad the sequence to
    a multiple of the provided value. Requires `padding` to be activated. This is
    especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute
    capability `>= 7.5` (Volta).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) ‚Äî If set, will return tensors instead of list of python integers.
    Acceptable values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''tf''`: Return TensorFlow `tf.constant` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''pt''`: Return PyTorch `torch.Tensor` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`''np''`: Return Numpy `np.ndarray` objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kwargs ‚Äî Passed along to the `.tokenize()` method.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[int]`, `torch.Tensor`, `tf.Tensor` or `np.ndarray`'
  prefs: []
  type: TYPE_NORMAL
- en: The tokenized ids of the text.
  prefs: []
  type: TYPE_NORMAL
- en: Converts a string to a sequence of ids (integer), using the tokenizer and vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: Same as doing `self.convert_tokens_to_ids(self.tokenize(text))`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `push_to_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/utils/hub.py#L755)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) ‚Äî The name of the repository you want to push your tokenizer
    to. It should contain your organization name when pushing to a given organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_temp_dir` (`bool`, *optional*) ‚Äî Whether or not to use a temporary directory
    to store the files saved before they are pushed to the Hub. Will default to `True`
    if there is no directory named like `repo_id`, `False` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*) ‚Äî Message to commit while pushing. Will
    default to `"Upload tokenizer"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*) ‚Äî Whether or not the repository created should
    be private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) ‚Äî The token to use as HTTP bearer authorization
    for remote files. If `True`, will use the token generated when running `huggingface-cli
    login` (stored in `~/.huggingface`). Will default to `True` if `repo_url` is not
    specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_shard_size` (`int` or `str`, *optional*, defaults to `"5GB"`) ‚Äî Only applicable
    for models. The maximum size for a checkpoint before being sharded. Checkpoints
    shard will then be each of size lower than this size. If expressed as a string,
    needs to be digits followed by a unit (like `"5MB"`). We default it to `"5GB"`
    so that users can easily load models on free-tier Google Colab instances without
    any CPU OOM issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or not to create
    a PR with the uploaded files or directly commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe_serialization` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or
    not to convert the model weights in safetensors format for safer serialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) ‚Äî Branch to push the uploaded files to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str`, *optional*) ‚Äî The description of the commit that
    will be created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (`List[str]`, *optional*) ‚Äî List of tags to push on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload the tokenizer files to the ü§ó Model Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '#### `convert_ids_to_tokens`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_fast.py#L369)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`ids` (`int` or `List[int]`) ‚Äî The token id (or token ids) to convert to tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_special_tokens` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not to remove special tokens in the decoding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str` or `List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: The decoded token(s).
  prefs: []
  type: TYPE_NORMAL
- en: Converts a single index or a sequence of indices in a token or a sequence of
    tokens, using the vocabulary and added tokens.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `convert_tokens_to_ids`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_fast.py#L314)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`tokens` (`str` or `List[str]`) ‚Äî One or several token(s) to convert to token
    id(s).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int` or `List[int]`'
  prefs: []
  type: TYPE_NORMAL
- en: The token id or list of token ids.
  prefs: []
  type: TYPE_NORMAL
- en: Converts a token string (or a sequence of tokens) in a single integer id (or
    a sequence of ids), using the vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_added_vocab`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_fast.py#L238)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Dict[str, int]`'
  prefs: []
  type: TYPE_NORMAL
- en: The added tokens.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the added tokens in the vocabulary as a dictionary of token to index.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_special_tokens_to_add`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_fast.py#L348)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pair` (`bool`, *optional*, defaults to `False`) ‚Äî Whether the number of added
    tokens should be computed in the case of a sequence pair or a single sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of special tokens added to sequences.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the number of added tokens when encoding a sequence with special tokens.
  prefs: []
  type: TYPE_NORMAL
- en: This encodes a dummy input and checks the number of added tokens, and is therefore
    not efficient. Do not put this inside your training loop.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_truncation_and_padding`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_fast.py#L398)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`padding_strategy` ([PaddingStrategy](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.utils.PaddingStrategy))
    ‚Äî The kind of padding that will be applied to the input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`truncation_strategy` ([TruncationStrategy](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.tokenization_utils_base.TruncationStrategy))
    ‚Äî The kind of truncation that will be applied to the input'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length` (`int`) ‚Äî The maximum size of a sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stride` (`int`) ‚Äî The stride to use when handling overflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_to_multiple_of` (`int`, *optional*) ‚Äî If set will pad the sequence to
    a multiple of the provided value. This is especially useful to enable the use
    of Tensor Cores on NVIDIA hardware with compute capability `>= 7.5` (Volta).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define the truncation and the padding strategies for fast tokenizers (provided
    by HuggingFace tokenizers library) and restore the tokenizer settings afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: The provided tokenizer has no padding / truncation strategy before the managed
    section. If your tokenizer set a padding / truncation strategy before, then it
    will be reset to no padding / truncation when exiting the managed section.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `train_new_from_iterator`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_fast.py#L687)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`text_iterator` (generator of `List[str]`) ‚Äî The training corpus. Should be
    a generator of batches of texts, for instance a list of lists of texts if you
    have everything in memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vocab_size` (`int`) ‚Äî The size of the vocabulary you want for your tokenizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length` (`int`, *optional*) ‚Äî The total number of sequences in the iterator.
    This is used to provide meaningful progress tracking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new_special_tokens` (list of `str` or `AddedToken`, *optional*) ‚Äî A list of
    new special tokens to add to the tokenizer you are training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`special_tokens_map` (`Dict[str, str]`, *optional*) ‚Äî If you want to rename
    some of the special tokens this tokenizer uses, pass along a mapping old special
    token name to new special token name in this argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`, *optional*) ‚Äî Additional keyword arguments passed
    along to the trainer from the ü§ó Tokenizers library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[PreTrainedTokenizerFast](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast)'
  prefs: []
  type: TYPE_NORMAL
- en: A new tokenizer of the same type as the original one, trained on `text_iterator`.
  prefs: []
  type: TYPE_NORMAL
- en: Trains a tokenizer on a new corpus with the same defaults (in terms of special
    tokens or tokenization pipeline) as the current one.
  prefs: []
  type: TYPE_NORMAL
- en: BatchEncoding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.BatchEncoding`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L176)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`data` (`dict`, *optional*) ‚Äî Dictionary of lists/arrays/tensors returned by
    the `__call__`/`encode_plus`/`batch_encode_plus` methods (‚Äòinput_ids‚Äô, ‚Äòattention_mask‚Äô,
    etc.).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoding` (`tokenizers.Encoding` or `Sequence[tokenizers.Encoding]`, *optional*)
    ‚Äî If the tokenizer is a fast tokenizer which outputs additional information like
    mapping from word/character space to token space the `tokenizers.Encoding` instance
    or list of instance (for batches) hold this information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tensor_type` (`Union[None, str, TensorType]`, *optional*) ‚Äî You can give a
    tensor_type here to convert the lists of integers in PyTorch/TensorFlow/Numpy
    Tensors at initialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prepend_batch_axis` (`bool`, *optional*, defaults to `False`) ‚Äî Whether or
    not to add a batch axis when converting to tensors (see `tensor_type` above).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n_sequences` (`Optional[int]`, *optional*) ‚Äî You can give a tensor_type here
    to convert the lists of integers in PyTorch/TensorFlow/Numpy Tensors at initialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Holds the output of the [**call**()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__),
    [encode_plus()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode_plus)
    and [batch_encode_plus()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.batch_encode_plus)
    methods (tokens, attention_masks, etc).
  prefs: []
  type: TYPE_NORMAL
- en: This class is derived from a python dictionary and can be used as a dictionary.
    In addition, this class exposes utility methods to map from word/character space
    to token space.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `char_to_token`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L555)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_or_char_index` (`int`) ‚Äî Index of the sequence in the batch. If the
    batch only comprise one sequence, this can be the index of the word in the sequence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`char_index` (`int`, *optional*) ‚Äî If a batch index is provided in *batch_or_token_index*,
    this can be the index of the word in the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sequence_index` (`int`, *optional*, defaults to 0) ‚Äî If pair of sequences
    are encoded in the batch this can be used to specify which sequence in the pair
    (0 or 1) the provided character index belongs to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: Index of the token.
  prefs: []
  type: TYPE_NORMAL
- en: Get the index of the token in the encoded output comprising a character in the
    original string for a sequence of the batch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Can be called as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`self.char_to_token(char_index)` if batch size is 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self.char_to_token(batch_index, char_index)` if batch size is greater or equal
    to 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method is particularly suited when the input sequences are provided as
    pre-tokenized sequences (i.e. words are defined by the user). In this case it
    allows to easily associate encoded tokens with provided tokenized words.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `char_to_word`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L641)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_or_char_index` (`int`) ‚Äî Index of the sequence in the batch. If the
    batch only comprise one sequence, this can be the index of the character in the
    original string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`char_index` (`int`, *optional*) ‚Äî If a batch index is provided in *batch_or_token_index*,
    this can be the index of the character in the original string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sequence_index` (`int`, *optional*, defaults to 0) ‚Äî If pair of sequences
    are encoded in the batch this can be used to specify which sequence in the pair
    (0 or 1) the provided character index belongs to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int` or `List[int]`'
  prefs: []
  type: TYPE_NORMAL
- en: Index or indices of the associated encoded token(s).
  prefs: []
  type: TYPE_NORMAL
- en: Get the word in the original string corresponding to a character in the original
    string of a sequence of the batch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Can be called as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`self.char_to_word(char_index)` if batch size is 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self.char_to_word(batch_index, char_index)` if batch size is greater than
    1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method is particularly suited when the input sequences are provided as
    pre-tokenized sequences (i.e. words are defined by the user). In this case it
    allows to easily associate encoded tokens with provided tokenized words.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `convert_to_tensors`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L680)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`tensor_type` (`str` or [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType),
    *optional*) ‚Äî The type of tensors to use. If `str`, should be one of the values
    of the enum [TensorType](/docs/transformers/v4.37.2/en/internal/file_utils#transformers.TensorType).
    If `None`, no modification is done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prepend_batch_axis` (`int`, *optional*, defaults to `False`) ‚Äî Whether or
    not to add the batch dimension during the conversion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert the inner content to tensors.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `sequence_ids`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L319)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_index` (`int`, *optional*, defaults to 0) ‚Äî The index to access in the
    batch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Optional[int]]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list indicating the sequence id corresponding to each token. Special tokens
    added by the tokenizer are mapped to `None` and other tokens are mapped to the
    index of their corresponding sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return a list mapping the tokens to the id of their original sentences:'
  prefs: []
  type: TYPE_NORMAL
- en: '`None` for special tokens added around or between sequences,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`0` for tokens corresponding to words in the first sequence,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1` for tokens corresponding to words in the second sequence when a pair of
    sequences was jointly encoded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `to`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L773)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`device` (`str` or `torch.device`) ‚Äî The device to put the tensors on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[BatchEncoding](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.BatchEncoding)'
  prefs: []
  type: TYPE_NORMAL
- en: The same instance after modification.
  prefs: []
  type: TYPE_NORMAL
- en: Send all values to device by calling `v.to(device)` (PyTorch only).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `token_to_chars`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L516)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_or_token_index` (`int`) ‚Äî Index of the sequence in the batch. If the
    batch only comprise one sequence, this can be the index of the token in the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token_index` (`int`, *optional*) ‚Äî If a batch index is provided in *batch_or_token_index*,
    this can be the index of the token or tokens in the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[CharSpan](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.CharSpan)'
  prefs: []
  type: TYPE_NORMAL
- en: Span of characters in the original string, or None, if the token (e.g. ~~,~~
    ) doesn‚Äôt correspond to any chars in the origin string.
  prefs: []
  type: TYPE_NORMAL
- en: Get the character span corresponding to an encoded token in a sequence of the
    batch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Character spans are returned as a [CharSpan](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.CharSpan)
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`start` ‚Äî Index of the first character in the original string associated to
    the token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end` ‚Äî Index of the character following the last character in the original
    string associated to the token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Can be called as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`self.token_to_chars(token_index)` if batch size is 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self.token_to_chars(batch_index, token_index)` if batch size is greater or
    equal to 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `token_to_sequence`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L386)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_or_token_index` (`int`) ‚Äî Index of the sequence in the batch. If the
    batch only comprises one sequence, this can be the index of the token in the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token_index` (`int`, *optional*) ‚Äî If a batch index is provided in *batch_or_token_index*,
    this can be the index of the token in the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: Index of the word in the input sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Get the index of the sequence represented by the given token. In the general
    use case, this method returns `0` for a single sequence or the first sequence
    of a pair, and `1` for the second sequence of a pair
  prefs: []
  type: TYPE_NORMAL
- en: 'Can be called as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`self.token_to_sequence(token_index)` if batch size is 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self.token_to_sequence(batch_index, token_index)` if batch size is greater
    than 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method is particularly suited when the input sequences are provided as
    pre-tokenized sequences (i.e., words are defined by the user). In this case it
    allows to easily associate encoded tokens with provided tokenized words.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `token_to_word`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L425)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_or_token_index` (`int`) ‚Äî Index of the sequence in the batch. If the
    batch only comprise one sequence, this can be the index of the token in the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token_index` (`int`, *optional*) ‚Äî If a batch index is provided in *batch_or_token_index*,
    this can be the index of the token in the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: Index of the word in the input sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Get the index of the word corresponding (i.e. comprising) to an encoded token
    in a sequence of the batch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Can be called as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`self.token_to_word(token_index)` if batch size is 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self.token_to_word(batch_index, token_index)` if batch size is greater than
    1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method is particularly suited when the input sequences are provided as
    pre-tokenized sequences (i.e., words are defined by the user). In this case it
    allows to easily associate encoded tokens with provided tokenized words.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `tokens`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L301)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_index` (`int`, *optional*, defaults to 0) ‚Äî The index to access in the
    batch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: The list of tokens at that index.
  prefs: []
  type: TYPE_NORMAL
- en: Return the list of tokens (sub-parts of the input strings after word/subword
    splitting and before conversion to integer indices) at a given batch index (only
    works for the output of a fast tokenizer).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `word_ids`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L367)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_index` (`int`, *optional*, defaults to 0) ‚Äî The index to access in the
    batch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Optional[int]]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list indicating the word corresponding to each token. Special tokens added
    by the tokenizer are mapped to `None` and other tokens are mapped to the index
    of their corresponding word (several tokens will be mapped to the same word index
    if they are parts of that word).
  prefs: []
  type: TYPE_NORMAL
- en: Return a list mapping the tokens to their actual word in the initial sentence
    for a fast tokenizer.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `word_to_chars`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L596)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_or_word_index` (`int`) ‚Äî Index of the sequence in the batch. If the
    batch only comprise one sequence, this can be the index of the word in the sequence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`word_index` (`int`, *optional*) ‚Äî If a batch index is provided in *batch_or_token_index*,
    this can be the index of the word in the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sequence_index` (`int`, *optional*, defaults to 0) ‚Äî If pair of sequences
    are encoded in the batch this can be used to specify which sequence in the pair
    (0 or 1) the provided word index belongs to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`CharSpan` or `List[CharSpan]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Span(s) of the associated character or characters in the string. CharSpan are
    NamedTuple with:'
  prefs: []
  type: TYPE_NORMAL
- en: 'start: index of the first character associated to the token in the original
    string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'end: index of the character following the last character associated to the
    token in the original string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the character span in the original string corresponding to given word in
    a sequence of the batch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Character spans are returned as a CharSpan NamedTuple with:'
  prefs: []
  type: TYPE_NORMAL
- en: 'start: index of the first character in the original string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'end: index of the character following the last character in the original string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Can be called as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`self.word_to_chars(word_index)` if batch size is 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self.word_to_chars(batch_index, word_index)` if batch size is greater or equal
    to 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `word_to_tokens`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L463)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_or_word_index` (`int`) ‚Äî Index of the sequence in the batch. If the
    batch only comprises one sequence, this can be the index of the word in the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`word_index` (`int`, *optional*) ‚Äî If a batch index is provided in *batch_or_token_index*,
    this can be the index of the word in the sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sequence_index` (`int`, *optional*, defaults to 0) ‚Äî If pair of sequences
    are encoded in the batch this can be used to specify which sequence in the pair
    (0 or 1) the provided word index belongs to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: ([TokenSpan](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.TokenSpan),
    *optional*)
  prefs: []
  type: TYPE_NORMAL
- en: Span of tokens in the encoded sequence. Returns `None` if no tokens correspond
    to the word. This can happen especially when the token is a special token that
    has been used to format the tokenization. For example when we add a class token
    at the very beginning of the tokenization.
  prefs: []
  type: TYPE_NORMAL
- en: Get the encoded token span corresponding to a word in a sequence of the batch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Token spans are returned as a [TokenSpan](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.TokenSpan)
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`start` ‚Äî Index of the first token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end` ‚Äî Index of the token following the last token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Can be called as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`self.word_to_tokens(word_index, sequence_index: int = 0)` if batch size is
    1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self.word_to_tokens(batch_index, word_index, sequence_index: int = 0)` if
    batch size is greater or equal to 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This method is particularly suited when the input sequences are provided as
    pre-tokenized sequences (i.e. words are defined by the user). In this case it
    allows to easily associate encoded tokens with provided tokenized words.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `words`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tokenization_utils_base.py#L343)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_index` (`int`, *optional*, defaults to 0) ‚Äî The index to access in the
    batch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Optional[int]]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list indicating the word corresponding to each token. Special tokens added
    by the tokenizer are mapped to `None` and other tokens are mapped to the index
    of their corresponding word (several tokens will be mapped to the same word index
    if they are parts of that word).
  prefs: []
  type: TYPE_NORMAL
- en: Return a list mapping the tokens to their actual word in the initial sentence
    for a fast tokenizer.
  prefs: []
  type: TYPE_NORMAL
