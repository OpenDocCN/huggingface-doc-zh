- en: Create an audio dataset
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建音频数据集
- en: 'Original text: [https://huggingface.co/docs/datasets/audio_dataset](https://huggingface.co/docs/datasets/audio_dataset)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/datasets/audio_dataset](https://huggingface.co/docs/datasets/audio_dataset)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'You can share a dataset with your team or with anyone in the community by creating
    a dataset repository on the Hugging Face Hub:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在Hugging Face Hub上创建数据集存储库与团队或社区中的任何人共享数据集：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are several methods for creating and sharing an audio dataset:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以创建和共享音频数据集：
- en: Create an audio dataset from local files in python with [Dataset.push_to_hub()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.push_to_hub).
    This is an easy way that requires only a few steps in python.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[Dataset.push_to_hub()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.push_to_hub)在Python中从本地文件创建音频数据集。这是一种只需要在Python中进行几个步骤的简单方法。
- en: Create an audio dataset repository with the `AudioFolder` builder. This is a
    no-code solution for quickly creating an audio dataset with several thousand audio
    files.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`AudioFolder`构建器创建音频数据集存储库。这是一种无代码解决方案，可快速创建包含数千个音频文件的音频数据集。
- en: Create an audio dataset by writing a loading script. This method is for advanced
    users and requires more effort and coding, but you have greater flexibility over
    how a dataset is defined, downloaded, and generated which can be useful for more
    complex or large scale audio datasets.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过编写加载脚本创建音频数据集。这种方法适用于高级用户，需要更多的努力和编码，但您可以更灵活地定义、下载和生成数据集，这对于更复杂或大规模的音频数据集可能很有用。
- en: You can control access to your dataset by requiring users to share their contact
    information first. Check out the [Gated datasets](https://huggingface.co/docs/hub/datasets-gated)
    guide for more information about how to enable this feature on the Hub.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过要求用户首先共享其联系信息来控制对数据集的访问权限。查看[Hugging Face Hub上的Gated数据集](https://huggingface.co/docs/hub/datasets-gated)指南，了解如何在Hub上启用此功能的更多信息。
- en: Local files
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地文件
- en: 'You can load your own dataset using the paths to your audio files. Use the
    [cast_column()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.cast_column)
    function to take a column of audio file paths, and cast it to the [Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)
    feature:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用音频文件的路径加载自己的数据集。使用[cast_column()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.cast_column)函数将音频文件路径列转换为[Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)特征：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then upload the dataset to the Hugging Face Hub using [Dataset.push_to_hub()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.push_to_hub):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用[Dataset.push_to_hub()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.push_to_hub)将数据集上传到Hugging
    Face Hub：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will create a dataset repository containing your audio dataset:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个包含您音频数据集的数据集存储库：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: AudioFolder
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AudioFolder
- en: The `AudioFolder` is a dataset builder designed to quickly load an audio dataset
    with several thousand audio files without requiring you to write any code. Any
    additional information about your dataset - such as transcription, speaker accent,
    or speaker intent - is automatically loaded by `AudioFolder` as long as you include
    this information in a metadata file (`metadata.csv`/`metadata.jsonl`).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`AudioFolder`是一个数据集构建器，旨在快速加载包含数千个音频文件的音频数据集，而无需您编写任何代码。只要在元数据文件（`metadata.csv`/`metadata.jsonl`）中包含此信息，`AudioFolder`会自动加载有关数据集的任何其他信息
    - 如转录、说话者口音或说话者意图。'
- en: 💡 Take a look at the [Split pattern hierarchy](repository_structure#split-pattern-hierarchy)
    to learn more about how `AudioFolder` creates dataset splits based on your dataset
    repository structure.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 💡查看[Split pattern hierarchy](repository_structure#split-pattern-hierarchy)以了解有关`AudioFolder`如何根据数据集存储库结构创建数据集拆分的更多信息。
- en: 'Create a dataset repository on the Hugging Face Hub and upload your dataset
    directory following the `AudioFolder` structure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hugging Face Hub上创建一个数据集存储库，并按照`AudioFolder`结构上传您的数据集目录：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `data` folder can be any name you want.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`文件夹可以是任何您想要的名称。'
- en: It can be helpful to store your metadata as a `jsonl` file if the data columns
    contain a more complex format (like a list of floats) to avoid parsing errors
    or reading complex values as strings.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据列包含更复杂的格式（如浮点数列表）时，将元数据存储为`jsonl`文件可能会有所帮助，以避免解析错误或将复杂值读取为字符串。
- en: 'The metadata file should include a `file_name` column to link an audio file
    to it’s metadata:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据文件应包括一个`file_name`列，将音频文件与其元数据链接起来：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then you can store your dataset in a directory structure like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您可以将数据集存储在这样的目录结构中：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Users can now load your dataset and the associated metadata by specifying `audiofolder`
    in [load_dataset()](/docs/datasets/v2.17.0/en/package_reference/loading_methods#datasets.load_dataset)
    and the dataset directory in `data_dir`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 用户现在可以通过在[load_dataset()](/docs/datasets/v2.17.0/en/package_reference/loading_methods#datasets.load_dataset)中指定`audiofolder`和在`data_dir`中指定数据集目录来加载您的数据集和相关元数据：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also use `audiofolder` to load datasets involving multiple splits.
    To do so, your dataset directory might have the following structure:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`audiofolder`加载涉及多个拆分的数据集。为此，您的数据集目录可能具有以下结构：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that if audio files are located not right next to a metadata file, `file_name`
    column should be a full relative path to an audio file, not just its filename.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果音频文件不是紧邻元数据文件，`file_name`列应该是音频文件的完整相对路径，而不仅仅是文件名。
- en: 'For audio datasets that don’t have any associated metadata, `AudioFolder` automatically
    infers the class labels of the dataset based on the directory name. It might be
    useful for audio classification tasks. Your dataset directory might look like:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有任何关联元数据的音频数据集，`AudioFolder`会根据目录名称自动推断数据集的类标签。这对于音频分类任务可能很有用。您的数据集目录可能如下所示：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Load the dataset with `AudioFolder`, and it will create a `label` column from
    the directory name (language id):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`AudioFolder`加载数据集，它将从目录名称（语言ID）创建一个`label`列：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If all audio files are contained in a single directory or if they are not on
    the same level of directory structure, `label` column won’t be added automatically.
    If you need it, set `drop_labels=False` explicitly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有音频文件都包含在一个单独的目录中，或者它们不在相同级别的目录结构中，`label` 列不会自动添加。如果需要它，请显式设置 `drop_labels=False`。
- en: Some audio datasets, like those found in [Kaggle competitions](https://www.kaggle.com/competitions/kaggle-pog-series-s01e02/overview),
    have separate metadata files for each split. Provided the metadata features are
    the same for each split, `audiofolder` can be used to load all splits at once.
    If the metadata features differ across each split, you should load them with separate
    `load_dataset()` calls.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一些音频数据集，比如在[Kaggle 竞赛](https://www.kaggle.com/competitions/kaggle-pog-series-s01e02/overview)中发现的那些，为每个拆分单独提供了元数据文件。只要每个拆分的元数据特征相同，`audiofolder`
    就可以用来一次加载所有拆分。如果每个拆分的元数据特征不同，您应该使用单独的 `load_dataset()` 调用来加载它们。
- en: Loading script
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载脚本
- en: 'Write a dataset loading script to manually create a dataset. It defines a dataset’s
    splits and configurations, and handles downloading and generating the dataset
    examples. The script should have the same name as your dataset folder or repository:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个数据集加载脚本来手动创建一个数据集。它定义了数据集的拆分和配置，并处理下载和生成数据集示例。脚本的名称应与您的数据集文件夹或存储库相同：
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `data` folder can be any name you want, it doesn’t have to be `data`. This
    folder is optional, unless you’re hosting your dataset on the Hub.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`data` 文件夹可以是您想要的任何名称，不一定是 `data`。除非您将数据集托管在 Hub 上，否则此文件夹是可选的。'
- en: 'This directory structure allows your dataset to be loaded in one line:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目录结构允许您的数据集在一行中加载：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This guide will show you how to create a dataset loading script for audio datasets,
    which is a bit different from [creating a loading script for text datasets](./dataset_script).
    Audio datasets are commonly stored in `tar.gz` archives which requires a particular
    approach to support streaming mode. While streaming is not required, we highly
    encourage implementing streaming support in your audio dataset because users without
    a lot of disk space can use your dataset without downloading it. Learn more about
    streaming in the [Stream](./stream) guide!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南将向您展示如何为音频数据集创建一个数据集加载脚本，这与[为文本数据集创建加载脚本](./dataset_script)有些不同。音频数据集通常存储在
    `tar.gz` 存档中，这需要一种特殊的方法来支持流式模式。虽然流式传输不是必需的，但我们强烈建议在您的音频数据集中实现流式支持，因为没有太多磁盘空间的用户可以在不下载数据集的情况下使用您的数据集。在[Stream](./stream)指南中了解更多关于流式传输的信息！
- en: 'Here is an example using TAR archives:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用 TAR 存档的示例：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In addition to learning how to create a streamable dataset, you’ll also learn
    how to:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了学习如何创建一个可流式传输的数据集，您还将学习如何：
- en: Create a dataset builder class.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个数据集构建器类。
- en: Create dataset configurations.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据集配置。
- en: Add dataset metadata.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加数据集元数据。
- en: Download and define the dataset splits.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并定义数据集拆分。
- en: Generate the dataset.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成数据集。
- en: Upload the dataset to the Hub.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据集上传到 Hub。
- en: The best way to learn is to open up an existing audio dataset loading script,
    like [Vivos](https://huggingface.co/datasets/vivos/blob/main/vivos.py), and follow
    along!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 学习的最佳方法是打开一个现有的音频数据集加载脚本，比如[Vivos](https://huggingface.co/datasets/vivos/blob/main/vivos.py)，并跟着做！
- en: This guide shows how to process audio data stored in TAR archives - the most
    frequent case for audio datasets. Check out [minds14](https://huggingface.co/datasets/PolyAI/minds14/blob/main/minds14.py)
    dataset for an example of an audio script which uses ZIP archives.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南展示了如何处理存储在 TAR 存档中的音频数据 - 这是音频数据集的最常见情况。查看[minds14](https://huggingface.co/datasets/PolyAI/minds14/blob/main/minds14.py)
    数据集，了解一个使用 ZIP 存档的音频脚本示例。
- en: To help you get started, we created a loading script [template](https://github.com/huggingface/datasets/blob/main/templates/new_dataset_script.py)
    you can copy and use as a starting point!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您入门，我们创建了一个加载脚本[模板](https://github.com/huggingface/datasets/blob/main/templates/new_dataset_script.py)，您可以复制并用作起点！
- en: Create a dataset builder class
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个数据集构建器类
- en: '[GeneratorBasedBuilder](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder)
    is the base class for datasets generated from a dictionary generator. Within this
    class, there are three methods to help create your dataset:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[GeneratorBasedBuilder](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder)
    是从字典生成器生成的数据集的基类。在这个类中，有三种方法可以帮助您创建数据集：'
- en: '`_info` stores information about your dataset like its description, license,
    and features.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_info` 存储有关数据集的信息，如描述、许可证和特征。'
- en: '`_split_generators` downloads the dataset and defines its splits.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_split_generators` 下载数据集并定义其拆分。'
- en: '`_generate_examples` generates the dataset’s samples containing the audio data
    and other features specified in `info` for each split.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_generate_examples` 为每个拆分生成包含音频数据和 `info` 中指定的其他特征的数据集样本。'
- en: 'Start by creating your dataset class as a subclass of [GeneratorBasedBuilder](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder)
    and add the three methods. Don’t worry about filling in each of these methods
    yet, you’ll develop those over the next few sections:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建您的数据集类，作为 [GeneratorBasedBuilder](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder)
    的子类，并添加这三种方法。暂时不用担心填写这些方法中的每一个，您将在接下来的几个部分中开发它们：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Multiple configurations
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多个配置
- en: In some cases, a dataset may have more than one configuration. For example,
    [LibriVox Indonesia](https://huggingface.co/datasets/indonesian-nlp/librivox-indonesia)
    dataset has several configurations corresponding to different languages.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，一个数据集可能有多个配置。例如，[LibriVox Indonesia](https://huggingface.co/datasets/indonesian-nlp/librivox-indonesia)
    数据集有几个对应不同语言的配置。
- en: To create different configurations, use the [BuilderConfig](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.BuilderConfig)
    class to create a subclass of your dataset. The only required parameter is the
    `name` of the configuration, which must be passed to the configuration’s superclass
    `__init__()`. Otherwise, you can specify any custom parameters you want in your
    configuration class.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建不同的配置，使用 [BuilderConfig](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.BuilderConfig)
    类来创建数据集的子类。唯一需要的参数是配置的 `name`，必须传递给配置的超类 `__init__()`。否则，您可以在配置类中指定任何自定义参数。
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Define your configurations in the `BUILDER_CONFIGS` class variable inside [GeneratorBasedBuilder](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder).
    In this example, the author imports the languages from a separate `release_stats.py`
    [file](https://huggingface.co/datasets/indonesian-nlp/librivox-indonesia/blob/main/release_stats.py)
    from their repository, and then loops through each language to create a configuration:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [GeneratorBasedBuilder](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder)
    内部的 `BUILDER_CONFIGS` 类变量中定义您的配置。在此示例中，作者从一个单独的 `release_stats.py` [文件](https://huggingface.co/datasets/indonesian-nlp/librivox-indonesia/blob/main/release_stats.py)
    中导入语言，然后循环遍历每种语言以创建一个配置：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Typically, users need to specify a configuration to load in [load_dataset()](/docs/datasets/v2.17.0/en/package_reference/loading_methods#datasets.load_dataset),
    otherwise a `ValueError` is raised. You can avoid this by setting a default dataset
    configuration to load in `DEFAULT_CONFIG_NAME`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，用户需要指定一个配置来加载 [load_dataset()](/docs/datasets/v2.17.0/en/package_reference/loading_methods#datasets.load_dataset)，否则会引发
    `ValueError`。您可以通过设置默认数据集配置来避免这种情况，以在 `DEFAULT_CONFIG_NAME` 中加载。
- en: 'Now if users want to load the Balinese (`bal`) configuration, they can use
    the configuration name:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果用户想要加载 Balinese (`bal`) 配置，他们可以使用配置名称：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Add dataset metadata
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加数据集元数据
- en: 'Adding information about your dataset helps users to learn more about it. This
    information is stored in the [DatasetInfo](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.DatasetInfo)
    class which is returned by the `info` method. Users can access this information
    by:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 添加关于您的数据集的信息可以帮助用户了解更多。这些信息存储在 [DatasetInfo](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.DatasetInfo)
    类中，该类由 `info` 方法返回。用户可以通过以下方式访问这些信息：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'There is a lot of information you can include about your dataset, but some
    important ones are:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以包含很多关于数据集的信息，但一些重要的信息包括：
- en: '`description` provides a concise description of the dataset.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`description` 提供数据集的简明描述。'
- en: '`features` specify the dataset column types. Since you’re creating an audio
    loading script, you’ll need to include the [Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)
    feature and the `sampling_rate` of the dataset.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`features` 指定数据集列类型。由于您正在创建一个音频加载脚本，您需要包括 [Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)
    特征和数据集的 `sampling_rate`。'
- en: '`homepage` provides a link to the dataset homepage.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`homepage` 提供数据集主页的链接。'
- en: '`license` specify the permissions for using a dataset as defined by the license
    type.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`license` 指定使用数据集的权限，由许可证类型定义。'
- en: '`citation` is a BibTeX citation of the dataset.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`citation` 是数据集的 BibTeX 引用。'
- en: You’ll notice a lot of the dataset information is defined earlier in the loading
    script which can make it easier to read. There are also other `~Dataset.Features`
    you can input, so be sure to check out the full list and [features guide](./about_dataset_features)
    for more details.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到很多数据集信息在加载脚本中早已定义，这可以使阅读更加容易。还有其他 `~Dataset.Features` 您可以输入，所以一定要查看完整列表和
    [features guide](./about_dataset_features) 以获取更多详细信息。
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Download and define the dataset splits
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载并定义数据集拆分
- en: Now that you’ve added some information about your dataset, the next step is
    to download the dataset and define the splits.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经添加了一些关于数据集的信息，下一步是下载数据集并定义拆分。
- en: 'Use the [download()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.download)
    method to download metadata file at `_PROMPTS_URLS` and audio TAR archive at `_DATA_URL`.
    This method returns the path to the local file/archive. In streaming mode, it
    doesn’t download the file(s) and just returns a URL to stream the data from. This
    method accepts:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [download()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.download)
    方法下载 `_PROMPTS_URLS` 中的元数据文件和 `_DATA_URL` 中的音频 TAR 存档。此方法返回本地文件/存档的路径。在流式模式下，它不会下载文件，只会返回一个从中流式传输数据的
    URL。此方法接受：
- en: a relative path to a file inside a Hub dataset repository (for example, in the
    `data/` folder)
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hub 数据集存储库中文件的相对路径（例如，在 `data/` 文件夹中）
- en: a URL to a file hosted somewhere else
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个指向其他地方托管的文件的 URL
- en: a (nested) list or dictionary of file names or URLs
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个（嵌套的）文件名或 URL 的列表或字典
- en: 'After you’ve downloaded the dataset, use the [SplitGenerator](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.SplitGenerator)
    to organize the audio files and sentence prompts in each split. Name each split
    with a standard name like: `Split.TRAIN`, `Split.TEST`, and `SPLIT.Validation`.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下载数据集后，使用 [SplitGenerator](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.SplitGenerator)
    来组织每个拆分中的音频文件和句子提示。为每个拆分命名一个标准名称，如：`Split.TRAIN`、`Split.TEST` 和 `SPLIT.Validation`。
- en: In the `gen_kwargs` parameter, specify the file path to the `prompts_path` and
    `path_to_clips`. For `audio_files`, you’ll need to use [iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)
    to iterate over the audio files in the TAR archive. This enables streaming for
    your dataset. All of these file paths are passed onto the next step where you’ll
    actually generate the dataset.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `gen_kwargs` 参数中，指定 `prompts_path` 和 `path_to_clips` 的文件路径。对于 `audio_files`，您需要使用
    [iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)
    来迭代 TAR 存档中的音频文件。这使得您的数据集可以进行流式传输。所有这些文件路径都传递到下一步，您将在那里实际生成数据集。
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This implementation does not extract downloaded archives. If you want to extract
    files after download, you need to additionally use [extract()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.extract),
    see the [(Advanced) Extract TAR archives](#advanced-extract-tar-archives-locally)
    section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现不会提取已下载的存档。如果您想要在下载后提取文件，您需要额外使用[extract()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.extract)，请参阅[(高级)
    本地提取 TAR 存档](#advanced-extract-tar-archives-locally)部分。
- en: Generate the dataset
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成数据集
- en: The last method in the [GeneratorBasedBuilder](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder)
    class actually generates the samples in the dataset. It yields a dataset according
    to the structure specified in `features` from the `info` method. As you can see,
    `generate_examples` accepts the `prompts_path`, `path_to_clips`, and `audio_files`
    from the previous method as arguments.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[GeneratorBasedBuilder](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder)
    类中的最后一个方法实际上生成数据集中的样本。它根据`info`方法中指定的`features`结构生成数据集。如您所见，`generate_examples`接受来自前一方法的`prompts_path`、`path_to_clips`和`audio_files`作为参数。'
- en: Files inside TAR archives are accessed and yielded sequentially. This means
    you need to have the metadata associated with the audio files in the TAR file
    in hand first so you can yield it with its corresponding audio file.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: TAR 存档中的文件按顺序访问和生成。这意味着您需要首先准备好与 TAR 文件中音频文件相关的元数据，以便能够将其与相应的音频文件一起生成。
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Finally, iterate over files in `audio_files` and yield them along with their
    corresponding metadata. [iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)
    yields a tuple of (`path`, `f`) where `path` is a **relative** path to a file
    inside TAR archive and `f` is a file object itself.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`audio_files`中迭代文件并与其对应的元数据一起生成。[iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)
    生成一个元组(`path`, `f`)，其中`path`是 TAR 存档中文件的**相对**路径，`f`是文件对象本身。
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Put these two steps together, and the whole `_generate_examples` method looks
    like:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两个步骤结合起来，整个`_generate_examples`方法看起来像这样：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Upload the dataset to the Hub
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将数据集上传到Hub
- en: Once your script is ready, [create a dataset card](./dataset_card) and [upload
    it to the Hub](./share).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的脚本准备好了，[创建一个数据集卡片](./dataset_card)并[上传到Hub](./share)。
- en: Congratulations, you can now load your dataset from the Hub! 🥳
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，您现在可以从Hub加载您的数据集了！🥳
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: (Advanced) Extract TAR archives locally
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: （高级）本地提取 TAR 存档
- en: In the example above downloaded archives are not extracted and therefore examples
    do not contain information about where they are stored locally. To explain how
    to do the extraction in a way that it also supports streaming, we will briefly
    go through the [LibriVox Indonesia](https://huggingface.co/datasets/indonesian-nlp/librivox-indonesia/blob/main/librivox-indonesia.py)
    loading script.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，下载的存档没有被提取，因此示例不包含有关它们在本地存储位置的信息。为了解释如何以支持流式传输的方式进行提取，我们将简要介绍[LibriVox
    Indonesia](https://huggingface.co/datasets/indonesian-nlp/librivox-indonesia/blob/main/librivox-indonesia.py)加载脚本。
- en: Download and define the dataset splits
  id: totrans-109
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 下载并定义数据集拆分
- en: Use the [download()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.download)
    method to download the audio data at `_AUDIO_URL`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[download()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.download)方法下载位于`_AUDIO_URL`的音频数据。
- en: 'To extract audio TAR archive locally, use the [extract()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.extract).
    You can use this method only in non-streaming mode (when `dl_manager.is_streaming=False`).
    This returns a local path to the extracted archive directory:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在本地提取音频 TAR 存档，请使用[extract()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.extract)。您只能在非流式模式下使用此方法（当`dl_manager.is_streaming=False`时）。这将返回提取的存档目录的本地路径：
- en: '[PRE25]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Use the [iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)
    method to iterate over the archive at `audio_path`, just like in the Vivos example
    above. [iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)
    doesn’t provide any information about the full paths of files from the archive,
    even if it has been extracted. As a result, you need to pass the `local_extracted_archive`
    path to the next step in `gen_kwargs`, in order to preserve information about
    where the archive was extracted to. This is required to construct the correct
    paths to the local files when you generate the examples.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)方法迭代位于`audio_path`的存档，就像上面的
    Vivos 示例一样。[iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)不提供有关存档中文件的完整路径的信息，即使已经提取。因此，您需要在`gen_kwargs`中将`local_extracted_archive`路径传递给下一步，以保留有关存档提取位置的信息。这是在生成示例时构建正确的本地文件路径所必需的。
- en: The reason you need to use a combination of [download()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.download)
    and [iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)
    is because files in TAR archives can’t be accessed directly by their paths. Instead,
    you’ll need to iterate over the files within the archive! You can use [download_and_extract()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract)
    and [extract()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.extract)
    with TAR archives only in non-streaming mode, otherwise it would throw an error.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要同时使用[download()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.download)和[iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)的组合，因为无法直接通过路径访问TAR存档中的文件。相反，您需要迭代存档中的文件！您可以使用[download_and_extract()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract)和[extract()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.extract)来处理TAR存档，但只能在非流模式下进行，否则会出错。
- en: Use the [download_and_extract()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract)
    method to download the metadata file specified in `_METADATA_URL`. This method
    returns a path to a local file in non-streaming mode. In streaming mode, it doesn’t
    download file locally and returns the same URL.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用[download_and_extract()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.download_and_extract)方法下载在`_METADATA_URL`中指定的元数据文件。该方法以非流模式返回本地文件的路径。在流模式下，它不会在本地下载文件，而是返回相同的URL。
- en: 'Now use the [SplitGenerator](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.SplitGenerator)
    to organize the audio files and metadata in each split. Name each split with a
    standard name like: `Split.TRAIN`, `Split.TEST`, and `SPLIT.Validation`.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在使用[SplitGenerator](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.SplitGenerator)来组织每个拆分中的音频文件和元数据。为每个拆分命名一个标准名称，如：`Split.TRAIN`、`Split.TEST`和`SPLIT.Validation`。
- en: In the `gen_kwargs` parameter, specify the file paths to `local_extracted_archive`,
    `audio_files`, `metadata_path`, and `path_to_clips`. Remember, for `audio_files`,
    you need to use [iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)
    to iterate over the audio files in the TAR archives. This enables streaming for
    your dataset! All of these file paths are passed onto the next step where the
    dataset samples are generated.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`gen_kwargs`参数中，指定`local_extracted_archive`、`audio_files`、`metadata_path`和`path_to_clips`的文件路径。请记住，对于`audio_files`，您需要使用[iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)来迭代TAR存档中的音频文件。这将为您的数据集启用流式处理！所有这些文件路径都传递到下一步，生成数据集样本。
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Generate the dataset
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 生成数据集
- en: Here `_generate_examples` accepts `local_extracted_archive`, `audio_files`,
    `metadata_path`, and `path_to_clips` from the previous method as arguments.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`_generate_examples`接受来自先前方法的`local_extracted_archive`、`audio_files`、`metadata_path`和`path_to_clips`作为参数。
- en: 'TAR files are accessed and yielded sequentially. This means you need to have
    the metadata in `metadata_path` associated with the audio files in the TAR file
    in hand first so that you can yield it with its corresponding audio file further:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TAR文件按顺序访问和产生。这意味着您需要首先将`metadata_path`中的元数据与TAR文件中的音频文件关联起来，以便随后可以将其与相应的音频文件一起产生。
- en: '[PRE27]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now you can yield the files in `audio_files` archive. When you use [iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive),
    it yielded a tuple of (`path`, `f`) where `path` is a **relative path** to a file
    inside the archive, and `f` is the file object itself. To get the **full path**
    to the locally extracted file, join the path of the directory (`local_extracted_path`)
    where the archive is extracted to and the relative audio file path (`path`):'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以在`audio_files`存档中获取文件。当您使用[iter_archive()](/docs/datasets/v2.17.0/en/package_reference/builder_classes#datasets.DownloadManager.iter_archive)时，它会产生一个元组(`path`,
    `f`)，其中`path`是存档中文件的**相对路径**，`f`是文件对象本身。要获取本地提取文件的**完整路径**，请将存档提取到的目录(`local_extracted_path`)的路径与相对音频文件路径(`path`)连接起来：
- en: '[PRE28]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Put both of these steps together, and the whole `_generate_examples` method
    should look like:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两个步骤结合起来，整个`_generate_examples`方法应该如下所示：
- en: '[PRE29]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
