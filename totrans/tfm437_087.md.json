["```py\nmodel = BrandNewBertModel.from_pretrained(\"brandy/brand_new_bert\")\nmodel.config  # model has access to its config\n```", "```py\ngit clone https://github.com/[your Github handle]/transformers.git\ncd transformers\ngit remote add upstream https://github.com/huggingface/transformers.git\n```", "```py\npython -m venv .env\nsource .env/bin/activate\npip install -e \".[dev]\"\n```", "```py\npip install -e \".[quality]\"\n```", "```py\ncd ..\n```", "```py\ngit clone https://github.com/org_that_created_brand_new_bert_org/brand_new_bert.git\ncd brand_new_bert\npip install -e .\n```", "```py\nmodel = BrandNewBertModel.load_pretrained_checkpoint(\"/path/to/checkpoint/\")\ninput_ids = [0, 4, 5, 2, 3, 7, 9]  # vector of input ids\noriginal_output = model.predict(input_ids)\n```", "```py\n[[\n [-0.1465, -0.6501,  0.1993,  ...,  0.1451,  0.3430,  0.6024],\n [-0.4417, -0.5920,  0.3450,  ..., -0.3062,  0.6182,  0.7132],\n [-0.5009, -0.7122,  0.4548,  ..., -0.3662,  0.6091,  0.7648],\n ...,\n [-0.5613, -0.6332,  0.4324,  ..., -0.3792,  0.7372,  0.9288],\n [-0.5416, -0.6345,  0.4180,  ..., -0.3564,  0.6992,  0.9191],\n [-0.5334, -0.6403,  0.4271,  ..., -0.3339,  0.6533,  0.8694]]],\n```", "```py\ncd transformers\n```", "```py\ngit checkout -b add_brand_new_bert\n```", "```py\ngit add .\ngit commit\n```", "```py\ngit fetch upstream\ngit rebase upstream/main\n```", "```py\ngit push -u origin a-descriptive-name-for-my-changes\n```", "```py\ngit fetch upstream\ngit merge upstream/main\n```", "```py\nfrom transformers import BrandNewBertModel, BrandNewBertConfig\n\nmodel = BrandNewBertModel(BrandNewBertConfig())\n```", "```py\ndef _init_weights(self, module):\n    \"\"\"Initialize the weights\"\"\"\n    if isinstance(module, nn.Linear):\n        module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n        if module.bias is not None:\n            module.bias.data.zero_()\n    elif isinstance(module, nn.Embedding):\n        module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n        if module.padding_idx is not None:\n            module.weight.data[module.padding_idx].zero_()\n    elif isinstance(module, nn.LayerNorm):\n        module.bias.data.zero_()\n        module.weight.data.fill_(1.0)\n```", "```py\ndef _init_weights(self, module):\n    \"\"\"Initialize the weights\"\"\"\n    if isinstnace(module, Wav2Vec2ForPreTraining):\n        module.project_hid.reset_parameters()\n        module.project_q.reset_parameters()\n        module.project_hid._is_hf_initialized = True\n        module.project_q._is_hf_initialized = True\n    elif isinstance(module, nn.Linear):\n        module.weight.data.normal_(mean=0.0, std=self.config.initializer_range)\n        if module.bias is not None:\n            module.bias.data.zero_()\n```", "```py\nfrom torch import nn\n\nclass SimpleModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.dense = nn.Linear(10, 10)\n        self.intermediate = nn.Linear(10, 10)\n        self.layer_norm = nn.LayerNorm(10)\n```", "```py\nmodel = SimpleModel()\n\nprint(model)\n```", "```py\nSimpleModel(\n  (dense): Linear(in_features=10, out_features=10, bias=True)\n  (intermediate): Linear(in_features=10, out_features=10, bias=True)\n  (layer_norm): LayerNorm((10,), eps=1e-05, elementwise_affine=True)\n)\n```", "```py\nprint(model.dense.weight.data)\n```", "```py\ntensor([[-0.0818,  0.2207, -0.0749, -0.0030,  0.0045, -0.1569, -0.1598,  0.0212,\n         -0.2077,  0.2157],\n        [ 0.1044,  0.0201,  0.0990,  0.2482,  0.3116,  0.2509,  0.2866, -0.2190,\n          0.2166, -0.0212],\n        [-0.2000,  0.1107, -0.1999, -0.3119,  0.1559,  0.0993,  0.1776, -0.1950,\n         -0.1023, -0.0447],\n        [-0.0888, -0.1092,  0.2281,  0.0336,  0.1817, -0.0115,  0.2096,  0.1415,\n         -0.1876, -0.2467],\n        [ 0.2208, -0.2352, -0.1426, -0.2636, -0.2889, -0.2061, -0.2849, -0.0465,\n          0.2577,  0.0402],\n        [ 0.1502,  0.2465,  0.2566,  0.0693,  0.2352, -0.0530,  0.1859, -0.0604,\n          0.2132,  0.1680],\n        [ 0.1733, -0.2407, -0.1721,  0.1484,  0.0358, -0.0633, -0.0721, -0.0090,\n          0.2707, -0.2509],\n        [-0.1173,  0.1561,  0.2945,  0.0595, -0.1996,  0.2988, -0.0802,  0.0407,\n          0.1829, -0.1568],\n        [-0.1164, -0.2228, -0.0403,  0.0428,  0.1339,  0.0047,  0.1967,  0.2923,\n          0.0333, -0.0536],\n        [-0.1492, -0.1616,  0.1057,  0.1950, -0.2807, -0.2710, -0.1586,  0.0739,\n          0.2220,  0.2358]]).\n```", "```py\n# retrieve matching layer weights, e.g. by\n# recursive algorithm\nlayer_name = \"dense\"\npretrained_weight = array_of_dense_layer\n\nmodel_pointer = getattr(model, \"dense\")\n\nmodel_pointer.weight.data = torch.from_numpy(pretrained_weight)\n```", "```py\nassert (\n    model_pointer.weight.shape == pretrained_weight.shape\n), f\"Pointer shape of random weight {model_pointer.shape} and array shape of checkpoint weight {pretrained_weight.shape} mismatched\"\n```", "```py\nlogger.info(f\"Initialize PyTorch weight {layer_name} from {pretrained_weight.name}\")\n```", "```py\nmodel.save_pretrained(\"/path/to/converted/checkpoint/folder\")\n```", "```py\nmodel = BrandNewBertModel.from_pretrained(\"/path/to/converted/checkpoint/folder\")\ninput_ids = [0, 4, 4, 3, 2, 4, 1, 7, 19]\noutput = model(input_ids).last_hidden_states\n```", "```py\npytest tests/models/brand_new_bert/test_modeling_brand_new_bert.py\n```", "```py\nRUN_SLOW=1 pytest -sv tests/models/brand_new_bert/test_modeling_brand_new_bert.py::BrandNewBertModelIntegrationTests\n```", "```py\ninput_str = \"This is a long example input string containing special characters .$?-, numbers 2872 234 12 and words.\"\nmodel = BrandNewBertModel.load_pretrained_checkpoint(\"/path/to/checkpoint/\")\ninput_ids = model.tokenize(input_str)\n```", "```py\nfrom transformers import BrandNewBertTokenizer\n\ninput_str = \"This is a long example input string containing special characters .$?-, numbers 2872 234 12 and words.\"\n\ntokenizer = BrandNewBertTokenizer.from_pretrained(\"/path/to/tokenizer/folder/\")\n\ninput_ids = tokenizer(input_str).input_ids\n```", "```py\nmake style\n```", "```py\nmake quality\n```", "```py\nbrand_new_bert.push_to_hub(\"brand_new_bert\")\n# Uncomment the following line to push to an organization.\n# brand_new_bert.push_to_hub(\"<organization>/brand_new_bert\")\n```"]