- en: Serialization & Deserialization for Requests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求的序列化和反序列化
- en: 'Original text: [https://huggingface.co/docs/inference-endpoints/others/serialization](https://huggingface.co/docs/inference-endpoints/others/serialization)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '原始文本: [https://huggingface.co/docs/inference-endpoints/others/serialization](https://huggingface.co/docs/inference-endpoints/others/serialization)'
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Hugging Face Inference Endpount comes with a default serving container which
    is used for all [supported Transformers and Sentence-Transformers tasks](/docs/inference-endpoints/supported_tasks)
    and for [custom inference handler](/docs/inference-endpoints/guides/custom_handler).
    The serving container takes care of serialization and deserialization of the request
    and response payloads based on the `content-type` and `accept` headers of the
    request. That means that when you send a request with a JSON body and a `content-type:
    application/json` header, the serving container will deserialize the JSON payload
    into a Python dictionary and pass it to the inference handler and if you send
    a request with a `accept: image/png` header, the serving container will seralize
    the response from the task/custom handler into a image.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 'Hugging Face 推理端点使用默认的服务容器，用于所有[支持的 Transformers 和 Sentence-Transformers 任务](/docs/inference-endpoints/supported_tasks)以及[自定义推理处理程序](/docs/inference-endpoints/guides/custom_handler)。服务容器负责根据请求的
    `content-type` 和 `accept` 头部对请求和响应负载进行序列化和反序列化。这意味着当您发送一个带有 JSON 主体和 `content-type:
    application/json` 头部的请求时，服务容器将将 JSON 负载反序列化为 Python 字典并传递给推理处理程序，如果您发送一个带有 `accept:
    image/png` 头部的请求，服务容器将把任务/自定义处理程序的响应序列化为图像。'
- en: Below is a list of supported `content-types` and the deserialized payload that
    is passed to the inference handler.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是支持的 `content-types` 列表以及传递给推理处理程序的反序列化负载。
- en: '| Content-Type | Payload |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| Content-Type | 负载 |'
- en: '| --- | --- |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| application/json | `dict` |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| application/json | `字典` |'
- en: '| text/csv | `raw` |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| text/csv | `原始` |'
- en: '| text/plain | `raw` |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| text/plain | `原始` |'
- en: '| image/png | `binary` |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| image/png | `二进制` |'
- en: '| image/jpeg | `binary` |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| image/jpeg | `二进制` |'
- en: '| image/jpg | `binary` |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| image/jpg | `二进制` |'
- en: '| image/tiff | `binary` |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| image/tiff | `二进制` |'
- en: '| image/bmp | `binary` |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| image/bmp | `二进制` |'
- en: '| image/gif | `binary` |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| image/gif | `二进制` |'
- en: '| image/webp | `binary` |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| image/webp | `二进制` |'
- en: '| image/x-image | `binary` |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| image/x-image | `二进制` |'
- en: '| audio/x-flac | `{"inputs": bytes(body)}` |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| audio/x-flac | `{"inputs": bytes(body)}` |'
- en: '| audio/flac | `{"inputs": bytes(body)}` |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| audio/flac | `{"inputs": bytes(body)}` |'
- en: '| audio/mpeg | `{"inputs": bytes(body)}` |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| audio/mpeg | `{"inputs": bytes(body)}` |'
- en: '| audio/x-mpeg-3 | `{"inputs": bytes(body)}` |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| audio/x-mpeg-3 | `{"inputs": bytes(body)}` |'
- en: '| audio/wave | `{"inputs": bytes(body)}` |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| audio/wave | `{"inputs": bytes(body)}` |'
- en: '| audio/wav | `{"inputs": bytes(body)}` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| audio/wav | `{"inputs": bytes(body)}` |'
- en: '| audio/x-wav | `{"inputs": bytes(body)}` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| audio/x-wav | `{"inputs": bytes(body)}` |'
- en: '| audio/ogg | `{"inputs": bytes(body)}` |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| audio/ogg | `{"inputs": bytes(body)}` |'
- en: '| audio/x-audio | `{"inputs": bytes(body)}` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| audio/x-audio | `{"inputs": bytes(body)}` |'
- en: '| audio/webm | `{"inputs": bytes(body)}` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| audio/webm | `{"inputs": bytes(body)}` |'
- en: '| audio/webm;codecs=opus | `{"inputs": bytes(body)}` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| audio/webm;codecs=opus | `{"inputs": bytes(body)}` |'
- en: '| audio/AMR | `{"inputs": bytes(body)}` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| audio/AMR | `{"inputs": bytes(body)}` |'
- en: '| audio/amr | `{"inputs": bytes(body)}` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| audio/amr | `{"inputs": bytes(body)}` |'
- en: '| audio/AMR-WB | `{"inputs": bytes(body)}` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| audio/AMR-WB | `{"inputs": bytes(body)}` |'
- en: '| audio/AMR-WB+ | `{"inputs": bytes(body)}` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| audio/AMR-WB+ | `{"inputs": bytes(body)}` |'
- en: '| audio/m4a | `{"inputs": bytes(body)}` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| audio/m4a | `{"inputs": bytes(body)}` |'
- en: '| audio/x-m4a | `{"inputs": bytes(body)}` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| audio/x-m4a | `{"inputs": bytes(body)}` |'
- en: Below is a list of supported `accept` headers and the serialized payload is
    returned.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是支持的 `accept` 头部列表以及返回的序列化负载。 '
- en: '| Accept | Payload |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| Accept | 负载 |'
- en: '| --- | --- |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| application/json | `JSON` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| application/json | `JSON` |'
- en: '| text/csv | `raw` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| text/csv | `原始` |'
- en: '| text/plain | `raw` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| text/plain | `原始` |'
- en: '| image/png | `binary` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| image/png | `二进制` |'
- en: '| image/jpeg | `binary` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| image/jpeg | `二进制` |'
- en: '| image/jpg | `binary` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| image/jpg | `二进制` |'
- en: '| image/tiff | `binary` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| image/tiff | `二进制` |'
- en: '| image/bmp | `binary` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| image/bmp | `二进制` |'
- en: '| image/gif | `binary` |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| image/gif | `二进制` |'
- en: '| image/webp | `binary` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| image/webp | `二进制` |'
- en: '| image/x-image | `binary` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| image/x-image | `二进制` |'
