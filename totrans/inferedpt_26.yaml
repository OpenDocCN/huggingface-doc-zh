- en: Serialization & Deserialization for Requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/inference-endpoints/others/serialization](https://huggingface.co/docs/inference-endpoints/others/serialization)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/inference-endpoints/main/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/inference-endpoints/main/en/_app/immutable/entry/start.efd013a9.js">
    <link rel="modulepreload" href="/docs/inference-endpoints/main/en/_app/immutable/chunks/scheduler.389d799c.js">
    <link rel="modulepreload" href="/docs/inference-endpoints/main/en/_app/immutable/chunks/singletons.eafbeb3b.js">
    <link rel="modulepreload" href="/docs/inference-endpoints/main/en/_app/immutable/chunks/paths.b3517460.js">
    <link rel="modulepreload" href="/docs/inference-endpoints/main/en/_app/immutable/entry/app.53dcf7ee.js">
    <link rel="modulepreload" href="/docs/inference-endpoints/main/en/_app/immutable/chunks/index.8f81d18f.js">
    <link rel="modulepreload" href="/docs/inference-endpoints/main/en/_app/immutable/nodes/0.474ae6bf.js">
    <link rel="modulepreload" href="/docs/inference-endpoints/main/en/_app/immutable/nodes/20.28a9e470.js">
    <link rel="modulepreload" href="/docs/inference-endpoints/main/en/_app/immutable/chunks/Heading.41733039.js">
  prefs: []
  type: TYPE_NORMAL
- en: 'Hugging Face Inference Endpount comes with a default serving container which
    is used for all [supported Transformers and Sentence-Transformers tasks](/docs/inference-endpoints/supported_tasks)
    and for [custom inference handler](/docs/inference-endpoints/guides/custom_handler).
    The serving container takes care of serialization and deserialization of the request
    and response payloads based on the `content-type` and `accept` headers of the
    request. That means that when you send a request with a JSON body and a `content-type:
    application/json` header, the serving container will deserialize the JSON payload
    into a Python dictionary and pass it to the inference handler and if you send
    a request with a `accept: image/png` header, the serving container will seralize
    the response from the task/custom handler into a image.'
  prefs: []
  type: TYPE_NORMAL
- en: Below is a list of supported `content-types` and the deserialized payload that
    is passed to the inference handler.
  prefs: []
  type: TYPE_NORMAL
- en: '| Content-Type | Payload |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| application/json | `dict` |'
  prefs: []
  type: TYPE_TB
- en: '| text/csv | `raw` |'
  prefs: []
  type: TYPE_TB
- en: '| text/plain | `raw` |'
  prefs: []
  type: TYPE_TB
- en: '| image/png | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/jpeg | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/jpg | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/tiff | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/bmp | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/gif | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/webp | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/x-image | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/x-flac | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/flac | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/mpeg | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/x-mpeg-3 | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/wave | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/wav | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/x-wav | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/ogg | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/x-audio | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/webm | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/webm;codecs=opus | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/AMR | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/amr | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/AMR-WB | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/AMR-WB+ | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/m4a | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: '| audio/x-m4a | `{"inputs": bytes(body)}` |'
  prefs: []
  type: TYPE_TB
- en: Below is a list of supported `accept` headers and the serialized payload is
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: '| Accept | Payload |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| application/json | `JSON` |'
  prefs: []
  type: TYPE_TB
- en: '| text/csv | `raw` |'
  prefs: []
  type: TYPE_TB
- en: '| text/plain | `raw` |'
  prefs: []
  type: TYPE_TB
- en: '| image/png | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/jpeg | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/jpg | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/tiff | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/bmp | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/gif | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/webp | `binary` |'
  prefs: []
  type: TYPE_TB
- en: '| image/x-image | `binary` |'
  prefs: []
  type: TYPE_TB
