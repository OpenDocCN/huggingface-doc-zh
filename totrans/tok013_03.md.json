["```py\nwget https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-103-raw-v1.zip\nunzip wikitext-103-raw-v1.zip\n```", "```py\nfrom tokenizers import Tokenizer\nfrom tokenizers.models import BPE\ntokenizer = Tokenizer(BPE(unk_token=\"[UNK]\"))\n```", "```py\nfrom tokenizers.trainers import BpeTrainer\ntrainer = BpeTrainer(special_tokens=[\"[UNK]\", \"[CLS]\", \"[SEP]\", \"[PAD]\", \"[MASK]\"])\n```", "```py\nfrom tokenizers.pre_tokenizers import Whitespace\ntokenizer.pre_tokenizer = Whitespace()\n```", "```py\nfiles = [f\"data/wikitext-103-raw/wiki.{split}.raw\" for split in [\"test\", \"train\", \"valid\"]]\ntokenizer.train(files, trainer)\n```", "```py\ntokenizer.save(\"data/tokenizer-wiki.json\")\n```", "```py\ntokenizer = Tokenizer.from_file(\"data/tokenizer-wiki.json\")\n```", "```py\noutput = tokenizer.encode(\"Hello, y'all! How are you \ud83d\ude01 ?\")\n```", "```py\nprint(output.tokens)\n# [\"Hello\", \",\", \"y\", \"'\", \"all\", \"!\", \"How\", \"are\", \"you\", \"[UNK]\", \"?\"]\n```", "```py\nprint(output.ids)\n# [27253, 16, 93, 11, 5097, 5, 7961, 5112, 6218, 0, 35]\n```", "```py\nprint(output.offsets[9])\n# (26, 27)\n```", "```py\nsentence = \"Hello, y'all! How are you \ud83d\ude01 ?\"\nsentence[26:27]\n# \"\ud83d\ude01\"\n```", "```py\ntokenizer.token_to_id(\"[SEP]\")\n# 2\n```", "```py\nfrom tokenizers.processors import TemplateProcessing\ntokenizer.post_processor = TemplateProcessing(\n    single=\"[CLS] $A [SEP]\",\n    pair=\"[CLS] $A [SEP] $B:1 [SEP]:1\",\n    special_tokens=[\n        (\"[CLS]\", tokenizer.token_to_id(\"[CLS]\")),\n        (\"[SEP]\", tokenizer.token_to_id(\"[SEP]\")),\n    ],\n)\n```", "```py\noutput = tokenizer.encode(\"Hello, y'all! How are you \ud83d\ude01 ?\")\nprint(output.tokens)\n# [\"[CLS]\", \"Hello\", \",\", \"y\", \"'\", \"all\", \"!\", \"How\", \"are\", \"you\", \"[UNK]\", \"?\", \"[SEP]\"]\n```", "```py\noutput = tokenizer.encode(\"Hello, y'all!\", \"How are you \ud83d\ude01 ?\")\nprint(output.tokens)\n# [\"[CLS]\", \"Hello\", \",\", \"y\", \"'\", \"all\", \"!\", \"[SEP]\", \"How\", \"are\", \"you\", \"[UNK]\", \"?\", \"[SEP]\"]\n```", "```py\nprint(output.type_ids)\n# [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]\n```", "```py\noutput = tokenizer.encode_batch([\"Hello, y'all!\", \"How are you \ud83d\ude01 ?\"])\n```", "```py\noutput = tokenizer.encode_batch(\n    [[\"Hello, y'all!\", \"How are you \ud83d\ude01 ?\"], [\"Hello to you too!\", \"I'm fine, thank you!\"]]\n)\n```", "```py\ntokenizer.enable_padding(pad_id=3, pad_token=\"[PAD]\")\n```", "```py\noutput = tokenizer.encode_batch([\"Hello, y'all!\", \"How are you \ud83d\ude01 ?\"])\nprint(output[1].tokens)\n# [\"[CLS]\", \"How\", \"are\", \"you\", \"[UNK]\", \"?\", \"[SEP]\", \"[PAD]\"]\n```", "```py\nprint(output[1].attention_mask)\n# [1, 1, 1, 1, 1, 1, 1, 0]\n```", "```py\nfrom tokenizers import Tokenizer\n\ntokenizer = Tokenizer.from_pretrained(\"bert-base-uncased\")\n```", "```py\nfrom tokenizers import BertWordPieceTokenizer\n\ntokenizer = BertWordPieceTokenizer(\"bert-base-uncased-vocab.txt\", lowercase=True)\n```", "```py\nwget https://s3.amazonaws.com/models.huggingface.co/bert/bert-base-uncased-vocab.txt\n```"]