- en: Downloading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/huggingface_hub/package_reference/file_download](https://huggingface.co/docs/huggingface_hub/package_reference/file_download)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Download a single file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: hf_hub_download
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.hf_hub_download`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/file_download.py#L993)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A user or an organization name and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename` (`str`) — The name of the file in the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subfolder` (`str`, *optional*) — An optional value corresponding to a folder
    inside the model repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if downloading
    from a dataset or space, `None` or `"model"` if downloading from a model. Default
    is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — An optional Git revision id which can be a
    branch name, a tag, or a commit hash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library_name` (`str`, *optional*) — The name of the library to which the object
    corresponds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library_version` (`str`, *optional*) — The version of the library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_dir` (`str`, `Path`, *optional*) — Path to the folder where cached files
    are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_dir` (`str` or `Path`, *optional*) — If provided, the downloaded file
    will be placed under this directory, either as a symlink (default) or a regular
    file (see description for more details).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_dir_use_symlinks` (`"auto"` or `bool`, defaults to `"auto"`) — To be
    used with `local_dir`. If set to “auto”, the cache directory will be used and
    the file will be either duplicated or symlinked to the local directory depending
    on its size. It set to `True`, a symlink will be created, no matter the file size.
    If set to `False`, the file will either be duplicated from cache (if already exists)
    or downloaded from the Hub and not cached. See description for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user_agent` (`dict`, `str`, *optional*) — The user-agent info in the form
    of a dictionary or a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force_download` (`bool`, *optional*, defaults to `False`) — Whether the file
    should be downloaded even if it already exists in the local cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies` (`dict`, *optional*) — Dictionary mapping protocol to the URL of
    the proxy passed to `requests.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`etag_timeout` (`float`, *optional*, defaults to `10`) — When fetching ETag,
    how many seconds to wait for the server to send data before giving up which is
    passed to `requests.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resume_download` (`bool`, *optional*, defaults to `False`) — If `True`, resume
    a previously interrupted download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, `bool`, *optional*) — A token to be used for the download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True`, the token is read from the HuggingFace config folder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If a string, it’s used as the authentication token.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_files_only` (`bool`, *optional*, defaults to `False`) — If `True`, avoid
    downloading the file and return the path to the local cached file if it exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`legacy_cache_layout` (`bool`, *optional*, defaults to `False`) — If `True`,
    uses the legacy file cache layout i.e. just call [hf_hub_url()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_url)
    then `cached_download`. This is deprecated as the new cache layout is more powerful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download a given file if it’s not already present in the local cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new cache file layout looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The cache directory contains one subfolder per repo_id (namespaced by repo type)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'inside each repo folder:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: refs is a list of the latest known revision => commit_hash pairs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: blobs contains the actual file blobs (identified by their git-sha or sha256,
    depending on whether they’re LFS files or not)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: snapshots contains one subfolder per commit, each “commit” contains the subset
    of the files that have been resolved at that particular commit. Each filename
    is a symlink to the blob at that particular commit.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If `local_dir` is provided, the file structure from the repo will be replicated
    in this location. You can configure how you want to move those files:'
  prefs: []
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks="auto"` (default), files are downloaded and stored
    in the cache directory as blob files. Small files (<5MB) are duplicated in `local_dir`
    while a symlink is created for bigger files. The goal is to be able to manually
    edit and save small files without corrupting the cache while saving disk space
    for binary files. The 5MB threshold can be configured with the `HF_HUB_LOCAL_DIR_AUTO_SYMLINK_THRESHOLD`
    environment variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks=True`, files are downloaded, stored in the cache
    directory and symlinked in `local_dir`. This is optimal in term of disk usage
    but files must not be manually edited.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks=False` and the blob files exist in the cache directory,
    they are duplicated in the local dir. This means disk usage is not optimized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, if `local_dir_use_symlinks=False` and the blob files do not exist in
    the cache directory, then the files are downloaded and directly placed under `local_dir`.
    This means if you need to download them again later, they will be re-downloaded
    entirely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)
    if `token=True` and the token cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`OSError`](https://docs.python.org/3/library/exceptions.html#OSError) if ETag
    cannot be determined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    If the revision to download from cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[EntryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.EntryNotFoundError)
    If the file to download cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LocalEntryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.LocalEntryNotFoundError)
    If network is disabled or unavailable and file is not found in cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hf_hub_url
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.hf_hub_url`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/file_download.py#L184)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) name and a repo name
    separated by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename` (`str`) — The name of the file in the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subfolder` (`str`, *optional*) — An optional value corresponding to a folder
    inside the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if downloading
    from a dataset or space, `None` or `"model"` if downloading from a model. Default
    is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — An optional Git revision id which can be a
    branch name, a tag, or a commit hash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Construct the URL of a file from the given information.
  prefs: []
  type: TYPE_NORMAL
- en: The resolved address can either be a huggingface.co-hosted url, or a link to
    Cloudfront (a Content Delivery Network, or CDN) for large files which are more
    than a few MBs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Notes:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloudfront is replicated over the globe so downloads are way faster for the
    end user (and it also lowers our bandwidth costs).
  prefs: []
  type: TYPE_NORMAL
- en: Cloudfront aggressively caches files by default (default TTL is 24 hours), however
    this is not an issue here because we implement a git-based versioning system on
    huggingface.co, which means that we store the files on S3/Cloudfront in a content-addressable
    way (i.e., the file name is its hash). Using content-addressable filenames means
    cache can’t ever be stale.
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of client-side caching from this library, we base our caching on the
    objects’ entity tag (`ETag`), which is an identifier of a specific version of
    a resource [1]_. An object’s ETag is: its git-sha1 if stored in git, or its sha256
    if stored in git-lfs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'References:'
  prefs: []
  type: TYPE_NORMAL
- en: '[1] [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download a snapshot of the repo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.snapshot_download`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_snapshot_download.py#L34)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A user or an organization name and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if downloading
    from a dataset or space, `None` or `"model"` if downloading from a model. Default
    is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — An optional Git revision id which can be a
    branch name, a tag, or a commit hash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_dir` (`str`, `Path`, *optional*) — Path to the folder where cached files
    are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_dir` (`str` or `Path`, *optional*) — If provided, the downloaded files
    will be placed under this directory, either as symlinks (default) or regular files
    (see description for more details).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_dir_use_symlinks` (`"auto"` or `bool`, defaults to `"auto"`) — To be
    used with `local_dir`. If set to “auto”, the cache directory will be used and
    the file will be either duplicated or symlinked to the local directory depending
    on its size. It set to `True`, a symlink will be created, no matter the file size.
    If set to `False`, the file will either be duplicated from cache (if already exists)
    or downloaded from the Hub and not cached. See description for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library_name` (`str`, *optional*) — The name of the library to which the object
    corresponds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library_version` (`str`, *optional*) — The version of the library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user_agent` (`str`, `dict`, *optional*) — The user-agent info in the form
    of a dictionary or a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies` (`dict`, *optional*) — Dictionary mapping protocol to the URL of
    the proxy passed to `requests.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`etag_timeout` (`float`, *optional*, defaults to `10`) — When fetching ETag,
    how many seconds to wait for the server to send data before giving up which is
    passed to `requests.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resume_download` (`bool`, *optional*, defaults to `False) -- If` True`, resume
    a previously interrupted download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force_download` (`bool`, *optional*, defaults to `False`) — Whether the file
    should be downloaded even if it already exists in the local cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, `bool`, *optional*) — A token to be used for the download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True`, the token is read from the HuggingFace config folder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If a string, it’s used as the authentication token.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_files_only` (`bool`, *optional*, defaults to `False`) — If `True`, avoid
    downloading the file and return the path to the local cached file if it exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow_patterns` (`List[str]` or `str`, *optional*) — If provided, only files
    matching at least one pattern are downloaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_patterns` (`List[str]` or `str`, *optional*) — If provided, files matching
    any of the patterns are not downloaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_workers` (`int`, *optional*) — Number of concurrent threads to download
    files (1 thread = 1 file download). Defaults to 8.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tqdm_class` (`tqdm`, *optional*) — If provided, overwrites the default behavior
    for the progress bar. Passed argument must inherit from `tqdm.auto.tqdm` or at
    least mimic its behavior. Note that the `tqdm_class` is not passed to each individual
    download. Defaults to the custom HF progress bar that can be disabled by setting
    `HF_HUB_DISABLE_PROGRESS_BARS` environment variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download repo files.
  prefs: []
  type: TYPE_NORMAL
- en: Download a whole snapshot of a repo’s files at the specified revision. This
    is useful when you want all files from a repo, because you don’t know which ones
    you will need a priori. All files are nested inside a folder in order to keep
    their actual filename relative to that folder. You can also filter which files
    to download using `allow_patterns` and `ignore_patterns`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `local_dir` is provided, the file structure from the repo will be replicated
    in this location. You can configure how you want to move those files:'
  prefs: []
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks="auto"` (default), files are downloaded and stored
    in the cache directory as blob files. Small files (<5MB) are duplicated in `local_dir`
    while a symlink is created for bigger files. The goal is to be able to manually
    edit and save small files without corrupting the cache while saving disk space
    for binary files. The 5MB threshold can be configured with the `HF_HUB_LOCAL_DIR_AUTO_SYMLINK_THRESHOLD`
    environment variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks=True`, files are downloaded, stored in the cache
    directory and symlinked in `local_dir`. This is optimal in term of disk usage
    but files must not be manually edited.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks=False` and the blob files exist in the cache directory,
    they are duplicated in the local dir. This means disk usage is not optimized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, if `local_dir_use_symlinks=False` and the blob files do not exist in
    the cache directory, then the files are downloaded and directly placed under `local_dir`.
    This means if you need to download them again later, they will be re-downloaded
    entirely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An alternative would be to clone the repo but this requires git and git-lfs
    to be installed and properly configured. It is also not possible to filter which
    files to download when cloning a repository using git.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)
    if `token=True` and the token cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`OSError`](https://docs.python.org/3/library/exceptions.html#OSError) if ETag
    cannot be determined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get metadata about a file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: get_hf_file_metadata
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.get_hf_file_metadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/file_download.py#L1588)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`url` (`str`) — File url, for example returned by [hf_hub_url()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_url).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str` or `bool`, *optional*) — A token to be used for the download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True`, the token is read from the HuggingFace config folder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `False` or `None`, no token is provided.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If a string, it’s used as the authentication token.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies` (`dict`, *optional*) — Dictionary mapping protocol to the URL of
    the proxy passed to `requests.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeout` (`float`, *optional*, defaults to 10) — How many seconds to wait
    for the server to send metadata before giving up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library_name` (`str`, *optional*) — The name of the library to which the object
    corresponds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library_version` (`str`, *optional*) — The version of the library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user_agent` (`dict`, `str`, *optional*) — The user-agent info in the form
    of a dictionary or a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch metadata of a file versioned on the Hub for a given url.
  prefs: []
  type: TYPE_NORMAL
- en: HfFileMetadata
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.HfFileMetadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/file_download.py#L160)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`commit_hash` (`str`, *optional*) — The commit_hash related to the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`etag` (`str`, *optional*) — Etag of the file on the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`location` (`str`) — Location where to download the file. Can be a Hub url
    or not (CDN).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (`size`) — Size of the file. In case of an LFS file, contains the size
    of the actual LFS file, not the pointer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data structure containing information about a file versioned on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Returned by [get_hf_file_metadata()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.get_hf_file_metadata)
    based on a URL.
  prefs: []
  type: TYPE_NORMAL
- en: Caching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The methods displayed above are designed to work with a caching system that
    prevents re-downloading files. The caching system was updated in v0.8.0 to become
    the central cache-system shared across libraries that depend on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Read the [cache-system guide](../guides/manage-cache) for a detailed presentation
    of caching at at HF.
  prefs: []
  type: TYPE_NORMAL
