- en: Uploading models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/hub/models-uploading](https://huggingface.co/docs/hub/models-uploading)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: To upload models to the Hub, you‚Äôll need to create an account at [Hugging Face](https://huggingface.co/join).
    Models on the Hub are [Git-based repositories](./repositories), which give you
    versioning, branches, discoverability and sharing features, integration with dozens
    of libraries, and more! You have control over what you want to upload to your
    repository, which could include checkpoints, configs, and any other files.
  prefs: []
  type: TYPE_NORMAL
- en: You can link repositories with an individual user, such as [osanseviero/fashion_brands_patterns](https://huggingface.co/osanseviero/fashion_brands_patterns),
    or with an organization, such as [facebook/bart-large-xsum](https://huggingface.co/facebook/bart-large-xsum).
    Organizations can collect models related to a company, community, or library!
    If you choose an organization, the model will be featured on the organization‚Äôs
    page, and every member of the organization will have the ability to contribute
    to the repository. You can create a new organization [here](https://huggingface.co/organizations/new).
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to upload models to the Hub, described below.
  prefs: []
  type: TYPE_NORMAL
- en: In case your model comes from a library that has [built-in support](#upload-from-a-library-with-built-in-support),
    one can use the existing methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case your model is a custom PyTorch model, the recommended way is to leverage
    the [huggingface_hub](#using-the-huggingface_hub-client-library) Python library
    as it allows to add `from_pretrained`, `push_to_hub` and [automated download metrics](https://huggingface.co/docs/hub/models-download-stats)
    capabilities to your models, just like models in the Transformers, Diffusers and
    Timm libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to programmatic uploads, you can always use the [web interface](#using-the-web-interface).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once your model is uploaded, we suggest adding a [Model Card](./model-cards)
    to your repo to document your model.
  prefs: []
  type: TYPE_NORMAL
- en: Using the web interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a brand new model repository, visit [huggingface.co/new](http://huggingface.co/new).
    Then follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the ‚ÄúFiles and versions‚Äù tab, select ‚ÄúAdd File‚Äù and specify ‚ÄúUpload File‚Äù:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/05d067eff6f48559fd7637532aade95a.png) ![](../Images/104f4d60f50bf58e45566d4dec230f67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From there, select a file from your computer to upload and leave a helpful
    commit message to know what you are uploading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/a505988ee5f759007b67b08ac7401ac7.png) ![](../Images/a1cabff5b3ec730a356110dc307723d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Afterwards, click **Commit changes** to upload your model to the Hub!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inspect files and history
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check your repository with all the recently added files!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9953cf6a131114707f2d2eedafedb1a9.png) ![](../Images/8ad3b293db30a82c311663ee674a55ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The UI allows you to explore the model files and commits and to see the diff
    introduced by each commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a7fa82b615cd013f4ac87f5da7165a86.png) ![](../Images/1d621a105d21b0df6db4627d4778aa28.png)'
  prefs: []
  type: TYPE_IMG
- en: Add metadata
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can add metadata to your model card. You can specify:'
  prefs: []
  type: TYPE_NORMAL
- en: the type of task this model is for, enabling widgets and the Inference API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the used library (`transformers`, `spaCy`, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: license
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a lot more!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read more about model tags [here](./model-cards#model-card-metadata).
  prefs: []
  type: TYPE_NORMAL
- en: Add TensorBoard traces
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any repository that contains TensorBoard traces (filenames that contain `tfevents`)
    is categorized with the [`TensorBoard` tag](https://huggingface.co/models?filter=tensorboard).
    As a convention, we suggest that you save traces under the `runs/` subfolder.
    The ‚ÄúTraining metrics‚Äù tab then makes it easy to review charts of the logged variables,
    like the loss or the accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/66e799c113febddf3a1a51b7236afec6.png) ![](../Images/bb1f38ca6cca241c3b6e031003265435.png)'
  prefs: []
  type: TYPE_IMG
- en: Models trained with ü§ó Transformers will generate [TensorBoard traces](https://huggingface.co/docs/transformers/main_classes/callback#transformers.integrations.TensorBoardCallback)
    by default if [`tensorboard`](https://pypi.org/project/tensorboard/) is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Upload from a library with built-in support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First check if your model is from a library that has built-in support to push
    to/load from the Hub, like Transformers, Diffusers, Timm, Asteroid, etc.: [https://huggingface.co/docs/hub/models-libraries](https://huggingface.co/docs/hub/models-libraries).
    Below we‚Äôll show how easy this is for a library like Transformers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Upload a PyTorch model using huggingface_hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In case your model is a (custom) PyTorch model, you can leverage the `PyTorchModelHubMixin`
    [class](https://huggingface.co/docs/huggingface_hub/package_reference/mixins#huggingface_hub.PyTorchModelHubMixin)
    available in the [huggingface_hub](https://github.com/huggingface/huggingface_hub)
    Python library. It is a minimal class which adds `from_pretrained` and `push_to_hub`
    capabilities to any `nn.Module`, along with download metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to use it (assuming you have run `pip install huggingface_hub`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen, the only thing required is to define all hyperparameters regarding
    the model architecture (such as hidden size, number of classes, dropout probability,
    etc.) in a Python dictionary often called the `config`. Next, you can define a
    class which takes the `config` as keyword argument in its init.
  prefs: []
  type: TYPE_NORMAL
- en: 'This comes with automated download metrics, meaning that you‚Äôll be able to
    see how many times the model is downloaded, the same way they are available for
    models integrated natively in the Transformers, Diffusers or Timm libraries. With
    this mixin class, each separate checkpoint is stored on the Hub in a single repository
    consisting of 2 files:'
  prefs: []
  type: TYPE_NORMAL
- en: a `pytorch_model.bin` or `model.safetensors` file containing the weights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a `config.json` file which is a serialized version of the model configuration.
    This class is used for counting download metrics: everytime a user calls `from_pretrained`
    to load a `config.json`, the count goes up by one. See [this guide](https://huggingface.co/docs/hub/models-download-stats)
    regarding automated download metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It‚Äôs recommended to add a model card to each checkpoint so that people can read
    what the model is about, have a link to the paper, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '![drawing](../Images/e398470724042db1452c69cf76e5f06e.png) Example [repository](https://huggingface.co/LiheYoung/depth_anything_vitl14)
    that leverages PyTorchModelHubMixin. Downloads are shown on the right.'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [the huggingface_hub‚Äôs documentation](https://huggingface.co/docs/huggingface_hub/guides/integrations)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, one can also simply programmatically upload files or folders
    to the hub: [https://huggingface.co/docs/huggingface_hub/guides/upload](https://huggingface.co/docs/huggingface_hub/guides/upload).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, since model repos are just Git repositories, you can also use Git to
    push your model files to the Hub. Follow the guide on [Getting Started with Repositories](repositories-getting-started#adding-files-to-a-repository-terminalterminal)
    to learn about using the `git` CLI to commit and push your models.
  prefs: []
  type: TYPE_NORMAL
