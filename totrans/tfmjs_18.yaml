- en: pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers.js/api/pipelines](https://huggingface.co/docs/transformers.js/api/pipelines)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers.js/main/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/entry/start.d68a6d16.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/scheduler.b108d059.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/singletons.e4b794f0.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/paths.0114e475.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/entry/app.c6513cb2.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/index.008de539.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/nodes/0.7513fd35.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/nodes/6.65d12c75.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/CodeBlock.3968c746.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/Heading.88bfeb84.js">
  prefs: []
  type: TYPE_NORMAL
- en: Pipelines provide a high-level, easy to use, API for running machine learning
    models.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Instantiate pipeline using the `pipeline` function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[pipelines](#module_pipelines)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*static*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.Pipeline](#module_pipelines.Pipeline) ⇐ `Callable`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new Pipeline(options)`](#new_module_pipelines.Pipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.dispose()`](#module_pipelines.Pipeline+dispose) : `DisposeType`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.TextClassificationPipeline](#module_pipelines.TextClassificationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new TextClassificationPipeline(options)`](#new_module_pipelines.TextClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.TextClassificationPipeline+_call) : `TextClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.TokenClassificationPipeline](#module_pipelines.TokenClassificationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new TokenClassificationPipeline(options)`](#new_module_pipelines.TokenClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.TokenClassificationPipeline+_call) : `TokenClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.QuestionAnsweringPipeline](#module_pipelines.QuestionAnsweringPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new QuestionAnsweringPipeline(options)`](#new_module_pipelines.QuestionAnsweringPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.QuestionAnsweringPipeline+_call) : `QuestionAnsweringPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.FillMaskPipeline](#module_pipelines.FillMaskPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new FillMaskPipeline(options)`](#new_module_pipelines.FillMaskPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.FillMaskPipeline+_call) : `FillMaskPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.Text2TextGenerationPipeline](#module_pipelines.Text2TextGenerationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new Text2TextGenerationPipeline(options)`](#new_module_pipelines.Text2TextGenerationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._key`](#module_pipelines.Text2TextGenerationPipeline+_key) : `’generated_text’`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.Text2TextGenerationPipeline+_call) : `Text2TextGenerationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.SummarizationPipeline](#module_pipelines.SummarizationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new SummarizationPipeline(options)`](#new_module_pipelines.SummarizationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._key`](#module_pipelines.SummarizationPipeline+_key) : `’summary_text’`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.TranslationPipeline](#module_pipelines.TranslationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new TranslationPipeline(options)`](#new_module_pipelines.TranslationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._key`](#module_pipelines.TranslationPipeline+_key) : `’translation_text’`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.TextGenerationPipeline](#module_pipelines.TextGenerationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new TextGenerationPipeline(options)`](#new_module_pipelines.TextGenerationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.TextGenerationPipeline+_call) : `TextGenerationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.ZeroShotClassificationPipeline](#module_pipelines.ZeroShotClassificationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ZeroShotClassificationPipeline(options)`](#new_module_pipelines.ZeroShotClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.model`](#module_pipelines.ZeroShotClassificationPipeline+model) : `any`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ZeroShotClassificationPipeline+_call) : `ZeroShotClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.FeatureExtractionPipeline](#module_pipelines.FeatureExtractionPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new FeatureExtractionPipeline(options)`](#new_module_pipelines.FeatureExtractionPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.FeatureExtractionPipeline+_call) : `FeatureExtractionPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.AudioClassificationPipeline](#module_pipelines.AudioClassificationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new AudioClassificationPipeline(options)`](#new_module_pipelines.AudioClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.AudioClassificationPipeline+_call) : `AudioClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.ZeroShotAudioClassificationPipeline](#module_pipelines.ZeroShotAudioClassificationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ZeroShotAudioClassificationPipeline(options)`](#new_module_pipelines.ZeroShotAudioClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ZeroShotAudioClassificationPipeline+_call) :
    `ZeroShotAudioClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.AutomaticSpeechRecognitionPipeline](#module_pipelines.AutomaticSpeechRecognitionPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new AutomaticSpeechRecognitionPipeline(options)`](#new_module_pipelines.AutomaticSpeechRecognitionPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.AutomaticSpeechRecognitionPipeline+_call) :
    `AutomaticSpeechRecognitionPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.ImageToTextPipeline](#module_pipelines.ImageToTextPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ImageToTextPipeline(options)`](#new_module_pipelines.ImageToTextPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ImageToTextPipeline+_call) : `ImageToTextPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.ImageClassificationPipeline](#module_pipelines.ImageClassificationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ImageClassificationPipeline(options)`](#new_module_pipelines.ImageClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ImageClassificationPipeline+_call) : `ImageClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.ImageSegmentationPipeline](#module_pipelines.ImageSegmentationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ImageSegmentationPipeline(options)`](#new_module_pipelines.ImageSegmentationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ImageSegmentationPipeline+_call) : `ImageSegmentationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.ZeroShotImageClassificationPipeline](#module_pipelines.ZeroShotImageClassificationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ZeroShotImageClassificationPipeline(options)`](#new_module_pipelines.ZeroShotImageClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ZeroShotImageClassificationPipeline+_call) :
    `ZeroShotImageClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.ObjectDetectionPipeline](#module_pipelines.ObjectDetectionPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ObjectDetectionPipeline(options)`](#new_module_pipelines.ObjectDetectionPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ObjectDetectionPipeline+_call) : `ObjectDetectionPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.ZeroShotObjectDetectionPipeline](#module_pipelines.ZeroShotObjectDetectionPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ZeroShotObjectDetectionPipeline(options)`](#new_module_pipelines.ZeroShotObjectDetectionPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ZeroShotObjectDetectionPipeline+_call) : `ZeroShotObjectDetectionPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.DocumentQuestionAnsweringPipeline](#module_pipelines.DocumentQuestionAnsweringPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new DocumentQuestionAnsweringPipeline(options)`](#new_module_pipelines.DocumentQuestionAnsweringPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.DocumentQuestionAnsweringPipeline+_call) : `DocumentQuestionAnsweringPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.TextToAudioPipeline](#module_pipelines.TextToAudioPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new TextToAudioPipeline(options)`](#new_module_pipelines.TextToAudioPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.TextToAudioPipeline+_call) : `TextToAudioPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.ImageToImagePipeline](#module_pipelines.ImageToImagePipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ImageToImagePipeline(options)`](#new_module_pipelines.ImageToImagePipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ImageToImagePipeline+_call) : `ImageToImagePipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[.DepthEstimationPipeline](#module_pipelines.DepthEstimationPipeline)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new DepthEstimationPipeline(options)`](#new_module_pipelines.DepthEstimationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.DepthEstimationPipeline+_call) : `DepthEstimationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.pipeline(task, [model], [options])`](#module_pipelines.pipeline) ⇒ `*`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*inner*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~x[1]`](#module_pipelines..x%5B1%5D) : `number`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ImagePipelineInputs`](#module_pipelines..ImagePipelineInputs) : `string`
    | `RawImage` | `URL`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~AudioPipelineInputs`](#module_pipelines..AudioPipelineInputs) : `string`
    | `URL` | `Float32Array` | `Float64Array`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~BoundingBox`](#module_pipelines..BoundingBox) : `Object`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~Disposable`](#module_pipelines..Disposable) ⇒ `Promise.<void>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~TextPipelineConstructorArgs`](#module_pipelines..TextPipelineConstructorArgs)
    : `Object`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ImagePipelineConstructorArgs`](#module_pipelines..ImagePipelineConstructorArgs)
    : `Object`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~TextImagePipelineConstructorArgs`](#module_pipelines..TextImagePipelineConstructorArgs)
    : `Object`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~TextClassificationPipelineType`](#module_pipelines..TextClassificationPipelineType)
    ⇒ `Promise.<(TextClassificationOutput|Array<TextClassificationOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~TokenClassificationPipelineType`](#module_pipelines..TokenClassificationPipelineType)
    ⇒ `Promise.<(TokenClassificationOutput|Array<TokenClassificationOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~QuestionAnsweringPipelineType`](#module_pipelines..QuestionAnsweringPipelineType)
    ⇒ `Promise.<(QuestionAnsweringOutput|Array<QuestionAnsweringOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~FillMaskPipelineType`](#module_pipelines..FillMaskPipelineType) ⇒ `Promise.<(FillMaskOutput|Array<FillMaskOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~Text2TextGenerationPipelineType`](#module_pipelines..Text2TextGenerationPipelineType)
    ⇒ `Promise.<(Text2TextGenerationOutput|Array<Text2TextGenerationOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~SummarizationPipelineType`](#module_pipelines..SummarizationPipelineType)
    ⇒ `Promise.<(SummarizationOutput|Array<SummarizationOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~TranslationPipelineType`](#module_pipelines..TranslationPipelineType) ⇒
    `Promise.<(TranslationOutput|Array<TranslationOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~TextGenerationPipelineType`](#module_pipelines..TextGenerationPipelineType)
    ⇒ `Promise.<(TextGenerationOutput|Array<TextGenerationOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ZeroShotClassificationPipelineType`](#module_pipelines..ZeroShotClassificationPipelineType)
    ⇒ `Promise.<(ZeroShotClassificationOutput|Array<ZeroShotClassificationOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~FeatureExtractionPipelineType`](#module_pipelines..FeatureExtractionPipelineType)
    ⇒ `Promise.<Tensor>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~AudioClassificationPipelineType`](#module_pipelines..AudioClassificationPipelineType)
    ⇒ `Promise.<(AudioClassificationOutput|Array<AudioClassificationOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ZeroShotAudioClassificationPipelineType`](#module_pipelines..ZeroShotAudioClassificationPipelineType)
    ⇒ `Promise.<(Array<ZeroShotAudioClassificationOutput>|Array<Array<ZeroShotAudioClassificationOutput>>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ChunkCallback`](#module_pipelines..ChunkCallback) : `function`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~Chunk`](#module_pipelines..Chunk) : `Object`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~AutomaticSpeechRecognitionPipelineType`](#module_pipelines..AutomaticSpeechRecognitionPipelineType)
    ⇒ `Promise.<(AutomaticSpeechRecognitionOutput|Array<AutomaticSpeechRecognitionOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ImageToTextPipelineType`](#module_pipelines..ImageToTextPipelineType) ⇒
    `Promise.<(ImageToTextOutput|Array<ImageToTextOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ImageClassificationPipelineType`](#module_pipelines..ImageClassificationPipelineType)
    ⇒ `Promise.<(ImageClassificationOutput|Array<ImageClassificationOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ImageSegmentationPipelineType`](#module_pipelines..ImageSegmentationPipelineType)
    ⇒ `Promise.<Array<ImageSegmentationPipelineOutput>>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ZeroShotImageClassificationPipelineType`](#module_pipelines..ZeroShotImageClassificationPipelineType)
    ⇒ `Promise.<(Array<ZeroShotImageClassificationOutput>|Array<Array<ZeroShotImageClassificationOutput>>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ObjectDetectionPipelineType`](#module_pipelines..ObjectDetectionPipelineType)
    ⇒ `Promise.<(ObjectDetectionPipelineOutput|Array<ObjectDetectionPipelineOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ZeroShotObjectDetectionPipelineType`](#module_pipelines..ZeroShotObjectDetectionPipelineType)
    ⇒ `Promise.<(Array<ZeroShotObjectDetectionOutput>|Array<Array<ZeroShotObjectDetectionOutput>>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~DocumentQuestionAnsweringPipelineType`](#module_pipelines..DocumentQuestionAnsweringPipelineType)
    ⇒ `Promise.<(DocumentQuestionAnsweringOutput|Array<DocumentQuestionAnsweringOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~TextToAudioPipelineConstructorArgs`](#module_pipelines..TextToAudioPipelineConstructorArgs)
    : `Object`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~TextToAudioPipelineType`](#module_pipelines..TextToAudioPipelineType) ⇒
    `Promise.<TextToAudioOutput>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~ImageToImagePipelineType`](#module_pipelines..ImageToImagePipelineType)
    ⇒ `Promise.<(RawImage|Array<RawImage>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~DepthEstimationPipelineType`](#module_pipelines..DepthEstimationPipelineType)
    ⇒ `Promise.<(DepthEstimationPipelineOutput|Array<DepthEstimationPipelineOutput>)>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`~AllTasks`](#module_pipelines..AllTasks) : `*`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.Pipeline ⇐ <code> Callable </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Pipeline class is the class from which all pipelines inherit. Refer to this
    class for methods shared across different pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Extends**: `Callable`'
  prefs: []
  type: TYPE_NORMAL
- en: '[.Pipeline](#module_pipelines.Pipeline) ⇐ `Callable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new Pipeline(options)`](#new_module_pipelines.Pipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.dispose()`](#module_pipelines.Pipeline+dispose) : `DisposeType`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new Pipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new Pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `Object` |  | An object containing the following properties: |'
  prefs: []
  type: TYPE_TB
- en: '| [options.task] | `string` |  | The task of the pipeline. Useful for specifying
    subtasks. |'
  prefs: []
  type: TYPE_TB
- en: '| [options.model] | `PreTrainedModel` |  | The model used by the pipeline.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [options.tokenizer] | `PreTrainedTokenizer` |  | The tokenizer used by the
    pipeline (if any). |'
  prefs: []
  type: TYPE_TB
- en: '| [options.processor] | `Processor` |  | The processor used by the pipeline
    (if any). |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipeline.dispose() : <code> DisposeType </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`Pipeline`](#module_pipelines.Pipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.TextClassificationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Text classification pipeline using any `ModelForSequenceClassification`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Sentiment-analysis w/ `Xenova/distilbert-base-uncased-finetuned-sst-2-english`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Multilingual sentiment-analysis w/ `Xenova/bert-base-multilingual-uncased-sentiment`
    (and return top 5 classes).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Toxic comment classification w/ `Xenova/toxic-bert` (and return
    all classes).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.TextClassificationPipeline](#module_pipelines.TextClassificationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new TextClassificationPipeline(options)`](#new_module_pipelines.TextClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.TextClassificationPipeline+_call) : `TextClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new TextClassificationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new TextClassificationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'textClassificationPipeline._call() : <code> TextClassificationPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`TextClassificationPipeline`](#module_pipelines.TextClassificationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.TokenClassificationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Named Entity Recognition pipeline using any `ModelForTokenClassification`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Perform named entity recognition with `Xenova/bert-base-NER`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Perform named entity recognition with `Xenova/bert-base-NER` (and
    return all labels).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.TokenClassificationPipeline](#module_pipelines.TokenClassificationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new TokenClassificationPipeline(options)`](#new_module_pipelines.TokenClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.TokenClassificationPipeline+_call) : `TokenClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new TokenClassificationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new TokenClassificationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'tokenClassificationPipeline._call() : <code> TokenClassificationPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`TokenClassificationPipeline`](#module_pipelines.TokenClassificationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.QuestionAnsweringPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Question Answering pipeline using any `ModelForQuestionAnswering`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Run question answering with `Xenova/distilbert-base-uncased-distilled-squad`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.QuestionAnsweringPipeline](#module_pipelines.QuestionAnsweringPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new QuestionAnsweringPipeline(options)`](#new_module_pipelines.QuestionAnsweringPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.QuestionAnsweringPipeline+_call) : `QuestionAnsweringPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new QuestionAnsweringPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new QuestionAnsweringPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'questionAnsweringPipeline._call() : <code> QuestionAnsweringPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`QuestionAnsweringPipeline`](#module_pipelines.QuestionAnsweringPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.FillMaskPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Masked language modeling prediction pipeline using any `ModelWithLMHead`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Perform masked language modelling (a.k.a. “fill-mask”) with `Xenova/bert-base-uncased`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Perform masked language modelling (a.k.a. “fill-mask”) with `Xenova/bert-base-cased`
    (and return top result).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.FillMaskPipeline](#module_pipelines.FillMaskPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new FillMaskPipeline(options)`](#new_module_pipelines.FillMaskPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.FillMaskPipeline+_call) : `FillMaskPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new FillMaskPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new FillMaskPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'fillMaskPipeline._call() : <code> FillMaskPipelineCallback </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`FillMaskPipeline`](#module_pipelines.FillMaskPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.Text2TextGenerationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Text2TextGenerationPipeline class for generating text using a model that performs
    text-to-text generation tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Text-to-text generation w/ `Xenova/LaMini-Flan-T5-783M`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.Text2TextGenerationPipeline](#module_pipelines.Text2TextGenerationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new Text2TextGenerationPipeline(options)`](#new_module_pipelines.Text2TextGenerationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._key`](#module_pipelines.Text2TextGenerationPipeline+_key) : `’generated_text’`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.Text2TextGenerationPipeline+_call) : `Text2TextGenerationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new Text2TextGenerationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new Text2TextGenerationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'text2TextGenerationPipeline._key : <code> ’ generated_text ’ </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance property of [`Text2TextGenerationPipeline`](#module_pipelines.Text2TextGenerationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'text2TextGenerationPipeline._call() : <code> Text2TextGenerationPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`Text2TextGenerationPipeline`](#module_pipelines.Text2TextGenerationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.SummarizationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A pipeline for summarization tasks, inheriting from Text2TextGenerationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Summarization w/ `Xenova/distilbart-cnn-6-6`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.SummarizationPipeline](#module_pipelines.SummarizationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new SummarizationPipeline(options)`](#new_module_pipelines.SummarizationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._key`](#module_pipelines.SummarizationPipeline+_key) : `’summary_text’`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new SummarizationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new SummarizationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'summarizationPipeline._key : <code> ’ summary_text ’ </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance property of [`SummarizationPipeline`](#module_pipelines.SummarizationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.TranslationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Translates text from one language to another.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Multilingual translation w/ `Xenova/nllb-200-distilled-600M`.'
  prefs: []
  type: TYPE_NORMAL
- en: See [here](https://github.com/facebookresearch/flores/blob/main/flores200/README.md#languages-in-flores-200)
    for the full list of languages and their corresponding codes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Multilingual translation w/ `Xenova/m2m100_418M`.'
  prefs: []
  type: TYPE_NORMAL
- en: See [here](https://huggingface.co/facebook/m2m100_418M#languages-covered) for
    the full list of languages and their corresponding codes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Multilingual translation w/ `Xenova/mbart-large-50-many-to-many-mmt`.'
  prefs: []
  type: TYPE_NORMAL
- en: See [here](https://huggingface.co/facebook/mbart-large-50-many-to-many-mmt#languages-covered)
    for the full list of languages and their corresponding codes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.TranslationPipeline](#module_pipelines.TranslationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new TranslationPipeline(options)`](#new_module_pipelines.TranslationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._key`](#module_pipelines.TranslationPipeline+_key) : `’translation_text’`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new TranslationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new TranslationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'translationPipeline._key : <code> ’ translation_text ’ </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance property of [`TranslationPipeline`](#module_pipelines.TranslationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.TextGenerationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Language generation pipeline using any `ModelWithLMHead` or `ModelForCausalLM`.
    This pipeline predicts the words that will follow a specified text prompt. NOTE:
    For the full list of generation parameters, see [`GenerationConfig`](./utils/generation#module_utils/generation.GenerationConfig).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Text generation with `Xenova/distilgpt2` (default settings).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Text generation with `Xenova/distilgpt2` (custom settings).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Run code generation with `Xenova/codegen-350M-mono`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.TextGenerationPipeline](#module_pipelines.TextGenerationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new TextGenerationPipeline(options)`](#new_module_pipelines.TextGenerationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.TextGenerationPipeline+_call) : `TextGenerationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new TextGenerationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new TextGenerationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'textGenerationPipeline._call() : <code> TextGenerationPipelineCallback </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`TextGenerationPipeline`](#module_pipelines.TextGenerationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ZeroShotClassificationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NLI-based zero-shot classification pipeline using a `ModelForSequenceClassification`
    trained on NLI (natural language inference) tasks. Equivalent of `text-classification`
    pipelines, but these models don’t require a hardcoded number of potential classes,
    they can be chosen at runtime. It usually means it’s slower but it is **much**
    more flexible.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Zero shot classification with `Xenova/mobilebert-uncased-mnli`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Zero shot classification with `Xenova/nli-deberta-v3-xsmall` (multi-label).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.ZeroShotClassificationPipeline](#module_pipelines.ZeroShotClassificationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ZeroShotClassificationPipeline(options)`](#new_module_pipelines.ZeroShotClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`.model`](#module_pipelines.ZeroShotClassificationPipeline+model) : `any`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ZeroShotClassificationPipeline+_call) : `ZeroShotClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new ZeroShotClassificationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ZeroShotClassificationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'zeroShotClassificationPipeline.model : <code> any </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance property of [`ZeroShotClassificationPipeline`](#module_pipelines.ZeroShotClassificationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'zeroShotClassificationPipeline._call() : <code> ZeroShotClassificationPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ZeroShotClassificationPipeline`](#module_pipelines.ZeroShotClassificationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.FeatureExtractionPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Feature extraction pipeline using no model head. This pipeline extracts the
    hidden states from the base transformer, which can be used as features in downstream
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Run feature extraction with `bert-base-uncased` (without pooling/normalization).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Run feature extraction with `bert-base-uncased` (with pooling/normalization).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Calculating embeddings with `sentence-transformers` models.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.FeatureExtractionPipeline](#module_pipelines.FeatureExtractionPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new FeatureExtractionPipeline(options)`](#new_module_pipelines.FeatureExtractionPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.FeatureExtractionPipeline+_call) : `FeatureExtractionPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new FeatureExtractionPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new FeatureExtractionPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'featureExtractionPipeline._call() : <code> FeatureExtractionPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`FeatureExtractionPipeline`](#module_pipelines.FeatureExtractionPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.AudioClassificationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Audio classification pipeline using any `AutoModelForAudioClassification`. This
    pipeline predicts the class of a raw waveform or an audio file.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Perform audio classification with `Xenova/wav2vec2-large-xlsr-53-gender-recognition-librispeech`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Perform audio classification with `Xenova/ast-finetuned-audioset-10-10-0.4593`
    and return top 4 results.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.AudioClassificationPipeline](#module_pipelines.AudioClassificationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new AudioClassificationPipeline(options)`](#new_module_pipelines.AudioClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.AudioClassificationPipeline+_call) : `AudioClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new AudioClassificationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new AudioClassificationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `AudioPipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'audioClassificationPipeline._call() : <code> AudioClassificationPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`AudioClassificationPipeline`](#module_pipelines.AudioClassificationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ZeroShotAudioClassificationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zero shot audio classification pipeline using `ClapModel`. This pipeline predicts
    the class of an audio when you provide an audio and a set of `candidate_labels`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example**: Perform zero-shot audio classification with `Xenova/clap-htsat-unfused`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.ZeroShotAudioClassificationPipeline](#module_pipelines.ZeroShotAudioClassificationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ZeroShotAudioClassificationPipeline(options)`](#new_module_pipelines.ZeroShotAudioClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ZeroShotAudioClassificationPipeline+_call) :
    `ZeroShotAudioClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new ZeroShotAudioClassificationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ZeroShotAudioClassificationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextAudioPipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'zeroShotAudioClassificationPipeline._call() : <code> ZeroShotAudioClassificationPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ZeroShotAudioClassificationPipeline`](#module_pipelines.ZeroShotAudioClassificationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.AutomaticSpeechRecognitionPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pipeline that aims at extracting spoken text contained within some audio.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Transcribe English.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Transcribe English w/ timestamps.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Transcribe English w/ word-level timestamps.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Transcribe French.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Translate French to English.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Transcribe/translate audio longer than 30 seconds.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.AutomaticSpeechRecognitionPipeline](#module_pipelines.AutomaticSpeechRecognitionPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new AutomaticSpeechRecognitionPipeline(options)`](#new_module_pipelines.AutomaticSpeechRecognitionPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.AutomaticSpeechRecognitionPipeline+_call) :
    `AutomaticSpeechRecognitionPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new AutomaticSpeechRecognitionPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new AutomaticSpeechRecognitionPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextAudioPipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'automaticSpeechRecognitionPipeline._call() : <code> AutomaticSpeechRecognitionPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`AutomaticSpeechRecognitionPipeline`](#module_pipelines.AutomaticSpeechRecognitionPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ImageToTextPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image To Text pipeline using a `AutoModelForVision2Seq`. This pipeline predicts
    a caption for a given image.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Generate a caption for an image w/ `Xenova/vit-gpt2-image-captioning`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Optical Character Recognition (OCR) w/ `Xenova/trocr-small-handwritten`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.ImageToTextPipeline](#module_pipelines.ImageToTextPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ImageToTextPipeline(options)`](#new_module_pipelines.ImageToTextPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ImageToTextPipeline+_call) : `ImageToTextPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new ImageToTextPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ImageToTextPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'imageToTextPipeline._call() : <code> ImageToTextPipelineCallback </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageToTextPipeline`](#module_pipelines.ImageToTextPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ImageClassificationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image classification pipeline using any `AutoModelForImageClassification`. This
    pipeline predicts the class of an image.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Classify an image.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Classify an image and return top `n` classes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Classify an image and return all classes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.ImageClassificationPipeline](#module_pipelines.ImageClassificationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ImageClassificationPipeline(options)`](#new_module_pipelines.ImageClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ImageClassificationPipeline+_call) : `ImageClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new ImageClassificationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ImageClassificationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `ImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'imageClassificationPipeline._call() : <code> ImageClassificationPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageClassificationPipeline`](#module_pipelines.ImageClassificationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ImageSegmentationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image segmentation pipeline using any `AutoModelForXXXSegmentation`. This pipeline
    predicts masks of objects and their classes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Perform image segmentation with `Xenova/detr-resnet-50-panoptic`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.ImageSegmentationPipeline](#module_pipelines.ImageSegmentationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ImageSegmentationPipeline(options)`](#new_module_pipelines.ImageSegmentationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ImageSegmentationPipeline+_call) : `ImageSegmentationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new ImageSegmentationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ImageSegmentationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `ImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'imageSegmentationPipeline._call() : <code> ImageSegmentationPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageSegmentationPipeline`](#module_pipelines.ImageSegmentationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ZeroShotImageClassificationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zero shot image classification pipeline. This pipeline predicts the class of
    an image when you provide an image and a set of `candidate_labels`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Zero shot image classification w/ `Xenova/clip-vit-base-patch32`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.ZeroShotImageClassificationPipeline](#module_pipelines.ZeroShotImageClassificationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ZeroShotImageClassificationPipeline(options)`](#new_module_pipelines.ZeroShotImageClassificationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ZeroShotImageClassificationPipeline+_call) :
    `ZeroShotImageClassificationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new ZeroShotImageClassificationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ZeroShotImageClassificationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'zeroShotImageClassificationPipeline._call() : <code> ZeroShotImageClassificationPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ZeroShotImageClassificationPipeline`](#module_pipelines.ZeroShotImageClassificationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ObjectDetectionPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Object detection pipeline using any `AutoModelForObjectDetection`. This pipeline
    predicts bounding boxes of objects and their classes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Run object-detection with `Xenova/detr-resnet-50`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.ObjectDetectionPipeline](#module_pipelines.ObjectDetectionPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ObjectDetectionPipeline(options)`](#new_module_pipelines.ObjectDetectionPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ObjectDetectionPipeline+_call) : `ObjectDetectionPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new ObjectDetectionPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ObjectDetectionPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `ImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'objectDetectionPipeline._call() : <code> ObjectDetectionPipelineCallback </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ObjectDetectionPipeline`](#module_pipelines.ObjectDetectionPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ZeroShotObjectDetectionPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zero-shot object detection pipeline. This pipeline predicts bounding boxes of
    objects when you provide an image and a set of `candidate_labels`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Zero-shot object detection w/ `Xenova/owlvit-base-patch32`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Zero-shot object detection w/ `Xenova/owlvit-base-patch32` (returning
    top 4 matches and setting a threshold).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.ZeroShotObjectDetectionPipeline](#module_pipelines.ZeroShotObjectDetectionPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ZeroShotObjectDetectionPipeline(options)`](#new_module_pipelines.ZeroShotObjectDetectionPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ZeroShotObjectDetectionPipeline+_call) : `ZeroShotObjectDetectionPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new ZeroShotObjectDetectionPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ZeroShotObjectDetectionPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'zeroShotObjectDetectionPipeline._call() : <code> ZeroShotObjectDetectionPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ZeroShotObjectDetectionPipeline`](#module_pipelines.ZeroShotObjectDetectionPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.DocumentQuestionAnsweringPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Document Question Answering pipeline using any `AutoModelForDocumentQuestionAnswering`.
    The inputs/outputs are similar to the (extractive) question answering pipeline;
    however, the pipeline takes an image (and optional OCR’d words/boxes) as input
    instead of text context.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Answer questions about a document with `Xenova/donut-base-finetuned-docvqa`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.DocumentQuestionAnsweringPipeline](#module_pipelines.DocumentQuestionAnsweringPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new DocumentQuestionAnsweringPipeline(options)`](#new_module_pipelines.DocumentQuestionAnsweringPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.DocumentQuestionAnsweringPipeline+_call) : `DocumentQuestionAnsweringPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new DocumentQuestionAnsweringPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new DocumentQuestionAnsweringPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'documentQuestionAnsweringPipeline._call() : <code> DocumentQuestionAnsweringPipelineCallback
    </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`DocumentQuestionAnsweringPipeline`](#module_pipelines.DocumentQuestionAnsweringPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.TextToAudioPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Text-to-audio generation pipeline using any `AutoModelForTextToWaveform` or
    `AutoModelForTextToSpectrogram`. This pipeline generates an audio file from an
    input text and optional other conditional inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Generate audio from text with `Xenova/speecht5_tts`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then save the audio to a .wav file with the `wavefile` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '**Example:** Multilingual speech generation with `Xenova/mms-tts-fra`. See
    [here](https://huggingface.co/models?pipeline_tag=text-to-speech&other=vits&sort=trending)
    for the full list of available languages (1107).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.TextToAudioPipeline](#module_pipelines.TextToAudioPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new TextToAudioPipeline(options)`](#new_module_pipelines.TextToAudioPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.TextToAudioPipeline+_call) : `TextToAudioPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new TextToAudioPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new TextToAudioPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextToAudioPipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'textToAudioPipeline._call() : <code> TextToAudioPipelineCallback </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`TextToAudioPipeline`](#module_pipelines.TextToAudioPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ImageToImagePipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Image to Image pipeline using any `AutoModelForImageToImage`. This pipeline
    generates an image based on a previous image input.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Super-resolution w/ `Xenova/swin2SR-classical-sr-x2-64`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.ImageToImagePipeline](#module_pipelines.ImageToImagePipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ImageToImagePipeline(options)`](#new_module_pipelines.ImageToImagePipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ImageToImagePipeline+_call) : `ImageToImagePipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new ImageToImagePipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ImageToImagePipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `ImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'imageToImagePipeline._call() : <code> ImageToImagePipelineCallback </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ImageToImagePipeline`](#module_pipelines.ImageToImagePipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.DepthEstimationPipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depth estimation pipeline using any `AutoModelForDepthEstimation`. This pipeline
    predicts the depth of an image.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Depth estimation w/ `Xenova/dpt-hybrid-midas`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '[.DepthEstimationPipeline](#module_pipelines.DepthEstimationPipeline)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new DepthEstimationPipeline(options)`](#new_module_pipelines.DepthEstimationPipeline_new)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.DepthEstimationPipeline+_call) : `DepthEstimationPipelineCallback`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: new DepthEstimationPipeline(options)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new DepthEstimationPipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| options | `ImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'depthEstimationPipeline._call() : <code> DepthEstimationPipelineCallback </code>'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`DepthEstimationPipeline`](#module_pipelines.DepthEstimationPipeline)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.pipeline(task, [model], [options]) ⇒ <code> * </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Utility factory method to build a `Pipeline` object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: static method of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `*` - A Pipeline object for the specified task.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Throws**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Error` If an unsupported pipeline is requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Param | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| task | `T` |  | The task defining which pipeline will be returned. Currently
    accepted tasks are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"audio-classification"`: will return a `AudioClassificationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"automatic-speech-recognition"`: will return a `AutomaticSpeechRecognitionPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"depth-estimation"`: will return a `DepthEstimationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"document-question-answering"`: will return a `DocumentQuestionAnsweringPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"feature-extraction"`: will return a `FeatureExtractionPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"fill-mask"`: will return a `FillMaskPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"image-classification"`: will return a `ImageClassificationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"image-segmentation"`: will return a `ImageSegmentationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"image-to-text"`: will return a `ImageToTextPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"object-detection"`: will return a `ObjectDetectionPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"question-answering"`: will return a `QuestionAnsweringPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"summarization"`: will return a `SummarizationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"text2text-generation"`: will return a `Text2TextGenerationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"text-classification"` (alias "sentiment-analysis" available): will return
    a `TextClassificationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"text-generation"`: will return a `TextGenerationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"token-classification"` (alias "ner" available): will return a `TokenClassificationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"translation"`: will return a `TranslationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"translation_xx_to_yy"`: will return a `TranslationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"zero-shot-classification"`: will return a `ZeroShotClassificationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"zero-shot-audio-classification"`: will return a `ZeroShotAudioClassificationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"zero-shot-image-classification"`: will return a `ZeroShotImageClassificationPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"zero-shot-object-detection"`: will return a `ZeroShotObjectDetectionPipeline`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| [model] | `string` | `null` | The name of the pre-trained model to use. If
    not specified, the default model for the task will be used. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `*` |  | Optional parameters for the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~x[1] : <code> number </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner property of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~ImagePipelineInputs : <code> string </code> | <code> RawImage </code>
    | <code> URL </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~AudioPipelineInputs : <code> string </code> | <code> URL </code>
    | <code> Float32Array </code> | <code> Float64Array </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~BoundingBox : <code> Object </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| xmin | `number` | The minimum x coordinate of the bounding box. |'
  prefs: []
  type: TYPE_TB
- en: '| ymin | `number` | The minimum y coordinate of the bounding box. |'
  prefs: []
  type: TYPE_TB
- en: '| xmax | `number` | The maximum x coordinate of the bounding box. |'
  prefs: []
  type: TYPE_TB
- en: '| ymax | `number` | The maximum y coordinate of the bounding box. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~Disposable ⇒ <code> Promise. < void > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<void>` - A promise that resolves when the item has been
    disposed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| dispose | `DisposeType` | A promise that resolves when the pipeline has been
    disposed. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~TextPipelineConstructorArgs : <code> Object </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An object used to instantiate a text-based pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| task | `string` | The task of the pipeline. Useful for specifying subtasks.
    |'
  prefs: []
  type: TYPE_TB
- en: '| model | `PreTrainedModel` | The model used by the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '| tokenizer | `PreTrainedTokenizer` | The tokenizer used by the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~ImagePipelineConstructorArgs : <code> Object </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An object used to instantiate an audio-based pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| task | `string` | The task of the pipeline. Useful for specifying subtasks.
    |'
  prefs: []
  type: TYPE_TB
- en: '| model | `PreTrainedModel` | The model used by the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '| processor | `Processor` | The processor used by the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~TextImagePipelineConstructorArgs : <code> Object </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An object used to instantiate a text- and audio-based pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| task | `string` | The task of the pipeline. Useful for specifying subtasks.
    |'
  prefs: []
  type: TYPE_TB
- en: '| model | `PreTrainedModel` | The model used by the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '| tokenizer | `PreTrainedTokenizer` | The tokenizer used by the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '| processor | `Processor` | The processor used by the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~TextClassificationPipelineType ⇒ <code> Promise. < (TextClassificationOutput|Array
    < TextClassificationOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to text classification pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(TextClassificationOutput|Array<TextClassificationOutput>)>`
    - An array or object containing the predicted labels and scores.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | The input text(s) to be classified.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `TextClassificationPipelineOptions` | The options to use for
    text classification. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label predicted. |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The corresponding probability. |'
  prefs: []
  type: TYPE_TB
- en: '| [topk] | `number` | `1` | The number of top predictions to be returned. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~TokenClassificationPipelineType ⇒ <code> Promise. < (TokenClassificationOutput|Array
    < TokenClassificationOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to token classification pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(TokenClassificationOutput|Array<TokenClassificationOutput>)>`
    - The result.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | One or several texts (or one list
    of texts) for token classification. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `TokenClassificationPipelineOptions` | The options to use for
    token classification. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| word | `string` | The token/word classified. This is obtained by decoding
    the selected tokens. |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` | The corresponding probability for `entity`. |'
  prefs: []
  type: TYPE_TB
- en: '| entity | `string` | The entity predicted for that token/word. |'
  prefs: []
  type: TYPE_TB
- en: '| index | `number` | The index of the corresponding token in the sentence.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [start] | `number` | The index of the start of the corresponding entity in
    the sentence. |'
  prefs: []
  type: TYPE_TB
- en: '| [end] | `number` | The index of the end of the corresponding entity in the
    sentence. |'
  prefs: []
  type: TYPE_TB
- en: '| [ignore_labels] | `Array.<string>` | A list of labels to ignore. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~QuestionAnsweringPipelineType ⇒ <code> Promise. < (QuestionAnsweringOutput|Array
    < QuestionAnsweringOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to question answering pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(QuestionAnsweringOutput|Array<QuestionAnsweringOutput>)>`
    - An array or object containing the predicted answers and scores.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| question | `string` &#124; `Array<string>` | One or several question(s) (must
    be used in conjunction with the `context` argument). |'
  prefs: []
  type: TYPE_TB
- en: '| context | `string` &#124; `Array<string>` | One or several context(s) associated
    with the question(s) (must be used in conjunction with the `question` argument).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `QuestionAnsweringPipelineOptions` | The options to use for question
    answering. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The probability associated to the answer. |'
  prefs: []
  type: TYPE_TB
- en: '| [start] | `number` |  | The character start index of the answer (in the tokenized
    version of the input). |'
  prefs: []
  type: TYPE_TB
- en: '| [end] | `number` |  | The character end index of the answer (in the tokenized
    version of the input). |'
  prefs: []
  type: TYPE_TB
- en: '| answer | `string` |  | The answer to the question. |'
  prefs: []
  type: TYPE_TB
- en: '| [topk] | `number` | `1` | The number of top answer predictions to be returned.
    |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~FillMaskPipelineType ⇒ <code> Promise. < (FillMaskOutput|Array < FillMaskOutput
    > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to fill mask pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(FillMaskOutput|Array<FillMaskOutput>)>` - An array
    of objects containing the score, predicted token, predicted token string, and
    the sequence with the predicted token filled in, or an array of such arrays (one
    for each input text). If only one input text is given, the output will be an array
    of objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Throws**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Error` When the mask token is not found in the input text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | One or several texts (or one list
    of prompts) with masked tokens. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `FillMaskPipelineOptions` | The options to use for masked language
    modelling. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| sequence | `string` |  | The corresponding input with the mask token prediction.
    |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The corresponding probability. |'
  prefs: []
  type: TYPE_TB
- en: '| token | `number` |  | The predicted token id (to replace the masked one).
    |'
  prefs: []
  type: TYPE_TB
- en: '| token_str | `string` |  | The predicted token (to replace the masked one).
    |'
  prefs: []
  type: TYPE_TB
- en: '| [topk] | `number` | `5` | When passed, overrides the number of predictions
    to return. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~Text2TextGenerationPipelineType ⇒ <code> Promise. < (Text2TextGenerationOutput|Array
    < Text2TextGenerationOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | Input text for the encoder. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `*` | Additional keyword arguments to pass along to the generate
    method of the model. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| generated_text | `string` | The generated text. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~SummarizationPipelineType ⇒ <code> Promise. < (SummarizationOutput|Array
    < SummarizationOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | One or several articles (or one
    list of articles) to summarize. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `*` | Additional keyword arguments to pass along to the generate
    method of the model. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| summary_text | `string` | The summary text. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~TranslationPipelineType ⇒ <code> Promise. < (TranslationOutput|Array
    < TranslationOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | Texts to be translated. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `*` | Additional keyword arguments to pass along to the generate
    method of the model. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| translation_text | `string` | The translated text. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~TextGenerationPipelineType ⇒ <code> Promise. < (TextGenerationOutput|Array
    < TextGenerationOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to text-generation pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(TextGenerationOutput|Array<TextGenerationOutput>)>`
    - An array or object containing the generated texts.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | One or several prompts (or one
    list of prompts) to complete. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `TextGenerationConfig` | Additional keyword arguments to pass
    along to the generate method of the model. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| generated_text | `string` | The generated text. |'
  prefs: []
  type: TYPE_TB
- en: '| [add_special_tokens] | `boolean` | Whether or not to add special tokens when
    tokenizing the sequences. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ZeroShotClassificationPipelineType ⇒ <code> Promise. < (ZeroShotClassificationOutput|Array
    < ZeroShotClassificationOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to zero-shot classification pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(ZeroShotClassificationOutput|Array<ZeroShotClassificationOutput>)>`
    - An array or object containing the predicted labels and scores.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | The sequence(s) to classify, will
    be truncated if the model input is too large. |'
  prefs: []
  type: TYPE_TB
- en: '| candidate_labels | `string` &#124; `Array<string>` | The set of possible
    class labels to classify each sequence into. Can be a single label, a string of
    comma-separated labels, or a list of labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ZeroShotClassificationPipelineOptions` | The options to use
    for zero-shot classification. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| sequence | `string` |  | The sequence for which this is the output. |'
  prefs: []
  type: TYPE_TB
- en: '| labels | `Array.<string>` |  | The labels sorted by order of likelihood.
    |'
  prefs: []
  type: TYPE_TB
- en: '| scores | `Array.<number>` |  | The probabilities for each of the labels.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [hypothesis_template] | `string` | `""This example is {}.""` | The template
    used to turn each candidate label into an NLI-style hypothesis. The candidate
    label will replace the &#123;} placeholder. |'
  prefs: []
  type: TYPE_TB
- en: '| [multi_label] | `boolean` | `false` | Whether or not multiple candidate labels
    can be true. If `false`, the scores are normalized such that the sum of the label
    likelihoods for each sequence is 1\. If `true`, the labels are considered independent
    and probabilities are normalized for each candidate by doing a softmax of the
    entailment score vs. the contradiction score. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~FeatureExtractionPipelineType ⇒ <code> Promise. < Tensor > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to feature extraction pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<Tensor>` - The features computed by the model.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | One or several texts (or one list
    of texts) to get the features of. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `FeatureExtractionPipelineOptions` | The options to use for feature
    extraction. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [pooling] | `''none''` &#124; `''mean''` &#124; `''cls''` | `"none"` | The
    pooling method to use. |'
  prefs: []
  type: TYPE_TB
- en: '| [normalize] | `boolean` | `false` | Whether or not to normalize the embeddings
    in the last dimension. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~AudioClassificationPipelineType ⇒ <code> Promise. < (AudioClassificationOutput|Array
    < AudioClassificationOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to audio classification pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(AudioClassificationOutput|Array<AudioClassificationOutput>)>`
    - An array or object containing the predicted labels and scores.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| audio | `AudioPipelineInputs` | The input audio file(s) to be classified.
    The input is either:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string` or `URL` that is the filename/URL of the audio file, the file will
    be read at the processor''s sampling rate to get the waveform using the [`AudioContext`](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)
    API. If `AudioContext` is not available, you should pass the raw waveform in as
    a Float32Array of shape `(n, )`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float32Array` or `Float64Array` of shape `(n, )`, representing the raw audio
    at the correct sampling rate (no further check will be done).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| [options] | `AudioClassificationPipelineOptions` | The options to use for
    audio classification. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label predicted. |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The corresponding probability. |'
  prefs: []
  type: TYPE_TB
- en: '| [topk] | `number` |  | The number of top labels that will be returned by
    the pipeline. If the provided number is `null` or higher than the number of labels
    available in the model configuration, it will default to the number of labels.
    |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ZeroShotAudioClassificationPipelineType ⇒ <code> Promise. < (Array
    < ZeroShotAudioClassificationOutput > |Array < Array < ZeroShotAudioClassificationOutput
    > > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to zero-shot audio classification pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(Array<ZeroShotAudioClassificationOutput>|Array<Array<ZeroShotAudioClassificationOutput>>)>`
    - An array of objects containing the predicted labels and scores.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| audio | `AudioPipelineInputs` | The input audio file(s) to be classified.
    The input is either:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string` or `URL` that is the filename/URL of the audio file, the file will
    be read at the processor''s sampling rate to get the waveform using the [`AudioContext`](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)
    API. If `AudioContext` is not available, you should pass the raw waveform in as
    a Float32Array of shape `(n, )`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float32Array` or `Float64Array` of shape `(n, )`, representing the raw audio
    at the correct sampling rate (no further check will be done).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| candidate_labels | `Array.<string>` | The candidate labels for this audio.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ZeroShotAudioClassificationPipelineOptions` | The options to
    use for zero-shot audio classification. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label identified by the model. It is one of the
    suggested `candidate_label`. |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The score attributed by the model for that label (between
    0 and 1). |'
  prefs: []
  type: TYPE_TB
- en: '| [hypothesis_template] | `string` | `""This is a sound of {}.""` | The sentence
    used in conjunction with `candidate_labels` to attempt the audio classification
    by replacing the placeholder with the candidate_labels. Then likelihood is estimated
    by using `logits_per_audio`. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~ChunkCallback : <code> function </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| chunk | `ChunkCallbackItem` | The chunk to process. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~Chunk : <code> Object </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| timestamp | `*` | The start and end timestamp of the chunk in seconds. |'
  prefs: []
  type: TYPE_TB
- en: '| text | `string` | The recognized text. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~AutomaticSpeechRecognitionPipelineType ⇒ <code> Promise. < (AutomaticSpeechRecognitionOutput|Array
    < AutomaticSpeechRecognitionOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to automatic-speech-recognition pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(AutomaticSpeechRecognitionOutput|Array<AutomaticSpeechRecognitionOutput>)>`
    - An object containing the transcription text and optionally timestamps if `return_timestamps`
    is `true`.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| audio | `AudioPipelineInputs` | The input audio file(s) to be transcribed.
    The input is either:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string` or `URL` that is the filename/URL of the audio file, the file will
    be read at the processor''s sampling rate to get the waveform using the [`AudioContext`](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)
    API. If `AudioContext` is not available, you should pass the raw waveform in as
    a Float32Array of shape `(n, )`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float32Array` or `Float64Array` of shape `(n, )`, representing the raw audio
    at the correct sampling rate (no further check will be done).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| [options] | `AutomaticSpeechRecognitionConfig` | Additional keyword arguments
    to pass along to the generate method of the model. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| text | `string` | The recognized text. |'
  prefs: []
  type: TYPE_TB
- en: '| [chunks] | `Array.<Chunk>` | When using `return_timestamps`, the `chunks`
    will become a list containing all the various text chunks identified by the model.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.return_timestamps] | `boolean` &#124; `''word''` | Whether to return
    timestamps or not. Default is `false`. |'
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.chunk_length_s] | `number` | The length of audio chunks to process
    in seconds. Default is 0 (no chunking). |'
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.stride_length_s] | `number` | The length of overlap between consecutive
    audio chunks in seconds. If not provided, defaults to `chunk_length_s / 6`. |'
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.chunk_callback] | `ChunkCallback` | Callback function to be called
    with each chunk processed. |'
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.force_full_sequences] | `boolean` | Whether to force outputting full
    sequences or not. Default is `false`. |'
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.language] | `string` | The source language. Default is `null`, meaning
    it should be auto-detected. Use this to potentially improve performance if the
    source language is known. |'
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.task] | `string` | The task to perform. Default is `null`, meaning
    it should be auto-detected. |'
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.forced_decoder_ids] | `Array.<Array<number>>` | A list of pairs of
    integers which indicates a mapping from generation indices to token indices that
    will be forced before sampling. For example, [[1, 123]] means the second generated
    token will always be a token of index 123. |'
  prefs: []
  type: TYPE_TB
- en: '| [num_frames] | `number` | The number of frames in the input audio. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ImageToTextPipelineType ⇒ <code> Promise. < (ImageToTextOutput|Array
    < ImageToTextOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(ImageToTextOutput|Array<ImageToTextOutput>)>` - An
    object (or array of objects) containing the generated text(s).'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `ImagePipelineInputs` | The images to be captioned. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `*` | Additional keyword arguments to pass along to the generate
    method of the model. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| generated_text | `string` | The generated text. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ImageClassificationPipelineType ⇒ <code> Promise. < (ImageClassificationOutput|Array
    < ImageClassificationOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to image classification pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(ImageClassificationOutput|Array<ImageClassificationOutput>)>`
    - An array or object containing the predicted labels and scores.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The input images(s) to be classified. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ImageClassificationPipelineOptions` | The options to use for
    image classification. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label identified by the model. |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The score attributed by the model for that label. |'
  prefs: []
  type: TYPE_TB
- en: '| [topk] | `number` | `1` | The number of top labels that will be returned
    by the pipeline. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ImageSegmentationPipelineType ⇒ <code> Promise. < Array < ImageSegmentationPipelineOutput
    > > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to image segmentation pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<Array<ImageSegmentationPipelineOutput>>` - The annotated
    segments.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The input images. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ImageSegmentationPipelineOptions` | The options to use for image
    segmentation. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label of the segment. |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` &#124; `null` |  | The score of the segment. |'
  prefs: []
  type: TYPE_TB
- en: '| mask | `RawImage` |  | The mask of the segment. |'
  prefs: []
  type: TYPE_TB
- en: '| [threshold] | `number` | `0.5` | Probability threshold to filter out predicted
    masks. |'
  prefs: []
  type: TYPE_TB
- en: '| [mask_threshold] | `number` | `0.5` | Threshold to use when turning the predicted
    masks into binary values. |'
  prefs: []
  type: TYPE_TB
- en: '| [overlap_mask_area_threshold] | `number` | `0.8` | Mask overlap threshold
    to eliminate small, disconnected segments. |'
  prefs: []
  type: TYPE_TB
- en: '| [subtask] | `null` &#124; `string` |  | Segmentation task to be performed.
    One of [`panoptic`, `instance`, and `semantic`], depending on model capabilities.
    If not set, the pipeline will attempt to resolve (in that order). |'
  prefs: []
  type: TYPE_TB
- en: '| [label_ids_to_fuse] | `Array.<number>` |  | List of label ids to fuse. If
    not set, do not fuse any labels. |'
  prefs: []
  type: TYPE_TB
- en: '| [target_sizes] | `Array.<Array<number>>` |  | List of target sizes for the
    input images. If not set, use the original image sizes. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ZeroShotImageClassificationPipelineType ⇒ <code> Promise. < (Array
    < ZeroShotImageClassificationOutput > |Array < Array < ZeroShotImageClassificationOutput
    > > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to zero-shot image classification pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(Array<ZeroShotImageClassificationOutput>|Array<Array<ZeroShotImageClassificationOutput>>)>`
    - An array of objects containing the predicted labels and scores.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The input images. |'
  prefs: []
  type: TYPE_TB
- en: '| candidate_labels | `Array.<string>` | The candidate labels for this image.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ZeroShotImageClassificationPipelineOptions` | The options to
    use for zero-shot image classification. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label identified by the model. It is one of the
    suggested `candidate_label`. |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The score attributed by the model for that label (between
    0 and 1). |'
  prefs: []
  type: TYPE_TB
- en: '| [hypothesis_template] | `string` | `""This is a photo of {}""` | The sentence
    used in conjunction with `candidate_labels` to attempt the image classification
    by replacing the placeholder with the candidate_labels. Then likelihood is estimated
    by using `logits_per_image`. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ObjectDetectionPipelineType ⇒ <code> Promise. < (ObjectDetectionPipelineOutput|Array
    < ObjectDetectionPipelineOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to object detection pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(ObjectDetectionPipelineOutput|Array<ObjectDetectionPipelineOutput>)>`
    - A list of objects or a list of list of objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The input images. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ObjectDetectionPipelineOptions` | The options to use for object
    detection. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The class label identified by the model. |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The score attributed by the model for that label. |'
  prefs: []
  type: TYPE_TB
- en: '| box | `BoundingBox` |  | The bounding box of detected object in image''s
    original size, or as a percentage if `percentage` is set to true. |'
  prefs: []
  type: TYPE_TB
- en: '| [threshold] | `number` | `0.9` | The threshold used to filter boxes by score.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [percentage] | `boolean` | `false` | Whether to return the boxes coordinates
    in percentage (true) or in pixels (false). |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ZeroShotObjectDetectionPipelineType ⇒ <code> Promise. < (Array < ZeroShotObjectDetectionOutput
    > |Array < Array < ZeroShotObjectDetectionOutput > > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to zero-shot object detection pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(Array<ZeroShotObjectDetectionOutput>|Array<Array<ZeroShotObjectDetectionOutput>>)>`
    - An array of objects containing the predicted labels, scores, and bounding boxes.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The input images. |'
  prefs: []
  type: TYPE_TB
- en: '| candidate_labels | `Array.<string>` | What the model should recognize in
    the image. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ZeroShotObjectDetectionPipelineOptions` | The options to use
    for zero-shot object detection. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | Text query corresponding to the found object. |'
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | Score corresponding to the object (between 0 and 1).
    |'
  prefs: []
  type: TYPE_TB
- en: '| box | `BoundingBox` |  | Bounding box of the detected object in image''s
    original size, or as a percentage if `percentage` is set to true. |'
  prefs: []
  type: TYPE_TB
- en: '| [threshold] | `number` | `0.1` | The probability necessary to make a prediction.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [topk] | `number` |  | The number of top predictions that will be returned
    by the pipeline. If the provided number is `null` or higher than the number of
    predictions available, it will default to the number of predictions. |'
  prefs: []
  type: TYPE_TB
- en: '| [percentage] | `boolean` | `false` | Whether to return the boxes coordinates
    in percentage (true) or in pixels (false). |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~DocumentQuestionAnsweringPipelineType ⇒ <code> Promise. < (DocumentQuestionAnsweringOutput|Array
    < DocumentQuestionAnsweringOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(DocumentQuestionAnsweringOutput|Array<DocumentQuestionAnsweringOutput>)>`
    - An object (or array of objects) containing the answer(s).'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| image | `ImageInput` | The image of the document to use. |'
  prefs: []
  type: TYPE_TB
- en: '| question | `string` | A question to ask of the document. |'
  prefs: []
  type: TYPE_TB
- en: '| [options] | `*` | Additional keyword arguments to pass along to the generate
    method of the model. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| answer | `string` | The generated text. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~TextToAudioPipelineConstructorArgs : <code> Object </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [vocoder] | `PreTrainedModel` | The vocoder used by the pipeline (if the
    model uses one). If not provided, use the default HifiGan vocoder. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~TextToAudioPipelineType ⇒ <code> Promise. < TextToAudioOutput > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to text-to-audio pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<TextToAudioOutput>` - An object containing the generated
    audio and sampling rate.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | The text(s) to generate. |'
  prefs: []
  type: TYPE_TB
- en: '| options | `TextToAudioPipelineOptions` | Parameters passed to the model generation/forward
    method. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| audio | `Float32Array` |  | The generated audio waveform. |'
  prefs: []
  type: TYPE_TB
- en: '| sampling_rate | `number` |  | The sampling rate of the generated audio waveform.
    |'
  prefs: []
  type: TYPE_TB
- en: '| [speaker_embeddings] | `Tensor` &#124; `Float32Array` &#124; `string` &#124;
    `URL` |  | The speaker embeddings (if the model requires it). |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ImageToImagePipelineType ⇒ <code> Promise. < (RawImage|Array < RawImage
    > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(RawImage|Array<RawImage>)>` - The transformed image
    or list of images.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The images to transform. |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~DepthEstimationPipelineType ⇒ <code> Promise. < (DepthEstimationPipelineOutput|Array
    < DepthEstimationPipelineOutput > ) > </code>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(DepthEstimationPipelineOutput|Array<DepthEstimationPipelineOutput>)>`
    - An image or a list of images containing result(s).'
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The images to compute depth for. |'
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| predicted_depth | `Tensor` | The raw depth map predicted by the model. |'
  prefs: []
  type: TYPE_TB
- en: '| depth | `RawImage` | The processed depth map as an image (with the same size
    as the input image). |'
  prefs: []
  type: TYPE_TB
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~AllTasks : <code> * </code>'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All possible pipeline types.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
