- en: pipelines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道
- en: 'Original text: [https://huggingface.co/docs/transformers.js/api/pipelines](https://huggingface.co/docs/transformers.js/api/pipelines)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '原始文本: [https://huggingface.co/docs/transformers.js/api/pipelines](https://huggingface.co/docs/transformers.js/api/pipelines)'
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Pipelines provide a high-level, easy to use, API for running machine learning
    models.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 管道提供了一个高级、易于使用的API，用于运行机器学习模型。
- en: '**Example:** Instantiate pipeline using the `pipeline` function.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例:** 使用`pipeline`函数实例化管道。'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[pipelines](#module_pipelines)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道
- en: '*static*'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*static*'
- en: '[.Pipeline](#module_pipelines.Pipeline) ⇐ `Callable`'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.Pipeline](#module_pipelines.Pipeline) ⇐ `可调用`'
- en: '[`new Pipeline(options)`](#new_module_pipelines.Pipeline_new)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new Pipeline(options)`](#new_module_pipelines.Pipeline_new) : `管道`'
- en: '[`.dispose()`](#module_pipelines.Pipeline+dispose) : `DisposeType`'
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.dispose()`](#module_pipelines.Pipeline+dispose) : `释放类型`'
- en: '[.TextClassificationPipeline](#module_pipelines.TextClassificationPipeline)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.TextClassificationPipeline](#module_pipelines.TextClassificationPipeline)
    : `文本分类管道`'
- en: '[`new TextClassificationPipeline(options)`](#new_module_pipelines.TextClassificationPipeline_new)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new TextClassificationPipeline(options)`](#new_module_pipelines.TextClassificationPipeline_new)
    : `文本分类管道`'
- en: '[`._call()`](#module_pipelines.TextClassificationPipeline+_call) : `TextClassificationPipelineCallback`'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.TextClassificationPipeline+_call) : `文本分类管道回调`'
- en: '[.TokenClassificationPipeline](#module_pipelines.TokenClassificationPipeline)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.TokenClassificationPipeline](#module_pipelines.TokenClassificationPipeline)
    : `标记分类管道`'
- en: '[`new TokenClassificationPipeline(options)`](#new_module_pipelines.TokenClassificationPipeline_new)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new TokenClassificationPipeline(options)`](#new_module_pipelines.TokenClassificationPipeline_new)
    : `标记分类管道`'
- en: '[`._call()`](#module_pipelines.TokenClassificationPipeline+_call) : `TokenClassificationPipelineCallback`'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.TokenClassificationPipeline+_call) : `标记分类管道回调`'
- en: '[.QuestionAnsweringPipeline](#module_pipelines.QuestionAnsweringPipeline)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.QuestionAnsweringPipeline](#module_pipelines.QuestionAnsweringPipeline) :
    `问答管道`'
- en: '[`new QuestionAnsweringPipeline(options)`](#new_module_pipelines.QuestionAnsweringPipeline_new)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new QuestionAnsweringPipeline(options)`](#new_module_pipelines.QuestionAnsweringPipeline_new)
    : `问答管道`'
- en: '[`._call()`](#module_pipelines.QuestionAnsweringPipeline+_call) : `QuestionAnsweringPipelineCallback`'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.QuestionAnsweringPipeline+_call) : `问答管道回调`'
- en: '[.FillMaskPipeline](#module_pipelines.FillMaskPipeline)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.FillMaskPipeline](#module_pipelines.FillMaskPipeline) : `填充掩码管道`'
- en: '[`new FillMaskPipeline(options)`](#new_module_pipelines.FillMaskPipeline_new)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new FillMaskPipeline(options)`](#new_module_pipelines.FillMaskPipeline_new)
    : `填充掩码管道`'
- en: '[`._call()`](#module_pipelines.FillMaskPipeline+_call) : `FillMaskPipelineCallback`'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.FillMaskPipeline+_call) : `填充掩码管道回调`'
- en: '[.Text2TextGenerationPipeline](#module_pipelines.Text2TextGenerationPipeline)'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.Text2TextGenerationPipeline](#module_pipelines.Text2TextGenerationPipeline)
    : `文本生成管道`'
- en: '[`new Text2TextGenerationPipeline(options)`](#new_module_pipelines.Text2TextGenerationPipeline_new)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new Text2TextGenerationPipeline(options)`](#new_module_pipelines.Text2TextGenerationPipeline_new)
    : `文本生成管道`'
- en: '[`._key`](#module_pipelines.Text2TextGenerationPipeline+_key) : `’generated_text’`'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._key`](#module_pipelines.Text2TextGenerationPipeline+_key) : `生成的文本`'
- en: '[`._call()`](#module_pipelines.Text2TextGenerationPipeline+_call) : `Text2TextGenerationPipelineCallback`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.Text2TextGenerationPipeline+_call) : `文本生成管道回调`'
- en: '[.SummarizationPipeline](#module_pipelines.SummarizationPipeline)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.SummarizationPipeline](#module_pipelines.SummarizationPipeline) : `摘要生成管道`'
- en: '[`new SummarizationPipeline(options)`](#new_module_pipelines.SummarizationPipeline_new)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new SummarizationPipeline(options)`](#new_module_pipelines.SummarizationPipeline_new)
    : `摘要生成管道`'
- en: '[`._key`](#module_pipelines.SummarizationPipeline+_key) : `’summary_text’`'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._key`](#module_pipelines.SummarizationPipeline+_key) : `摘要文本`'
- en: '[.TranslationPipeline](#module_pipelines.TranslationPipeline)'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.TranslationPipeline](#module_pipelines.TranslationPipeline) : `翻译管道`'
- en: '[`new TranslationPipeline(options)`](#new_module_pipelines.TranslationPipeline_new)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new TranslationPipeline(options)`](#new_module_pipelines.TranslationPipeline_new)
    : `翻译管道`'
- en: '[`._key`](#module_pipelines.TranslationPipeline+_key) : `’translation_text’`'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._key`](#module_pipelines.TranslationPipeline+_key) : `翻译文本`'
- en: '[.TextGenerationPipeline](#module_pipelines.TextGenerationPipeline)'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.TextGenerationPipeline](#module_pipelines.TextGenerationPipeline) : `文本生成管道`'
- en: '[`new TextGenerationPipeline(options)`](#new_module_pipelines.TextGenerationPipeline_new)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new TextGenerationPipeline(options)`](#new_module_pipelines.TextGenerationPipeline_new)
    : `文本生成管道`'
- en: '[`._call()`](#module_pipelines.TextGenerationPipeline+_call) : `TextGenerationPipelineCallback`'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.TextGenerationPipeline+_call) : `文本生成管道回调`'
- en: '[.ZeroShotClassificationPipeline](#module_pipelines.ZeroShotClassificationPipeline)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ZeroShotClassificationPipeline](#module_pipelines.ZeroShotClassificationPipeline)
    : `零样本分类管道`'
- en: '[`new ZeroShotClassificationPipeline(options)`](#new_module_pipelines.ZeroShotClassificationPipeline_new)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ZeroShotClassificationPipeline(options)`](#new_module_pipelines.ZeroShotClassificationPipeline_new)
    : `零样本分类管道`'
- en: '[`.model`](#module_pipelines.ZeroShotClassificationPipeline+model) : `any`'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.model`](#module_pipelines.ZeroShotClassificationPipeline+model) : `任意`'
- en: '[`._call()`](#module_pipelines.ZeroShotClassificationPipeline+_call) : `ZeroShotClassificationPipelineCallback`'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ZeroShotClassificationPipeline+_call) : `零样本分类管道回调`'
- en: '[.FeatureExtractionPipeline](#module_pipelines.FeatureExtractionPipeline)'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.FeatureExtractionPipeline](#module_pipelines.FeatureExtractionPipeline) :
    `特征提取管道`'
- en: '[`new FeatureExtractionPipeline(options)`](#new_module_pipelines.FeatureExtractionPipeline_new)'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new FeatureExtractionPipeline(options)`](#new_module_pipelines.FeatureExtractionPipeline_new)
    : `特征提取管道`'
- en: '[`._call()`](#module_pipelines.FeatureExtractionPipeline+_call) : `FeatureExtractionPipelineCallback`'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.FeatureExtractionPipeline+_call) : `特征提取管道回调`'
- en: '[.AudioClassificationPipeline](#module_pipelines.AudioClassificationPipeline)'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.AudioClassificationPipeline](#module_pipelines.AudioClassificationPipeline)
    : `音频分类管道`'
- en: '[`new AudioClassificationPipeline(options)`](#new_module_pipelines.AudioClassificationPipeline_new)'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new AudioClassificationPipeline(options)`](#new_module_pipelines.AudioClassificationPipeline_new)
    : `音频分类管道`'
- en: '[`._call()`](#module_pipelines.AudioClassificationPipeline+_call) : `AudioClassificationPipelineCallback`'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.AudioClassificationPipeline+_call) : `音频分类管道回调`'
- en: '[.ZeroShotAudioClassificationPipeline](#module_pipelines.ZeroShotAudioClassificationPipeline)'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ZeroShotAudioClassificationPipeline](#module_pipelines.ZeroShotAudioClassificationPipeline)
    : `零样本音频分类管道`'
- en: '[`new ZeroShotAudioClassificationPipeline(options)`](#new_module_pipelines.ZeroShotAudioClassificationPipeline_new)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ZeroShotAudioClassificationPipeline(options)`](#new_module_pipelines.ZeroShotAudioClassificationPipeline_new)
    : `零样本音频分类管道`'
- en: '[`._call()`](#module_pipelines.ZeroShotAudioClassificationPipeline+_call) :
    `ZeroShotAudioClassificationPipelineCallback`'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ZeroShotAudioClassificationPipeline+_call) :
    `零样本音频分类管道回调`'
- en: '[.AutomaticSpeechRecognitionPipeline](#module_pipelines.AutomaticSpeechRecognitionPipeline)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.AutomaticSpeechRecognitionPipeline](#module_pipelines.AutomaticSpeechRecognitionPipeline)
    : `自动语音识别管道`'
- en: '[`new AutomaticSpeechRecognitionPipeline(options)`](#new_module_pipelines.AutomaticSpeechRecognitionPipeline_new)'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new AutomaticSpeechRecognitionPipeline(options)`](#new_module_pipelines.AutomaticSpeechRecognitionPipeline_new)
    => 新的自动语音识别管道'
- en: '[`._call()`](#module_pipelines.AutomaticSpeechRecognitionPipeline+_call) :
    `AutomaticSpeechRecognitionPipelineCallback`'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.AutomaticSpeechRecognitionPipeline+_call) :
    `AutomaticSpeechRecognitionPipelineCallback` => 调用'
- en: '[.ImageToTextPipeline](#module_pipelines.ImageToTextPipeline)'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ImageToTextPipeline](#module_pipelines.ImageToTextPipeline) => 图像到文本管道'
- en: '[`new ImageToTextPipeline(options)`](#new_module_pipelines.ImageToTextPipeline_new)'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ImageToTextPipeline(options)`](#new_module_pipelines.ImageToTextPipeline_new)
    => 新的图像转文本管道'
- en: '[`._call()`](#module_pipelines.ImageToTextPipeline+_call) : `ImageToTextPipelineCallback`'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ImageToTextPipeline+_call) : `ImageToTextPipelineCallback`
    => 调用'
- en: '[.ImageClassificationPipeline](#module_pipelines.ImageClassificationPipeline)'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ImageClassificationPipeline](#module_pipelines.ImageClassificationPipeline)
    => 图像分类管道'
- en: '[`new ImageClassificationPipeline(options)`](#new_module_pipelines.ImageClassificationPipeline_new)'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ImageClassificationPipeline(options)`](#new_module_pipelines.ImageClassificationPipeline_new)
    => 新的图像分类管道'
- en: '[`._call()`](#module_pipelines.ImageClassificationPipeline+_call) : `ImageClassificationPipelineCallback`'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ImageClassificationPipeline+_call) : `ImageClassificationPipelineCallback`
    => 调用'
- en: '[.ImageSegmentationPipeline](#module_pipelines.ImageSegmentationPipeline)'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ImageSegmentationPipeline](#module_pipelines.ImageSegmentationPipeline) =>
    图像分割管道'
- en: '[`new ImageSegmentationPipeline(options)`](#new_module_pipelines.ImageSegmentationPipeline_new)'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ImageSegmentationPipeline(options)`](#new_module_pipelines.ImageSegmentationPipeline_new)
    => 新的图像分割管道'
- en: '[`._call()`](#module_pipelines.ImageSegmentationPipeline+_call) : `ImageSegmentationPipelineCallback`'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ImageSegmentationPipeline+_call) : `ImageSegmentationPipelineCallback`
    => 调用'
- en: '[.ZeroShotImageClassificationPipeline](#module_pipelines.ZeroShotImageClassificationPipeline)'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ZeroShotImageClassificationPipeline](#module_pipelines.ZeroShotImageClassificationPipeline)
    => 零样本图像分类管道'
- en: '[`new ZeroShotImageClassificationPipeline(options)`](#new_module_pipelines.ZeroShotImageClassificationPipeline_new)'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ZeroShotImageClassificationPipeline(options)`](#new_module_pipelines.ZeroShotImageClassificationPipeline_new)
    => 新的零样本图像分类管道'
- en: '[`._call()`](#module_pipelines.ZeroShotImageClassificationPipeline+_call) :
    `ZeroShotImageClassificationPipelineCallback`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ZeroShotImageClassificationPipeline+_call) :
    `ZeroShotImageClassificationPipelineCallback` => 调用'
- en: '[.ObjectDetectionPipeline](#module_pipelines.ObjectDetectionPipeline)'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ObjectDetectionPipeline](#module_pipelines.ObjectDetectionPipeline) => 目标检测管道'
- en: '[`new ObjectDetectionPipeline(options)`](#new_module_pipelines.ObjectDetectionPipeline_new)'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ObjectDetectionPipeline(options)`](#new_module_pipelines.ObjectDetectionPipeline_new)
    => 新的目标检测管道'
- en: '[`._call()`](#module_pipelines.ObjectDetectionPipeline+_call) : `ObjectDetectionPipelineCallback`'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ObjectDetectionPipeline+_call) : `ObjectDetectionPipelineCallback`
    => 调用'
- en: '[.ZeroShotObjectDetectionPipeline](#module_pipelines.ZeroShotObjectDetectionPipeline)'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ZeroShotObjectDetectionPipeline](#module_pipelines.ZeroShotObjectDetectionPipeline)
    => 零样本目标检测管道'
- en: '[`new ZeroShotObjectDetectionPipeline(options)`](#new_module_pipelines.ZeroShotObjectDetectionPipeline_new)'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ZeroShotObjectDetectionPipeline(options)`](#new_module_pipelines.ZeroShotObjectDetectionPipeline_new)
    => 新的零样本目标检测管道'
- en: '[`._call()`](#module_pipelines.ZeroShotObjectDetectionPipeline+_call) : `ZeroShotObjectDetectionPipelineCallback`'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ZeroShotObjectDetectionPipeline+_call) : `ZeroShotObjectDetectionPipelineCallback`
    => 调用'
- en: '[.DocumentQuestionAnsweringPipeline](#module_pipelines.DocumentQuestionAnsweringPipeline)'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.DocumentQuestionAnsweringPipeline](#module_pipelines.DocumentQuestionAnsweringPipeline)
    => 文档问答管道'
- en: '[`new DocumentQuestionAnsweringPipeline(options)`](#new_module_pipelines.DocumentQuestionAnsweringPipeline_new)'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new DocumentQuestionAnsweringPipeline(options)`](#new_module_pipelines.DocumentQuestionAnsweringPipeline_new)
    => 新的文档问答管道'
- en: '[`._call()`](#module_pipelines.DocumentQuestionAnsweringPipeline+_call) : `DocumentQuestionAnsweringPipelineCallback`'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.DocumentQuestionAnsweringPipeline+_call) : `DocumentQuestionAnsweringPipelineCallback`
    => 调用'
- en: '[.TextToAudioPipeline](#module_pipelines.TextToAudioPipeline)'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.TextToAudioPipeline](#module_pipelines.TextToAudioPipeline) => 文本转音频管道'
- en: '[`new TextToAudioPipeline(options)`](#new_module_pipelines.TextToAudioPipeline_new)'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new TextToAudioPipeline(options)`](#new_module_pipelines.TextToAudioPipeline_new)
    => 新的文本转音频管道'
- en: '[`._call()`](#module_pipelines.TextToAudioPipeline+_call) : `TextToAudioPipelineCallback`'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.TextToAudioPipeline+_call) : `TextToAudioPipelineCallback`
    => 调用'
- en: '[.ImageToImagePipeline](#module_pipelines.ImageToImagePipeline)'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ImageToImagePipeline](#module_pipelines.ImageToImagePipeline) => 图像到图像管道'
- en: '[`new ImageToImagePipeline(options)`](#new_module_pipelines.ImageToImagePipeline_new)'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ImageToImagePipeline(options)`](#new_module_pipelines.ImageToImagePipeline_new)
    => 新的图像到图像管道'
- en: '[`._call()`](#module_pipelines.ImageToImagePipeline+_call) : `ImageToImagePipelineCallback`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ImageToImagePipeline+_call) : `ImageToImagePipelineCallback`
    => 调用'
- en: '[.DepthEstimationPipeline](#module_pipelines.DepthEstimationPipeline)'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.DepthEstimationPipeline](#module_pipelines.DepthEstimationPipeline) => 深度估计管道'
- en: '[`new DepthEstimationPipeline(options)`](#new_module_pipelines.DepthEstimationPipeline_new)'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new DepthEstimationPipeline(options)`](#new_module_pipelines.DepthEstimationPipeline_new)
    => 新的深度估计管道'
- en: '[`._call()`](#module_pipelines.DepthEstimationPipeline+_call) : `DepthEstimationPipelineCallback`'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.DepthEstimationPipeline+_call) : `DepthEstimationPipelineCallback`
    => 调用'
- en: '[`.pipeline(task, [model], [options])`](#module_pipelines.pipeline) ⇒ `*`'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.pipeline(task, [model], [options])`](#module_pipelines.pipeline) ⇒ `*` =>
    管道'
- en: '*inner*'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*inner* => 内部'
- en: '[`~x[1]`](#module_pipelines..x%5B1%5D) : `number`'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~x[1]`](#module_pipelines..x%5B1%5D) : `number` => x[1] : 数字'
- en: '[`~ImagePipelineInputs`](#module_pipelines..ImagePipelineInputs) : `string`
    | `RawImage` | `URL`'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ImagePipelineInputs`](#module_pipelines..ImagePipelineInputs) : `string`
    | `RawImage` | `URL` => 图像管道输入'
- en: '[`~AudioPipelineInputs`](#module_pipelines..AudioPipelineInputs) : `string`
    | `URL` | `Float32Array` | `Float64Array`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~AudioPipelineInputs`](#module_pipelines..AudioPipelineInputs) : `string`
    | `URL` | `Float32Array` | `Float64Array` => 音频管道输入'
- en: '[`~BoundingBox`](#module_pipelines..BoundingBox) : `Object`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~BoundingBox`](#module_pipelines..BoundingBox) : `Object` => 边界框'
- en: '[`~Disposable`](#module_pipelines..Disposable) ⇒ `Promise.<void>`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~Disposable`](#module_pipelines..Disposable) ⇒ `Promise.<void>` => 一次性的'
- en: '[`~TextPipelineConstructorArgs`](#module_pipelines..TextPipelineConstructorArgs)
    : `Object`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~TextPipelineConstructorArgs`](#module_pipelines..TextPipelineConstructorArgs)
    : `Object` => 文本管道构造参数'
- en: '[`~ImagePipelineConstructorArgs`](#module_pipelines..ImagePipelineConstructorArgs)
    : `Object`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ImagePipelineConstructorArgs`](#module_pipelines..ImagePipelineConstructorArgs)
    : `Object` => 图像管道构造参数'
- en: '[`~TextImagePipelineConstructorArgs`](#module_pipelines..TextImagePipelineConstructorArgs)
    : `Object`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~TextImagePipelineConstructorArgs`](#module_pipelines..TextImagePipelineConstructorArgs)
    : `Object` => 文本图像管道构造参数'
- en: '[`~TextClassificationPipelineType`](#module_pipelines..TextClassificationPipelineType)
    ⇒ `Promise.<(TextClassificationOutput|Array<TextClassificationOutput>)>`'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~TextClassificationPipelineType`](#module_pipelines..TextClassificationPipelineType)
    ⇒ `Promise.<(TextClassificationOutput|Array<TextClassificationOutput>)>` => 文本分类管道类型'
- en: '[`~TokenClassificationPipelineType`](#module_pipelines..TokenClassificationPipelineType)
    ⇒ `Promise.<(TokenClassificationOutput|Array<TokenClassificationOutput>)>`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~TokenClassificationPipelineType`](#module_pipelines..TokenClassificationPipelineType)
    ⇒ `Promise.<(TokenClassificationOutput|Array<TokenClassificationOutput>)>`'
- en: '[`~QuestionAnsweringPipelineType`](#module_pipelines..QuestionAnsweringPipelineType)
    ⇒ `Promise.<(QuestionAnsweringOutput|Array<QuestionAnsweringOutput>)>`'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~QuestionAnsweringPipelineType`](#module_pipelines..QuestionAnsweringPipelineType)
    ⇒ `Promise.<(QuestionAnsweringOutput|Array<QuestionAnsweringOutput>)>`'
- en: '[`~FillMaskPipelineType`](#module_pipelines..FillMaskPipelineType) ⇒ `Promise.<(FillMaskOutput|Array<FillMaskOutput>)>`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~FillMaskPipelineType`](#module_pipelines..FillMaskPipelineType) ⇒ `Promise.<(FillMaskOutput|Array<FillMaskOutput>)>`'
- en: '[`~Text2TextGenerationPipelineType`](#module_pipelines..Text2TextGenerationPipelineType)
    ⇒ `Promise.<(Text2TextGenerationOutput|Array<Text2TextGenerationOutput>)>`'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~Text2TextGenerationPipelineType`](#module_pipelines..Text2TextGenerationPipelineType)
    ⇒ `Promise.<(Text2TextGenerationOutput|Array<Text2TextGenerationOutput>)>`'
- en: '[`~SummarizationPipelineType`](#module_pipelines..SummarizationPipelineType)
    ⇒ `Promise.<(SummarizationOutput|Array<SummarizationOutput>)>`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~SummarizationPipelineType`](#module_pipelines..SummarizationPipelineType)
    ⇒ `Promise.<(SummarizationOutput|Array<SummarizationOutput>)>`'
- en: '[`~TranslationPipelineType`](#module_pipelines..TranslationPipelineType) ⇒
    `Promise.<(TranslationOutput|Array<TranslationOutput>)>`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~TranslationPipelineType`](#module_pipelines..TranslationPipelineType) ⇒
    `Promise.<(TranslationOutput|Array<TranslationOutput>)>`'
- en: '[`~TextGenerationPipelineType`](#module_pipelines..TextGenerationPipelineType)
    ⇒ `Promise.<(TextGenerationOutput|Array<TextGenerationOutput>)>`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~TextGenerationPipelineType`](#module_pipelines..TextGenerationPipelineType)
    ⇒ `Promise.<(TextGenerationOutput|Array<TextGenerationOutput>)>`'
- en: '[`~ZeroShotClassificationPipelineType`](#module_pipelines..ZeroShotClassificationPipelineType)
    ⇒ `Promise.<(ZeroShotClassificationOutput|Array<ZeroShotClassificationOutput>)>`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ZeroShotClassificationPipelineType`](#module_pipelines..ZeroShotClassificationPipelineType)
    ⇒ `Promise.<(ZeroShotClassificationOutput|Array<ZeroShotClassificationOutput>)>`'
- en: '[`~FeatureExtractionPipelineType`](#module_pipelines..FeatureExtractionPipelineType)
    ⇒ `Promise.<Tensor>`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~FeatureExtractionPipelineType`](#module_pipelines..FeatureExtractionPipelineType)
    ⇒ `Promise.<Tensor>`'
- en: '[`~AudioClassificationPipelineType`](#module_pipelines..AudioClassificationPipelineType)
    ⇒ `Promise.<(AudioClassificationOutput|Array<AudioClassificationOutput>)>`'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~AudioClassificationPipelineType`](#module_pipelines..AudioClassificationPipelineType)
    ⇒ `Promise.<(AudioClassificationOutput|Array<AudioClassificationOutput>)>`'
- en: '[`~ZeroShotAudioClassificationPipelineType`](#module_pipelines..ZeroShotAudioClassificationPipelineType)
    ⇒ `Promise.<(Array<ZeroShotAudioClassificationOutput>|Array<Array<ZeroShotAudioClassificationOutput>>)>`'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ZeroShotAudioClassificationPipelineType`](#module_pipelines..ZeroShotAudioClassificationPipelineType)
    ⇒ `Promise.<(Array<ZeroShotAudioClassificationOutput>|Array<Array<ZeroShotAudioClassificationOutput>>)>`'
- en: '[`~ChunkCallback`](#module_pipelines..ChunkCallback) : `function`'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ChunkCallback`](#module_pipelines..ChunkCallback) : `function`'
- en: '[`~Chunk`](#module_pipelines..Chunk) : `Object`'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~Chunk`](#module_pipelines..Chunk) : `Object`'
- en: '[`~AutomaticSpeechRecognitionPipelineType`](#module_pipelines..AutomaticSpeechRecognitionPipelineType)
    ⇒ `Promise.<(AutomaticSpeechRecognitionOutput|Array<AutomaticSpeechRecognitionOutput>)>`'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~AutomaticSpeechRecognitionPipelineType`](#module_pipelines..AutomaticSpeechRecognitionPipelineType)
    ⇒ `Promise.<(AutomaticSpeechRecognitionOutput|Array<AutomaticSpeechRecognitionOutput>)>`'
- en: '[`~ImageToTextPipelineType`](#module_pipelines..ImageToTextPipelineType) ⇒
    `Promise.<(ImageToTextOutput|Array<ImageToTextOutput>)>`'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ImageToTextPipelineType`](#module_pipelines..ImageToTextPipelineType) ⇒
    `Promise.<(ImageToTextOutput|Array<ImageToTextOutput>)>`'
- en: '[`~ImageClassificationPipelineType`](#module_pipelines..ImageClassificationPipelineType)
    ⇒ `Promise.<(ImageClassificationOutput|Array<ImageClassificationOutput>)>`'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ImageClassificationPipelineType`](#module_pipelines..ImageClassificationPipelineType)
    ⇒ `Promise.<(ImageClassificationOutput|Array<ImageClassificationOutput>)>`'
- en: '[`~ImageSegmentationPipelineType`](#module_pipelines..ImageSegmentationPipelineType)
    ⇒ `Promise.<Array<ImageSegmentationPipelineOutput>>`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ImageSegmentationPipelineType`](#module_pipelines..ImageSegmentationPipelineType)
    ⇒ `Promise.<Array<ImageSegmentationPipelineOutput>>`'
- en: '[`~ZeroShotImageClassificationPipelineType`](#module_pipelines..ZeroShotImageClassificationPipelineType)
    ⇒ `Promise.<(Array<ZeroShotImageClassificationOutput>|Array<Array<ZeroShotImageClassificationOutput>>)>`'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ZeroShotImageClassificationPipelineType`](#module_pipelines..ZeroShotImageClassificationPipelineType)
    ⇒ `Promise.<(Array<ZeroShotImageClassificationOutput>|Array<Array<ZeroShotImageClassificationOutput>>)>`'
- en: '[`~ObjectDetectionPipelineType`](#module_pipelines..ObjectDetectionPipelineType)
    ⇒ `Promise.<(ObjectDetectionPipelineOutput|Array<ObjectDetectionPipelineOutput>)>`'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ObjectDetectionPipelineType`](#module_pipelines..ObjectDetectionPipelineType)
    ⇒ `Promise.<(ObjectDetectionPipelineOutput|Array<ObjectDetectionPipelineOutput>)>`'
- en: '[`~ZeroShotObjectDetectionPipelineType`](#module_pipelines..ZeroShotObjectDetectionPipelineType)
    ⇒ `Promise.<(Array<ZeroShotObjectDetectionOutput>|Array<Array<ZeroShotObjectDetectionOutput>>)>`'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ZeroShotObjectDetectionPipelineType`](#module_pipelines..ZeroShotObjectDetectionPipelineType)
    ⇒ `Promise.<(Array<ZeroShotObjectDetectionOutput>|Array<Array<ZeroShotObjectDetectionOutput>>)>`'
- en: '[`~DocumentQuestionAnsweringPipelineType`](#module_pipelines..DocumentQuestionAnsweringPipelineType)
    ⇒ `Promise.<(DocumentQuestionAnsweringOutput|Array<DocumentQuestionAnsweringOutput>)>`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~DocumentQuestionAnsweringPipelineType`](#module_pipelines..DocumentQuestionAnsweringPipelineType)
    ⇒ `Promise.<(DocumentQuestionAnsweringOutput|Array<DocumentQuestionAnsweringOutput>)>`'
- en: '[`~TextToAudioPipelineConstructorArgs`](#module_pipelines..TextToAudioPipelineConstructorArgs)
    : `Object`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~TextToAudioPipelineConstructorArgs`](#module_pipelines..TextToAudioPipelineConstructorArgs)
    : `Object`'
- en: '[`~TextToAudioPipelineType`](#module_pipelines..TextToAudioPipelineType) ⇒
    `Promise.<TextToAudioOutput>`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~TextToAudioPipelineType`](#module_pipelines..TextToAudioPipelineType) ⇒
    `Promise.<TextToAudioOutput>`'
- en: '[`~ImageToImagePipelineType`](#module_pipelines..ImageToImagePipelineType)
    ⇒ `Promise.<(RawImage|Array<RawImage>)>`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~ImageToImagePipelineType`](#module_pipelines..ImageToImagePipelineType)
    ⇒ `Promise.<(RawImage|Array<RawImage>)>`'
- en: '[`~DepthEstimationPipelineType`](#module_pipelines..DepthEstimationPipelineType)
    ⇒ `Promise.<(DepthEstimationPipelineOutput|Array<DepthEstimationPipelineOutput>)>`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~DepthEstimationPipelineType`](#module_pipelines..DepthEstimationPipelineType)
    ⇒ `Promise.<(DepthEstimationPipelineOutput|Array<DepthEstimationPipelineOutput>)>`'
- en: '[`~AllTasks`](#module_pipelines..AllTasks) : `*`'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`~AllTasks`](#module_pipelines..AllTasks) : `*`'
- en: '* * *'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.Pipeline ⇐ <code> Callable </code>
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.Pipeline ⇐ <code> Callable </code>
- en: The Pipeline class is the class from which all pipelines inherit. Refer to this
    class for methods shared across different pipelines.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Pipeline类是所有流水线继承的类。请参考此类以获取不同流水线共享的方法。
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kind**: static class of [`pipelines`](#module_pipelines)'
- en: '**Extends**: `Callable`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**Extends**: `Callable`'
- en: '[.Pipeline](#module_pipelines.Pipeline) ⇐ `Callable`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.Pipeline](#module_pipelines.Pipeline) ⇐ `Callable`'
- en: '[`new Pipeline(options)`](#new_module_pipelines.Pipeline_new)'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new Pipeline(options)`](#new_module_pipelines.Pipeline_new)'
- en: '[`.dispose()`](#module_pipelines.Pipeline+dispose) : `DisposeType`'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.dispose()`](#module_pipelines.Pipeline+dispose)：`DisposeType`'
- en: '* * *'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new Pipeline(options)
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新管道(options)
- en: Create a new Pipeline.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的Pipeline。
- en: '| Param | Type | Default | Description |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 默认值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| options | `Object` |  | An object containing the following properties: |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| options | `Object` |  | 包含以下属性的对象： |'
- en: '| [options.task] | `string` |  | The task of the pipeline. Useful for specifying
    subtasks. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| [options.task] | `string` |  | 管道的任务。用于指定子任务。'
- en: '| [options.model] | `PreTrainedModel` |  | The model used by the pipeline.
    |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| [options.model] | `PreTrainedModel` |  | 管道使用的模型。 |'
- en: '| [options.tokenizer] | `PreTrainedTokenizer` |  | The tokenizer used by the
    pipeline (if any). |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| [options.tokenizer] | `PreTrainedTokenizer` |  | 管道使用的分词器（如果有）。'
- en: '| [options.processor] | `Processor` |  | The processor used by the pipeline
    (if any). |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| [options.processor] | `Processor` |  | 管道使用的处理器（如果有）。'
- en: '* * *'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'pipeline.dispose() : <code> DisposeType </code>'
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: pipeline.dispose()： <code> DisposeType </code>
- en: '**Kind**: instance method of [`Pipeline`](#module_pipelines.Pipeline)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`Pipeline`](#module_pipelines.Pipeline)的实例方法'
- en: '* * *'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.TextClassificationPipeline
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.TextClassificationPipeline
- en: Text classification pipeline using any `ModelForSequenceClassification`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何 `ModelForSequenceClassification` 的文本分类管道。
- en: '**Example:** Sentiment-analysis w/ `Xenova/distilbert-base-uncased-finetuned-sst-2-english`.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用 `Xenova/distilbert-base-uncased-finetuned-sst-2-english` 进行情感分析。'
- en: '[PRE1]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Example:** Multilingual sentiment-analysis w/ `Xenova/bert-base-multilingual-uncased-sentiment`
    (and return top 5 classes).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用 `Xenova/bert-base-multilingual-uncased-sentiment` 进行多语言情感分析（并返回前5个类）。'
- en: '[PRE2]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Example:** Toxic comment classification w/ `Xenova/toxic-bert` (and return
    all classes).'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用 `Xenova/toxic-bert` 进行有毒评论分类（并返回所有类）。'
- en: '[PRE3]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.TextClassificationPipeline](#module_pipelines.TextClassificationPipeline)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.TextClassificationPipeline](#module_pipelines.TextClassificationPipeline)'
- en: '[`new TextClassificationPipeline(options)`](#new_module_pipelines.TextClassificationPipeline_new)'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new TextClassificationPipeline(options)`](#new_module_pipelines.TextClassificationPipeline_new)'
- en: '[`._call()`](#module_pipelines.TextClassificationPipeline+_call) : `TextClassificationPipelineCallback`'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.TextClassificationPipeline+_call)：`TextClassificationPipelineCallback`'
- en: '* * *'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new TextClassificationPipeline(options)
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的TextClassificationPipeline(options)
- en: Create a new TextClassificationPipeline.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的TextClassificationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | `TextPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'textClassificationPipeline._call() : <code> TextClassificationPipelineCallback
    </code>'
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: textClassificationPipeline._call()： <code> TextClassificationPipelineCallback
    </code>
- en: '**Kind**: instance method of [`TextClassificationPipeline`](#module_pipelines.TextClassificationPipeline)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`TextClassificationPipeline`](#module_pipelines.TextClassificationPipeline)的实例方法'
- en: '* * *'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.TokenClassificationPipeline
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.TokenClassificationPipeline
- en: Named Entity Recognition pipeline using any `ModelForTokenClassification`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何 `ModelForTokenClassification` 的命名实体识别管道。
- en: '**Example:** Perform named entity recognition with `Xenova/bert-base-NER`.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用 `Xenova/bert-base-NER` 执行命名实体识别。'
- en: '[PRE4]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Example:** Perform named entity recognition with `Xenova/bert-base-NER` (and
    return all labels).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用 `Xenova/bert-base-NER` 执行命名实体识别（并返回所有标签）。'
- en: '[PRE5]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.TokenClassificationPipeline](#module_pipelines.TokenClassificationPipeline)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.TokenClassificationPipeline](#module_pipelines.TokenClassificationPipeline)'
- en: '[`new TokenClassificationPipeline(options)`](#new_module_pipelines.TokenClassificationPipeline_new)'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new TokenClassificationPipeline(options)`](#new_module_pipelines.TokenClassificationPipeline_new)'
- en: '[`._call()`](#module_pipelines.TokenClassificationPipeline+_call) : `TokenClassificationPipelineCallback`'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.TokenClassificationPipeline+_call)：`TokenClassificationPipelineCallback`'
- en: '* * *'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new TokenClassificationPipeline(options)
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的TokenClassificationPipeline(options)
- en: Create a new TokenClassificationPipeline.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的TokenClassificationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | `TextPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'tokenClassificationPipeline._call() : <code> TokenClassificationPipelineCallback
    </code>'
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: tokenClassificationPipeline._call()： <code> TokenClassificationPipelineCallback
    </code>
- en: '**Kind**: instance method of [`TokenClassificationPipeline`](#module_pipelines.TokenClassificationPipeline)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`TokenClassificationPipeline`](#module_pipelines.TokenClassificationPipeline)的实例方法'
- en: '* * *'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.QuestionAnsweringPipeline
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.QuestionAnsweringPipeline
- en: Question Answering pipeline using any `ModelForQuestionAnswering`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何 `ModelForQuestionAnswering` 的问答管道。
- en: '**Example:** Run question answering with `Xenova/distilbert-base-uncased-distilled-squad`.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用 `Xenova/distilbert-base-uncased-distilled-squad` 运行问答。'
- en: '[PRE6]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.QuestionAnsweringPipeline](#module_pipelines.QuestionAnsweringPipeline)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.QuestionAnsweringPipeline](#module_pipelines.QuestionAnsweringPipeline)'
- en: '[`new QuestionAnsweringPipeline(options)`](#new_module_pipelines.QuestionAnsweringPipeline_new)'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new QuestionAnsweringPipeline(options)`](#new_module_pipelines.QuestionAnsweringPipeline_new)'
- en: '[`._call()`](#module_pipelines.QuestionAnsweringPipeline+_call) : `QuestionAnsweringPipelineCallback`'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.QuestionAnsweringPipeline+_call)：`QuestionAnsweringPipelineCallback`'
- en: '* * *'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new QuestionAnsweringPipeline(options)
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的QuestionAnsweringPipeline(options)
- en: Create a new QuestionAnsweringPipeline.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的QuestionAnsweringPipeline。
- en: '| Param | Type | Description |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | `TextPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'questionAnsweringPipeline._call() : <code> QuestionAnsweringPipelineCallback
    </code>'
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: questionAnsweringPipeline._call()： <code> QuestionAnsweringPipelineCallback
    </code>
- en: '**Kind**: instance method of [`QuestionAnsweringPipeline`](#module_pipelines.QuestionAnsweringPipeline)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`QuestionAnsweringPipeline`](#module_pipelines.QuestionAnsweringPipeline)的实例方法'
- en: '* * *'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.FillMaskPipeline
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.FillMaskPipeline
- en: Masked language modeling prediction pipeline using any `ModelWithLMHead`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何`ModelWithLMHead`进行掩码语言建模预测管道。
- en: '**Example:** Perform masked language modelling (a.k.a. “fill-mask”) with `Xenova/bert-base-uncased`.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/bert-base-uncased`进行掩码语言建模（也称为“填充掩码”）。'
- en: '[PRE7]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Example:** Perform masked language modelling (a.k.a. “fill-mask”) with `Xenova/bert-base-cased`
    (and return top result).'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/bert-base-cased`进行掩码语言建模（并返回顶部结果）。'
- en: '[PRE8]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.FillMaskPipeline](#module_pipelines.FillMaskPipeline)'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.FillMaskPipeline](#module_pipelines.FillMaskPipeline)'
- en: '[`new FillMaskPipeline(options)`](#new_module_pipelines.FillMaskPipeline_new)'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new FillMaskPipeline(options)`](#new_module_pipelines.FillMaskPipeline_new)'
- en: '[`._call()`](#module_pipelines.FillMaskPipeline+_call) : `FillMaskPipelineCallback`'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.FillMaskPipeline+_call)：`FillMaskPipelineCallback`'
- en: '* * *'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new FillMaskPipeline(options)
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new FillMaskPipeline(options)
- en: Create a new FillMaskPipeline.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的FillMaskPipeline。
- en: '| Param | Type | Description |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | `TextPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'fillMaskPipeline._call() : <code> FillMaskPipelineCallback </code>'
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: fillMaskPipeline._call()：`<code> FillMaskPipelineCallback </code>`
- en: '**Kind**: instance method of [`FillMaskPipeline`](#module_pipelines.FillMaskPipeline)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`FillMaskPipeline`](#module_pipelines.FillMaskPipeline)的实例方法'
- en: '* * *'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.Text2TextGenerationPipeline
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.Text2TextGenerationPipeline
- en: Text2TextGenerationPipeline class for generating text using a model that performs
    text-to-text generation tasks.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Text2TextGenerationPipeline类用于使用执行文本到文本生成任务的模型生成文本。
- en: '**Example:** Text-to-text generation w/ `Xenova/LaMini-Flan-T5-783M`.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/LaMini-Flan-T5-783M`进行文本到文本生成。'
- en: '[PRE9]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.Text2TextGenerationPipeline](#module_pipelines.Text2TextGenerationPipeline)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.Text2TextGenerationPipeline](#module_pipelines.Text2TextGenerationPipeline)'
- en: '[`new Text2TextGenerationPipeline(options)`](#new_module_pipelines.Text2TextGenerationPipeline_new)'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new Text2TextGenerationPipeline(options)`](#new_module_pipelines.Text2TextGenerationPipeline_new)'
- en: '[`._key`](#module_pipelines.Text2TextGenerationPipeline+_key) : `’generated_text’`'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._key`](#module_pipelines.Text2TextGenerationPipeline+_key)：`’generated_text’`'
- en: '[`._call()`](#module_pipelines.Text2TextGenerationPipeline+_call) : `Text2TextGenerationPipelineCallback`'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.Text2TextGenerationPipeline+_call)：`Text2TextGenerationPipelineCallback`'
- en: '* * *'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new Text2TextGenerationPipeline(options)
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new Text2TextGenerationPipeline(options)
- en: Create a new Text2TextGenerationPipeline.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的Text2TextGenerationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | `TextPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'text2TextGenerationPipeline._key : <code> ’ generated_text ’ </code>'
  id: totrans-237
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: text2TextGenerationPipeline._key：`<code> ’ generated_text ’ </code>`
- en: '**Kind**: instance property of [`Text2TextGenerationPipeline`](#module_pipelines.Text2TextGenerationPipeline)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`Text2TextGenerationPipeline`](#module_pipelines.Text2TextGenerationPipeline)的实例属性'
- en: '* * *'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'text2TextGenerationPipeline._call() : <code> Text2TextGenerationPipelineCallback
    </code>'
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: text2TextGenerationPipeline._call()：`<code> Text2TextGenerationPipelineCallback
    </code>`
- en: '**Kind**: instance method of [`Text2TextGenerationPipeline`](#module_pipelines.Text2TextGenerationPipeline)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`Text2TextGenerationPipeline`](#module_pipelines.Text2TextGenerationPipeline)的实例方法'
- en: '* * *'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.SummarizationPipeline
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.SummarizationPipeline
- en: A pipeline for summarization tasks, inheriting from Text2TextGenerationPipeline.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于摘要任务的管道，继承自Text2TextGenerationPipeline。
- en: '**Example:** Summarization w/ `Xenova/distilbart-cnn-6-6`.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/distilbart-cnn-6-6`进行摘要。'
- en: '[PRE10]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.SummarizationPipeline](#module_pipelines.SummarizationPipeline)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.SummarizationPipeline](#module_pipelines.SummarizationPipeline)'
- en: '[`new SummarizationPipeline(options)`](#new_module_pipelines.SummarizationPipeline_new)'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new SummarizationPipeline(options)`](#new_module_pipelines.SummarizationPipeline_new)'
- en: '[`._key`](#module_pipelines.SummarizationPipeline+_key) : `’summary_text’`'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._key`](#module_pipelines.SummarizationPipeline+_key)：`’summary_text’`'
- en: '* * *'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new SummarizationPipeline(options)
  id: totrans-252
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new SummarizationPipeline(options)
- en: Create a new SummarizationPipeline.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的SummarizationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | `TextPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'summarizationPipeline._key : <code> ’ summary_text ’ </code>'
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: summarizationPipeline._key：`<code> ’ summary_text ’ </code>`
- en: '**Kind**: instance property of [`SummarizationPipeline`](#module_pipelines.SummarizationPipeline)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`SummarizationPipeline`](#module_pipelines.SummarizationPipeline)的实例属性'
- en: '* * *'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.TranslationPipeline
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.TranslationPipeline
- en: Translates text from one language to another.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 将文本从一种语言翻译为另一种语言。
- en: '**Example:** Multilingual translation w/ `Xenova/nllb-200-distilled-600M`.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/nllb-200-distilled-600M`进行多语言翻译。'
- en: See [here](https://github.com/facebookresearch/flores/blob/main/flores200/README.md#languages-in-flores-200)
    for the full list of languages and their corresponding codes.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 有关语言和对应代码的完整列表，请参见[这里](https://github.com/facebookresearch/flores/blob/main/flores200/README.md#languages-in-flores-200)。
- en: '[PRE11]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Example:** Multilingual translation w/ `Xenova/m2m100_418M`.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/m2m100_418M`进行多语言翻译。'
- en: See [here](https://huggingface.co/facebook/m2m100_418M#languages-covered) for
    the full list of languages and their corresponding codes.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 有关语言和对应代码的完整列表，请参见[这里](https://huggingface.co/facebook/m2m100_418M#languages-covered)。
- en: '[PRE12]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Example:** Multilingual translation w/ `Xenova/mbart-large-50-many-to-many-mmt`.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/mbart-large-50-many-to-many-mmt`进行多语言翻译。'
- en: See [here](https://huggingface.co/facebook/mbart-large-50-many-to-many-mmt#languages-covered)
    for the full list of languages and their corresponding codes.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 有关语言和对应代码的完整列表，请参见[这里](https://huggingface.co/facebook/mbart-large-50-many-to-many-mmt#languages-covered)。
- en: '[PRE13]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.TranslationPipeline](#module_pipelines.TranslationPipeline)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.TranslationPipeline](#module_pipelines.TranslationPipeline)'
- en: '[`new TranslationPipeline(options)`](#new_module_pipelines.TranslationPipeline_new)'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new TranslationPipeline(options)`](#new_module_pipelines.TranslationPipeline_new)'
- en: '[`._key`](#module_pipelines.TranslationPipeline+_key) : `’translation_text’`'
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._key`](#module_pipelines.TranslationPipeline+_key)：`’translation_text’`'
- en: '* * *'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new TranslationPipeline(options)
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new TranslationPipeline(options)
- en: Create a new TranslationPipeline.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的TranslationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| options | `TextPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'translationPipeline._key : <code> ’ translation_text ’ </code>'
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: translationPipeline._key：<code>’translation_text’</code>
- en: '**Kind**: instance property of [`TranslationPipeline`](#module_pipelines.TranslationPipeline)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`TranslationPipeline`](#module_pipelines.TranslationPipeline)的实例属性'
- en: '* * *'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.TextGenerationPipeline
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.TextGenerationPipeline
- en: 'Language generation pipeline using any `ModelWithLMHead` or `ModelForCausalLM`.
    This pipeline predicts the words that will follow a specified text prompt. NOTE:
    For the full list of generation parameters, see [`GenerationConfig`](./utils/generation#module_utils/generation.GenerationConfig).'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何`ModelWithLMHead`或`ModelForCausalLM`的语言生成管道。该管道预测将跟随指定文本提示的单词。注意：有关生成参数的完整列表，请参阅[`GenerationConfig`](./utils/generation#module_utils/generation.GenerationConfig)。
- en: '**Example:** Text generation with `Xenova/distilgpt2` (default settings).'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/distilgpt2`（默认设置）进行文本生成。'
- en: '[PRE14]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Example:** Text generation with `Xenova/distilgpt2` (custom settings).'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/distilgpt2`（自定义设置）进行文本生成。'
- en: '[PRE15]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Example:** Run code generation with `Xenova/codegen-350M-mono`.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/codegen-350M-mono`进行代码生成。'
- en: '[PRE16]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.TextGenerationPipeline](#module_pipelines.TextGenerationPipeline)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.TextGenerationPipeline](#module_pipelines.TextGenerationPipeline)'
- en: '[`new TextGenerationPipeline(options)`](#new_module_pipelines.TextGenerationPipeline_new)'
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new TextGenerationPipeline(options)`](#new_module_pipelines.TextGenerationPipeline_new)'
- en: '[`._call()`](#module_pipelines.TextGenerationPipeline+_call) : `TextGenerationPipelineCallback`'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.TextGenerationPipeline+_call)：`TextGenerationPipelineCallback`'
- en: '* * *'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new TextGenerationPipeline(options)
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new TextGenerationPipeline(options)
- en: Create a new TextGenerationPipeline.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的TextGenerationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| options | `TextPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'textGenerationPipeline._call() : <code> TextGenerationPipelineCallback </code>'
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: textGenerationPipeline._call()：<code>TextGenerationPipelineCallback</code>
- en: '**Kind**: instance method of [`TextGenerationPipeline`](#module_pipelines.TextGenerationPipeline)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`TextGenerationPipeline`](#module_pipelines.TextGenerationPipeline)的实例方法'
- en: '* * *'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.ZeroShotClassificationPipeline
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.ZeroShotClassificationPipeline
- en: NLI-based zero-shot classification pipeline using a `ModelForSequenceClassification`
    trained on NLI (natural language inference) tasks. Equivalent of `text-classification`
    pipelines, but these models don’t require a hardcoded number of potential classes,
    they can be chosen at runtime. It usually means it’s slower but it is **much**
    more flexible.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 基于NLI的零样本分类管道，使用在NLI（自然语言推理）任务上训练的`ModelForSequenceClassification`。相当于`text-classification`管道，但这些模型不需要预先确定的潜在类别数量，可以在运行时选择。通常意味着它更慢，但**更加**灵活。
- en: '**Example:** Zero shot classification with `Xenova/mobilebert-uncased-mnli`.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/mobilebert-uncased-mnli`进行零样本分类。'
- en: '[PRE17]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Example:** Zero shot classification with `Xenova/nli-deberta-v3-xsmall` (multi-label).'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/nli-deberta-v3-xsmall`（多标签）进行零样本分类。'
- en: '[PRE18]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.ZeroShotClassificationPipeline](#module_pipelines.ZeroShotClassificationPipeline)'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ZeroShotClassificationPipeline](#module_pipelines.ZeroShotClassificationPipeline)'
- en: '[`new ZeroShotClassificationPipeline(options)`](#new_module_pipelines.ZeroShotClassificationPipeline_new)'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ZeroShotClassificationPipeline(options)`](#new_module_pipelines.ZeroShotClassificationPipeline_new)'
- en: '[`.model`](#module_pipelines.ZeroShotClassificationPipeline+model) : `any`'
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`.model`](#module_pipelines.ZeroShotClassificationPipeline+model)：`any`'
- en: '[`._call()`](#module_pipelines.ZeroShotClassificationPipeline+_call) : `ZeroShotClassificationPipelineCallback`'
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ZeroShotClassificationPipeline+_call)：`ZeroShotClassificationPipelineCallback`'
- en: '* * *'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new ZeroShotClassificationPipeline(options)
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new ZeroShotClassificationPipeline(options)
- en: Create a new ZeroShotClassificationPipeline.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的ZeroShotClassificationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| options | `TextPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'zeroShotClassificationPipeline.model : <code> any </code>'
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: zeroShotClassificationPipeline.model：<code>any</code>
- en: '**Kind**: instance property of [`ZeroShotClassificationPipeline`](#module_pipelines.ZeroShotClassificationPipeline)'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ZeroShotClassificationPipeline`](#module_pipelines.ZeroShotClassificationPipeline)的实例属性'
- en: '* * *'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'zeroShotClassificationPipeline._call() : <code> ZeroShotClassificationPipelineCallback
    </code>'
  id: totrans-329
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: zeroShotClassificationPipeline._call()：<code>ZeroShotClassificationPipelineCallback</code>
- en: '**Kind**: instance method of [`ZeroShotClassificationPipeline`](#module_pipelines.ZeroShotClassificationPipeline)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ZeroShotClassificationPipeline`](#module_pipelines.ZeroShotClassificationPipeline)的实例方法'
- en: '* * *'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.FeatureExtractionPipeline
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.FeatureExtractionPipeline
- en: Feature extraction pipeline using no model head. This pipeline extracts the
    hidden states from the base transformer, which can be used as features in downstream
    tasks.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 使用没有模型头的特征提取管道。该管道从基础变换器中提取隐藏状态，可以用作下游任务中的特征。
- en: '**Example:** Run feature extraction with `bert-base-uncased` (without pooling/normalization).'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`bert-base-uncased`进行特征提取（不使用池化/归一化）。'
- en: '[PRE19]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Example:** Run feature extraction with `bert-base-uncased` (with pooling/normalization).'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`bert-base-uncased`进行特征提取（使用池化/归一化）。'
- en: '[PRE20]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Example:** Calculating embeddings with `sentence-transformers` models.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：使用`sentence-transformers`模型计算嵌入。'
- en: '[PRE21]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.FeatureExtractionPipeline](#module_pipelines.FeatureExtractionPipeline)'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.FeatureExtractionPipeline](#module_pipelines.FeatureExtractionPipeline)'
- en: '[`new FeatureExtractionPipeline(options)`](#new_module_pipelines.FeatureExtractionPipeline_new)'
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new FeatureExtractionPipeline(options)`](#new_module_pipelines.FeatureExtractionPipeline_new)'
- en: '[`._call()`](#module_pipelines.FeatureExtractionPipeline+_call) : `FeatureExtractionPipelineCallback`'
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.FeatureExtractionPipeline+_call)：`FeatureExtractionPipelineCallback`'
- en: '* * *'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new FeatureExtractionPipeline(options)
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的FeatureExtractionPipeline(options)
- en: Create a new FeatureExtractionPipeline.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的FeatureExtractionPipeline。
- en: '| Param | Type | Description |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextPipelineConstructorArgs` | An object used to instantiate the
    pipeline. |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| options | `TextPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'featureExtractionPipeline._call() : <code> FeatureExtractionPipelineCallback
    </code>'
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: featureExtractionPipeline._call()：<code> FeatureExtractionPipelineCallback </code>
- en: '**Kind**: instance method of [`FeatureExtractionPipeline`](#module_pipelines.FeatureExtractionPipeline)'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`FeatureExtractionPipeline`](#module_pipelines.FeatureExtractionPipeline)的实例方法'
- en: '* * *'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.AudioClassificationPipeline
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.AudioClassificationPipeline
- en: Audio classification pipeline using any `AutoModelForAudioClassification`. This
    pipeline predicts the class of a raw waveform or an audio file.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何`AutoModelForAudioClassification`的音频分类管道。该管道预测原始波形或音频文件的类别。
- en: '**Example:** Perform audio classification with `Xenova/wav2vec2-large-xlsr-53-gender-recognition-librispeech`.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：使用`Xenova/wav2vec2-large-xlsr-53-gender-recognition-librispeech`进行音频分类。'
- en: '[PRE22]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Example:** Perform audio classification with `Xenova/ast-finetuned-audioset-10-10-0.4593`
    and return top 4 results.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：使用`Xenova/ast-finetuned-audioset-10-10-0.4593`进行音频分类并返回前4个结果。'
- en: '[PRE23]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.AudioClassificationPipeline](#module_pipelines.AudioClassificationPipeline)'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.AudioClassificationPipeline](#module_pipelines.AudioClassificationPipeline)'
- en: '[`new AudioClassificationPipeline(options)`](#new_module_pipelines.AudioClassificationPipeline_new)'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new AudioClassificationPipeline(options)`](#new_module_pipelines.AudioClassificationPipeline_new)'
- en: '[`._call()`](#module_pipelines.AudioClassificationPipeline+_call) : `AudioClassificationPipelineCallback`'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.AudioClassificationPipeline+_call)：`AudioClassificationPipelineCallback`'
- en: '* * *'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new AudioClassificationPipeline(options)
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的AudioClassificationPipeline(options)
- en: Create a new AudioClassificationPipeline.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的AudioClassificationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `AudioPipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| options | `AudioPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'audioClassificationPipeline._call() : <code> AudioClassificationPipelineCallback
    </code>'
  id: totrans-371
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: audioClassificationPipeline._call()：<code> AudioClassificationPipelineCallback
    </code>
- en: '**Kind**: instance method of [`AudioClassificationPipeline`](#module_pipelines.AudioClassificationPipeline)'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`AudioClassificationPipeline`](#module_pipelines.AudioClassificationPipeline)的实例方法'
- en: '* * *'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.ZeroShotAudioClassificationPipeline
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.ZeroShotAudioClassificationPipeline
- en: Zero shot audio classification pipeline using `ClapModel`. This pipeline predicts
    the class of an audio when you provide an audio and a set of `candidate_labels`.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ClapModel`的零射击音频分类管道。当您提供音频和一组`candidate_labels`时，该管道预测音频的类别。
- en: '**Example**: Perform zero-shot audio classification with `Xenova/clap-htsat-unfused`.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：使用`Xenova/clap-htsat-unfused`进行零射击音频分类。'
- en: '[PRE24]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.ZeroShotAudioClassificationPipeline](#module_pipelines.ZeroShotAudioClassificationPipeline)'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ZeroShotAudioClassificationPipeline](#module_pipelines.ZeroShotAudioClassificationPipeline)'
- en: '[`new ZeroShotAudioClassificationPipeline(options)`](#new_module_pipelines.ZeroShotAudioClassificationPipeline_new)'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ZeroShotAudioClassificationPipeline(options)`](#new_module_pipelines.ZeroShotAudioClassificationPipeline_new)'
- en: '[`._call()`](#module_pipelines.ZeroShotAudioClassificationPipeline+_call) :
    `ZeroShotAudioClassificationPipelineCallback`'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ZeroShotAudioClassificationPipeline+_call)：`ZeroShotAudioClassificationPipelineCallback`'
- en: '* * *'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new ZeroShotAudioClassificationPipeline(options)
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新的ZeroShotAudioClassificationPipeline(options)
- en: Create a new ZeroShotAudioClassificationPipeline.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的ZeroShotAudioClassificationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextAudioPipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| options | `TextAudioPipelineConstructorArgs` | 用于实例化管道的对象。 |'
- en: '* * *'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'zeroShotAudioClassificationPipeline._call() : <code> ZeroShotAudioClassificationPipelineCallback
    </code>'
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: zeroShotAudioClassificationPipeline._call()：<code> ZeroShotAudioClassificationPipelineCallback
    </code>
- en: '**Kind**: instance method of [`ZeroShotAudioClassificationPipeline`](#module_pipelines.ZeroShotAudioClassificationPipeline)'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ZeroShotAudioClassificationPipeline`](#module_pipelines.ZeroShotAudioClassificationPipeline)的实例方法'
- en: '* * *'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.AutomaticSpeechRecognitionPipeline
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.AutomaticSpeechRecognitionPipeline
- en: Pipeline that aims at extracting spoken text contained within some audio.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 旨在提取音频中包含的口头文本的管道。
- en: '**Example:** Transcribe English.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：转录英语。'
- en: '[PRE25]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Example:** Transcribe English w/ timestamps.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：转录英语并附有时间戳。'
- en: '[PRE26]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Example:** Transcribe English w/ word-level timestamps.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：转录英语并附有单词级时间戳。'
- en: '[PRE27]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**Example:** Transcribe French.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：转录法语。'
- en: '[PRE28]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Example:** Translate French to English.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：将法语翻译成英语。'
- en: '[PRE29]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Example:** Transcribe/translate audio longer than 30 seconds.'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：转录/翻译超过30秒的音频。'
- en: '[PRE30]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.AutomaticSpeechRecognitionPipeline](#module_pipelines.AutomaticSpeechRecognitionPipeline)'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.AutomaticSpeechRecognitionPipeline](#module_pipelines.AutomaticSpeechRecognitionPipeline)'
- en: '[`new AutomaticSpeechRecognitionPipeline(options)`](#new_module_pipelines.AutomaticSpeechRecognitionPipeline_new)'
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new AutomaticSpeechRecognitionPipeline(options)`](#new_module_pipelines.AutomaticSpeechRecognitionPipeline_new)'
- en: '[`._call()`](#module_pipelines.AutomaticSpeechRecognitionPipeline+_call) :
    `AutomaticSpeechRecognitionPipelineCallback`'
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.AutomaticSpeechRecognitionPipeline+_call)：`AutomaticSpeechRecognitionPipelineCallback`'
- en: '* * *'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new AutomaticSpeechRecognitionPipeline(options)
  id: totrans-411
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new AutomaticSpeechRecognitionPipeline(options)
- en: Create a new AutomaticSpeechRecognitionPipeline.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的AutomaticSpeechRecognitionPipeline。
- en: '| Param | Type | Description |'
  id: totrans-413
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-414
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextAudioPipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-415
  prefs: []
  type: TYPE_TB
  zh: '| options | `TextAudioPipelineConstructorArgs` | 用于实例化流水线的对象。 |'
- en: '* * *'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'automaticSpeechRecognitionPipeline._call() : <code> AutomaticSpeechRecognitionPipelineCallback
    </code>'
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: automaticSpeechRecognitionPipeline._call()： <code> AutomaticSpeechRecognitionPipelineCallback
    </code>
- en: '**Kind**: instance method of [`AutomaticSpeechRecognitionPipeline`](#module_pipelines.AutomaticSpeechRecognitionPipeline)'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`AutomaticSpeechRecognitionPipeline`](#module_pipelines.AutomaticSpeechRecognitionPipeline)的实例方法'
- en: '* * *'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.ImageToTextPipeline
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.ImageToTextPipeline
- en: Image To Text pipeline using a `AutoModelForVision2Seq`. This pipeline predicts
    a caption for a given image.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`AutoModelForVision2Seq`的Image To Text流水线。该流水线为给定图像预测标题。
- en: '**Example:** Generate a caption for an image w/ `Xenova/vit-gpt2-image-captioning`.'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**使用`Xenova/vit-gpt2-image-captioning`为图像生成标题。'
- en: '[PRE31]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**Example:** Optical Character Recognition (OCR) w/ `Xenova/trocr-small-handwritten`.'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**使用`Xenova/trocr-small-handwritten`进行光学字符识别（OCR）。'
- en: '[PRE32]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.ImageToTextPipeline](#module_pipelines.ImageToTextPipeline)'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ImageToTextPipeline](#module_pipelines.ImageToTextPipeline)'
- en: '[`new ImageToTextPipeline(options)`](#new_module_pipelines.ImageToTextPipeline_new)'
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ImageToTextPipeline(options)`](#new_module_pipelines.ImageToTextPipeline_new)'
- en: '[`._call()`](#module_pipelines.ImageToTextPipeline+_call) : `ImageToTextPipelineCallback`'
  id: totrans-429
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ImageToTextPipeline+_call)：`ImageToTextPipelineCallback`'
- en: '* * *'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new ImageToTextPipeline(options)
  id: totrans-431
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new ImageToTextPipeline(options)
- en: Create a new ImageToTextPipeline.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的ImageToTextPipeline。
- en: '| Param | Type | Description |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| options | `TextImagePipelineConstructorArgs` | 用于实例化流水线的对象。 |'
- en: '* * *'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'imageToTextPipeline._call() : <code> ImageToTextPipelineCallback </code>'
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageToTextPipeline._call()： <code> ImageToTextPipelineCallback </code>
- en: '**Kind**: instance method of [`ImageToTextPipeline`](#module_pipelines.ImageToTextPipeline)'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ImageToTextPipeline`](#module_pipelines.ImageToTextPipeline)的实例方法'
- en: '* * *'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.ImageClassificationPipeline
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.ImageClassificationPipeline
- en: Image classification pipeline using any `AutoModelForImageClassification`. This
    pipeline predicts the class of an image.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何`AutoModelForImageClassification`的图像分类流水线。该流水线预测图像的类别。
- en: '**Example:** Classify an image.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**对图像进行分类。'
- en: '[PRE33]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Example:** Classify an image and return top `n` classes.'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**对图像进行分类并返回前`n`个类别。'
- en: '[PRE34]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**Example:** Classify an image and return all classes.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**对图像进行分类并返回所有类别。'
- en: '[PRE35]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.ImageClassificationPipeline](#module_pipelines.ImageClassificationPipeline)'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ImageClassificationPipeline](#module_pipelines.ImageClassificationPipeline)'
- en: '[`new ImageClassificationPipeline(options)`](#new_module_pipelines.ImageClassificationPipeline_new)'
  id: totrans-450
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ImageClassificationPipeline(options)`](#new_module_pipelines.ImageClassificationPipeline_new)'
- en: '[`._call()`](#module_pipelines.ImageClassificationPipeline+_call) : `ImageClassificationPipelineCallback`'
  id: totrans-451
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ImageClassificationPipeline+_call)：`ImageClassificationPipelineCallback`'
- en: '* * *'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new ImageClassificationPipeline(options)
  id: totrans-453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new ImageClassificationPipeline(options)
- en: Create a new ImageClassificationPipeline.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的ImageClassificationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `ImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '| options | `ImagePipelineConstructorArgs` | 用于实例化流水线的对象。 |'
- en: '* * *'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'imageClassificationPipeline._call() : <code> ImageClassificationPipelineCallback
    </code>'
  id: totrans-459
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageClassificationPipeline._call()： <code> ImageClassificationPipelineCallback
    </code>
- en: '**Kind**: instance method of [`ImageClassificationPipeline`](#module_pipelines.ImageClassificationPipeline)'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ImageClassificationPipeline`](#module_pipelines.ImageClassificationPipeline)的实例方法'
- en: '* * *'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.ImageSegmentationPipeline
  id: totrans-462
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.ImageSegmentationPipeline
- en: Image segmentation pipeline using any `AutoModelForXXXSegmentation`. This pipeline
    predicts masks of objects and their classes.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何`AutoModelForXXXSegmentation`的图像分割流水线。该流水线预测对象的掩模和它们的类别。
- en: '**Example:** Perform image segmentation with `Xenova/detr-resnet-50-panoptic`.'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**使用`Xenova/detr-resnet-50-panoptic`进行图像分割。'
- en: '[PRE36]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.ImageSegmentationPipeline](#module_pipelines.ImageSegmentationPipeline)'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ImageSegmentationPipeline](#module_pipelines.ImageSegmentationPipeline)'
- en: '[`new ImageSegmentationPipeline(options)`](#new_module_pipelines.ImageSegmentationPipeline_new)'
  id: totrans-468
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ImageSegmentationPipeline(options)`](#new_module_pipelines.ImageSegmentationPipeline_new)'
- en: '[`._call()`](#module_pipelines.ImageSegmentationPipeline+_call) : `ImageSegmentationPipelineCallback`'
  id: totrans-469
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ImageSegmentationPipeline+_call)：`ImageSegmentationPipelineCallback`'
- en: '* * *'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new ImageSegmentationPipeline(options)
  id: totrans-471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new ImageSegmentationPipeline(options)
- en: Create a new ImageSegmentationPipeline.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的ImageSegmentationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-473
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-474
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `ImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-475
  prefs: []
  type: TYPE_TB
  zh: '| options | `ImagePipelineConstructorArgs` | 用于实例化流水线的对象。 |'
- en: '* * *'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'imageSegmentationPipeline._call() : <code> ImageSegmentationPipelineCallback
    </code>'
  id: totrans-477
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageSegmentationPipeline._call()： <code> ImageSegmentationPipelineCallback
    </code>
- en: '**Kind**: instance method of [`ImageSegmentationPipeline`](#module_pipelines.ImageSegmentationPipeline)'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ImageSegmentationPipeline`](#module_pipelines.ImageSegmentationPipeline)的实例方法'
- en: '* * *'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.ZeroShotImageClassificationPipeline
  id: totrans-480
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.ZeroShotImageClassificationPipeline
- en: Zero shot image classification pipeline. This pipeline predicts the class of
    an image when you provide an image and a set of `candidate_labels`.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 零样本图像分类流水线。当您提供一张图像和一组`candidate_labels`时，该流水线预测图像的类别。
- en: '**Example:** Zero shot image classification w/ `Xenova/clip-vit-base-patch32`.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：**使用`Xenova/clip-vit-base-patch32`进行零样本图像分类。'
- en: '[PRE37]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.ZeroShotImageClassificationPipeline](#module_pipelines.ZeroShotImageClassificationPipeline)'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ZeroShotImageClassificationPipeline](#module_pipelines.ZeroShotImageClassificationPipeline)'
- en: '[`new ZeroShotImageClassificationPipeline(options)`](#new_module_pipelines.ZeroShotImageClassificationPipeline_new)'
  id: totrans-486
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ZeroShotImageClassificationPipeline+_call) :
    `ZeroShotImageClassificationPipelineCallback`'
  id: totrans-487
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: new ZeroShotImageClassificationPipeline(options)
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ZeroShotImageClassificationPipeline.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-491
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-492
  prefs: []
  type: TYPE_TB
- en: '| options | `TextImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-493
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: 'zeroShotImageClassificationPipeline._call() : <code> ZeroShotImageClassificationPipelineCallback
    </code>'
  id: totrans-495
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ZeroShotImageClassificationPipeline`](#module_pipelines.ZeroShotImageClassificationPipeline)'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ObjectDetectionPipeline
  id: totrans-498
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Object detection pipeline using any `AutoModelForObjectDetection`. This pipeline
    predicts bounding boxes of objects and their classes.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Run object-detection with `Xenova/detr-resnet-50`.'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: '[.ObjectDetectionPipeline](#module_pipelines.ObjectDetectionPipeline)'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ObjectDetectionPipeline(options)`](#new_module_pipelines.ObjectDetectionPipeline_new)'
  id: totrans-504
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ObjectDetectionPipeline+_call) : `ObjectDetectionPipelineCallback`'
  id: totrans-505
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: new ObjectDetectionPipeline(options)
  id: totrans-507
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ObjectDetectionPipeline.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
- en: '| options | `ImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: 'objectDetectionPipeline._call() : <code> ObjectDetectionPipelineCallback </code>'
  id: totrans-513
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ObjectDetectionPipeline`](#module_pipelines.ObjectDetectionPipeline)'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.ZeroShotObjectDetectionPipeline
  id: totrans-516
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Zero-shot object detection pipeline. This pipeline predicts bounding boxes of
    objects when you provide an image and a set of `candidate_labels`.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Zero-shot object detection w/ `Xenova/owlvit-base-patch32`.'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '**Example:** Zero-shot object detection w/ `Xenova/owlvit-base-patch32` (returning
    top 4 matches and setting a threshold).'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '[.ZeroShotObjectDetectionPipeline](#module_pipelines.ZeroShotObjectDetectionPipeline)'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new ZeroShotObjectDetectionPipeline(options)`](#new_module_pipelines.ZeroShotObjectDetectionPipeline_new)'
  id: totrans-524
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.ZeroShotObjectDetectionPipeline+_call) : `ZeroShotObjectDetectionPipelineCallback`'
  id: totrans-525
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: new ZeroShotObjectDetectionPipeline(options)
  id: totrans-527
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new ZeroShotObjectDetectionPipeline.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
- en: '| options | `TextImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: 'zeroShotObjectDetectionPipeline._call() : <code> ZeroShotObjectDetectionPipelineCallback
    </code>'
  id: totrans-533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Kind**: instance method of [`ZeroShotObjectDetectionPipeline`](#module_pipelines.ZeroShotObjectDetectionPipeline)'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: pipelines.DocumentQuestionAnsweringPipeline
  id: totrans-536
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Document Question Answering pipeline using any `AutoModelForDocumentQuestionAnswering`.
    The inputs/outputs are similar to the (extractive) question answering pipeline;
    however, the pipeline takes an image (and optional OCR’d words/boxes) as input
    instead of text context.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:** Answer questions about a document with `Xenova/donut-base-finetuned-docvqa`.'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '[.DocumentQuestionAnsweringPipeline](#module_pipelines.DocumentQuestionAnsweringPipeline)'
  id: totrans-541
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`new DocumentQuestionAnsweringPipeline(options)`](#new_module_pipelines.DocumentQuestionAnsweringPipeline_new)'
  id: totrans-542
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`._call()`](#module_pipelines.DocumentQuestionAnsweringPipeline+_call) : `DocumentQuestionAnsweringPipelineCallback`'
  id: totrans-543
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: new DocumentQuestionAnsweringPipeline(options)
  id: totrans-545
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create a new DocumentQuestionAnsweringPipeline.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-547
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-548
  prefs: []
  type: TYPE_TB
- en: '| options | `TextImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-549
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: 'documentQuestionAnsweringPipeline._call() : <code> DocumentQuestionAnsweringPipelineCallback
    </code>'
  id: totrans-551
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文档问答管道._call()： <code> DocumentQuestionAnsweringPipelineCallback </code>
- en: '**Kind**: instance method of [`DocumentQuestionAnsweringPipeline`](#module_pipelines.DocumentQuestionAnsweringPipeline)'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`DocumentQuestionAnsweringPipeline`](#module_pipelines.DocumentQuestionAnsweringPipeline)的实例方法'
- en: '* * *'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.TextToAudioPipeline
  id: totrans-554
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.TextToAudioPipeline
- en: Text-to-audio generation pipeline using any `AutoModelForTextToWaveform` or
    `AutoModelForTextToSpectrogram`. This pipeline generates an audio file from an
    input text and optional other conditional inputs.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何`AutoModelForTextToWaveform`或`AutoModelForTextToSpectrogram`的文本到音频生成管道。该管道从输入文本和可选的其他条件输入生成音频文件。
- en: '**Example:** Generate audio from text with `Xenova/speecht5_tts`.'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/speecht5_tts`从文本生成音频。'
- en: '[PRE42]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You can then save the audio to a .wav file with the `wavefile` package:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用`wavefile`包将音频保存为.wav文件：
- en: '[PRE43]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '**Example:** Multilingual speech generation with `Xenova/mms-tts-fra`. See
    [here](https://huggingface.co/models?pipeline_tag=text-to-speech&other=vits&sort=trending)
    for the full list of available languages (1107).'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/mms-tts-fra`进行多语言语音生成。查看[此处](https://huggingface.co/models?pipeline_tag=text-to-speech&other=vits&sort=trending)获取可用语言的完整列表（1107）。'
- en: '[PRE44]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.TextToAudioPipeline](#module_pipelines.TextToAudioPipeline)'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.TextToAudioPipeline](#module_pipelines.TextToAudioPipeline)'
- en: '[`new TextToAudioPipeline(options)`](#new_module_pipelines.TextToAudioPipeline_new)'
  id: totrans-564
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new TextToAudioPipeline(options)`](#new_module_pipelines.TextToAudioPipeline_new)'
- en: '[`._call()`](#module_pipelines.TextToAudioPipeline+_call) : `TextToAudioPipelineCallback`'
  id: totrans-565
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.TextToAudioPipeline+_call)：`TextToAudioPipelineCallback`'
- en: '* * *'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new TextToAudioPipeline(options)
  id: totrans-567
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new TextToAudioPipeline(options)
- en: Create a new TextToAudioPipeline.
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的TextToAudioPipeline。
- en: '| Param | Type | Description |'
  id: totrans-569
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-570
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `TextToAudioPipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-571
  prefs: []
  type: TYPE_TB
  zh: '| options | `TextToAudioPipelineConstructorArgs` | 用于实例化管道的对象。|'
- en: '* * *'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'textToAudioPipeline._call() : <code> TextToAudioPipelineCallback </code>'
  id: totrans-573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: textToAudioPipeline._call()： <code> TextToAudioPipelineCallback </code>
- en: '**Kind**: instance method of [`TextToAudioPipeline`](#module_pipelines.TextToAudioPipeline)'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`TextToAudioPipeline`](#module_pipelines.TextToAudioPipeline)的实例方法'
- en: '* * *'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.ImageToImagePipeline
  id: totrans-576
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.ImageToImagePipeline
- en: Image to Image pipeline using any `AutoModelForImageToImage`. This pipeline
    generates an image based on a previous image input.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何`AutoModelForImageToImage`的图像到图像管道。该管道基于先前的图像输入生成图像。
- en: '**Example:** Super-resolution w/ `Xenova/swin2SR-classical-sr-x2-64`'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/swin2SR-classical-sr-x2-64`进行超分辨率'
- en: '[PRE45]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.ImageToImagePipeline](#module_pipelines.ImageToImagePipeline)'
  id: totrans-581
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.ImageToImagePipeline](#module_pipelines.ImageToImagePipeline)'
- en: '[`new ImageToImagePipeline(options)`](#new_module_pipelines.ImageToImagePipeline_new)'
  id: totrans-582
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new ImageToImagePipeline(options)`](#new_module_pipelines.ImageToImagePipeline_new)'
- en: '[`._call()`](#module_pipelines.ImageToImagePipeline+_call) : `ImageToImagePipelineCallback`'
  id: totrans-583
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.ImageToImagePipeline+_call)：`ImageToImagePipelineCallback`'
- en: '* * *'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new ImageToImagePipeline(options)
  id: totrans-585
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new ImageToImagePipeline(options)
- en: Create a new ImageToImagePipeline.
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的ImageToImagePipeline。
- en: '| Param | Type | Description |'
  id: totrans-587
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-588
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `ImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-589
  prefs: []
  type: TYPE_TB
  zh: '| options | `ImagePipelineConstructorArgs` | 用于实例化管道的对象。|'
- en: '* * *'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'imageToImagePipeline._call() : <code> ImageToImagePipelineCallback </code>'
  id: totrans-591
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: imageToImagePipeline._call()： <code> ImageToImagePipelineCallback </code>
- en: '**Kind**: instance method of [`ImageToImagePipeline`](#module_pipelines.ImageToImagePipeline)'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`ImageToImagePipeline`](#module_pipelines.ImageToImagePipeline)的实例方法'
- en: '* * *'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.DepthEstimationPipeline
  id: totrans-594
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.DepthEstimationPipeline
- en: Depth estimation pipeline using any `AutoModelForDepthEstimation`. This pipeline
    predicts the depth of an image.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 使用任何`AutoModelForDepthEstimation`的深度估计管道。该管道预测图像的深度。
- en: '**Example:** Depth estimation w/ `Xenova/dpt-hybrid-midas`'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 使用`Xenova/dpt-hybrid-midas`进行深度估计'
- en: '[PRE46]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '**Kind**: static class of [`pipelines`](#module_pipelines)'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态类'
- en: '[.DepthEstimationPipeline](#module_pipelines.DepthEstimationPipeline)'
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[.DepthEstimationPipeline](#module_pipelines.DepthEstimationPipeline)'
- en: '[`new DepthEstimationPipeline(options)`](#new_module_pipelines.DepthEstimationPipeline_new)'
  id: totrans-600
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`new DepthEstimationPipeline(options)`](#new_module_pipelines.DepthEstimationPipeline_new)'
- en: '[`._call()`](#module_pipelines.DepthEstimationPipeline+_call) : `DepthEstimationPipelineCallback`'
  id: totrans-601
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`._call()`](#module_pipelines.DepthEstimationPipeline+_call)：`DepthEstimationPipelineCallback`'
- en: '* * *'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: new DepthEstimationPipeline(options)
  id: totrans-603
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: new DepthEstimationPipeline(options)
- en: Create a new DepthEstimationPipeline.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的DepthEstimationPipeline。
- en: '| Param | Type | Description |'
  id: totrans-605
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-606
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| options | `ImagePipelineConstructorArgs` | An object used to instantiate
    the pipeline. |'
  id: totrans-607
  prefs: []
  type: TYPE_TB
  zh: '| options | `ImagePipelineConstructorArgs` | 用于实例化管道的对象。|'
- en: '* * *'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'depthEstimationPipeline._call() : <code> DepthEstimationPipelineCallback </code>'
  id: totrans-609
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: depthEstimationPipeline._call()： <code> DepthEstimationPipelineCallback </code>
- en: '**Kind**: instance method of [`DepthEstimationPipeline`](#module_pipelines.DepthEstimationPipeline)'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`DepthEstimationPipeline`](#module_pipelines.DepthEstimationPipeline)的实例方法'
- en: '* * *'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines.pipeline(task, [model], [options]) ⇒ <code> * </code>
  id: totrans-612
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines.pipeline(task, [model], [options]) ⇒ <code> * </code>
- en: Utility factory method to build a `Pipeline` object.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 构建`Pipeline`对象的实用工厂方法。
- en: '**Kind**: static method of [`pipelines`](#module_pipelines)'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：[`pipelines`](#module_pipelines)的静态方法'
- en: '**Returns**: `*` - A Pipeline object for the specified task.'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`*` - 指定任务的Pipeline对象。'
- en: '**Throws**:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '**抛出**：'
- en: '`Error` If an unsupported pipeline is requested.'
  id: totrans-617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`错误`：如果请求了不受支持的管道。'
- en: '| Param | Type | Default | Description |'
  id: totrans-618
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 默认值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-619
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| task | `T` |  | The task defining which pipeline will be returned. Currently
    accepted tasks are:'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '| 任务 | `T` |  | 定义将返回哪个管道的任务。当前接受的任务是：'
- en: '`"audio-classification"`: will return a `AudioClassificationPipeline`.'
  id: totrans-621
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"audio-classification"`：将返回一个`AudioClassificationPipeline`。'
- en: '`"automatic-speech-recognition"`: will return a `AutomaticSpeechRecognitionPipeline`.'
  id: totrans-622
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"automatic-speech-recognition"`：将返回一个`AutomaticSpeechRecognitionPipeline`。'
- en: '`"depth-estimation"`: will return a `DepthEstimationPipeline`.'
  id: totrans-623
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"depth-estimation"`：将返回一个`DepthEstimationPipeline`。'
- en: '`"document-question-answering"`: will return a `DocumentQuestionAnsweringPipeline`.'
  id: totrans-624
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"document-question-answering"`：将返回一个`DocumentQuestionAnsweringPipeline`。'
- en: '`"feature-extraction"`: will return a `FeatureExtractionPipeline`.'
  id: totrans-625
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"feature-extraction"`：将返回一个`FeatureExtractionPipeline`。'
- en: '`"fill-mask"`: will return a `FillMaskPipeline`.'
  id: totrans-626
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"fill-mask"`：将返回一个`FillMaskPipeline`。'
- en: '`"image-classification"`: will return a `ImageClassificationPipeline`.'
  id: totrans-627
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"image-classification"`：将返回一个`ImageClassificationPipeline`。'
- en: '`"image-segmentation"`: will return a `ImageSegmentationPipeline`.'
  id: totrans-628
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"image-segmentation"`：将返回一个`ImageSegmentationPipeline`。'
- en: '`"image-to-text"`: will return a `ImageToTextPipeline`.'
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"image-to-text"`：将返回一个`ImageToTextPipeline`。'
- en: '`"object-detection"`: will return a `ObjectDetectionPipeline`.'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"object-detection"`：将返回一个`ObjectDetectionPipeline`。'
- en: '`"question-answering"`: will return a `QuestionAnsweringPipeline`.'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"question-answering"`：将返回一个`QuestionAnsweringPipeline`。'
- en: '`"summarization"`: will return a `SummarizationPipeline`.'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"summarization"`：将返回一个`SummarizationPipeline`。'
- en: '`"text2text-generation"`: will return a `Text2TextGenerationPipeline`.'
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"text2text-generation"`：将返回一个`Text2TextGenerationPipeline`。'
- en: '`"text-classification"` (alias "sentiment-analysis" available): will return
    a `TextClassificationPipeline`.'
  id: totrans-634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"text-classification"`（别名"sentiment-analysis"可用）：将返回一个`TextClassificationPipeline`。'
- en: '`"text-generation"`: will return a `TextGenerationPipeline`.'
  id: totrans-635
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"text-generation"`：将返回一个`TextGenerationPipeline`。'
- en: '`"token-classification"` (alias "ner" available): will return a `TokenClassificationPipeline`.'
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"token-classification"`（别名"ner"可用）：将返回一个`TokenClassificationPipeline`。'
- en: '`"translation"`: will return a `TranslationPipeline`.'
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"translation"`：将返回一个`TranslationPipeline`。'
- en: '`"translation_xx_to_yy"`: will return a `TranslationPipeline`.'
  id: totrans-638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"translation_xx_to_yy"`：将返回一个`TranslationPipeline`。'
- en: '`"zero-shot-classification"`: will return a `ZeroShotClassificationPipeline`.'
  id: totrans-639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"zero-shot-classification"`：将返回一个`ZeroShotClassificationPipeline`。'
- en: '`"zero-shot-audio-classification"`: will return a `ZeroShotAudioClassificationPipeline`.'
  id: totrans-640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"zero-shot-audio-classification"`：将返回一个`ZeroShotAudioClassificationPipeline`。'
- en: '`"zero-shot-image-classification"`: will return a `ZeroShotImageClassificationPipeline`.'
  id: totrans-641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"zero-shot-image-classification"`：将返回一个`ZeroShotImageClassificationPipeline`。'
- en: '`"zero-shot-object-detection"`: will return a `ZeroShotObjectDetectionPipeline`.'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"zero-shot-object-detection"`：将返回一个`ZeroShotObjectDetectionPipeline`。'
- en: '|'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [model] | `string` | `null` | The name of the pre-trained model to use. If
    not specified, the default model for the task will be used. |'
  id: totrans-644
  prefs: []
  type: TYPE_TB
  zh: '| [model] | `string` | `null` | 要使用的预训练模型的名称。如果未指定，将使用任务的默认模型。 |'
- en: '| [options] | `*` |  | Optional parameters for the pipeline. |'
  id: totrans-645
  prefs: []
  type: TYPE_TB
  zh: '| [options] | `*` |  | 管道的可选参数。 |'
- en: '* * *'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'pipelines~x[1] : <code> number </code>'
  id: totrans-647
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines~x[1]： <code> number </code>
- en: '**Kind**: inner property of [`pipelines`](#module_pipelines)'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部属性。'
- en: '* * *'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'pipelines~ImagePipelineInputs : <code> string </code> | <code> RawImage </code>
    | <code> URL </code>'
  id: totrans-650
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines~ImagePipelineInputs： <code> string </code> | <code> RawImage </code>
    | <code> URL </code>
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef。'
- en: '* * *'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'pipelines~AudioPipelineInputs : <code> string </code> | <code> URL </code>
    | <code> Float32Array </code> | <code> Float64Array </code>'
  id: totrans-653
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines~AudioPipelineInputs： <code> string </code> | <code> URL </code> |
    <code> Float32Array </code> | <code> Float64Array </code>
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef。'
- en: '* * *'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'pipelines~BoundingBox : <code> Object </code>'
  id: totrans-656
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines~BoundingBox： <code> Object </code>
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef。'
- en: '**Properties**'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Description |'
  id: totrans-659
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-660
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| xmin | `number` | The minimum x coordinate of the bounding box. |'
  id: totrans-661
  prefs: []
  type: TYPE_TB
  zh: '| xmin | `number` | 边界框的最小x坐标。 |'
- en: '| ymin | `number` | The minimum y coordinate of the bounding box. |'
  id: totrans-662
  prefs: []
  type: TYPE_TB
  zh: '| ymin | `number` | 边界框的最小y坐标。 |'
- en: '| xmax | `number` | The maximum x coordinate of the bounding box. |'
  id: totrans-663
  prefs: []
  type: TYPE_TB
  zh: '| xmax | `number` | 边界框的最大x坐标。 |'
- en: '| ymax | `number` | The maximum y coordinate of the bounding box. |'
  id: totrans-664
  prefs: []
  type: TYPE_TB
  zh: '| ymax | `number` | 边界框的最大y坐标。 |'
- en: '* * *'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines~Disposable ⇒ <code> Promise. < void > </code>
  id: totrans-666
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines~Disposable ⇒ <code> Promise. < void > </code>
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef。'
- en: '**Returns**: `Promise.<void>` - A promise that resolves when the item has been
    disposed.'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回值**：`Promise.<void>` - 一个在项目被处理后解决的Promise。'
- en: '**Properties**'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Description |'
  id: totrans-670
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-671
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| dispose | `DisposeType` | A promise that resolves when the pipeline has been
    disposed. |'
  id: totrans-672
  prefs: []
  type: TYPE_TB
  zh: '| dispose | `DisposeType` | 一个在管道被处理后解决的Promise。 |'
- en: '* * *'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'pipelines~TextPipelineConstructorArgs : <code> Object </code>'
  id: totrans-674
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines~TextPipelineConstructorArgs： <code> Object </code>
- en: An object used to instantiate a text-based pipeline.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 用于实例化基于文本的管道的对象。
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef。'
- en: '**Properties**'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Description |'
  id: totrans-678
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-679
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| task | `string` | The task of the pipeline. Useful for specifying subtasks.
    |'
  id: totrans-680
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | `string` | 管道的任务。用于指定子任务。'
- en: '| model | `PreTrainedModel` | The model used by the pipeline. |'
  id: totrans-681
  prefs: []
  type: TYPE_TB
  zh: '| model | `PreTrainedModel` | 管道使用的模型。 |'
- en: '| tokenizer | `PreTrainedTokenizer` | The tokenizer used by the pipeline. |'
  id: totrans-682
  prefs: []
  type: TYPE_TB
  zh: '| tokenizer | `PreTrainedTokenizer` | 管道使用的分词器。 |'
- en: '* * *'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'pipelines~ImagePipelineConstructorArgs : <code> Object </code>'
  id: totrans-684
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines~ImagePipelineConstructorArgs： <code> Object </code>
- en: An object used to instantiate an audio-based pipeline.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 用于实例化基于音频的管道的对象。
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef。'
- en: '**Properties**'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Description |'
  id: totrans-688
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-689
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| task | `string` | The task of the pipeline. Useful for specifying subtasks.
    |'
  id: totrans-690
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | `string` | 管道的任务。用于指定子任务。'
- en: '| model | `PreTrainedModel` | The model used by the pipeline. |'
  id: totrans-691
  prefs: []
  type: TYPE_TB
  zh: '| model | `PreTrainedModel` | 管道使用的模型。 |'
- en: '| processor | `Processor` | The processor used by the pipeline. |'
  id: totrans-692
  prefs: []
  type: TYPE_TB
  zh: '| processor | `Processor` | 管道使用的处理器。 |'
- en: '* * *'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'pipelines~TextImagePipelineConstructorArgs : <code> Object </code>'
  id: totrans-694
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines~TextImagePipelineConstructorArgs： <code> Object </code>
- en: An object used to instantiate a text- and audio-based pipeline.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 用于实例化文本和音频管道的对象。
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  id: totrans-698
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-699
  prefs: []
  type: TYPE_TB
- en: '| task | `string` | The task of the pipeline. Useful for specifying subtasks.
    |'
  id: totrans-700
  prefs: []
  type: TYPE_TB
- en: '| model | `PreTrainedModel` | The model used by the pipeline. |'
  id: totrans-701
  prefs: []
  type: TYPE_TB
- en: '| tokenizer | `PreTrainedTokenizer` | The tokenizer used by the pipeline. |'
  id: totrans-702
  prefs: []
  type: TYPE_TB
- en: '| processor | `Processor` | The processor used by the pipeline. |'
  id: totrans-703
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~TextClassificationPipelineType ⇒ <code> Promise. < (TextClassificationOutput|Array
    < TextClassificationOutput > ) > </code>
  id: totrans-705
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to text classification pipelines.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(TextClassificationOutput|Array<TextClassificationOutput>)>`
    - An array or object containing the predicted labels and scores.'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-709
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-710
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | The input text(s) to be classified.
    |'
  id: totrans-711
  prefs: []
  type: TYPE_TB
- en: '| [options] | `TextClassificationPipelineOptions` | The options to use for
    text classification. |'
  id: totrans-712
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  id: totrans-714
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-715
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label predicted. |'
  id: totrans-716
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The corresponding probability. |'
  id: totrans-717
  prefs: []
  type: TYPE_TB
- en: '| [topk] | `number` | `1` | The number of top predictions to be returned. |'
  id: totrans-718
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~TokenClassificationPipelineType ⇒ <code> Promise. < (TokenClassificationOutput|Array
    < TokenClassificationOutput > ) > </code>
  id: totrans-720
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to token classification pipelines.
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(TokenClassificationOutput|Array<TokenClassificationOutput>)>`
    - The result.'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-724
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-725
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | One or several texts (or one list
    of texts) for token classification. |'
  id: totrans-726
  prefs: []
  type: TYPE_TB
- en: '| [options] | `TokenClassificationPipelineOptions` | The options to use for
    token classification. |'
  id: totrans-727
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  id: totrans-729
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-730
  prefs: []
  type: TYPE_TB
- en: '| word | `string` | The token/word classified. This is obtained by decoding
    the selected tokens. |'
  id: totrans-731
  prefs: []
  type: TYPE_TB
- en: '| score | `number` | The corresponding probability for `entity`. |'
  id: totrans-732
  prefs: []
  type: TYPE_TB
- en: '| entity | `string` | The entity predicted for that token/word. |'
  id: totrans-733
  prefs: []
  type: TYPE_TB
- en: '| index | `number` | The index of the corresponding token in the sentence.
    |'
  id: totrans-734
  prefs: []
  type: TYPE_TB
- en: '| [start] | `number` | The index of the start of the corresponding entity in
    the sentence. |'
  id: totrans-735
  prefs: []
  type: TYPE_TB
- en: '| [end] | `number` | The index of the end of the corresponding entity in the
    sentence. |'
  id: totrans-736
  prefs: []
  type: TYPE_TB
- en: '| [ignore_labels] | `Array.<string>` | A list of labels to ignore. |'
  id: totrans-737
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~QuestionAnsweringPipelineType ⇒ <code> Promise. < (QuestionAnsweringOutput|Array
    < QuestionAnsweringOutput > ) > </code>
  id: totrans-739
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to question answering pipelines.
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(QuestionAnsweringOutput|Array<QuestionAnsweringOutput>)>`
    - An array or object containing the predicted answers and scores.'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-743
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-744
  prefs: []
  type: TYPE_TB
- en: '| question | `string` &#124; `Array<string>` | One or several question(s) (must
    be used in conjunction with the `context` argument). |'
  id: totrans-745
  prefs: []
  type: TYPE_TB
- en: '| context | `string` &#124; `Array<string>` | One or several context(s) associated
    with the question(s) (must be used in conjunction with the `question` argument).
    |'
  id: totrans-746
  prefs: []
  type: TYPE_TB
- en: '| [options] | `QuestionAnsweringPipelineOptions` | The options to use for question
    answering. |'
  id: totrans-747
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  id: totrans-749
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-750
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The probability associated to the answer. |'
  id: totrans-751
  prefs: []
  type: TYPE_TB
- en: '| [start] | `number` |  | The character start index of the answer (in the tokenized
    version of the input). |'
  id: totrans-752
  prefs: []
  type: TYPE_TB
- en: '| [end] | `number` |  | The character end index of the answer (in the tokenized
    version of the input). |'
  id: totrans-753
  prefs: []
  type: TYPE_TB
- en: '| answer | `string` |  | The answer to the question. |'
  id: totrans-754
  prefs: []
  type: TYPE_TB
- en: '| [topk] | `number` | `1` | The number of top answer predictions to be returned.
    |'
  id: totrans-755
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~FillMaskPipelineType ⇒ <code> Promise. < (FillMaskOutput|Array < FillMaskOutput
    > ) > </code>
  id: totrans-757
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道~FillMaskPipelineType ⇒ <code> Promise. < (FillMaskOutput|Array < FillMaskOutput
    > ) > </code>
- en: Parameters specific to fill mask pipelines.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于填充掩码管道的参数。
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef'
- en: '**Returns**: `Promise.<(FillMaskOutput|Array<FillMaskOutput>)>` - An array
    of objects containing the score, predicted token, predicted token string, and
    the sequence with the predicted token filled in, or an array of such arrays (one
    for each input text). If only one input text is given, the output will be an array
    of objects.'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`Promise.<(FillMaskOutput|Array<FillMaskOutput>)>` - 包含得分、预测标记、预测标记字符串以及带有预测标记填充的序列的对象数组，或这样的数组（每个输入文本一个）。如果只提供一个输入文本，则输出将是一个对象数组。'
- en: '**Throws**:'
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: '**抛出**：'
- en: '`Error` When the mask token is not found in the input text.'
  id: totrans-762
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`错误` 当在输入文本中找不到掩码标记时。'
- en: '| Param | Type | Description |'
  id: totrans-763
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-764
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| texts | `string` &#124; `Array<string>` | One or several texts (or one list
    of prompts) with masked tokens. |'
  id: totrans-765
  prefs: []
  type: TYPE_TB
  zh: '| texts | `string` &#124; `Array<string>` | 一个或多个带有掩码标记的文本（或一个提示列表）。 |'
- en: '| [options] | `FillMaskPipelineOptions` | The options to use for masked language
    modelling. |'
  id: totrans-766
  prefs: []
  type: TYPE_TB
  zh: '| [options] | `FillMaskPipelineOptions` | 用于掩码语言建模的选项。 |'
- en: '**Properties**'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Default | Description |'
  id: totrans-768
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 默认值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-769
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| sequence | `string` |  | The corresponding input with the mask token prediction.
    |'
  id: totrans-770
  prefs: []
  type: TYPE_TB
  zh: '| sequence | `string` |  | 带有掩码标记预测的相应输入。 |'
- en: '| score | `number` |  | The corresponding probability. |'
  id: totrans-771
  prefs: []
  type: TYPE_TB
  zh: '| score | `number` |  | 相应的概率。 |'
- en: '| token | `number` |  | The predicted token id (to replace the masked one).
    |'
  id: totrans-772
  prefs: []
  type: TYPE_TB
  zh: '| token | `number` |  | 预测的标记id（用于替换掩码标记）。 |'
- en: '| token_str | `string` |  | The predicted token (to replace the masked one).
    |'
  id: totrans-773
  prefs: []
  type: TYPE_TB
  zh: '| token_str | `string` |  | 预测的标记（用于替换掩码标记）。 |'
- en: '| [topk] | `number` | `5` | When passed, overrides the number of predictions
    to return. |'
  id: totrans-774
  prefs: []
  type: TYPE_TB
  zh: '| [topk] | `number` | `5` | 当传递时，覆盖要返回的预测数量。 |'
- en: '* * *'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines~Text2TextGenerationPipelineType ⇒ <code> Promise. < (Text2TextGenerationOutput|Array
    < Text2TextGenerationOutput > ) > </code>
  id: totrans-776
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道~Text2TextGenerationPipelineType ⇒ <code> Promise. < (Text2TextGenerationOutput|Array
    < Text2TextGenerationOutput > ) > </code>
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef'
- en: '| Param | Type | Description |'
  id: totrans-778
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-779
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| texts | `string` &#124; `Array<string>` | Input text for the encoder. |'
  id: totrans-780
  prefs: []
  type: TYPE_TB
  zh: '| texts | `string` &#124; `Array<string>` | 编码器的输入文本。 |'
- en: '| [options] | `*` | Additional keyword arguments to pass along to the generate
    method of the model. |'
  id: totrans-781
  prefs: []
  type: TYPE_TB
  zh: '| [options] | `*` | 传递给模型的generate方法的额外关键字参数。 |'
- en: '**Properties**'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Description |'
  id: totrans-783
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-784
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| generated_text | `string` | The generated text. |'
  id: totrans-785
  prefs: []
  type: TYPE_TB
  zh: '| generated_text | `string` | 生成的文本。 |'
- en: '* * *'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines~SummarizationPipelineType ⇒ <code> Promise. < (SummarizationOutput|Array
    < SummarizationOutput > ) > </code>
  id: totrans-787
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道~SummarizationPipelineType ⇒ <code> Promise. < (SummarizationOutput|Array
    < SummarizationOutput > ) > </code>
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef'
- en: '| Param | Type | Description |'
  id: totrans-789
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-790
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| texts | `string` &#124; `Array<string>` | One or several articles (or one
    list of articles) to summarize. |'
  id: totrans-791
  prefs: []
  type: TYPE_TB
  zh: '| texts | `string` &#124; `Array<string>` | 一个或多个文章（或一个文章列表）要总结。 |'
- en: '| [options] | `*` | Additional keyword arguments to pass along to the generate
    method of the model. |'
  id: totrans-792
  prefs: []
  type: TYPE_TB
  zh: '| [options] | `*` | 传递给模型的generate方法的额外关键字参数。 |'
- en: '**Properties**'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Description |'
  id: totrans-794
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-795
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| summary_text | `string` | The summary text. |'
  id: totrans-796
  prefs: []
  type: TYPE_TB
  zh: '| summary_text | `string` | 摘要文本。 |'
- en: '* * *'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines~TranslationPipelineType ⇒ <code> Promise. < (TranslationOutput|Array
    < TranslationOutput > ) > </code>
  id: totrans-798
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道~TranslationPipelineType ⇒ <code> Promise. < (TranslationOutput|Array < TranslationOutput
    > ) > </code>
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef'
- en: '| Param | Type | Description |'
  id: totrans-800
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-801
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| texts | `string` &#124; `Array<string>` | Texts to be translated. |'
  id: totrans-802
  prefs: []
  type: TYPE_TB
  zh: '| texts | `string` &#124; `Array<string>` | 要翻译的文本。 |'
- en: '| [options] | `*` | Additional keyword arguments to pass along to the generate
    method of the model. |'
  id: totrans-803
  prefs: []
  type: TYPE_TB
  zh: '| [options] | `*` | 传递给模型的generate方法的额外关键字参数。 |'
- en: '**Properties**'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Description |'
  id: totrans-805
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-806
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| translation_text | `string` | The translated text. |'
  id: totrans-807
  prefs: []
  type: TYPE_TB
  zh: '| translation_text | `string` | 翻译后的文本。 |'
- en: '* * *'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines~TextGenerationPipelineType ⇒ <code> Promise. < (TextGenerationOutput|Array
    < TextGenerationOutput > ) > </code>
  id: totrans-809
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道~TextGenerationPipelineType ⇒ <code> Promise. < (TextGenerationOutput|Array
    < TextGenerationOutput > ) > </code>
- en: Parameters specific to text-generation pipelines.
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于文本生成管道的参数。
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：[`pipelines`](#module_pipelines)的内部typedef'
- en: '**Returns**: `Promise.<(TextGenerationOutput|Array<TextGenerationOutput>)>`
    - An array or object containing the generated texts.'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**：`Promise.<(TextGenerationOutput|Array<TextGenerationOutput>)>` - 包含生成文本的数组或对象。'
- en: '| Param | Type | Description |'
  id: totrans-813
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-814
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| texts | `string` &#124; `Array<string>` | One or several prompts (or one
    list of prompts) to complete. |'
  id: totrans-815
  prefs: []
  type: TYPE_TB
  zh: '| texts | `string` &#124; `Array<string>` | 一个或多个提示（或一个提示列表）以完成。 |'
- en: '| [options] | `TextGenerationConfig` | Additional keyword arguments to pass
    along to the generate method of the model. |'
  id: totrans-816
  prefs: []
  type: TYPE_TB
  zh: '| [options] | `TextGenerationConfig` | 传递给模型的generate方法的额外关键字参数。 |'
- en: '**Properties**'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Description |'
  id: totrans-818
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-819
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| generated_text | `string` | The generated text. |'
  id: totrans-820
  prefs: []
  type: TYPE_TB
  zh: '| generated_text | `string` | 生成的文本。 |'
- en: '| [add_special_tokens] | `boolean` | Whether or not to add special tokens when
    tokenizing the sequences. |'
  id: totrans-821
  prefs: []
  type: TYPE_TB
  zh: '| [add_special_tokens] | `boolean` | 在对序列进行标记化时是否添加特殊标记。 |'
- en: '* * *'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines~ZeroShotClassificationPipelineType ⇒ <code> Promise. < (ZeroShotClassificationOutput|Array
    < ZeroShotClassificationOutput > ) > </code>
  id: totrans-823
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道~ZeroShotClassificationPipelineType ⇒ <code> Promise. < (ZeroShotClassificationOutput|Array
    < ZeroShotClassificationOutput > ) > </code>
- en: Parameters specific to zero-shot classification pipelines.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于零样本分类管道的参数。
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**: [`pipelines`](#module_pipelines) 的内部类型'
- en: '**Returns**: `Promise.<(ZeroShotClassificationOutput|Array<ZeroShotClassificationOutput>)>`
    - An array or object containing the predicted labels and scores.'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**: `Promise.<(零样本分类输出|Array<零样本分类输出>)>` - 包含预测标签和分数的数组或对象。'
- en: '| Param | Type | Description |'
  id: totrans-827
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-828
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| texts | `string` &#124; `Array<string>` | The sequence(s) to classify, will
    be truncated if the model input is too large. |'
  id: totrans-829
  prefs: []
  type: TYPE_TB
  zh: '| 文本 | `字符串` &#124; `Array<string>` | 要分类的序列，如果模型输入过大将被截断。 |'
- en: '| candidate_labels | `string` &#124; `Array<string>` | The set of possible
    class labels to classify each sequence into. Can be a single label, a string of
    comma-separated labels, or a list of labels. |'
  id: totrans-830
  prefs: []
  type: TYPE_TB
  zh: '| 候选标签 | `字符串` &#124; `Array<string>` | 将每个序列分类到的可能类标签集。可以是单个标签、逗号分隔的标签字符串或标签列表。
    |'
- en: '| [options] | `ZeroShotClassificationPipelineOptions` | The options to use
    for zero-shot classification. |'
  id: totrans-831
  prefs: []
  type: TYPE_TB
  zh: '| [选项] | `零样本分类管道选项` | 用于零样本分类的选项。 |'
- en: '**Properties**'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Default | Description |'
  id: totrans-833
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 默认值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-834
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| sequence | `string` |  | The sequence for which this is the output. |'
  id: totrans-835
  prefs: []
  type: TYPE_TB
  zh: '| 序列 | `字符串` |  | 输出所属的序列。 |'
- en: '| labels | `Array.<string>` |  | The labels sorted by order of likelihood.
    |'
  id: totrans-836
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | `Array.<字符串>` |  | 按可能性顺序排序的标签。 |'
- en: '| scores | `Array.<number>` |  | The probabilities for each of the labels.
    |'
  id: totrans-837
  prefs: []
  type: TYPE_TB
  zh: '| 分数 | `Array.<数字>` |  | 每个标签的概率。 |'
- en: '| [hypothesis_template] | `string` | `""This example is {}.""` | The template
    used to turn each candidate label into an NLI-style hypothesis. The candidate
    label will replace the &#123;} placeholder. |'
  id: totrans-838
  prefs: []
  type: TYPE_TB
  zh: '| [假设模板] | `字符串` | `""这个例子是{}。""` | 用于将每个候选标签转换为 NLI 风格假设的模板。候选标签将替换 `{}` 占位符。
    |'
- en: '| [multi_label] | `boolean` | `false` | Whether or not multiple candidate labels
    can be true. If `false`, the scores are normalized such that the sum of the label
    likelihoods for each sequence is 1\. If `true`, the labels are considered independent
    and probabilities are normalized for each candidate by doing a softmax of the
    entailment score vs. the contradiction score. |'
  id: totrans-839
  prefs: []
  type: TYPE_TB
  zh: '| [多标签] | `布尔值` | `false` | 是否可以有多个候选标签为真。如果为 `false`，则对每个序列的标签可能性之和进行归一化为
    1。如果为 `true`，则认为标签是独立的，并通过对蕴涵分数与矛盾分数进行 softmax，为每个候选标签进行概率归一化。 |'
- en: '* * *'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines~FeatureExtractionPipelineType ⇒ <code> Promise. < Tensor > </code>
  id: totrans-841
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines~FeatureExtractionPipelineType ⇒ <code> Promise. < 张量 > </code>
- en: Parameters specific to feature extraction pipelines.
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于特征提取管道的参数。
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**: [`pipelines`](#module_pipelines) 的内部类型'
- en: '**Returns**: `Promise.<Tensor>` - The features computed by the model.'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**: `Promise.<张量>` - 模型计算的特征。'
- en: '| Param | Type | Description |'
  id: totrans-845
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-846
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| texts | `string` &#124; `Array<string>` | One or several texts (or one list
    of texts) to get the features of. |'
  id: totrans-847
  prefs: []
  type: TYPE_TB
  zh: '| 文本 | `字符串` &#124; `Array<string>` | 一个或多个文本（或一个文本列表）以获取特征。 |'
- en: '| [options] | `FeatureExtractionPipelineOptions` | The options to use for feature
    extraction. |'
  id: totrans-848
  prefs: []
  type: TYPE_TB
  zh: '| [选项] | `特征提取管道选项` | 用于特征提取的选项。 |'
- en: '**Properties**'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Default | Description |'
  id: totrans-850
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 默认值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-851
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| [pooling] | `''none''` &#124; `''mean''` &#124; `''cls''` | `"none"` | The
    pooling method to use. |'
  id: totrans-852
  prefs: []
  type: TYPE_TB
  zh: '| [池化] | `''none''` &#124; `''mean''` &#124; `''cls''` | `"none"` | 要使用的池化方法。
    |'
- en: '| [normalize] | `boolean` | `false` | Whether or not to normalize the embeddings
    in the last dimension. |'
  id: totrans-853
  prefs: []
  type: TYPE_TB
  zh: '| [归一化] | `布尔值` | `false` | 是否对最后一维的嵌入进行归一化。 |'
- en: '* * *'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: pipelines~AudioClassificationPipelineType ⇒ <code> Promise. < (AudioClassificationOutput|Array
    < AudioClassificationOutput > ) > </code>
  id: totrans-855
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pipelines~AudioClassificationPipelineType ⇒ <code> Promise. < (音频分类输出|Array
    < 音频分类输出 > ) > </code>
- en: Parameters specific to audio classification pipelines.
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于音频分类管道的参数。
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**: [`pipelines`](#module_pipelines) 的内部类型'
- en: '**Returns**: `Promise.<(AudioClassificationOutput|Array<AudioClassificationOutput>)>`
    - An array or object containing the predicted labels and scores.'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '**返回**: `Promise.<(音频分类输出|Array<音频分类输出>)>` - 包含预测标签和分数的数组或对象。'
- en: '| Param | Type | Description |'
  id: totrans-859
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 类型 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-860
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| audio | `AudioPipelineInputs` | The input audio file(s) to be classified.
    The input is either:'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '| 音频 | `音频管道输入` | 要分类的输入音频文件。输入可以是：'
- en: '`string` or `URL` that is the filename/URL of the audio file, the file will
    be read at the processor''s sampling rate to get the waveform using the [`AudioContext`](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)
    API. If `AudioContext` is not available, you should pass the raw waveform in as
    a Float32Array of shape `(n, )`.'
  id: totrans-862
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`字符串` 或 `URL`，是音频文件的文件名/URL，文件将以处理器的采样率读取，使用 [`AudioContext`](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)
    API 获取波形。如果 `AudioContext` 不可用，应将原始波形作为形状为 `(n, )` 的 `Float32Array` 传递。'
- en: '`Float32Array` or `Float64Array` of shape `(n, )`, representing the raw audio
    at the correct sampling rate (no further check will be done).'
  id: totrans-863
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Float32Array` 或 `Float64Array`，形状为 `(n, )`，表示正确采样率下的原始音频（不会进行进一步检查）。'
- en: '|'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| [options] | `AudioClassificationPipelineOptions` | The options to use for
    audio classification. |'
  id: totrans-865
  prefs: []
  type: TYPE_TB
  zh: '| [选项] | `音频分类管道选项` | 用于音频分类的选项。 |'
- en: '**Properties**'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '| Name | Type | Default | Description |'
  id: totrans-867
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 类型 | 默认值 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-868
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| label | `string` |  | The label predicted. |'
  id: totrans-869
  prefs: []
  type: TYPE_TB
  zh: '| 标签 | `字符串` |  | 预测的标签。 |'
- en: '| score | `number` |  | The corresponding probability. |'
  id: totrans-870
  prefs: []
  type: TYPE_TB
  zh: '| 分数 | `数字` |  | 相应的概率。 |'
- en: '| [topk] | `number` |  | The number of top labels that will be returned by
    the pipeline. If the provided number is `null` or higher than the number of labels
    available in the model configuration, it will default to the number of labels.
    |'
  id: totrans-871
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-872
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ZeroShotAudioClassificationPipelineType ⇒ <code> Promise. < (Array
    < ZeroShotAudioClassificationOutput > |Array < Array < ZeroShotAudioClassificationOutput
    > > ) > </code>
  id: totrans-873
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to zero-shot audio classification pipelines.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(Array<ZeroShotAudioClassificationOutput>|Array<Array<ZeroShotAudioClassificationOutput>>)>`
    - An array of objects containing the predicted labels and scores.'
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-877
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-878
  prefs: []
  type: TYPE_TB
- en: '| audio | `AudioPipelineInputs` | The input audio file(s) to be classified.
    The input is either:'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: '`string` or `URL` that is the filename/URL of the audio file, the file will
    be read at the processor''s sampling rate to get the waveform using the [`AudioContext`](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)
    API. If `AudioContext` is not available, you should pass the raw waveform in as
    a Float32Array of shape `(n, )`.'
  id: totrans-880
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float32Array` or `Float64Array` of shape `(n, )`, representing the raw audio
    at the correct sampling rate (no further check will be done).'
  id: totrans-881
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
- en: '| candidate_labels | `Array.<string>` | The candidate labels for this audio.
    |'
  id: totrans-883
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ZeroShotAudioClassificationPipelineOptions` | The options to
    use for zero-shot audio classification. |'
  id: totrans-884
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  id: totrans-886
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-887
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label identified by the model. It is one of the
    suggested `candidate_label`. |'
  id: totrans-888
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The score attributed by the model for that label (between
    0 and 1). |'
  id: totrans-889
  prefs: []
  type: TYPE_TB
- en: '| [hypothesis_template] | `string` | `""This is a sound of {}.""` | The sentence
    used in conjunction with `candidate_labels` to attempt the audio classification
    by replacing the placeholder with the candidate_labels. Then likelihood is estimated
    by using `logits_per_audio`. |'
  id: totrans-890
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~ChunkCallback : <code> function </code>'
  id: totrans-892
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-894
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-895
  prefs: []
  type: TYPE_TB
- en: '| chunk | `ChunkCallbackItem` | The chunk to process. |'
  id: totrans-896
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~Chunk : <code> Object </code>'
  id: totrans-898
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  id: totrans-901
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-902
  prefs: []
  type: TYPE_TB
- en: '| timestamp | `*` | The start and end timestamp of the chunk in seconds. |'
  id: totrans-903
  prefs: []
  type: TYPE_TB
- en: '| text | `string` | The recognized text. |'
  id: totrans-904
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~AutomaticSpeechRecognitionPipelineType ⇒ <code> Promise. < (AutomaticSpeechRecognitionOutput|Array
    < AutomaticSpeechRecognitionOutput > ) > </code>
  id: totrans-906
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to automatic-speech-recognition pipelines.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-908
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(AutomaticSpeechRecognitionOutput|Array<AutomaticSpeechRecognitionOutput>)>`
    - An object containing the transcription text and optionally timestamps if `return_timestamps`
    is `true`.'
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-910
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-911
  prefs: []
  type: TYPE_TB
- en: '| audio | `AudioPipelineInputs` | The input audio file(s) to be transcribed.
    The input is either:'
  id: totrans-912
  prefs: []
  type: TYPE_NORMAL
- en: '`string` or `URL` that is the filename/URL of the audio file, the file will
    be read at the processor''s sampling rate to get the waveform using the [`AudioContext`](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext)
    API. If `AudioContext` is not available, you should pass the raw waveform in as
    a Float32Array of shape `(n, )`.'
  id: totrans-913
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Float32Array` or `Float64Array` of shape `(n, )`, representing the raw audio
    at the correct sampling rate (no further check will be done).'
  id: totrans-914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
- en: '| [options] | `AutomaticSpeechRecognitionConfig` | Additional keyword arguments
    to pass along to the generate method of the model. |'
  id: totrans-916
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-917
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  id: totrans-918
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-919
  prefs: []
  type: TYPE_TB
- en: '| text | `string` | The recognized text. |'
  id: totrans-920
  prefs: []
  type: TYPE_TB
- en: '| [chunks] | `Array.<Chunk>` | When using `return_timestamps`, the `chunks`
    will become a list containing all the various text chunks identified by the model.
    |'
  id: totrans-921
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.return_timestamps] | `boolean` &#124; `''word''` | Whether to return
    timestamps or not. Default is `false`. |'
  id: totrans-922
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.chunk_length_s] | `number` | The length of audio chunks to process
    in seconds. Default is 0 (no chunking). |'
  id: totrans-923
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.stride_length_s] | `number` | The length of overlap between consecutive
    audio chunks in seconds. If not provided, defaults to `chunk_length_s / 6`. |'
  id: totrans-924
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.chunk_callback] | `ChunkCallback` | Callback function to be called
    with each chunk processed. |'
  id: totrans-925
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.force_full_sequences] | `boolean` | Whether to force outputting full
    sequences or not. Default is `false`. |'
  id: totrans-926
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.language] | `string` | The source language. Default is `null`, meaning
    it should be auto-detected. Use this to potentially improve performance if the
    source language is known. |'
  id: totrans-927
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.task] | `string` | The task to perform. Default is `null`, meaning
    it should be auto-detected. |'
  id: totrans-928
  prefs: []
  type: TYPE_TB
- en: '| [kwargs.forced_decoder_ids] | `Array.<Array<number>>` | A list of pairs of
    integers which indicates a mapping from generation indices to token indices that
    will be forced before sampling. For example, [[1, 123]] means the second generated
    token will always be a token of index 123. |'
  id: totrans-929
  prefs: []
  type: TYPE_TB
- en: '| [num_frames] | `number` | The number of frames in the input audio. |'
  id: totrans-930
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-931
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ImageToTextPipelineType ⇒ <code> Promise. < (ImageToTextOutput|Array
    < ImageToTextOutput > ) > </code>
  id: totrans-932
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-933
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(ImageToTextOutput|Array<ImageToTextOutput>)>` - An
    object (or array of objects) containing the generated text(s).'
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-935
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-936
  prefs: []
  type: TYPE_TB
- en: '| texts | `ImagePipelineInputs` | The images to be captioned. |'
  id: totrans-937
  prefs: []
  type: TYPE_TB
- en: '| [options] | `*` | Additional keyword arguments to pass along to the generate
    method of the model. |'
  id: totrans-938
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  id: totrans-940
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-941
  prefs: []
  type: TYPE_TB
- en: '| generated_text | `string` | The generated text. |'
  id: totrans-942
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ImageClassificationPipelineType ⇒ <code> Promise. < (ImageClassificationOutput|Array
    < ImageClassificationOutput > ) > </code>
  id: totrans-944
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to image classification pipelines.
  id: totrans-945
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(ImageClassificationOutput|Array<ImageClassificationOutput>)>`
    - An array or object containing the predicted labels and scores.'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-948
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-949
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The input images(s) to be classified. |'
  id: totrans-950
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ImageClassificationPipelineOptions` | The options to use for
    image classification. |'
  id: totrans-951
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  id: totrans-953
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-954
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label identified by the model. |'
  id: totrans-955
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The score attributed by the model for that label. |'
  id: totrans-956
  prefs: []
  type: TYPE_TB
- en: '| [topk] | `number` | `1` | The number of top labels that will be returned
    by the pipeline. |'
  id: totrans-957
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-958
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ImageSegmentationPipelineType ⇒ <code> Promise. < Array < ImageSegmentationPipelineOutput
    > > </code>
  id: totrans-959
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to image segmentation pipelines.
  id: totrans-960
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-961
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<Array<ImageSegmentationPipelineOutput>>` - The annotated
    segments.'
  id: totrans-962
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-963
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-964
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The input images. |'
  id: totrans-965
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ImageSegmentationPipelineOptions` | The options to use for image
    segmentation. |'
  id: totrans-966
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-967
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  id: totrans-968
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-969
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label of the segment. |'
  id: totrans-970
  prefs: []
  type: TYPE_TB
- en: '| score | `number` &#124; `null` |  | The score of the segment. |'
  id: totrans-971
  prefs: []
  type: TYPE_TB
- en: '| mask | `RawImage` |  | The mask of the segment. |'
  id: totrans-972
  prefs: []
  type: TYPE_TB
- en: '| [threshold] | `number` | `0.5` | Probability threshold to filter out predicted
    masks. |'
  id: totrans-973
  prefs: []
  type: TYPE_TB
- en: '| [mask_threshold] | `number` | `0.5` | Threshold to use when turning the predicted
    masks into binary values. |'
  id: totrans-974
  prefs: []
  type: TYPE_TB
- en: '| [overlap_mask_area_threshold] | `number` | `0.8` | Mask overlap threshold
    to eliminate small, disconnected segments. |'
  id: totrans-975
  prefs: []
  type: TYPE_TB
- en: '| [subtask] | `null` &#124; `string` |  | Segmentation task to be performed.
    One of [`panoptic`, `instance`, and `semantic`], depending on model capabilities.
    If not set, the pipeline will attempt to resolve (in that order). |'
  id: totrans-976
  prefs: []
  type: TYPE_TB
- en: '| [label_ids_to_fuse] | `Array.<number>` |  | List of label ids to fuse. If
    not set, do not fuse any labels. |'
  id: totrans-977
  prefs: []
  type: TYPE_TB
- en: '| [target_sizes] | `Array.<Array<number>>` |  | List of target sizes for the
    input images. If not set, use the original image sizes. |'
  id: totrans-978
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-979
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ZeroShotImageClassificationPipelineType ⇒ <code> Promise. < (Array
    < ZeroShotImageClassificationOutput > |Array < Array < ZeroShotImageClassificationOutput
    > > ) > </code>
  id: totrans-980
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to zero-shot image classification pipelines.
  id: totrans-981
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-982
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(Array<ZeroShotImageClassificationOutput>|Array<Array<ZeroShotImageClassificationOutput>>)>`
    - An array of objects containing the predicted labels and scores.'
  id: totrans-983
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-984
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-985
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The input images. |'
  id: totrans-986
  prefs: []
  type: TYPE_TB
- en: '| candidate_labels | `Array.<string>` | The candidate labels for this image.
    |'
  id: totrans-987
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ZeroShotImageClassificationPipelineOptions` | The options to
    use for zero-shot image classification. |'
  id: totrans-988
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-989
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  id: totrans-990
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-991
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The label identified by the model. It is one of the
    suggested `candidate_label`. |'
  id: totrans-992
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The score attributed by the model for that label (between
    0 and 1). |'
  id: totrans-993
  prefs: []
  type: TYPE_TB
- en: '| [hypothesis_template] | `string` | `""This is a photo of {}""` | The sentence
    used in conjunction with `candidate_labels` to attempt the image classification
    by replacing the placeholder with the candidate_labels. Then likelihood is estimated
    by using `logits_per_image`. |'
  id: totrans-994
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-995
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ObjectDetectionPipelineType ⇒ <code> Promise. < (ObjectDetectionPipelineOutput|Array
    < ObjectDetectionPipelineOutput > ) > </code>
  id: totrans-996
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to object detection pipelines.
  id: totrans-997
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-998
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(ObjectDetectionPipelineOutput|Array<ObjectDetectionPipelineOutput>)>`
    - A list of objects or a list of list of objects.'
  id: totrans-999
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-1000
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-1001
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The input images. |'
  id: totrans-1002
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ObjectDetectionPipelineOptions` | The options to use for object
    detection. |'
  id: totrans-1003
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-1004
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  id: totrans-1005
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-1006
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | The class label identified by the model. |'
  id: totrans-1007
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | The score attributed by the model for that label. |'
  id: totrans-1008
  prefs: []
  type: TYPE_TB
- en: '| box | `BoundingBox` |  | The bounding box of detected object in image''s
    original size, or as a percentage if `percentage` is set to true. |'
  id: totrans-1009
  prefs: []
  type: TYPE_TB
- en: '| [threshold] | `number` | `0.9` | The threshold used to filter boxes by score.
    |'
  id: totrans-1010
  prefs: []
  type: TYPE_TB
- en: '| [percentage] | `boolean` | `false` | Whether to return the boxes coordinates
    in percentage (true) or in pixels (false). |'
  id: totrans-1011
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-1012
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ZeroShotObjectDetectionPipelineType ⇒ <code> Promise. < (Array < ZeroShotObjectDetectionOutput
    > |Array < Array < ZeroShotObjectDetectionOutput > > ) > </code>
  id: totrans-1013
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to zero-shot object detection pipelines.
  id: totrans-1014
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(Array<ZeroShotObjectDetectionOutput>|Array<Array<ZeroShotObjectDetectionOutput>>)>`
    - An array of objects containing the predicted labels, scores, and bounding boxes.'
  id: totrans-1016
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-1017
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-1018
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The input images. |'
  id: totrans-1019
  prefs: []
  type: TYPE_TB
- en: '| candidate_labels | `Array.<string>` | What the model should recognize in
    the image. |'
  id: totrans-1020
  prefs: []
  type: TYPE_TB
- en: '| [options] | `ZeroShotObjectDetectionPipelineOptions` | The options to use
    for zero-shot object detection. |'
  id: totrans-1021
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-1022
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  id: totrans-1023
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-1024
  prefs: []
  type: TYPE_TB
- en: '| label | `string` |  | Text query corresponding to the found object. |'
  id: totrans-1025
  prefs: []
  type: TYPE_TB
- en: '| score | `number` |  | Score corresponding to the object (between 0 and 1).
    |'
  id: totrans-1026
  prefs: []
  type: TYPE_TB
- en: '| box | `BoundingBox` |  | Bounding box of the detected object in image''s
    original size, or as a percentage if `percentage` is set to true. |'
  id: totrans-1027
  prefs: []
  type: TYPE_TB
- en: '| [threshold] | `number` | `0.1` | The probability necessary to make a prediction.
    |'
  id: totrans-1028
  prefs: []
  type: TYPE_TB
- en: '| [topk] | `number` |  | The number of top predictions that will be returned
    by the pipeline. If the provided number is `null` or higher than the number of
    predictions available, it will default to the number of predictions. |'
  id: totrans-1029
  prefs: []
  type: TYPE_TB
- en: '| [percentage] | `boolean` | `false` | Whether to return the boxes coordinates
    in percentage (true) or in pixels (false). |'
  id: totrans-1030
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-1031
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~DocumentQuestionAnsweringPipelineType ⇒ <code> Promise. < (DocumentQuestionAnsweringOutput|Array
    < DocumentQuestionAnsweringOutput > ) > </code>
  id: totrans-1032
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-1033
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(DocumentQuestionAnsweringOutput|Array<DocumentQuestionAnsweringOutput>)>`
    - An object (or array of objects) containing the answer(s).'
  id: totrans-1034
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-1035
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-1036
  prefs: []
  type: TYPE_TB
- en: '| image | `ImageInput` | The image of the document to use. |'
  id: totrans-1037
  prefs: []
  type: TYPE_TB
- en: '| question | `string` | A question to ask of the document. |'
  id: totrans-1038
  prefs: []
  type: TYPE_TB
- en: '| [options] | `*` | Additional keyword arguments to pass along to the generate
    method of the model. |'
  id: totrans-1039
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-1040
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  id: totrans-1041
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-1042
  prefs: []
  type: TYPE_TB
- en: '| answer | `string` | The generated text. |'
  id: totrans-1043
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-1044
  prefs: []
  type: TYPE_NORMAL
- en: 'pipelines~TextToAudioPipelineConstructorArgs : <code> Object </code>'
  id: totrans-1045
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-1046
  prefs: []
  type: TYPE_NORMAL
- en: '**Properties**'
  id: totrans-1047
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  id: totrans-1048
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-1049
  prefs: []
  type: TYPE_TB
- en: '| [vocoder] | `PreTrainedModel` | The vocoder used by the pipeline (if the
    model uses one). If not provided, use the default HifiGan vocoder. |'
  id: totrans-1050
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-1051
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~TextToAudioPipelineType ⇒ <code> Promise. < TextToAudioOutput > </code>
  id: totrans-1052
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Parameters specific to text-to-audio pipelines.
  id: totrans-1053
  prefs: []
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-1054
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<TextToAudioOutput>` - An object containing the generated
    audio and sampling rate.'
  id: totrans-1055
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-1056
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-1057
  prefs: []
  type: TYPE_TB
- en: '| texts | `string` &#124; `Array<string>` | The text(s) to generate. |'
  id: totrans-1058
  prefs: []
  type: TYPE_TB
- en: '| options | `TextToAudioPipelineOptions` | Parameters passed to the model generation/forward
    method. |'
  id: totrans-1059
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-1060
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Default | Description |'
  id: totrans-1061
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  id: totrans-1062
  prefs: []
  type: TYPE_TB
- en: '| audio | `Float32Array` |  | The generated audio waveform. |'
  id: totrans-1063
  prefs: []
  type: TYPE_TB
- en: '| sampling_rate | `number` |  | The sampling rate of the generated audio waveform.
    |'
  id: totrans-1064
  prefs: []
  type: TYPE_TB
- en: '| [speaker_embeddings] | `Tensor` &#124; `Float32Array` &#124; `string` &#124;
    `URL` |  | The speaker embeddings (if the model requires it). |'
  id: totrans-1065
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-1066
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~ImageToImagePipelineType ⇒ <code> Promise. < (RawImage|Array < RawImage
    > ) > </code>
  id: totrans-1067
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-1068
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(RawImage|Array<RawImage>)>` - The transformed image
    or list of images.'
  id: totrans-1069
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-1070
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-1071
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The images to transform. |'
  id: totrans-1072
  prefs: []
  type: TYPE_TB
- en: '* * *'
  id: totrans-1073
  prefs: []
  type: TYPE_NORMAL
- en: pipelines~DepthEstimationPipelineType ⇒ <code> Promise. < (DepthEstimationPipelineOutput|Array
    < DepthEstimationPipelineOutput > ) > </code>
  id: totrans-1074
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-1075
  prefs: []
  type: TYPE_NORMAL
- en: '**Returns**: `Promise.<(DepthEstimationPipelineOutput|Array<DepthEstimationPipelineOutput>)>`
    - An image or a list of images containing result(s).'
  id: totrans-1076
  prefs: []
  type: TYPE_NORMAL
- en: '| Param | Type | Description |'
  id: totrans-1077
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-1078
  prefs: []
  type: TYPE_TB
- en: '| images | `ImagePipelineInputs` | The images to compute depth for. |'
  id: totrans-1079
  prefs: []
  type: TYPE_TB
- en: '**Properties**'
  id: totrans-1080
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Type | Description |'
  id: totrans-1081
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-1082
  prefs: []
  type: TYPE_TB
- en: '| predicted_depth | `Tensor` | The raw depth map predicted by the model. |'
  id: totrans-1083
  prefs: []
  type: TYPE_TB
- en: '| depth | `RawImage` | The processed depth map as an image (with the same size
    as the input image). |'
  id: totrans-1084
  prefs: []
  type: TYPE_TB
  zh: '| 深度 | `RawImage` | 处理后的深度图像（与输入图像大小相同）。 |'
- en: '* * *'
  id: totrans-1085
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'pipelines~AllTasks : <code> * </code>'
  id: totrans-1086
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'pipelines~AllTasks: <code> * </code>'
- en: All possible pipeline types.
  id: totrans-1087
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可能的管道类型。
- en: '**Kind**: inner typedef of [`pipelines`](#module_pipelines)'
  id: totrans-1088
  prefs: []
  type: TYPE_NORMAL
  zh: '**种类**：`pipelines`模块的内部typedef'
- en: '* * *'
  id: totrans-1089
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
