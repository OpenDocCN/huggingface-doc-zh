["```py\n( num_train_timesteps: int = 1000 beta_start: float = 0.0001 beta_end: float = 0.02 beta_schedule: str = 'linear' trained_betas: Union = None skip_prk_steps: bool = False set_alpha_to_one: bool = False prediction_type: str = 'epsilon' timestep_spacing: str = 'leading' steps_offset: int = 0 )\n```", "```py\n( sample: FloatTensor *args **kwargs ) \u2192 export const metadata = 'undefined';torch.FloatTensor\n```", "```py\n( num_inference_steps: int device: Union = None )\n```", "```py\n( model_output: FloatTensor timestep: int sample: FloatTensor return_dict: bool = True ) \u2192 export const metadata = 'undefined';SchedulerOutput or tuple\n```", "```py\n( model_output: FloatTensor timestep: int sample: FloatTensor return_dict: bool = True ) \u2192 export const metadata = 'undefined';SchedulerOutput or tuple\n```", "```py\n( model_output: FloatTensor timestep: int sample: FloatTensor return_dict: bool = True ) \u2192 export const metadata = 'undefined';SchedulerOutput or tuple\n```", "```py\n( prev_sample: FloatTensor )\n```"]