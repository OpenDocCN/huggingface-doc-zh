- en: Deploy models to Amazon SageMaker
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/sagemaker/inference](https://huggingface.co/docs/sagemaker/inference)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploying a 🤗 Transformers models in SageMaker for inference is as easy as:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This guide will show you how to deploy models with zero-code using the [Inference
    Toolkit](https://github.com/aws/sagemaker-huggingface-inference-toolkit). The
    Inference Toolkit builds on top of the [`pipeline` feature](https://huggingface.co/docs/transformers/main_classes/pipelines)
    from 🤗 Transformers. Learn how to:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[Install and setup the Inference Toolkit](#installation-and-setup).'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploy a 🤗 Transformers model trained in SageMaker](#deploy-a-transformer-model-trained-in-sagemaker).'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploy a 🤗 Transformers model from the Hugging Face [model Hub](https://huggingface.co/models)](#deploy-a-model-from-the-hub).'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Run a Batch Transform Job using 🤗 Transformers and Amazon SageMaker](#run-batch-transform-with-transformers-and-sagemaker).'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create a custom inference module](#user-defined-code-and-modules).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation and setup
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before deploying a 🤗 Transformers model to SageMaker, you need to sign up for
    an AWS account. If you don’t have an AWS account yet, learn more [here](https://docs.aws.amazon.com/sagemaker/latest/dg/gs-set-up.html).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have an AWS account, get started using one of the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[SageMaker Studio](https://docs.aws.amazon.com/sagemaker/latest/dg/gs-studio-onboard.html)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SageMaker notebook instance](https://docs.aws.amazon.com/sagemaker/latest/dg/gs-console.html)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local environment
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start training locally, you need to setup an appropriate [IAM role](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Upgrade to the latest `sagemaker` version.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**SageMaker environment**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup your SageMaker environment as shown below:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Note: The execution role is only available when running a notebook within
    SageMaker. If you run `get_execution_role` in a notebook not on SageMaker, expect
    a `region` error.*'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '**Local environment**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Setup your local environment as shown below:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Deploy a 🤗 Transformers model trained in SageMaker
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/embed/pfBGgSGnYLs](https://www.youtube.com/embed/pfBGgSGnYLs)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to deploy your Hugging Face model trained in SageMaker:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Deploy it after your training has finished.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy your saved model at a later time from S3 with the `model_data`.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 📓 Open the [notebook](https://github.com/huggingface/notebooks/blob/main/sagemaker/10_deploy_model_from_s3/deploy_transformer_model_from_s3.ipynb)
    for an example of how to deploy a model from S3 to SageMaker for inference.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Deploy after training
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To deploy your model directly after training, ensure all required files are
    saved in your training script, including the tokenizer and the model.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: If you use the Hugging Face `Trainer`, you can pass your tokenizer as an argument
    to the `Trainer`. It will be automatically saved when you call `trainer.save_model()`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After you run your request you can delete the endpoint as shown:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Deploy with model_data
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you’ve already trained your model and want to deploy it at a later time,
    use the `model_data` argument to specify the location of your tokenizer and model
    weights.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After you run our request, you can delete the endpoint again with:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Create a model artifact for deployment
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For later deployment, you can create a `model.tar.gz` file that contains all
    the required files, such as:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '`pytorch_model.bin`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tf_model.h5`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tokenizer.json`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tokenizer_config.json`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, your file should look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create your own `model.tar.gz` from a model from the 🤗 Hub:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Download a model:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a `tar` file:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Upload `model.tar.gz` to S3:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now you can provide the S3 URI to the `model_data` argument to deploy your model
    later.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Deploy a model from the 🤗 Hub
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/embed/l9QZuazbzWM](https://www.youtube.com/embed/l9QZuazbzWM)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy a model directly from the 🤗 Hub to SageMaker, define two environment
    variables when you create a `HuggingFaceModel`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '`HF_MODEL_ID` defines the model ID which is automatically loaded from [huggingface.co/models](http://huggingface.co/models)
    when you create a SageMaker endpoint. Access 10,000+ models on he 🤗 Hub through
    this environment variable.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HF_TASK` defines the task for the 🤗 Transformers `pipeline`. A complete list
    of tasks can be found [here](https://huggingface.co/docs/transformers/main_classes/pipelines).'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After you run our request, you can delete the endpoint again with:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 📓 Open the [notebook](https://github.com/huggingface/notebooks/blob/main/sagemaker/11_deploy_model_from_hf_hub/deploy_transformer_model_from_hf_hub.ipynb)
    for an example of how to deploy a model from the 🤗 Hub to SageMaker for inference.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Run batch transform with 🤗 Transformers and SageMaker
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/embed/lnTixz0tUBg](https://www.youtube.com/embed/lnTixz0tUBg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: After training a model, you can use [SageMaker batch transform](https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works-batch.html)
    to perform inference with the model. Batch transform accepts your inference data
    as an S3 URI and then SageMaker will take care of downloading the data, running
    the prediction, and uploading the results to S3\. For more details about batch
    transform, take a look [here](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: ⚠️ The Hugging Face Inference DLC currently only supports `.jsonl` for batch
    transform due to the complex structure of textual data.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '*Note: Make sure your `inputs` fit the `max_length` of the model during preprocessing.*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'If you trained a model using the Hugging Face Estimator, call the `transformer()`
    method to create a transform job for a model based on the training job (see [here](https://sagemaker.readthedocs.io/en/stable/overview.html#sagemaker-batch-transform)
    for more details):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you want to run your batch transform job later or with a model from the
    🤗 Hub, create a `HuggingFaceModel` instance and then call the `transformer()`
    method:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `input.jsonl` looks like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 📓 Open the [notebook](https://github.com/huggingface/notebooks/blob/main/sagemaker/12_batch_transform_inference/sagemaker-notebook.ipynb)
    for an example of how to run a batch transform job for inference.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: User defined code and modules
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Hugging Face Inference Toolkit allows the user to override the default
    methods of the `HuggingFaceHandlerService`. You will need to create a folder named
    `code/` with an `inference.py` file in it. See [here](#create-a-model-artifact-for-deployment)
    for more details on how to archive your model artifacts. For example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `inference.py` file contains your custom inference module, and the `requirements.txt`
    file contains additional dependencies that should be added. The custom module
    can override the following methods:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '`model_fn(model_dir)` overrides the default method for loading a model. The
    return value `model` will be used in `predict` for predictions. `predict` receives
    argument the `model_dir`, the path to your unzipped `model.tar.gz`.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transform_fn(model, data, content_type, accept_type)` overrides the default
    transform function with your custom implementation. You will need to implement
    your own `preprocess`, `predict` and `postprocess` steps in the `transform_fn`.
    This method can’t be combined with `input_fn`, `predict_fn` or `output_fn` mentioned
    below.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input_fn(input_data, content_type)` overrides the default method for preprocessing.
    The return value `data` will be used in `predict` for predictions. The inputs
    are:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input_data` is the raw body of your request.'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content_type` is the content type from the request header.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`predict_fn(processed_data, model)` overrides the default method for predictions.
    The return value `predictions` will be used in `postprocess`. The input is `processed_data`,
    the result from `preprocess`.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_fn(prediction, accept)` overrides the default method for postprocessing.
    The return value `result` will be the response of your request (e.g.`JSON`). The
    inputs are:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`predictions` is the result from `predict`.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`predictions`是来自`predict`的结果。'
- en: '`accept` is the return accept type from the HTTP Request, e.g. `application/json`.'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accept`是来自HTTP请求的返回接受类型，例如`application/json`。'
- en: 'Here is an example of a custom inference module with `model_fn`, `input_fn`,
    `predict_fn`, and `output_fn`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个带有`model_fn`、`input_fn`、`predict_fn`和`output_fn`的自定义推理模块示例：
- en: '[PRE18]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Customize your inference module with only `model_fn` and `transform_fn`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 只使用`model_fn`和`transform_fn`自定义您的推理模块：
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
