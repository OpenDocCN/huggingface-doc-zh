["```py\nfrom transformers import Dinov2Config, DPTConfig, DPTForDepthEstimation\n\n# initialize with a Transformer-based backbone such as DINOv2\n# in that case, we also specify `reshape_hidden_states=False` to get feature maps of shape (batch_size, num_channels, height, width)\nbackbone_config = Dinov2Config.from_pretrained(\"facebook/dinov2-base\", out_features=[\"stage1\", \"stage2\", \"stage3\", \"stage4\"], reshape_hidden_states=False)\n\nconfig = DPTConfig(backbone_config=backbone_config)\nmodel = DPTForDepthEstimation(config=config)\n```", "```py\n>>> from transformers import DPTModel, DPTConfig\n\n>>> # Initializing a DPT dpt-large style configuration\n>>> configuration = DPTConfig()\n\n>>> # Initializing a model from the dpt-large style configuration\n>>> model = DPTModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, DPTModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"Intel/dpt-large\")\n>>> model = DPTModel.from_pretrained(\"Intel/dpt-large\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 577, 1024]\n```", "```py\n>>> from transformers import AutoImageProcessor, DPTForDepthEstimation\n>>> import torch\n>>> import numpy as np\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"Intel/dpt-large\")\n>>> model = DPTForDepthEstimation.from_pretrained(\"Intel/dpt-large\")\n\n>>> # prepare image for the model\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n...     predicted_depth = outputs.predicted_depth\n\n>>> # interpolate to original size\n>>> prediction = torch.nn.functional.interpolate(\n...     predicted_depth.unsqueeze(1),\n...     size=image.size[::-1],\n...     mode=\"bicubic\",\n...     align_corners=False,\n... )\n\n>>> # visualize the prediction\n>>> output = prediction.squeeze().cpu().numpy()\n>>> formatted = (output * 255 / np.max(output)).astype(\"uint8\")\n>>> depth = Image.fromarray(formatted)\n```", "```py\n>>> from transformers import AutoImageProcessor, DPTForSemanticSegmentation\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"Intel/dpt-large-ade\")\n>>> model = DPTForSemanticSegmentation.from_pretrained(\"Intel/dpt-large-ade\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n```"]