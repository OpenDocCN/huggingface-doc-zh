- en: Improve image quality with deterministic generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/using-diffusers/reusing_seeds](https://huggingface.co/docs/diffusers/using-diffusers/reusing_seeds)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: A common way to improve the quality of generated images is with *deterministic
    batch generation*, generate a batch of images and select one image to improve
    with a more detailed prompt in a second round of inference. The key is to pass
    a list of [`torch.Generator`](https://pytorch.org/docs/stable/generated/torch.Generator.html#generator)’s
    to the pipeline for batched image generation, and tie each `Generator` to a seed
    so you can reuse it for an image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use [`runwayml/stable-diffusion-v1-5`](https://huggingface.co/runwayml/stable-diffusion-v1-5)
    for example, and generate several versions of the following prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate a pipeline with [DiffusionPipeline.from_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.from_pretrained)
    and place it on a GPU (if available):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, define four different `Generator`s and assign each `Generator` a seed
    (`0` to `3`) so you can reuse a `Generator` later for a specific image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To create a batched seed, you should use a list comprehension that iterates
    over the length specified in `range()`. This creates a unique `Generator` object
    for each image in the batch. If you only multiply the `Generator` by the batch
    size, this only creates one `Generator` object that is used sequentially for each
    image in the batch.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to use the same seed to create 4 identical images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Generate the images and have a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![img](../Images/aa02b8f33d0288676abcc7b175d1bd54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this example, you’ll improve upon the first image - but in reality, you
    can use any image you want (even the image with double sets of eyes!). The first
    image used the `Generator` with seed `0`, so you’ll reuse that `Generator` for
    the second round of inference. To improve the quality of the image, add some additional
    text to the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Create four generators with seed `0`, and generate another batch of images,
    all of which should look like the first image from the previous round!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![img](../Images/8bf79e71eae0527dff810dfe053b2b85.png)'
  prefs: []
  type: TYPE_IMG
