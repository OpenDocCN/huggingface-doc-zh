- en: Philosophy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/transformers/v4.37.2/en/philosophy](https://huggingface.co/docs/transformers/v4.37.2/en/philosophy)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/329.cf9b6aa5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
  prefs: []
  type: TYPE_NORMAL
- en: 'ðŸ¤— Transformers is an opinionated library built for:'
  prefs: []
  type: TYPE_NORMAL
- en: machine learning researchers and educators seeking to use, study or extend large-scale
    Transformers models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hands-on practitioners who want to fine-tune those models or serve them in production,
    or both.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: engineers who just want to download a pretrained model and use it to solve a
    given machine learning task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The library was designed with two strong goals in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Be as easy and fast to use as possible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We strongly limited the number of user-facing abstractions to learn, in fact,
    there are almost no abstractions, just three standard classes required to use
    each model: [configuration](main_classes/configuration), [models](main_classes/model),
    and a preprocessing class ([tokenizer](main_classes/tokenizer) for NLP, [image
    processor](main_classes/image_processor) for vision, [feature extractor](main_classes/feature_extractor)
    for audio, and [processor](main_classes/processors) for multimodal inputs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these classes can be initialized in a simple and unified way from pretrained
    instances by using a common `from_pretrained()` method which downloads (if needed),
    caches and loads the related class instance and associated data (configurationsâ€™
    hyperparameters, tokenizersâ€™ vocabulary, and modelsâ€™ weights) from a pretrained
    checkpoint provided on [Hugging Face Hub](https://huggingface.co/models) or your
    own saved checkpoint.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On top of those three base classes, the library provides two APIs: [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    for quickly using a model for inference on a given task and [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    to quickly train or fine-tune a PyTorch model (all TensorFlow models are compatible
    with `Keras.fit`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a consequence, this library is NOT a modular toolbox of building blocks for
    neural nets. If you want to extend or build upon the library, just use regular
    Python, PyTorch, TensorFlow, Keras modules and inherit from the base classes of
    the library to reuse functionalities like model loading and saving. If youâ€™d like
    to learn more about our coding philosophy for models, check out our [Repeat Yourself](https://huggingface.co/blog/transformers-design-philosophy)
    blog post.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Provide state-of-the-art models with performances as close as possible to the
    original models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We provide at least one example for each architecture which reproduces a result
    provided by the official authors of said architecture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code is usually as close to the original code base as possible which means
    some PyTorch code may be not as *pytorchic* as it could be as a result of being
    converted TensorFlow code and vice versa.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A few other goals:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Expose the modelsâ€™ internals as consistently as possible:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We give access, using a single API, to the full hidden-states and attention
    weights.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The preprocessing classes and base model APIs are standardized to easily switch
    between models.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Incorporate a subjective selection of promising tools for fine-tuning and investigating
    these models:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple and consistent way to add new tokens to the vocabulary and embeddings
    for fine-tuning.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple ways to mask and prune Transformer heads.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Easily switch between PyTorch, TensorFlow 2.0 and Flax, allowing training with
    one framework and inference with another.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main concepts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The library is built around three types of classes for each model:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model classes** can be PyTorch models ([torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)),
    Keras models ([tf.keras.Model](https://www.tensorflow.org/api_docs/python/tf/keras/Model))
    or JAX/Flax models ([flax.linen.Module](https://flax.readthedocs.io/en/latest/api_reference/flax.linen/module.html))
    that work with the pretrained weights provided in the library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration classes** store the hyperparameters required to build a model
    (such as the number of layers and hidden size). You donâ€™t always need to instantiate
    these yourself. In particular, if you are using a pretrained model without any
    modification, creating the model will automatically take care of instantiating
    the configuration (which is part of the model).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Preprocessing classes** convert the raw data into a format accepted by the
    model. A [tokenizer](main_classes/tokenizer) stores the vocabulary for each model
    and provide methods for encoding and decoding strings in a list of token embedding
    indices to be fed to a model. [Image processors](main_classes/image_processor)
    preprocess vision inputs, [feature extractors](main_classes/feature_extractor)
    preprocess audio inputs, and a [processor](main_classes/processors) handles multimodal
    inputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All these classes can be instantiated from pretrained instances, saved locally,
    and shared on the Hub with three methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from_pretrained()` lets you instantiate a model, configuration, and preprocessing
    class from a pretrained version either provided by the library itself (the supported
    models can be found on the [Model Hub](https://huggingface.co/models)) or stored
    locally (or on a server) by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_pretrained()` lets you save a model, configuration, and preprocessing
    class locally so that it can be reloaded using `from_pretrained()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push_to_hub()` lets you share a model, configuration, and a preprocessing
    class to the Hub, so it is easily accessible to everyone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
