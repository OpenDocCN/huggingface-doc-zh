- en: Autoformer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/autoformer](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/autoformer)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Autoformer model was proposed in [Autoformer: Decomposition Transformers
    with Auto-Correlation for Long-Term Series Forecasting](https://arxiv.org/abs/2106.13008)
    by Haixu Wu, Jiehui Xu, Jianmin Wang, Mingsheng Long.'
  prefs: []
  type: TYPE_NORMAL
- en: This model augments the Transformer as a deep decomposition architecture, which
    can progressively decompose the trend and seasonal components during the forecasting
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Extending the forecasting time is a critical demand for real applications,
    such as extreme weather early warning and long-term energy consumption planning.
    This paper studies the long-term forecasting problem of time series. Prior Transformer-based
    models adopt various self-attention mechanisms to discover the long-range dependencies.
    However, intricate temporal patterns of the long-term future prohibit the model
    from finding reliable dependencies. Also, Transformers have to adopt the sparse
    versions of point-wise self-attentions for long series efficiency, resulting in
    the information utilization bottleneck. Going beyond Transformers, we design Autoformer
    as a novel decomposition architecture with an Auto-Correlation mechanism. We break
    with the pre-processing convention of series decomposition and renovate it as
    a basic inner block of deep models. This design empowers Autoformer with progressive
    decomposition capacities for complex time series. Further, inspired by the stochastic
    process theory, we design the Auto-Correlation mechanism based on the series periodicity,
    which conducts the dependencies discovery and representation aggregation at the
    sub-series level. Auto-Correlation outperforms self-attention in both efficiency
    and accuracy. In long-term forecasting, Autoformer yields state-of-the-art accuracy,
    with a 38% relative improvement on six benchmarks, covering five practical applications:
    energy, traffic, economics, weather and disease.*'
  prefs: []
  type: TYPE_NORMAL
- en: This model was contributed by [elisim](https://huggingface.co/elisim) and [kashif](https://huggingface.co/kashif).
    The original code can be found [here](https://github.com/thuml/Autoformer).
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of official Hugging Face and community (indicated by üåé) resources to
    help you get started. If you‚Äôre interested in submitting a resource to be included
    here, please feel free to open a Pull Request and we‚Äôll review it! The resource
    should ideally demonstrate something new instead of duplicating an existing resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the Autoformer blog-post in HuggingFace blog: [Yes, Transformers
    are Effective for Time Series Forecasting (+ Autoformer)](https://huggingface.co/blog/autoformer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AutoformerConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.AutoformerConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/autoformer/configuration_autoformer.py#L30)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`prediction_length` (`int`) ‚Äî The prediction length for the decoder. In other
    words, the prediction horizon of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context_length` (`int`, *optional*, defaults to `prediction_length`) ‚Äî The
    context length for the encoder. If unset, the context length will be the same
    as the `prediction_length`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`distribution_output` (`string`, *optional*, defaults to `"student_t"`) ‚Äî The
    distribution emission head for the model. Could be either ‚Äústudent_t‚Äù, ‚Äúnormal‚Äù
    or ‚Äúnegative_binomial‚Äù.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loss` (`string`, *optional*, defaults to `"nll"`) ‚Äî The loss function for
    the model corresponding to the `distribution_output` head. For parametric distributions
    it is the negative log likelihood (nll) - which currently is the only supported
    one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input_size` (`int`, *optional*, defaults to 1) ‚Äî The size of the target variable
    which by default is 1 for univariate targets. Would be > 1 in case of multivariate
    targets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lags_sequence` (`list[int]`, *optional*, defaults to `[1, 2, 3, 4, 5, 6, 7]`)
    ‚Äî The lags of the input time series as covariates often dictated by the frequency.
    Default is `[1, 2, 3, 4, 5, 6, 7]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scaling` (`bool`, *optional* defaults to `True`) ‚Äî Whether to scale the input
    targets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_time_features` (`int`, *optional*, defaults to 0) ‚Äî The number of time
    features in the input time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_dynamic_real_features` (`int`, *optional*, defaults to 0) ‚Äî The number
    of dynamic real valued features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_static_categorical_features` (`int`, *optional*, defaults to 0) ‚Äî The
    number of static categorical features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_static_real_features` (`int`, *optional*, defaults to 0) ‚Äî The number
    of static real valued features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cardinality` (`list[int]`, *optional*) ‚Äî The cardinality (number of different
    values) for each of the static categorical features. Should be a list of integers,
    having the same length as `num_static_categorical_features`. Cannot be `None`
    if `num_static_categorical_features` is > 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`embedding_dimension` (`list[int]`, *optional*) ‚Äî The dimension of the embedding
    for each of the static categorical features. Should be a list of integers, having
    the same length as `num_static_categorical_features`. Cannot be `None` if `num_static_categorical_features`
    is > 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d_model` (`int`, *optional*, defaults to 64) ‚Äî Dimensionality of the transformer
    layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_layers` (`int`, *optional*, defaults to 2) ‚Äî Number of encoder layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_layers` (`int`, *optional*, defaults to 2) ‚Äî Number of decoder layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_attention_heads` (`int`, *optional*, defaults to 2) ‚Äî Number of attention
    heads for each attention layer in the Transformer encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_attention_heads` (`int`, *optional*, defaults to 2) ‚Äî Number of attention
    heads for each attention layer in the Transformer decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_ffn_dim` (`int`, *optional*, defaults to 32) ‚Äî Dimension of the ‚Äúintermediate‚Äù
    (often named feed-forward) layer in encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_ffn_dim` (`int`, *optional*, defaults to 32) ‚Äî Dimension of the ‚Äúintermediate‚Äù
    (often named feed-forward) layer in decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activation_function` (`str` or `function`, *optional*, defaults to `"gelu"`)
    ‚Äî The non-linear activation function (function or string) in the encoder and decoder.
    If string, `"gelu"` and `"relu"` are supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dropout` (`float`, *optional*, defaults to 0.1) ‚Äî The dropout probability
    for all fully connected layers in the encoder, and decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_layerdrop` (`float`, *optional*, defaults to 0.1) ‚Äî The dropout probability
    for the attention and fully connected layers for each encoder layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_layerdrop` (`float`, *optional*, defaults to 0.1) ‚Äî The dropout probability
    for the attention and fully connected layers for each decoder layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_dropout` (`float`, *optional*, defaults to 0.1) ‚Äî The dropout probability
    for the attention probabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activation_dropout` (`float`, *optional*, defaults to 0.1) ‚Äî The dropout probability
    used between the two layers of the feed-forward networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_parallel_samples` (`int`, *optional*, defaults to 100) ‚Äî The number of
    samples to generate in parallel for each time step of inference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`init_std` (`float`, *optional*, defaults to 0.02) ‚Äî The standard deviation
    of the truncated normal weight initialization distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_cache` (`bool`, *optional*, defaults to `True`) ‚Äî Whether to use the past
    key/values attentions (if applicable to the model) to speed up decoding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_length` (`int`, *optional*, defaults to 10) ‚Äî Start token length of
    the Autoformer decoder, which is used for direct multi-step prediction (i.e. non-autoregressive
    generation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`moving_average` (`int`, defaults to 25) ‚Äî The window size of the moving average.
    In practice, it‚Äôs the kernel size in AvgPool1d of the Decomposition Layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autocorrelation_factor` (`int`, defaults to 3) ‚Äî ‚ÄúAttention‚Äù (i.e. AutoCorrelation
    mechanism) factor which is used to find top k autocorrelations delays. It‚Äôs recommended
    in the paper to set it to a number between 1 and 5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of an [AutoformerModel](/docs/transformers/v4.37.2/en/model_doc/autoformer#transformers.AutoformerModel).
    It is used to instantiate an Autoformer model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the Autoformer [huggingface/autoformer-tourism-monthly](https://huggingface.co/huggingface/autoformer-tourism-monthly)
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: AutoformerModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.AutoformerModel`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/autoformer/modeling_autoformer.py#L1429)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([AutoformerConfig](/docs/transformers/v4.37.2/en/model_doc/autoformer#transformers.AutoformerConfig))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bare Autoformer Model outputting raw hidden-states without any specific
    head on top. This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/autoformer/modeling_autoformer.py#L1607)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`past_values` (`torch.FloatTensor` of shape `(batch_size, sequence_length)`)
    ‚Äî Past values of the time series, that serve as context in order to predict the
    future. These values may contain lags, i.e. additional values from the past which
    are added in order to serve as ‚Äúextra context‚Äù. The `past_values` is what the
    Transformer encoder gets as input (with optional additional features, such as
    `static_categorical_features`, `static_real_features`, `past_time_features`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sequence length here is equal to `context_length` + `max(config.lags_sequence)`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Missing values need to be replaced with zeros.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`past_time_features` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    num_features)`, *optional*) ‚Äî Optional time features, which the model internally
    will add to `past_values`. These could be things like ‚Äúmonth of year‚Äù, ‚Äúday of
    the month‚Äù, etc. encoded as vectors (for instance as Fourier features). These
    could also be so-called ‚Äúage‚Äù features, which basically help the model know ‚Äúat
    which point in life‚Äù a time-series is. Age features have small values for distant
    past time steps and increase monotonically the more we approach the current time
    step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These features serve as the ‚Äúpositional encodings‚Äù of the inputs. So contrary
    to a model like BERT, where the position encodings are learned from scratch internally
    as parameters of the model, the Time Series Transformer requires to provide additional
    time features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Autoformer only learns additional embeddings for `static_categorical_features`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`past_observed_mask` (`torch.BoolTensor` of shape `(batch_size, sequence_length)`,
    *optional*) ‚Äî Boolean mask to indicate which `past_values` were observed and which
    were missing. Mask values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for values that are `observed`,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for values that are `missing` (i.e. NaNs that were replaced by zeros).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static_categorical_features` (`torch.LongTensor` of shape `(batch_size, number
    of static categorical features)`, *optional*) ‚Äî Optional static categorical features
    for which the model will learn an embedding, which it will add to the values of
    the time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static categorical features are features which have the same value for all time
    steps (static over time).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A typical example of a static categorical feature is a time series ID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`static_real_features` (`torch.FloatTensor` of shape `(batch_size, number of
    static real features)`, *optional*) ‚Äî Optional static real features which the
    model will add to the values of the time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static real features are features which have the same value for all time steps
    (static over time).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A typical example of a static real feature is promotion information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`future_values` (`torch.FloatTensor` of shape `(batch_size, prediction_length)`)
    ‚Äî Future values of the time series, that serve as labels for the model. The `future_values`
    is what the Transformer needs to learn to output, given the `past_values`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the demo notebook and code snippets for details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Missing values need to be replaced with zeros.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`future_time_features` (`torch.FloatTensor` of shape `(batch_size, prediction_length,
    num_features)`, *optional*) ‚Äî Optional time features, which the model internally
    will add to `future_values`. These could be things like ‚Äúmonth of year‚Äù, ‚Äúday
    of the month‚Äù, etc. encoded as vectors (for instance as Fourier features). These
    could also be so-called ‚Äúage‚Äù features, which basically help the model know ‚Äúat
    which point in life‚Äù a time-series is. Age features have small values for distant
    past time steps and increase monotonically the more we approach the current time
    step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These features serve as the ‚Äúpositional encodings‚Äù of the inputs. So contrary
    to a model like BERT, where the position encodings are learned from scratch internally
    as parameters of the model, the Time Series Transformer requires to provide additional
    features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Autoformer only learns additional embeddings for `static_categorical_features`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`attention_mask` (`torch.Tensor` of shape `(batch_size, sequence_length)`,
    *optional*) ‚Äî Mask to avoid performing attention on certain token indices. Mask
    values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for tokens that are `not masked`,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for tokens that are `masked`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attention_mask` (`torch.LongTensor` of shape `(batch_size, target_sequence_length)`,
    *optional*) ‚Äî Mask to avoid performing attention on certain token indices. By
    default, a causal mask will be used, to make sure the model can only look at previous
    inputs in order to predict the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`head_mask` (`torch.Tensor` of shape `(encoder_layers, encoder_attention_heads)`,
    *optional*) ‚Äî Mask to nullify selected heads of the attention modules in the encoder.
    Mask values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 indicates the head is `not masked`,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 indicates the head is `masked`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_head_mask` (`torch.Tensor` of shape `(decoder_layers, decoder_attention_heads)`,
    *optional*) ‚Äî Mask to nullify selected heads of the attention modules in the decoder.
    Mask values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 indicates the head is `not masked`,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 indicates the head is `masked`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attn_head_mask` (`torch.Tensor` of shape `(decoder_layers, decoder_attention_heads)`,
    *optional*) ‚Äî Mask to nullify selected heads of the cross-attention modules. Mask
    values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 indicates the head is `not masked`,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 indicates the head is `masked`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_outputs` (`tuple(tuple(torch.FloatTensor)`, *optional*) ‚Äî Tuple consists
    of `last_hidden_state`, `hidden_states` (*optional*) and `attentions` (*optional*)
    `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)` (*optional*)
    is a sequence of hidden-states at the output of the last layer of the encoder.
    Used in the cross-attention of the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`past_key_values` (`tuple(tuple(torch.FloatTensor))`, *optional*, returned
    when `use_cache=True` is passed or when `config.use_cache=True`) ‚Äî Tuple of `tuple(torch.FloatTensor)`
    of length `config.n_layers`, with each tuple having 2 tensors of shape `(batch_size,
    num_heads, sequence_length, embed_size_per_head)`) and 2 additional tensors of
    shape `(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains pre-computed hidden-states (key and values in the self-attention blocks
    and in the cross-attention blocks) that can be used (see `past_key_values` input)
    to speed up sequential decoding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids`
    (those that don‚Äôt have their past key value states given to this model) of shape
    `(batch_size, 1)` instead of all `decoder_input_ids` of shape `(batch_size, sequence_length)`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) ‚Äî Optionally, instead of passing `input_ids` you can
    choose to directly pass an embedded representation. This is useful if you want
    more control over how to convert `input_ids` indices into associated vectors than
    the model‚Äôs internal embedding lookup matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_cache` (`bool`, *optional*) ‚Äî If set to `True`, `past_key_values` key
    value states are returned and can be used to speed up decoding (see `past_key_values`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) ‚Äî Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.autoformer.modeling_autoformer.AutoformerModelOutput`
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.autoformer.modeling_autoformer.AutoformerModelOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([AutoformerConfig](/docs/transformers/v4.37.2/en/model_doc/autoformer#transformers.AutoformerConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`) ‚Äî Sequence of hidden-states at the output of the last layer of
    the decoder of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `past_key_values` is used only the last hidden-state of the sequences of
    shape `(batch_size, 1, hidden_size)` is output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`trend` (`torch.FloatTensor` of shape `(batch_size, sequence_length, hidden_size)`)
    ‚Äî Trend tensor for each time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`past_key_values` (`tuple(tuple(torch.FloatTensor))`, *optional*, returned
    when `use_cache=True` is passed or when `config.use_cache=True`) ‚Äî Tuple of `tuple(torch.FloatTensor)`
    of length `config.n_layers`, with each tuple having 2 tensors of shape `(batch_size,
    num_heads, sequence_length, embed_size_per_head)`) and 2 additional tensors of
    shape `(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains pre-computed hidden-states (key and values in the self-attention blocks
    and in the cross-attention blocks) that can be used (see `past_key_values` input)
    to speed up sequential decoding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    ‚Äî Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the decoder at the output of each layer plus the optional initial
    embedding outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) ‚Äî
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the decoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cross_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the decoder‚Äôs cross-attention layer, after the attention
    softmax, used to compute the weighted average in the cross-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) ‚Äî Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    ‚Äî Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the encoder at the output of each layer plus the optional initial
    embedding outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) ‚Äî
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the encoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`loc` (`torch.FloatTensor` of shape `(batch_size,)` or `(batch_size, input_size)`,
    *optional*) ‚Äî Shift values of each time series‚Äô context window which is used to
    give the model inputs of the same magnitude and then used to shift back to the
    original magnitude.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale` (`torch.FloatTensor` of shape `(batch_size,)` or `(batch_size, input_size)`,
    *optional*) ‚Äî Scaling values of each time series‚Äô context window which is used
    to give the model inputs of the same magnitude and then used to rescale back to
    the original magnitude.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static_features:` (`torch.FloatTensor` of shape `(batch_size, feature size)`,
    *optional*) ‚Äî Static features of each time series‚Äô in a batch which are copied
    to the covariates at inference time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [AutoformerModel](/docs/transformers/v4.37.2/en/model_doc/autoformer#transformers.AutoformerModel)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: AutoformerForPrediction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.AutoformerForPrediction`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/autoformer/modeling_autoformer.py#L1765)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([AutoformerConfig](/docs/transformers/v4.37.2/en/model_doc/autoformer#transformers.AutoformerConfig))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Autoformer Model with a distribution head on top for time-series forecasting.
    This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/autoformer/modeling_autoformer.py#L1809)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`past_values` (`torch.FloatTensor` of shape `(batch_size, sequence_length)`)
    ‚Äî Past values of the time series, that serve as context in order to predict the
    future. These values may contain lags, i.e. additional values from the past which
    are added in order to serve as ‚Äúextra context‚Äù. The `past_values` is what the
    Transformer encoder gets as input (with optional additional features, such as
    `static_categorical_features`, `static_real_features`, `past_time_features`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sequence length here is equal to `context_length` + `max(config.lags_sequence)`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Missing values need to be replaced with zeros.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`past_time_features` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    num_features)`, *optional*) ‚Äî Optional time features, which the model internally
    will add to `past_values`. These could be things like ‚Äúmonth of year‚Äù, ‚Äúday of
    the month‚Äù, etc. encoded as vectors (for instance as Fourier features). These
    could also be so-called ‚Äúage‚Äù features, which basically help the model know ‚Äúat
    which point in life‚Äù a time-series is. Age features have small values for distant
    past time steps and increase monotonically the more we approach the current time
    step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These features serve as the ‚Äúpositional encodings‚Äù of the inputs. So contrary
    to a model like BERT, where the position encodings are learned from scratch internally
    as parameters of the model, the Time Series Transformer requires to provide additional
    time features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Autoformer only learns additional embeddings for `static_categorical_features`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`past_observed_mask` (`torch.BoolTensor` of shape `(batch_size, sequence_length)`,
    *optional*) ‚Äî Boolean mask to indicate which `past_values` were observed and which
    were missing. Mask values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for values that are `observed`,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for values that are `missing` (i.e. NaNs that were replaced by zeros).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static_categorical_features` (`torch.LongTensor` of shape `(batch_size, number
    of static categorical features)`, *optional*) ‚Äî Optional static categorical features
    for which the model will learn an embedding, which it will add to the values of
    the time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static categorical features are features which have the same value for all time
    steps (static over time).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A typical example of a static categorical feature is a time series ID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`static_real_features` (`torch.FloatTensor` of shape `(batch_size, number of
    static real features)`, *optional*) ‚Äî Optional static real features which the
    model will add to the values of the time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static real features are features which have the same value for all time steps
    (static over time).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A typical example of a static real feature is promotion information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`future_values` (`torch.FloatTensor` of shape `(batch_size, prediction_length)`)
    ‚Äî Future values of the time series, that serve as labels for the model. The `future_values`
    is what the Transformer needs to learn to output, given the `past_values`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the demo notebook and code snippets for details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Missing values need to be replaced with zeros.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`future_time_features` (`torch.FloatTensor` of shape `(batch_size, prediction_length,
    num_features)`, *optional*) ‚Äî Optional time features, which the model internally
    will add to `future_values`. These could be things like ‚Äúmonth of year‚Äù, ‚Äúday
    of the month‚Äù, etc. encoded as vectors (for instance as Fourier features). These
    could also be so-called ‚Äúage‚Äù features, which basically help the model know ‚Äúat
    which point in life‚Äù a time-series is. Age features have small values for distant
    past time steps and increase monotonically the more we approach the current time
    step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These features serve as the ‚Äúpositional encodings‚Äù of the inputs. So contrary
    to a model like BERT, where the position encodings are learned from scratch internally
    as parameters of the model, the Time Series Transformer requires to provide additional
    features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Autoformer only learns additional embeddings for `static_categorical_features`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`attention_mask` (`torch.Tensor` of shape `(batch_size, sequence_length)`,
    *optional*) ‚Äî Mask to avoid performing attention on certain token indices. Mask
    values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 for tokens that are `not masked`,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 for tokens that are `masked`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are attention masks?](../glossary#attention-mask)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attention_mask` (`torch.LongTensor` of shape `(batch_size, target_sequence_length)`,
    *optional*) ‚Äî Mask to avoid performing attention on certain token indices. By
    default, a causal mask will be used, to make sure the model can only look at previous
    inputs in order to predict the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`head_mask` (`torch.Tensor` of shape `(encoder_layers, encoder_attention_heads)`,
    *optional*) ‚Äî Mask to nullify selected heads of the attention modules in the encoder.
    Mask values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 indicates the head is `not masked`,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 indicates the head is `masked`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_head_mask` (`torch.Tensor` of shape `(decoder_layers, decoder_attention_heads)`,
    *optional*) ‚Äî Mask to nullify selected heads of the attention modules in the decoder.
    Mask values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 indicates the head is `not masked`,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 indicates the head is `masked`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attn_head_mask` (`torch.Tensor` of shape `(decoder_layers, decoder_attention_heads)`,
    *optional*) ‚Äî Mask to nullify selected heads of the cross-attention modules. Mask
    values selected in `[0, 1]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 indicates the head is `not masked`,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 indicates the head is `masked`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_outputs` (`tuple(tuple(torch.FloatTensor)`, *optional*) ‚Äî Tuple consists
    of `last_hidden_state`, `hidden_states` (*optional*) and `attentions` (*optional*)
    `last_hidden_state` of shape `(batch_size, sequence_length, hidden_size)` (*optional*)
    is a sequence of hidden-states at the output of the last layer of the encoder.
    Used in the cross-attention of the decoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`past_key_values` (`tuple(tuple(torch.FloatTensor))`, *optional*, returned
    when `use_cache=True` is passed or when `config.use_cache=True`) ‚Äî Tuple of `tuple(torch.FloatTensor)`
    of length `config.n_layers`, with each tuple having 2 tensors of shape `(batch_size,
    num_heads, sequence_length, embed_size_per_head)`) and 2 additional tensors of
    shape `(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains pre-computed hidden-states (key and values in the self-attention blocks
    and in the cross-attention blocks) that can be used (see `past_key_values` input)
    to speed up sequential decoding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `past_key_values` are used, the user can optionally input only the last `decoder_input_ids`
    (those that don‚Äôt have their past key value states given to this model) of shape
    `(batch_size, 1)` instead of all `decoder_input_ids` of shape `(batch_size, sequence_length)`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`inputs_embeds` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) ‚Äî Optionally, instead of passing `input_ids` you can
    choose to directly pass an embedded representation. This is useful if you want
    more control over how to convert `input_ids` indices into associated vectors than
    the model‚Äôs internal embedding lookup matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_cache` (`bool`, *optional*) ‚Äî If set to `True`, `past_key_values` key
    value states are returned and can be used to speed up decoding (see `past_key_values`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*) ‚Äî Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.modeling_outputs.Seq2SeqTSPredictionOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.Seq2SeqTSPredictionOutput)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.modeling_outputs.Seq2SeqTSPredictionOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.Seq2SeqTSPredictionOutput)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([AutoformerConfig](/docs/transformers/v4.37.2/en/model_doc/autoformer#transformers.AutoformerConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when a `future_values`
    is provided) ‚Äî Distributional loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` (`torch.FloatTensor` of shape `(batch_size, num_samples, num_params)`)
    ‚Äî Parameters of the chosen distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`past_key_values` (`tuple(tuple(torch.FloatTensor))`, *optional*, returned
    when `use_cache=True` is passed or when `config.use_cache=True`) ‚Äî Tuple of `tuple(torch.FloatTensor)`
    of length `config.n_layers`, with each tuple having 2 tensors of shape `(batch_size,
    num_heads, sequence_length, embed_size_per_head)`) and 2 additional tensors of
    shape `(batch_size, num_heads, encoder_sequence_length, embed_size_per_head)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains pre-computed hidden-states (key and values in the self-attention blocks
    and in the cross-attention blocks) that can be used (see `past_key_values` input)
    to speed up sequential decoding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    ‚Äî Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the decoder at the output of each layer plus the initial embedding
    outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`decoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) ‚Äî
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the decoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`cross_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the decoder‚Äôs cross-attention layer, after the attention
    softmax, used to compute the weighted average in the cross-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`encoder_last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`, *optional*) ‚Äî Sequence of hidden-states at the output of the last
    layer of the encoder of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_hidden_states=True` is passed or when `config.output_hidden_states=True`)
    ‚Äî Tuple of `torch.FloatTensor` (one for the output of the embeddings, if the model
    has an embedding layer, + one for the output of each layer) of shape `(batch_size,
    sequence_length, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the encoder at the output of each layer plus the initial embedding
    outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`encoder_attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when
    `output_attentions=True` is passed or when `config.output_attentions=True`) ‚Äî
    Tuple of `torch.FloatTensor` (one for each layer) of shape `(batch_size, num_heads,
    sequence_length, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights of the encoder, after the attention softmax, used to compute
    the weighted average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`loc` (`torch.FloatTensor` of shape `(batch_size,)` or `(batch_size, input_size)`,
    *optional*) ‚Äî Shift values of each time series‚Äô context window which is used to
    give the model inputs of the same magnitude and then used to shift back to the
    original magnitude.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale` (`torch.FloatTensor` of shape `(batch_size,)` or `(batch_size, input_size)`,
    *optional*) ‚Äî Scaling values of each time series‚Äô context window which is used
    to give the model inputs of the same magnitude and then used to rescale back to
    the original magnitude.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static_features` (`torch.FloatTensor` of shape `(batch_size, feature size)`,
    *optional*) ‚Äî Static features of each time series‚Äô in a batch which are copied
    to the covariates at inference time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [AutoformerForPrediction](/docs/transformers/v4.37.2/en/model_doc/autoformer#transformers.AutoformerForPrediction)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
