- en: Upload files to the Hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/huggingface_hub/guides/upload](https://huggingface.co/docs/huggingface_hub/guides/upload)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: 'Sharing your files and work is an important aspect of the Hub. The `huggingface_hub`
    offers several options for uploading your files to the Hub. You can use these
    functions independently or integrate them into your library, making it more convenient
    for your users to interact with the Hub. This guide will show you how to push
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: without using Git.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: that are very large with [Git LFS](https://git-lfs.github.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with the `commit` context manager.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: with the [push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.push_to_hub)
    function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whenever you want to upload files to the Hub, you need to log in to your Hugging
    Face account. For more details about authentication, check out [this section](../quick-start#authentication).
  prefs: []
  type: TYPE_NORMAL
- en: Upload a file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you’ve created a repository with [create_repo()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo),
    you can upload a file to your repository using [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file).
  prefs: []
  type: TYPE_NORMAL
- en: Specify the path of the file to upload, where you want to upload the file to
    in the repository, and the name of the repository you want to add the file to.
    Depending on your repository type, you can optionally set the repository type
    as a `dataset`, `model`, or `space`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Upload a folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    function to upload a local folder to an existing repository. Specify the path
    of the local folder to upload, where you want to upload the folder to in the repository,
    and the name of the repository you want to add the folder to. Depending on your
    repository type, you can optionally set the repository type as a `dataset`, `model`,
    or `space`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By default, the `.gitignore` file will be taken into account to know which files
    should be committed or not. By default we check if a `.gitignore` file is present
    in a commit, and if not, we check if it exists on the Hub. Please be aware that
    only a `.gitignore` file present at the root of the directory with be used. We
    do not check for `.gitignore` files in subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want to use an hardcoded `.gitignore` file, you can use the `allow_patterns`
    and `ignore_patterns` arguments to filter which files to upload. These parameters
    accept either a single pattern or a list of patterns. Patterns are Standard Wildcards
    (globbing patterns) as documented [here](https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm).
    If both `allow_patterns` and `ignore_patterns` are provided, both constraints
    apply.
  prefs: []
  type: TYPE_NORMAL
- en: Beside the `.gitignore` file and allow/ignore patterns, any `.git/` folder present
    in any subdirectory will be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can also use the `delete_patterns` argument to specify files you want to
    delete from the repo in the same commit. This can prove useful if you want to
    clean a remote folder before pushing files in it and you don’t know which files
    already exists.
  prefs: []
  type: TYPE_NORMAL
- en: The example below uploads the local `./logs` folder to the remote `/experiment/logs/`
    folder. Only txt files are uploaded but before that, all previous logs on the
    repo on deleted. All of this in a single commit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Upload from the CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can use the `huggingface-cli upload` command from the terminal to directly
    upload files to the Hub. Internally it uses the same [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    and [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    helpers described above.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can either upload a single file or an entire folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`local_path` and `path_in_repo` are optional and can be implicitly inferred.
    If `local_path` is not set, the tool will check if a local folder or file has
    the same name as the `repo_id`. If that’s the case, its content will be uploaded.
    Otherwise, an exception is raised asking the user to explicitly set `local_path`.
    In any case, if `path_in_repo` is not set, files are uploaded at the root of the
    repo.'
  prefs: []
  type: TYPE_NORMAL
- en: For more details about the CLI upload command, please refer to the [CLI guide](./cli#huggingface-cli-upload).
  prefs: []
  type: TYPE_NORMAL
- en: Advanced features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In most cases, you won’t need more than [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    and [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    to upload your files to the Hub. However, `huggingface_hub` has more advanced
    features to make things easier. Let’s have a look at them!
  prefs: []
  type: TYPE_NORMAL
- en: Non-blocking uploads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, you want to push data without blocking your main thread. This
    is particularly useful to upload logs and artifacts while continuing a training.
    To do so, you can use the `run_as_future` argument in both [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    and [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder).
    This will return a [`concurrent.futures.Future`](https://docs.python.org/3/library/concurrent.futures.html#future-objects)
    object that you can use to check the status of the upload.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Background jobs are queued when using `run_as_future=True`. This means that
    you are guaranteed that the jobs will be executed in the correct order.
  prefs: []
  type: TYPE_NORMAL
- en: Even though background jobs are mostly useful to upload data/create commits,
    you can queue any method you like using [run_as_future()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.run_as_future).
    For instance, you can use it to create a repo and then upload data to it in the
    background. The built-in `run_as_future` argument in upload methods is just an
    alias around it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Upload a folder by chunks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    makes it easy to upload an entire folder to the Hub. However, for large folders
    (thousands of files or hundreds of GB), it can still be challenging. If you have
    a folder with a lot of files, you might want to upload it in several commits.
    If you experience an error or a connection issue during the upload, you would
    not have to resume the process from the beginning.'
  prefs: []
  type: TYPE_NORMAL
- en: To upload a folder in multiple commits, just pass `multi_commits=True` as argument.
    Under the hood, `huggingface_hub` will list the files to upload/delete and split
    them in several commits. The “strategy” (i.e. how to split the commits) is based
    on the number and size of the files to upload. A PR is open on the Hub to push
    all the commits. Once the PR is ready, the commits are squashed into a single
    commit. If the process is interrupted before completing, you can rerun your script
    to resume the upload. The created PR will be automatically detected and the upload
    will resume from where it stopped. It is recommended to pass `multi_commits_verbose=True`
    to get a better understanding of the upload and its progress.
  prefs: []
  type: TYPE_NORMAL
- en: The example below will upload the checkpoints folder to a dataset in multiple
    commits. A PR will be created on the Hub and merged automatically once the upload
    is complete. If you prefer the PR to stay open and review it manually, you can
    pass `create_pr=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you want a better control on the upload strategy (i.e. the commits that are
    created), you can have a look at the low-level [plan_multi_commits()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.plan_multi_commits)
    and [create_commits_on_pr()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commits_on_pr)
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: '`multi_commits` is still an experimental feature. Its API and behavior is subject
    to change in the future without prior notice.'
  prefs: []
  type: TYPE_NORMAL
- en: Scheduled uploads
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Hugging Face Hub makes it easy to save and version data. However, there
    are some limitations when updating the same file thousands of times. For instance,
    you might want to save logs of a training process or user feedback on a deployed
    Space. In these cases, uploading the data as a dataset on the Hub makes sense,
    but it can be hard to do properly. The main reason is that you don’t want to version
    every update of your data because it’ll make the git repository unusable. The
    [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)
    class offers a solution to this problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea is to run a background job that regularly pushes a local folder to
    the Hub. Let’s assume you have a Gradio Space that takes as input some text and
    generates two translations of it. Then, the user can select their preferred translation.
    For each run, you want to save the input, output, and user preference to analyze
    the results. This is a perfect use case for [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler);
    you want to save data to the Hub (potentially millions of user feedback), but
    you don’t *need* to save in real-time each user’s input. Instead, you can save
    the data locally in a JSON file and upload it every 10 minutes. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: And that’s it! User input/outputs and feedback will be available as a dataset
    on the Hub. By using a unique JSON file name, you are guaranteed you won’t overwrite
    data from a previous run or data from another Spaces/replicas pushing concurrently
    to the same repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details about the [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler),
    here is what you need to know:'
  prefs: []
  type: TYPE_NORMAL
- en: '**append-only:** It is assumed that you will only add content to the folder.
    You must only append data to existing files or create new files. Deleting or overwriting
    a file might corrupt your repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**git history**: The scheduler will commit the folder every `every` minutes.
    To avoid polluting the git repository too much, it is recommended to set a minimal
    value of 5 minutes. Besides, the scheduler is designed to avoid empty commits.
    If no new content is detected in the folder, the scheduled commit is dropped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**errors:** The scheduler run as background thread. It is started when you
    instantiate the class and never stops. In particular, if an error occurs during
    the upload (example: connection issue), the scheduler will silently ignore it
    and retry at the next scheduled commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**thread-safety:** In most cases it is safe to assume that you can write to
    a file without having to worry about a lock file. The scheduler will not crash
    or be corrupted if you write content to the folder while it’s uploading. In practice,
    *it is possible* that concurrency issues happen for heavy-loaded apps. In this
    case, we advice to use the `scheduler.lock` lock to ensure thread-safety. The
    lock is blocked only when the scheduler scans the folder for changes, not when
    it uploads data. You can safely assume that it will not affect the user experience
    on your Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Space persistence demo
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Persisting data from a Space to a Dataset on the Hub is the main use case for
    [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler).
    Depending on the use case, you might want to structure your data differently.
    The structure has to be robust to concurrent users and restarts which often implies
    generating UUIDs. Besides robustness, you should upload data in a format readable
    by the 🤗 Datasets library for later reuse. We created a [Space](https://huggingface.co/spaces/Wauplin/space_to_dataset_saver)
    that demonstrates how to save several different data formats (you may need to
    adapt it for your own specific needs).
  prefs: []
  type: TYPE_NORMAL
- en: Custom uploads
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)
    assumes your data is append-only and should be uploading “as is”. However, you
    might want to customize the way data is uploaded. You can do that by creating
    a class inheriting from [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)
    and overwrite the `push_to_hub` method (feel free to overwrite it any way you
    want). You are guaranteed it will be called every `every` minutes in a background
    thread. You don’t have to worry about concurrency and errors but you must be careful
    about other aspects, such as pushing empty commits or duplicated data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the (simplified) example below, we overwrite `push_to_hub` to zip all PNG
    files in a single archive to avoid overloading the repo on the Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When you overwrite `push_to_hub`, you have access to the attributes of [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)
    and especially:'
  prefs: []
  type: TYPE_NORMAL
- en: '[HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi)
    client: `api`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Folder parameters: `folder_path` and `path_in_repo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Repo parameters: `repo_id`, `repo_type`, `revision`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The thread lock: `lock`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more examples of custom schedulers, check out our [demo Space](https://huggingface.co/spaces/Wauplin/space_to_dataset_saver)
    containing different implementations depending on your use cases.
  prefs: []
  type: TYPE_NORMAL
- en: create_commit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    and [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    functions are high-level APIs that are generally convenient to use. We recommend
    trying these functions first if you don’t need to work at a lower level. However,
    if you want to work at a commit-level, you can use the [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    function directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of operations supported by [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit):'
  prefs: []
  type: TYPE_NORMAL
- en: '[CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd)
    uploads a file to the Hub. If the file already exists, the file contents are overwritten.
    This operation accepts two arguments:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_in_repo`: the repository path to upload a file to.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_or_fileobj`: either a path to a file on your filesystem or a file-like
    object. This is the content of the file to upload to the Hub.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CommitOperationDelete](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationDelete)
    removes a file or a folder from a repository. This operation accepts `path_in_repo`
    as an argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CommitOperationCopy](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationCopy)
    copies a file within a repository. This operation accepts three arguments:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src_path_in_repo`: the repository path of the file to copy.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_in_repo`: the repository path where the file should be copied.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src_revision`: optional - the revision of the file to copy if your want to
    copy a file from a different branch/revision.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if you want to upload two files and delete a file in a Hub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the appropriate `CommitOperation` to add or delete a file and to delete
    a folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass your operations to [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)
    and [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder),
    the following functions also use [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    under the hood:'
  prefs: []
  type: TYPE_NORMAL
- en: '[delete_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file)
    deletes a single file from a repository on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[delete_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_folder)
    deletes an entire folder from a repository on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[metadata_update()](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.metadata_update)
    updates a repository’s metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more detailed information, take a look at the [HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi)
    reference.
  prefs: []
  type: TYPE_NORMAL
- en: Preupload LFS files before commit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, you might want to upload huge files to S3 **before** making the
    commit call. For example, if you are committing a dataset in several shards that
    are generated in-memory, you would need to upload the shards one by one to avoid
    an out-of-memory issue. A solution is to upload each shard as a separate commit
    on the repo. While being perfectly valid, this solution has the drawback of potentially
    messing the git history by generating tens of commits. To overcome this issue,
    you can upload your files one by one to S3 and then create a single commit at
    the end. This is possible using [preupload_lfs_files()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.preupload_lfs_files)
    in combination with [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit).
  prefs: []
  type: TYPE_NORMAL
- en: This is a power-user method. Directly using [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file),
    [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    or [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    instead of handling the low-level logic of pre-uploading files is the way to go
    in the vast majority of cases. The main caveat of [preupload_lfs_files()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.preupload_lfs_files)
    is that until the commit is actually made, the upload files are not accessible
    on the repo on the Hub. If you have a question, feel free to ping us on our Discord
    or in a GitHub issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple example illustrating how to pre-upload files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: First, we create the [CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd)
    objects one by one. In a real-world example, those would contain the generated
    shards. Each file is uploaded before generating the next one. During the [preupload_lfs_files()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.preupload_lfs_files)
    step, **the `CommitOperationAdd` object is mutated**. You should only use it to
    pass it directly to [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit).
    The main update of the object is that **the binary content is removed** from it,
    meaning that it will be garbage-collected if you don’t store another reference
    to it. This is expected as we don’t want to keep in memory the content that is
    already uploaded. Finally we create the commit by passing all the operations to
    [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit).
    You can pass additional operations (add, delete or copy) that have not been processed
    yet and they will be handled correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks for large uploads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some limitations to be aware of when dealing with a large amount of
    data in your repo. Given the time it takes to stream the data, getting an upload/push
    to fail at the end of the process or encountering a degraded experience, be it
    on hf.co or when working locally, can be very annoying.
  prefs: []
  type: TYPE_NORMAL
- en: Check out our [Repository limitations and recommendations](https://huggingface.co/docs/hub/repositories-recommendations)
    guide for best practices on how to structure your repositories on the Hub. Next,
    let’s move on with some practical tips to make your upload process as smooth as
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: '**Start small**: We recommend starting with a small amount of data to test
    your upload script. It’s easier to iterate on a script when failing takes only
    a little time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expect failures**: Streaming large amounts of data is challenging. You don’t
    know what can happen, but it’s always best to consider that something will fail
    at least once -no matter if it’s due to your machine, your connection, or our
    servers. For example, if you plan to upload a large number of files, it’s best
    to keep track locally of which files you already uploaded before uploading the
    next batch. You are ensured that an LFS file that is already committed will never
    be re-uploaded twice but checking it client-side can still save some time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use `hf_transfer`**: this is a Rust-based [library](https://github.com/huggingface/hf_transfer)
    meant to speed up uploads on machines with very high bandwidth. To use it, you
    must install it (`pip install hf_transfer`) and enable it by setting `HF_HUB_ENABLE_HF_TRANSFER=1`
    as an environment variable. You can then use `huggingface_hub` normally. Disclaimer:
    this is a power user tool. It is tested and production-ready but lacks user-friendly
    features like advanced error handling or proxies. For more details, please refer
    to this [section](https://huggingface.co/docs/huggingface_hub/hf_transfer).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Progress bars are supported in `hf_transfer` starting from version `0.1.4`.
    Consider upgrading (`pip install -U hf-transfer`) if you plan to enable faster
    uploads.
  prefs: []
  type: TYPE_NORMAL
- en: (legacy) Upload files with Git LFS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the methods described above use the Hub’s API to upload files. This is the
    recommended way to upload files to the Hub. However, we also provide [Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository),
    a wrapper around the git tool to manage a local repository.
  prefs: []
  type: TYPE_NORMAL
- en: Although [Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)
    is not formally deprecated, we recommend using the HTTP-based methods described
    above instead. For more details about this recommendation, please have a look
    at [this guide](../concepts/git_vs_http) explaining the core differences between
    HTTP-based and Git-based approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Git LFS automatically handles files larger than 10MB. But for very large files
    (>5GB), you need to install a custom transfer agent for Git LFS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You should install this for each repository that has a very large file. Once
    installed, you’ll be able to push files larger than 5GB.
  prefs: []
  type: TYPE_NORMAL
- en: commit context manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `commit` context manager handles four of the most common Git commands:
    pull, add, commit, and push. `git-lfs` automatically tracks any file larger than
    10MB. In the following example, the `commit` context manager:'
  prefs: []
  type: TYPE_NORMAL
- en: Pulls from the `text-files` repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adds a change made to `file.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commits the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pushes the change to the `text-files` repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is another example of how to use the `commit` context manager to save
    and upload a file to a repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Set `blocking=False` if you would like to push your commits asynchronously.
    Non-blocking behavior is helpful when you want to continue running your script
    while your commits are being pushed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the status of your push with the `command_queue` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Refer to the table below for the possible statuses:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Status | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| -1 | The push is ongoing. |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | The push has completed successfully. |'
  prefs: []
  type: TYPE_TB
- en: '| Non-zero | An error has occurred. |'
  prefs: []
  type: TYPE_TB
- en: 'When `blocking=False`, commands are tracked, and your script will only exit
    when all pushes are completed, even if other errors occur in your script. Some
    additional useful commands for checking the status of a push include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: push_to_hub
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)
    class has a [push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.push_to_hub)
    function to add files, make a commit, and push them to a repository. Unlike the
    `commit` context manager, you’ll need to pull from a repository first before calling
    [push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.push_to_hub).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you’ve already cloned a repository from the Hub, then you can
    initialize the `repo` from the local directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Update your local clone with [git_pull()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_pull)
    and then push your file to the Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you aren’t ready to push a file yet, you can use [git_add()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_add)
    and [git_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_commit)
    to only add and commit your file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'When you’re ready, push the file to your repository with [git_push()](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository.git_push):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
