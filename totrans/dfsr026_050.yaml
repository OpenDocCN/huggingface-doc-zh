- en: Latent Consistency Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/using-diffusers/inference_with_lcm](https://huggingface.co/docs/diffusers/using-diffusers/inference_with_lcm)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Latent Consistency Models (LCM) enable quality image generation in typically
    2-4 steps making it possible to use diffusion models in almost real-time settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the [official website](https://latent-consistency-models.github.io/):'
  prefs: []
  type: TYPE_NORMAL
- en: LCMs can be distilled from any pre-trained Stable Diffusion (SD) in only 4,000
    training steps (~32 A100 GPU Hours) for generating high quality 768 x 768 resolution
    images in 2~4 steps or even one step, significantly accelerating text-to-image
    generation. We employ LCM to distill the Dreamshaper-V7 version of SD in just
    4,000 training iterations.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For a more technical overview of LCMs, refer to [the paper](https://huggingface.co/papers/2310.04378).
  prefs: []
  type: TYPE_NORMAL
- en: LCM distilled models are available for [stable-diffusion-v1-5](https://huggingface.co/runwayml/stable-diffusion-v1-5),
    [stable-diffusion-xl-base-1.0](https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0),
    and the [SSD-1B](https://huggingface.co/segmind/SSD-1B) model. All the checkpoints
    can be found in this [collection](https://huggingface.co/collections/latent-consistency/latent-consistency-models-weights-654ce61a95edd6dffccef6a8).
  prefs: []
  type: TYPE_NORMAL
- en: This guide shows how to perform inference with LCMs for
  prefs: []
  type: TYPE_NORMAL
- en: text-to-image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: image-to-image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: combined with style LoRAs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ControlNet/T2I-Adapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text-to-image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’ll use the [StableDiffusionXLPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/stable_diffusion_xl#diffusers.StableDiffusionXLPipeline)
    pipeline with the [LCMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/lcm#diffusers.LCMScheduler)
    and then load the LCM-LoRA. Together with the LCM-LoRA and the scheduler, the
    pipeline enables a fast inference workflow, overcoming the slow iterative nature
    of diffusion models.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2f5bfceba4374577d23ec1fd6d28cd1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we use only 4 steps for generation which is way less than what’s
    typically used for standard SDXL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some details to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: To perform classifier-free guidance, batch size is usually doubled inside the
    pipeline. LCM, however, applies guidance using guidance embeddings, so the batch
    size does not have to be doubled in this case. This leads to a faster inference
    time, with the drawback that negative prompts don’t have any effect on the denoising
    process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The UNet was trained using the [3., 13.] guidance scale range. So, that is the
    ideal range for `guidance_scale`. However, disabling `guidance_scale` using a
    value of 1.0 is also effective in most cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image-to-image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LCMs can be applied to image-to-image tasks too. For this example, we’ll use
    the [LCM_Dreamshaper_v7](https://huggingface.co/SimianLuo/LCM_Dreamshaper_v7)
    model, but the same steps can be applied to other LCM models as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f67c16e640d47cc0d1f4f9eea95aab20.png)'
  prefs: []
  type: TYPE_IMG
- en: You can get different results based on your prompt and the image you provide.
    To get the best results, we recommend trying different values for `num_inference_steps`,
    `strength`, and `guidance_scale` parameters and choose the best one.
  prefs: []
  type: TYPE_NORMAL
- en: Combine with style LoRAs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LCMs can be used with other styled LoRAs to generate styled-images in very few
    steps (4-8). In the following example, we’ll use the [papercut LoRA](TheLastBen/Papercut_SDXL).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5990d778b897e4cb4d8fc04103c7aeed.png)'
  prefs: []
  type: TYPE_IMG
- en: ControlNet/T2I-Adapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s look at how we can perform inference with ControlNet/T2I-Adapter and a
    LCM.
  prefs: []
  type: TYPE_NORMAL
- en: ControlNet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this example, we’ll use the [LCM_Dreamshaper_v7](https://huggingface.co/SimianLuo/LCM_Dreamshaper_v7)
    model with canny ControlNet, but the same steps can be applied to other LCM models
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/539bb3d9fdc5599b9dcff9248948bab5.png)'
  prefs: []
  type: TYPE_IMG
- en: The inference parameters in this example might not work for all examples, so
    we recommend trying different values for the `num_inference_steps`, `guidance_scale`,
    `controlnet_conditioning_scale`, and `cross_attention_kwargs` parameters and choosing
    the best one.
  prefs: []
  type: TYPE_NORMAL
- en: T2I-Adapter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example shows how to use the `lcm-sdxl` with the [Canny T2I-Adapter](TencentARC/t2i-adapter-canny-sdxl-1.0).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/83307ba0aa59bcdfc3f0183be54a659b.png)'
  prefs: []
  type: TYPE_IMG
