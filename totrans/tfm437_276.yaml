- en: MobileNet V2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/191.51152694.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Tip.c2ecdbf4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Docstring.17db21ae.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/ExampleCodeBlock.4f515aa9.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/PipelineTag.44585822.js">
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The MobileNet model was proposed in [MobileNetV2: Inverted Residuals and Linear
    Bottlenecks](https://arxiv.org/abs/1801.04381) by Mark Sandler, Andrew Howard,
    Menglong Zhu, Andrey Zhmoginov, Liang-Chieh Chen.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*In this paper we describe a new mobile architecture, MobileNetV2, that improves
    the state of the art performance of mobile models on multiple tasks and benchmarks
    as well as across a spectrum of different model sizes. We also describe efficient
    ways of applying these mobile models to object detection in a novel framework
    we call SSDLite. Additionally, we demonstrate how to build mobile semantic segmentation
    models through a reduced form of DeepLabv3 which we call Mobile DeepLabv3.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*The MobileNetV2 architecture is based on an inverted residual structure where
    the input and output of the residual block are thin bottleneck layers opposite
    to traditional residual models which use expanded representations in the input
    an MobileNetV2 uses lightweight depthwise convolutions to filter features in the
    intermediate expansion layer. Additionally, we find that it is important to remove
    non-linearities in the narrow layers in order to maintain representational power.
    We demonstrate that this improves performance and provide an intuition that led
    to this design. Finally, our approach allows decoupling of the input/output domains
    from the expressiveness of the transformation, which provides a convenient framework
    for further analysis. We measure our performance on Imagenet classification, COCO
    object detection, VOC image segmentation. We evaluate the trade-offs between accuracy,
    and number of operations measured by multiply-adds (MAdd), as well as the number
    of parameters.*'
  prefs: []
  type: TYPE_NORMAL
- en: This model was contributed by [matthijs](https://huggingface.co/Matthijs). The
    original code and weights can be found [here for the main model](https://github.com/tensorflow/models/tree/master/research/slim/nets/mobilenet)
    and [here for DeepLabV3+](https://github.com/tensorflow/models/tree/master/research/deeplab).
  prefs: []
  type: TYPE_NORMAL
- en: Usage tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The checkpoints are named **mobilenet_v2_*depth*_*size***, for example **mobilenet_v2_1.0_224**,
    where **1.0** is the depth multiplier (sometimes also referred to as ‚Äúalpha‚Äù or
    the width multiplier) and **224** is the resolution of the input images the model
    was trained on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though the checkpoint is trained on images of specific size, the model
    will work on images of any size. The smallest supported image size is 32x32.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One can use [MobileNetV2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2ImageProcessor)
    to prepare images for the model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The available image classification checkpoints are pre-trained on [ImageNet-1k](https://huggingface.co/datasets/imagenet-1k)
    (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000
    classes). However, the model predicts 1001 classes: the 1000 classes from ImageNet
    plus an extra ‚Äúbackground‚Äù class (index 0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The segmentation model uses a [DeepLabV3+](https://arxiv.org/abs/1802.02611)
    head. The available semantic segmentation checkpoints are pre-trained on [PASCAL
    VOC](http://host.robots.ox.ac.uk/pascal/VOC/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The original TensorFlow checkpoints use different padding rules than PyTorch,
    requiring the model to determine the padding amount at inference time, since this
    depends on the input image size. To use native PyTorch padding behavior, create
    a [MobileNetV2Config](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config)
    with `tf_padding = False`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unsupported features:'
  prefs: []
  type: TYPE_NORMAL
- en: The [MobileNetV2Model](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model)
    outputs a globally pooled version of the last hidden state. In the original model
    it is possible to use an average pooling layer with a fixed 7x7 window and stride
    1 instead of global pooling. For inputs that are larger than the recommended image
    size, this gives a pooled output that is larger than 1x1\. The Hugging Face implementation
    does not support this.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The original TensorFlow checkpoints include quantized models. We do not support
    these models as they include additional ‚ÄúFakeQuantization‚Äù operations to unquantize
    the weights.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It‚Äôs common to extract the output from the expansion layers at indices 10 and
    13, as well as the output from the final 1x1 convolution layer, for downstream
    purposes. Using `output_hidden_states=True` returns the output from all intermediate
    layers. There is currently no way to limit this to specific layers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DeepLabV3+ segmentation head does not use the final convolution layer from
    the backbone, but this layer gets computed anyway. There is currently no way to
    tell [MobileNetV2Model](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model)
    up to which layer it should run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of official Hugging Face and community (indicated by üåé) resources to
    help you get started with MobileNetV2.
  prefs: []
  type: TYPE_NORMAL
- en: Image Classification
  prefs: []
  type: TYPE_NORMAL
- en: '[MobileNetV2ForImageClassification](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification)
    is supported by this [example script](https://github.com/huggingface/transformers/tree/main/examples/pytorch/image-classification)
    and [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification.ipynb).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See also: [Image classification task guide](../tasks/image_classification)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Semantic segmentation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Semantic segmentation task guide](../tasks/semantic_segmentation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you‚Äôre interested in submitting a resource to be included here, please feel
    free to open a Pull Request and we‚Äôll review it! The resource should ideally demonstrate
    something new instead of duplicating an existing resource.
  prefs: []
  type: TYPE_NORMAL
- en: MobileNetV2Config
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.MobileNetV2Config'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/configuration_mobilenet_v2.py#L38)'
  prefs: []
  type: TYPE_NORMAL
- en: ( num_channels = 3 image_size = 224 depth_multiplier = 1.0 depth_divisible_by
    = 8 min_depth = 8 expand_ratio = 6.0 output_stride = 32 first_layer_is_expansion
    = True finegrained_output = True hidden_act = 'relu6' tf_padding = True classifier_dropout_prob
    = 0.8 initializer_range = 0.02 layer_norm_eps = 0.001 semantic_loss_ignore_index
    = 255 **kwargs )
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**num_channels** (`int`, *optional*, defaults to 3) ‚Äî The number of input channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_size** (`int`, *optional*, defaults to 224) ‚Äî The size (resolution)
    of each image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**depth_multiplier** (`float`, *optional*, defaults to 1.0) ‚Äî Shrinks or expands
    the number of channels in each layer. Default is 1.0, which starts the network
    with 32 channels. This is sometimes also called ‚Äúalpha‚Äù or ‚Äúwidth multiplier‚Äù.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**depth_divisible_by** (`int`, *optional*, defaults to 8) ‚Äî The number of channels
    in each layer will always be a multiple of this number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_depth** (`int`, *optional*, defaults to 8) ‚Äî All layers will have at
    least this many channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**expand_ratio** (`float`, *optional*, defaults to 6.0) ‚Äî The number of output
    channels of the first layer in each block is input channels times expansion ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_stride** (`int`, *optional*, defaults to 32) ‚Äî The ratio between the
    spatial resolution of the input and output feature maps. By default the model
    reduces the input dimensions by a factor of 32\. If `output_stride` is 8 or 16,
    the model uses dilated convolutions on the depthwise layers instead of regular
    convolutions, so that the feature maps never become more than 8x or 16x smaller
    than the input image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**first_layer_is_expansion** (`bool`, *optional*, defaults to `True`) ‚Äî True
    if the very first convolution layer is also the expansion layer for the first
    expansion block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**finegrained_output** (`bool`, *optional*, defaults to `True`) ‚Äî If true,
    the number of output channels in the final convolution layer will stay large (1280)
    even if `depth_multiplier` is less than 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hidden_act** (`str` or `function`, *optional*, defaults to `"relu6"`) ‚Äî The
    non-linear activation function (function or string) in the Transformer encoder
    and convolution layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tf_padding** (`bool`, *optional*, defaults to `True`) ‚Äî Whether to use TensorFlow
    padding rules on the convolution layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**classifier_dropout_prob** (`float`, *optional*, defaults to 0.8) ‚Äî The dropout
    ratio for attached classifiers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**initializer_range** (`float`, *optional*, defaults to 0.02) ‚Äî The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**layer_norm_eps** (`float`, *optional*, defaults to 0.001) ‚Äî The epsilon used
    by the layer normalization layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**semantic_loss_ignore_index** (`int`, *optional*, defaults to 255) ‚Äî The index
    that is ignored by the loss function of the semantic segmentation model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a [MobileNetV2Model](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model).
    It is used to instantiate a MobileNetV2 model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the MobileNetV2 [google/mobilenet_v2_1.0_224](https://huggingface.co/google/mobilenet_v2_1.0_224)
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: MobileNetV2FeatureExtractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.MobileNetV2FeatureExtractor'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/feature_extraction_mobilenet_v2.py#L26)'
  prefs: []
  type: TYPE_NORMAL
- en: ( *args **kwargs )
  prefs: []
  type: TYPE_NORMAL
- en: '#### preprocess'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/image_processing_mobilenet_v2.py#L170)'
  prefs: []
  type: TYPE_NORMAL
- en: '( images: Union do_resize: Optional = None size: Dict = None resample: Resampling
    = None do_center_crop: bool = None crop_size: Dict = None do_rescale: Optional
    = None rescale_factor: Optional = None do_normalize: Optional = None image_mean:
    Union = None image_std: Union = None return_tensors: Union = None data_format:
    Union = <ChannelDimension.FIRST: ''channels_first''> input_data_format: Union
    = None **kwargs )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**images** (`ImageInput`) ‚Äî Image to preprocess. Expects a single or batch
    of images with pixel values ranging from 0 to 255\. If passing in images with
    pixel values between 0 and 1, set `do_rescale=False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_resize** (`bool`, *optional*, defaults to `self.do_resize`) ‚Äî Whether
    to resize the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size** (`Dict[str, int]`, *optional*, defaults to `self.size`) ‚Äî Size of
    the image after resizing. Shortest edge of the image is resized to size[‚Äúshortest_edge‚Äù],
    with the longest edge resized to keep the input aspect ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**resample** (`PILImageResampling` filter, *optional*, defaults to `self.resample`)
    ‚Äî `PILImageResampling` filter to use if resizing the image e.g. `PILImageResampling.BILINEAR`.
    Only has an effect if `do_resize` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_center_crop** (`bool`, *optional*, defaults to `self.do_center_crop`)
    ‚Äî Whether to center crop the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**crop_size** (`Dict[str, int]`, *optional*, defaults to `self.crop_size`)
    ‚Äî Size of the center crop. Only has an effect if `do_center_crop` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_rescale** (`bool`, *optional*, defaults to `self.do_rescale`) ‚Äî Whether
    to rescale the image values between [0 - 1].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rescale_factor** (`float`, *optional*, defaults to `self.rescale_factor`)
    ‚Äî Rescale factor to rescale the image by if `do_rescale` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_normalize** (`bool`, *optional*, defaults to `self.do_normalize`) ‚Äî Whether
    to normalize the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_mean** (`float` or `List[float]`, *optional*, defaults to `self.image_mean`)
    ‚Äî Image mean to use if `do_normalize` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_std** (`float` or `List[float]`, *optional*, defaults to `self.image_std`)
    ‚Äî Image standard deviation to use if `do_normalize` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_tensors** (`str` or `TensorType`, *optional*) ‚Äî The type of tensors
    to return. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Return a list of `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_format** (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`)
    ‚Äî The channel dimension format for the output image. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Use the channel dimension format of the input image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_data_format** (`ChannelDimension` or `str`, *optional*) ‚Äî The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocess an image or batch of images.
  prefs: []
  type: TYPE_NORMAL
- en: '#### post_process_semantic_segmentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/image_processing_mobilenet_v2.py#L313)'
  prefs: []
  type: TYPE_NORMAL
- en: '( outputs target_sizes: List = None ) ‚Üí semantic_segmentation'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**outputs** ([MobileNetV2ForSemanticSegmentation](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation))
    ‚Äî Raw outputs of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target_sizes** (`List[Tuple]` of length `batch_size`, *optional*) ‚Äî List
    of tuples corresponding to the requested final size (height, width) of each prediction.
    If unset, predictions will not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: semantic_segmentation
  prefs: []
  type: TYPE_NORMAL
- en: '`List[torch.Tensor]` of length `batch_size`, where each item is a semantic
    segmentation map of shape (height, width) corresponding to the target_sizes entry
    (if `target_sizes` is specified). Each entry of each `torch.Tensor` correspond
    to a semantic class id.'
  prefs: []
  type: TYPE_NORMAL
- en: Converts the output of [MobileNetV2ForSemanticSegmentation](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation)
    into semantic segmentation maps. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: MobileNetV2ImageProcessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.MobileNetV2ImageProcessor'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/image_processing_mobilenet_v2.py#L49)'
  prefs: []
  type: TYPE_NORMAL
- en: '( do_resize: bool = True size: Optional = None resample: Resampling = <Resampling.BILINEAR:
    2> do_center_crop: bool = True crop_size: Dict = None do_rescale: bool = True
    rescale_factor: Union = 0.00392156862745098 do_normalize: bool = True image_mean:
    Union = None image_std: Union = None **kwargs )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**do_resize** (`bool`, *optional*, defaults to `True`) ‚Äî Whether to resize
    the image‚Äôs (height, width) dimensions to the specified `size`. Can be overridden
    by `do_resize` in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size** (`Dict[str, int]` *optional*, defaults to `{"shortest_edge" -- 256}`):
    Size of the image after resizing. The shortest edge of the image is resized to
    size[‚Äúshortest_edge‚Äù], with the longest edge resized to keep the input aspect
    ratio. Can be overridden by `size` in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**resample** (`PILImageResampling`, *optional*, defaults to `PILImageResampling.BILINEAR`)
    ‚Äî Resampling filter to use if resizing the image. Can be overridden by the `resample`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_center_crop** (`bool`, *optional*, defaults to `True`) ‚Äî Whether to center
    crop the image. If the input size is smaller than `crop_size` along any edge,
    the image is padded with 0‚Äôs and then center cropped. Can be overridden by the
    `do_center_crop` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**crop_size** (`Dict[str, int]`, *optional*, defaults to `{"height" -- 224,
    "width": 224}`): Desired output size when applying center-cropping. Only has an
    effect if `do_center_crop` is set to `True`. Can be overridden by the `crop_size`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_rescale** (`bool`, *optional*, defaults to `True`) ‚Äî Whether to rescale
    the image by the specified scale `rescale_factor`. Can be overridden by the `do_rescale`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rescale_factor** (`int` or `float`, *optional*, defaults to `1/255`) ‚Äî Scale
    factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method. do_normalize ‚Äî Whether to normalize the
    image. Can be overridden by the `do_normalize` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_mean** (`float` or `List[float]`, *optional*, defaults to `IMAGENET_STANDARD_MEAN`)
    ‚Äî Mean to use if normalizing the image. This is a float or list of floats the
    length of the number of channels in the image. Can be overridden by the `image_mean`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_std** (`float` or `List[float]`, *optional*, defaults to `IMAGENET_STANDARD_STD`)
    ‚Äî Standard deviation to use if normalizing the image. This is a float or list
    of floats the length of the number of channels in the image. Can be overridden
    by the `image_std` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructs a MobileNetV2 image processor.
  prefs: []
  type: TYPE_NORMAL
- en: '#### preprocess'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/image_processing_mobilenet_v2.py#L170)'
  prefs: []
  type: TYPE_NORMAL
- en: '( images: Union do_resize: Optional = None size: Dict = None resample: Resampling
    = None do_center_crop: bool = None crop_size: Dict = None do_rescale: Optional
    = None rescale_factor: Optional = None do_normalize: Optional = None image_mean:
    Union = None image_std: Union = None return_tensors: Union = None data_format:
    Union = <ChannelDimension.FIRST: ''channels_first''> input_data_format: Union
    = None **kwargs )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**images** (`ImageInput`) ‚Äî Image to preprocess. Expects a single or batch
    of images with pixel values ranging from 0 to 255\. If passing in images with
    pixel values between 0 and 1, set `do_rescale=False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_resize** (`bool`, *optional*, defaults to `self.do_resize`) ‚Äî Whether
    to resize the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size** (`Dict[str, int]`, *optional*, defaults to `self.size`) ‚Äî Size of
    the image after resizing. Shortest edge of the image is resized to size[‚Äúshortest_edge‚Äù],
    with the longest edge resized to keep the input aspect ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**resample** (`PILImageResampling` filter, *optional*, defaults to `self.resample`)
    ‚Äî `PILImageResampling` filter to use if resizing the image e.g. `PILImageResampling.BILINEAR`.
    Only has an effect if `do_resize` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_center_crop** (`bool`, *optional*, defaults to `self.do_center_crop`)
    ‚Äî Whether to center crop the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**crop_size** (`Dict[str, int]`, *optional*, defaults to `self.crop_size`)
    ‚Äî Size of the center crop. Only has an effect if `do_center_crop` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_rescale** (`bool`, *optional*, defaults to `self.do_rescale`) ‚Äî Whether
    to rescale the image values between [0 - 1].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rescale_factor** (`float`, *optional*, defaults to `self.rescale_factor`)
    ‚Äî Rescale factor to rescale the image by if `do_rescale` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**do_normalize** (`bool`, *optional*, defaults to `self.do_normalize`) ‚Äî Whether
    to normalize the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_mean** (`float` or `List[float]`, *optional*, defaults to `self.image_mean`)
    ‚Äî Image mean to use if `do_normalize` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image_std** (`float` or `List[float]`, *optional*, defaults to `self.image_std`)
    ‚Äî Image standard deviation to use if `do_normalize` is set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_tensors** (`str` or `TensorType`, *optional*) ‚Äî The type of tensors
    to return. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Return a list of `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**data_format** (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`)
    ‚Äî The channel dimension format for the output image. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Use the channel dimension format of the input image.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_data_format** (`ChannelDimension` or `str`, *optional*) ‚Äî The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocess an image or batch of images.
  prefs: []
  type: TYPE_NORMAL
- en: '#### post_process_semantic_segmentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/image_processing_mobilenet_v2.py#L313)'
  prefs: []
  type: TYPE_NORMAL
- en: '( outputs target_sizes: List = None ) ‚Üí semantic_segmentation'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**outputs** ([MobileNetV2ForSemanticSegmentation](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation))
    ‚Äî Raw outputs of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**target_sizes** (`List[Tuple]` of length `batch_size`, *optional*) ‚Äî List
    of tuples corresponding to the requested final size (height, width) of each prediction.
    If unset, predictions will not be resized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: semantic_segmentation
  prefs: []
  type: TYPE_NORMAL
- en: '`List[torch.Tensor]` of length `batch_size`, where each item is a semantic
    segmentation map of shape (height, width) corresponding to the target_sizes entry
    (if `target_sizes` is specified). Each entry of each `torch.Tensor` correspond
    to a semantic class id.'
  prefs: []
  type: TYPE_NORMAL
- en: Converts the output of [MobileNetV2ForSemanticSegmentation](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation)
    into semantic segmentation maps. Only supports PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: MobileNetV2Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.MobileNetV2Model'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py#L498)'
  prefs: []
  type: TYPE_NORMAL
- en: '( config: MobileNetV2Config add_pooling_layer: bool = True )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**config** ([MobileNetV2Config](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bare MobileNetV2 model outputting raw hidden-states without any specific
    head on top. This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py#L566)'
  prefs: []
  type: TYPE_NORMAL
- en: '( pixel_values: Optional = None output_hidden_states: Optional = None return_dict:
    Optional = None ) ‚Üí `transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention`
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**pixel_values** (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) ‚Äî Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [MobileNetV2ImageProcessor.**call**()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_hidden_states** (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention` or
    `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention` or
    a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([MobileNetV2Config](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**last_hidden_state** (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) ‚Äî Sequence of hidden-states at the output of the last layer of
    the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pooler_output** (`torch.FloatTensor` of shape `(batch_size, hidden_size)`)
    ‚Äî Last layer hidden-state after a pooling operation on the spatial dimensions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, num_channels, height,
    width)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [MobileNetV2Model](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Model)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: MobileNetV2ForImageClassification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.MobileNetV2ForImageClassification'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py#L615)'
  prefs: []
  type: TYPE_NORMAL
- en: '( config: MobileNetV2Config )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**config** ([MobileNetV2Config](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MobileNetV2 model with an image classification head on top (a linear layer on
    top of the pooled features), e.g. for ImageNet.
  prefs: []
  type: TYPE_NORMAL
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py#L638)'
  prefs: []
  type: TYPE_NORMAL
- en: '( pixel_values: Optional = None output_hidden_states: Optional = None labels:
    Optional = None return_dict: Optional = None ) ‚Üí [transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**pixel_values** (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) ‚Äî Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [MobileNetV2ImageProcessor.**call**()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_hidden_states** (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**labels** (`torch.LongTensor` of shape `(batch_size,)`, *optional*) ‚Äî Labels
    for computing the image classification/regression loss. Indices should be in `[0,
    ..., config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is
    computed (Mean-Square loss). If `config.num_labels > 1` a classification loss
    is computed (Cross-Entropy).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([MobileNetV2Config](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**loss** (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) ‚Äî Classification (or regression if config.num_labels==1) loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**logits** (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`)
    ‚Äî Classification (or regression if config.num_labels==1) scores (before SoftMax).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each stage) of shape `(batch_size, num_channels, height,
    width)`. Hidden-states (also called feature maps) of the model at the output of
    each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [MobileNetV2ForImageClassification](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForImageClassification)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: MobileNetV2ForSemanticSegmentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.MobileNetV2ForSemanticSegmentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py#L775)'
  prefs: []
  type: TYPE_NORMAL
- en: '( config: MobileNetV2Config )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**config** ([MobileNetV2Config](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MobileNetV2 model with a semantic segmentation head on top, e.g. for Pascal
    VOC.
  prefs: []
  type: TYPE_NORMAL
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/mobilenet_v2/modeling_mobilenet_v2.py#L792)'
  prefs: []
  type: TYPE_NORMAL
- en: '( pixel_values: Optional = None labels: Optional = None output_hidden_states:
    Optional = None return_dict: Optional = None ) ‚Üí [transformers.modeling_outputs.SemanticSegmenterOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**pixel_values** (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) ‚Äî Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [MobileNetV2ImageProcessor.**call**()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_hidden_states** (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**labels** (`torch.LongTensor` of shape `(batch_size, height, width)`, *optional*)
    ‚Äî Ground truth semantic segmentation maps for computing the loss. Indices should
    be in `[0, ..., config.num_labels - 1]`. If `config.num_labels > 1`, a classification
    loss is computed (Cross-Entropy).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.modeling_outputs.SemanticSegmenterOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.modeling_outputs.SemanticSegmenterOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.SemanticSegmenterOutput)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([MobileNetV2Config](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2Config))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '**loss** (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) ‚Äî Classification (or regression if config.num_labels==1) loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**logits** (`torch.FloatTensor` of shape `(batch_size, config.num_labels, logits_height,
    logits_width)`) ‚Äî Classification scores for each pixel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <tip warning="{true}">The logits returned do not necessarily have the same size
    as the `pixel_values` passed as inputs. This is to avoid doing two interpolations
    and lose some quality when a user needs to resize the logits to the original image
    size as post-processing. You should always check your logits shape and resize
    as needed.</tip>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**hidden_states** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, patch_size, hidden_size)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**attentions** (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, patch_size, sequence_length)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attentions weights after the attention softmax, used to compute the weighted
    average in the self-attention heads.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [MobileNetV2ForSemanticSegmentation](/docs/transformers/v4.37.2/en/model_doc/mobilenet_v2#transformers.MobileNetV2ForSemanticSegmentation)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
