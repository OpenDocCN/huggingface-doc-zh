- en: Latent Consistency Distillation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/training/lcm_distill](https://huggingface.co/docs/diffusers/training/lcm_distill)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: '[Latent Consistency Models (LCMs)](https://hf.co/papers/2310.04378) are able
    to generate high-quality images in just a few steps, representing a big leap forward
    because many pipelines require at least 25+ steps. LCMs are produced by applying
    the latent consistency distillation method to any Stable Diffusion model. This
    method works by applying *one-stage guided distillation* to the latent space,
    and incorporating a *skipping-step* method to consistently skip timesteps to accelerate
    the distillation process (refer to section 4.1, 4.2, and 4.3 of the paper for
    more details).'
  prefs: []
  type: TYPE_NORMAL
- en: If youâ€™re training on a GPU with limited vRAM, try enabling `gradient_checkpointing`,
    `gradient_accumulation_steps`, and `mixed_precision` to reduce memory-usage and
    speedup training. You can reduce your memory-usage even more by enabling memory-efficient
    attention with [xFormers](../optimization/xformers) and [bitsandbytesâ€™](https://github.com/TimDettmers/bitsandbytes)
    8-bit optimizer.
  prefs: []
  type: TYPE_NORMAL
- en: This guide will explore the [train_lcm_distill_sd_wds.py](https://github.com/huggingface/diffusers/blob/main/examples/consistency_distillation/train_lcm_distill_sd_wds.py)
    script to help you become more familiar with it, and how you can adapt it for
    your own use-case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the script, make sure you install the library from source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then navigate to the example folder containing the training script and install
    the required dependencies for the script youâ€™re using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: ðŸ¤— Accelerate is a library for helping you train on multiple GPUs/TPUs or with
    mixed-precision. Itâ€™ll automatically configure your training setup based on your
    hardware and environment. Take a look at the ðŸ¤— Accelerate [Quick tour](https://huggingface.co/docs/accelerate/quicktour)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize an ðŸ¤— Accelerate environment (try enabling `torch.compile` to significantly
    speedup training):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To setup a default ðŸ¤— Accelerate environment without choosing any configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or if your environment doesnâ€™t support an interactive shell, like a notebook,
    you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, if you want to train a model on your own dataset, take a look at the
    [Create a dataset for training](create_dataset) guide to learn how to create a
    dataset that works with the training script.
  prefs: []
  type: TYPE_NORMAL
- en: Script parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following sections highlight parts of the training script that are important
    for understanding how to modify it, but it doesnâ€™t cover every aspect of the script
    in detail. If youâ€™re interested in learning more, feel free to read through the
    [script](https://github.com/huggingface/diffusers/blob/main/examples/consistency_distillation/train_lcm_distill_sd_wds.py)
    and let us know if you have any questions or concerns.
  prefs: []
  type: TYPE_NORMAL
- en: The training script provides many parameters to help you customize your training
    run. All of the parameters and their descriptions are found in the [`parse_args()`](https://github.com/huggingface/diffusers/blob/3b37488fa3280aed6a95de044d7a42ffdcb565ef/examples/consistency_distillation/train_lcm_distill_sd_wds.py#L419)
    function. This function provides default values for each parameter, such as the
    training batch size and learning rate, but you can also set your own values in
    the training command if youâ€™d like.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to speedup training with mixed precision using the fp16 format,
    add the `--mixed_precision` parameter to the training command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Most of the parameters are identical to the parameters in the [Text-to-image](text2image#script-parameters)
    training guide, so youâ€™ll focus on the parameters that are relevant to latent
    consistency distillation in this guide.
  prefs: []
  type: TYPE_NORMAL
- en: '`--pretrained_teacher_model`: the path to a pretrained latent diffusion model
    to use as the teacher model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--pretrained_vae_model_name_or_path`: path to a pretrained VAE; the SDXL VAE
    is known to suffer from numerical instability, so this parameter allows you to
    specify an alternative VAE (like this [VAE]((https://huggingface.co/madebyollin/sdxl-vae-fp16-fix))
    by madebyollin which works in fp16)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--w_min` and `--w_max`: the minimum and maximum guidance scale values for
    guidance scale sampling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--num_ddim_timesteps`: the number of timesteps for DDIM sampling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--loss_type`: the type of loss (L2 or Huber) to calculate for latent consistency
    distillation; Huber loss is generally preferred because itâ€™s more robust to outliers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--huber_c`: the Huber loss parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The training script starts by creating a dataset class - [`Text2ImageDataset`](https://github.com/huggingface/diffusers/blob/3b37488fa3280aed6a95de044d7a42ffdcb565ef/examples/consistency_distillation/train_lcm_distill_sd_wds.py#L141)
    - for preprocessing the images and creating a training dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For improved performance on reading and writing large datasets stored in the
    cloud, this script uses the [WebDataset](https://github.com/webdataset/webdataset)
    format to create a preprocessing pipeline to apply transforms and create a dataset
    and dataloader for training. Images are processed and fed to the training loop
    without having to download the full dataset first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the [`main()`](https://github.com/huggingface/diffusers/blob/3b37488fa3280aed6a95de044d7a42ffdcb565ef/examples/consistency_distillation/train_lcm_distill_sd_wds.py#L768)
    function, all the necessary components like the noise scheduler, tokenizers, text
    encoders, and VAE are loaded. The teacher UNet is also loaded here and then you
    can create a student UNet from the teacher UNet. The student UNet is updated by
    the optimizer during training.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can create the [optimizer](https://github.com/huggingface/diffusers/blob/3b37488fa3280aed6a95de044d7a42ffdcb565ef/examples/consistency_distillation/train_lcm_distill_sd_wds.py#L979)
    to update the UNet parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the [dataset](https://github.com/huggingface/diffusers/blob/3b37488fa3280aed6a95de044d7a42ffdcb565ef/examples/consistency_distillation/train_lcm_distill_sd_wds.py#L994):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, youâ€™re ready to setup the [training loop](https://github.com/huggingface/diffusers/blob/3b37488fa3280aed6a95de044d7a42ffdcb565ef/examples/consistency_distillation/train_lcm_distill_sd_wds.py#L1049)
    and implement the latent consistency distillation method (see Algorithm 1 in the
    paper for more details). This section of the script takes care of adding noise
    to the latents, sampling and creating a guidance scale embedding, and predicting
    the original image from the noise.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It gets the [teacher model predictions](https://github.com/huggingface/diffusers/blob/3b37488fa3280aed6a95de044d7a42ffdcb565ef/examples/consistency_distillation/train_lcm_distill_sd_wds.py#L1172)
    and the [LCM predictions](https://github.com/huggingface/diffusers/blob/3b37488fa3280aed6a95de044d7a42ffdcb565ef/examples/consistency_distillation/train_lcm_distill_sd_wds.py#L1209)
    next, calculates the loss, and then backpropagates it to the LCM.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you want to learn more about how the training loop works, check out the [Understanding
    pipelines, models and schedulers tutorial](../using-diffusers/write_own_pipeline)
    which breaks down the basic pattern of the denoising process.
  prefs: []
  type: TYPE_NORMAL
- en: Launch the script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now youâ€™re ready to launch the training script and start distilling!
  prefs: []
  type: TYPE_NORMAL
- en: For this guide, youâ€™ll use the `--train_shards_path_or_url` to specify the path
    to the [Conceptual Captions 12M](https://github.com/google-research-datasets/conceptual-12m)
    dataset stored on the Hub [here](https://huggingface.co/datasets/laion/conceptual-captions-12m-webdataset).
    Set the `MODEL_DIR` environment variable to the name of the teacher model and
    `OUTPUT_DIR` to where you want to save the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Once training is complete, you can use your new LCM for inference.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: LoRA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LoRA is a training technique for significantly reducing the number of trainable
    parameters. As a result, training is faster and it is easier to store the resulting
    weights because they are a lot smaller (~100MBs). Use the [train_lcm_distill_lora_sd_wds.py](https://github.com/huggingface/diffusers/blob/main/examples/consistency_distillation/train_lcm_distill_lora_sd_wds.py)
    or [train_lcm_distill_lora_sdxl.wds.py](https://github.com/huggingface/diffusers/blob/main/examples/consistency_distillation/train_lcm_distill_lora_sdxl_wds.py)
    script to train with LoRA.
  prefs: []
  type: TYPE_NORMAL
- en: The LoRA training script is discussed in more detail in the [LoRA training](lora)
    guide.
  prefs: []
  type: TYPE_NORMAL
- en: Stable Diffusion XL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Stable Diffusion XL (SDXL) is a powerful text-to-image model that generates
    high-resolution images, and it adds a second text-encoder to its architecture.
    Use the [train_lcm_distill_sdxl_wds.py](https://github.com/huggingface/diffusers/blob/main/examples/consistency_distillation/train_lcm_distill_sdxl_wds.py)
    script to train a SDXL model with LoRA.
  prefs: []
  type: TYPE_NORMAL
- en: The SDXL training script is discussed in more detail in the [SDXL training](sdxl)
    guide.
  prefs: []
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Congratulations on distilling a LCM model! To learn more about LCM, the following
    may be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use [LCMs for inference](../using-diffusers/lcm) for text-to-image,
    image-to-image, and with LoRA checkpoints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the [SDXL in 4 steps with Latent Consistency LoRAs](https://huggingface.co/blog/lcm_lora)
    blog post to learn more about SDXL LCM-LoRAâ€™s for super fast inference, quality
    comparisons, benchmarks, and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
