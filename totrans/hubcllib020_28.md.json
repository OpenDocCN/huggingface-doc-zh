["```py\n( local_dir: Union clone_from: Optional = None repo_type: Optional = None token: Union = True git_user: Optional = None git_email: Optional = None revision: Optional = None skip_lfs_files: bool = False client: Optional = None )\n```", "```py\n( local_dir: Union clone_from: Optional = None repo_type: Optional = None token: Union = True git_user: Optional = None git_email: Optional = None revision: Optional = None skip_lfs_files: bool = False client: Optional = None )\n```", "```py\n( ) \u2192 export const metadata = 'undefined';str\n```", "```py\n( tag_name: str message: Optional = None remote: Optional = None )\n```", "```py\n( pattern: str = '.' ) \u2192 export const metadata = 'undefined';List[str]\n```", "```py\n( pattern: str = '.' ) \u2192 export const metadata = 'undefined';List[str]\n```", "```py\n( )\n```", "```py\n( repo_url: str token: Union = None )\n```", "```py\n( commit_message: str branch: Optional = None track_large_files: bool = True blocking: bool = True auto_lfs_prune: bool = False )\n```", "```py\n>>> with Repository(\n...     \"text-files\",\n...     clone_from=\"<user>/text-files\",\n...     token=True,\n>>> ).commit(\"My first file :)\"):\n...     with open(\"file.txt\", \"w+\") as f:\n...         f.write(json.dumps({\"hey\": 8}))\n\n>>> import torch\n\n>>> model = torch.nn.Transformer()\n>>> with Repository(\n...     \"torch-model\",\n...     clone_from=\"<user>/torch-model\",\n...     token=True,\n>>> ).commit(\"My cool model :)\"):\n...     torch.save(model.state_dict(), \"model.pt\")\n```", "```py\n( tag_name: str remote: Optional = None ) \u2192 export const metadata = 'undefined';bool\n```", "```py\n( pattern: str = '.' auto_lfs_track: bool = False )\n```", "```py\n( revision: str create_branch_ok: bool = False )\n```", "```py\n( commit_message: str = 'commit files to HF hub' )\n```", "```py\n( git_user: Optional = None git_email: Optional = None )\n```", "```py\n( )\n```", "```py\n( ) \u2192 export const metadata = 'undefined';str\n```", "```py\n( ) \u2192 export const metadata = 'undefined';str\n```", "```py\n( rebase: bool = False lfs: bool = False )\n```", "```py\n( upstream: Optional = None blocking: bool = True auto_lfs_prune: bool = False )\n```", "```py\n( ) \u2192 export const metadata = 'undefined';str\n```", "```py\n( ) \u2192 export const metadata = 'undefined';bool\n```", "```py\n( )\n```", "```py\n( recent = False )\n```", "```py\n( patterns: Union filename: bool = False )\n```", "```py\n( patterns: Union )\n```", "```py\n( ) \u2192 export const metadata = 'undefined';List[str]\n```", "```py\n( commit_message: str = 'commit files to HF hub' blocking: bool = True clean_ok: bool = True auto_lfs_prune: bool = False )\n```", "```py\n( tag_name: str remote: Optional = None ) \u2192 export const metadata = 'undefined';bool\n```", "```py\n( )\n```", "```py\n( folder: Union ) \u2192 export const metadata = 'undefined';bool\n```", "```py\n( folder: Union remote_url: str ) \u2192 export const metadata = 'undefined';bool\n```", "```py\n( filename: Union ) \u2192 export const metadata = 'undefined';bool\n```", "```py\n( filename: Union ) \u2192 export const metadata = 'undefined';bool\n```", "```py\n( pattern: str = '.' folder: Union = None ) \u2192 export const metadata = 'undefined';List[str]\n```", "```py\n( folder: Union ) \u2192 export const metadata = 'undefined';bool\n```", "```py\n( folder: Union upstream: Optional = None ) \u2192 export const metadata = 'undefined';int\n```", "```py\n( local_dir: Union clone_from: Optional = None repo_type: Optional = None token: Union = True git_user: Optional = None git_email: Optional = None revision: Optional = None skip_lfs_files: bool = False client: Optional = None )\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( title: str is_done_method: Callable status_method: Callable process: Popen post_method: Optional = None )\n```"]