["```py\n>>> from huggingface_hub import hf_hub_download\n>>> import re\n>>> from PIL import Image\n\n>>> from transformers import NougatProcessor, VisionEncoderDecoderModel\n>>> from datasets import load_dataset\n>>> import torch\n\n>>> processor = NougatProcessor.from_pretrained(\"facebook/nougat-base\")\n>>> model = VisionEncoderDecoderModel.from_pretrained(\"facebook/nougat-base\")\n\n>>> device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n>>> model.to(device)\n>>> # prepare PDF image for the model\n>>> filepath = hf_hub_download(repo_id=\"hf-internal-testing/fixtures_docvqa\", filename=\"nougat_paper.png\", repo_type=\"dataset\")\n>>> image = Image.open(filepath)\n>>> pixel_values = processor(image, return_tensors=\"pt\").pixel_values\n\n>>> # generate transcription (here we only generate 30 tokens)\n>>> outputs = model.generate(\n...     pixel_values.to(device),\n...     min_length=1,\n...     max_new_tokens=30,\n...     bad_words_ids=[[processor.tokenizer.unk_token_id]],\n... )\n\n>>> sequence = processor.batch_decode(outputs, skip_special_tokens=True)[0]\n>>> sequence = processor.post_process_generation(sequence, fix_markdown=False)\n>>> # note: we're using repr here such for the sake of printing the \\n characters, feel free to just print the sequence\n>>> print(repr(sequence))\n'\\n\\n# Nougat: Neural Optical Understanding for Academic Documents\\n\\n Lukas Blecher\\n\\nCorrespondence to: lblecher@'\n```", "```py\ncorrect_tables(\"\\begin{table} \\begin{tabular}{l l} & \\ \\end{tabular} \\end{table}\")\n\"\\begin{table}\nabular}{l l} & \\ \\end{tabular}\nle}\"\n```"]