["```py\n>>> from huggingface_hub import hf_hub_download\n>>> import re\n>>> from PIL import Image\n\n>>> from transformers import NougatProcessor, VisionEncoderDecoderModel\n>>> from datasets import load_dataset\n>>> import torch\n\n>>> processor = NougatProcessor.from_pretrained(\"facebook/nougat-base\")\n>>> model = VisionEncoderDecoderModel.from_pretrained(\"facebook/nougat-base\")\n\n>>> device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n>>> model.to(device)\n>>> # prepare PDF image for the model\n>>> filepath = hf_hub_download(repo_id=\"hf-internal-testing/fixtures_docvqa\", filename=\"nougat_paper.png\", repo_type=\"dataset\")\n>>> image = Image.open(filepath)\n>>> pixel_values = processor(image, return_tensors=\"pt\").pixel_values\n\n>>> # generate transcription (here we only generate 30 tokens)\n>>> outputs = model.generate(\n...     pixel_values.to(device),\n...     min_length=1,\n...     max_new_tokens=30,\n...     bad_words_ids=[[processor.tokenizer.unk_token_id]],\n... )\n\n>>> sequence = processor.batch_decode(outputs, skip_special_tokens=True)[0]\n>>> sequence = processor.post_process_generation(sequence, fix_markdown=False)\n>>> # note: we're using repr here such for the sake of printing the \\n characters, feel free to just print the sequence\n>>> print(repr(sequence))\n'\\n\\n# Nougat: Neural Optical Understanding for Academic Documents\\n\\n Lukas Blecher\\n\\nCorrespondence to: lblecher@'\n```", "```py\n( do_crop_margin: bool = True do_resize: bool = True size: Dict = None resample: Resampling = <Resampling.BILINEAR: 2> do_thumbnail: bool = True do_align_long_axis: bool = False do_pad: bool = True do_rescale: bool = True rescale_factor: Union = 0.00392156862745098 do_normalize: bool = True image_mean: Union = None image_std: Union = None **kwargs )\n```", "```py\n( images: Union do_crop_margin: bool = None do_resize: bool = None size: Dict = None resample: Resampling = None do_thumbnail: bool = None do_align_long_axis: bool = None do_pad: bool = None do_rescale: bool = None rescale_factor: Union = None do_normalize: bool = None image_mean: Union = None image_std: Union = None return_tensors: Union = None data_format: Optional = <ChannelDimension.FIRST: 'channels_first'> input_data_format: Union = None **kwargs )\n```", "```py\n( vocab_file = None tokenizer_file = None clean_up_tokenization_spaces = False unk_token = '<unk>' bos_token = '<s>' eos_token = '</s>' pad_token = '<pad>' **kwargs )\n```", "```py\n( generation: str ) \u2192 export const metadata = 'undefined';str\n```", "```py\ncorrect_tables(\"\\begin{table} \\begin{tabular}{l l} & \\ \\end{tabular} \\end{table}\")\n\"\\begin{table}\nabular}{l l} & \\ \\end{tabular}\nle}\"\n```", "```py\n( generation: Union fix_markdown: bool = True num_workers: int = None ) \u2192 export const metadata = 'undefined';Union[str, List[str]]\n```", "```py\n( generation: str fix_markdown: bool = True ) \u2192 export const metadata = 'undefined';str\n```", "```py\n( text: str ) \u2192 export const metadata = 'undefined';str\n```", "```py\n( image_processor tokenizer )\n```", "```py\n( images = None text = None do_crop_margin: bool = None do_resize: bool = None size: Dict = None resample: PILImageResampling = None do_thumbnail: bool = None do_align_long_axis: bool = None do_pad: bool = None do_rescale: bool = None rescale_factor: Union = None do_normalize: bool = None image_mean: Union = None image_std: Union = None data_format: Optional = 'channels_first' input_data_format: Union = None text_pair: Union = None text_target: Union = None text_pair_target: Union = None add_special_tokens: bool = True padding: Union = False truncation: Union = None max_length: Optional = None stride: int = 0 is_split_into_words: bool = False pad_to_multiple_of: Optional = None return_tensors: Union = None return_token_type_ids: Optional = None return_attention_mask: Optional = None return_overflowing_tokens: bool = False return_special_tokens_mask: bool = False return_offsets_mapping: bool = False return_length: bool = False verbose: bool = True )\n```", "```py\n( pretrained_model_name_or_path: Union cache_dir: Union = None force_download: bool = False local_files_only: bool = False token: Union = None revision: str = 'main' **kwargs )\n```", "```py\n( save_directory push_to_hub: bool = False **kwargs )\n```", "```py\n( *args **kwargs )\n```", "```py\n( *args **kwargs )\n```", "```py\n( *args **kwargs )\n```"]