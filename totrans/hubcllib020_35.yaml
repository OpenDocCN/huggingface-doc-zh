- en: Utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/huggingface_hub/package_reference/utilities](https://huggingface.co/docs/huggingface_hub/package_reference/utilities)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Configure logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `huggingface_hub` package exposes a `logging` utility to control the logging
    level of the package itself. You can import it as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you may define the verbosity in order to update the amount of logs you’ll
    see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The levels should be understood as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`error`: only show critical logs about usage which may result in an error or
    unexpected behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warning`: show logs that aren’t critical but usage may result in unintended
    behavior. Additionally, important informative logs may be shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info`: show most logs, including some verbose logging regarding what is happening
    under the hood. If something is behaving in an unexpected manner, we recommend
    switching the verbosity level to this in order to get more information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug`: show all logs, including some internal logs which may be used to track
    exactly what’s happening under the hood.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.logging.get_verbosity`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/logging.py#L103)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Return the current level for the HuggingFace Hub’s root logger.
  prefs: []
  type: TYPE_NORMAL
- en: 'HuggingFace Hub has following logging levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '`huggingface_hub.logging.CRITICAL`, `huggingface_hub.logging.FATAL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`huggingface_hub.logging.ERROR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`huggingface_hub.logging.WARNING`, `huggingface_hub.logging.WARN`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`huggingface_hub.logging.INFO`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`huggingface_hub.logging.DEBUG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.logging.set_verbosity`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/logging.py#L125)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`verbosity` (`int`) — Logging level, e.g., `huggingface_hub.logging.DEBUG`
    and `huggingface_hub.logging.INFO`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets the level for the HuggingFace Hub’s root logger.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.logging.set_verbosity_info`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/logging.py#L137)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Sets the verbosity to `logging.INFO`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.logging.set_verbosity_debug`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/logging.py#L151)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Sets the verbosity to `logging.DEBUG`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.logging.set_verbosity_warning`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/logging.py#L144)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Sets the verbosity to `logging.WARNING`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.logging.set_verbosity_error`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/logging.py#L158)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Sets the verbosity to `logging.ERROR`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.logging.disable_propagation`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/logging.py#L165)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Disable propagation of the library log outputs. Note that log propagation is
    disabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.logging.enable_propagation`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/logging.py#L173)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Enable propagation of the library log outputs. Please disable the HuggingFace
    Hub’s default handler to prevent double logging if the root logger has been configured.
  prefs: []
  type: TYPE_NORMAL
- en: Repo-specific helper methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The methods exposed below are relevant when modifying modules from the `huggingface_hub`
    library itself. Using these shouldn’t be necessary if you use `huggingface_hub`
    and you don’t modify them.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.logging.get_logger`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/logging.py#L78)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str`, *optional*) — The name of the logger to get, usually the filename'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns a logger with the specified name. This function is not supposed to be
    directly accessed by library users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Configure progress bars
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Progress bars are a useful tool to display information to the user while a long-running
    task is being executed (e.g. when downloading or uploading files). `huggingface_hub`
    exposes a `tqdm` wrapper to display progress bars in a consistent way across the
    library.
  prefs: []
  type: TYPE_NORMAL
- en: By default, progress bars are enabled. You can disable them globally by setting
    `HF_HUB_DISABLE_PROGRESS_BARS` environment variable. You can also enable/disable
    them using [enable_progress_bars()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.enable_progress_bars)
    and [disable_progress_bars()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.disable_progress_bars).
    If set, the environment variable has priority on the helpers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: are_progress_bars_disabled
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.are_progress_bars_disabled`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/tqdm.py#L112)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Return whether progress bars are globally disabled or not.
  prefs: []
  type: TYPE_NORMAL
- en: Progress bars used in `huggingface_hub` can be enable or disabled globally using
    [enable_progress_bars()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.enable_progress_bars)
    and [disable_progress_bars()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.disable_progress_bars)
    or by setting `HF_HUB_DISABLE_PROGRESS_BARS` as environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: disable_progress_bars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.disable_progress_bars`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/tqdm.py#L78)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Disable globally progress bars used in `huggingface_hub` except if `HF_HUB_DISABLE_PROGRESS_BARS`
    environment variable has been set.
  prefs: []
  type: TYPE_NORMAL
- en: Use [enable_progress_bars()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.enable_progress_bars)
    to re-enable them.
  prefs: []
  type: TYPE_NORMAL
- en: enable_progress_bars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.enable_progress_bars`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/tqdm.py#L95)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Enable globally progress bars used in `huggingface_hub` except if `HF_HUB_DISABLE_PROGRESS_BARS`
    environment variable has been set.
  prefs: []
  type: TYPE_NORMAL
- en: Use [disable_progress_bars()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.disable_progress_bars)
    to disable them.
  prefs: []
  type: TYPE_NORMAL
- en: Configure HTTP backend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some environments, you might want to configure how HTTP calls are made, for
    example if you are using a proxy. `huggingface_hub` let you configure this globally
    using [configure_http_backend()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.configure_http_backend).
    All requests made to the Hub will then use your settings. Under the hood, `huggingface_hub`
    uses `requests.Session` so you might want to refer to the [`requests` documentation](https://requests.readthedocs.io/en/latest/user/advanced)
    to learn more about the available parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Since `requests.Session` is not guaranteed to be thread-safe, `huggingface_hub`
    creates one session instance per thread. Using sessions allows us to keep the
    connection open between HTTP calls and ultimately save time. If you are integrating
    `huggingface_hub` in a third-party library and wants to make a custom call to
    the Hub, use [get_session()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.get_session)
    to get a Session configured by your users (i.e. replace any `requests.get(...)`
    call by `get_session().get(...)`).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.configure_http_backend`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_http.py#L98)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Configure the HTTP backend by providing a `backend_factory`. Any HTTP calls
    made by `huggingface_hub` will use a Session object instantiated by this factory.
    This can be useful if you are running your scripts in a specific environment requiring
    custom configuration (e.g. custom proxy or certifications).
  prefs: []
  type: TYPE_NORMAL
- en: Use [get_session()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.get_session)
    to get a configured Session. Since `requests.Session` is not guaranteed to be
    thread-safe, `huggingface_hub` creates 1 Session instance per thread. They are
    all instantiated using the same `backend_factory` set in [configure_http_backend()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.configure_http_backend).
    A LRU cache is used to cache the created sessions (and connections) between calls.
    Max size is 128 to avoid memory leaks if thousands of threads are spawned.
  prefs: []
  type: TYPE_NORMAL
- en: See [this issue](https://github.com/psf/requests/issues/2766) to know more about
    thread-safety in `requests`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '#### `huggingface_hub.get_session`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_http.py#L134)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Get a `requests.Session` object, using the session factory from the user.
  prefs: []
  type: TYPE_NORMAL
- en: Use [get_session()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.get_session)
    to get a configured Session. Since `requests.Session` is not guaranteed to be
    thread-safe, `huggingface_hub` creates 1 Session instance per thread. They are
    all instantiated using the same `backend_factory` set in [configure_http_backend()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.configure_http_backend).
    A LRU cache is used to cache the created sessions (and connections) between calls.
    Max size is 128 to avoid memory leaks if thousands of threads are spawned.
  prefs: []
  type: TYPE_NORMAL
- en: See [this issue](https://github.com/psf/requests/issues/2766) to know more about
    thread-safety in `requests`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Handle HTTP errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`huggingface_hub` defines its own HTTP errors to refine the `HTTPError` raised
    by `requests` with additional information sent back by the server.'
  prefs: []
  type: TYPE_NORMAL
- en: Raise for status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[hf_raise_for_status()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.hf_raise_for_status)
    is meant to be the central method to “raise for status” from any request made
    to the Hub. It wraps the base `requests.raise_for_status` to provide additional
    information. Any `HTTPError` thrown is converted into a `HfHubHTTPError`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '#### `huggingface_hub.utils.hf_raise_for_status`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_errors.py#L230)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`response` (`Response`) — Response from the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`endpoint_name` (`str`, *optional*) — Name of the endpoint that has been called.
    If provided, the error message will be more complete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal version of `response.raise_for_status()` that will refine a potential
    HTTPError. Raised exception will be an instance of `HfHubHTTPError`.
  prefs: []
  type: TYPE_NORMAL
- en: This helper is meant to be the unique method to raise_for_status when making
    a call to the Hugging Face Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Raises when the request has failed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, because `repo_type` is not set correctly, or because the repo is `private`
    and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GatedRepoError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.GatedRepoError)
    If the repository exists but is gated and the user is not on the authorized list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    If the repository exists but the revision couldn’t be find.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[EntryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.EntryNotFoundError)
    If the repository exists but the entry (e.g. the requested file) couldn’t be find.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BadRequestError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.BadRequestError)
    If request failed with a HTTP 400 BadRequest error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)
    If request failed for a reason not listed above.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is a list of HTTP errors thrown in `huggingface_hub`.
  prefs: []
  type: TYPE_NORMAL
- en: HfHubHTTPError
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`HfHubHTTPError` is the parent class for any HF Hub HTTP error. It takes care
    of parsing the server response and format the error message to provide as much
    information to the user as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.HfHubHTTPError`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_errors.py#L32)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: HTTPError to inherit from for any custom HTTP Error raised in HF Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Any HTTPError is converted at least into a `HfHubHTTPError`. If some information
    is sent back by the server, it will be added to the error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Added details:'
  prefs: []
  type: TYPE_NORMAL
- en: Request id from “X-Request-Id” header if exists.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server error message from the header “X-Error-Message”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server error message if we can found one in the response body.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '#### `append_to_message`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_errors.py#L109)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Append additional information to the `HfHubHTTPError` initial message.
  prefs: []
  type: TYPE_NORMAL
- en: RepositoryNotFoundError
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.RepositoryNotFoundError`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_errors.py#L114)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Raised when trying to access a hf.co URL with an invalid repository name, or
    with a private repo name the user does not have access to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: GatedRepoError
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.GatedRepoError`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_errors.py#L135)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Raised when trying to access a gated repository for which the user is not on
    the authorized list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: derives from `RepositoryNotFoundError` to ensure backward compatibility.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: RevisionNotFoundError
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.RevisionNotFoundError`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_errors.py#L157)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Raised when trying to access a hf.co URL with a valid repository but an invalid
    revision.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: EntryNotFoundError
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.EntryNotFoundError`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_errors.py#L175)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Raised when trying to access a hf.co URL with a valid repository and revision
    but an invalid filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: BadRequestError
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.BadRequestError`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_errors.py#L216)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Raised by `hf_raise_for_status` when the server returns a HTTP 400 error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: LocalEntryNotFoundError
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.LocalEntryNotFoundError`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_errors.py#L193)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Raised when trying to access a file or snapshot that is not on the disk when
    network is disabled or unavailable (connection issue). The entry may exist on
    the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: `ValueError` type is to ensure backward compatibility. Note: `LocalEntryNotFoundError`
    derives from `HTTPError` because of `EntryNotFoundError` even when it is not a
    network issue.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: OfflineModeIsEnabled
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.OfflineModeIsEnabled`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_http.py#L44)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Raised when a request is made but `HF_HUB_OFFLINE=1` is set as environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Telemetry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`huggingface_hub` includes an helper to send telemetry data. This information
    helps us debug issues and prioritize new features. Users can disable telemetry
    collection at any time by setting the `HF_HUB_DISABLE_TELEMETRY=1` environment
    variable. Telemetry is also disabled in offline mode (i.e. when setting HF_HUB_OFFLINE=1).'
  prefs: []
  type: TYPE_NORMAL
- en: If you are maintainer of a third-party library, sending telemetry data is as
    simple as making a call to `send_telemetry`. Data is sent in a separate thread
    to reduce as much as possible the impact for users.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.send_telemetry`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_telemetry.py#L20)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`topic` (`str`) — Name of the topic that is monitored. The topic is directly
    used to build the URL. If you want to monitor subtopics, just use ”/” separation.
    Examples: “gradio”, “transformers/examples”,…'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library_name` (`str`, *optional*) — The name of the library that is making
    the HTTP request. Will be added to the user-agent header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library_version` (`str`, *optional*) — The version of the library that is
    making the HTTP request. Will be added to the user-agent header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user_agent` (`str`, `dict`, *optional*) — The user agent info in the form
    of a dictionary or a single string. It will be completed with information about
    the installed packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sends telemetry that helps tracking usage of different HF libraries.
  prefs: []
  type: TYPE_NORMAL
- en: This usage data helps us debug issues and prioritize new features. However,
    we understand that not everyone wants to share additional information, and we
    respect your privacy. You can disable telemetry collection by setting the `HF_HUB_DISABLE_TELEMETRY=1`
    as environment variable. Telemetry is also disabled in offline mode (i.e. when
    setting `HF_HUB_OFFLINE=1`).
  prefs: []
  type: TYPE_NORMAL
- en: Telemetry collection is run in a separate thread to minimize impact for the
    user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Validators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`huggingface_hub` includes custom validators to validate method arguments automatically.
    Validation is inspired by the work done in [Pydantic](https://pydantic-docs.helpmanual.io/)
    to validate type hints but with more limited features.'
  prefs: []
  type: TYPE_NORMAL
- en: Generic decorator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[validate_hf_hub_args()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.validate_hf_hub_args)
    is a generic decorator to encapsulate methods that have arguments following `huggingface_hub`’s
    naming. By default, all arguments that has a validator implemented will be validated.'
  prefs: []
  type: TYPE_NORMAL
- en: If an input is not valid, a [HFValidationError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HFValidationError)
    is thrown. Only the first non-valid value throws an error and stops the validation
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: validate_hf_hub_args
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.validate_hf_hub_args`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_validators.py#L46)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[HFValidationError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HFValidationError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[HFValidationError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HFValidationError)
    — If an input is not valid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate values received as argument for any public method of `huggingface_hub`.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this decorator is to harmonize validation of arguments reused everywhere.
    By default, all defined validators are tested.
  prefs: []
  type: TYPE_NORMAL
- en: 'Validators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[validate_repo_id()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.validate_repo_id):
    `repo_id` must be `"repo_name"` or `"namespace/repo_name"`. Namespace is a username
    or an organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[smoothly_deprecate_use_auth_token()](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.smoothly_deprecate_use_auth_token):
    Use `token` instead of `use_auth_token` (only if `use_auth_token` is not expected
    by the decorated function - in practice, always the case in `huggingface_hub`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: HFValidationError
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.HFValidationError`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_validators.py#L39)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Generic exception thrown by `huggingface_hub` validators.
  prefs: []
  type: TYPE_NORMAL
- en: Inherits from [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError).
  prefs: []
  type: TYPE_NORMAL
- en: Argument validators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Validators can also be used individually. Here is a list of all arguments that
    can be validated.
  prefs: []
  type: TYPE_NORMAL
- en: repo_id
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.validate_repo_id`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_validators.py#L123)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Validate `repo_id` is valid.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is not meant to replace the proper validation made on the Hub but rather
    to avoid local inconsistencies whenever possible (example: passing `repo_type`
    in the `repo_id` is forbidden).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Between 1 and 96 characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Either “repo_name” or “namespace/repo_name”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[a-zA-Z0-9] or ”-”, ”_”, ”.”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ”—” and ”..” are forbidden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Valid: `"foo"`, `"foo/bar"`, `"123"`, `"Foo-BAR_foo.bar123"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Not valid: `"datasets/foo/bar"`, `".repo_id"`, `"foo--bar"`, `"foo.git"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Discussed in [https://github.com/huggingface/huggingface_hub/issues/1008](https://github.com/huggingface/huggingface_hub/issues/1008).
    In moon-landing (internal repository):'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/huggingface/moon-landing/blob/main/server/lib/Names.ts#L27](https://github.com/huggingface/moon-landing/blob/main/server/lib/Names.ts#L27)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/huggingface/moon-landing/blob/main/server/views/components/NewRepoForm/NewRepoForm.svelte#L138](https://github.com/huggingface/moon-landing/blob/main/server/views/components/NewRepoForm/NewRepoForm.svelte#L138)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: smoothly_deprecate_use_auth_token
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Not exactly a validator, but ran as well.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.utils.smoothly_deprecate_use_auth_token`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_validators.py#L177)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Smoothly deprecate `use_auth_token` in the `huggingface_hub` codebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'The long-term goal is to remove any mention of `use_auth_token` in the codebase
    in favor of a unique and less verbose `token` argument. This will be done a few
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 0: methods that require a read-access to the Hub use the `use_auth_token`
    argument (`str`, `bool` or `None`). Methods requiring write-access have a `token`
    argument (`str`, `None`). This implicit rule exists to be able to not send the
    token when not necessary (`use_auth_token=False`) even if logged in.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Step 1: we want to harmonize everything and use `token` everywhere (supporting
    `token=False` for read-only methods). In order not to break existing code, if
    `use_auth_token` is passed to a function, the `use_auth_token` value is passed
    as `token` instead, without any warning. a. Corner case: if both `use_auth_token`
    and `token` values are passed, a warning is thrown and the `use_auth_token` value
    is ignored.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Step 2: Once it is release, we should push downstream libraries to switch from
    `use_auth_token` to `token` as much as possible, but without throwing a warning
    (e.g. manually create issues on the corresponding repos).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Step 3: After a transitional period (6 months e.g. until April 2023?), we update
    `huggingface_hub` to throw a warning on `use_auth_token`. Hopefully, very few
    users will be impacted as it would have already been fixed. In addition, unit
    tests in `huggingface_hub` must be adapted to expect warnings to be thrown (but
    still use `use_auth_token` as before).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Step 4: After a normal deprecation cycle (3 releases ?), remove this validator.
    `use_auth_token` will definitely not be supported. In addition, we update unit
    tests in `huggingface_hub` to use `token` everywhere.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This has been discussed in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/huggingface/huggingface_hub/issues/1094](https://github.com/huggingface/huggingface_hub/issues/1094).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/huggingface/huggingface_hub/pull/928](https://github.com/huggingface/huggingface_hub/pull/928)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (related) [https://github.com/huggingface/huggingface_hub/pull/1064](https://github.com/huggingface/huggingface_hub/pull/1064)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
