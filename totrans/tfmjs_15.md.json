["```py\nnpm init -y\nnpm i @xenova/transformers\n```", "```py\nnpm i wavefile\n```", "```py\nimport { pipeline } from '@xenova/transformers';\nimport wavefile from 'wavefile';\n```", "```py\nlet transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\n```", "```py\n// Load audio data\nlet url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\nlet buffer = Buffer.from(await fetch(url).then(x => x.arrayBuffer()))\n\n// Read .wav file and convert it to required format\nlet wav = new wavefile.WaveFile(buffer);\nwav.toBitDepth('32f'); // Pipeline expects input as a Float32Array\nwav.toSampleRate(16000); // Whisper expects audio with a sampling rate of 16000\nlet audioData = wav.getSamples();\nif (Array.isArray(audioData)) {\n  if (audioData.length > 1) {\n    const SCALING_FACTOR = Math.sqrt(2);\n\n    // Merge channels (into first channel to save memory)\n    for (let i = 0; i < audioData[0].length; ++i) {\n      audioData[0][i] = SCALING_FACTOR * (audioData[0][i] + audioData[1][i]) / 2;\n    }\n  }\n\n  // Select first channel\n  audioData = audioData[0];\n}\n```", "```py\nlet start = performance.now();\nlet output = await transcriber(audioData);\nlet end = performance.now();\nconsole.log(`Execution duration: ${(end - start) / 1000} seconds`);\nconsole.log(output);\n```", "```py\nExecution duration: 0.6460317999720574 seconds\n{\n  text: ' And so my fellow Americans ask not what your country can do for you. Ask what you can do for your country.'\n}\n```"]