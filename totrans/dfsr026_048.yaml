- en: Contribute a community pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/diffusers/using-diffusers/contribute_pipeline](https://huggingface.co/docs/diffusers/using-diffusers/contribute_pipeline)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/159.ae8f10b2.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Tip.230e2334.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/CodeBlock.57fe6e13.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
  prefs: []
  type: TYPE_NORMAL
- en: 💡 Take a look at GitHub Issue [#841](https://github.com/huggingface/diffusers/issues/841)
    for more context about why we’re adding community pipelines to help everyone easily
    share their work without being slowed down.
  prefs: []
  type: TYPE_NORMAL
- en: Community pipelines allow you to add any additional features you’d like on top
    of the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline).
    The main benefit of building on top of the `DiffusionPipeline` is anyone can load
    and use your pipeline by only adding one more argument, making it super easy for
    the community to access.
  prefs: []
  type: TYPE_NORMAL
- en: This guide will show you how to create a community pipeline and explain how
    they work. To keep things simple, you’ll create a “one-step” pipeline where the
    `UNet` does a single forward pass and calls the scheduler once.
  prefs: []
  type: TYPE_NORMAL
- en: Initialize the pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You should start by creating a `one_step_unet.py` file for your community pipeline.
    In this file, create a pipeline class that inherits from the [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    to be able to load model weights and the scheduler configuration from the Hub.
    The one-step pipeline needs a `UNet` and a scheduler, so you’ll need to add these
    as arguments to the `__init__` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure your pipeline and its components (`unet` and `scheduler`) can be
    saved with [save_pretrained()](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline.save_pretrained),
    add them to the `register_modules` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Cool, the `__init__` step is done and you can move to the forward pass now!
    🔥
  prefs: []
  type: TYPE_NORMAL
- en: Define the forward pass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the forward pass, which we recommend defining as `__call__`, you have complete
    creative freedom to add whatever feature you’d like. For our amazing one-step
    pipeline, create a random image and only call the `unet` and `scheduler` once
    by setting `timestep=1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s it! 🚀 You can now run this pipeline by passing a `unet` and `scheduler`
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'But what’s even better is you can load pre-existing weights into the pipeline
    if the pipeline structure is identical. For example, you can load the [`google/ddpm-cifar10-32`](https://huggingface.co/google/ddpm-cifar10-32)
    weights into the one-step pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Share your pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a Pull Request on the 🧨 Diffusers [repository](https://github.com/huggingface/diffusers)
    to add your awesome pipeline in `one_step_unet.py` to the [examples/community](https://github.com/huggingface/diffusers/tree/main/examples/community)
    subfolder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it is merged, anyone with `diffusers >= 0.4.0` installed can use this
    pipeline magically 🪄 by specifying it in the `custom_pipeline` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to share your community pipeline is to upload the `one_step_unet.py`
    file directly to your preferred [model repository](https://huggingface.co/docs/hub/models-uploading)
    on the Hub. Instead of specifying the `one_step_unet.py` file, pass the model
    repository id to the `custom_pipeline` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following table to compare the two sharing workflows to
    help you decide the best option for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | GitHub community pipeline | HF Hub community pipeline |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| usage | same | same |'
  prefs: []
  type: TYPE_TB
- en: '| review process | open a Pull Request on GitHub and undergo a review process
    from the Diffusers team before merging; may be slower | upload directly to a Hub
    repository without any review; this is the fastest workflow |'
  prefs: []
  type: TYPE_TB
- en: '| visibility | included in the official Diffusers repository and documentation
    | included on your HF Hub profile and relies on your own usage/promotion to gain
    visibility |'
  prefs: []
  type: TYPE_TB
- en: 💡 You can use whatever package you want in your community pipeline file - as
    long as the user has it installed, everything will work fine. Make sure you have
    one and only one pipeline class that inherits from `DiffusionPipeline` because
    this is automatically detected.
  prefs: []
  type: TYPE_NORMAL
- en: How do community pipelines work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A community pipeline is a class that inherits from [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    which means:'
  prefs: []
  type: TYPE_NORMAL
- en: It can be loaded with the `custom_pipeline` argument.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The model weights and scheduler configuration are loaded from `pretrained_model_name_or_path`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code that implements a feature in the community pipeline is defined in a
    `pipeline.py` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sometimes you can’t load all the pipeline components weights from an official
    repository. In this case, the other components should be passed directly to the
    pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The magic behind community pipelines is contained in the following code. It
    allows the community pipeline to be loaded from GitHub or the Hub, and it’ll be
    available to all 🧨 Diffusers packages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
