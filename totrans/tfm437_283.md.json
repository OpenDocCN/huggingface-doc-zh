["```py\n>>> from transformers import ResNetConfig, ResNetModel\n\n>>> # Initializing a ResNet resnet-50 style configuration\n>>> configuration = ResNetConfig()\n\n>>> # Initializing a model (with random weights) from the resnet-50 style configuration\n>>> model = ResNetModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, ResNetModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"microsoft/resnet-50\")\n>>> model = ResNetModel.from_pretrained(\"microsoft/resnet-50\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 2048, 7, 7]\n```", "```py\n>>> from transformers import AutoImageProcessor, ResNetForImageClassification\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"microsoft/resnet-50\")\n>>> model = ResNetForImageClassification.from_pretrained(\"microsoft/resnet-50\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = logits.argmax(-1).item()\n>>> print(model.config.id2label[predicted_label])\ntiger cat\n```", "```py\n>>> from transformers import AutoImageProcessor, TFResNetModel\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"microsoft/resnet-50\")\n>>> model = TFResNetModel.from_pretrained(\"microsoft/resnet-50\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 2048, 7, 7]\n```", "```py\n>>> from transformers import AutoImageProcessor, TFResNetForImageClassification\n>>> import tensorflow as tf\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"microsoft/resnet-50\")\n>>> model = TFResNetForImageClassification.from_pretrained(\"microsoft/resnet-50\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = int(tf.math.argmax(logits, axis=-1))\n>>> print(model.config.id2label[predicted_label])\ntiger cat\n```", "```py\n>>> from transformers import AutoImageProcessor, FlaxResNetModel\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n>>> image_processor = AutoImageProcessor.from_pretrained(\"microsoft/resnet-50\")\n>>> model = FlaxResNetModel.from_pretrained(\"microsoft/resnet-50\")\n>>> inputs = image_processor(images=image, return_tensors=\"np\")\n>>> outputs = model(**inputs)\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoImageProcessor, FlaxResNetForImageClassification\n>>> from PIL import Image\n>>> import jax\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"microsoft/resnet-50\")\n>>> model = FlaxResNetForImageClassification.from_pretrained(\"microsoft/resnet-50\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"np\")\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_class_idx = jax.numpy.argmax(logits, axis=-1)\n>>> print(\"Predicted class:\", model.config.id2label[predicted_class_idx.item()])\n```"]