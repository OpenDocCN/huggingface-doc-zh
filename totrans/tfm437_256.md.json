["```py\n>>> from transformers import ConvNextConfig, ConvNextModel\n\n>>> # Initializing a ConvNext convnext-tiny-224 style configuration\n>>> configuration = ConvNextConfig()\n\n>>> # Initializing a model (with random weights) from the convnext-tiny-224 style configuration\n>>> model = ConvNextModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, ConvNextModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/convnext-tiny-224\")\n>>> model = ConvNextModel.from_pretrained(\"facebook/convnext-tiny-224\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 768, 7, 7]\n```", "```py\n>>> from transformers import AutoImageProcessor, ConvNextForImageClassification\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/convnext-tiny-224\")\n>>> model = ConvNextForImageClassification.from_pretrained(\"facebook/convnext-tiny-224\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = logits.argmax(-1).item()\n>>> print(model.config.id2label[predicted_label])\ntabby, tabby cat\n```", "```py\n>>> from transformers import AutoImageProcessor, TFConvNextModel\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/convnext-tiny-224\")\n>>> model = TFConvNextModel.from_pretrained(\"facebook/convnext-tiny-224\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoImageProcessor, TFConvNextForImageClassification\n>>> import tensorflow as tf\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/convnext-tiny-224\")\n>>> model = TFConvNextForImageClassification.from_pretrained(\"facebook/convnext-tiny-224\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_class_idx = tf.math.argmax(logits, axis=-1)[0]\n>>> print(\"Predicted class:\", model.config.id2label[int(predicted_class_idx)])\n```"]