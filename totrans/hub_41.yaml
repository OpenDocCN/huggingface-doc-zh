- en: Docker Spaces
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker Spaces
- en: 'Original text: [https://huggingface.co/docs/hub/spaces-sdks-docker](https://huggingface.co/docs/hub/spaces-sdks-docker)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/hub/spaces-sdks-docker](https://huggingface.co/docs/hub/spaces-sdks-docker)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Spaces accommodate custom [Docker containers](https://docs.docker.com/get-started/)
    for apps outside the scope of Streamlit and Gradio. Docker Spaces allow users
    to go beyond the limits of what was previously possible with the standard SDKs.
    From FastAPI and Go endpoints to Phoenix apps and ML Ops tools, Docker Spaces
    can help in many different setups.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Spaces可以容纳用于Streamlit和Gradio范围之外的应用程序的自定义[Docker容器](https://docs.docker.com/get-started/)。Docker
    Spaces允许用户超越标准SDK之前可能的限制。从FastAPI和Go端点到Phoenix应用程序和ML Ops工具，Docker Spaces可以帮助在许多不同的设置中。
- en: Setting up Docker Spaces
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Docker Spaces
- en: 'Selecting **Docker** as the SDK when [creating a new Space](https://huggingface.co/new-space)
    will initialize your Space by setting the `sdk` property to `docker` in your `README.md`
    file’s YAML block. Alternatively, given an existing Space repository, set `sdk:
    docker` inside the `YAML` block at the top of your Spaces **README.md** file.
    You can also change the default exposed port `7860` by setting `app_port: 7860`.
    Afterwards, you can create a usual `Dockerfile`.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '选择**Docker**作为SDK，当[创建一个新的Space](https://huggingface.co/new-space)时，将通过在`README.md`文件的YAML块中将`sdk`属性设置为`docker`来初始化您的Space。或者，对于现有的Space存储库，可以在Spaces的**README.md**文件顶部的YAML块中设置`sdk:
    docker`。您还可以通过设置`app_port: 7860`来更改默认暴露的端口`7860`。之后，您可以创建一个通常的`Dockerfile`。'
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Internally you could have as many open ports as you want. For instance, you
    can install Elasticsearch inside your Space and call it internally on its default
    port 9200.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部，您可以拥有任意数量的开放端口。例如，您可以在Space内部安装Elasticsearch，并在其默认端口9200上内部调用它。
- en: If you want to expose apps served on multiple ports to the outside world, a
    workaround is to use a reverse proxy like Nginx to dispatch requests from the
    broader internet (on a single port) to different internal ports.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将在多个端口上提供的应用程序暴露给外部世界，一个解决方法是使用反向代理，如Nginx，将来自更广泛互联网的请求（在单个端口上）分发到不同的内部端口。
- en: Secrets and Variables Management
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 秘密和变量管理
- en: You can manage a Space’s environment variables in the Space Settings. Read more
    [here](./spaces-overview#managing-secrets).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Space设置中管理Space的环境变量。在[这里](./spaces-overview#managing-secrets)阅读更多。
- en: Variables
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: Buildtime
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建时
- en: Variables are passed as `build-arg`s when building your Docker Space. Read [Docker’s
    dedicated documentation](https://docs.docker.com/engine/reference/builder/#arg)
    for a complete guide on how to use this in the Dockerfile.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建Docker Space时，变量作为`build-arg`传递。阅读[Docker的专用文档](https://docs.docker.com/engine/reference/builder/#arg)以获取有关如何在Dockerfile中使用此功能的完整指南。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Runtime
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行时
- en: Variables are injected in the container’s environment at runtime.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 变量在容器的运行时环境中注入。
- en: Secrets
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 秘密
- en: Buildtime
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 构建时
- en: 'In Docker Spaces, the secrets management is different for security reasons.
    Once you create a secret in the [Settings tab](./spaces-overview#managing-secrets),
    you can expose the secret by adding the following line in your Dockerfile:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker Spaces中，出于安全原因，秘密管理方式有所不同。一旦在[设置选项卡](./spaces-overview#managing-secrets)中创建了一个秘密，您可以通过在Dockerfile中添加以下行来公开该秘密：
- en: For example, if `SECRET_EXAMPLE` is the name of the secret you created in the
    Settings tab, you can read it at build time by mounting it to a file, then reading
    it with `$(cat /run/secrets/SECRET_EXAMPLE)`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果`SECRET_EXAMPLE`是您在设置选项卡中创建的秘密的名称，您可以通过将其挂载到文件中，然后使用`$(cat /run/secrets/SECRET_EXAMPLE)`在构建时读取它。
- en: 'See an example below:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 查看下面的示例：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Runtime
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 运行时
- en: Same as for public Variables, at runtime, you can access the secrets as environment
    variables. For example, in Python you would use `os.environ.get("SECRET_EXAMPLE")`.
    Check out this [example](https://huggingface.co/spaces/DockerTemplates/secret-example)
    of a Docker Space that uses secrets.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与公共变量一样，在运行时，您可以将秘密作为环境变量访问。例如，在Python中，您可以使用`os.environ.get("SECRET_EXAMPLE")`。查看使用秘密的Docker
    Space的[示例](https://huggingface.co/spaces/DockerTemplates/secret-example)。
- en: Permissions
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限
- en: The container runs with user ID 1000\. To avoid permission issues you should
    create a user and set its `WORKDIR` before any `COPY` or download.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 容器以用户ID 1000运行。为了避免权限问题，您应该在任何`COPY`或下载之前创建一个用户并设置其`WORKDIR`。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Always specify the `--chown=user` with `ADD` and `COPY` to ensure the new files
    are owned by your user.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 始终使用`--chown=user`与`ADD`和`COPY`一起，以确保新文件由您的用户拥有。
- en: 'If you still face permission issues, you might need to use `chmod` or `chown`
    in your `Dockerfile` to grant the right permissions. For example, if you want
    to use the directory `/data`, you can do:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍然遇到权限问题，您可能需要在`Dockerfile`中使用`chmod`或`chown`来授予正确的权限。例如，如果您想使用目录`/data`，您可以执行：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You should always avoid superfluous chowns.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该始终避免不必要的chowns。
- en: Updating metadata for a file creates a new copy stored in the new layer. Therefore,
    a recursive chown can result in a very large image due to the duplication of all
    affected files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 更新文件的元数据会创建一个存储在新层中的新副本。因此，递归的chown可能会导致镜像非常大，因为所有受影响的文件都会重复。
- en: 'Rather than fixing permission by running `chown`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是通过运行`chown`来修复权限：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'you should always do:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该始终执行：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: (same goes for `ADD` command)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: （`ADD`命令也是如此）
- en: Data Persistence
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据持久性
- en: The data written on disk is lost whenever your Docker Space restarts, unless
    you opt-in for a [persistent storage](./spaces-storage) upgrade.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在磁盘上写入的数据在您的Docker Space重新启动时会丢失，除非您选择进行[持久存储](./spaces-storage)升级。
- en: If you opt-in for a persistent storage upgrade, you can use the `/data` directory
    to store data. This directory is mounted on a persistent volume, which means that
    the data written in this directory will be persisted across restarts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择进行持久存储升级，您可以使用`/data`目录来存储数据。该目录被挂载在持久卷上，这意味着在该目录中写入的数据将在重新启动时保留。
- en: At the moment, `/data` volume is only available at runtime, i.e. you cannot
    use `/data` during the build step of your Dockerfile.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`/data`卷仅在运行时可用，即您不能在Dockerfile的构建步骤中使用`/data`。
- en: You can also use our Datasets Hub for specific cases, where you can store state
    and data in a git LFS repository. You can find an example of persistence [here](https://huggingface.co/spaces/Wauplin/space_to_dataset_saver),
    which uses the [`huggingface_hub` library](https://huggingface.co/docs/huggingface_hub/index)
    for programmatically uploading files to a dataset repository. This Space example
    along with [this guide](https://huggingface.co/docs/huggingface_hub/main/en/guides/upload#scheduled-uploads)
    will help you define which solution fits best your data type.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以针对特定情况使用我们的数据集中心，您可以将状态和数据存储在git LFS存储库中。您可以在[这里](https://huggingface.co/spaces/Wauplin/space_to_dataset_saver)找到一个使用[`huggingface_hub`库](https://huggingface.co/docs/huggingface_hub/index)来以编程方式上传文件到数据集存储库的持久性示例。这个Space示例以及[这个指南](https://huggingface.co/docs/huggingface_hub/main/en/guides/upload#scheduled-uploads)将帮助您确定哪种解决方案最适合您的数据类型。
- en: Finally, in some cases, you might want to use an external storage solution from
    your Space’s code like an external hosted DB, S3, etc.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在某些情况下，您可能希望从您的Space代码中使用外部存储解决方案，比如外部托管的数据库，S3等。
- en: Docker container with GPU
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有GPU的Docker容器
- en: You can run Docker containers with GPU support by using one of our GPU-flavored
    [Spaces Hardware](./spaces-gpus).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用我们的GPU-flavored [Spaces Hardware](./spaces-gpus)之一来运行带有GPU支持的Docker容器。
- en: We recommend using the [`nvidia/cuda`](https://hub.docker.com/r/nvidia/cuda)
    from Docker Hub as a base image, which comes with CUDA and cuDNN pre-installed.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议在Docker Hub上使用[`nvidia/cuda`](https://hub.docker.com/r/nvidia/cuda)作为基础镜像，该镜像预先安装了CUDA和cuDNN。
- en: During Docker buildtime, you don't have access to a GPU hardware. Therefore,
    you should not try to run any GPU-related command during the build step of your
    Dockerfile. For example, you can't run `nvidia-smi` or `torch.cuda.is_available()`
    building an image. Read more [here](https://github.com/NVIDIA/nvidia-docker/wiki/nvidia-docker#description).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker构建过程中，您无法访问GPU硬件。因此，在Dockerfile的构建步骤中不应尝试运行任何与GPU相关的命令。例如，您不能在构建镜像时运行`nvidia-smi`或`torch.cuda.is_available()`。更多信息请阅读[这里](https://github.com/NVIDIA/nvidia-docker/wiki/nvidia-docker#description)。
- en: Read More
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阅读更多
- en: '[Full Docker demo example](spaces-sdks-docker-first-demo)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[完整的Docker演示示例](spaces-sdks-docker-first-demo)'
- en: '[List of Docker Spaces examples](spaces-sdks-docker-examples)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Docker Spaces示例列表](spaces-sdks-docker-examples)'
- en: '[Spaces Examples](https://huggingface.co/SpacesExamples)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Spaces示例](https://huggingface.co/SpacesExamples)'
