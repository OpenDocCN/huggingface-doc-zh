- en: Docker Spaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/hub/spaces-sdks-docker](https://huggingface.co/docs/hub/spaces-sdks-docker)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/hub/main/en/_app/immutable/assets/0.e3b0c442.css" rel="modulepreload">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/entry/start.e368d515.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/scheduler.d6170356.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/singletons.7c936848.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/paths.e886be64.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/entry/app.eaa965a0.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/index.fcd4cc08.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/nodes/0.98ea1774.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/nodes/116.720278ca.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/Tip.b09c67cf.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/CodeBlock.7b16bdef.js">
    <link rel="modulepreload" href="/docs/hub/main/en/_app/immutable/chunks/Heading.8660bd0e.js">
  prefs: []
  type: TYPE_NORMAL
- en: Spaces accommodate custom [Docker containers](https://docs.docker.com/get-started/)
    for apps outside the scope of Streamlit and Gradio. Docker Spaces allow users
    to go beyond the limits of what was previously possible with the standard SDKs.
    From FastAPI and Go endpoints to Phoenix apps and ML Ops tools, Docker Spaces
    can help in many different setups.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Docker Spaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Selecting **Docker** as the SDK when [creating a new Space](https://huggingface.co/new-space)
    will initialize your Space by setting the `sdk` property to `docker` in your `README.md`
    file’s YAML block. Alternatively, given an existing Space repository, set `sdk:
    docker` inside the `YAML` block at the top of your Spaces **README.md** file.
    You can also change the default exposed port `7860` by setting `app_port: 7860`.
    Afterwards, you can create a usual `Dockerfile`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Internally you could have as many open ports as you want. For instance, you
    can install Elasticsearch inside your Space and call it internally on its default
    port 9200.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to expose apps served on multiple ports to the outside world, a
    workaround is to use a reverse proxy like Nginx to dispatch requests from the
    broader internet (on a single port) to different internal ports.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets and Variables Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can manage a Space’s environment variables in the Space Settings. Read more
    [here](./spaces-overview#managing-secrets).
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Buildtime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Variables are passed as `build-arg`s when building your Docker Space. Read [Docker’s
    dedicated documentation](https://docs.docker.com/engine/reference/builder/#arg)
    for a complete guide on how to use this in the Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Runtime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Variables are injected in the container’s environment at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Buildtime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In Docker Spaces, the secrets management is different for security reasons.
    Once you create a secret in the [Settings tab](./spaces-overview#managing-secrets),
    you can expose the secret by adding the following line in your Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if `SECRET_EXAMPLE` is the name of the secret you created in the
    Settings tab, you can read it at build time by mounting it to a file, then reading
    it with `$(cat /run/secrets/SECRET_EXAMPLE)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'See an example below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Runtime
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Same as for public Variables, at runtime, you can access the secrets as environment
    variables. For example, in Python you would use `os.environ.get("SECRET_EXAMPLE")`.
    Check out this [example](https://huggingface.co/spaces/DockerTemplates/secret-example)
    of a Docker Space that uses secrets.
  prefs: []
  type: TYPE_NORMAL
- en: Permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The container runs with user ID 1000\. To avoid permission issues you should
    create a user and set its `WORKDIR` before any `COPY` or download.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Always specify the `--chown=user` with `ADD` and `COPY` to ensure the new files
    are owned by your user.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you still face permission issues, you might need to use `chmod` or `chown`
    in your `Dockerfile` to grant the right permissions. For example, if you want
    to use the directory `/data`, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You should always avoid superfluous chowns.
  prefs: []
  type: TYPE_NORMAL
- en: Updating metadata for a file creates a new copy stored in the new layer. Therefore,
    a recursive chown can result in a very large image due to the duplication of all
    affected files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than fixing permission by running `chown`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'you should always do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: (same goes for `ADD` command)
  prefs: []
  type: TYPE_NORMAL
- en: Data Persistence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data written on disk is lost whenever your Docker Space restarts, unless
    you opt-in for a [persistent storage](./spaces-storage) upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: If you opt-in for a persistent storage upgrade, you can use the `/data` directory
    to store data. This directory is mounted on a persistent volume, which means that
    the data written in this directory will be persisted across restarts.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, `/data` volume is only available at runtime, i.e. you cannot
    use `/data` during the build step of your Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use our Datasets Hub for specific cases, where you can store state
    and data in a git LFS repository. You can find an example of persistence [here](https://huggingface.co/spaces/Wauplin/space_to_dataset_saver),
    which uses the [`huggingface_hub` library](https://huggingface.co/docs/huggingface_hub/index)
    for programmatically uploading files to a dataset repository. This Space example
    along with [this guide](https://huggingface.co/docs/huggingface_hub/main/en/guides/upload#scheduled-uploads)
    will help you define which solution fits best your data type.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in some cases, you might want to use an external storage solution from
    your Space’s code like an external hosted DB, S3, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Docker container with GPU
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can run Docker containers with GPU support by using one of our GPU-flavored
    [Spaces Hardware](./spaces-gpus).
  prefs: []
  type: TYPE_NORMAL
- en: We recommend using the [`nvidia/cuda`](https://hub.docker.com/r/nvidia/cuda)
    from Docker Hub as a base image, which comes with CUDA and cuDNN pre-installed.
  prefs: []
  type: TYPE_NORMAL
- en: During Docker buildtime, you don't have access to a GPU hardware. Therefore,
    you should not try to run any GPU-related command during the build step of your
    Dockerfile. For example, you can't run `nvidia-smi` or `torch.cuda.is_available()`
    building an image. Read more [here](https://github.com/NVIDIA/nvidia-docker/wiki/nvidia-docker#description).
  prefs: []
  type: TYPE_NORMAL
- en: Read More
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Full Docker demo example](spaces-sdks-docker-first-demo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[List of Docker Spaces examples](spaces-sdks-docker-examples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Spaces Examples](https://huggingface.co/SpacesExamples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
