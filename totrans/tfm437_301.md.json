["```py\n>>> from transformers import YolosConfig, YolosModel\n\n>>> # Initializing a YOLOS hustvl/yolos-base style configuration\n>>> configuration = YolosConfig()\n\n>>> # Initializing a model (with random weights) from the hustvl/yolos-base style configuration\n>>> model = YolosModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, YolosModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"hustvl/yolos-small\")\n>>> model = YolosModel.from_pretrained(\"hustvl/yolos-small\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 3401, 384]\n```", "```py\n>>> from transformers import AutoImageProcessor, AutoModelForObjectDetection\n>>> import torch\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"hustvl/yolos-tiny\")\n>>> model = AutoModelForObjectDetection.from_pretrained(\"hustvl/yolos-tiny\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> # convert outputs (bounding boxes and class logits) to Pascal VOC format (xmin, ymin, xmax, ymax)\n>>> target_sizes = torch.tensor([image.size[::-1]])\n>>> results = image_processor.post_process_object_detection(outputs, threshold=0.9, target_sizes=target_sizes)[\n...     0\n... ]\n\n>>> for score, label, box in zip(results[\"scores\"], results[\"labels\"], results[\"boxes\"]):\n...     box = [round(i, 2) for i in box.tolist()]\n...     print(\n...         f\"Detected {model.config.id2label[label.item()]} with confidence \"\n...         f\"{round(score.item(), 3)} at location {box}\"\n...     )\nDetected remote with confidence 0.994 at location [46.96, 72.61, 181.02, 119.73]\nDetected remote with confidence 0.975 at location [340.66, 79.19, 372.59, 192.65]\nDetected cat with confidence 0.984 at location [12.27, 54.25, 319.42, 470.99]\nDetected remote with confidence 0.922 at location [41.66, 71.96, 178.7, 120.33]\nDetected cat with confidence 0.914 at location [342.34, 21.48, 638.64, 372.46]\n```"]