- en: Quick tour
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/quicktour](https://huggingface.co/docs/transformers/v4.37.2/en/quicktour)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Get up and running with ü§ó Transformers! Whether you‚Äôre a developer or an everyday
    user, this quick tour will help you get started and show you how to use the [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    for inference, load a pretrained model and preprocessor with an [AutoClass](./model_doc/auto),
    and quickly train a model with PyTorch or TensorFlow. If you‚Äôre a beginner, we
    recommend checking out our tutorials or [course](https://huggingface.co/course/chapter1/1)
    next for more in-depth explanations of the concepts introduced here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You‚Äôll also need to install your preferred machine learning framework:'
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/tiZFewofSLM](https://www.youtube-nocookie.com/embed/tiZFewofSLM)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    is the easiest and fastest way to use a pretrained model for inference. You can
    use the [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    out-of-the-box for many tasks across different modalities, some of which are shown
    in the table below:'
  prefs: []
  type: TYPE_NORMAL
- en: For a complete list of available tasks, check out the [pipeline API reference](./main_classes/pipelines).
  prefs: []
  type: TYPE_NORMAL
- en: '| **Task** | **Description** | **Modality** | **Pipeline identifier** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Text classification | assign a label to a given sequence of text | NLP |
    pipeline(task=‚Äúsentiment-analysis‚Äù) |'
  prefs: []
  type: TYPE_TB
- en: '| Text generation | generate text given a prompt | NLP | pipeline(task=‚Äútext-generation‚Äù)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Summarization | generate a summary of a sequence of text or document | NLP
    | pipeline(task=‚Äúsummarization‚Äù) |'
  prefs: []
  type: TYPE_TB
- en: '| Image classification | assign a label to an image | Computer vision | pipeline(task=‚Äúimage-classification‚Äù)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Image segmentation | assign a label to each individual pixel of an image
    (supports semantic, panoptic, and instance segmentation) | Computer vision | pipeline(task=‚Äúimage-segmentation‚Äù)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Object detection | predict the bounding boxes and classes of objects in an
    image | Computer vision | pipeline(task=‚Äúobject-detection‚Äù) |'
  prefs: []
  type: TYPE_TB
- en: '| Audio classification | assign a label to some audio data | Audio | pipeline(task=‚Äúaudio-classification‚Äù)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Automatic speech recognition | transcribe speech into text | Audio | pipeline(task=‚Äúautomatic-speech-recognition‚Äù)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Visual question answering | answer a question about the image, given an image
    and a question | Multimodal | pipeline(task=‚Äúvqa‚Äù) |'
  prefs: []
  type: TYPE_TB
- en: '| Document question answering | answer a question about the document, given
    a document and a question | Multimodal | pipeline(task=‚Äúdocument-question-answering‚Äù)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Image captioning | generate a caption for a given image | Multimodal | pipeline(task=‚Äúimage-to-text‚Äù)
    |'
  prefs: []
  type: TYPE_TB
- en: 'Start by creating an instance of [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    and specifying a task you want to use it for. In this guide, you‚Äôll use the [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    for sentiment analysis as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    downloads and caches a default [pretrained model](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english)
    and tokenizer for sentiment analysis. Now you can use the `classifier` on your
    target text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have more than one input, pass your inputs as a list to the [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    to return a list of dictionaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    can also iterate over an entire dataset for any task you like. For this example,
    let‚Äôs choose automatic speech recognition as our task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Load an audio dataset (see the ü§ó Datasets [Quick Start](https://huggingface.co/docs/datasets/quickstart#audio)
    for more details) you‚Äôd like to iterate over. For example, load the [MInDS-14](https://huggingface.co/datasets/PolyAI/minds14)
    dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to make sure the sampling rate of the dataset matches the sampling
    rate [`facebook/wav2vec2-base-960h`](https://huggingface.co/facebook/wav2vec2-base-960h)
    was trained on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The audio files are automatically loaded and resampled when calling the `"audio"`
    column. Extract the raw waveform arrays from the first 4 samples and pass it as
    a list to the pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For larger datasets where the inputs are big (like in speech or vision), you‚Äôll
    want to pass a generator instead of a list to load all the inputs in memory. Take
    a look at the [pipeline API reference](./main_classes/pipelines) for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Use another model and tokenizer in the pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    can accommodate any model from the [Hub](https://huggingface.co/models), making
    it easy to adapt the [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    for other use-cases. For example, if you‚Äôd like a model capable of handling French
    text, use the tags on the Hub to filter for an appropriate model. The top filtered
    result returns a multilingual [BERT model](https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment)
    finetuned for sentiment analysis you can use for French text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: 'Use [AutoModelForSequenceClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForSequenceClassification)
    and [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer)
    to load the pretrained model and it‚Äôs associated tokenizer (more on an `AutoClass`
    in the next section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: 'Use [TFAutoModelForSequenceClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForSequenceClassification)
    and [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer)
    to load the pretrained model and it‚Äôs associated tokenizer (more on an `TFAutoClass`
    in the next section):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Specify the model and tokenizer in the [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline),
    and now you can apply the `classifier` on French text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If you can‚Äôt find a model for your use-case, you‚Äôll need to finetune a pretrained
    model on your data. Take a look at our [finetuning tutorial](./training) to learn
    how. Finally, after you‚Äôve finetuned your pretrained model, please consider [sharing](./model_sharing)
    the model with the community on the Hub to democratize machine learning for everyone!
    ü§ó
  prefs: []
  type: TYPE_NORMAL
- en: AutoClass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/AhChOFRegn4](https://www.youtube-nocookie.com/embed/AhChOFRegn4)'
  prefs: []
  type: TYPE_NORMAL
- en: Under the hood, the [AutoModelForSequenceClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForSequenceClassification)
    and [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer)
    classes work together to power the [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)
    you used above. An [AutoClass](./model_doc/auto) is a shortcut that automatically
    retrieves the architecture of a pretrained model from its name or path. You only
    need to select the appropriate `AutoClass` for your task and it‚Äôs associated preprocessing
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs return to the example from the previous section and see how you can use
    the `AutoClass` to replicate the results of the [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline).
  prefs: []
  type: TYPE_NORMAL
- en: AutoTokenizer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A tokenizer is responsible for preprocessing text into an array of numbers as
    inputs to a model. There are multiple rules that govern the tokenization process,
    including how to split a word and at what level words should be split (learn more
    about tokenization in the [tokenizer summary](./tokenizer_summary)). The most
    important thing to remember is you need to instantiate a tokenizer with the same
    model name to ensure you‚Äôre using the same tokenization rules a model was pretrained
    with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Load a tokenizer with [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass your text to the tokenizer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The tokenizer returns a dictionary containing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[input_ids](./glossary#input-ids): numerical representations of your tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[attention_mask](.glossary#attention-mask): indicates which tokens should be
    attended to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A tokenizer can also accept a list of inputs, and pad and truncate the text
    to return a batch with uniform length:'
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Check out the [preprocess](./preprocessing) tutorial for more details about
    tokenization, and how to use an [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor),
    [AutoFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoFeatureExtractor)
    and [AutoProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoProcessor)
    to preprocess image, audio, and multimodal inputs.
  prefs: []
  type: TYPE_NORMAL
- en: AutoModel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: 'ü§ó Transformers provides a simple and unified way to load pretrained instances.
    This means you can load an [AutoModel](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModel)
    like you would load an [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer).
    The only difference is selecting the correct [AutoModel](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModel)
    for the task. For text (or sequence) classification, you should load [AutoModelForSequenceClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForSequenceClassification):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: See the [task summary](./task_summary) for tasks supported by an [AutoModel](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModel)
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now pass your preprocessed batch of inputs directly to the model. You just
    have to unpack the dictionary by adding `**`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The model outputs the final activations in the `logits` attribute. Apply the
    softmax function to the `logits` to retrieve the probabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: 'ü§ó Transformers provides a simple and unified way to load pretrained instances.
    This means you can load an [TFAutoModel](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModel)
    like you would load an [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer).
    The only difference is selecting the correct [TFAutoModel](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModel)
    for the task. For text (or sequence) classification, you should load [TFAutoModelForSequenceClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForSequenceClassification):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: See the [task summary](./task_summary) for tasks supported by an [AutoModel](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModel)
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now pass your preprocessed batch of inputs directly to the model. You can pass
    the tensors as-is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The model outputs the final activations in the `logits` attribute. Apply the
    softmax function to the `logits` to retrieve the probabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: All ü§ó Transformers models (PyTorch or TensorFlow) output the tensors *before*
    the final activation function (like softmax) because the final activation function
    is often fused with the loss. Model outputs are special dataclasses so their attributes
    are autocompleted in an IDE. The model outputs behave like a tuple or a dictionary
    (you can index with an integer, a slice or a string) in which case, attributes
    that are None are ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Save a model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your model is fine-tuned, you can save it with its tokenizer using [PreTrainedModel.save_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.save_pretrained):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'When you are ready to use the model again, reload it with [PreTrainedModel.from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your model is fine-tuned, you can save it with its tokenizer using [TFPreTrainedModel.save_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.save_pretrained):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'When you are ready to use the model again, reload it with [TFPreTrainedModel.from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'One particularly cool ü§ó Transformers feature is the ability to save a model
    and reload it as either a PyTorch or TensorFlow model. The `from_pt` or `from_tf`
    parameter can convert the model from one framework to the other:'
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Custom model builds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can modify the model‚Äôs configuration class to change how a model is built.
    The configuration specifies a model‚Äôs attributes, such as the number of hidden
    layers or attention heads. You start from scratch when you initialize a model
    from a custom configuration class. The model attributes are randomly initialized,
    and you‚Äôll need to train the model before you can use it to get meaningful results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by importing [AutoConfig](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoConfig),
    and then load the pretrained model you want to modify. Within [AutoConfig.from_pretrained()](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoConfig.from_pretrained),
    you can specify the attribute you want to change, such as the number of attention
    heads:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a model from your custom configuration with [AutoModel.from_config()](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a model from your custom configuration with [TFAutoModel.from_config()](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at the [Create a custom architecture](./create_a_model) guide for
    more information about building custom configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Trainer - a PyTorch optimized training loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All models are a standard [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    so you can use them in any typical training loop. While you can write your own
    training loop, ü§ó Transformers provides a [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    class for PyTorch, which contains the basic training loop and adds additional
    functionality for features like distributed training, mixed precision, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on your task, you‚Äôll typically pass the following parameters to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer):'
  prefs: []
  type: TYPE_NORMAL
- en: 'You‚Äôll start with a [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel)
    or a [`torch.nn.Module`](https://pytorch.org/docs/stable/nn.html#torch.nn.Module):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)
    contains the model hyperparameters you can change like learning rate, batch size,
    and the number of epochs to train for. The default values are used if you don‚Äôt
    specify any training arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load a preprocessing class like a tokenizer, image processor, feature extractor,
    or processor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load a dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function to tokenize the dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then apply it over the entire dataset with [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A [DataCollatorWithPadding](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DataCollatorWithPadding)
    to create a batch of examples from your dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now gather all these classes in [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'When you‚Äôre ready, call [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)
    to start training:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: For tasks - like translation or summarization - that use a sequence-to-sequence
    model, use the [Seq2SeqTrainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Seq2SeqTrainer)
    and [Seq2SeqTrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments)
    classes instead.
  prefs: []
  type: TYPE_NORMAL
- en: You can customize the training loop behavior by subclassing the methods inside
    [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer).
    This allows you to customize features such as the loss function, optimizer, and
    scheduler. Take a look at the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    reference for which methods can be subclassed.
  prefs: []
  type: TYPE_NORMAL
- en: The other way to customize the training loop is by using [Callbacks](./main_classes/callbacks).
    You can use callbacks to integrate with other libraries and inspect the training
    loop to report on progress or stop the training early. Callbacks do not modify
    anything in the training loop itself. To customize something like the loss function,
    you need to subclass the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: Train with TensorFlow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All models are a standard [`tf.keras.Model`](https://www.tensorflow.org/api_docs/python/tf/keras/Model)
    so they can be trained in TensorFlow with the [Keras](https://keras.io/) API.
    ü§ó Transformers provides the [prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset)
    method to easily load your dataset as a `tf.data.Dataset` so you can start training
    right away with Keras‚Äô [`compile`](https://keras.io/api/models/model_training_apis/#compile-method)
    and [`fit`](https://keras.io/api/models/model_training_apis/#fit-method) methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'You‚Äôll start with a [TFPreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel)
    or a [`tf.keras.Model`](https://www.tensorflow.org/api_docs/python/tf/keras/Model):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load a preprocessing class like a tokenizer, image processor, feature extractor,
    or processor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function to tokenize the dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the tokenizer over the entire dataset with [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)
    and then pass the dataset and tokenizer to [prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset).
    You can also change the batch size and shuffle the dataset here if you‚Äôd like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you‚Äôre ready, you can call `compile` and `fit` to start training. Note
    that Transformers models all have a default task-relevant loss function, so you
    don‚Äôt need to specify one unless you want to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What‚Äôs next?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you‚Äôve completed the ü§ó Transformers quick tour, check out our guides
    and learn how to do more specific things like writing a custom model, fine-tuning
    a model for a task, and how to train a model with a script. If you‚Äôre interested
    in learning more about ü§ó Transformers core concepts, grab a cup of coffee and
    take a look at our Conceptual Guides!
  prefs: []
  type: TYPE_NORMAL
