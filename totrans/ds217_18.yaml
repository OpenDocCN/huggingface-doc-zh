- en: Stream
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/datasets/stream](https://huggingface.co/docs/datasets/stream)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: 'Dataset streaming lets you work with a dataset without downloading it. The
    data is streamed as you iterate over the dataset. This is especially helpful when:'
  prefs: []
  type: TYPE_NORMAL
- en: You don’t want to wait for an extremely large dataset to download.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dataset size exceeds the amount of available disk space on your computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to quickly explore just a few samples of a dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/3a852aa4a279bb2476adf697aa4b6865.png) ![](../Images/a71d3ad700730cf461b4f099cd4a8c4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, the English split of the [oscar-corpus/OSCAR-2201](https://huggingface.co/datasets/oscar-corpus/OSCAR-2201)
    dataset is 1.2 terabytes, but you can use it instantly with streaming. Stream
    a dataset by setting `streaming=True` in [load_dataset()](/docs/datasets/v2.17.0/en/package_reference/loading_methods#datasets.load_dataset)
    as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Dataset streaming also lets you work with a dataset made of local files without
    doing any conversion. In this case, the data is streamed from the local files
    as you iterate over the dataset. This is especially helpful when:'
  prefs: []
  type: TYPE_NORMAL
- en: You don’t want to wait for an extremely large local dataset to be converted
    to Arrow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The converted files size would exceed the amount of available disk space on
    your computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to quickly explore just a few samples of a dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, you can stream a local dataset of hundreds of compressed JSONL
    files like [oscar-corpus/OSCAR-2201](https://huggingface.co/datasets/oscar-corpus/OSCAR-2201)
    to use it instantly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Loading a dataset in streaming mode creates a new dataset type instance (instead
    of the classic [Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset)
    object), known as an [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset).
    This special type of dataset has its own set of processing methods shown below.
  prefs: []
  type: TYPE_NORMAL
- en: An [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset)
    is useful for iterative jobs like training a model. You shouldn’t use a [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset)
    for jobs that require random access to examples because you have to iterate all
    over it using a for loop. Getting the last example in an iterable dataset would
    require you to iterate over all the previous examples. You can find more details
    in the [Dataset vs. IterableDataset guide](./about_mapstyle_vs_iterable).
  prefs: []
  type: TYPE_NORMAL
- en: Convert from a Dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have an existing [Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset)
    object, you can convert it to an [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset)
    with the [to_iterable_dataset()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.to_iterable_dataset)
    function. This is actually faster than setting the `streaming=True` argument in
    [load_dataset()](/docs/datasets/v2.17.0/en/package_reference/loading_methods#datasets.load_dataset)
    because the data is streamed from local files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The [to_iterable_dataset()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.to_iterable_dataset)
    function supports sharding when the [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset)
    is instantiated. This is useful when working with big datasets, and you’d like
    to shuffle the dataset or to enable fast parallel loading with a PyTorch DataLoader.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Shuffle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like a regular [Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset)
    object, you can also shuffle a [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset)
    with [IterableDataset.shuffle()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.shuffle).
  prefs: []
  type: TYPE_NORMAL
- en: The `buffer_size` argument controls the size of the buffer to randomly sample
    examples from. Let’s say your dataset has one million examples, and you set the
    `buffer_size` to ten thousand. [IterableDataset.shuffle()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.shuffle)
    will randomly select examples from the first ten thousand examples in the buffer.
    Selected examples in the buffer are replaced with new examples. By default, the
    buffer size is 1,000.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[IterableDataset.shuffle()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.shuffle)
    will also shuffle the order of the shards if the dataset is sharded into multiple
    files.'
  prefs: []
  type: TYPE_NORMAL
- en: Reshuffle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes you may want to reshuffle the dataset after each epoch. This will
    require you to set a different seed for each epoch. Use `IterableDataset.set_epoch()`
    in between epochs to tell the dataset what epoch you’re on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your seed effectively becomes: `initial seed + current epoch`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Split dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can split your dataset one of two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[IterableDataset.take()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.take)
    returns the first `n` examples in a dataset:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[IterableDataset.skip()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.skip)
    omits the first `n` examples in a dataset and returns the remaining examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`take` and `skip` prevent future calls to `shuffle` because they lock in the
    order of the shards. You should `shuffle` your dataset before splitting it.'
  prefs: []
  type: TYPE_NORMAL
- en: Interleave
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[interleave_datasets()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.interleave_datasets)
    can combine an [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset)
    with other datasets. The combined dataset returns alternating examples from each
    of the original datasets.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Define sampling probabilities from each of the original datasets for more control
    over how each of them are sampled and combined. Set the `probabilities` argument
    with your desired sampling probabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Around 80% of the final dataset is made of the `en_dataset`, and 20% of the
    `fr_dataset`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also specify the `stopping_strategy`. The default strategy, `first_exhausted`,
    is a subsampling strategy, i.e the dataset construction is stopped as soon one
    of the dataset runs out of samples. You can specify `stopping_strategy=all_exhausted`
    to execute an oversampling strategy. In this case, the dataset construction is
    stopped as soon as every samples in every dataset has been added at least once.
    In practice, it means that if a dataset is exhausted, it will return to the beginning
    of this dataset until the stop criterion has been reached. Note that if no sampling
    probabilities are specified, the new dataset will have `max_length_datasets*nb_dataset
    samples`.
  prefs: []
  type: TYPE_NORMAL
- en: Rename, remove, and cast
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following methods allow you to modify the columns of a dataset. These methods
    are useful for renaming or removing columns and changing columns to a new set
    of features.
  prefs: []
  type: TYPE_NORMAL
- en: Rename
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use [IterableDataset.rename_column()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.rename_column)
    when you need to rename a column in your dataset. Features associated with the
    original column are actually moved under the new column name, instead of just
    replacing the original column in-place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide [IterableDataset.rename_column()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.rename_column)
    with the name of the original column, and the new column name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Remove
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you need to remove one or more columns, give [IterableDataset.remove_columns()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.remove_columns)
    the name of the column to remove. Remove more than one column by providing a list
    of column names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Cast
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[IterableDataset.cast()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.cast)
    changes the feature type of one or more columns. This method takes your new `Features`
    as its argument. The following sample code shows how to change the feature types
    of `ClassLabel` and `Value`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Casting only works if the original feature type and new feature type are compatible.
    For example, you can cast a column with the feature type `Value('int32')` to `Value('bool')`
    if the original column only contains ones and zeros.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use [IterableDataset.cast_column()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.cast_column)
    to change the feature type of just one column. Pass the column name and its new
    feature type as arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the [Dataset.map()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.map)
    function for a regular [Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset),
    🤗 Datasets features [IterableDataset.map()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.map)
    for processing an [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset).
    [IterableDataset.map()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.map)
    applies processing on-the-fly when examples are streamed.
  prefs: []
  type: TYPE_NORMAL
- en: It allows you to apply a processing function to each example in a dataset, independently
    or in batches. This function can even create new rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example demonstrates how to tokenize a [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset).
    The function needs to accept and output a `dict`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, apply this function to the dataset with [IterableDataset.map()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.map):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Let’s take a look at another example, except this time, you will remove a column
    with [IterableDataset.map()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.map).
    When you remove a column, it is only removed after the example has been provided
    to the mapped function. This allows the mapped function to use the content of
    the columns before they are removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify the column to remove with the `remove_columns` argument in [IterableDataset.map()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.map):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Batch processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[IterableDataset.map()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset.map)
    also supports working with batches of examples. Operate on batches by setting
    `batched=True`. The default batch size is 1000, but you can adjust it with the
    `batch_size` argument. This opens the door to many interesting applications such
    as tokenization, splitting long sentences into shorter chunks, and data augmentation.'
  prefs: []
  type: TYPE_NORMAL
- en: Tokenization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: See other examples of batch processing in the [batched map processing](./process#batch-processing)
    documentation. They work the same for iterable datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can filter rows in the dataset based on a predicate function using [Dataset.filter()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.filter).
    It returns rows that match a specified condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[Dataset.filter()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.filter)
    can also filter by indices if you set `with_indices=True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Stream in a training loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset)
    can be integrated into a training loop. First, shuffle the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, create a simple training loop and start training:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
