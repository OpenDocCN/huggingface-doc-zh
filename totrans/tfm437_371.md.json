["```py\n>>> from transformers import TvltConfig, TvltModel\n\n>>> # # Initializing a TVLT ZinengTang/tvlt-base style configuration\n>>> configuration = TvltConfig()\n\n>>> # # Initializing a model (with random weights) from the ZinengTang/tvlt-base style configuration\n>>> model = TvltModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import TvltProcessor, TvltModel\n>>> import numpy as np\n>>> import torch\n\n>>> num_frames = 8\n>>> images = list(np.random.randn(num_frames, 3, 224, 224))\n>>> audio = list(np.random.randn(10000))\n\n>>> processor = TvltProcessor.from_pretrained(\"ZinengTang/tvlt-base\")\n>>> model = TvltModel.from_pretrained(\"ZinengTang/tvlt-base\")\n\n>>> input_dict = processor(images, audio, sampling_rate=44100, return_tensors=\"pt\")\n\n>>> outputs = model(**input_dict)\n>>> loss = outputs.loss\n```", "```py\n>>> from transformers import TvltProcessor, TvltForPreTraining\n>>> import numpy as np\n>>> import torch\n\n>>> num_frames = 8\n>>> images = list(np.random.randn(num_frames, 3, 224, 224))\n>>> images_mixed = list(np.random.randn(num_frames, 3, 224, 224))\n>>> audio = list(np.random.randn(10000))\n>>> processor = TvltProcessor.from_pretrained(\"ZinengTang/tvlt-base\")\n>>> model = TvltForPreTraining.from_pretrained(\"ZinengTang/tvlt-base\")\n>>> input_dict = processor(\n...     images, audio, images_mixed, sampling_rate=44100, mask_pixel=True, mask_audio=True, return_tensors=\"pt\"\n... )\n\n>>> outputs = model(**input_dict)\n>>> loss = outputs.loss\n```", "```py\n>>> from transformers import TvltProcessor, TvltForAudioVisualClassification\n>>> import numpy as np\n>>> import torch\n\n>>> num_frames = 8\n>>> images = list(np.random.randn(num_frames, 3, 224, 224))\n>>> audio = list(np.random.randn(10000))\n>>> processor = TvltProcessor.from_pretrained(\"ZinengTang/tvlt-base\")\n>>> model = TvltForAudioVisualClassification.from_pretrained(\"ZinengTang/tvlt-base\")\n>>> input_dict = processor(images, audio, sampling_rate=44100, return_tensors=\"pt\")\n\n>>> outputs = model(**input_dict)\n>>> loss = outputs.loss\n```"]