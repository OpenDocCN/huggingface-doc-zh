["```py\npnpm add @huggingface/hub\n\nnpm add @huggingface/hub\n\nyarn add @huggingface/hub\n```", "```py\n// esm.sh\nimport { uploadFiles, listModels } from \"https://esm.sh/@huggingface/hub\"\n// or npm:\nimport { uploadFiles, listModels } from \"npm:@huggingface/hub\"\n```", "```py\nimport { createRepo, uploadFiles, uploadFilesWithProgress, deleteFile, deleteRepo, listFiles, whoAmI } from \"@huggingface/hub\";\nimport type { RepoDesignation, Credentials } from \"@huggingface/hub\";\n\nconst repo: RepoDesignation = { type: \"model\", name: \"myname/some-model\" };\nconst credentials: Credentials = { accessToken: \"hf_...\" };\n\nconst {name: username} = await whoAmI({credentials});\n\nfor await (const model of listModels({search: {owner: username}, credentials})) {\n  console.log(\"My model:\", model);\n}\n\nawait createRepo({ repo, credentials, license: \"mit\" });\n\nawait uploadFiles({\n  repo,\n  credentials,\n  files: [\n    // path + blob content\n    {\n      path: \"file.txt\",\n      content: new Blob([\"Hello World\"]),\n    },\n    // Local file URL\n    pathToFileURL(\"./pytorch-model.bin\"),\n    // Web URL\n    new URL(\"https://huggingface.co/xlm-roberta-base/resolve/main/tokenizer.json\"),\n    // Path + Web URL\n    {\n      path: \"myfile.bin\",\n      content: new URL(\"https://huggingface.co/bert-base-uncased/resolve/main/pytorch_model.bin\")\n    }\n    // Can also work with native File in browsers\n  ],\n});\n\n// or\n\nfor await (const progressEvent of await uploadFilesWithProgress({\n  repo,\n  credentials,\n  files: [\n    ...\n  ],\n})) {\n  console.log(progressEvent);\n}\n\nawait deleteFile({repo, credentials, path: \"myfile.bin\"});\n\nawait (await downloadFile({ repo, path: \"README.md\" })).text();\n\nfor await (const fileInfo of listFiles({repo})) {\n  console.log(fileInfo);\n}\n\nawait deleteRepo({ repo, credentials });\n```", "```py\nimport { oauthLoginUrl, oauthHandleRedirectIfPresent } from \"@huggingface/hub\";\n\nconst oauthResult = await oauthHandleRedirectIfPresent();\n\nif (!oauthResult) {\n  // If the user is not logged in, redirect to the login page\n  window.location.href = await oauthLoginUrl();\n}\n\n// You can use oauthResult.accessToken, oauthResult.accessTokenExpiresAt and oauthResult.userInfo\nconsole.log(oauthResult);\n```"]