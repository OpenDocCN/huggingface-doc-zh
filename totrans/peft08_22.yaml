- en: Fully Sharded Data Parallel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/peft/accelerate/fsdp](https://huggingface.co/docs/peft/accelerate/fsdp)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/peft/v0.8.2/en/_app/immutable/assets/0.e3b0c442.css" rel="modulepreload">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/entry/start.c9bed6ec.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/scheduler.d627b047.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/singletons.95cf6adf.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/index.a57a1c33.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/paths.5d07c46f.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/entry/app.72c78cae.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/index.d48c4817.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/nodes/0.aa346fde.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/nodes/3.d11a2a66.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/Tip.9bd3babf.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/CodeBlock.5da89496.js">
    <link rel="modulepreload" href="/docs/peft/v0.8.2/en/_app/immutable/chunks/Heading.47e562a9.js">
  prefs: []
  type: TYPE_NORMAL
- en: '[Fully sharded data parallel](https://pytorch.org/docs/stable/fsdp.html) (FSDP)
    is developed for distributed training of large pretrained models up to 1T parameters.
    FSDP achieves this by sharding the model parameters, gradients, and optimizer
    states across data parallel processes and it can also offload sharded model parameters
    to a CPU. The memory efficiency afforded by FSDP allows you to scale training
    to larger batch or model sizes.'
  prefs: []
  type: TYPE_NORMAL
- en: Currently, FSDP does not confer any reduction in GPU memory usage and FSDP with
    CPU offload actually consumes 1.65x more GPU memory during training. You can track
    this PyTorch [issue](https://github.com/pytorch/pytorch/issues/91165) for any
    updates.
  prefs: []
  type: TYPE_NORMAL
- en: FSDP is supported in ðŸ¤— Accelerate, and you can use it with ðŸ¤— PEFT. This guide
    will help you learn how to use our FSDP [training script](https://github.com/huggingface/peft/blob/main/examples/conditional_generation/peft_lora_seq2seq_accelerate_fsdp.py).
    Youâ€™ll configure the script to train a large model for conditional generation.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Begin by running the following command to [create a FSDP configuration file](https://huggingface.co/docs/accelerate/main/en/usage_guides/fsdp)
    with ðŸ¤— Accelerate. Use the `--config_file` flag to save the configuration file
    to a specific location, otherwise it is saved as a `default_config.yaml` file
    in the ðŸ¤— Accelerate cache.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration file is used to set the default options when you launch the
    training script.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Youâ€™ll be asked a few questions about your setup, and configure the following
    arguments. For this example, make sure you fully shard the model parameters, gradients,
    optimizer states, leverage the CPU for offloading, and wrap model layers based
    on the Transformer layer class name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, your FSDP configuration file may look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The important parts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Letâ€™s dig a bit deeper into the training script to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: The [`main()`](https://github.com/huggingface/peft/blob/2822398fbe896f25d4dac5e468624dc5fd65a51b/examples/conditional_generation/peft_lora_seq2seq_accelerate_fsdp.py#L14)
    function begins with initializing an [Accelerator](https://huggingface.co/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator)
    class which handles everything for distributed training, such as automatically
    detecting your training environment.
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ’¡ Feel free to change the model and dataset inside the `main` function. If your
    dataset format is different from the one in the script, you may also need to write
    your own preprocessing function.
  prefs: []
  type: TYPE_NORMAL
- en: The script also creates a configuration corresponding to the ðŸ¤— PEFT method youâ€™re
    using. For LoRA, youâ€™ll use [LoraConfig](/docs/peft/v0.8.2/en/package_reference/lora#peft.LoraConfig)
    to specify the task type, and several other important parameters such as the dimension
    of the low-rank matrices, the matrices scaling factor, and the dropout probability
    of the LoRA layers. If you want to use a different ðŸ¤— PEFT method, replace `LoraConfig`
    with the appropriate [class](../package_reference/tuners).
  prefs: []
  type: TYPE_NORMAL
- en: Next, the script wraps the base model and `peft_config` with the [get_peft_model()](/docs/peft/v0.8.2/en/package_reference/peft_model#peft.get_peft_model)
    function to create a [PeftModel](/docs/peft/v0.8.2/en/package_reference/peft_model#peft.PeftModel).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Throughout the script, youâ€™ll see the [main_process_first](https://huggingface.co/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator.main_process_first)
    and [wait_for_everyone](https://huggingface.co/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator.wait_for_everyone)
    functions which help control and synchronize when processes are executed.
  prefs: []
  type: TYPE_NORMAL
- en: After your dataset is prepared, and all the necessary training components are
    loaded, the script checks if youâ€™re using the `fsdp_plugin`. PyTorch offers two
    ways for wrapping model layers in FSDP, automatically or manually. The simplest
    method is to allow FSDP to automatically recursively wrap model layers without
    changing any other code. You can choose to wrap the model layers based on the
    layer name or on the size (number of parameters). In the FSDP configuration file,
    it uses the `TRANSFORMER_BASED_WRAP` option to wrap the `T5Block` layer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next, use ðŸ¤— Accelerateâ€™s [prepare](https://huggingface.co/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator.prepare)
    function to prepare the model, datasets, optimizer, and scheduler for training.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: From here, the remainder of the script handles the training loop, evaluation,
    and sharing your model to the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Train
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following command to launch the training script. Earlier, you saved
    the configuration file to `fsdp_config.yaml`, so youâ€™ll need to pass the path
    to the launcher with the `--config_file` argument like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once training is complete, the script returns the accuracy and compares the
    predictions to the labels.
  prefs: []
  type: TYPE_NORMAL
