- en: The pipeline API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers.js/pipelines](https://huggingface.co/docs/transformers.js/pipelines)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Just like the [transformers Python library](https://github.com/huggingface/transformers),
    Transformers.js provides users with a simple way to leverage the power of transformers.
    The `pipeline()` function is the easiest and fastest way to use a pretrained model
    for inference.
  prefs: []
  type: TYPE_NORMAL
- en: For the full list of available tasks/pipelines, check out [this table](#available-tasks).
  prefs: []
  type: TYPE_NORMAL
- en: The basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by creating an instance of `pipeline()` and specifying a task you want
    to use it for. For example, to create a sentiment analysis pipeline, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When running for the first time, the `pipeline` will download and cache the
    default pretrained model associated with the task. This can take a while, but
    subsequent calls will be much faster.
  prefs: []
  type: TYPE_NORMAL
- en: By default, models will be downloaded from the [Hugging Face Hub](https://huggingface.co/models)
    and stored in [browser cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache),
    but there are ways to specify custom models and cache locations. For more information
    see [here](./custom_usage).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now use the classifier on your target text by calling it as a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have multiple inputs, you can pass them as an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify a different model to use for the pipeline by passing it
    as the second argument to the `pipeline()` function. For example, to use a different
    model for sentiment analysis (like one trained to predict sentiment of a review
    as a number of stars between 1 and 5), you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Transformers.js supports loading any model hosted on the Hugging Face Hub, provided
    it has ONNX weights (located in a subfolder called `onnx`). For more information
    on how to convert your PyTorch, TensorFlow, or JAX model to ONNX, see the [conversion
    section](./custom_usage#convert-your-models-to-onnx).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pipeline()` function is a great way to quickly use a pretrained model
    for inference, as it takes care of all the preprocessing and postprocessing for
    you. For example, if you want to perform Automatic Speech Recognition (ASR) using
    OpenAI’s Whisper model, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We offer a variety of options to control how models are loaded from the Hugging
    Face Hub (or locally). By default, the *quantized* version of the model is used,
    which is smaller and faster, but usually less accurate. To override this behaviour
    (i.e., use the unquantized model), you can use a custom `PretrainedOptions` object
    as the third parameter to the `pipeline` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can also specify which revision of the model to use, by passing a `revision`
    parameter. Since the Hugging Face Hub uses a git-based versioning system, you
    can use any valid git revision specifier (e.g., branch name or commit hash)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For the full list of options, check out the [PretrainedOptions](./api/utils/hub#module_utils/hub..PretrainedOptions)
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Running
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many pipelines have additional options that you can specify. For example, when
    using a model that does multilingual translation, you can specify the source and
    target languages like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When using models that support auto-regressive generation, you can specify generation
    parameters like the number of new tokens, sampling methods, temperature, repetition
    penalty, and much more. For a full list of available parameters, see to the [GenerationConfig](./api/utils/generation#module_utils/generation.GenerationConfig)
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to generate a poem using `LaMini-Flan-T5-783M`, you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Logging `result[0].generated_text` to the console gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For more information on the available options for each pipeline, refer to the
    [API Reference](./api/pipelines). If you would like more control over the inference
    process, you can use the [`AutoModel`](./api/models), [`AutoTokenizer`](./api/tokenizers),
    or [`AutoProcessor`](./api/processors) classes instead.
  prefs: []
  type: TYPE_NORMAL
- en: Available tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Natural Language Processing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Task | ID | Description | Supported? |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Conversational](https://huggingface.co/tasks/conversational) | `conversational`
    | Generating conversational text that is relevant, coherent and knowledgable given
    a prompt. | ❌ |'
  prefs: []
  type: TYPE_TB
- en: '| [Fill-Mask](https://huggingface.co/tasks/fill-mask) | `fill-mask` | Masking
    some of the words in a sentence and predicting which words should replace those
    masks. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.FillMaskPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=fill-mask&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Question Answering](https://huggingface.co/tasks/question-answering) | `question-answering`
    | Retrieve the answer to a question from a given text. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.QuestionAnsweringPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=question-answering&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Sentence Similarity](https://huggingface.co/tasks/sentence-similarity) |
    `sentence-similarity` | Determining how similar two texts are. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.FeatureExtractionPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=feature-extraction&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Summarization](https://huggingface.co/tasks/summarization) | `summarization`
    | Producing a shorter version of a document while preserving its important information.
    | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.SummarizationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=summarization&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Table Question Answering](https://huggingface.co/tasks/table-question-answering)
    | `table-question-answering` | Answering a question about information from a given
    table. | ❌ |'
  prefs: []
  type: TYPE_TB
- en: '| [Text Classification](https://huggingface.co/tasks/text-classification) |
    `text-classification` or `sentiment-analysis` | Assigning a label or class to
    a given text. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TextClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=text-classification&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Text Generation](https://huggingface.co/tasks/text-generation#completion-generation-models)
    | `text-generation` | Producing new text by predicting the next word in a sequence.
    | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TextGenerationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=text-generation&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Text-to-text Generation](https://huggingface.co/tasks/text-generation#text-to-text-generation-models)
    | `text2text-generation` | Converting one text sequence into another text sequence.
    | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.Text2TextGenerationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=text2text-generation&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Token Classification](https://huggingface.co/tasks/token-classification)
    | `token-classification` or `ner` | Assigning a label to each token in a text.
    | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TokenClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=token-classification&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Translation](https://huggingface.co/tasks/translation) | `translation` |
    Converting text from one language to another. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TranslationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=translation&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Zero-Shot Classification](https://huggingface.co/tasks/zero-shot-classification)
    | `zero-shot-classification` | Classifying text into classes that are unseen during
    training. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=zero-shot-classification&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: Vision
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Task | ID | Description | Supported? |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Depth Estimation](https://huggingface.co/tasks/depth-estimation) | `depth-estimation`
    | Predicting the depth of objects present in an image. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.DepthEstimationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=depth-estimation&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Image Classification](https://huggingface.co/tasks/image-classification)
    | `image-classification` | Assigning a label or class to an entire image. | ✅
    [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=image-classification&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Image Segmentation](https://huggingface.co/tasks/image-segmentation) | `image-segmentation`
    | Divides an image into segments where each pixel is mapped to an object. This
    task has multiple variants such as instance segmentation, panoptic segmentation
    and semantic segmentation. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageSegmentationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=image-segmentation&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Image-to-Image](https://huggingface.co/tasks/image-to-image) | `image-to-image`
    | Transforming a source image to match the characteristics of a target image or
    a target image domain. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageToImagePipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=image-to-image&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Mask Generation](https://huggingface.co/tasks/mask-generation) | `mask-generation`
    | Generate masks for the objects in an image. | ❌ |'
  prefs: []
  type: TYPE_TB
- en: '| [Object Detection](https://huggingface.co/tasks/object-detection) | `object-detection`
    | Identify objects of certain defined classes within an image. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ObjectDetectionPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=object-detection&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Video Classification](https://huggingface.co/tasks/video-classification)
    | n/a | Assigning a label or class to an entire video. | ❌ |'
  prefs: []
  type: TYPE_TB
- en: '| [Unconditional Image Generation](https://huggingface.co/tasks/unconditional-image-generation)
    | n/a | Generating images with no condition in any context (like a prompt text
    or another image). | ❌ |'
  prefs: []
  type: TYPE_TB
- en: Audio
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Task | ID | Description | Supported? |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Audio Classification](https://huggingface.co/tasks/audio-classification)
    | `audio-classification` | Assigning a label or class to a given audio. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.AudioClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=audio-classification&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Audio-to-Audio](https://huggingface.co/tasks/audio-to-audio) | n/a | Generating
    audio from an input audio source. | ❌ |'
  prefs: []
  type: TYPE_TB
- en: '| [Automatic Speech Recognition](https://huggingface.co/tasks/automatic-speech-recognition)
    | `automatic-speech-recognition` | Transcribing a given audio into text. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.AutomaticSpeechRecognitionPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=automatic-speech-recognition&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Text-to-Speech](https://huggingface.co/tasks/text-to-speech) | `text-to-speech`
    or `text-to-audio` | Generating natural-sounding speech given text input. | ✅
    [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TextToAudioPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=text-to-audio&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: Tabular
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Task | ID | Description | Supported? |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Tabular Classification](https://huggingface.co/tasks/tabular-classification)
    | n/a | Classifying a target category (a group) based on set of attributes. |
    ❌ |'
  prefs: []
  type: TYPE_TB
- en: '| [Tabular Regression](https://huggingface.co/tasks/tabular-regression) | n/a
    | Predicting a numerical value given a set of attributes. | ❌ |'
  prefs: []
  type: TYPE_TB
- en: Multimodal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Task | ID | Description | Supported? |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Document Question Answering](https://huggingface.co/tasks/document-question-answering)
    | `document-question-answering` | Answering questions on document images. | ✅
    [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.DocumentQuestionAnsweringPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=document-question-answering&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Feature Extraction](https://huggingface.co/tasks/feature-extraction) | `feature-extraction`
    | Transforming raw data into numerical features that can be processed while preserving
    the information in the original dataset. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.FeatureExtractionPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=feature-extraction&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Image-to-Text](https://huggingface.co/tasks/image-to-text) | `image-to-text`
    | Output text from a given image. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageToTextPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=image-to-text&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Text-to-Image](https://huggingface.co/tasks/text-to-image) | `text-to-image`
    | Generates images from input text. | ❌ |'
  prefs: []
  type: TYPE_TB
- en: '| [Visual Question Answering](https://huggingface.co/tasks/visual-question-answering)
    | `visual-question-answering` | Answering open-ended questions based on an image.
    | ❌ |'
  prefs: []
  type: TYPE_TB
- en: '| [Zero-Shot Audio Classification](https://huggingface.co/learn/audio-course/chapter4/classification_models#zero-shot-audio-classification)
    | `zero-shot-audio-classification` | Classifying audios into classes that are
    unseen during training. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotAudioClassificationPipeline)
    [(models)](https://huggingface.co/models?other=zero-shot-audio-classification&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Zero-Shot Image Classification](https://huggingface.co/tasks/zero-shot-image-classification)
    | `zero-shot-image-classification` | Classifying images into classes that are
    unseen during training. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotImageClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=zero-shot-image-classification&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Zero-Shot Object Detection](https://huggingface.co/tasks/zero-shot-object-detection)
    | `zero-shot-object-detection` | Identify objects of classes that are unseen during
    training. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotObjectDetectionPipeline)
    [(models)](https://huggingface.co/models?other=zero-shot-object-detection&library=transformers.js)
    |'
  prefs: []
  type: TYPE_TB
- en: Reinforcement Learning
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '| Task | ID | Description | Supported? |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [Reinforcement Learning](https://huggingface.co/tasks/reinforcement-learning)
    | n/a | Learning from actions by interacting with an environment through trial
    and error and receiving rewards (negative or positive) as feedback. | ❌ |'
  prefs: []
  type: TYPE_TB
