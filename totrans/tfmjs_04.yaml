- en: The pipeline API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道API
- en: 'Original text: [https://huggingface.co/docs/transformers.js/pipelines](https://huggingface.co/docs/transformers.js/pipelines)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://huggingface.co/docs/transformers.js/pipelines](https://huggingface.co/docs/transformers.js/pipelines)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Just like the [transformers Python library](https://github.com/huggingface/transformers),
    Transformers.js provides users with a simple way to leverage the power of transformers.
    The `pipeline()` function is the easiest and fastest way to use a pretrained model
    for inference.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 就像[transformers Python库](https://github.com/huggingface/transformers)一样，Transformers.js为用户提供了一个简单的方式来利用transformers的强大功能。`pipeline()`函数是使用预训练模型进行推断的最简单最快的方式。
- en: For the full list of available tasks/pipelines, check out [this table](#available-tasks).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可用任务/管道的完整列表，请查看[此表](#available-tasks)。
- en: The basics
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础知识
- en: 'Start by creating an instance of `pipeline()` and specifying a task you want
    to use it for. For example, to create a sentiment analysis pipeline, you can do:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先创建一个`pipeline()`实例，并指定要用它进行的任务。例如，要创建一个情感分析管道，您可以这样做：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When running for the first time, the `pipeline` will download and cache the
    default pretrained model associated with the task. This can take a while, but
    subsequent calls will be much faster.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行时，`pipeline`将下载并缓存与任务相关的默认预训练模型。这可能需要一些时间，但后续调用将快得多。
- en: By default, models will be downloaded from the [Hugging Face Hub](https://huggingface.co/models)
    and stored in [browser cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache),
    but there are ways to specify custom models and cache locations. For more information
    see [here](./custom_usage).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，模型将从[Hugging Face Hub](https://huggingface.co/models)下载并存储在[浏览器缓存](https://developer.mozilla.org/en-US/docs/Web/API/Cache)中，但也有方法可以指定自定义模型和缓存位置。有关更多信息，请参见[这里](./custom_usage)。
- en: 'You can now use the classifier on your target text by calling it as a function:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过将其作为函数调用来在目标文本上使用分类器：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you have multiple inputs, you can pass them as an array:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有多个输入，可以将它们作为数组传递：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also specify a different model to use for the pipeline by passing it
    as the second argument to the `pipeline()` function. For example, to use a different
    model for sentiment analysis (like one trained to predict sentiment of a review
    as a number of stars between 1 and 5), you can do:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过将其作为`pipeline()`函数的第二个参数传递来指定要用于管道的不同模型。例如，要为情感分析使用不同的模型（例如训练为预测评论情感的模型，评分为1到5颗星），您可以这样做：
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Transformers.js supports loading any model hosted on the Hugging Face Hub, provided
    it has ONNX weights (located in a subfolder called `onnx`). For more information
    on how to convert your PyTorch, TensorFlow, or JAX model to ONNX, see the [conversion
    section](./custom_usage#convert-your-models-to-onnx).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Transformers.js支持加载托管在Hugging Face Hub上的任何模型，前提是它具有ONNX权重（位于名为`onnx`的子文件夹中）。有关如何将您的PyTorch、TensorFlow或JAX模型转换为ONNX的更多信息，请参见[转换部分](./custom_usage#convert-your-models-to-onnx)。
- en: 'The `pipeline()` function is a great way to quickly use a pretrained model
    for inference, as it takes care of all the preprocessing and postprocessing for
    you. For example, if you want to perform Automatic Speech Recognition (ASR) using
    OpenAI’s Whisper model, you can do:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`pipeline()`函数是快速使用预训练模型进行推断的好方法，因为它会为您处理所有的预处理和后处理。例如，如果您想使用OpenAI的Whisper模型进行自动语音识别（ASR），您可以这样做：'
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Pipeline options
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道选项
- en: Loading
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载
- en: 'We offer a variety of options to control how models are loaded from the Hugging
    Face Hub (or locally). By default, the *quantized* version of the model is used,
    which is smaller and faster, but usually less accurate. To override this behaviour
    (i.e., use the unquantized model), you can use a custom `PretrainedOptions` object
    as the third parameter to the `pipeline` function:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了各种选项来控制如何从Hugging Face Hub（或本地）加载模型。默认情况下，使用模型的*量化*版本，这个版本更小更快，但通常不太准确。要覆盖此行为（即使用未量化的模型），您可以将自定义的`PretrainedOptions`对象作为`pipeline`函数的第三个参数：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can also specify which revision of the model to use, by passing a `revision`
    parameter. Since the Hugging Face Hub uses a git-based versioning system, you
    can use any valid git revision specifier (e.g., branch name or commit hash)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过传递`revision`参数来指定要使用的模型的修订版。由于Hugging Face Hub使用基于git的版本控制系统，您可以使用任何有效的git修订说明符（例如分支名称或提交哈希）
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For the full list of options, check out the [PretrainedOptions](./api/utils/hub#module_utils/hub..PretrainedOptions)
    documentation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的选项列表，请查看[PretrainedOptions](./api/utils/hub#module_utils/hub..PretrainedOptions)文档。
- en: Running
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行
- en: 'Many pipelines have additional options that you can specify. For example, when
    using a model that does multilingual translation, you can specify the source and
    target languages like this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 许多管道有额外的选项可以指定。例如，当使用支持多语言翻译的模型时，您可以像这样指定源语言和目标语言：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When using models that support auto-regressive generation, you can specify generation
    parameters like the number of new tokens, sampling methods, temperature, repetition
    penalty, and much more. For a full list of available parameters, see to the [GenerationConfig](./api/utils/generation#module_utils/generation.GenerationConfig)
    class.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用支持自回归生成的模型时，您可以指定生成参数，如新标记的数量、采样方法、温度、重复惩罚等。有关可用参数的完整列表，请参见[GenerationConfig](./api/utils/generation#module_utils/generation.GenerationConfig)类。
- en: 'For example, to generate a poem using `LaMini-Flan-T5-783M`, you can do:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要使用`LaMini-Flan-T5-783M`生成一首诗，您可以这样做：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Logging `result[0].generated_text` to the console gives:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将`result[0].generated_text`记录到控制台中会显示：
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For more information on the available options for each pipeline, refer to the
    [API Reference](./api/pipelines). If you would like more control over the inference
    process, you can use the [`AutoModel`](./api/models), [`AutoTokenizer`](./api/tokenizers),
    or [`AutoProcessor`](./api/processors) classes instead.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关每个管道可用选项的更多信息，请参阅[API参考](./api/pipelines)。如果您想对推断过程有更多控制，可以使用[`AutoModel`](./api/models)、[`AutoTokenizer`](./api/tokenizers)或[`AutoProcessor`](./api/processors)类。
- en: Available tasks
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用任务
- en: Tasks
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Natural Language Processing
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自然语言处理
- en: '| Task | ID | Description | Supported? |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | ID | 描述 | 是否支持？ |'
- en: '| --- | --- | --- | --- |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| [Conversational](https://huggingface.co/tasks/conversational) | `conversational`
    | Generating conversational text that is relevant, coherent and knowledgable given
    a prompt. | ❌ |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| [对话](https://huggingface.co/tasks/conversational) | `conversational` | 根据提示生成相关、连贯和知识丰富的对话文本。
    | ❌ |'
- en: '| [Fill-Mask](https://huggingface.co/tasks/fill-mask) | `fill-mask` | Masking
    some of the words in a sentence and predicting which words should replace those
    masks. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.FillMaskPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=fill-mask&library=transformers.js)
    |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| [填充掩码](https://huggingface.co/tasks/fill-mask) | `fill-mask` | 对句子中的一些单词进行掩码，并预测应该替换这些掩码的单词。
    | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.FillMaskPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=fill-mask&library=transformers.js)
    |'
- en: '| [Question Answering](https://huggingface.co/tasks/question-answering) | `question-answering`
    | Retrieve the answer to a question from a given text. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.QuestionAnsweringPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=question-answering&library=transformers.js)
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| [问答](https://huggingface.co/tasks/question-answering) | `question-answering`
    | 从给定文本中检索问题的答案。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.QuestionAnsweringPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=question-answering&library=transformers.js)
    |'
- en: '| [Sentence Similarity](https://huggingface.co/tasks/sentence-similarity) |
    `sentence-similarity` | Determining how similar two texts are. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.FeatureExtractionPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=feature-extraction&library=transformers.js)
    |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| [句子相似度](https://huggingface.co/tasks/sentence-similarity) | `sentence-similarity`
    | 确定两个文本有多相似。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.FeatureExtractionPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=feature-extraction&library=transformers.js)
    |'
- en: '| [Summarization](https://huggingface.co/tasks/summarization) | `summarization`
    | Producing a shorter version of a document while preserving its important information.
    | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.SummarizationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=summarization&library=transformers.js)
    |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| [摘要](https://huggingface.co/tasks/summarization) | `summarization` | 生成文档的简短版本，同时保留其重要信息。
    | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.SummarizationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=summarization&library=transformers.js)
    |'
- en: '| [Table Question Answering](https://huggingface.co/tasks/table-question-answering)
    | `table-question-answering` | Answering a question about information from a given
    table. | ❌ |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| [表格问答](https://huggingface.co/tasks/table-question-answering) | `table-question-answering`
    | 回答关于给定表格信息的问题。 | ❌ |'
- en: '| [Text Classification](https://huggingface.co/tasks/text-classification) |
    `text-classification` or `sentiment-analysis` | Assigning a label or class to
    a given text. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TextClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=text-classification&library=transformers.js)
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| [文本分类](https://huggingface.co/tasks/text-classification) | `text-classification`
    或 `sentiment-analysis` | 为给定文本分配一个标签或类别。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TextClassificationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=text-classification&library=transformers.js)
    |'
- en: '| [Text Generation](https://huggingface.co/tasks/text-generation#completion-generation-models)
    | `text-generation` | Producing new text by predicting the next word in a sequence.
    | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TextGenerationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=text-generation&library=transformers.js)
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| [文本生成](https://huggingface.co/tasks/text-generation#completion-generation-models)
    | `text-generation` | 通过预测序列中的下一个单词来生成新文本。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TextGenerationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=text-generation&library=transformers.js)
    |'
- en: '| [Text-to-text Generation](https://huggingface.co/tasks/text-generation#text-to-text-generation-models)
    | `text2text-generation` | Converting one text sequence into another text sequence.
    | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.Text2TextGenerationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=text2text-generation&library=transformers.js)
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| [文本到文本生成](https://huggingface.co/tasks/text-generation#text-to-text-generation-models)
    | `text2text-generation` | 将一个文本序列转换为另一个文本序列。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.Text2TextGenerationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=text2text-generation&library=transformers.js)
    |'
- en: '| [Token Classification](https://huggingface.co/tasks/token-classification)
    | `token-classification` or `ner` | Assigning a label to each token in a text.
    | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TokenClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=token-classification&library=transformers.js)
    |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| [标记分类](https://huggingface.co/tasks/token-classification) | `token-classification`
    或 `ner` | 为文本中的每个标记分配一个标签。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TokenClassificationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=token-classification&library=transformers.js)
    |'
- en: '| [Translation](https://huggingface.co/tasks/translation) | `translation` |
    Converting text from one language to another. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TranslationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=translation&library=transformers.js)
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| [翻译](https://huggingface.co/tasks/translation) | `translation` | 将文本从一种语言转换为另一种语言。
    | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TranslationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=translation&library=transformers.js)
    |'
- en: '| [Zero-Shot Classification](https://huggingface.co/tasks/zero-shot-classification)
    | `zero-shot-classification` | Classifying text into classes that are unseen during
    training. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=zero-shot-classification&library=transformers.js)
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| [零样本分类](https://huggingface.co/tasks/zero-shot-classification) | `zero-shot-classification`
    | 将文本分类为在训练期间未见过的类别。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotClassificationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=zero-shot-classification&library=transformers.js)
    |'
- en: Vision
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 视觉
- en: '| Task | ID | Description | Supported? |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | ID | 描述 | 是否支持？ |'
- en: '| --- | --- | --- | --- |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| [Depth Estimation](https://huggingface.co/tasks/depth-estimation) | `depth-estimation`
    | Predicting the depth of objects present in an image. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.DepthEstimationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=depth-estimation&library=transformers.js)
    |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| [深度估计](https://huggingface.co/tasks/depth-estimation) | `depth-estimation`
    | 预测图像中存在的对象的深度。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.DepthEstimationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=depth-estimation&library=transformers.js)
    |'
- en: '| [Image Classification](https://huggingface.co/tasks/image-classification)
    | `image-classification` | Assigning a label or class to an entire image. | ✅
    [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=image-classification&library=transformers.js)
    |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| [图像分类](https://huggingface.co/tasks/image-classification) | `image-classification`
    | 为整个图像分配标签或类别。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageClassificationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=image-classification&library=transformers.js)
    |'
- en: '| [Image Segmentation](https://huggingface.co/tasks/image-segmentation) | `image-segmentation`
    | Divides an image into segments where each pixel is mapped to an object. This
    task has multiple variants such as instance segmentation, panoptic segmentation
    and semantic segmentation. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageSegmentationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=image-segmentation&library=transformers.js)
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| [图像分割](https://huggingface.co/tasks/image-segmentation) | `image-segmentation`
    | 将图像分割成每个像素映射到对象的段。此任务有多个变体，如实例分割、全景分割和语义分割。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageSegmentationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=image-segmentation&library=transformers.js)
    |'
- en: '| [Image-to-Image](https://huggingface.co/tasks/image-to-image) | `image-to-image`
    | Transforming a source image to match the characteristics of a target image or
    a target image domain. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageToImagePipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=image-to-image&library=transformers.js)
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| [图像对图像](https://huggingface.co/tasks/image-to-image) | `image-to-image` |
    将源图像转换为与目标图像或目标图像域的特征相匹配。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageToImagePipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=image-to-image&library=transformers.js)
    |'
- en: '| [Mask Generation](https://huggingface.co/tasks/mask-generation) | `mask-generation`
    | Generate masks for the objects in an image. | ❌ |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| [掩膜生成](https://huggingface.co/tasks/mask-generation) | `mask-generation`
    | 为图像中的对象生成掩膜。 | ❌ |'
- en: '| [Object Detection](https://huggingface.co/tasks/object-detection) | `object-detection`
    | Identify objects of certain defined classes within an image. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ObjectDetectionPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=object-detection&library=transformers.js)
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| [目标检测](https://huggingface.co/tasks/object-detection) | `object-detection`
    | 在图像中识别特定定义类别的对象。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ObjectDetectionPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=object-detection&library=transformers.js)
    |'
- en: '| [Video Classification](https://huggingface.co/tasks/video-classification)
    | n/a | Assigning a label or class to an entire video. | ❌ |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| [视频分类](https://huggingface.co/tasks/video-classification) | n/a | 为整个视频分配标签或类别。
    | ❌ |'
- en: '| [Unconditional Image Generation](https://huggingface.co/tasks/unconditional-image-generation)
    | n/a | Generating images with no condition in any context (like a prompt text
    or another image). | ❌ |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| [无条件图像生成](https://huggingface.co/tasks/unconditional-image-generation) |
    n/a | 在任何情境中生成没有条件的图像（如提示文本或另一幅图像）。 | ❌ |'
- en: Audio
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 音频
- en: '| Task | ID | Description | Supported? |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | ID | 描述 | 是否支持？ |'
- en: '| --- | --- | --- | --- |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| [Audio Classification](https://huggingface.co/tasks/audio-classification)
    | `audio-classification` | Assigning a label or class to a given audio. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.AudioClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=audio-classification&library=transformers.js)
    |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| [音频分类](https://huggingface.co/tasks/audio-classification) | `audio-classification`
    | 为给定音频分配标签或类别。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.AudioClassificationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=audio-classification&library=transformers.js)
    |'
- en: '| [Audio-to-Audio](https://huggingface.co/tasks/audio-to-audio) | n/a | Generating
    audio from an input audio source. | ❌ |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| [音频对音频](https://huggingface.co/tasks/audio-to-audio) | n/a | 从输入音频源生成音频。
    | ❌ |'
- en: '| [Automatic Speech Recognition](https://huggingface.co/tasks/automatic-speech-recognition)
    | `automatic-speech-recognition` | Transcribing a given audio into text. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.AutomaticSpeechRecognitionPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=automatic-speech-recognition&library=transformers.js)
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| [自动语音识别](https://huggingface.co/tasks/automatic-speech-recognition) | `automatic-speech-recognition`
    | 将给定的音频转录为文本。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.AutomaticSpeechRecognitionPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=automatic-speech-recognition&library=transformers.js)
    |'
- en: '| [Text-to-Speech](https://huggingface.co/tasks/text-to-speech) | `text-to-speech`
    or `text-to-audio` | Generating natural-sounding speech given text input. | ✅
    [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TextToAudioPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=text-to-audio&library=transformers.js)
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| [文本到语音](https://huggingface.co/tasks/text-to-speech) | `text-to-speech` 或
    `text-to-audio` | 根据文本输入生成自然音质的语音。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.TextToAudioPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=text-to-audio&library=transformers.js)
    |'
- en: Tabular
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 表格
- en: '| Task | ID | Description | Supported? |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | ID | 描述 | 是否支持？ |'
- en: '| --- | --- | --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| [Tabular Classification](https://huggingface.co/tasks/tabular-classification)
    | n/a | Classifying a target category (a group) based on set of attributes. |
    ❌ |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| [表格分类](https://huggingface.co/tasks/tabular-classification) | n/a | 基于一组属性对目标类别（一组）进行分类。
    | ❌ |'
- en: '| [Tabular Regression](https://huggingface.co/tasks/tabular-regression) | n/a
    | Predicting a numerical value given a set of attributes. | ❌ |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| [表格回归](https://huggingface.co/tasks/tabular-regression) | n/a | 根据一组属性预测数值。
    | ❌ |'
- en: Multimodal
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多模态
- en: '| Task | ID | Description | Supported? |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | ID | 描述 | 是否支持？ |'
- en: '| --- | --- | --- | --- |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| [Document Question Answering](https://huggingface.co/tasks/document-question-answering)
    | `document-question-answering` | Answering questions on document images. | ✅
    [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.DocumentQuestionAnsweringPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=document-question-answering&library=transformers.js)
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| [文档问答](https://huggingface.co/tasks/document-question-answering) | `document-question-answering`
    | 在文档图像上回答问题。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.DocumentQuestionAnsweringPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=document-question-answering&library=transformers.js)
    |'
- en: '| [Feature Extraction](https://huggingface.co/tasks/feature-extraction) | `feature-extraction`
    | Transforming raw data into numerical features that can be processed while preserving
    the information in the original dataset. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.FeatureExtractionPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=feature-extraction&library=transformers.js)
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| [特征提取](https://huggingface.co/tasks/feature-extraction) | `feature-extraction`
    | 将原始数据转换为可以处理的数字特征，同时保留原始数据集中的信息。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.FeatureExtractionPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=feature-extraction&library=transformers.js)
    |'
- en: '| [Image-to-Text](https://huggingface.co/tasks/image-to-text) | `image-to-text`
    | Output text from a given image. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageToTextPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=image-to-text&library=transformers.js)
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| [图像到文本](https://huggingface.co/tasks/image-to-text) | `image-to-text` | 根据给定图像输出文本。
    | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ImageToTextPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=image-to-text&library=transformers.js)
    |'
- en: '| [Text-to-Image](https://huggingface.co/tasks/text-to-image) | `text-to-image`
    | Generates images from input text. | ❌ |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| [文本到图像](https://huggingface.co/tasks/text-to-image) | `text-to-image` | 从输入文本生成图像。
    | ❌ |'
- en: '| [Visual Question Answering](https://huggingface.co/tasks/visual-question-answering)
    | `visual-question-answering` | Answering open-ended questions based on an image.
    | ❌ |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| [视觉问答](https://huggingface.co/tasks/visual-question-answering) | `visual-question-answering`
    | 基于图像回答开放性问题。 | ❌ |'
- en: '| [Zero-Shot Audio Classification](https://huggingface.co/learn/audio-course/chapter4/classification_models#zero-shot-audio-classification)
    | `zero-shot-audio-classification` | Classifying audios into classes that are
    unseen during training. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotAudioClassificationPipeline)
    [(models)](https://huggingface.co/models?other=zero-shot-audio-classification&library=transformers.js)
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| [零样本音频分类](https://huggingface.co/learn/audio-course/chapter4/classification_models#zero-shot-audio-classification)
    | `zero-shot-audio-classification` | 将音频分类为在训练期间未见过的类别。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotAudioClassificationPipeline)
    [(模型)](https://huggingface.co/models?other=zero-shot-audio-classification&library=transformers.js)
    |'
- en: '| [Zero-Shot Image Classification](https://huggingface.co/tasks/zero-shot-image-classification)
    | `zero-shot-image-classification` | Classifying images into classes that are
    unseen during training. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotImageClassificationPipeline)
    [(models)](https://huggingface.co/models?pipeline_tag=zero-shot-image-classification&library=transformers.js)
    |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| [零样本图像分类](https://huggingface.co/tasks/zero-shot-image-classification) |
    `zero-shot-image-classification` | 将图像分类为在训练期间未见过的类别。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotImageClassificationPipeline)
    [(模型)](https://huggingface.co/models?pipeline_tag=zero-shot-image-classification&library=transformers.js)
    |'
- en: '| [Zero-Shot Object Detection](https://huggingface.co/tasks/zero-shot-object-detection)
    | `zero-shot-object-detection` | Identify objects of classes that are unseen during
    training. | ✅ [(docs)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotObjectDetectionPipeline)
    [(models)](https://huggingface.co/models?other=zero-shot-object-detection&library=transformers.js)
    |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| [零样本目标检测](https://huggingface.co/tasks/zero-shot-object-detection) | `zero-shot-object-detection`
    | 识别在训练期间未见过的类别的对象。 | ✅ [(文档)](https://huggingface.co/docs/transformers.js/api/pipelines#module_pipelines.ZeroShotObjectDetectionPipeline)
    [(模型)](https://huggingface.co/models?other=zero-shot-object-detection&library=transformers.js)
    |'
- en: Reinforcement Learning
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 强化学习
- en: '| Task | ID | Description | Supported? |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | ID | 描述 | 是否支持？ |'
- en: '| --- | --- | --- | --- |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| [Reinforcement Learning](https://huggingface.co/tasks/reinforcement-learning)
    | n/a | Learning from actions by interacting with an environment through trial
    and error and receiving rewards (negative or positive) as feedback. | ❌ |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| [强化学习](https://huggingface.co/tasks/reinforcement-learning) | n/a | 通过与环境互动并通过试错接收奖励（负面或正面）作为反馈来学习行为。
    | ❌ |'
