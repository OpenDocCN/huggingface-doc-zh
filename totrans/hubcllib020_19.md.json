["```py\n>>> from huggingface_hub import HfApi\n>>> repo_id = \"Wauplin/my-cool-training-space\"\n>>> api = HfApi()\n\n# For example with a Gradio SDK\n>>> api.create_repo(repo_id=repo_id, repo_type=\"space\", space_sdk=\"gradio\")\n```", "```py\n>>> api.duplicate_space(\"multimodalart/dreambooth-training\")\n```", "```py\n>>> api.upload_folder(repo_id=repo_id, repo_type=\"space\", folder_path=\"src/\")\n```", "```py\n>>> api.add_space_secret(repo_id=repo_id, key=\"HF_TOKEN\", value=\"hf_api_***\")\n>>> api.add_space_variable(repo_id=repo_id, key=\"MODEL_REPO_ID\", value=\"user/repo\")\n```", "```py\n>>> api.delete_space_secret(repo_id=repo_id, key=\"HF_TOKEN\")\n>>> api.delete_space_variable(repo_id=repo_id, key=\"MODEL_REPO_ID\")\n```", "```py\n>>> api.create_repo(\n...     repo_id=repo_id,\n...     repo_type=\"space\",\n...     space_sdk=\"gradio\",\n...     space_secrets=[{\"key\"=\"HF_TOKEN\", \"value\"=\"hf_api_***\"}, ...],\n...     space_variables=[{\"key\"=\"MODEL_REPO_ID\", \"value\"=\"user/repo\"}, ...],\n... )\n```", "```py\n>>> api.duplicate_space(\n...     from_id=repo_id,\n...     secrets=[{\"key\"=\"HF_TOKEN\", \"value\"=\"hf_api_***\"}, ...],\n...     variables=[{\"key\"=\"MODEL_REPO_ID\", \"value\"=\"user/repo\"}, ...],\n... )\n```", "```py\n# Use `SpaceHardware` enum\n>>> from huggingface_hub import SpaceHardware\n>>> api.request_space_hardware(repo_id=repo_id, hardware=SpaceHardware.T4_MEDIUM)\n\n# Or simply pass a string value\n>>> api.request_space_hardware(repo_id=repo_id, hardware=\"t4-medium\")\n```", "```py\n>>> runtime = api.get_space_runtime(repo_id=repo_id)\n>>> runtime.stage\n\"RUNNING_BUILDING\"\n>>> runtime.hardware\n\"cpu-basic\"\n>>> runtime.requested_hardware\n\"t4-medium\"\n```", "```py\n>>> api.create_repo(\n...     repo_id=repo_id,\n...     repo_type=\"space\",\n...     space_sdk=\"gradio\"\n...     space_hardware=\"cpu-upgrade\",\n...     space_storage=\"small\",\n...     space_sleep_time=\"7200\", # 2 hours in secs\n... )\n```", "```py\n>>> api.duplicate_space(\n...     from_id=repo_id,\n...     hardware=\"cpu-upgrade\",\n...     storage=\"small\",\n...     sleep_time=\"7200\", # 2 hours in secs\n... )\n```", "```py\n# Pause your Space to avoid getting billed\n>>> api.pause_space(repo_id=repo_id)\n# (...)\n# Restart it when you need it\n>>> api.restart_space(repo_id=repo_id)\n```", "```py\n# Put your Space to sleep after 1h of inactivity\n>>> api.set_space_sleep_time(repo_id=repo_id, sleep_time=3600)\n```", "```py\n>>> api.request_space_hardware(repo_id=repo_id, hardware=SpaceHardware.T4_MEDIUM, sleep_time=3600)\n```", "```py\n>>> api.create_repo(\n...     repo_id=repo_id,\n...     repo_type=\"space\",\n...     space_sdk=\"gradio\"\n...     space_hardware=\"t4-medium\",\n...     space_sleep_time=\"3600\",\n... )\n```", "```py\n>>> api.duplicate_space(\n...     from_id=repo_id,\n...     hardware=\"t4-medium\",\n...     sleep_time=\"3600\",\n... )\n```", "```py\n>>> from huggingface_hub import SpaceStorage\n>>> api.request_space_storage(repo_id=repo_id, storage=SpaceStorage.LARGE)\n```", "```py\n>>> api.delete_space_storage(repo_id=repo_id)\n```", "```py\n>>> api.create_repo(\n...     repo_id=repo_id,\n...     repo_type=\"space\",\n...     space_sdk=\"gradio\"\n...     space_storage=\"large\",\n... )\n```", "```py\n>>> api.duplicate_space(\n...     from_id=repo_id,\n...     storage=\"large\",\n... )\n```", "```py\n# Space will need your token to request hardware: set it as a Secret !\nHF_TOKEN = os.environ.get(\"HF_TOKEN\")\n\n# Space own repo_id\nTRAINING_SPACE_ID = \"Wauplin/dreambooth-training\"\n\nfrom huggingface_hub import HfApi, SpaceHardware\napi = HfApi(token=HF_TOKEN)\n\n# On Space startup, check if a task is scheduled. If yes, finetune the model. If not,\n# display an interface to request a new task.\ntask = get_task()\nif task is None:\n    # Start Gradio app\n    def gradio_fn(task):\n        # On user request, add task and request hardware\n        add_task(task)\n        api.request_space_hardware(repo_id=TRAINING_SPACE_ID, hardware=SpaceHardware.T4_MEDIUM)\n\n    gr.Interface(fn=gradio_fn, ...).launch()\nelse:\n    runtime = api.get_space_runtime(repo_id=TRAINING_SPACE_ID)\n    # Check if Space is loaded with a GPU.\n    if runtime.hardware == SpaceHardware.T4_MEDIUM:\n        # If yes, finetune base model on dataset !\n        train_and_upload(task)\n\n        # Then, mark the task as \"DONE\"\n        mark_as_done(task)\n\n        # DO NOT FORGET: set back CPU hardware\n        api.request_space_hardware(repo_id=TRAINING_SPACE_ID, hardware=SpaceHardware.CPU_BASIC)\n    else:\n        api.request_space_hardware(repo_id=TRAINING_SPACE_ID, hardware=SpaceHardware.T4_MEDIUM)\n```", "```py\n# Dataset ID in which a `tasks.csv` file contains the tasks to perform.\n# Here is a basic example for `tasks.csv` containing inputs (base model and dataset)\n# and status (PENDING or DONE).\n#     multimodalart/sd-fine-tunable,Wauplin/concept-1,DONE\n#     multimodalart/sd-fine-tunable,Wauplin/concept-2,PENDING\nTASK_DATASET_ID = \"Wauplin/dreambooth-task-scheduler\"\n\ndef _get_csv_file():\n    return hf_hub_download(repo_id=TASK_DATASET_ID, filename=\"tasks.csv\", repo_type=\"dataset\", token=HF_TOKEN)\n\ndef get_task():\n    with open(_get_csv_file()) as csv_file:\n        csv_reader = csv.reader(csv_file, delimiter=',')\n        for row in csv_reader:\n            if row[2] == \"PENDING\":\n                return row[0], row[1] # model_id, dataset_id\n\ndef add_task(task):\n    model_id, dataset_id = task\n    with open(_get_csv_file()) as csv_file:\n        with open(csv_file, \"r\") as f:\n            tasks = f.read()\n\n    api.upload_file(\n        repo_id=repo_id,\n        repo_type=repo_type,\n        path_in_repo=\"tasks.csv\",\n        # Quick and dirty way to add a task\n        path_or_fileobj=(tasks + f\"\\n{model_id},{dataset_id},PENDING\").encode()\n    )\n\ndef mark_as_done(task):\n    model_id, dataset_id = task\n    with open(_get_csv_file()) as csv_file:\n        with open(csv_file, \"r\") as f:\n            tasks = f.read()\n\n    api.upload_file(\n        repo_id=repo_id,\n        repo_type=repo_type,\n        path_in_repo=\"tasks.csv\",\n        # Quick and dirty way to set the task as DONE\n        path_or_fileobj=tasks.replace(\n            f\"{model_id},{dataset_id},PENDING\",\n            f\"{model_id},{dataset_id},DONE\"\n        ).encode()\n    )\n```"]