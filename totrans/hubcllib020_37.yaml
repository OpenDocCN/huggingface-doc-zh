- en: Cache-system reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/huggingface_hub/package_reference/cache](https://huggingface.co/docs/huggingface_hub/package_reference/cache)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/start.81f0ceaa.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/scheduler.6062bdaf.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/singletons.3c2729d2.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/paths.566d2d8a.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/app.77e31cee.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/index.4bca734e.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/0.d6dfa8c0.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/21.40add488.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Tip.b9ac1f03.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Docstring.ed07512f.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Heading.723dceba.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/CodeBlock.fa01571c.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/ExampleCodeBlock.823fb173.js">
  prefs: []
  type: TYPE_NORMAL
- en: The caching system was updated in v0.8.0 to become the central cache-system
    shared across libraries that depend on the Hub. Read the [cache-system guide](../guides/manage-cache)
    for a detailed presentation of caching at HF.
  prefs: []
  type: TYPE_NORMAL
- en: Helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: try_to_load_from_cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### huggingface_hub.try_to_load_from_cache'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/file_download.py#L1495)'
  prefs: []
  type: TYPE_NORMAL
- en: '( repo_id: str filename: str cache_dir: Union = None revision: Optional = None
    repo_type: Optional = None ) → `Optional[str]` or `_CACHED_NO_EXIST`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**cache_dir** (`str` or `os.PathLike`) — The folder where the cached files
    lie.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**repo_id** (`str`) — The ID of the repo on huggingface.co.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filename** (`str`) — The filename to look for inside `repo_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**revision** (`str`, *optional*) — The specific model version to use. Will
    default to `"main"` if it’s not provided and no `commit_hash` is provided either.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**repo_type** (`str`, *optional*) — The type of the repository. Will default
    to `"model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Optional[str]` or `_CACHED_NO_EXIST`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Will return `None` if the file was not cached. Otherwise:'
  prefs: []
  type: TYPE_NORMAL
- en: The exact path to the cached file if it’s found in the cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A special value `_CACHED_NO_EXIST` if the file does not exist at the given commit
    hash and this fact was cached.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explores the cache to return the latest cached file for a given revision if
    found.
  prefs: []
  type: TYPE_NORMAL
- en: This function will not raise any exception if the file in not cached.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: cached_assets_path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### huggingface_hub.cached_assets_path'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_assets.py#L21)'
  prefs: []
  type: TYPE_NORMAL
- en: '( library_name: str namespace: str = ''default'' subfolder: str = ''default''
    assets_dir: Union = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**library_name** (`str`) — Name of the library that will manage the cache folder.
    Example: `"dataset"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**namespace** (`str`, *optional*, defaults to “default”) — Namespace to which
    the data belongs. Example: `"SQuAD"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**subfolder** (`str`, *optional*, defaults to “default”) — Subfolder in which
    the data will be stored. Example: `extracted`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**assets_dir** (`str`, `Path`, *optional*) — Path to the folder where assets
    are cached. This must not be the same folder where Hub files are cached. Defaults
    to `HF_HOME / "assets"` if not provided. Can also be set with `HF_ASSETS_CACHE`
    environment variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return a folder path to cache arbitrary files.
  prefs: []
  type: TYPE_NORMAL
- en: '`huggingface_hub` provides a canonical folder path to store assets. This is
    the recommended way to integrate cache in a downstream library as it will benefit
    from the builtins tools to scan and delete the cache properly.'
  prefs: []
  type: TYPE_NORMAL
- en: The distinction is made between files cached from the Hub and assets. Files
    from the Hub are cached in a git-aware manner and entirely managed by `huggingface_hub`.
    See [related documentation](https://huggingface.co/docs/huggingface_hub/how-to-cache).
    All other files that a downstream library caches are considered to be “assets”
    (files downloaded from external sources, extracted from a .tar archive, preprocessed
    for training,…).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the folder path is generated, it is guaranteed to exist and to be a directory.
    The path is based on 3 levels of depth: the library name, a namespace and a subfolder.
    Those 3 levels grants flexibility while allowing `huggingface_hub` to expect folders
    when scanning/deleting parts of the assets cache. Within a library, it is expected
    that all namespaces share the same subset of subfolder names but this is not a
    mandatory rule. The downstream library has then full control on which file structure
    to adopt within its cache. Namespace and subfolder are optional (would default
    to a `"default/"` subfolder) but library name is mandatory as we want every downstream
    library to manage its own cache.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Expected tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: scan_cache_dir
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### huggingface_hub.scan_cache_dir'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L496)'
  prefs: []
  type: TYPE_NORMAL
- en: '( cache_dir: Union = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**cache_dir** (`str` or `Path`, `optional`) — Cache directory to cache. Defaults
    to the default HF cache directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`CacheNotFound` or `ValueError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CacheNotFound` — If the cache directory does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    — If the cache directory is a file, instead of a directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scan the entire HF cache-system and return a [~HFCacheInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.HFCacheInfo)
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: Use `scan_cache_dir` in order to programmatically scan your cache-system. The
    cache will be scanned repo by repo. If a repo is corrupted, a [~CorruptedCacheException](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.CorruptedCacheException)
    will be thrown internally but captured and returned in the [~HFCacheInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.HFCacheInfo)
    structure. Only valid repos get a proper report.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also print a detailed report directly from the `huggingface-cli` using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Returns: a [~HFCacheInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.HFCacheInfo)
    object.'
  prefs: []
  type: TYPE_NORMAL
- en: Data structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All structures are built and returned by [scan_cache_dir()](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.scan_cache_dir)
    and are immutable.
  prefs: []
  type: TYPE_NORMAL
- en: HFCacheInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### class huggingface_hub.HFCacheInfo'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L353)'
  prefs: []
  type: TYPE_NORMAL
- en: '( size_on_disk: int repos: FrozenSet warnings: List )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**size_on_disk** (`int`) — Sum of all valid repo sizes in the cache-system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**repos** (`FrozenSet[CachedRepoInfo]`) — Set of [~CachedRepoInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.CachedRepoInfo)
    describing all valid cached repos found on the cache-system while scanning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**warnings** (`List[CorruptedCacheException]`) — List of [~CorruptedCacheException](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.CorruptedCacheException)
    that occurred while scanning the cache. Those exceptions are captured so that
    the scan can continue. Corrupted repos are skipped from the scan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frozen data structure holding information about the entire cache-system.
  prefs: []
  type: TYPE_NORMAL
- en: This data structure is returned by [scan_cache_dir()](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.scan_cache_dir)
    and is immutable.
  prefs: []
  type: TYPE_NORMAL
- en: Here `size_on_disk` is equal to the sum of all repo sizes (only blobs). However
    if some cached repos are corrupted, their sizes are not taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: '#### delete_revisions'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L392)'
  prefs: []
  type: TYPE_NORMAL
- en: '( *revisions: str )'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the strategy to delete one or more revisions cached locally.
  prefs: []
  type: TYPE_NORMAL
- en: Input revisions can be any revision hash. If a revision hash is not found in
    the local cache, a warning is thrown but no error is raised. Revisions can be
    from different cached repos since hashes are unique across repos,
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`delete_revisions` returns a [DeleteCacheStrategy](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.DeleteCacheStrategy)
    object that needs to be executed. The [DeleteCacheStrategy](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.DeleteCacheStrategy)
    is not meant to be modified but allows having a dry run before actually executing
    the deletion.'
  prefs: []
  type: TYPE_NORMAL
- en: CachedRepoInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### class huggingface_hub.CachedRepoInfo'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L191)'
  prefs: []
  type: TYPE_NORMAL
- en: '( repo_id: str repo_type: Literal repo_path: Path size_on_disk: int nb_files:
    int revisions: FrozenSet last_accessed: float last_modified: float )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**repo_id** (`str`) — Repo id of the repo on the Hub. Example: `"google/fleurs"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**repo_type** (`Literal["dataset", "model", "space"]`) — Type of the cached
    repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**repo_path** (`Path`) — Local path to the cached repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size_on_disk** (`int`) — Sum of the blob file sizes in the cached repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**nb_files** (`int`) — Total number of blob files in the cached repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**revisions** (`FrozenSet[CachedRevisionInfo]`) — Set of [~CachedRevisionInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.CachedRevisionInfo)
    describing all revisions cached in the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_accessed** (`float`) — Timestamp of the last time a blob file of the
    repo has been accessed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_modified** (`float`) — Timestamp of the last time a blob file of the
    repo has been modified/created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frozen data structure holding information about a cached repository.
  prefs: []
  type: TYPE_NORMAL
- en: '`size_on_disk` is not necessarily the sum of all revisions sizes because of
    duplicated files. Besides, only blobs are taken into account, not the (negligible)
    size of folders and symlinks.'
  prefs: []
  type: TYPE_NORMAL
- en: '`last_accessed` and `last_modified` reliability can depend on the OS you are
    using. See [python documentation](https://docs.python.org/3/library/os.html#os.stat_result)
    for more details.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### size_on_disk_str'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L260)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: (property) Sum of the blob file sizes as a human-readable string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: “42.2K”.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### refs'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L269)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: (property) Mapping between `refs` and revision data structures.
  prefs: []
  type: TYPE_NORMAL
- en: CachedRevisionInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### class huggingface_hub.CachedRevisionInfo'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L114)'
  prefs: []
  type: TYPE_NORMAL
- en: '( commit_hash: str snapshot_path: Path size_on_disk: int files: FrozenSet refs:
    FrozenSet last_modified: float )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**commit_hash** (`str`) — Hash of the revision (unique). Example: `"9338f7b671827df886678df2bdd7cc7b4f36dffd"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**snapshot_path** (`Path`) — Path to the revision directory in the `snapshots`
    folder. It contains the exact tree structure as the repo on the Hub. files — (`FrozenSet[CachedFileInfo]`):
    Set of [~CachedFileInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.CachedFileInfo)
    describing all files contained in the snapshot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**refs** (`FrozenSet[str]`) — Set of `refs` pointing to this revision. If the
    revision has no `refs`, it is considered detached. Example: `{"main", "2.4.0"}`
    or `{"refs/pr/1"}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size_on_disk** (`int`) — Sum of the blob file sizes that are symlink-ed by
    the revision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**last_modified** (`float`) — Timestamp of the last time the revision has been
    created/modified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frozen data structure holding information about a revision.
  prefs: []
  type: TYPE_NORMAL
- en: A revision correspond to a folder in the `snapshots` folder and is populated
    with the exact tree structure as the repo on the Hub but contains only symlinks.
    A revision can be either referenced by 1 or more `refs` or be “detached” (no refs).
  prefs: []
  type: TYPE_NORMAL
- en: '`last_accessed` cannot be determined correctly on a single revision as blob
    files are shared across revisions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`size_on_disk` is not necessarily the sum of all file sizes because of possible
    duplicated files. Besides, only blobs are taken into account, not the (negligible)
    size of folders and symlinks.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### size_on_disk_str'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L174)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: (property) Sum of the blob file sizes as a human-readable string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: “42.2K”.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### nb_files'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L183)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: (property) Total number of files in the revision.
  prefs: []
  type: TYPE_NORMAL
- en: CachedFileInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### class huggingface_hub.CachedFileInfo'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L47)'
  prefs: []
  type: TYPE_NORMAL
- en: '( file_name: str file_path: Path blob_path: Path size_on_disk: int blob_last_accessed:
    float blob_last_modified: float )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**file_name** (`str`) — Name of the file. Example: `config.json`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**file_path** (`Path`) — Path of the file in the `snapshots` directory. The
    file path is a symlink referring to a blob in the `blobs` folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**blob_path** (`Path`) — Path of the blob file. This is equivalent to `file_path.resolve()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**size_on_disk** (`int`) — Size of the blob file in bytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**blob_last_accessed** (`float`) — Timestamp of the last time the blob file
    has been accessed (from any revision).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**blob_last_modified** (`float`) — Timestamp of the last time the blob file
    has been modified/created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frozen data structure holding information about a single cached file.
  prefs: []
  type: TYPE_NORMAL
- en: '`blob_last_accessed` and `blob_last_modified` reliability can depend on the
    OS you are using. See [python documentation](https://docs.python.org/3/library/os.html#os.stat_result)
    for more details.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### size_on_disk_str'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L104)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: (property) Size of the blob file as a human-readable string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: “42.2K”.'
  prefs: []
  type: TYPE_NORMAL
- en: DeleteCacheStrategy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### class huggingface_hub.DeleteCacheStrategy'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L277)'
  prefs: []
  type: TYPE_NORMAL
- en: '( expected_freed_size: int blobs: FrozenSet refs: FrozenSet repos: FrozenSet
    snapshots: FrozenSet )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**expected_freed_size** (`float`) — Expected freed size once strategy is executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**blobs** (`FrozenSet[Path]`) — Set of blob file paths to be deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**refs** (`FrozenSet[Path]`) — Set of reference file paths to be deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**repos** (`FrozenSet[Path]`) — Set of entire repo paths to be deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**snapshots** (`FrozenSet[Path]`) — Set of snapshots to be deleted (directory
    of symlinks).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frozen data structure holding the strategy to delete cached revisions.
  prefs: []
  type: TYPE_NORMAL
- en: This object is not meant to be instantiated programmatically but to be returned
    by [delete_revisions()](/docs/huggingface_hub/v0.20.3/en/package_reference/cache#huggingface_hub.HFCacheInfo.delete_revisions).
    See documentation for usage example.
  prefs: []
  type: TYPE_NORMAL
- en: '#### expected_freed_size_str'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L303)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: (property) Expected size that will be freed as a human-readable string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: “42.2K”.'
  prefs: []
  type: TYPE_NORMAL
- en: Exceptions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CorruptedCacheException
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### class huggingface_hub.CorruptedCacheException'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_cache_manager.py#L43)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Exception for any unexpected structure in the Huggingface cache-system.
  prefs: []
  type: TYPE_NORMAL
