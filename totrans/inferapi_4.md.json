["```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/bert-base-uncased\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query({\"inputs\": \"The answer to the universe is [MASK].\"})\n```", "```py\nself.assertEqual(\n    deep_round(data),\n    [\n        {\n            \"sequence\": \"the answer to the universe is no.\",\n            \"score\": 0.1696,\n            \"token\": 2053,\n            \"token_str\": \"no\",\n        },\n        {\n            \"sequence\": \"the answer to the universe is nothing.\",\n            \"score\": 0.0734,\n            \"token\": 2498,\n            \"token_str\": \"nothing\",\n        },\n        {\n            \"sequence\": \"the answer to the universe is yes.\",\n            \"score\": 0.0580,\n            \"token\": 2748,\n            \"token_str\": \"yes\",\n        },\n        {\n            \"sequence\": \"the answer to the universe is unknown.\",\n            \"score\": 0.044,\n            \"token\": 4242,\n            \"token_str\": \"unknown\",\n        },\n        {\n            \"sequence\": \"the answer to the universe is simple.\",\n            \"score\": 0.0402,\n            \"token\": 3722,\n            \"token_str\": \"simple\",\n        },\n    ],\n)\n```", "```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/facebook/bart-large-cnn\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query(\n    {\n        \"inputs\": \"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930\\. It was the first structure to reach a height of 300 metres. Due to the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France after the Millau Viaduct.\",\n        \"parameters\": {\"do_sample\": False},\n    }\n)\n# Response\nself.assertEqual(\n    data,\n    [\n        {\n            \"summary_text\": \"The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world.\",\n        },\n    ],\n)\n```", "```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/deepset/roberta-base-squad2\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query(\n    {\n        \"inputs\": {\n            \"question\": \"What's my name?\",\n            \"context\": \"My name is Clara and I live in Berkeley.\",\n        }\n    }\n)\n```", "```py\nself.assertEqual(\n    deep_round(data),\n    {\"score\": 0.9327, \"start\": 11, \"end\": 16, \"answer\": \"Clara\"},\n)\n```", "```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query(\n    {\n        \"inputs\": {\n            \"query\": \"How many stars does the transformers repository have?\",\n            \"table\": {\n                \"Repository\": [\"Transformers\", \"Datasets\", \"Tokenizers\"],\n                \"Stars\": [\"36542\", \"4512\", \"3934\"],\n                \"Contributors\": [\"651\", \"77\", \"34\"],\n                \"Programming language\": [\n                    \"Python\",\n                    \"Python\",\n                    \"Rust, Python and NodeJS\",\n                ],\n            },\n        }\n    }\n)\n```", "```py\nself.assertEqual(\n    data,\n    {\n        \"answer\": \"AVERAGE > 36542\",\n        \"coordinates\": [[0, 1]],\n        \"cells\": [\"36542\"],\n        \"aggregator\": \"AVERAGE\",\n    },\n)\n```", "```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/sentence-transformers/all-MiniLM-L6-v2\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query(\n    {\n        \"inputs\": {\n            \"source_sentence\": \"That is a happy person\",\n            \"sentences\": [\"That is a happy dog\", \"That is a very happy person\", \"Today is a sunny day\"],\n        }\n    }\n)\n```", "```py\nself.assertEqual(\n    deep_round(data),\n    deep_round([0.6945773363113403, 0.9429150819778442, 0.2568760812282562]),\n)\n```", "```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query({\"inputs\": \"I like you. I love you\"})\n```", "```py\nself.assertEqual(\n    deep_round(data),\n    [\n        [\n            {\"label\": \"POSITIVE\", \"score\": 0.9999},\n            {\"label\": \"NEGATIVE\", \"score\": 0.0001},\n        ]\n    ],\n)\n```", "```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/gpt2\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query({\"inputs\": \"The answer to the universe is\"})\n```", "```py\ndata == [\n    {\n        \"generated_text\": 'The answer to the universe is that we are the creation of the entire universe,\" says Fitch.\\n\\nAs of the 1960s, six times as many Americans still make fewer than six bucks ($17) per year on their way to retirement.'\n    }\n]\n```", "```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query({\"inputs\": \"My name is Sarah Jessica Parker but you can call me Jessica\"})\n```", "```py\nself.assertEqual(\n    deep_round(data),\n    [\n        {\n            \"entity_group\": \"PER\",\n            \"score\": 0.9991,\n            \"word\": \"Sarah Jessica Parker\",\n            \"start\": 11,\n            \"end\": 31,\n        },\n        {\n            \"entity_group\": \"PER\",\n            \"score\": 0.998,\n            \"word\": \"Jessica\",\n            \"start\": 52,\n            \"end\": 59,\n        },\n    ],\n)\n```", "```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/Helsinki-NLP/opus-mt-ru-en\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query(\n    {\n        \"inputs\": \"\u041c\u0435\u043d\u044f \u0437\u043e\u0432\u0443\u0442 \u0412\u043e\u043b\u044c\u0444\u0433\u0430\u043d\u0433 \u0438 \u044f \u0436\u0438\u0432\u0443 \u0432 \u0411\u0435\u0440\u043b\u0438\u043d\u0435\",\n    }\n)\n# Response\nself.assertEqual(\n    data,\n    [\n        {\n            \"translation_text\": \"My name is Wolfgang and I live in Berlin.\",\n        },\n    ],\n)\n```", "```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/facebook/bart-large-mnli\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query(\n    {\n        \"inputs\": \"Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!\",\n        \"parameters\": {\"candidate_labels\": [\"refund\", \"legal\", \"faq\"]},\n    }\n)\n```", "```py\nself.assertEqual(\n    deep_round(data),\n    {\n        \"sequence\": \"Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!\",\n        \"labels\": [\"refund\", \"faq\", \"legal\"],\n        \"scores\": [\n            # 88% refund\n            0.8778,\n            0.1052,\n            0.017,\n        ],\n    },\n)\n```", "```py\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/microsoft/DialoGPT-large\"\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\ndata = query(\n    {\n        \"inputs\": {\n            \"past_user_inputs\": [\"Which movie is the best ?\"],\n            \"generated_responses\": [\"It's Die Hard for sure.\"],\n            \"text\": \"Can you explain why ?\",\n        },\n    }\n)\n# Response\n# This is annoying\ndata.pop(\"warnings\")\nself.assertEqual(\n    data,\n    {\n        \"generated_text\": \"It's the best movie ever.\",\n        \"conversation\": {\n            \"past_user_inputs\": [\n                \"Which movie is the best ?\",\n                \"Can you explain why ?\",\n            ],\n            \"generated_responses\": [\n                \"It's Die Hard for sure.\",\n                \"It's the best movie ever.\",\n            ],\n        },\n        # \"warnings\": [\"Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\"],\n    },\n)\n```", "```py\nimport json\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/facebook/wav2vec2-base-960h\"\ndef query(filename):\n    with open(filename, \"rb\") as f:\n        data = f.read()\n    response = requests.request(\"POST\", API_URL, headers=headers, data=data)\n    return json.loads(response.content.decode(\"utf-8\"))\ndata = query(\"sample1.flac\")\n```", "```py\nself.assertEqual(\n    data,\n    {\n        \"text\": \"GOING ALONG SLUSHY COUNTRY ROADS AND SPEAKING TO DAMP AUDIENCES IN DRAUGHTY SCHOOL ROOMS DAY AFTER DAY FOR A FORTNIGHT HE'LL HAVE TO PUT IN AN APPEARANCE AT SOME PLACE OF WORSHIP ON SUNDAY MORNING AND HE CAN COME TO US IMMEDIATELY AFTERWARDS\"\n    },\n)\n```", "```py\nimport json\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/superb/hubert-large-superb-er\"\ndef query(filename):\n    with open(filename, \"rb\") as f:\n        data = f.read()\n    response = requests.request(\"POST\", API_URL, headers=headers, data=data)\n    return json.loads(response.content.decode(\"utf-8\"))\ndata = query(\"sample1.flac\")\n```", "```py\nself.assertEqual(\n    deep_round(data, 4),\n    [\n        {\"score\": 0.5928, \"label\": \"neu\"},\n        {\"score\": 0.2003, \"label\": \"hap\"},\n        {\"score\": 0.128, \"label\": \"ang\"},\n        {\"score\": 0.079, \"label\": \"sad\"},\n    ],\n)\n```", "```py\nimport json\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/google/vit-base-patch16-224\"\ndef query(filename):\n    with open(filename, \"rb\") as f:\n        data = f.read()\n    response = requests.request(\"POST\", API_URL, headers=headers, data=data)\n    return json.loads(response.content.decode(\"utf-8\"))\ndata = query(\"cats.jpg\")\n```", "```py\nself.assertEqual(\n    deep_round(data, 4),\n    [\n        {\"score\": 0.9374, \"label\": \"Egyptian cat\"},\n        {\"score\": 0.0384, \"label\": \"tabby, tabby cat\"},\n        {\"score\": 0.0144, \"label\": \"tiger cat\"},\n        {\"score\": 0.0033, \"label\": \"lynx, catamount\"},\n        {\"score\": 0.0007, \"label\": \"Siamese cat, Siamese\"},\n    ],\n)\n```", "```py\nimport json\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/facebook/detr-resnet-50\"\ndef query(filename):\n    with open(filename, \"rb\") as f:\n        data = f.read()\n    response = requests.request(\"POST\", API_URL, headers=headers, data=data)\n    return json.loads(response.content.decode(\"utf-8\"))\ndata = query(\"cats.jpg\")\n```", "```py\nself.assertEqual(\n    deep_round(data, 4),\n    [\n        {\n            \"score\": 0.9982,\n            \"label\": \"remote\",\n            \"box\": {\"xmin\": 40, \"ymin\": 70, \"xmax\": 175, \"ymax\": 117},\n        },\n        {\n            \"score\": 0.9960,\n            \"label\": \"remote\",\n            \"box\": {\"xmin\": 333, \"ymin\": 72, \"xmax\": 368, \"ymax\": 187},\n        },\n        {\n            \"score\": 0.9955,\n            \"label\": \"couch\",\n            \"box\": {\"xmin\": 0, \"ymin\": 1, \"xmax\": 639, \"ymax\": 473},\n        },\n        {\n            \"score\": 0.9988,\n            \"label\": \"cat\",\n            \"box\": {\"xmin\": 13, \"ymin\": 52, \"xmax\": 314, \"ymax\": 470},\n        },\n        {\n            \"score\": 0.9987,\n            \"label\": \"cat\",\n            \"box\": {\"xmin\": 345, \"ymin\": 23, \"xmax\": 640, \"ymax\": 368},\n        },\n    ],\n)\n```", "```py\nimport json\nimport requests\nheaders = {\"Authorization\": f\"Bearer {API_TOKEN}\"}\nAPI_URL = \"https://api-inference.huggingface.co/models/facebook/detr-resnet-50-panoptic\"\ndef query(filename):\n    with open(filename, \"rb\") as f:\n        data = f.read()\n    response = requests.request(\"POST\", API_URL, headers=headers, data=data)\n    return json.loads(response.content.decode(\"utf-8\"))\ndata = query(\"cats.jpg\")\n```", "```py\nimport base64\nfrom io import BytesIO\nfrom PIL import Image\nwith Image.open(\"cats.jpg\") as img:\n    masks = [d[\"mask\"] for d in data]\n    self.assertEqual(img.size, (640, 480))\n    mask_imgs = [Image.open(BytesIO(base64.b64decode(mask))) for mask in masks]\n    for mask_img in mask_imgs:\n        self.assertEqual(mask_img.size, img.size)\n        self.assertEqual(mask_img.mode, \"L\")  # L (8-bit pixels, black and white)\n    first_mask_img = mask_imgs[0]\n    min_pxl_val, max_pxl_val = first_mask_img.getextrema()\n    self.assertGreaterEqual(min_pxl_val, 0)\n    self.assertLessEqual(max_pxl_val, 255)\n```"]