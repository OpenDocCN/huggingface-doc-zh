["```py\n( num_train_timesteps: int = 1000 beta_start: float = 0.00085 beta_end: float = 0.012 beta_schedule: str = 'linear' trained_betas: Union = None prediction_type: str = 'epsilon' use_karras_sigmas: Optional = False clip_sample: Optional = False clip_sample_range: float = 1.0 timestep_spacing: str = 'linspace' steps_offset: int = 0 )\n```", "```py\n( sample: FloatTensor timestep: Union ) \u2192 export const metadata = 'undefined';torch.FloatTensor\n```", "```py\n( num_inference_steps: int device: Union = None num_train_timesteps: Optional = None )\n```", "```py\n( model_output: Union timestep: Union sample: Union return_dict: bool = True ) \u2192 export const metadata = 'undefined';SchedulerOutput or tuple\n```", "```py\n( prev_sample: FloatTensor )\n```"]