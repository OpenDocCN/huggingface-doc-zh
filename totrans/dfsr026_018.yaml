- en: Load community pipelines and components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载社区管道和组件
- en: 'Original text: [https://huggingface.co/docs/diffusers/using-diffusers/custom_pipeline_overview](https://huggingface.co/docs/diffusers/using-diffusers/custom_pipeline_overview)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/diffusers/using-diffusers/custom_pipeline_overview](https://huggingface.co/docs/diffusers/using-diffusers/custom_pipeline_overview)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Community pipelines
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区管道
- en: Community pipelines are any [DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)
    class that are different from the original implementation as specified in their
    paper (for example, the [StableDiffusionControlNetPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/controlnet#diffusers.StableDiffusionControlNetPipeline)
    corresponds to the [Text-to-Image Generation with ControlNet Conditioning](https://arxiv.org/abs/2302.05543)
    paper). They provide additional functionality or extend the original implementation
    of a pipeline.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 社区管道是任何与原始实现不同的[DiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/overview#diffusers.DiffusionPipeline)类，如其论文中所述（例如，[StableDiffusionControlNetPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/controlnet#diffusers.StableDiffusionControlNetPipeline)对应于[使用ControlNet条件生成文本到图像](https://arxiv.org/abs/2302.05543)的论文）。它们提供额外的功能或扩展了管道的原始实现。
- en: There are many cool community pipelines like [Speech to Image](https://github.com/huggingface/diffusers/tree/main/examples/community#speech-to-image)
    or [Composable Stable Diffusion](https://github.com/huggingface/diffusers/tree/main/examples/community#composable-stable-diffusion),
    and you can find all the official community pipelines [here](https://github.com/huggingface/diffusers/tree/main/examples/community).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多很酷的社区管道，比如[语音到图像](https://github.com/huggingface/diffusers/tree/main/examples/community#speech-to-image)或[可组合稳定扩散](https://github.com/huggingface/diffusers/tree/main/examples/community#composable-stable-diffusion)，您可以在[这里](https://github.com/huggingface/diffusers/tree/main/examples/community)找到所有官方社区管道。
- en: 'To load any community pipeline on the Hub, pass the repository id of the community
    pipeline to the `custom_pipeline` argument and the model repository where you’d
    like to load the pipeline weights and components from. For example, the example
    below loads a dummy pipeline from [`hf-internal-testing/diffusers-dummy-pipeline`](https://huggingface.co/hf-internal-testing/diffusers-dummy-pipeline/blob/main/pipeline.py)
    and the pipeline weights and components from [`google/ddpm-cifar10-32`](https://huggingface.co/google/ddpm-cifar10-32):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Hub上加载任何社区管道，请将社区管道的存储库ID传递给`custom_pipeline`参数，并指定您希望从中加载管道权重和组件的模型存储库。例如，下面的示例从[`hf-internal-testing/diffusers-dummy-pipeline`](https://huggingface.co/hf-internal-testing/diffusers-dummy-pipeline/blob/main/pipeline.py)加载一个虚拟管道，从[`google/ddpm-cifar10-32`](https://huggingface.co/google/ddpm-cifar10-32)加载管道权重和组件：
- en: 🔒 By loading a community pipeline from the Hugging Face Hub, you are trusting
    that the code you are loading is safe. Make sure to inspect the code online before
    loading and running it automatically!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 🔒 通过从Hugging Face Hub加载社区管道，您正在信任您加载的代码是安全的。在自动加载和运行之前，请确保在线检查代码！
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Loading an official community pipeline is similar, but you can mix loading
    weights from an official repository id and pass pipeline components directly.
    The example below loads the community [CLIP Guided Stable Diffusion](https://github.com/huggingface/diffusers/tree/main/examples/community#clip-guided-stable-diffusion)
    pipeline, and you can pass the CLIP model components directly to it:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 加载官方社区管道类似，但您可以混合从官方存储库ID加载权重并直接传递管道组件。下面的示例加载了社区[CLIP引导稳定扩散](https://github.com/huggingface/diffusers/tree/main/examples/community#clip-guided-stable-diffusion)管道，您可以直接传递CLIP模型组件给它：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For more information about community pipelines, take a look at the [Community
    pipelines](custom_pipeline_examples) guide for how to use them and if you’re interested
    in adding a community pipeline check out the [How to contribute a community pipeline](contribute_pipeline)
    guide!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有关社区管道的更多信息，请查看[社区管道](custom_pipeline_examples)指南，了解如何使用它们，如果您有兴趣添加社区管道，请查看[如何贡献社区管道](contribute_pipeline)指南！
- en: Community components
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区组件
- en: Community components allow users to build pipelines that may have customized
    components that are not a part of Diffusers. If your pipeline has custom components
    that Diffusers doesn’t already support, you need to provide their implementations
    as Python modules. These customized components could be a VAE, UNet, and scheduler.
    In most cases, the text encoder is imported from the Transformers library. The
    pipeline code itself can also be customized.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 社区组件允许用户构建可能具有自定义组件的管道，这些组件不是Diffusers的一部分。如果您的管道具有Diffusers尚未支持的自定义组件，您需要提供它们的实现作为Python模块。这些定制组件可以是VAE、UNet和调度器。在大多数情况下，文本编码器是从Transformers库导入的。管道代码本身也可以定制。
- en: This section shows how users should use community components to build a community
    pipeline.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了用户应如何使用社区组件来构建社区管道。
- en: 'You’ll use the [showlab/show-1-base](https://huggingface.co/showlab/show-1-base)
    pipeline checkpoint as an example. So, let’s start loading the components:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用[showlab/show-1-base](https://huggingface.co/showlab/show-1-base)管道检查点作为示例。因此，让我们开始加载组件：
- en: 'Import and load the text encoder from Transformers:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Transformers导入并加载文本编码器：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Load a scheduler:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载调度器：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Load an image processor:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载图像处理器：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In steps 4 and 5, the custom [UNet](https://github.com/showlab/Show-1/blob/main/showone/models/unet_3d_condition.py)
    and [pipeline](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/unet/showone_unet_3d_condition.py)
    implementation must match the format shown in their files for this example to
    work.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤4和5中，自定义[UNet](https://github.com/showlab/Show-1/blob/main/showone/models/unet_3d_condition.py)和[pipeline](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/unet/showone_unet_3d_condition.py)的实现必须与其文件中显示的格式匹配，以使此示例正常工作。
- en: Now you’ll load a [custom UNet](https://github.com/showlab/Show-1/blob/main/showone/models/unet_3d_condition.py),
    which in this example, has already been implemented in the `showone_unet_3d_condition.py`
    [script](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/unet/showone_unet_3d_condition.py)
    for your convenience. You’ll notice the `UNet3DConditionModel` class name is changed
    to `ShowOneUNet3DConditionModel` because [UNet3DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet3d-cond#diffusers.UNet3DConditionModel)
    already exists in Diffusers. Any components needed for the `ShowOneUNet3DConditionModel`
    class should be placed in the `showone_unet_3d_condition.py` script.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将加载一个[自定义UNet](https://github.com/showlab/Show-1/blob/main/showone/models/unet_3d_condition.py)，在本示例中，已经在`showone_unet_3d_condition.py`[脚本](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/unet/showone_unet_3d_condition.py)中实现了这个UNet，以方便您使用。您会注意到`UNet3DConditionModel`类名已更改为`ShowOneUNet3DConditionModel`，因为[UNet3DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet3d-cond#diffusers.UNet3DConditionModel)已经存在于Diffusers中。`ShowOneUNet3DConditionModel`类所需的任何组件都应放在`showone_unet_3d_condition.py`脚本中。
- en: 'Once this is done, you can initialize the UNet:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以初始化UNet：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finally, you’ll load the custom pipeline code. For this example, it has already
    been created for you in the `pipeline_t2v_base_pixel.py` [script](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/pipeline_t2v_base_pixel.py).
    This script contains a custom `TextToVideoIFPipeline` class for generating videos
    from text. Just like the custom UNet, any code needed for the custom pipeline
    to work should go in the `pipeline_t2v_base_pixel.py` script.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您将加载自定义管道代码。在本示例中，已经为您在`pipeline_t2v_base_pixel.py`[脚本](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/pipeline_t2v_base_pixel.py)中创建了这个脚本，其中包含用于从文本生成视频的自定义`TextToVideoIFPipeline`类。与自定义UNet一样，任何用于使自定义管道正常工作的代码都应放在`pipeline_t2v_base_pixel.py`脚本中。
- en: 'Once everything is in place, you can initialize the `TextToVideoIFPipeline`
    with the `ShowOneUNet3DConditionModel`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，您可以使用`ShowOneUNet3DConditionModel`初始化`TextToVideoIFPipeline`：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Push the pipeline to the Hub to share with the community!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 将管道推送到Hub以与社区共享！
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After the pipeline is successfully pushed, you need a couple of changes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 成功推送管道后，您需要进行一些更改：
- en: Change the `_class_name` attribute in [`model_index.json`](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/model_index.json#L2)
    to `"pipeline_t2v_base_pixel"` and `"TextToVideoIFPipeline"`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[`model_index.json`](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/model_index.json#L2)中更改`_class_name`属性为`"pipeline_t2v_base_pixel"`和`"TextToVideoIFPipeline"`。
- en: Upload `showone_unet_3d_condition.py` to the `unet` [directory](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/unet/showone_unet_3d_condition.py).
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`showone_unet_3d_condition.py`上传到`unet`[目录](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/unet/showone_unet_3d_condition.py)。
- en: Upload `pipeline_t2v_base_pixel.py` to the pipeline base [directory](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/unet/showone_unet_3d_condition.py).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`pipeline_t2v_base_pixel.py`上传到管道基础[目录](https://huggingface.co/sayakpaul/show-1-base-with-code/blob/main/unet/showone_unet_3d_condition.py)。
- en: To run inference, simply add the `trust_remote_code` argument while initializing
    the pipeline to handle all the “magic” behind the scenes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行推理，只需在初始化管道时添加`trust_remote_code`参数，以处理所有幕后的“魔术”。
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As an additional reference example, you can refer to the repository structure
    of [stabilityai/japanese-stable-diffusion-xl](https://huggingface.co/stabilityai/japanese-stable-diffusion-xl/),
    that makes use of the `trust_remote_code` feature:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的参考示例，您可以参考[stabilityai/japanese-stable-diffusion-xl](https://huggingface.co/stabilityai/japanese-stable-diffusion-xl/)的存储库结构，该存储库利用了`trust_remote_code`功能：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
