- en: Integrate any ML framework with the Hub
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将任何 ML 框架与 Hub 集成
- en: 'Original text: [https://huggingface.co/docs/huggingface_hub/guides/integrations](https://huggingface.co/docs/huggingface_hub/guides/integrations)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/huggingface_hub/guides/integrations](https://huggingface.co/docs/huggingface_hub/guides/integrations)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The Hugging Face Hub makes hosting and sharing models with the community easy.
    It supports [dozens of libraries](https://huggingface.co/docs/hub/models-libraries)
    in the Open Source ecosystem. We are always working on expanding this support
    to push collaborative Machine Learning forward. The `huggingface_hub` library
    plays a key role in this process, allowing any Python script to easily push and
    load files.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Hugging Face Hub 使得向社区托管和共享模型变得容易。它支持开源生态系统中的[数十个库](https://huggingface.co/docs/hub/models-libraries)。我们一直在努力扩大这种支持，推动协作机器学习的发展。`huggingface_hub`
    库在这个过程中发挥着关键作用，使任何 Python 脚本都能轻松地推送和加载文件。
- en: 'There are four main ways to integrate a library with the Hub:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种主要方法可以将库与 Hub 集成：
- en: '**Push to Hub:** implement a method to upload a model to the Hub. This includes
    the model weights, as well as [the model card](https://huggingface.co/docs/huggingface_hub/how-to-model-cards)
    and any other relevant information or data necessary to run the model (for example,
    training logs). This method is often called `push_to_hub()`.'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**推送到 Hub：** 实现一个方法将模型上传到 Hub。这包括模型权重，以及[模型卡片](https://huggingface.co/docs/huggingface_hub/how-to-model-cards)和运行模型所需的任何其他相关信息或数据（例如，训练日志）。这种方法通常被称为
    `push_to_hub()`。'
- en: '**Download from Hub:** implement a method to load a model from the Hub. The
    method should download the model configuration/weights and load the model. This
    method is often called `from_pretrained` or `load_from_hub()`.'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从 Hub 下载：** 实现一个方法从 Hub 加载模型。该方法应该下载模型配置/权重并加载模型。这种方法通常被称为 `from_pretrained`
    或 `load_from_hub()`。'
- en: '**Inference API:** use our servers to run inference on models supported by
    your library for free.'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**推理 API：** 使用我们的服务器免费运行由您的库支持的模型的推理。'
- en: '**Widgets:** display a widget on the landing page of your models on the Hub.
    It allows users to quickly try a model from the browser.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**小部件：** 在 Hub 上模型的主页上显示一个小部件。它允许用户快速从浏览器中尝试模型。'
- en: In this guide, we will focus on the first two topics. We will present the two
    main approaches you can use to integrate a library, with their advantages and
    drawbacks. Everything is summarized at the end of the guide to help you choose
    between the two. Please keep in mind that these are only guidelines that you are
    free to adapt to you requirements.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我们将专注于前两个主题。我们将介绍您可以使用的两种主要集成库的方法，以及它们的优点和缺点。在指南结束时，将总结所有内容，以帮助您在这两者之间做出选择。请记住，这些只是指导方针，您可以根据自己的需求自由调整。
- en: If you are interested in Inference and Widgets, you can follow [this guide](https://huggingface.co/docs/hub/models-adding-libraries#set-up-the-inference-api).
    In both cases, you can reach out to us if you are integrating a library with the
    Hub and want to be listed [in our docs](https://huggingface.co/docs/hub/models-libraries).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对推理和小部件感兴趣，可以查看[此指南](https://huggingface.co/docs/hub/models-adding-libraries#set-up-the-inference-api)。在这两种情况下，如果您正在将库与
    Hub 集成并希望在[我们的文档](https://huggingface.co/docs/hub/models-libraries)中列出，请随时与我们联系。
- en: 'A flexible approach: helpers'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灵活的方法：助手
- en: The first approach to integrate a library to the Hub is to actually implement
    the `push_to_hub` and `from_pretrained` methods by yourself. This gives you full
    flexibility on which files you need to upload/download and how to handle inputs
    specific to your framework. You can refer to the two [upload files](./upload)
    and [download files](./download) guides to learn more about how to do that. This
    is, for example how the FastAI integration is implemented (see [push_to_hub_fastai()](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.push_to_hub_fastai)
    and [from_pretrained_fastai()](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.from_pretrained_fastai)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将库集成到 Hub 的第一种方法是实际上通过自己实现 `push_to_hub` 和 `from_pretrained` 方法。这样可以完全灵活地确定需要上传/下载的文件以及如何处理特定于您的框架的输入。您可以参考两个[上传文件](./upload)和[下载文件](./download)指南，了解更多相关信息。例如，FastAI
    集成是如何实现的（请参见 [push_to_hub_fastai()](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.push_to_hub_fastai)
    和 [from_pretrained_fastai()](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.from_pretrained_fastai)）。
- en: Implementation can differ between libraries, but the workflow is often similar.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 不同库之间的实现可能有所不同，但工作流程通常是相似的。
- en: from_pretrained
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: from_pretrained
- en: 'This is how a `from_pretrained` method usually look like:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 `from_pretrained` 方法通常的样子：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: push_to_hub
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: push_to_hub
- en: The `push_to_hub` method often requires a bit more complexity to handle repo
    creation, generate the model card and save weights. A common approach is to save
    all of these files in a temporary folder, upload it and then delete it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`push_to_hub` 方法通常需要更复杂的处理来处理仓库创建，生成模型卡片和保存权重。一个常见的方法是将所有这些文件保存在临时文件夹中，然后上传并删除它们。'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is of course only an example. If you are interested in more complex manipulations
    (delete remote files, upload weights on the fly, persist weights locally, etc.)
    please refer to the [upload files](./upload) guide.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这只是一个例子。如果您对更复杂的操作感兴趣（删除远程文件，动态上传权重，将权重持久保存在本地等），请参考[上传文件](./upload)指南。
- en: Limitations
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制
- en: 'While being flexible, this approach has some drawbacks, especially in terms
    of maintenance. Hugging Face users are often used to additional features when
    working with `huggingface_hub`. For example, when loading files from the Hub,
    it is common to offer parameters like:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然灵活，但这种方法也有一些缺点，特别是在维护方面。当使用 `huggingface_hub` 时，Hugging Face 用户通常习惯于在工作中使用额外的功能。例如，从
    Hub 加载文件时，通常会提供参数，比如：
- en: '`token`: to download from a private repo'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`token`：从私有仓库下载'
- en: '`revision`: to download from a specific branch'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`revision`：从特定分支下载'
- en: '`cache_dir`: to cache files in a specific directory'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache_dir`：将文件缓存到特定目录'
- en: '`force_download`/`resume_download`/`local_files_only`: to reuse the cache or
    not'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`force_download`/`resume_download`/`local_files_only`：重用缓存与否'
- en: '`api_endpoint`/`proxies`: configure HTTP session'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api_endpoint`/`proxies`: 配置HTTP会话'
- en: 'When pushing models, similar parameters are supported:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在推送模型时，支持类似的参数：
- en: '`commit_message`: custom commit message'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`commit_message`: 自定义提交消息'
- en: '`private`: create a private repo if missing'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`private`: 如果缺失则创建私有仓库'
- en: '`create_pr`: create a PR instead of pushing to `main`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_pr`: 创建PR而不是推送到`main`'
- en: '`branch`: push to a branch instead of the `main` branch'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`branch`: 推送到分支而不是`main`分支'
- en: '`allow_patterns`/`ignore_patterns`: filter which files to upload'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allow_patterns`/`ignore_patterns`: 过滤要上传的文件'
- en: '`token`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`token`'
- en: '`api_endpoint`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`api_endpoint`'
- en: …
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: …
- en: All of these parameters can be added to the implementations we saw above and
    passed to the `huggingface_hub` methods. However, if a parameter changes or a
    new feature is added, you will need to update your package. Supporting those parameters
    also means more documentation to maintain on your side. To see how to mitigate
    these limitations, let’s jump to our next section **class inheritance**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些参数都可以添加到我们上面看到的实现中，并传递给`huggingface_hub`方法。但是，如果参数发生更改或添加了新功能，您将需要更新您的包。支持这些参数还意味着您需要在您的一侧维护更多的文档。要了解如何缓解这些限制，请跳转到我们的下一节**类继承**。
- en: 'A more complex approach: class inheritance'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个更复杂的方法：类继承
- en: 'As we saw above, there are two main methods to include in your library to integrate
    it with the Hub: upload files (`push_to_hub`) and download files (`from_pretrained`).
    You can implement those methods by yourself but it comes with caveats. To tackle
    this, `huggingface_hub` provides a tool that uses class inheritance. Let’s see
    how it works!'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们上面看到的，要将库与Hub集成，有两种主要方法：上传文件（`push_to_hub`）和下载文件（`from_pretrained`）。您可以自己实现这些方法，但会有一些注意事项。为了解决这个问题，`huggingface_hub`提供了一个使用类继承的工具。让我们看看它是如何工作的！
- en: In a lot of cases, a library already implements its model using a Python class.
    The class contains the properties of the model and methods to load, run, train,
    and evaluate it. Our approach is to extend this class to include upload and download
    features using mixins. A [Mixin](https://stackoverflow.com/a/547714) is a class
    that is meant to extend an existing class with a set of specific features using
    multiple inheritance. `huggingface_hub` provides its own mixin, the [ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin).
    The key here is to understand its behavior and how to customize it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，一个库已经使用Python类实现了其模型。该类包含模型的属性和用于加载、运行、训练和评估的方法。我们的方法是通过使用mixin扩展此类来包含上传和下载功能。[Mixin](https://stackoverflow.com/a/547714)是一个旨在通过多重继承为现有类添加一组特定功能的类。`huggingface_hub`提供了自己的mixin，[ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)。关键在于理解其行为以及如何自定义它。
- en: 'The [ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)
    class implements 3 *public* methods (`push_to_hub`, `save_pretrained` and `from_pretrained`).
    Those are the methods that your users will call to load/save models with your
    library. [ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)
    also defines 2 *private* methods (`_save_pretrained` and `_from_pretrained`).
    Those are the ones you must implement. So to integrate your library, you should:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)类实现了3个*公共*方法（`push_to_hub`、`save_pretrained`和`from_pretrained`）。这些是您的用户将调用的方法，用于使用您的库加载/保存模型。[ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)还定义了2个*私有*方法（`_save_pretrained`和`_from_pretrained`）。这些是您必须实现的方法。因此，要集成您的库，您应该：'
- en: Make your Model class inherit from [ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin).
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使您的模型类从[ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)继承。
- en: 'Implement the private methods:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现私有方法：
- en: '[_save_pretrained()](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin._save_pretrained):
    method taking as input a path to a directory and saving the model to it. You must
    write all the logic to dump your model in this method: model card, model weights,
    configuration files, training logs, and figures. Any relevant information for
    this model must be handled by this method. [Model Cards](https://huggingface.co/docs/hub/model-cards)
    are particularly important to describe your model. Check out [our implementation
    guide](./model-cards) for more details.'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[_save_pretrained()](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin._save_pretrained)：接受目录路径作为输入并将模型保存到其中的方法。您必须在此方法中编写所有将模型转储的逻辑：模型卡片、模型权重、配置文件、训练日志和图表。此模型的任何相关信息都必须由此方法处理。[模型卡片](https://huggingface.co/docs/hub/model-cards)特别重要，用于描述您的模型。查看[我们的实施指南](./model-cards)以获取更多详细信息。'
- en: '[_from_pretrained()](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin._from_pretrained):
    **class method** taking as input a `model_id` and returning an instantiated model.
    The method must download the relevant files and load them.'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[_from_pretrained()](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin._from_pretrained)：**类方法**，接受`model_id`作为输入并返回一个实例化的模型。该方法必须下载相关文件并加载它们。'
- en: You are done!
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已经完成了！
- en: The advantage of using [ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)
    is that once you take care of the serialization/loading of the files, you are
    ready to go. You don’t need to worry about stuff like repo creation, commits,
    PRs, or revisions. All of this is handled by the mixin and is available to your
    users. The Mixin also ensures that public methods are well documented and type
    annotated.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)的优势在于一旦处理了文件的序列化/加载，您就可以立即开始。您无需担心仓库创建、提交、PR或修订等问题。所有这些都由mixin处理，并提供给您的用户。Mixin还确保公共方法有很好的文档和类型注释。
- en: 'A concrete example: PyTorch'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个具体的例子：PyTorch
- en: A good example of what we saw above is [PyTorchModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.PyTorchModelHubMixin),
    our integration for the PyTorch framework. This is a ready-to-use integration.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是我们上面看到的[PyTorchModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.PyTorchModelHubMixin)，这是针对PyTorch框架的集成。这是一个可直接使用的集成。
- en: How to use it?
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何使用？
- en: 'Here is how any user can load/save a PyTorch model from/to the Hub:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是任何用户如何从/向Hub加载/保存PyTorch模型的方法：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Implementation
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实施
- en: The implementation is actually very straightforward, and the full implementation
    can be found [here](https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/hub_mixin.py).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个实现非常简单，完整的实现可以在[这里](https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/hub_mixin.py)找到。
- en: 'First, inherit your class from `ModelHubMixin`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从`ModelHubMixin`继承您的类：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Implement the `_save_pretrained` method:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`_save_pretrained`方法：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Implement the `_from_pretrained` method:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`_from_pretrained`方法：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And that’s it! Your library now enables users to upload and download files to
    and from the Hub.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！您的库现在可以让用户上传和下载文件到Hub。
- en: Quick comparison
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速比较
- en: Let’s quickly sum up the two approaches we saw with their advantages and drawbacks.
    The table below is only indicative. Your framework might have some specificities
    that you need to address. This guide is only here to give guidelines and ideas
    on how to handle integration. In any case, feel free to contact us if you have
    any questions!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速总结一下我们看到的两种方法及其优缺点。下表仅供参考。您的框架可能有一些特殊情况需要处理。本指南仅提供集成处理的指导和想法。无论如何，如果您有任何问题，请随时与我们联系！
- en: '| Integration | Using helpers | Using [ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 集成 | 使用助手 | 使用[ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)
    |'
- en: '| :-: | :-: | :-: |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| :-: | :-: | :-: |'
- en: '| User experience | `model = load_from_hub(...)` `push_to_hub(model, ...)`
    | `model = MyModel.from_pretrained(...)` `model.push_to_hub(...)` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 用户体验 | `model = load_from_hub(...)` `push_to_hub(model, ...)` | `model =
    MyModel.from_pretrained(...)` `model.push_to_hub(...)` |'
- en: '| Flexibility | Very flexible. You fully control the implementation. | Less
    flexible. Your framework must have a model class. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 灵活性 | 非常灵活。您完全控制实现。 | 不太灵活。您的框架必须有一个模型类。 |'
- en: '| Maintenance | More maintenance to add support for configuration, and new
    features. Might also require fixing issues reported by users. | Less maintenance
    as most of the interactions with the Hub are implemented in `huggingface_hub`.
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 维护 | 需要更多维护来添加对配置和新功能的支持。可能还需要修复用户报告的问题。 | 维护较少，因为大部分与Hub的交互已在`huggingface_hub`中实现。
    |'
- en: '| Documentation / Type annotation | To be written manually. | Partially handled
    by `huggingface_hub`. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 文档/类型注释 | 需要手动编写。 | 部分由`huggingface_hub`处理。 |'
