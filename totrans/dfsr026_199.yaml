- en: KarrasVeScheduler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/schedulers/stochastic_karras_ve](https://huggingface.co/docs/diffusers/api/schedulers/stochastic_karras_ve)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: '`KarrasVeScheduler` is a stochastic sampler tailored to variance-expanding
    (VE) models. It is based on the [Elucidating the Design Space of Diffusion-Based
    Generative Models](https://huggingface.co/papers/2206.00364) and [Score-based
    generative modeling through stochastic differential equations](https://huggingface.co/papers/2011.13456)
    papers.'
  prefs: []
  type: TYPE_NORMAL
- en: KarrasVeScheduler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.KarrasVeScheduler`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/deprecated/scheduling_karras_ve.py#L49)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sigma_min` (`float`, defaults to 0.02) — The minimum noise magnitude.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sigma_max` (`float`, defaults to 100) — The maximum noise magnitude.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s_noise` (`float`, defaults to 1.007) — The amount of additional noise to
    counteract loss of detail during sampling. A reasonable range is [1.000, 1.011].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s_churn` (`float`, defaults to 80) — The parameter controlling the overall
    amount of stochasticity. A reasonable range is [0, 100].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s_min` (`float`, defaults to 0.05) — The start value of the sigma range to
    add noise (enable stochasticity). A reasonable range is [0, 10].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s_max` (`float`, defaults to 50) — The end value of the sigma range to add
    noise. A reasonable range is [0.2, 80].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A stochastic scheduler tailored to variance-expanding models.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)
    and [ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin).
    Check the superclass documentation for the generic methods the library implements
    for all schedulers such as loading and saving.
  prefs: []
  type: TYPE_NORMAL
- en: For more details on the parameters, see [Appendix E](https://arxiv.org/abs/2206.00364).
    The grid search values used to find the optimal `{s_noise, s_churn, s_min, s_max}`
    for a specific model are described in Table 5 of the paper.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `add_noise_to_input`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/deprecated/scheduling_karras_ve.py#L138)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor`) — The input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sigma` (`float`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generator` (`torch.Generator`, *optional*) — A random number generator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explicit Langevin-like “churn” step of adding noise to the sample according
    to a `gamma_i ≥ 0` to reach a higher noise level `sigma_hat = sigma_i + gamma_i*sigma_i`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `scale_model_input`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/deprecated/scheduling_karras_ve.py#L99)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor`) — The input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestep` (`int`, *optional*) — The current timestep in the diffusion chain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: A scaled input sample.
  prefs: []
  type: TYPE_NORMAL
- en: Ensures interchangeability with schedulers that need to scale the denoising
    model input depending on the current timestep.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_timesteps`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/deprecated/scheduling_karras_ve.py#L116)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`num_inference_steps` (`int`) — The number of diffusion steps used when generating
    samples with a pre-trained model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`device` (`str` or `torch.device`, *optional*) — The device to which the timesteps
    should be moved to. If `None`, the timesteps are not moved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets the discrete timesteps used for the diffusion chain (to be run before inference).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `step`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/deprecated/scheduling_karras_ve.py#L164)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_output` (`torch.FloatTensor`) — The direct output from learned diffusion
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sigma_hat` (`float`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sigma_prev` (`float`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sample_hat` (`torch.FloatTensor`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a `~schedulers.scheduling_karras_ve.KarrasVESchedulerOutput` or `tuple`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`~schedulers.scheduling_karras_ve.KarrasVESchedulerOutput` or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If return_dict is `True`, `~schedulers.scheduling_karras_ve.KarrasVESchedulerOutput`
    is returned, otherwise a tuple is returned where the first element is the sample
    tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Predict the sample from the previous timestep by reversing the SDE. This function
    propagates the diffusion process from the learned model outputs (most often the
    predicted noise).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `step_correct`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/deprecated/scheduling_karras_ve.py#L203)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_output` (`torch.FloatTensor`) — The direct output from learned diffusion
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sigma_hat` (`float`) — TODO'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sigma_prev` (`float`) — TODO'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sample_hat` (`torch.FloatTensor`) — TODO'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sample_prev` (`torch.FloatTensor`) — TODO'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`derivative` (`torch.FloatTensor`) — TODO'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a [DDPMSchedulerOutput](/docs/diffusers/v0.26.3/en/api/schedulers/ddpm#diffusers.schedulers.scheduling_ddpm.DDPMSchedulerOutput)
    or `tuple`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: prev_sample (TODO)
  prefs: []
  type: TYPE_NORMAL
- en: 'updated sample in the diffusion chain. derivative (TODO): TODO'
  prefs: []
  type: TYPE_NORMAL
- en: Corrects the predicted sample based on the `model_output` of the network.
  prefs: []
  type: TYPE_NORMAL
- en: KarrasVeOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.schedulers.deprecated.scheduling_karras_ve.KarrasVeOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/deprecated/scheduling_karras_ve.py#L28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`prev_sample` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)` for images) — Computed sample (x_{t-1}) of previous timestep. `prev_sample`
    should be used as next model input in the denoising loop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`derivative` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)` for images) — Derivative of predicted original image sample (x_0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pred_original_sample` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)` for images) — The predicted denoised sample (x_{0}) based on the
    model output from the current timestep. `pred_original_sample` can be used to
    preview progress or for guidance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output class for the scheduler’s step function output.
  prefs: []
  type: TYPE_NORMAL
