["```py\n>>> from transformers import DeiTConfig, DeiTModel\n\n>>> # Initializing a DeiT deit-base-distilled-patch16-224 style configuration\n>>> configuration = DeiTConfig()\n\n>>> # Initializing a model (with random weights) from the deit-base-distilled-patch16-224 style configuration\n>>> model = DeiTModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, DeiTModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = DeiTModel.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 198, 768]\n```", "```py\n>>> from transformers import AutoImageProcessor, DeiTForMaskedImageModeling\n>>> import torch\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = DeiTForMaskedImageModeling.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> num_patches = (model.config.image_size // model.config.patch_size) ** 2\n>>> pixel_values = image_processor(images=image, return_tensors=\"pt\").pixel_values\n>>> # create random boolean mask of shape (batch_size, num_patches)\n>>> bool_masked_pos = torch.randint(low=0, high=2, size=(1, num_patches)).bool()\n\n>>> outputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\n>>> loss, reconstructed_pixel_values = outputs.loss, outputs.reconstruction\n>>> list(reconstructed_pixel_values.shape)\n[1, 3, 224, 224]\n```", "```py\n>>> from transformers import AutoImageProcessor, DeiTForImageClassification\n>>> import torch\n>>> from PIL import Image\n>>> import requests\n\n>>> torch.manual_seed(3)\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> # note: we are loading a DeiTForImageClassificationWithTeacher from the hub here,\n>>> # so the head will be randomly initialized, hence the predictions will be random\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = DeiTForImageClassification.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_class_idx = logits.argmax(-1).item()\n>>> print(\"Predicted class:\", model.config.id2label[predicted_class_idx])\nPredicted class: magpie\n```", "```py\n>>> from transformers import AutoImageProcessor, DeiTForImageClassificationWithTeacher\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = DeiTForImageClassificationWithTeacher.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = logits.argmax(-1).item()\n>>> print(model.config.id2label[predicted_label])\ntabby, tabby cat\n```", "```py\n>>> from transformers import AutoImageProcessor, TFDeiTModel\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = TFDeiTModel.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 198, 768]\n```", "```py\n>>> from transformers import AutoImageProcessor, TFDeiTForMaskedImageModeling\n>>> import tensorflow as tf\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = TFDeiTForMaskedImageModeling.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> num_patches = (model.config.image_size // model.config.patch_size) ** 2\n>>> pixel_values = image_processor(images=image, return_tensors=\"tf\").pixel_values\n>>> # create random boolean mask of shape (batch_size, num_patches)\n>>> bool_masked_pos = tf.cast(tf.random.uniform((1, num_patches), minval=0, maxval=2, dtype=tf.int32), tf.bool)\n\n>>> outputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\n>>> loss, reconstructed_pixel_values = outputs.loss, outputs.reconstruction\n>>> list(reconstructed_pixel_values.shape)\n[1, 3, 224, 224]\n```", "```py\n>>> from transformers import AutoImageProcessor, TFDeiTForImageClassification\n>>> import tensorflow as tf\n>>> from PIL import Image\n>>> import requests\n\n>>> tf.keras.utils.set_random_seed(3)\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> # note: we are loading a TFDeiTForImageClassificationWithTeacher from the hub here,\n>>> # so the head will be randomly initialized, hence the predictions will be random\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = TFDeiTForImageClassification.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_class_idx = tf.math.argmax(logits, axis=-1)[0]\n>>> print(\"Predicted class:\", model.config.id2label[int(predicted_class_idx)])\nPredicted class: little blue heron, Egretta caerulea\n```", "```py\n>>> from transformers import AutoImageProcessor, TFDeiTForImageClassificationWithTeacher\n>>> import tensorflow as tf\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = TFDeiTForImageClassificationWithTeacher.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = int(tf.math.argmax(logits, axis=-1))\n>>> print(model.config.id2label[predicted_label])\ntabby, tabby cat\n```"]