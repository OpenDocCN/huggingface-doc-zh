["```py\n( hidden_size = 768 num_hidden_layers = 12 num_attention_heads = 12 intermediate_size = 3072 hidden_act = 'gelu' hidden_dropout_prob = 0.0 attention_probs_dropout_prob = 0.0 initializer_range = 0.02 layer_norm_eps = 1e-12 image_size = 224 patch_size = 16 num_channels = 3 qkv_bias = True encoder_stride = 16 **kwargs )\n```", "```py\n>>> from transformers import DeiTConfig, DeiTModel\n\n>>> # Initializing a DeiT deit-base-distilled-patch16-224 style configuration\n>>> configuration = DeiTConfig()\n\n>>> # Initializing a model (with random weights) from the deit-base-distilled-patch16-224 style configuration\n>>> model = DeiTModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n( *args **kwargs )\n```", "```py\n( images **kwargs )\n```", "```py\n( do_resize: bool = True size: Dict = None resample: Resampling = 3 do_center_crop: bool = True crop_size: Dict = None rescale_factor: Union = 0.00392156862745098 do_rescale: bool = True do_normalize: bool = True image_mean: Union = None image_std: Union = None **kwargs )\n```", "```py\n( images: Union do_resize: bool = None size: Dict = None resample = None do_center_crop: bool = None crop_size: Dict = None do_rescale: bool = None rescale_factor: float = None do_normalize: bool = None image_mean: Union = None image_std: Union = None return_tensors: Union = None data_format: ChannelDimension = <ChannelDimension.FIRST: 'channels_first'> input_data_format: Union = None **kwargs )\n```", "```py\n( config: DeiTConfig add_pooling_layer: bool = True use_mask_token: bool = False )\n```", "```py\n( pixel_values: Optional = None bool_masked_pos: Optional = None head_mask: Optional = None output_attentions: Optional = None output_hidden_states: Optional = None return_dict: Optional = None ) \u2192 export const metadata = 'undefined';transformers.modeling_outputs.BaseModelOutputWithPooling or tuple(torch.FloatTensor)\n```", "```py\n>>> from transformers import AutoImageProcessor, DeiTModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = DeiTModel.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 198, 768]\n```", "```py\n( config: DeiTConfig )\n```", "```py\n( pixel_values: Optional = None bool_masked_pos: Optional = None head_mask: Optional = None output_attentions: Optional = None output_hidden_states: Optional = None return_dict: Optional = None ) \u2192 export const metadata = 'undefined';transformers.modeling_outputs.MaskedImageModelingOutput or tuple(torch.FloatTensor)\n```", "```py\n>>> from transformers import AutoImageProcessor, DeiTForMaskedImageModeling\n>>> import torch\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = DeiTForMaskedImageModeling.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> num_patches = (model.config.image_size // model.config.patch_size) ** 2\n>>> pixel_values = image_processor(images=image, return_tensors=\"pt\").pixel_values\n>>> # create random boolean mask of shape (batch_size, num_patches)\n>>> bool_masked_pos = torch.randint(low=0, high=2, size=(1, num_patches)).bool()\n\n>>> outputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\n>>> loss, reconstructed_pixel_values = outputs.loss, outputs.reconstruction\n>>> list(reconstructed_pixel_values.shape)\n[1, 3, 224, 224]\n```", "```py\n( config: DeiTConfig )\n```", "```py\n( pixel_values: Optional = None head_mask: Optional = None labels: Optional = None output_attentions: Optional = None output_hidden_states: Optional = None return_dict: Optional = None ) \u2192 export const metadata = 'undefined';transformers.modeling_outputs.ImageClassifierOutput or tuple(torch.FloatTensor)\n```", "```py\n>>> from transformers import AutoImageProcessor, DeiTForImageClassification\n>>> import torch\n>>> from PIL import Image\n>>> import requests\n\n>>> torch.manual_seed(3)\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> # note: we are loading a DeiTForImageClassificationWithTeacher from the hub here,\n>>> # so the head will be randomly initialized, hence the predictions will be random\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = DeiTForImageClassification.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_class_idx = logits.argmax(-1).item()\n>>> print(\"Predicted class:\", model.config.id2label[predicted_class_idx])\nPredicted class: magpie\n```", "```py\n( config: DeiTConfig )\n```", "```py\n( pixel_values: Optional = None head_mask: Optional = None output_attentions: Optional = None output_hidden_states: Optional = None return_dict: Optional = None ) \u2192 export const metadata = 'undefined';transformers.models.deit.modeling_deit.DeiTForImageClassificationWithTeacherOutput or tuple(torch.FloatTensor)\n```", "```py\n>>> from transformers import AutoImageProcessor, DeiTForImageClassificationWithTeacher\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = DeiTForImageClassificationWithTeacher.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = logits.argmax(-1).item()\n>>> print(model.config.id2label[predicted_label])\ntabby, tabby cat\n```", "```py\n( config: DeiTConfig add_pooling_layer: bool = True use_mask_token: bool = False **kwargs )\n```", "```py\n( pixel_values: tf.Tensor | None = None bool_masked_pos: tf.Tensor | None = None head_mask: tf.Tensor | None = None output_attentions: Optional[bool] = None output_hidden_states: Optional[bool] = None return_dict: Optional[bool] = None training: bool = False ) \u2192 export const metadata = 'undefined';transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling or tuple(tf.Tensor)\n```", "```py\n>>> from transformers import AutoImageProcessor, TFDeiTModel\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = TFDeiTModel.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 198, 768]\n```", "```py\n( config: DeiTConfig )\n```", "```py\n( pixel_values: tf.Tensor | None = None bool_masked_pos: tf.Tensor | None = None head_mask: tf.Tensor | None = None output_attentions: Optional[bool] = None output_hidden_states: Optional[bool] = None return_dict: Optional[bool] = None training: bool = False ) \u2192 export const metadata = 'undefined';transformers.modeling_tf_outputs.TFMaskedImageModelingOutput or tuple(tf.Tensor)\n```", "```py\n>>> from transformers import AutoImageProcessor, TFDeiTForMaskedImageModeling\n>>> import tensorflow as tf\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = TFDeiTForMaskedImageModeling.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> num_patches = (model.config.image_size // model.config.patch_size) ** 2\n>>> pixel_values = image_processor(images=image, return_tensors=\"tf\").pixel_values\n>>> # create random boolean mask of shape (batch_size, num_patches)\n>>> bool_masked_pos = tf.cast(tf.random.uniform((1, num_patches), minval=0, maxval=2, dtype=tf.int32), tf.bool)\n\n>>> outputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\n>>> loss, reconstructed_pixel_values = outputs.loss, outputs.reconstruction\n>>> list(reconstructed_pixel_values.shape)\n[1, 3, 224, 224]\n```", "```py\n( config: DeiTConfig )\n```", "```py\n( pixel_values: tf.Tensor | None = None head_mask: tf.Tensor | None = None labels: tf.Tensor | None = None output_attentions: Optional[bool] = None output_hidden_states: Optional[bool] = None return_dict: Optional[bool] = None training: bool = False ) \u2192 export const metadata = 'undefined';transformers.modeling_tf_outputs.TFImageClassifierOutput or tuple(tf.Tensor)\n```", "```py\n>>> from transformers import AutoImageProcessor, TFDeiTForImageClassification\n>>> import tensorflow as tf\n>>> from PIL import Image\n>>> import requests\n\n>>> tf.keras.utils.set_random_seed(3)\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> # note: we are loading a TFDeiTForImageClassificationWithTeacher from the hub here,\n>>> # so the head will be randomly initialized, hence the predictions will be random\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = TFDeiTForImageClassification.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_class_idx = tf.math.argmax(logits, axis=-1)[0]\n>>> print(\"Predicted class:\", model.config.id2label[int(predicted_class_idx)])\nPredicted class: little blue heron, Egretta caerulea\n```", "```py\n( config: DeiTConfig )\n```", "```py\n( pixel_values: tf.Tensor | None = None head_mask: tf.Tensor | None = None output_attentions: Optional[bool] = None output_hidden_states: Optional[bool] = None return_dict: Optional[bool] = None training: bool = False ) \u2192 export const metadata = 'undefined';transformers.models.deit.modeling_tf_deit.TFDeiTForImageClassificationWithTeacherOutput or tuple(tf.Tensor)\n```", "```py\n>>> from transformers import AutoImageProcessor, TFDeiTForImageClassificationWithTeacher\n>>> import tensorflow as tf\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n>>> model = TFDeiTForImageClassificationWithTeacher.from_pretrained(\"facebook/deit-base-distilled-patch16-224\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = int(tf.math.argmax(logits, axis=-1))\n>>> print(model.config.id2label[predicted_label])\ntabby, tabby cat\n```"]