["```py\nfrom transformers import TFMobileViTForImageClassification\nimport tensorflow as tf\n\nmodel_ckpt = \"apple/mobilevit-xx-small\"\nmodel = TFMobileViTForImageClassification.from_pretrained(model_ckpt)\n\nconverter = tf.lite.TFLiteConverter.from_keras_model(model)\nconverter.optimizations = [tf.lite.Optimize.DEFAULT]\nconverter.target_spec.supported_ops = [\n    tf.lite.OpsSet.TFLITE_BUILTINS,\n    tf.lite.OpsSet.SELECT_TF_OPS,\n]\ntflite_model = converter.convert()\ntflite_filename = model_ckpt.split(\"/\")[-1] + \".tflite\"\nwith open(tflite_filename, \"wb\") as f:\n    f.write(tflite_model)\n```", "```py\n>>> from transformers import MobileViTConfig, MobileViTModel\n\n>>> # Initializing a mobilevit-small style configuration\n>>> configuration = MobileViTConfig()\n\n>>> # Initializing a model from the mobilevit-small style configuration\n>>> model = MobileViTModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, MobileViTModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"apple/mobilevit-small\")\n>>> model = MobileViTModel.from_pretrained(\"apple/mobilevit-small\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 640, 8, 8]\n```", "```py\n>>> from transformers import AutoImageProcessor, MobileViTForImageClassification\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"apple/mobilevit-small\")\n>>> model = MobileViTForImageClassification.from_pretrained(\"apple/mobilevit-small\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = logits.argmax(-1).item()\n>>> print(model.config.id2label[predicted_label])\ntabby, tabby cat\n```", "```py\n>>> import requests\n>>> import torch\n>>> from PIL import Image\n>>> from transformers import AutoImageProcessor, MobileViTForSemanticSegmentation\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"apple/deeplabv3-mobilevit-small\")\n>>> model = MobileViTForSemanticSegmentation.from_pretrained(\"apple/deeplabv3-mobilevit-small\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> # logits are of shape (batch_size, num_labels, height, width)\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoImageProcessor, TFMobileViTModel\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"apple/mobilevit-small\")\n>>> model = TFMobileViTModel.from_pretrained(\"apple/mobilevit-small\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 640, 8, 8]\n```", "```py\n>>> from transformers import AutoImageProcessor, TFMobileViTForImageClassification\n>>> import tensorflow as tf\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"apple/mobilevit-small\")\n>>> model = TFMobileViTForImageClassification.from_pretrained(\"apple/mobilevit-small\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = int(tf.math.argmax(logits, axis=-1))\n>>> print(model.config.id2label[predicted_label])\ntabby, tabby cat\n```", "```py\n>>> from transformers import AutoImageProcessor, TFMobileViTForSemanticSegmentation\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"apple/deeplabv3-mobilevit-small\")\n>>> model = TFMobileViTForSemanticSegmentation.from_pretrained(\"apple/deeplabv3-mobilevit-small\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"tf\")\n\n>>> outputs = model(**inputs)\n\n>>> # logits are of shape (batch_size, num_labels, height, width)\n>>> logits = outputs.logits\n```"]