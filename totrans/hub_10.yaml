- en: Next Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/hub/repositories-next-steps](https://huggingface.co/docs/hub/repositories-next-steps)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: These next sections highlight features and additional information that you may
    find useful to make the most out of the Git repositories on the Hugging Face Hub.
  prefs: []
  type: TYPE_NORMAL
- en: How to programmatically manage repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hugging Face supports accessing repos with Python via the [`huggingface_hub`
    library](https://huggingface.co/docs/huggingface_hub/index). The operations that
    we’ve explored, such as downloading repositories and uploading files, are available
    through the library, as well as other useful functions!
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer to use git directly, please read the sections below.
  prefs: []
  type: TYPE_NORMAL
- en: Learning more about Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good place to visit if you want to continue learning about Git is [this Git
    tutorial](https://learngitbranching.js.org/). For even more background on Git,
    you can take a look at [GitHub’s Git Guides](https://github.com/git-guides).
  prefs: []
  type: TYPE_NORMAL
- en: How to use branches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To effectively use Git repos collaboratively and to work on features without
    releasing premature code you can use **branches**. Branches allow you to separate
    your “work in progress” code from your “production-ready” code, with the additional
    benefit of letting multiple people work on a project without frequently conflicting
    with each others’ contributions. You can use branches to isolate experiments in
    their own branch, and even [adopt team-wide practices for managing branches](https://ericmjl.github.io/essays-on-data-science/workflow/gitflow/).
  prefs: []
  type: TYPE_NORMAL
- en: To learn about Git branching, you can try out the [Learn Git Branching interactive
    tutorial](https://learngitbranching.js.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Using tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git allows you to *tag* commits so that you can easily note milestones in your
    project. As such, you can use tags to mark commits in your Hub repos! To learn
    about using tags, you can visit [this DevConnected post](https://devconnected.com/how-to-create-git-tags/).
  prefs: []
  type: TYPE_NORMAL
- en: Beyond making it easy to identify important commits in your repo’s history,
    using Git tags also allows you to do A/B testing, [clone a repository at a specific
    tag](https://www.techiedelight.com/clone-specific-tag-with-git/), and more! The
    `huggingface_hub` library also supports working with tags, such as [downloading
    files from a specific tagged commit](https://huggingface.co/docs/huggingface_hub/main/en/how-to-downstream#hfhuburl).
  prefs: []
  type: TYPE_NORMAL
- en: How to duplicate or fork a repo (including LFS pointers)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’d like to copy a repository, depending on whether you want to preserve
    the Git history there are two options.
  prefs: []
  type: TYPE_NORMAL
- en: Duplicating without Git history
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In many scenarios, if you want your own copy of a particular codebase you might
    not be concerned about the previous Git history. In this case, you can quickly
    duplicate a repo with the handy [Repo Duplicator](https://huggingface.co/spaces/huggingface-projects/repo_duplicator)!
    You’ll have to create a User Access Token, which you can read more about in the
    [security documentation](./security-tokens).
  prefs: []
  type: TYPE_NORMAL
- en: Duplicating with the Git history (Fork)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A duplicate of a repository with the commit history preserved is called a *fork*.
    You may choose to fork one of your own repos, but it also common to fork other
    people’s projects if you would like to tinker with them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note that you will need to [install Git LFS](https://git-lfs.github.com/)
    and the [`huggingface_hub` CLI](https://huggingface.co/docs/huggingface_hub/index)
    to follow this process**. When you want to fork or [rebase](https://git-scm.com/docs/git-rebase)
    a repository with LFS files you cannot use the usual Git approach that you might
    be familiar with since you need to be careful to not break the LFS pointers. Forking
    can take time depending on your bandwidth because you will have to fetch and re-upload
    all the LFS files in your fork.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, say you have an upstream repository, **upstream**, and you just
    created your own repository on the Hub which is **myfork** in this example.
  prefs: []
  type: TYPE_NORMAL
- en: Create a destination repository (e.g. **myfork**) in [https://huggingface.co](https://huggingface.co)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone your fork repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch non-LFS files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch large files. This can take some time depending on your download bandwidth:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '4.a. If you want to completely override the fork history (which should only
    have an initial commit), run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '4.b. If you want to rebase instead of overriding, run the following command
    and resolve any conflicts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare your LFS files to push:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally push:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now you have your own fork or rebased repo in the Hub!
  prefs: []
  type: TYPE_NORMAL
