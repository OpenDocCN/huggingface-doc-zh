- en: Next Steps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一步
- en: 'Original text: [https://huggingface.co/docs/hub/repositories-next-steps](https://huggingface.co/docs/hub/repositories-next-steps)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/hub/repositories-next-steps](https://huggingface.co/docs/hub/repositories-next-steps)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: These next sections highlight features and additional information that you may
    find useful to make the most out of the Git repositories on the Hugging Face Hub.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分突出显示了您可能发现有用的功能和额外信息，以充分利用Hugging Face Hub上的Git存储库。
- en: How to programmatically manage repositories
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何以编程方式管理存储库
- en: Hugging Face supports accessing repos with Python via the [`huggingface_hub`
    library](https://huggingface.co/docs/huggingface_hub/index). The operations that
    we’ve explored, such as downloading repositories and uploading files, are available
    through the library, as well as other useful functions!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Hugging Face支持通过[`huggingface_hub`库](https://huggingface.co/docs/huggingface_hub/index)使用Python访问存储库。我们已经探讨过的操作，如下载存储库和上传文件，都可以通过该库进行，还有其他有用的功能！
- en: If you prefer to use git directly, please read the sections below.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢直接使用git，请阅读下面的部分。
- en: Learning more about Git
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解更多关于Git的知识
- en: A good place to visit if you want to continue learning about Git is [this Git
    tutorial](https://learngitbranching.js.org/). For even more background on Git,
    you can take a look at [GitHub’s Git Guides](https://github.com/git-guides).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想继续学习Git，可以访问[这个Git教程](https://learngitbranching.js.org/)。要了解更多关于Git的背景知识，您可以查看[GitHub的Git指南](https://github.com/git-guides)。
- en: How to use branches
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用分支
- en: To effectively use Git repos collaboratively and to work on features without
    releasing premature code you can use **branches**. Branches allow you to separate
    your “work in progress” code from your “production-ready” code, with the additional
    benefit of letting multiple people work on a project without frequently conflicting
    with each others’ contributions. You can use branches to isolate experiments in
    their own branch, and even [adopt team-wide practices for managing branches](https://ericmjl.github.io/essays-on-data-science/workflow/gitflow/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地协作使用Git存储库，并在发布之前的代码上工作，您可以使用**分支**。分支允许您将“正在进行中”的代码与“准备投入生产”的代码分开，还可以让多人在项目上工作而不经常与彼此的贡献发生冲突。您可以使用分支将实验隔离在自己的分支中，甚至[采用团队范例来管理分支](https://ericmjl.github.io/essays-on-data-science/workflow/gitflow/)。
- en: To learn about Git branching, you can try out the [Learn Git Branching interactive
    tutorial](https://learngitbranching.js.org/).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Git分支，请尝试[Learn Git Branching交互式教程](https://learngitbranching.js.org/)。
- en: Using tags
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用标签
- en: Git allows you to *tag* commits so that you can easily note milestones in your
    project. As such, you can use tags to mark commits in your Hub repos! To learn
    about using tags, you can visit [this DevConnected post](https://devconnected.com/how-to-create-git-tags/).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Git允许您*标记*提交，以便您可以轻松地在项目中记录里程碑。因此，您可以使用标签在Hub存储库中标记提交！要了解如何使用标签，您可以访问[这篇DevConnected文章](https://devconnected.com/how-to-create-git-tags/)。
- en: Beyond making it easy to identify important commits in your repo’s history,
    using Git tags also allows you to do A/B testing, [clone a repository at a specific
    tag](https://www.techiedelight.com/clone-specific-tag-with-git/), and more! The
    `huggingface_hub` library also supports working with tags, such as [downloading
    files from a specific tagged commit](https://huggingface.co/docs/huggingface_hub/main/en/how-to-downstream#hfhuburl).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了帮助您在存储库历史中识别重要提交外，使用Git标签还可以让您进行A/B测试，[在特定标签处克隆存储库](https://www.techiedelight.com/clone-specific-tag-with-git/)等！`huggingface_hub`库还支持与标签一起工作，例如[从特定标记的提交中下载文件](https://huggingface.co/docs/huggingface_hub/main/en/how-to-downstream#hfhuburl)。
- en: How to duplicate or fork a repo (including LFS pointers)
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何复制或分叉一个存储库（包括LFS指针）
- en: If you’d like to copy a repository, depending on whether you want to preserve
    the Git history there are two options.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要复制一个存储库，取决于您是否想要保留Git历史，有两种选项。
- en: Duplicating without Git history
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无Git历史复制
- en: In many scenarios, if you want your own copy of a particular codebase you might
    not be concerned about the previous Git history. In this case, you can quickly
    duplicate a repo with the handy [Repo Duplicator](https://huggingface.co/spaces/huggingface-projects/repo_duplicator)!
    You’ll have to create a User Access Token, which you can read more about in the
    [security documentation](./security-tokens).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，如果您想要自己的特定代码库副本，您可能不关心以前的Git历史。在这种情况下，您可以快速使用方便的[Repo Duplicator](https://huggingface.co/spaces/huggingface-projects/repo_duplicator)复制存储库！您将需要创建一个用户访问令牌，您可以在[安全文档](./security-tokens)中了解更多。
- en: Duplicating with the Git history (Fork)
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Git历史进行复制（分叉）
- en: A duplicate of a repository with the commit history preserved is called a *fork*.
    You may choose to fork one of your own repos, but it also common to fork other
    people’s projects if you would like to tinker with them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 保留提交历史的存储库副本称为*分叉*。您可以选择分叉自己的存储库，但如果您想要对其他人的项目进行调整，也常见分叉其他人的项目。
- en: '**Note that you will need to [install Git LFS](https://git-lfs.github.com/)
    and the [`huggingface_hub` CLI](https://huggingface.co/docs/huggingface_hub/index)
    to follow this process**. When you want to fork or [rebase](https://git-scm.com/docs/git-rebase)
    a repository with LFS files you cannot use the usual Git approach that you might
    be familiar with since you need to be careful to not break the LFS pointers. Forking
    can take time depending on your bandwidth because you will have to fetch and re-upload
    all the LFS files in your fork.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**请注意，您需要[安装Git LFS](https://git-lfs.github.com/)和[`huggingface_hub` CLI](https://huggingface.co/docs/huggingface_hub/index)才能按照此过程操作**。当您想要分叉或[变基](https://git-scm.com/docs/git-rebase)一个包含LFS文件的存储库时，您不能使用您熟悉的常规Git方法，因为您需要小心不要破坏LFS指针。分叉可能需要时间，取决于您的带宽，因为您将不得不获取和重新上传您的分叉中的所有LFS文件。'
- en: For example, say you have an upstream repository, **upstream**, and you just
    created your own repository on the Hub which is **myfork** in this example.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您有一个上游存储库，**upstream**，并且您刚刚在Hub上创建了自己的存储库，本例中为**myfork**。
- en: Create a destination repository (e.g. **myfork**) in [https://huggingface.co](https://huggingface.co)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://huggingface.co](https://huggingface.co)中创建一个目标存储库（例如**myfork**）
- en: 'Clone your fork repository:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆您的分支存储库：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Fetch non-LFS files:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取非LFS文件：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Fetch large files. This can take some time depending on your download bandwidth:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取大文件。这可能需要一些时间，取决于您的下载带宽：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '4.a. If you want to completely override the fork history (which should only
    have an initial commit), run:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 4.a. 如果您想完全覆盖分支历史记录（应该只有一个初始提交），运行：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '4.b. If you want to rebase instead of overriding, run the following command
    and resolve any conflicts:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 4.b. 如果您想要重新定位而不是覆盖，请运行以下命令并解决任何冲突：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Prepare your LFS files to push:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备推送您的LFS文件：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And finally push:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后推送：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now you have your own fork or rebased repo in the Hub!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您在Hub中有自己的分支或重新定位的存储库！
