["```py\n>>> from transformers import DetaConfig, DetaModel\n\n>>> # Initializing a DETA SenseTime/deformable-detr style configuration\n>>> configuration = DetaConfig()\n\n>>> # Initializing a model (with random weights) from the SenseTime/deformable-detr style configuration\n>>> model = DetaModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, DetaModel\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"jozhang97/deta-swin-large-o365\")\n>>> model = DetaModel.from_pretrained(\"jozhang97/deta-swin-large-o365\", two_stage=False)\n\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 900, 256]\n```", "```py\n>>> from transformers import AutoImageProcessor, DetaForObjectDetection\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"jozhang97/deta-swin-large\")\n>>> model = DetaForObjectDetection.from_pretrained(\"jozhang97/deta-swin-large\")\n\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> # convert outputs (bounding boxes and class logits) to Pascal VOC format (xmin, ymin, xmax, ymax)\n>>> target_sizes = torch.tensor([image.size[::-1]])\n>>> results = image_processor.post_process_object_detection(outputs, threshold=0.5, target_sizes=target_sizes)[\n...     0\n... ]\n>>> for score, label, box in zip(results[\"scores\"], results[\"labels\"], results[\"boxes\"]):\n...     box = [round(i, 2) for i in box.tolist()]\n...     print(\n...         f\"Detected {model.config.id2label[label.item()]} with confidence \"\n...         f\"{round(score.item(), 3)} at location {box}\"\n...     )\nDetected cat with confidence 0.683 at location [345.85, 23.68, 639.86, 372.83]\nDetected cat with confidence 0.683 at location [8.8, 52.49, 316.93, 473.45]\nDetected remote with confidence 0.568 at location [40.02, 73.75, 175.96, 117.33]\nDetected remote with confidence 0.546 at location [333.68, 77.13, 370.12, 187.51]\n```"]