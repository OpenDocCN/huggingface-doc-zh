- en: Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/testing](https://huggingface.co/docs/transformers/v4.37.2/en/testing)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/testing](https://huggingface.co/docs/transformers/v4.37.2/en/testing)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at how 🤗 Transformers models are tested and how you can write
    new tests and improve the existing ones.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看🤗 Transformers模型是如何测试的，以及您如何编写新测试并改进现有测试。
- en: 'There are 2 test suites in the repository:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库中有2个测试套件：
- en: '`tests` — tests for the general API'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tests` — 用于一般API的测试'
- en: '`examples` — tests primarily for various applications that aren’t part of the
    API'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`examples` — 主要用于不属于API的各种应用的测试'
- en: How transformers are tested
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何测试transformers
- en: Once a PR is submitted it gets tested with 9 CircleCi jobs. Every new commit
    to that PR gets retested. These jobs are defined in this [config file](https://github.com/huggingface/transformers/tree/main/.circleci/config.yml),
    so that if needed you can reproduce the same environment on your machine.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦提交了PR，它将通过9个CircleCi作业进行测试。对该PR的每个新提交都会重新测试。这些作业在此[配置文件](https://github.com/huggingface/transformers/tree/main/.circleci/config.yml)中定义，因此如果需要，您可以在您的机器上重现相同的环境。
- en: These CI jobs don’t run `@slow` tests.
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些CI作业不运行`@slow`测试。
- en: 'There are 3 jobs run by [github actions](https://github.com/huggingface/transformers/actions):'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由[github actions](https://github.com/huggingface/transformers/actions)运行3个作业：
- en: '[torch hub integration](https://github.com/huggingface/transformers/tree/main/.github/workflows/github-torch-hub.yml):
    checks whether torch hub integration works.'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[torch hub集成](https://github.com/huggingface/transformers/tree/main/.github/workflows/github-torch-hub.yml)：检查torch
    hub集成是否正常工作。'
- en: '[self-hosted (push)](https://github.com/huggingface/transformers/tree/main/.github/workflows/self-push.yml):
    runs fast tests on GPU only on commits on `main`. It only runs if a commit on
    `main` has updated the code in one of the following folders: `src`, `tests`, `.github`
    (to prevent running on added model cards, notebooks, etc.)'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自托管（推送）](https://github.com/huggingface/transformers/tree/main/.github/workflows/self-push.yml)：仅在`main`上的提交上在GPU上运行快速测试。仅在`main`上的提交更新了以下文件夹中的代码时才运行：`src`，`tests`，`.github`（以防止在添加模型卡、笔记本等时运行）。'
- en: '[self-hosted runner](https://github.com/huggingface/transformers/tree/main/.github/workflows/self-scheduled.yml):
    runs normal and slow tests on GPU in `tests` and `examples`:'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自托管的运行器](https://github.com/huggingface/transformers/tree/main/.github/workflows/self-scheduled.yml)：在`tests`和`examples`中的GPU上运行正常和慢速测试：'
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The results can be observed [here](https://github.com/huggingface/transformers/actions).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 结果可以在[此处](https://github.com/huggingface/transformers/actions)观察。
- en: Running tests
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行测试
- en: Choosing which tests to run
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择要运行的测试
- en: This document goes into many details of how tests can be run. If after reading
    everything, you need even more details you will find them [here](https://docs.pytest.org/en/latest/usage.html).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本文详细介绍了如何运行测试。如果阅读完所有内容后，您需要更多细节，您可以在[此处](https://docs.pytest.org/en/latest/usage.html)找到它们。
- en: Here are some most useful ways of running tests.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是运行测试的一些最有用的方法。
- en: 'Run all:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 运行所有：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'or:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 或：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that the latter is defined as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，后者被定义为：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'which tells pytest to:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉pytest：
- en: run as many test processes as they are CPU cores (which could be too many if
    you don’t have a ton of RAM!)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行与CPU核心数量相同的测试进程（如果RAM不足可能会太多！）
- en: ensure that all tests from the same file will be run by the same test process
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保同一文件中的所有测试将由同一个测试进程运行
- en: do not capture output
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不捕获输出
- en: run in verbose mode
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以详细模式运行
- en: Getting the list of all tests
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取所有测试的列表
- en: 'All tests of the test suite:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件的所有测试：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'All tests of a given test file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 给定测试文件的所有测试：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Run a specific test module
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行特定测试模块
- en: 'To run an individual test module:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行单个测试模块：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Run specific tests
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行特定测试
- en: 'Since unittest is used inside most of the tests, to run specific subtests you
    need to know the name of the unittest class containing those tests. For example,
    it could be:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数测试中使用了unittest，要运行特定的子测试，您需要知道包含这些测试的unittest类的名称。例如，可能是：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里：
- en: '`tests/test_optimization.py` - the file with tests'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests/test_optimization.py` - 具有测试的文件'
- en: '`OptimizationTest` - the name of the class'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OptimizationTest` - 类的名称'
- en: '`test_adam_w` - the name of the specific test function'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_adam_w` - 特定测试函数的名称'
- en: 'If the file contains multiple classes, you can choose to run only tests of
    a given class. For example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件包含多个类，您可以选择仅运行给定类的测试。例如：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: will run all the tests inside that class.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将运行该类中的所有测试。
- en: 'As mentioned earlier you can see what tests are contained inside the `OptimizationTest`
    class by running:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您可以通过运行以下内容查看`OptimizationTest`类中包含的所有测试：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can run tests by keyword expressions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过关键字表达式运行测试。
- en: 'To run only tests whose name contains `adam`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 仅运行包含`adam`名称的测试：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Logical `and` and `or` can be used to indicate whether all keywords should match
    or either. `not` can be used to negate.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑`and`和`or`可用于指示是否应匹配所有关键字或任一关键字。`not`可用于否定。
- en: 'To run all tests except those whose name contains `adam`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行除包含`adam`的名称的测试之外的所有测试：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And you can combine the two patterns in one:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将这两种模式结合在一起：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'For example to run both `test_adafactor` and `test_adam_w` you can use:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要同时运行`test_adafactor`和`test_adam_w`，您可以使用：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note that we use `or` here, since we want either of the keywords to match to
    include both.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在这里使用`or`，因为我们希望关键字中的任何一个匹配以包括两者。
- en: 'If you want to include only tests that include both patterns, `and` is to be
    used:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要仅包含包含两种模式的测试，应使用`and`：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run accelerate tests
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行加速测试
- en: 'Sometimes you need to run `accelerate` tests on your models. For that you can
    just add `-m accelerate_tests` to your command, if let’s say you want to run these
    tests on `OPT` run:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您需要在模型上运行`accelerate`测试。为此，您只需将`-m accelerate_tests`添加到您的命令中，例如，如果您想在`OPT`上运行这些测试：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run documentation tests
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行文档测试
- en: 'In order to test whether the documentation examples are correct, you should
    check that the `doctests` are passing. As an example, let’s use [`WhisperModel.forward`’s
    docstring](https://github.com/huggingface/transformers/blob/main/src/transformers/models/whisper/modeling_whisper.py#L1017-L1035):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试文档示例是否正确，您应该检查`doctests`是否通过。例如，让我们使用[`WhisperModel.forward`的文档字符串](https://github.com/huggingface/transformers/blob/main/src/transformers/models/whisper/modeling_whisper.py#L1017-L1035)：
- en: '[PRE16]python'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE16]python'
- en: '>>> import torch'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> import torch'
- en: '>>> from transformers import WhisperModel, WhisperFeatureExtractor'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> from transformers import WhisperModel, WhisperFeatureExtractor'
- en: '>>> from datasets import load_dataset'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从数据集导入数据集
- en: '>>> model = WhisperModel.from_pretrained("openai/whisper-base")'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> model = WhisperModel.from_pretrained("openai/whisper-base")'
- en: '>>> feature_extractor = WhisperFeatureExtractor.from_pretrained("openai/whisper-base")'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> feature_extractor = WhisperFeatureExtractor.from_pretrained("openai/whisper-base")'
- en: '>>> ds = load_dataset("hf-internal-testing/librispeech_asr_dummy", "clean",
    split="validation")'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> ds = load_dataset("hf-internal-testing/librispeech_asr_dummy", "clean",
    split="validation")'
- en: '>>> inputs = feature_extractor(ds[0]["audio"]["array"], return_tensors="pt")'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> inputs = feature_extractor(ds[0]["audio"]["array"], return_tensors="pt")'
- en: '>>> input_features = inputs.input_features'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> input_features = inputs.input_features'
- en: '>>> decoder_input_ids = torch.tensor([[1, 1]]) * model.config.decoder_start_token_id'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> decoder_input_ids = torch.tensor([[1, 1]]) * model.config.decoder_start_token_id'
- en: '>>> last_hidden_state = model(input_features, decoder_input_ids=decoder_input_ids).last_hidden_state'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> last_hidden_state = model(input_features, decoder_input_ids=decoder_input_ids).last_hidden_state'
- en: '>>> list(last_hidden_state.shape)'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> list(last_hidden_state.shape)'
- en: '[1, 2, 512]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[1, 2, 512]'
- en: '[PRE17]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Just run the following line to automatically test every docstring example in
    the desired file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 只需运行以下行，自动测试所需文件中的每个文档字符串示例：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If the file has a markdown extention, you should add the `--doctest-glob="*.md"`
    argument.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件具有markdown扩展名，应添加`--doctest-glob="*.md"`参数。
- en: Run only modified tests
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仅运行修改后的测试
- en: You can run the tests related to the unstaged files or the current branch (according
    to Git) by using [pytest-picked](https://github.com/anapaulagomes/pytest-picked).
    This is a great way of quickly testing your changes didn’t break anything, since
    it won’t run the tests related to files you didn’t touch.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用[pytest-picked](https://github.com/anapaulagomes/pytest-picked)来运行与未暂存文件或当前分支（根据Git）相关的测试。这是一个快速测试您的更改是否破坏了任何内容的好方法，因为它不会运行与您未触及的文件相关的测试。
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: All tests will be run from files and folders which are modified, but not yet
    committed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将从已修改但尚未提交的文件和文件夹中运行所有测试。
- en: Automatically rerun failed tests on source modification
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在源代码修改时自动重新运行失败的测试
- en: '[pytest-xdist](https://github.com/pytest-dev/pytest-xdist) provides a very
    useful feature of detecting all failed tests, and then waiting for you to modify
    files and continuously re-rerun those failing tests until they pass while you
    fix them. So that you don’t need to re start pytest after you made the fix. This
    is repeated until all tests pass after which again a full run is performed.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[pytest-xdist](https://github.com/pytest-dev/pytest-xdist)提供了一个非常有用的功能，可以检测所有失败的测试，然后等待您修改文件并持续重新运行这些失败的测试，直到它们通过，同时您修复它们。这将重复进行，直到所有测试通过，之后再次执行完整运行。'
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To enter the mode: `pytest -f` or `pytest --looponfail`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要进入模式：`pytest -f`或`pytest --looponfail`
- en: 'File changes are detected by looking at `looponfailroots` root directories
    and all of their contents (recursively). If the default for this value does not
    work for you, you can change it in your project by setting a configuration option
    in `setup.cfg`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看`looponfailroots`根目录及其所有内容（递归）来检测文件更改。如果此值的默认值对您不起作用，您可以通过在`setup.cfg`中设置配置选项来更改项目中的值：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'or `pytest.ini`/`tox.ini` files:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 或`pytest.ini`/`tox.ini`文件：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This would lead to only looking for file changes in the respective directories,
    specified relatively to the ini-file’s directory.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致仅查找相对于ini文件目录指定的相应目录中的文件更改。
- en: '[pytest-watch](https://github.com/joeyespo/pytest-watch) is an alternative
    implementation of this functionality.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[pytest-watch](https://github.com/joeyespo/pytest-watch)是此功能的另一种实现。'
- en: Skip a test module
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跳过一个测试模块
- en: 'If you want to run all test modules, except a few you can exclude them by giving
    an explicit list of tests to run. For example, to run all except `test_modeling_*.py`
    tests:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想运行所有测试模块，除了一些，您可以通过提供一个明确的测试运行列表来排除它们。例如，要运行除了`test_modeling_*.py`测试之外的所有测试：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Clearing state
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 清除状态
- en: 'CI builds and when isolation is important (against speed), cache should be
    cleared:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: CI构建和隔离重要时（针对速度），应清除缓存：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Running tests in parallel
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并行运行测试
- en: As mentioned earlier `make test` runs tests in parallel via `pytest-xdist` plugin
    (`-n X` argument, e.g. `-n 2` to run 2 parallel jobs).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`make test`通过`pytest-xdist`插件（`-n X`参数，例如`-n 2`以运行2个并行作业）并行运行测试。
- en: '`pytest-xdist`’s `--dist=` option allows one to control how the tests are grouped.
    `--dist=loadfile` puts the tests located in one file onto the same process.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest-xdist`的`--dist=`选项允许控制如何对测试进行分组。`--dist=loadfile`将位于一个文件中的测试放在同一个进程中。'
- en: Since the order of executed tests is different and unpredictable, if running
    the test suite with `pytest-xdist` produces failures (meaning we have some undetected
    coupled tests), use [pytest-replay](https://github.com/ESSS/pytest-replay) to
    replay the tests in the same order, which should help with then somehow reducing
    that failing sequence to a minimum.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于执行测试的顺序不同且不可预测，如果使用`pytest-xdist`运行测试套件会产生失败（意味着我们有一些未检测到的耦合测试），请使用[pytest-replay](https://github.com/ESSS/pytest-replay)以相同顺序重放测试，这应该有助于以某种方式将失败序列减少到最小。
- en: Test order and repetition
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试顺序和重复
- en: It’s good to repeat the tests several times, in sequence, randomly, or in sets,
    to detect any potential inter-dependency and state-related bugs (tear down). And
    the straightforward multiple repetition is just good to detect some problems that
    get uncovered by randomness of DL.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 最好多次重复测试，按顺序、随机或成组进行，以检测任何潜在的相互依赖和与状态相关的错误（拆除）。直接的多次重复只是用来检测由于DL的随机性而暴露出的一些问题。
- en: Repeat tests
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 重复测试
- en: '[pytest-flakefinder](https://github.com/dropbox/pytest-flakefinder):'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pytest-flakefinder](https://github.com/dropbox/pytest-flakefinder)：'
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And then run every test multiple times (50 by default):'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后多次运行每个测试（默认为50次）：
- en: '[PRE27]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This plugin doesn’t work with `-n` flag from `pytest-xdist`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件不与`pytest-xdist`的`-n`标志一起使用。
- en: There is another plugin `pytest-repeat`, but it doesn’t work with `unittest`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个插件`pytest-repeat`，但它与`unittest`不兼容。
- en: Run tests in a random order
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 以随机顺序运行测试
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Important: the presence of `pytest-random-order` will automatically randomize
    tests, no configuration change or command line options is required.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：存在`pytest-random-order`将自动随机化测试，无需更改配置或命令行选项。
- en: 'As explained earlier this allows detection of coupled tests - where one test’s
    state affects the state of another. When `pytest-random-order` is installed it
    will print the random seed it used for that session, e.g:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面所解释的，这允许检测耦合测试 - 一个测试的状态影响另一个测试的状态。当安装了`pytest-random-order`时，它将打印用于该会话的随机种子，例如：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'So that if the given particular sequence fails, you can reproduce it by adding
    that exact seed, e.g.:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果给定的特定顺序失败，您可以通过添加确切的种子来重现它，例如：
- en: '[PRE30]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'It will only reproduce the exact order if you use the exact same list of tests
    (or no list at all). Once you start to manually narrowing down the list you can
    no longer rely on the seed, but have to list them manually in the exact order
    they failed and tell pytest to not randomize them instead using `--random-order-bucket=none`,
    e.g.:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在使用完全相同的测试列表（或根本没有列表）时，它才会重现确切的顺序。一旦开始手动缩小列表，就不能再依赖种子，而必须按照它们失败的确切顺序手动列出它们，并告诉pytest不要随机化它们，而是使用`--random-order-bucket=none`，例如：
- en: '[PRE31]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To disable the shuffling for all tests:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用所有测试的洗牌：
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: By default `--random-order-bucket=module` is implied, which will shuffle the
    files on the module levels. It can also shuffle on `class`, `package`, `global`
    and `none` levels. For the complete details please see its [documentation](https://github.com/jbasko/pytest-random-order).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，隐含`--random-order-bucket=module`，这将在模块级别对文件进行洗牌。它还可以在`class`、`package`、`global`和`none`级别进行洗牌。有关完整详情，请参阅其[文档](https://github.com/jbasko/pytest-random-order)。
- en: 'Another randomization alternative is: [`pytest-randomly`](https://github.com/pytest-dev/pytest-randomly).
    This module has a very similar functionality/interface, but it doesn’t have the
    bucket modes available in `pytest-random-order`. It has the same problem of imposing
    itself once installed.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个随机化的替代方案是：[`pytest-randomly`](https://github.com/pytest-dev/pytest-randomly)。这个模块具有非常相似的功能/接口，但它没有`pytest-random-order`中可用的桶模式。一旦安装，它也会强制自身。
- en: Look and feel variations
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外观和感觉变化
- en: pytest-sugar
  id: totrans-134
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: pytest-sugar
- en: '[pytest-sugar](https://github.com/Frozenball/pytest-sugar) is a plugin that
    improves the look-n-feel, adds a progressbar, and show tests that fail and the
    assert instantly. It gets activated automatically upon installation.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[pytest-sugar](https://github.com/Frozenball/pytest-sugar) 是一个插件，可以改善外观和感觉，添加进度条，并立即显示失败的测试和断言。安装后会自动激活。'
- en: '[PRE33]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To run tests without it, run:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要在没有它的情况下运行测试，请运行：
- en: '[PRE34]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: or uninstall it.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 或者卸载它。
- en: Report each sub-test name and its progress
  id: totrans-140
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 报告每个子测试的名称及其进度
- en: 'For a single or a group of tests via `pytest` (after `pip install pytest-pspec`):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`pytest`运行单个或一组测试（在`pip install pytest-pspec`之后）：
- en: '[PRE35]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Instantly shows failed tests
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 立即显示失败的测试
- en: '[pytest-instafail](https://github.com/pytest-dev/pytest-instafail) shows failures
    and errors instantly instead of waiting until the end of test session.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[pytest-instafail](https://github.com/pytest-dev/pytest-instafail) 立即显示失败和错误，而不是等到测试会话结束。'
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: To GPU or not to GPU
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要GPU还是不要GPU
- en: 'On a GPU-enabled setup, to test in CPU-only mode add `CUDA_VISIBLE_DEVICES=""`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在启用GPU的设置中，要在仅CPU模式下测试，请添加`CUDA_VISIBLE_DEVICES=""`：
- en: '[PRE38]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'or if you have multiple gpus, you can specify which one is to be used by `pytest`.
    For example, to use only the second gpu if you have gpus `0` and `1`, you can
    run:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果您有多个GPU，可以指定`pytest`要使用的GPU。例如，如果您有GPU `0` 和 `1`，则可以仅使用第二个GPU运行：
- en: '[PRE39]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This is handy when you want to run different tasks on different GPUs.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这在您想要在不同的GPU上运行不同任务时非常方便。
- en: 'Some tests must be run on CPU-only, others on either CPU or GPU or TPU, yet
    others on multiple-GPUs. The following skip decorators are used to set the requirements
    of tests CPU/GPU/TPU-wise:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一些测试必须在仅CPU上运行，其他测试可以在CPU或GPU或TPU上运行，另一些测试可以在多个GPU上运行。以下跳过装饰器用于设置测试的CPU/GPU/TPU要求：
- en: '`require_torch` - this test will run only under torch'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_torch` - 此测试仅在torch下运行'
- en: '`require_torch_gpu` - as `require_torch` plus requires at least 1 GPU'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_torch_gpu` - 与`require_torch`相同，至少需要1个GPU'
- en: '`require_torch_multi_gpu` - as `require_torch` plus requires at least 2 GPUs'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_torch_multi_gpu` - 与`require_torch`相同，至少需要2个GPU'
- en: '`require_torch_non_multi_gpu` - as `require_torch` plus requires 0 or 1 GPUs'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_torch_non_multi_gpu` - 与`require_torch`相同，需要0个或1个GPU'
- en: '`require_torch_up_to_2_gpus` - as `require_torch` plus requires 0 or 1 or 2
    GPUs'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_torch_up_to_2_gpus` - 与`require_torch`相同，需要0个或1个或2个GPU'
- en: '`require_torch_tpu` - as `require_torch` plus requires at least 1 TPU'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`require_torch_tpu` - 与`require_torch`相同，至少需要1个TPU'
- en: 'Let’s depict the GPU requirements in the following table:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下表中描述GPU要求：
- en: '| n gpus | decorator | |--------+--------------------------------| | `>= 0`
    | `@require_torch` | | `>= 1` | `@require_torch_gpu` | | `>= 2` | `@require_torch_multi_gpu`
    | | `< 2` | `@require_torch_non_multi_gpu` | | `< 3` | `@require_torch_up_to_2_gpus`
    |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| n个GPU | 装饰器 | |--------+--------------------------------| | `>= 0` | `@require_torch`
    | | `>= 1` | `@require_torch_gpu` | | `>= 2` | `@require_torch_multi_gpu` | |
    `< 2` | `@require_torch_non_multi_gpu` | | `< 3` | `@require_torch_up_to_2_gpus`
    |'
- en: 'For example, here is a test that must be run only when there are 2 or more
    GPUs available and pytorch is installed:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是一个必须在有2个或更多个GPU可用且已安装pytorch时运行的测试：
- en: '[PRE40]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'If a test requires `tensorflow` use the `require_tf` decorator. For example:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个测试需要`tensorflow`，请使用`require_tf`装饰器。例如：
- en: '[PRE41]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'These decorators can be stacked. For example, if a test is slow and requires
    at least one GPU under pytorch, here is how to set it up:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这些装饰器可以叠加。例如，如果一个测试很慢并且在pytorch下至少需要一个GPU，这是如何设置的：
- en: '[PRE42]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Some decorators like `@parametrized` rewrite test names, therefore `@require_*`
    skip decorators have to be listed last for them to work correctly. Here is an
    example of the correct usage:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一些装饰器如`@parametrized`会重写测试名称，因此`@require_*`跳过装饰器必须在最后列出才能正常工作。以下是正确使用的示例：
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This order problem doesn’t exist with `@pytest.mark.parametrize`, you can put
    it first or last and it will still work. But it only works with non-unittests.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这个顺序问题在`@pytest.mark.parametrize`中不存在，您可以将其放在最前面或最后面，它仍然有效。但它只适用于非单元测试。
- en: 'Inside tests:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中：
- en: 'How many GPUs are available:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少个GPU可用：
- en: '[PRE44]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Testing with a specific PyTorch backend or device
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用特定的PyTorch后端或设备进行测试
- en: 'To run the test suite on a specific torch device add `TRANSFORMERS_TEST_DEVICE="$device"`
    where `$device` is the target backend. For example, to test on CPU only:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要在特定的torch设备上运行测试套件，请添加`TRANSFORMERS_TEST_DEVICE="$device"`，其中`$device`是目标后端。例如，要仅在CPU上测试：
- en: '[PRE45]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This variable is useful for testing custom or less common PyTorch backends such
    as `mps`. It can also be used to achieve the same effect as `CUDA_VISIBLE_DEVICES`
    by targeting specific GPUs or testing in CPU-only mode.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此变量对于测试自定义或不太常见的PyTorch后端（如`mps`）很有用。它还可以用于通过定位特定GPU或在仅CPU模式下进行测试来实现与`CUDA_VISIBLE_DEVICES`相同的效果。
- en: 'Certain devices will require an additional import after importing `torch` for
    the first time. This can be specified using the environment variable `TRANSFORMERS_TEST_BACKEND`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次导入`torch`后，某些设备将需要额外的导入。这可以使用环境变量`TRANSFORMERS_TEST_BACKEND`指定：
- en: '[PRE46]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Alternative backends may also require the replacement of device-specific functions.
    For example `torch.cuda.manual_seed` may need to be replaced with a device-specific
    seed setter like `torch.npu.manual_seed` to correctly set a random seed on the
    device. To specify a new backend with backend-specific device functions when running
    the test suite, create a Python device specification file in the format:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 替代后端可能还需要替换特定于设备的函数。例如，`torch.cuda.manual_seed`可能需要替换为特定于设备的种子设置器，如`torch.npu.manual_seed`，以正确设置设备上的随机种子。在运行测试套件时指定新的后端和后端特定设备函数时，创建一个Python设备规范文件，格式如下：
- en: '[PRE47]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This format also allows for specification of any additional imports required.
    To use this file to replace equivalent methods in the test suite, set the environment
    variable `TRANSFORMERS_TEST_DEVICE_SPEC` to the path of the spec file.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此格式还允许指定所需的任何其他导入。要使用此文件替换测试套件中的等效方法，请将环境变量`TRANSFORMERS_TEST_DEVICE_SPEC`设置为规范文件的路径。
- en: Currently, only `MANUAL_SEED_FN`, `EMPTY_CACHE_FN` and `DEVICE_COUNT_FN` are
    supported for device-specific dispatch.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，只支持`MANUAL_SEED_FN`、`EMPTY_CACHE_FN`和`DEVICE_COUNT_FN`用于特定设备的分发。
- en: Distributed training
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分布式训练
- en: '`pytest` can’t deal with distributed training directly. If this is attempted
    - the sub-processes don’t do the right thing and end up thinking they are `pytest`
    and start running the test suite in loops. It works, however, if one spawns a
    normal process that then spawns off multiple workers and manages the IO pipes.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`pytest`不能直接处理分布式训练。如果尝试这样做-子进程不会做正确的事情，最终会认为它们是`pytest`并开始循环运行测试套件。但是，如果生成一个正常进程，然后生成多个工作进程并管理IO管道，则可以正常工作。'
- en: 'Here are some tests that use it:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些使用它的测试：
- en: '[test_trainer_distributed.py](https://github.com/huggingface/transformers/tree/main/tests/trainer/test_trainer_distributed.py)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_trainer_distributed.py](https://github.com/huggingface/transformers/tree/main/tests/trainer/test_trainer_distributed.py)'
- en: '[test_deepspeed.py](https://github.com/huggingface/transformers/tree/main/tests/deepspeed/test_deepspeed.py)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[test_deepspeed.py](https://github.com/huggingface/transformers/tree/main/tests/deepspeed/test_deepspeed.py)'
- en: To jump right into the execution point, search for the `execute_subprocess_async`
    call in those tests.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要直接跳转到执行点，请在这些测试中搜索`execute_subprocess_async`调用。
- en: 'You will need at least 2 GPUs to see these tests in action:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您至少需要2个GPU才能看到这些测试的运行情况：
- en: '[PRE48]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Output capture
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输出捕获
- en: During test execution any output sent to `stdout` and `stderr` is captured.
    If a test or a setup method fails, its according captured output will usually
    be shown along with the failure traceback.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试执行期间，发送到`stdout`和`stderr`的任何输出都将被捕获。如果测试或设置方法失败，则通常会显示其相应的捕获输出以及失败的回溯。
- en: 'To disable output capturing and to get the `stdout` and `stderr` normally,
    use `-s` or `--capture=no`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用输出捕获并正常获取`stdout`和`stderr`，请使用`-s`或`--capture=no`：
- en: '[PRE49]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'To send test results to JUnit format output:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 将测试结果发送到JUnit格式的输出：
- en: '[PRE50]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Color control
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 颜色控制
- en: 'To have no color (e.g., yellow on white background is not readable):'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要没有颜色（例如，白色背景上的黄色不可读）：
- en: '[PRE51]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Sending test report to online pastebin service
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将测试报告发送到在线粘贴服务
- en: 'Creating a URL for each test failure:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个测试失败创建一个URL：
- en: '[PRE52]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This will submit test run information to a remote Paste service and provide
    a URL for each failure. You may select tests as usual or add for example -x if
    you only want to send one particular failure.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向远程粘贴服务提交测试运行信息，并为每个失败提供一个URL。您可以像往常一样选择测试，或者例如添加`-x`，如果您只想发送一个特定的失败。
- en: 'Creating a URL for a whole test session log:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 为整个测试会话日志创建一个URL：
- en: '[PRE53]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Writing tests
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写测试
- en: 🤗 transformers tests are based on `unittest`, but run by `pytest`, so most of
    the time features from both systems can be used.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 🤗 transformers测试基于`unittest`，但由`pytest`运行，因此大多数情况下可以使用两个系统的功能。
- en: You can read [here](https://docs.pytest.org/en/stable/unittest.html) which features
    are supported, but the important thing to remember is that most `pytest` fixtures
    don’t work. Neither parametrization, but we use the module `parameterized` that
    works in a similar way.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[这里](https://docs.pytest.org/en/stable/unittest.html)阅读支持的功能，但要记住的重要事情是大多数`pytest`固定装置不起作用。也不是参数化，但我们使用模块`parameterized`以类似的方式工作。
- en: Parametrization
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数化
- en: Often, there is a need to run the same test multiple times, but with different
    arguments. It could be done from within the test, but then there is no way of
    running that test for just one set of arguments.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 经常需要多次运行相同的测试，但使用不同的参数。可以从测试内部完成，但是那样就无法仅为一个参数集运行该测试。
- en: '[PRE54]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Now, by default this test will be run 3 times, each time with the last 3 arguments
    of `test_floor` being assigned the corresponding arguments in the parameter list.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，默认情况下，此测试将运行3次，每次将`test_floor`的最后3个参数分配给参数列表中的相应参数。
- en: 'and you could run just the `negative` and `integer` sets of params with:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以仅运行`negative`和`integer`参数集：
- en: '[PRE55]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'or all but `negative` sub-tests, with:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 或除了`negative`子测试外的所有子测试，使用：
- en: '[PRE56]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Besides using the `-k` filter that was just mentioned, you can find out the
    exact name of each sub-test and run any or all of them using their exact names.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用刚提到的`-k`过滤器，您可以找出每个子测试的确切名称，并使用其确切名称运行任何或所有子测试。
- en: '[PRE57]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'and it will list:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 它将列出：
- en: '[PRE58]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'So now you can run just 2 specific sub-tests:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以仅运行2个特定的子测试：
- en: '[PRE59]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The module [parameterized](https://pypi.org/project/parameterized/) which is
    already in the developer dependencies of `transformers` works for both: `unittests`
    and `pytest` tests.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 模块[parameterized](https://pypi.org/project/parameterized/)已经是`transformers`的开发依赖项，适用于`unittests`和`pytest`测试。
- en: If, however, the test is not a `unittest`, you may use `pytest.mark.parametrize`
    (or you may see it being used in some existing tests, mostly under `examples`).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果测试不是`unittest`，则可以使用`pytest.mark.parametrize`（或者您可能会看到它在一些现有测试中使用，主要在`examples`下）。
- en: 'Here is the same example, this time using `pytest`’s `parametrize` marker:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是相同的示例，这次使用`pytest`的`parametrize`标记：
- en: '[PRE60]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Same as with `parameterized`, with `pytest.mark.parametrize` you can have a
    fine control over which sub-tests are run, if the `-k` filter doesn’t do the job.
    Except, this parametrization function creates a slightly different set of names
    for the sub-tests. Here is what they look like:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 与`parameterized`一样，使用`pytest.mark.parametrize`可以对要运行的子测试进行精细控制，如果`-k`过滤器无法完成任务。除此之外，此参数化函数为子测试创建了一组略有不同的名称。以下是它们的样子：
- en: '[PRE61]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'and it will list:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 它将列出：
- en: '[PRE62]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'So now you can run just the specific test:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以仅运行特定的测试：
- en: '[PRE63]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: as in the previous example.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的示例相同。
- en: Files and directories
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件和目录
- en: 'In tests often we need to know where things are relative to the current test
    file, and it’s not trivial since the test could be invoked from more than one
    directory or could reside in sub-directories with different depths. A helper class
    `transformers.test_utils.TestCasePlus` solves this problem by sorting out all
    the basic paths and provides easy accessors to them:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中，我们经常需要知道事物相对于当前测试文件的位置，这并不是微不足道的，因为测试可能会从多个目录调用，或者可能位于具有不同深度的子目录中。一个辅助类`transformers.test_utils.TestCasePlus`通过整理所有基本路径并提供易于访问的访问器来解决这个问题：
- en: '`pathlib` objects (all fully resolved):'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pathlib`对象（全部完全解析）：'
- en: '`test_file_path` - the current test file path, i.e. `__file__`'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_file_path` - 当前测试文件路径，即`__file__`'
- en: '`test_file_dir` - the directory containing the current test file'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_file_dir` - 包含当前测试文件的目录'
- en: '`tests_dir` - the directory of the `tests` test suite'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests_dir` - `tests`测试套件的目录'
- en: '`examples_dir` - the directory of the `examples` test suite'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`examples_dir` - `examples`测试套件的目录'
- en: '`repo_root_dir` - the directory of the repository'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repo_root_dir` - 仓库的目录'
- en: '`src_dir` - the directory of `src` (i.e. where the `transformers` sub-dir resides)'
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src_dir` - `src`的目录（即`transformers`子目录所在的地方）'
- en: 'stringified paths---same as above but these return paths as strings, rather
    than `pathlib` objects:'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串化路径---与上述相同，但这些返回路径作为字符串，而不是`pathlib`对象：
- en: '`test_file_path_str`'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_file_path_str`'
- en: '`test_file_dir_str`'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test_file_dir_str`'
- en: '`tests_dir_str`'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests_dir_str`'
- en: '`examples_dir_str`'
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`examples_dir_str`'
- en: '`repo_root_dir_str`'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repo_root_dir_str`'
- en: '`src_dir_str`'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src_dir_str`'
- en: 'To start using those all you need is to make sure that the test resides in
    a subclass of `transformers.test_utils.TestCasePlus`. For example:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用这些，您只需要确保测试位于`transformers.test_utils.TestCasePlus`的子类中。例如：
- en: '[PRE64]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'If you don’t need to manipulate paths via `pathlib` or you just need a path
    as a string, you can always invoked `str()` on the `pathlib` object or use the
    accessors ending with `_str`. For example:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不需要通过`pathlib`操纵路径，或者只需要路径作为字符串，您可以始终在`pathlib`对象上调用`str()`或使用以`_str`结尾的访问器。例如：
- en: '[PRE65]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Temporary files and directories
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 临时文件和目录
- en: Using unique temporary files and directories are essential for parallel test
    running, so that the tests won’t overwrite each other’s data. Also we want to
    get the temporary files and directories removed at the end of each test that created
    them. Therefore, using packages like `tempfile`, which address these needs is
    essential.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 使用唯一的临时文件和目录对于并行测试运行至关重要，以便测试不会覆盖彼此的数据。此外，我们希望在每个创建它们的测试结束时删除临时文件和目录。因此，使用像`tempfile`这样满足这些需求的软件包是至关重要的。
- en: However, when debugging tests, you need to be able to see what goes into the
    temporary file or directory and you want to know it’s exact path and not having
    it randomized on every test re-run.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在调试测试时，您需要能够看到临时文件或目录中的内容，并且希望知道其确切路径，而不是在每次测试重新运行时随机化。
- en: A helper class `transformers.test_utils.TestCasePlus` is best used for such
    purposes. It’s a sub-class of `unittest.TestCase`, so we can easily inherit from
    it in the test modules.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助类`transformers.test_utils.TestCasePlus`最适合用于这些目的。它是`unittest.TestCase`的子类，因此我们可以在测试模块中轻松继承它。
- en: 'Here is an example of its usage:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其用法示例：
- en: '[PRE66]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This code creates a unique temporary directory, and sets `tmp_dir` to its location.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码创建一个唯一的临时目录，并将`tmp_dir`设置为其位置。
- en: 'Create a unique temporary dir:'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个唯一的临时目录：
- en: '[PRE67]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '`tmp_dir` will contain the path to the created temporary dir. It will be automatically
    removed at the end of the test.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`tmp_dir`将包含创建的临时目录的路径。它将在测试结束时自动删除。'
- en: Create a temporary dir of my choice, ensure it’s empty before the test starts
    and don’t empty it after the test.
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我选择的临时目录，在测试开始之前确保它为空，并在测试结束后不清空它。
- en: '[PRE68]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This is useful for debug when you want to monitor a specific directory and want
    to make sure the previous tests didn’t leave any data in there.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要监视特定目录并确保之前的测试没有在其中留下任何数据时，这很有用。
- en: 'You can override the default behavior by directly overriding the `before` and
    `after` args, leading to one of the following behaviors:'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`before=True`: the temporary dir will always be cleared at the beginning of
    the test.'
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`before=False`: if the temporary dir already existed, any existing files will
    remain there.'
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`after=True`: the temporary dir will always be deleted at the end of the test.'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`after=False`: the temporary dir will always be left intact at the end of the
    test.'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to run the equivalent of `rm -r` safely, only subdirs of the project
    repository checkout are allowed if an explicit `tmp_dir` is used, so that by mistake
    no `/tmp` or similar important part of the filesystem will get nuked. i.e. please
    always pass paths that start with `./`.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Each test can register multiple temporary directories and they all will get
    auto-removed, unless requested otherwise.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: Temporary sys.path override
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you need to temporary override `sys.path` to import from another test for
    example, you can use the `ExtendSysPath` context manager. Example:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Skipping tests
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is useful when a bug is found and a new test is written, yet the bug is
    not fixed yet. In order to be able to commit it to the main repository we need
    make sure it’s skipped during `make test`.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: A **skip** means that you expect your test to pass only if some conditions are
    met, otherwise pytest should skip running the test altogether. Common examples
    are skipping windows-only tests on non-windows platforms, or skipping tests that
    depend on an external resource which is not available at the moment (for example
    a database).
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **xfail** means that you expect a test to fail for some reason. A common example
    is a test for a feature not yet implemented, or a bug not yet fixed. When a test
    passes despite being expected to fail (marked with pytest.mark.xfail), it’s an
    xpass and will be reported in the test summary.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the important differences between the two is that `skip` doesn’t run
    the test, and `xfail` does. So if the code that’s buggy causes some bad state
    that will affect other tests, do not use `xfail`.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  id: totrans-284
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is how to skip whole test unconditionally:'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'or via pytest:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'or the `xfail` way:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Here’s how to skip a test based on internal checks within the test:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'or the whole module:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'or the `xfail` way:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Here is how to skip all tests in a module if some import is missing:'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Skip a test based on a condition:'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'or:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'or skip the whole module:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: More details, example and ways are [here](https://docs.pytest.org/en/latest/skipping.html).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: Slow tests
  id: totrans-306
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The library of tests is ever-growing, and some of the tests take minutes to
    run, therefore we can’t afford waiting for an hour for the test suite to complete
    on CI. Therefore, with some exceptions for essential tests, slow tests should
    be marked as in the example below:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Once a test is marked as `@slow`, to run such tests set `RUN_SLOW=1` env var,
    e.g.:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Some decorators like `@parameterized` rewrite test names, therefore `@slow`
    and the rest of the skip decorators `@require_*` have to be listed last for them
    to work correctly. Here is an example of the correct usage:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: As explained at the beginning of this document, slow tests get to run on a scheduled
    basis, rather than in PRs CI checks. So it’s possible that some problems will
    be missed during a PR submission and get merged. Such problems will get caught
    during the next scheduled CI job. But it also means that it’s important to run
    the slow tests on your machine before submitting the PR.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a rough decision making mechanism for choosing which tests should be
    marked as slow:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 'If the test is focused on one of the library’s internal components (e.g., modeling
    files, tokenization files, pipelines), then we should run that test in the non-slow
    test suite. If it’s focused on an other aspect of the library, such as the documentation
    or the examples, then we should run these tests in the slow test suite. And then,
    to refine this approach we should have exceptions:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: All tests that need to download a heavy set of weights or a dataset that is
    larger than ~50MB (e.g., model or tokenizer integration tests, pipeline integration
    tests) should be set to slow. If you’re adding a new model, you should create
    and upload to the hub a tiny version of it (with random weights) for integration
    tests. This is discussed in the following paragraphs.
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All tests that need to do a training not specifically optimized to be fast should
    be set to slow.
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can introduce exceptions if some of these should-be-non-slow tests are excruciatingly
    slow, and set them to `@slow`. Auto-modeling tests, which save and load large
    files to disk, are a good example of tests that are marked as `@slow`.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a test completes under 1 second on CI (including downloads if any) then it
    should be a normal test regardless.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Collectively, all the non-slow tests need to cover entirely the different internals,
    while remaining fast. For example, a significant coverage can be achieved by testing
    with specially created tiny models with random weights. Such models have the very
    minimal number of layers (e.g., 2), vocab size (e.g., 1000), etc. Then the `@slow`
    tests can use large slow models to do qualitative testing. To see the use of these
    simply look for *tiny* models with:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Here is a an example of a [script](https://github.com/huggingface/transformers/tree/main/scripts/fsmt/fsmt-make-tiny-model.py)
    that created the tiny model [stas/tiny-wmt19-en-de](https://huggingface.co/stas/tiny-wmt19-en-de).
    You can easily adjust it to your specific model’s architecture.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: It’s easy to measure the run-time incorrectly if for example there is an overheard
    of downloading a huge model, but if you test it locally the downloaded files would
    be cached and thus the download time not measured. Hence check the execution speed
    report in CI logs instead (the output of `pytest --durations=0 tests`).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: That report is also useful to find slow outliers that aren’t marked as such,
    or which need to be re-written to be fast. If you notice that the test suite starts
    getting slow on CI, the top listing of this report will show the slowest tests.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: Testing the stdout/stderr output
  id: totrans-325
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to test functions that write to `stdout` and/or `stderr`, the test
    can access those streams using the `pytest`’s [capsys system](https://docs.pytest.org/en/latest/capture.html).
    Here is how this is accomplished:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'And, of course, most of the time, `stderr` will come as a part of an exception,
    so try/except has to be used in such a case:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Another approach to capturing stdout is via `contextlib.redirect_stdout`:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: An important potential issue with capturing stdout is that it may contain `\r`
    characters that in normal `print` reset everything that has been printed so far.
    There is no problem with `pytest`, but with `pytest -s` these characters get included
    in the buffer, so to be able to have the test run with and without `-s`, you have
    to make an extra cleanup to the captured output, using `re.sub(r'~.*\r', '', buf,
    0, re.M)`.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: 'But, then we have a helper context manager wrapper to automatically take care
    of it all, regardless of whether it has some `\r`’s in it or not, so it’s a simple:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Here is a full test example:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'If you’d like to capture `stderr` use the `CaptureStderr` class instead:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'If you need to capture both streams at once, use the parent `CaptureStd` class:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Also, to aid debugging test issues, by default these context managers automatically
    replay the captured streams on exit from the context.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: Capturing logger stream
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you need to validate the output of a logger, you can use `CaptureLogger`:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Testing with environment variables
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to test the impact of environment variables for a specific test
    you can use a helper decorator `transformers.testing_utils.mockenv`
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'At times an external program needs to be called, which requires setting `PYTHONPATH`
    in `os.environ` to include multiple local paths. A helper class `transformers.test_utils.TestCasePlus`
    comes to help:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Depending on whether the test file was under the `tests` test suite or `examples`
    it’ll correctly set up `env[PYTHONPATH]` to include one of these two directories,
    and also the `src` directory to ensure the testing is done against the current
    repo, and finally with whatever `env[PYTHONPATH]` was already set to before the
    test was called if anything.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 根据测试文件是在`tests`测试套件还是`examples`下，它将正确设置`env[PYTHONPATH]`以包括这两个目录之一，并且还将`src`目录设置为确保针对当前存储库进行测试，最后还将设置`env[PYTHONPATH]`在调用测试之前已经设置的任何内容。
- en: This helper method creates a copy of the `os.environ` object, so the original
    remains intact.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 这个辅助方法创建了`os.environ`对象的副本，因此原始对象保持不变。
- en: Getting reproducible results
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获得可重现的结果
- en: 'In some situations you may want to remove randomness for your tests. To get
    identical reproducible results set, you will need to fix the seed:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能希望为测试去除随机性。要获得相同的可重现结果集，您需要修复种子：
- en: '[PRE94]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Debugging tests
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试测试
- en: 'To start a debugger at the point of the warning, do this:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 要在警告点启动调试器，请执行以下操作：
- en: '[PRE95]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: Working with github actions workflows
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用github actions工作流
- en: 'To trigger a self-push workflow CI job, you must:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 要触发自动推送工作流CI作业，必须：
- en: Create a new branch on `transformers` origin (not a fork!).
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`transformers`源上创建一个新分支（不是分叉！）。
- en: The branch name has to start with either `ci_` or `ci-` (`main` triggers it
    too, but we can’t do PRs on `main`). It also gets triggered only for specific
    paths - you can find the up-to-date definition in case it changed since this document
    has been written [here](https://github.com/huggingface/transformers/blob/main/.github/workflows/self-push.yml)
    under *push:*
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分支名称必须以`ci_`或`ci-`开头（`main`也会触发它，但我们不能在`main`上创建PR）。它还仅针对特定路径触发 - 如果自从编写本文以来发生了更改，您可以在[此处](https://github.com/huggingface/transformers/blob/main/.github/workflows/self-push.yml)找到最新的定义，位于*push:*下。
- en: Create a PR from this branch.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从此分支创建一个PR。
- en: Then you can see the job appear [here](https://github.com/huggingface/transformers/actions/workflows/self-push.yml).
    It may not run right away if there is a backlog.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后您可以在[这里](https://github.com/huggingface/transformers/actions/workflows/self-push.yml)看到该作业。如果有积压，它可能不会立即运行。
- en: Testing Experimental CI Features
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试实验性CI功能
- en: Testing CI features can be potentially problematic as it can interfere with
    the normal CI functioning. Therefore if a new CI feature is to be added, it should
    be done as following.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 测试CI功能可能会有潜在问题，因为它可能会干扰正常的CI功能。因此，如果要添加新的CI功能，应按以下步骤进行。
- en: Create a new dedicated job that tests what needs to be tested
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的专用作业，测试需要测试的内容
- en: The new job must always succeed so that it gives us a green ✓ (details below).
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新作业必须始终成功，以便为我们提供绿色的 ✓（下面有详细信息）。
- en: Let it run for some days to see that a variety of different PR types get to
    run on it (user fork branches, non-forked branches, branches originating from
    github.com UI direct file edit, various forced pushes, etc. - there are so many)
    while monitoring the experimental job’s logs (not the overall job green as it’s
    purposefully always green)
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让它运行几天，看看各种不同类型的PR是否可以运行在上面（用户分支，非分叉分支，源自github.com UI直接文件编辑的分支，各种强制推送等等 - 有很多），同时监视实验性作业的日志（而不是整体作业绿色，因为它故意总是绿色）
- en: When it’s clear that everything is solid, then merge the new changes into existing
    jobs.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一切都很稳定时，然后将新更改合并到现有作业中。
- en: That way experiments on CI functionality itself won’t interfere with the normal
    workflow.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，对CI功能本身的实验就不会干扰正常的工作流程。
- en: Now how can we make the job always succeed while the new CI feature is being
    developed?
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们如何确保工作始终成功，同时新的CI功能正在开发中？
- en: Some CIs, like TravisCI support ignore-step-failure and will report the overall
    job as successful, but CircleCI and Github Actions as of this writing don’t support
    that.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 一些CI，如TravisCI支持ignore-step-failure，并将整体作业报告为成功，但截至目前，CircleCI和Github Actions不支持该功能。
- en: 'So the following workaround can be used:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可以使用以下解决方法：
- en: '`set +euo pipefail` at the beginning of the run command to suppress most potential
    failures in the bash script.'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行命令的开头使用`set +euo pipefail`来抑制bash脚本中的大多数潜在故障。
- en: 'the last command must be a success: `echo "done"` or just `true` will do'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个命令必须成功：`echo "done"`或只需`true`即可
- en: 'Here is an example:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子：
- en: '[PRE96]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'For simple commands you could also do:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的命令，您也可以这样做：
- en: '[PRE97]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Of course, once satisfied with the results, integrate the experimental step
    or job with the rest of the normal jobs, while removing `set +euo pipefail` or
    any other things you may have added to ensure that the experimental job doesn’t
    interfere with the normal CI functioning.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 当结果令人满意时，将实验步骤或作业与其余正常作业集成在一起，同时删除`set +euo pipefail`或您可能添加的任何其他内容，以确保实验性作业不会干扰正常的CI功能。
- en: This whole process would have been much easier if we only could set something
    like `allow-failure` for the experimental step, and let it fail without impacting
    the overall status of PRs. But as mentioned earlier CircleCI and Github Actions
    don’t support it at the moment.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只能为实验步骤设置类似于`allow-failure`的内容，并且让它失败而不影响PR的整体状态，那么整个过程将变得更加容易。但正如前面提到的，CircleCI和Github
    Actions目前不支持这一点。
- en: 'You can vote for this feature and see where it is at these CI-specific threads:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为此功能投票，并查看CI特定线程的进展：
- en: '[Github Actions:](https://github.com/actions/toolkit/issues/399)'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Github Actions：](https://github.com/actions/toolkit/issues/399)'
- en: '[CircleCI:](https://ideas.circleci.com/ideas/CCI-I-344)'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CircleCI：](https://ideas.circleci.com/ideas/CCI-I-344)'
