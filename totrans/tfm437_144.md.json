["```py\n>>> from transformers import BloomConfig, BloomModel\n\n>>> # Initializing a Bloom configuration\n>>> configuration = BloomConfig()\n\n>>> # Initializing a model (with random weights) from the configuration\n>>> model = BloomModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import BloomTokenizerFast\n\n>>> tokenizer = BloomTokenizerFast.from_pretrained(\"bigscience/bloom\")\n>>> tokenizer(\"Hello world\")[\"input_ids\"]\n[59414, 8876]\n\n>>> tokenizer(\" Hello world\")[\"input_ids\"]\n[86153, 8876]\n```", "```py\n>>> from transformers import AutoTokenizer, BloomModel\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"bigscience/bloom-560m\")\n>>> model = BloomModel.from_pretrained(\"bigscience/bloom-560m\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, BloomForCausalLM\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"bigscience/bloom-560m\")\n>>> model = BloomForCausalLM.from_pretrained(\"bigscience/bloom-560m\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs, labels=inputs[\"input_ids\"])\n>>> loss = outputs.loss\n>>> logits = outputs.logits\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, BloomForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"bigscience/bloom-560m\")\n>>> model = BloomForSequenceClassification.from_pretrained(\"bigscience/bloom-560m\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_id = logits.argmax().item()\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = BloomForSequenceClassification.from_pretrained(\"bigscience/bloom-560m\", num_labels=num_labels)\n\n>>> labels = torch.tensor([1])\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, BloomForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"bigscience/bloom-560m\")\n>>> model = BloomForSequenceClassification.from_pretrained(\"bigscience/bloom-560m\", problem_type=\"multi_label_classification\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_ids = torch.arange(0, logits.shape[-1])[torch.sigmoid(logits).squeeze(dim=0) > 0.5]\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = BloomForSequenceClassification.from_pretrained(\n...     \"bigscience/bloom-560m\", num_labels=num_labels, problem_type=\"multi_label_classification\"\n... )\n\n>>> labels = torch.sum(\n...     torch.nn.functional.one_hot(predicted_class_ids[None, :].clone(), num_classes=num_labels), dim=1\n... ).to(torch.float)\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, BloomForTokenClassification\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"bigscience/bloom-560m\")\n>>> model = BloomForTokenClassification.from_pretrained(\"bigscience/bloom-560m\")\n\n>>> inputs = tokenizer(\n...     \"HuggingFace is a company based in Paris and New York\", add_special_tokens=False, return_tensors=\"pt\"\n... )\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_token_class_ids = logits.argmax(-1)\n\n>>> # Note that tokens are classified rather then input words which means that\n>>> # there might be more predicted token classes than words.\n>>> # Multiple token classes might account for the same word\n>>> predicted_tokens_classes = [model.config.id2label[t.item()] for t in predicted_token_class_ids[0]]\n\n>>> labels = predicted_token_class_ids\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxBloomModel\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"bigscience/bloom\")\n>>> model = FlaxBloomModel.from_pretrained(\"bigscience/bloom\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"jax\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxBloomForCausalLM\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"bigscience/bloom\")\n>>> model = FlaxBloomForCausalLM.from_pretrained(\"bigscience/bloom\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"np\")\n>>> outputs = model(**inputs)\n\n>>> # retrieve logts for next token\n>>> next_token_logits = outputs.logits[:, -1]\n```"]