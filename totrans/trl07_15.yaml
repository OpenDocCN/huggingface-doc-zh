- en: 'Best of N sampling: Alternative ways to get better model output without RL
    based fine-tuning'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: N最佳抽样：在没有基于RL的微调的情况下获得更好的模型输出的替代方法
- en: 'Original text: [https://huggingface.co/docs/trl/best_of_n](https://huggingface.co/docs/trl/best_of_n)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://huggingface.co/docs/trl/best_of_n](https://huggingface.co/docs/trl/best_of_n)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Within the extras module is the `best-of-n` sampler class that serves as an
    alternative method of generating better model output. As to how it fares against
    the RL based fine-tuning, please look in the `examples` directory for a comparison
    example
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在extras模块中是`best-of-n`采样器类，它作为生成更好模型输出的替代方法。关于它与基于RL的微调的效果如何，请查看`examples`目录中的比较示例
- en: Usage
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用法
- en: To get started quickly, instantiate an instance of the class with a model, a
    length sampler, a tokenizer and a callable that serves as a proxy reward pipeline
    that outputs reward scores for input queries
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速开始，请实例化一个类的实例，其中包括一个模型、一个长度采样器、一个标记器和一个作为代理奖励管道的可调用函数，用于为输入查询输出奖励分数
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And assuming you have a list/tensor of tokenized queries, you can generate better
    output by calling the `generate` method
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个经过标记的查询列表/张量，您可以通过调用`generate`方法生成更好的输出
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The default sample size is 4, but you can change it at the time of instance
    initialization like so
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 默认样本大小为4，但您可以在实例初始化时进行更改
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The default output is the result of taking the top scored output for each query,
    but you can change it to top 2 and so on by passing the `n_candidates` argument
    at the time of instance initialization
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 默认输出是对每个查询取得最高分数的结果，但您可以通过在实例初始化时传递`n_candidates`参数来将其更改为前2个等等
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There is the option of setting the generation settings (like `temperature`,
    `pad_token_id`) at the time of instance creation as opposed to when calling the
    `generate` method. This is done by passing a `GenerationConfig` from the `transformers`
    library at the time of initialization
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例创建时设置生成设置（如`temperature`，`pad_token_id`）的选项，而不是在调用`generate`方法时设置。这是通过在初始化时传递来自`transformers`库的`GenerationConfig`来完成的
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Furthermore, at the time of initialization you can set the seed to control repeatability
    of the generation process and the number of samples to generate for each query
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在初始化时，您可以设置种子以控制生成过程的可重复性以及为每个查询生成的样本数量
