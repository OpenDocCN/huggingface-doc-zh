["```py\ndef training_function():\n    # Initialize accelerator\n    accelerator = Accelerator()\n    model = AutoModelForSequenceClassification.from_pretrained(\"bert-base-cased\", num_labels=2)\n    train_dataloader, eval_dataloader = create_dataloaders(\n        train_batch_size=hyperparameters[\"train_batch_size\"], eval_batch_size=hyperparameters[\"eval_batch_size\"]\n    )\n\n    # Instantiate optimizer\n    optimizer = AdamW(params=model.parameters(), lr=hyperparameters[\"learning_rate\"])\n\n    # Prepare everything\n    # There is no specific order to remember, we just need to unpack the objects in the same order we gave them to the\n    # prepare method.\n    model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(\n        model, optimizer, train_dataloader, eval_dataloader\n    )\n\n    num_epochs = hyperparameters[\"num_epochs\"]\n    # Now we train the model\n    for epoch in range(num_epochs):\n        model.train()\n        for step, batch in enumerate(train_dataloader):\n            outputs = model(**batch)\n            loss = outputs.loss\n            accelerator.backward(loss)\n\n            optimizer.step()\n            optimizer.zero_grad()\n```", "```py\nfrom accelerate import notebook_launcher\n\nnotebook_launcher(training_function)\n```", "```py\nProcessExitedException: process 0 terminated with signal SIGSEGV\n```", "```py\n# In another Jupyter cell\nmodel = AutoModelForSequenceClassification.from_pretrained(\"bert-base-cased\", num_labels=2)\n```", "```py\n+ def training_function(model):\n      # Initialize accelerator\n      accelerator = Accelerator()\n-     model = AutoModelForSequenceClassification.from_pretrained(\"bert-base-cased\", num_labels=2)\n      train_dataloader, eval_dataloader = create_dataloaders(\n          train_batch_size=hyperparameters[\"train_batch_size\"], eval_batch_size=hyperparameters[\"eval_batch_size\"]\n      )\n  ...\n```", "```py\n  from accelerate import notebook_launcher\n- notebook_launcher(training_function)\n+ notebook_launcher(training_function, (model,))\n```", "```py\naccelerator = Accelerator(mixed_precision=\"bf16\")\n```", "```py\naccelerator = Accelerator(mixed_precision=\"bf16\", downcast_bf16=True)\n```"]