["```py\nfrom starlette.applications import Starlette\nfrom starlette.responses import JSONResponse\nfrom starlette.routing import Route\nfrom transformers import pipeline\nimport asyncio\n\nasync def homepage(request):\n    payload = await request.body()\n    string = payload.decode(\"utf-8\")\n    response_q = asyncio.Queue()\n    await request.app.model_queue.put((string, response_q))\n    output = await response_q.get()\n    return JSONResponse(output)\n\nasync def server_loop(q):\n    pipe = pipeline(model=\"bert-base-uncased\")\n    while True:\n        (string, response_q) = await q.get()\n        out = pipe(string)\n        await response_q.put(out)\n\napp = Starlette(\n    routes=[\n        Route(\"/\", homepage, methods=[\"POST\"]),\n    ],\n)\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    q = asyncio.Queue()\n    app.model_queue = q\n    asyncio.create_task(server_loop(q))\n```", "```py\nuvicorn server:app\n```", "```py\ncurl -X POST -d \"test [MASK]\" http://localhost:8000/\n#[{\"score\":0.7742936015129089,\"token\":1012,\"token_str\":\".\",\"sequence\":\"test.\"},...]\n```", "```py\n(string, rq) = await q.get()\nstrings = []\nqueues = []\nwhile True:\n    try:\n        (string, rq) = await asyncio.wait_for(q.get(), timeout=0.001)  # 1ms\n    except asyncio.exceptions.TimeoutError:\n        break\n    strings.append(string)\n    queues.append(rq)\nstrings\nouts = pipe(strings, batch_size=len(strings))\nfor rq, out in zip(queues, outs):\n    await rq.put(out)\n```"]