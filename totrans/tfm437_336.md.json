["```py\n>>> from transformers import BridgeTowerProcessor, BridgeTowerForContrastiveLearning\n>>> import requests\n>>> from PIL import Image\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n>>> texts = [\"An image of two cats chilling on a couch\", \"A football player scoring a goal\"]\n\n>>> processor = BridgeTowerProcessor.from_pretrained(\"BridgeTower/bridgetower-large-itm-mlm-itc\")\n>>> model = BridgeTowerForContrastiveLearning.from_pretrained(\"BridgeTower/bridgetower-large-itm-mlm-itc\")\n\n>>> # forward pass\n>>> scores = dict()\n>>> for text in texts:\n...     # prepare inputs\n...     encoding = processor(image, text, return_tensors=\"pt\")\n...     outputs = model(**encoding)\n...     scores[text] = outputs\n```", "```py\n>>> from transformers import BridgeTowerProcessor, BridgeTowerForImageAndTextRetrieval\n>>> import requests\n>>> from PIL import Image\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n>>> texts = [\"An image of two cats chilling on a couch\", \"A football player scoring a goal\"]\n\n>>> processor = BridgeTowerProcessor.from_pretrained(\"BridgeTower/bridgetower-base-itm-mlm\")\n>>> model = BridgeTowerForImageAndTextRetrieval.from_pretrained(\"BridgeTower/bridgetower-base-itm-mlm\")\n\n>>> # forward pass\n>>> scores = dict()\n>>> for text in texts:\n...     # prepare inputs\n...     encoding = processor(image, text, return_tensors=\"pt\")\n...     outputs = model(**encoding)\n...     scores[text] = outputs.logits[0, 1].item()\n```", "```py\n>>> from transformers import BridgeTowerProcessor, BridgeTowerForMaskedLM\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000360943.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw).convert(\"RGB\")\n>>> text = \"a <mask> looking out of the window\"\n\n>>> processor = BridgeTowerProcessor.from_pretrained(\"BridgeTower/bridgetower-base-itm-mlm\")\n>>> model = BridgeTowerForMaskedLM.from_pretrained(\"BridgeTower/bridgetower-base-itm-mlm\")\n\n>>> # prepare inputs\n>>> encoding = processor(image, text, return_tensors=\"pt\")\n\n>>> # forward pass\n>>> outputs = model(**encoding)\n\n>>> results = processor.decode(outputs.logits.argmax(dim=-1).squeeze(0).tolist())\n\n>>> print(results)\n.a cat looking out of the window.\n```", "```py\n>>> from transformers import BridgeTowerModel, BridgeTowerConfig\n\n>>> # Initializing a BridgeTower BridgeTower/bridgetower-base style configuration\n>>> configuration = BridgeTowerConfig()\n\n>>> # Initializing a model from the BridgeTower/bridgetower-base style configuration\n>>> model = BridgeTowerModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import BridgeTowerTextConfig\n\n>>> # Initializing a BridgeTower BridgeTower/bridgetower-base style configuration for the text model\n>>> configuration = BridgeTowerTextConfig()\n\n>>> # Accessing the configuration\n>>> configuration\n```", "```py\n>>> from transformers import BridgeTowerVisionConfig\n\n>>> # Initializing a BridgeTower BridgeTower/bridgetower-base style configuration for the vision model\n>>> configuration = BridgeTowerVisionConfig()\n\n>>> # Accessing the configuration\n>>> configuration\n```", "```py\n>>> from transformers import BridgeTowerProcessor, BridgeTowerModel\n>>> from PIL import Image\n>>> import requests\n\n>>> # prepare image and text\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n>>> text = \"hello world\"\n>>> processor = BridgeTowerProcessor.from_pretrained(\"BridgeTower/bridgetower-base\")\n>>> model = BridgeTowerModel.from_pretrained(\"BridgeTower/bridgetower-base\")\n\n>>> inputs = processor(image, text, return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n>>> outputs.keys()\nodict_keys(['text_features', 'image_features', 'pooler_output'])\n```", "```py\n>>> from transformers import BridgeTowerProcessor, BridgeTowerForContrastiveLearning\n>>> import requests\n>>> from PIL import Image\n>>> import torch\n\n>>> image_urls = [\n...     \"https://farm4.staticflickr.com/3395/3428278415_81c3e27f15_z.jpg\",\n...     \"http://images.cocodataset.org/val2017/000000039769.jpg\",\n... ]\n>>> texts = [\"two dogs in a car\", \"two cats sleeping on a couch\"]\n>>> images = [Image.open(requests.get(url, stream=True).raw) for url in image_urls]\n\n>>> processor = BridgeTowerProcessor.from_pretrained(\"BridgeTower/bridgetower-large-itm-mlm-itc\")\n>>> model = BridgeTowerForContrastiveLearning.from_pretrained(\"BridgeTower/bridgetower-large-itm-mlm-itc\")\n\n>>> inputs = processor(images, texts, padding=True, return_tensors=\"pt\")\n>>> loss = model(**inputs, return_loss=True).loss\n\n>>> inputs = processor(images, texts[::-1], padding=True, return_tensors=\"pt\")\n>>> loss_swapped = model(**inputs, return_loss=True).loss\n\n>>> print(\"Loss\", round(loss.item(), 4))\nLoss 0.0019\n\n>>> print(\"Loss with swapped images\", round(loss_swapped.item(), 4))\nLoss with swapped images 2.126\n```", "```py\n>>> from transformers import BridgeTowerProcessor, BridgeTowerForMaskedLM\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000360943.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw).convert(\"RGB\")\n>>> text = \"a <mask> looking out of the window\"\n\n>>> processor = BridgeTowerProcessor.from_pretrained(\"BridgeTower/bridgetower-base-itm-mlm\")\n>>> model = BridgeTowerForMaskedLM.from_pretrained(\"BridgeTower/bridgetower-base-itm-mlm\")\n\n>>> # prepare inputs\n>>> encoding = processor(image, text, return_tensors=\"pt\")\n\n>>> # forward pass\n>>> outputs = model(**encoding)\n\n>>> results = processor.decode(outputs.logits.argmax(dim=-1).squeeze(0).tolist())\n\n>>> print(results)\n.a cat looking out of the window.\n```", "```py\n>>> from transformers import BridgeTowerProcessor, BridgeTowerForImageAndTextRetrieval\n>>> import requests\n>>> from PIL import Image\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n>>> texts = [\"An image of two cats chilling on a couch\", \"A football player scoring a goal\"]\n\n>>> processor = BridgeTowerProcessor.from_pretrained(\"BridgeTower/bridgetower-base-itm-mlm\")\n>>> model = BridgeTowerForImageAndTextRetrieval.from_pretrained(\"BridgeTower/bridgetower-base-itm-mlm\")\n\n>>> # forward pass\n>>> scores = dict()\n>>> for text in texts:\n...     # prepare inputs\n...     encoding = processor(image, text, return_tensors=\"pt\")\n...     outputs = model(**encoding)\n...     scores[text] = outputs.logits[0, 1].item()\n```"]