- en: Webhooks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Webhooks
- en: 'Original text: [https://huggingface.co/docs/hub/webhooks](https://huggingface.co/docs/hub/webhooks)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/hub/webhooks](https://huggingface.co/docs/hub/webhooks)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Webhooks are now publicly available!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Webhooks 现在已经公开可用！
- en: Webhooks are a foundation for MLOps-related features. They allow you to listen
    for new changes on specific repos or to all repos belonging to particular set
    of users/organizations (not just your repos, but any repo).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Webhooks 是与 MLOps 相关功能的基础。它们允许您监听特定仓库或属于特定用户/组织的所有仓库的新更改（不仅仅是您的仓库，而是任何仓库）。
- en: You can use them to auto-convert models, build community bots, or build CI/CD
    for your models, datasets, and Spaces (and much more!).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用它们自动转换模型、构建社区机器人，或为您的模型、数据集和 Space 构建 CI/CD（以及更多！）。
- en: 'The documentation for Webhooks is below – or you can also browse our **guides**
    showcasing a few possible use cases of Webhooks:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Webhooks 的文档如下 - 或者您也可以浏览我们的 **指南**，展示了 Webhooks 的一些可能用例：
- en: '[Fine-tune a new model whenever a dataset gets updated (Python)](./webhooks-guide-auto-retrain)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每当数据集更新时微调新模型（Python）](./webhooks-guide-auto-retrain)'
- en: '[Create a discussion bot on the Hub, using a LLM API (NodeJS)](./webhooks-guide-discussion-bot)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Hub 上使用 LLM API（NodeJS）创建讨论机器人](./webhooks-guide-discussion-bot)'
- en: '[Create metadata quality reports (Python)](./webhooks-guide-metadata-review)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建元数据质量报告（Python）](./webhooks-guide-metadata-review)'
- en: and more to come…
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多内容即将推出...
- en: Create your Webhook
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建您的 Webhook
- en: 'You can create new Webhooks and edit existing ones in your Webhooks [settings](https://huggingface.co/settings/webhooks):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在您的 Webhooks [设置](https://huggingface.co/settings/webhooks) 中创建新的 Webhooks
    并编辑现有的 Webhooks：
- en: '![Settings of an individual webhook](../Images/af3acc42f93a2feab8c5e348191439ad.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![单个 Webhook 的设置](../Images/af3acc42f93a2feab8c5e348191439ad.png)'
- en: Webhooks can watch for repos updates, Pull Requests, discussions, and new comments.
    It’s even possible to create a Space to react to your Webhooks!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Webhooks 可以监视仓库更新、拉取请求、讨论和新评论。甚至可以创建一个 Space 来响应您的 Webhooks！
- en: Webhook Payloads
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Webhook 有效载荷
- en: After registering a Webhook, you will be notified of new events via an `HTTP
    POST` call on the specified target URL. The payload is encoded in JSON.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注册 Webhook 后，您将通过指定目标 URL 的 `HTTP POST` 调用收到新事件的通知。有效载荷以 JSON 编码。
- en: 'You can view the history of payloads sent in the activity tab of the webhook
    settings page, it’s also possible to replay past webhooks for easier debugging:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Webhook 设置页面的活动选项卡中查看发送的有效载荷历史记录，也可以重播过去的 Webhooks 以便更轻松地进行调试：
- en: '![image.png](../Images/98e757933f19477796ddf8aa93e44e75.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![image.png](../Images/98e757933f19477796ddf8aa93e44e75.png)'
- en: 'As an example, here is the full payload when a Pull Request is opened:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开拉取请求时，以下是完整的有效载荷：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Event
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事件
- en: The top-level properties `event` is always specified and used to determine the
    nature of the event.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 顶级属性 `event` 总是指定并用于确定事件的性质。
- en: 'It has two sub-properties: `event.action` and `event.scope`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它有两个子属性：`event.action` 和 `event.scope`。
- en: '`event.scope` will be one of the following values:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`event.scope` 将是以下值之一：'
- en: '`"repo"` - Global events on repos. Possible values for the associated `action`:
    `"create"`, `"delete"`, `"update"`, `"move"`.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"repo"` - 仓库上的全局事件。相关 `action` 的可能值：`"create"`、`"delete"`、`"update"`、`"move"`。'
- en: '`"repo.content"` - Events on the repo’s content, such as new commits or tags.
    It triggers on new Pull Requests as well due to the newly created reference/commit.
    The associated `action` is always `"update"`.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"repo.content"` - 仓库内容上的事件，例如新提交或标签。由于新创建的引用/提交，它也会触发新的拉取请求。相关 `action` 总是
    `"update"`。'
- en: '`"repo.config"` - Events on the config: update Space secrets, update settings,
    update DOIs, disabled or not, etc. The associated `action` is always `"update"`.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"repo.config"` - 配置上的事件：更新 Space 密钥、更新设置、更新 DOI、禁用或启用等。相关的 `action` 总是 `"update"`。'
- en: '`"discussion"` - Creating a discussion or Pull Request, updating the title
    or status, and merging. Possible values for the associated `action`: `"create"`,
    `"delete"`, `"update"`.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"discussion"` - 创建讨论或拉取请求，更新标题或状态，并合并。相关 `action` 的可能值：`"create"`、`"delete"`、`"update"`。'
- en: '`"discussion.comment"` - Creating, updating, and hiding a comment. Possible
    values for the associated `action`: `"create"`, `"update"`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"discussion.comment"` - 创建、更新和隐藏评论。相关 `action` 的可能值：`"create"`、`"update"`。'
- en: More scopes can be added in the future. To handle unknown events, your webhook
    handler can consider any action on a narrowed scope to be an `"update"` action
    on the broader scope.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 未来可以添加更多范围。为处理未知事件，您的 Webhook 处理程序可以将狭窄范围上的任何操作视为更广泛范围上的 `"update"` 操作。
- en: For example, if the `"repo.config.dois"` scope is added in the future, any event
    with that scope can be considered by your webhook handler as an `"update"` action
    on the `"repo.config"` scope.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果未来添加了 `"repo.config.dois"` 范围，那么任何具有该范围的事件都可以被您的 Webhook 处理程序视为 `"repo.config"`
    范围上的 `"update"` 操作。
- en: Repo
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仓库
- en: 'In the current version of webhooks, the top-level property `repo` is always
    specified, as events can always be associated with a repo. For example, consider
    the following value:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前版本的 Webhooks 中，顶级属性 `repo` 总是指定的，因为事件总是可以与仓库关联。例如，考虑以下值：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`repo.headSha` is the sha of the latest commit on the repo’s `main` branch.
    It is only sent when `event.scope` starts with `"repo"`, not on community events
    like discussions and comments.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`repo.headSha` 是仓库 `main` 分支上最新提交的 sha。仅当 `event.scope` 以 `"repo"` 开头时才发送，而不是在讨论和评论等社区事件上发送。'
- en: Discussions and Pull Requests
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 讨论和拉取请求
- en: 'The top-level property `discussion` is specified on community events (discussions
    and Pull Requests). The `discussion.isPullRequest` property is a boolean indicating
    if the discussion is also a Pull Request (on the Hub, a PR is a special type of
    discussion). Here is an example value:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 顶级属性 `discussion` 在社区事件（讨论和拉取请求）上指定。`discussion.isPullRequest` 属性是一个布尔值，指示讨论是否也是一个拉取请求（在
    Hub 上，PR 是一种特殊类型的讨论）。以下是一个示例值：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Comment
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 评论
- en: 'The top level property `comment` is specified when a comment is created (including
    on discussion creation) or updated. Here is an example value:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 顶级属性 `comment` 在创建评论（包括讨论创建）或更新评论时指定。以下是一个示例值：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Webhook secret
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Webhook 密钥
- en: Setting a Webhook secret is useful to make sure payloads sent to your Webhook
    handler URL are actually from Hugging Face.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Webhook密钥对于确保发送到您的Webhook处理程序URL的有效负载实际来自Hugging Face非常有用。
- en: If you set a secret for your Webhook, it will be sent along as an `X-Webhook-Secret`
    HTTP header on every request. Only ASCII characters are supported.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果为您的Webhook设置了一个密钥，它将作为`X-Webhook-Secret` HTTP标头发送到每个请求中。仅支持ASCII字符。
- en: 'It''s also possible to add the secret directly in the handler URL. For example,
    setting it as a query parameter: https://example.com/webhook?secret=XXX.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以直接在处理程序URL中添加密钥。例如，将其设置为查询参数：https://example.com/webhook?secret=XXX。
- en: This can be helpful if accessing the HTTP headers of the request is complicated
    for your Webhook handler.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果访问请求的HTTP标头对于您的Webhook处理程序来说很复杂，这可能会有所帮助。
- en: Rate limiting
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 速率限制
- en: Each Webhook is limited to 1,000 triggers per 24 hours. You can view your usage
    in the Webhook settings page in the “Activity” tab.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Webhook每24小时限制为1,000次触发。您可以在“活动”选项卡中的Webhook设置页面中查看您的使用情况。
- en: If you need to increase the number of triggers for your Webhook, contact us
    at [website@huggingface.co](mailto:website@huggingface.co).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要增加Webhook的触发次数，请联系我们[website@huggingface.co](mailto:website@huggingface.co)。
- en: Developing your Webhooks
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发您的Webhooks
- en: If you do not have an HTTPS endpoint/URL, you can try out public tools for webhook
    testing. These tools act as catch-all (capture all requests) sent to them and
    give 200 OK status code. [Beeceptor](https://beeceptor.com/) is one tool you can
    use to create a temporary HTTP endpoint and review the incoming payload. Another
    such tool is [Webhook.site](https://webhook.site/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有HTTPS端点/URL，您可以尝试使用公共工具进行Webhook测试。这些工具充当捕获所有请求并返回200 OK状态代码的接收器。[Beeceptor](https://beeceptor.com/)是一个工具，您可以使用它创建临时的HTTP端点并查看传入的有效负载。另一个类似的工具是[Webhook.site](https://webhook.site/)。
- en: Additionally, you can route a real Webhook payload to the code running locally
    on your machine during development. This is a great way to test and debug for
    faster integrations. You can do this by exposing your localhost port to the Internet.
    To be able to go this path, you can use [ngrok](https://ngrok.com/) or [localtunnel](https://theboroer.github.io/localtunnel-www/).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以在开发过程中将真实的Webhook有效负载路由到本地计算机上运行的代码。这是测试和调试更快集成的好方法。您可以通过将本地主机端口暴露到互联网来实现这一点。要走这条路，您可以使用[ngrok](https://ngrok.com/)或[localtunnel](https://theboroer.github.io/localtunnel-www/)。
- en: Debugging Webhooks
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试Webhooks
- en: You can easily find recently generated events for your webhooks. Open the activity
    tab for your webhook. There you will see the list of recent events.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松找到您的Webhook最近生成的事件。打开您的Webhook的活动选项卡。在那里您将看到最近事件的列表。
- en: '![image.png](../Images/b58cdf49e2538ba07a3d6be8b112089a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![image.png](../Images/b58cdf49e2538ba07a3d6be8b112089a.png)'
- en: Here you can review the HTTP status code and the payload of the generated events.
    Additionally, you can replay these events by clicking on the `Replay` button!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以查看生成事件的HTTP状态代码和有效负载。此外，您可以通过单击“重新播放”按钮来重新播放这些事件！
- en: 'Note: When changing the target URL or secret of a Webhook, replaying an event
    will send the payload to the updated URL.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：更改Webhook的目标URL或密钥时，重新播放事件将将有效负载发送到更新后的URL。
- en: FAQ
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见问题
- en: Can I define webhooks on my organization vs my user account?
  id: totrans-59
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 我可以在我的组织上定义Webhook，还是在我的用户帐户上定义？
- en: No, this is not currently supported.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 不，目前不支持。
- en: How can I subscribe to events on all repos (or across a whole repo type, like
    on all models)?
  id: totrans-61
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 如何订阅所有存储库的事件（或跨整个存储库类型，例如所有模型）？
- en: This is not currently exposed to end users but we can toggle this for you if
    you send an email to [website@huggingface.co](mailto:website@huggingface.co).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 目前尚未向最终用户公开，但如果您发送电子邮件至[website@huggingface.co](mailto:website@huggingface.co)，我们可以为您切换此功能。
