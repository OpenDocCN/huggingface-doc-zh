["```py\nnpm install @huggingface/inference\n\npnpm add @huggingface/inference\n\nyarn add @huggingface/inference\n```", "```py\n// esm.sh\nimport { HfInference } from \"https://esm.sh/@huggingface/inference\"\n// or npm:\nimport { HfInference } from \"npm:@huggingface/inference\"\n```", "```py\nimport { HfInference } from '@huggingface/inference'\n\nconst hf = new HfInference('your access token')\n```", "```py\nimport { textGeneration } from \"@huggingface/inference\";\n\nawait textGeneration({\n  accessToken: \"hf_...\",\n  model: \"model_or_endpoint\",\n  inputs: ...,\n  parameters: ...\n})\n```", "```py\nawait hf.fillMask({\n  model: 'bert-base-uncased',\n  inputs: '[MASK] world!'\n})\n```", "```py\nawait hf.summarization({\n  model: 'facebook/bart-large-cnn',\n  inputs:\n    'The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest man-made structure in the world, a title it held for 41 years until the Chrysler Building in New York City was finished in 1930.',\n  parameters: {\n    max_length: 100\n  }\n})\n```", "```py\nawait hf.questionAnswering({\n  model: 'deepset/roberta-base-squad2',\n  inputs: {\n    question: 'What is the capital of France?',\n    context: 'The capital of France is Paris.'\n  }\n})\n```", "```py\nawait hf.tableQuestionAnswering({\n  model: 'google/tapas-base-finetuned-wtq',\n  inputs: {\n    query: 'How many stars does the transformers repository have?',\n    table: {\n      Repository: ['Transformers', 'Datasets', 'Tokenizers'],\n      Stars: ['36542', '4512', '3934'],\n      Contributors: ['651', '77', '34'],\n      'Programming language': ['Python', 'Python', 'Rust, Python and NodeJS']\n    }\n  }\n})\n```", "```py\nawait hf.textClassification({\n  model: 'distilbert-base-uncased-finetuned-sst-2-english',\n  inputs: 'I like you. I love you.'\n})\n```", "```py\nawait hf.textGeneration({\n  model: 'gpt2',\n  inputs: 'The answer to the universe is'\n})\n\nfor await (const output of hf.textGenerationStream({\n  model: \"google/flan-t5-xxl\",\n  inputs: 'repeat \"one two three four\"',\n  parameters: { max_new_tokens: 250 }\n})) {\n  console.log(output.token.text, output.generated_text);\n}\n```", "```py\nawait hf.tokenClassification({\n  model: 'dbmdz/bert-large-cased-finetuned-conll03-english',\n  inputs: 'My name is Sarah Jessica Parker but you can call me Jessica'\n})\n```", "```py\nawait hf.translation({\n  model: 't5-base',\n  inputs: 'My name is Wolfgang and I live in Berlin'\n})\n\nawait hf.translation({\n  model: 'facebook/mbart-large-50-many-to-many-mmt',\n  inputs: textToTranslate,\n  parameters: {\n\t\t\"src_lang\": \"en_XX\",\n\t\t\"tgt_lang\": \"fr_XX\"\n\t}\n})\n```", "```py\nawait hf.zeroShotClassification({\n  model: 'facebook/bart-large-mnli',\n  inputs: [\n    'Hi, I recently bought a device from your company but it is not working as advertised and I would like to get reimbursed!'\n  ],\n  parameters: { candidate_labels: ['refund', 'legal', 'faq'] }\n})\n```", "```py\nawait hf.conversational({\n  model: 'microsoft/DialoGPT-large',\n  inputs: {\n    past_user_inputs: ['Which movie is the best ?'],\n    generated_responses: ['It is Die Hard for sure.'],\n    text: 'Can you explain why ?'\n  }\n})\n```", "```py\nawait hf.sentenceSimilarity({\n  model: 'sentence-transformers/paraphrase-xlm-r-multilingual-v1',\n  inputs: {\n    source_sentence: 'That is a happy person',\n    sentences: [\n      'That is a happy dog',\n      'That is a very happy person',\n      'Today is a sunny day'\n    ]\n  }\n})\n```", "```py\nawait hf.automaticSpeechRecognition({\n  model: 'facebook/wav2vec2-large-960h-lv60-self',\n  data: readFileSync('test/sample1.flac')\n})\n```", "```py\nawait hf.audioClassification({\n  model: 'superb/hubert-large-superb-er',\n  data: readFileSync('test/sample1.flac')\n})\n```", "```py\nawait hf.textToSpeech({\n  model: 'espnet/kan-bayashi_ljspeech_vits',\n  inputs: 'Hello world!'\n})\n```", "```py\nawait hf.audioToAudio({\n  model: 'speechbrain/sepformer-wham',\n  data: readFileSync('test/sample1.flac')\n})\n```", "```py\nawait hf.imageClassification({\n  data: readFileSync('test/cheetah.png'),\n  model: 'google/vit-base-patch16-224'\n})\n```", "```py\nawait hf.objectDetection({\n  data: readFileSync('test/cats.png'),\n  model: 'facebook/detr-resnet-50'\n})\n```", "```py\nawait hf.imageSegmentation({\n  data: readFileSync('test/cats.png'),\n  model: 'facebook/detr-resnet-50-panoptic'\n})\n```", "```py\nawait hf.imageToText({\n  data: readFileSync('test/cats.png'),\n  model: 'nlpconnect/vit-gpt2-image-captioning'\n})\n```", "```py\nawait hf.textToImage({\n  inputs: 'award winning high resolution photo of a giant tortoise/((ladybird)) hybrid, [trending on artstation]',\n  model: 'stabilityai/stable-diffusion-2',\n  parameters: {\n    negative_prompt: 'blurry',\n  }\n})\n```", "```py\nawait hf.imageToImage({\n  inputs: new Blob([readFileSync(\"test/stormtrooper_depth.png\")]),\n  parameters: {\n    prompt: \"elmo's lecture\",\n  },\n  model: \"lllyasviel/sd-controlnet-depth\",\n});\n```", "```py\nawait hf.zeroShotImageClassification({\n  model: 'openai/clip-vit-large-patch14-336',\n  inputs: {\n    image: await (await fetch('https://placekitten.com/300/300')).blob()\n  },  \n  parameters: {\n    candidate_labels: ['cat', 'dog']\n  }\n})\n```", "```py\nawait hf.featureExtraction({\n  model: \"sentence-transformers/distilbert-base-nli-mean-tokens\",\n  inputs: \"That is a happy person\",\n});\n```", "```py\nawait hf.visualQuestionAnswering({\n  model: 'dandelin/vilt-b32-finetuned-vqa',\n  inputs: {\n    question: 'How many cats are lying down?',\n    image: await (await fetch('https://placekitten.com/300/300')).blob()\n  }\n})\n```", "```py\nawait hf.documentQuestionAnswering({\n  model: 'impira/layoutlm-document-qa',\n  inputs: {\n    question: 'Invoice number?',\n    image: await (await fetch('https://huggingface.co/spaces/impira/docquery/resolve/2359223c1837a7587402bda0f2643382a6eefeab/invoice.png')).blob(),\n  }\n})\n```", "```py\nawait hf.tabularRegression({\n  model: \"scikit-learn/Fish-Weight\",\n  inputs: {\n    data: {\n      \"Height\": [\"11.52\", \"12.48\", \"12.3778\"],\n      \"Length1\": [\"23.2\", \"24\", \"23.9\"],\n      \"Length2\": [\"25.4\", \"26.3\", \"26.5\"],\n      \"Length3\": [\"30\", \"31.2\", \"31.1\"],\n      \"Species\": [\"Bream\", \"Bream\", \"Bream\"],\n      \"Width\": [\"4.02\", \"4.3056\", \"4.6961\"]\n    },\n  },\n})\n```", "```py\nawait hf.tabularClassification({\n  model: \"vvmnnnkv/wine-quality\",\n  inputs: {\n    data: {\n      \"fixed_acidity\": [\"7.4\", \"7.8\", \"10.3\"],\n      \"volatile_acidity\": [\"0.7\", \"0.88\", \"0.32\"],\n      \"citric_acid\": [\"0\", \"0\", \"0.45\"],\n      \"residual_sugar\": [\"1.9\", \"2.6\", \"6.4\"],\n      \"chlorides\": [\"0.076\", \"0.098\", \"0.073\"],\n      \"free_sulfur_dioxide\": [\"11\", \"25\", \"5\"],\n      \"total_sulfur_dioxide\": [\"34\", \"67\", \"13\"],\n      \"density\": [\"0.9978\", \"0.9968\", \"0.9976\"],\n      \"pH\": [\"3.51\", \"3.2\", \"3.23\"],\n      \"sulphates\": [\"0.56\", \"0.68\", \"0.82\"],\n      \"alcohol\": [\"9.4\", \"9.8\", \"12.6\"]\n    },\n  },\n})\n```", "```py\nawait hf.request({\n  model: 'my-custom-model',\n  inputs: 'hello world',\n  parameters: {\n    custom_param: 'some magic',\n  }\n})\n\n// Custom streaming call, for models with custom parameters / outputs\nfor await (const output of hf.streamingRequest({\n  model: 'my-custom-model',\n  inputs: 'hello world',\n  parameters: {\n    custom_param: 'some magic',\n  }\n})) {\n  ...\n}\n```", "```py\nconst gpt2 = hf.endpoint('https://xyz.eu-west-1.aws.endpoints.huggingface.cloud/gpt2');\nconst { generated_text } = await gpt2.textGeneration({inputs: 'The answer to the universe is'});\n```", "```py\nHF_TOKEN=\"your access token\" pnpm run test\n```"]