- en: Managing local and online repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/huggingface_hub/package_reference/repository](https://huggingface.co/docs/huggingface_hub/package_reference/repository)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/start.81f0ceaa.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/scheduler.6062bdaf.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/singletons.3c2729d2.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/paths.566d2d8a.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/app.77e31cee.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/index.4bca734e.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/0.d6dfa8c0.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/34.75bbb3ee.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Tip.b9ac1f03.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Docstring.ed07512f.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Heading.723dceba.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/CodeBlock.fa01571c.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/ExampleCodeBlock.823fb173.js">
  prefs: []
  type: TYPE_NORMAL
- en: The `Repository` class is a helper class that wraps `git` and `git-lfs` commands.
    It provides tooling adapted for managing repositories which can be very large.
  prefs: []
  type: TYPE_NORMAL
- en: It is the recommended tool as soon as any `git` operation is involved, or when
    collaboration will be a point of focus with the repository itself.
  prefs: []
  type: TYPE_NORMAL
- en: The Repository class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.Repository`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L425)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Helper class to wrap the git and git-lfs commands.
  prefs: []
  type: TYPE_NORMAL
- en: The aim is to facilitate interacting with huggingface.co hosted model or dataset
    repos, though not a lot here (if any) is actually specific to huggingface.co.
  prefs: []
  type: TYPE_NORMAL
- en: '[Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)
    is deprecated in favor of the http-based alternatives implemented in [HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi).
    Given its large adoption in legacy code, the complete removal of [Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)
    will only happen in release `v1.0`. For more details, please read [https://huggingface.co/docs/huggingface_hub/concepts/git_vs_http](https://huggingface.co/docs/huggingface_hub/concepts/git_vs_http).'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `__init__`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L445)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`local_dir` (`str` or `Path`) — path (e.g. `''my_trained_model/''`) to the
    local directory, where the `Repository` will be initialized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clone_from` (`str`, *optional*) — Either a repository url or `repo_id`. Example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"https://huggingface.co/philschmid/playground-tests"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"philschmid/playground-tests"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — To set when cloning a repo from a repo_id.
    Default is model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git_user` (`str`, *optional*) — will override the `git config user.name` for
    committing and pushing files to the hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git_email` (`str`, *optional*) — will override the `git config user.email`
    for committing and pushing files to the hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — Revision to checkout after initializing the
    repository. If the revision doesn’t exist, a branch will be created with that
    revision name from the default branch’s current HEAD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_lfs_files` (`bool`, *optional*, defaults to `False`) — whether to skip
    git-LFS files or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`client` (`HfApi`, *optional*) — Instance of [HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi)
    to use when calling the HF Hub API. A new instance will be created if this is
    left to `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: — [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)
    if the remote repository set in `clone_from` does not exist.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantiate a local clone of a git repo.
  prefs: []
  type: TYPE_NORMAL
- en: If `clone_from` is set, the repo will be cloned from an existing remote repository.
    If the remote repo does not exist, a `EnvironmentError` exception will be thrown.
    Please create the remote repo first using [create_repo()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo).
  prefs: []
  type: TYPE_NORMAL
- en: '`Repository` uses the local git credentials by default. If explicitly set,
    the `token` or the `git_user`/`git_email` pair will be used instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `current_branch`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L562)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: Current checked out branch.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the current checked out branch.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `add_tag`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1246)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`tag_name` (`str`) — The name of the tag to be added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message` (`str`, *optional*) — The message that accompanies the tag. The tag
    will turn into an annotated tag if a message is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remote` (`str`, *optional*) — The remote on which to add the tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a tag at the current head and push it
  prefs: []
  type: TYPE_NORMAL
- en: If remote is None, will just be updated locally
  prefs: []
  type: TYPE_NORMAL
- en: If no message is provided, the tag will be lightweight. if a message is provided,
    the tag will be annotated.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `auto_track_binary_files`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L888)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` (`str`, *optional*, defaults to ”.“) — The pattern with which to
    track files that are binary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: List of filenames that are now tracked due to being binary files
  prefs: []
  type: TYPE_NORMAL
- en: Automatically track binary files with git-lfs.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `auto_track_large_files`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L931)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` (`str`, *optional*, defaults to ”.“) — The pattern with which to
    track files that are above 10MBs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: List of filenames that are now tracked due to their size.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically track large files (files that weigh more than 10MBs) with git-lfs.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `check_git_versions`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L577)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: — [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)
    if `git` or `git-lfs` are not installed.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks that `git` and `git-lfs` can be run.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `clone_from`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L600)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_url` (`str`) — The URL from which to clone the repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`Union[str, bool]`, *optional*) — Whether to use the authentication
    token. It can be:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a string which is the token itself
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False`, which would not use the authentication token'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True`, which would fetch the authentication token from the local folder and
    use it (you should be logged in for this to work).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`None`, which would retrieve the value of `self.huggingface_token`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone from a remote. If the folder already exists, will try to clone the repository
    within it.
  prefs: []
  type: TYPE_NORMAL
- en: If this folder is a git repository with linked history, will try to update the
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if an organization token (starts with “api_org”) is passed. Use must use your
    own personal access token (see [https://hf.co/settings/tokens](https://hf.co/settings/tokens)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)
    if you are trying to clone the repository in a non-empty folder, or if the `git`
    operations raise errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `commit`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1330)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`commit_message` (`str`) — Message to use for the commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`branch` (`str`, *optional*) — The branch on which the commit will appear.
    This branch will be checked-out before any operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`track_large_files` (`bool`, *optional*, defaults to `True`) — Whether to automatically
    track large files or not. Will do so by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blocking` (`bool`, *optional*, defaults to `True`) — Whether the function
    should return only when the `git push` has finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_lfs_prune` (`bool`, defaults to `True`) — Whether to automatically prune
    files once they have been pushed to the remote.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Context manager utility to handle committing to a repository. This automatically
    tracks large files (>10Mb) with git-lfs. Set the `track_large_files` argument
    to `False` if you wish to ignore that behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '#### `delete_tag`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1209)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`tag_name` (`str`) — The tag name to delete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remote` (`str`, *optional*) — The remote on which to delete the tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if deleted, `False` if the tag didn’t exist. If remote is not passed,
    will just be updated locally'
  prefs: []
  type: TYPE_NORMAL
- en: Delete a tag, both local and remote, if it exists
  prefs: []
  type: TYPE_NORMAL
- en: '#### `git_add`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1006)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` (`str`, *optional*, defaults to ”.“) — The pattern with which to
    add files to staging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_lfs_track` (`bool`, *optional*, defaults to `False`) — Whether to automatically
    track large and binary files with git-lfs. Any file over 10MB in size, or in binary
    format, will be automatically tracked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: git add
  prefs: []
  type: TYPE_NORMAL
- en: Setting the `auto_lfs_track` parameter to `True` will automatically track files
    that are larger than 10MB with `git-lfs`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `git_checkout`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1147)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`revision` (`str`) — The revision to checkout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_branch_ok` (`str`, *optional*, defaults to `False`) — Whether creating
    a branch named with the `revision` passed at the current checked-out reference
    if `revision` isn’t an existing revision is allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: git checkout a given revision
  prefs: []
  type: TYPE_NORMAL
- en: Specifying `create_branch_ok` to `True` will create the branch to the given
    revision if that revision doesn’t exist.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `git_commit`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1040)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*, defaults to “commit files to HF hub”)
    — The message attributed to the commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: git commit
  prefs: []
  type: TYPE_NORMAL
- en: '#### `git_config_username_and_email`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L728)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`git_user` (`str`, *optional*) — The username to register through `git`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git_email` (`str`, *optional*) — The email to register through `git`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets git username and email (only in the current repo).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `git_credential_helper_store`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L747)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Sets the git credential helper to `store`
  prefs: []
  type: TYPE_NORMAL
- en: '#### `git_head_commit_url`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L784)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: The URL to the current checked-out commit.
  prefs: []
  type: TYPE_NORMAL
- en: Get URL to last commit on HEAD. We assume it’s been pushed, and the url scheme
    is the same one as for GitHub or HuggingFace.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `git_head_hash`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L756)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: The current checked out commit SHA.
  prefs: []
  type: TYPE_NORMAL
- en: Get commit sha on top of HEAD.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `git_pull`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L982)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`rebase` (`bool`, *optional*, defaults to `False`) — Whether to rebase the
    current branch on top of the upstream branch after fetching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lfs` (`bool`, *optional*, defaults to `False`) — Whether to fetch the LFS
    files too. This option only changes the behavior when a repository was cloned
    without fetching the LFS files; calling `repo.git_pull(lfs=True)` will then fetch
    the LFS file from the remote repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: git pull
  prefs: []
  type: TYPE_NORMAL
- en: '#### `git_push`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1057)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`upstream` (`str`, *optional*) — Upstream to which this should push. If not
    specified, will push to the lastly defined upstream or to the default one (`origin
    main`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blocking` (`bool`, *optional*, defaults to `True`) — Whether the function
    should return only when the push has finished. Setting this to `False` will return
    an `CommandInProgress` object which has an `is_done` property. This property will
    be set to `True` when the push is finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_lfs_prune` (`bool`, *optional*, defaults to `False`) — Whether to automatically
    prune files once they have been pushed to the remote.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: git push
  prefs: []
  type: TYPE_NORMAL
- en: If used without setting `blocking`, will return url to commit on remote repo.
    If used with `blocking=True`, will return a tuple containing the url to commit
    and the command object to follow for information about the process.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `git_remote_url`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L769)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: The URL of the `origin` remote.
  prefs: []
  type: TYPE_NORMAL
- en: Get URL to origin remote.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `is_repo_clean`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1280)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if the git status is clean, `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Return whether or not the git status is clean or not
  prefs: []
  type: TYPE_NORMAL
- en: '#### `lfs_enable_largefiles`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L874)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: HF-specific. This enables upload support of files >5GB.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `lfs_prune`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L964)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`recent` (`bool`, *optional*, defaults to `False`) — Whether to prune files
    even if they were referenced by recent commits. See the following [link](https://github.com/git-lfs/git-lfs/blob/f3d43f0428a84fc4f1e5405b76b5a73ec2437e65/docs/man/git-lfs-prune.1.ronn#recent-files)
    for more information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: git lfs prune
  prefs: []
  type: TYPE_NORMAL
- en: '#### `lfs_track`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L833)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`patterns` (`Union[str, List[str]]`) — The pattern, or list of patterns, to
    track with git-lfs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename` (`bool`, *optional*, defaults to `False`) — Whether to use the patterns
    as literal filenames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tell git-lfs to track files according to a pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the `filename` argument to `True` will treat the arguments as literal
    filenames, not as patterns. Any special glob characters in the filename will be
    escaped when writing to the `.gitattributes` file.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `lfs_untrack`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L858)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`patterns` (`Union[str, List[str]]`) — The pattern, or list of patterns, to
    untrack with git-lfs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tell git-lfs to untrack those files.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `list_deleted_files`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L798)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of files that have been deleted in the working directory or index.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a list of the files that are deleted in the working directory or index.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `push_to_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1294)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`commit_message` (`str`) — Message to use for the commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blocking` (`bool`, *optional*, defaults to `True`) — Whether the function
    should return only when the `git push` has finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean_ok` (`bool`, *optional*, defaults to `True`) — If True, this function
    will return None if the repo is untouched. Default behavior is to fail because
    the git command fails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_lfs_prune` (`bool`, *optional*, defaults to `False`) — Whether to automatically
    prune files once they have been pushed to the remote.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helper to add, commit, and push files to remote repository on the HuggingFace
    Hub. Will automatically track large files (>10MB).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `tag_exists`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1179)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`tag_name` (`str`) — The name of the tag to check.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remote` (`str`, *optional*) — Whether to check if the tag exists on a remote.
    This parameter should be the identifier of the remote.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the tag exists.
  prefs: []
  type: TYPE_NORMAL
- en: Check if a tag exists or not.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `wait_for_commands`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1458)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Blocking method: blocks all subsequent execution until all commands have been
    processed.'
  prefs: []
  type: TYPE_NORMAL
- en: Helper methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.repository.is_git_repo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L114)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`folder` (`str`) — The folder in which to run the command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if the repository is part of a repository, `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Check if the folder is the root or part of a git repository
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.repository.is_local_clone`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L131)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`folder` (`str` or `Path`) — The folder in which to run the command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remote_url` (`str`) — The url of a git repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if the repository is a local clone of the remote repository specified,
    `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Check if the folder is a local clone of the remote_url
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.repository.is_tracked_with_lfs`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L156)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`filename` (`str` or `Path`) — The filename to check.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if the file passed is tracked with git-lfs, `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Check if the file passed is tracked with git-lfs.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.repository.is_git_ignored`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L193)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`filename` (`str` or `Path`) — The filename to check.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if the file passed is ignored by `git`, `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Check if file is git-ignored. Supports nested .gitignore files.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.repository.files_to_be_staged`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L241)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pattern` (`str` or `Path`) — The pattern of filenames to check. Put `.` to
    get all files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`folder` (`str` or `Path`) — The folder in which to run the command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: List of files that are to be staged.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a list of filenames that are to be staged.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.repository.is_tracked_upstream`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L266)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`folder` (`str` or `Path`) — The folder in which to run the command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: '`True` if the current checked-out branch is tracked upstream, `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Check if the current checked-out branch is tracked upstream.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.repository.commits_to_push`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L288)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`folder` (`str` or `Path`) — The folder in which to run the command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upstream` (`str`, *optional*) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of commits that would be pushed upstream were a `git push` to proceed.
  prefs: []
  type: TYPE_NORMAL
- en: Check the number of commits that would be pushed upstream
  prefs: []
  type: TYPE_NORMAL
- en: The name of the upstream repository with which the comparison should be made.
  prefs: []
  type: TYPE_NORMAL
- en: Following asynchronous commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Repository` utility offers several methods which can be launched asynchronously:'
  prefs: []
  type: TYPE_NORMAL
- en: '`git_push`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git_pull`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push_to_hub`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `commit` context manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See below for utilities to manage such asynchronous methods.
  prefs: []
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.Repository`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L425)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Helper class to wrap the git and git-lfs commands.
  prefs: []
  type: TYPE_NORMAL
- en: The aim is to facilitate interacting with huggingface.co hosted model or dataset
    repos, though not a lot here (if any) is actually specific to huggingface.co.
  prefs: []
  type: TYPE_NORMAL
- en: '[Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)
    is deprecated in favor of the http-based alternatives implemented in [HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi).
    Given its large adoption in legacy code, the complete removal of [Repository](/docs/huggingface_hub/v0.20.3/en/package_reference/repository#huggingface_hub.Repository)
    will only happen in release `v1.0`. For more details, please read [https://huggingface.co/docs/huggingface_hub/concepts/git_vs_http](https://huggingface.co/docs/huggingface_hub/concepts/git_vs_http).'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `commands_failed`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1444)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Returns the asynchronous commands that failed.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `commands_in_progress`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1451)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Returns the asynchronous commands that are currently in progress.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `wait_for_commands`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L1458)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Blocking method: blocks all subsequent execution until all commands have been
    processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.repository.CommandInProgress`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/repository.py#L31)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Utility to follow commands launched asynchronously.
  prefs: []
  type: TYPE_NORMAL
