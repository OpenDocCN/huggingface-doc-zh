- en: MMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/mms](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/mms)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MMS model was proposed in [Scaling Speech Technology to 1,000+ Languages](https://arxiv.org/abs/2305.13516)
    by Vineel Pratap, Andros Tjandra, Bowen Shi, Paden Tomasello, Arun Babu, Sayani
    Kundu, Ali Elkahky, Zhaoheng Ni, Apoorv Vyas, Maryam Fazel-Zarandi, Alexei Baevski,
    Yossi Adi, Xiaohui Zhang, Wei-Ning Hsu, Alexis Conneau, Michael Auli
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Expanding the language coverage of speech technology has the potential to
    improve access to information for many more people. However, current speech technology
    is restricted to about one hundred languages which is a small fraction of the
    over 7,000 languages spoken around the world. The Massively Multilingual Speech
    (MMS) project increases the number of supported languages by 10-40x, depending
    on the task. The main ingredients are a new dataset based on readings of publicly
    available religious texts and effectively leveraging self-supervised learning.
    We built pre-trained wav2vec 2.0 models covering 1,406 languages, a single multilingual
    automatic speech recognition model for 1,107 languages, speech synthesis models
    for the same number of languages, as well as a language identification model for
    4,017 languages. Experiments show that our multilingual speech recognition model
    more than halves the word error rate of Whisper on 54 languages of the FLEURS
    benchmark while being trained on a small fraction of the labeled data.*'
  prefs: []
  type: TYPE_NORMAL
- en: Here are the different models open sourced in the MMS project. The models and
    code are originally released [here](https://github.com/facebookresearch/fairseq/tree/main/examples/mms).
    We have add them to the `transformers` framework, making them easier to use.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic Speech Recognition (ASR)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The ASR model checkpoints can be found here : [mms-1b-fl102](https://huggingface.co/facebook/mms-1b-fl102),
    [mms-1b-l1107](https://huggingface.co/facebook/mms-1b-l1107), [mms-1b-all](https://huggingface.co/facebook/mms-1b-all).
    For best accuracy, use the `mms-1b-all` model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tips:'
  prefs: []
  type: TYPE_NORMAL
- en: All ASR models accept a float array corresponding to the raw waveform of the
    speech signal. The raw waveform should be pre-processed with [Wav2Vec2FeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The models were trained using connectionist temporal classification (CTC) so
    the model output has to be decoded using [Wav2Vec2CTCTokenizer](/docs/transformers/v4.37.2/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can load different language adapter weights for different languages via
    [load_adapter()](/docs/transformers/v4.37.2/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC.load_adapter).
    Language adapters only consists of roughly 2 million parameters and can therefore
    be efficiently loaded on the fly when needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By default MMS loads adapter weights for English. If you want to load adapter
    weights of another language make sure to specify `target_lang=<your-chosen-target-lang>`
    as well as `"ignore_mismatched_sizes=True`. The `ignore_mismatched_sizes=True`
    keyword has to be passed to allow the language model head to be resized according
    to the vocabulary of the specified language. Similarly, the processor should be
    loaded with the same target language
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can safely ignore a warning such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to use the ASR pipeline, you can load your chosen target language
    as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Inference
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next, letâ€™s look at how we can run MMS in inference and change adapter layers
    after having called `~PretrainedModel.from_pretrained` First, we load audio data
    in different languages using the [Datasets](https://github.com/huggingface/datasets).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we load the model and processor
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now we process the audio data, pass the processed audio data to the model and
    transcribe the model output, just like we usually do for [Wav2Vec2ForCTC](/docs/transformers/v4.37.2/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can now keep the same model in memory and simply switch out the language
    adapters by calling the convenient [load_adapter()](/docs/transformers/v4.37.2/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC.load_adapter)
    function for the model and [set_target_lang()](/docs/transformers/v4.37.2/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer.set_target_lang)
    for the tokenizer. We pass the target language as an input - `"fra"` for French.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way the language can be switched out for all other supported languages.
    Please have a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: to see all supported languages.
  prefs: []
  type: TYPE_NORMAL
- en: To further improve performance from ASR models, language model decoding can
    be used. See the documentation [here](https://huggingface.co/facebook/mms-1b-all)
    for further details.
  prefs: []
  type: TYPE_NORMAL
- en: Speech Synthesis (TTS)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'MMS-TTS uses the same model architecture as VITS, which was added to ðŸ¤— Transformers
    in v4.33\. MMS trains a separate model checkpoint for each of the 1100+ languages
    in the project. All available checkpoints can be found on the Hugging Face Hub:
    [facebook/mms-tts](https://huggingface.co/models?sort=trending&search=facebook%2Fmms-tts),
    and the inference documentation under [VITS](https://huggingface.co/docs/transformers/main/en/model_doc/vits).'
  prefs: []
  type: TYPE_NORMAL
- en: Inference
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To use the MMS model, first update to the latest version of the Transformers
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Since the flow-based model in VITS is non-deterministic, it is good practice
    to set a seed to ensure reproducibility of the outputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For languages with a Roman alphabet, such as English or French, the tokenizer
    can be used directly to pre-process the text inputs. The following code example
    runs a forward pass using the MMS-TTS English checkpoint:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting waveform can be saved as a `.wav` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Or displayed in a Jupyter Notebook / Google Colab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For certain languages with non-Roman alphabets, such as Arabic, Mandarin or
    Hindi, the [`uroman`](https://github.com/isi-nlp/uroman) perl package is required
    to pre-process the text inputs to the Roman alphabet.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check whether you require the `uroman` package for your language by
    inspecting the `is_uroman` attribute of the pre-trained `tokenizer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If required, you should apply the uroman package to your text inputs **prior**
    to passing them to the `VitsTokenizer`, since currently the tokenizer does not
    support performing the pre-processing itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, first clone the uroman repository to your local machine and set
    the bash variable `UROMAN` to the local path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then pre-process the text input using the following code snippet. You
    can either rely on using the bash variable `UROMAN` to point to the uroman repository,
    or you can pass the uroman directory as an argument to the `uromaize` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Tips:**'
  prefs: []
  type: TYPE_NORMAL
- en: The MMS-TTS checkpoints are trained on lower-cased, un-punctuated text. By default,
    the `VitsTokenizer` *normalizes* the inputs by removing any casing and punctuation,
    to avoid passing out-of-vocabulary characters to the model. Hence, the model is
    agnostic to casing and punctuation, so these should be avoided in the text prompt.
    You can disable normalisation by setting `noramlize=False` in the call to the
    tokenizer, but this will lead to un-expected behaviour and is discouraged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The speaking rate can be varied by setting the attribute `model.speaking_rate`
    to a chosen value. Likewise, the randomness of the noise is controlled by `model.noise_scale`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Language Identification (LID)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different LID models are available based on the number of languages they can
    recognize - [126](https://huggingface.co/facebook/mms-lid-126), [256](https://huggingface.co/facebook/mms-lid-256),
    [512](https://huggingface.co/facebook/mms-lid-512), [1024](https://huggingface.co/facebook/mms-lid-1024),
    [2048](https://huggingface.co/facebook/mms-lid-2048), [4017](https://huggingface.co/facebook/mms-lid-4017).
  prefs: []
  type: TYPE_NORMAL
- en: Inference
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First, we install transformers and some other libraries
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Next, we load a couple of audio samples via `datasets`. Make sure that the audio
    data is sampled to 16000 kHz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Next, we load the model and processor
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now we process the audio data, pass the processed audio data to the model to
    classify it into a language, just like we usually do for Wav2Vec2 audio classification
    models such as [ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition](https://huggingface.co/harshit345/xlsr-wav2vec-speech-emotion-recognition)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To see all the supported languages of a checkpoint, you can print out the language
    ids as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Audio Pretrained Models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pretrained models are available for two different sizes - [300M](https://huggingface.co/facebook/mms-300m)
    , [1Bil](https://huggingface.co/facebook/mms-1b).
  prefs: []
  type: TYPE_NORMAL
- en: The MMS for ASR architecture is based on the Wav2Vec2 model, refer to [Wav2Vec2â€™s
    documentation page](wav2vec2) for further details on how to finetune with models
    for various downstream tasks.
  prefs: []
  type: TYPE_NORMAL
- en: MMS-TTS uses the same model architecture as VITS, refer to [VITSâ€™s documentation
    page](vits) for API reference.
  prefs: []
  type: TYPE_NORMAL
