["```py\n#-- Methods that need implementing using the \"extend script\" option in Godot --#\nfunc get_obs() -> Dictionary:\n\tassert(false, \"the get_obs method is not implemented when extending from ai_controller\")\n\treturn {\"obs\":[]}\n\nfunc get_reward() -> float:\n\tassert(false, \"the get_reward method is not implemented when extending from ai_controller\")\n\treturn 0.0\n\nfunc get_action_space() -> Dictionary:\n\tassert(false, \"the get get_action_space method is not implemented when extending from ai_controller\")\n\treturn {\n\t\t\"example_actions_continous\" : {\n\t\t\t\"size\": 2,\n\t\t\t\"action_type\": \"continuous\"\n\t\t},\n\t\t\"example_actions_discrete\" : {\n\t\t\t\"size\": 2,\n\t\t\t\"action_type\": \"discrete\"\n\t\t},\n\t\t}\n\nfunc set_action(action) -> void:\n\tassert(false, \"the get set_action method is not implemented when extending from ai_controller\")\n# -----------------------------------------------------------------------------#\n```", "```py\nextends AIController3D\n\n# Called when the node enters the scene tree for the first time.\nfunc _ready():\n\tpass # Replace with function body.\n\n# Called every frame. 'delta' is the elapsed time since the previous frame.\nfunc _process(delta):\n\tpass\n```", "```py\nextends AIController3D\n\n# Stores the action sampled for the agent's policy, running in python\nvar move_action : float = 0.0\n\nfunc get_obs() -> Dictionary:\n\t# get the balls position and velocity in the paddle's frame of reference\n\tvar ball_pos = to_local(_player.ball.global_position)\n\tvar ball_vel = to_local(_player.ball.linear_velocity)\n\tvar obs = [ball_pos.x, ball_pos.z, ball_vel.x/10.0, ball_vel.z/10.0]\n\n\treturn {\"obs\":obs}\n\nfunc get_reward() -> float:\n\treturn reward\n\nfunc get_action_space() -> Dictionary:\n\treturn {\n\t\t\"move_action\" : {\n\t\t\t\"size\": 1,\n\t\t\t\"action_type\": \"continuous\"\n\t\t},\n\t\t}\n\nfunc set_action(action) -> void:\n\tmove_action = clamp(action[\"move_action\"][0], -1.0, 1.0)\n```", "```py\nextends Node3D\n\n@export var rotation_speed = 3.0\n@onready var ball = get_node(\"../Ball\")\n@onready var ai_controller = $AIController3D\n\nfunc _ready():\n\tai_controller.init(self)\n\nfunc game_over():\n\tai_controller.done = true\n\tai_controller.needs_reset = true\n\nfunc _physics_process(delta):\n\tif ai_controller.needs_reset:\n\t\tai_controller.reset()\n\t\tball.reset()\n\t\treturn\n\n\tvar movement : float\n\tif ai_controller.heuristic == \"human\":\n\t\tmovement = Input.get_axis(\"rotate_anticlockwise\", \"rotate_clockwise\")\n\telse:\n\t\tmovement = ai_controller.move_action\n\trotate_y(movement*delta*rotation_speed)\n\nfunc _on_area_3d_body_entered(body):\n\tai_controller.reward += 1.0\n```"]