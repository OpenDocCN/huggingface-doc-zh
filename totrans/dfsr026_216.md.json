["```py\n( do_resize: bool = True vae_scale_factor: int = 8 resample: str = 'lanczos' do_normalize: bool = True do_binarize: bool = False do_convert_rgb: bool = False do_convert_grayscale: bool = False )\n```", "```py\n( mask: Image init_image: Image image: Image crop_coords: Optional = None )\n```", "```py\n( image: Image ) \u2192 export const metadata = 'undefined';PIL.Image.Image\n```", "```py\n( image: Image blur_factor: int = 4 )\n```", "```py\n( image: Image )\n```", "```py\n( image: Image )\n```", "```py\n( images: Union )\n```", "```py\n( mask_image: Image width: int height: int pad = 0 ) \u2192 export const metadata = 'undefined';tuple\n```", "```py\n( image: Union height: Optional = None width: Optional = None )\n```", "```py\n( images: Union )\n```", "```py\n( images: ndarray )\n```", "```py\n( images: ndarray )\n```", "```py\n( images: Union )\n```", "```py\n( image: FloatTensor output_type: str = 'pil' do_denormalize: Optional = None ) \u2192 export const metadata = 'undefined';PIL.Image.Image, np.ndarray or torch.FloatTensor\n```", "```py\n( image: Union height: Optional = None width: Optional = None resize_mode: str = 'default' crops_coords: Optional = None )\n```", "```py\n( images: FloatTensor )\n```", "```py\n( image: Union height: int width: int resize_mode: str = 'default' ) \u2192 export const metadata = 'undefined';PIL.Image.Image, np.ndarray or torch.Tensor\n```", "```py\n( do_resize: bool = True vae_scale_factor: int = 8 resample: str = 'lanczos' do_normalize: bool = True )\n```", "```py\n( images: Union )\n```", "```py\n( images: ndarray )\n```", "```py\n( images: ndarray )\n```", "```py\n( rgb: Union depth: Union height: Optional = None width: Optional = None target_res: Optional = None )\n```", "```py\n( image: Union )\n```"]