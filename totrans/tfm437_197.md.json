["```py\n>>> from transformers import MegaConfig, MegaModel\n\n>>> # Initializing a Mega configuration\n>>> configuration = MegaConfig()\n\n>>> # Initializing a model (with random weights) from the configuration\n>>> model = MegaModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoTokenizer, MegaModel\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"mnaylor/mega-base-wikitext\")\n>>> model = MegaModel.from_pretrained(\"mnaylor/mega-base-wikitext\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, MegaForCausalLM, AutoConfig\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"mnaylor/mega-base-wikitext\")\n>>> config = AutoConfig.from_pretrained(\"mnaylor/mega-base-wikitext\")\n>>> config.is_decoder = True\n>>> config.bidirectional = False\n>>> model = MegaForCausalLM.from_pretrained(\n...     \"mnaylor/mega-base-wikitext\", config=config, ignore_mismatched_sizes=True\n... )\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> prediction_logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, MegaForMaskedLM\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"mnaylor/mega-base-wikitext\")\n>>> model = MegaForMaskedLM.from_pretrained(\"mnaylor/mega-base-wikitext\")\n\n>>> inputs = tokenizer(\"The capital of France is <mask>.\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # retrieve index of <mask>\n>>> mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[0].nonzero(as_tuple=True)[0]\n\n>>> predicted_token_id = logits[0, mask_token_index].argmax(axis=-1)\n>>> tokenizer.decode(predicted_token_id)\n' Paris'\n\n>>> labels = tokenizer(\"The capital of France is Paris.\", return_tensors=\"pt\")[\"input_ids\"]\n>>> # mask labels of non-<mask> tokens\n>>> labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -100)\n\n>>> outputs = model(**inputs, labels=labels)\n>>> round(outputs.loss.item(), 2)\n0.1\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, MegaForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"mnaylor/mega-base-wikitext\")\n>>> model = MegaForSequenceClassification.from_pretrained(\"mnaylor/mega-base-wikitext\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_id = logits.argmax().item()\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = MegaForSequenceClassification.from_pretrained(\"mnaylor/mega-base-wikitext\", num_labels=num_labels)\n\n>>> labels = torch.tensor([1])\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, MegaForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"mnaylor/mega-base-wikitext\")\n>>> model = MegaForSequenceClassification.from_pretrained(\"mnaylor/mega-base-wikitext\", problem_type=\"multi_label_classification\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_ids = torch.arange(0, logits.shape[-1])[torch.sigmoid(logits).squeeze(dim=0) > 0.5]\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = MegaForSequenceClassification.from_pretrained(\n...     \"mnaylor/mega-base-wikitext\", num_labels=num_labels, problem_type=\"multi_label_classification\"\n... )\n\n>>> labels = torch.sum(\n...     torch.nn.functional.one_hot(predicted_class_ids[None, :].clone(), num_classes=num_labels), dim=1\n... ).to(torch.float)\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, MegaForMultipleChoice\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"mnaylor/mega-base-wikitext\")\n>>> model = MegaForMultipleChoice.from_pretrained(\"mnaylor/mega-base-wikitext\")\n\n>>> prompt = \"In Italy, pizza served in formal settings, such as at a restaurant, is presented unsliced.\"\n>>> choice0 = \"It is eaten with a fork and a knife.\"\n>>> choice1 = \"It is eaten while held in the hand.\"\n>>> labels = torch.tensor(0).unsqueeze(0)  # choice0 is correct (according to Wikipedia ;)), batch size 1\n\n>>> encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors=\"pt\", padding=True)\n>>> outputs = model(**{k: v.unsqueeze(0) for k, v in encoding.items()}, labels=labels)  # batch size is 1\n\n>>> # the linear classifier still needs to be trained\n>>> loss = outputs.loss\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, MegaForTokenClassification\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"mnaylor/mega-base-wikitext\")\n>>> model = MegaForTokenClassification.from_pretrained(\"mnaylor/mega-base-wikitext\")\n\n>>> inputs = tokenizer(\n...     \"HuggingFace is a company based in Paris and New York\", add_special_tokens=False, return_tensors=\"pt\"\n... )\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_token_class_ids = logits.argmax(-1)\n\n>>> # Note that tokens are classified rather then input words which means that\n>>> # there might be more predicted token classes than words.\n>>> # Multiple token classes might account for the same word\n>>> predicted_tokens_classes = [model.config.id2label[t.item()] for t in predicted_token_class_ids[0]]\n\n>>> labels = predicted_token_class_ids\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, MegaForQuestionAnswering\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"mnaylor/mega-base-wikitext\")\n>>> model = MegaForQuestionAnswering.from_pretrained(\"mnaylor/mega-base-wikitext\")\n\n>>> question, text = \"Who was Jim Henson?\", \"Jim Henson was a nice puppet\"\n\n>>> inputs = tokenizer(question, text, return_tensors=\"pt\")\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> answer_start_index = outputs.start_logits.argmax()\n>>> answer_end_index = outputs.end_logits.argmax()\n\n>>> predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]\n\n>>> # target is \"nice puppet\"\n>>> target_start_index = torch.tensor([14])\n>>> target_end_index = torch.tensor([15])\n\n>>> outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)\n>>> loss = outputs.loss\n```"]