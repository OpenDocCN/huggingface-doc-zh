- en: Table Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/datasets/package_reference/table_classes](https://huggingface.co/docs/datasets/package_reference/table_classes)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/datasets/v2.17.0/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/entry/start.146395b0.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/scheduler.bdbef820.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/singletons.98dc5b8b.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/index.8a885b74.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/paths.a483fec8.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/entry/app.e612c4fb.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/index.c0aea24a.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/nodes/0.5e8dbda6.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/nodes/38.4d744c84.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/Docstring.8f10b780.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/Heading.2eb892cb.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/CodeBlock.6ccca92e.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/ExampleCodeBlock.d8ca6748.js">
  prefs: []
  type: TYPE_NORMAL
- en: Each `Dataset` object is backed by a PyArrow Table. A Table can be loaded from
    either the disk (memory mapped) or in memory. Several Table types are available,
    and they all inherit from [table.Table](/docs/datasets/v2.17.0/en/package_reference/table_classes#datasets.table.Table).
  prefs: []
  type: TYPE_NORMAL
- en: Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L154)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Wraps a pyarrow Table by using composition. This is the base class for `InMemoryTable`,
    `MemoryMappedTable` and `ConcatenationTable`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It implements all the basic attributes/methods of the pyarrow Table class except
    the Table transforms: `slice, filter, flatten, combine_chunks, cast, add_column,
    append_column, remove_column, set_column, rename_columns` and `drop`.'
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of these methods differs for the subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `validate`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L179)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`full` (`bool`, defaults to `False`) — If `True`, run expensive checks, otherwise
    cheap checks only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`pa.lib.ArrowInvalid`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pa.lib.ArrowInvalid` — if validation fails'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform validation checks. An exception is raised if validation fails.
  prefs: []
  type: TYPE_NORMAL
- en: By default only cheap validation checks are run. Pass `full=True` for thorough
    validation checks (potentially `O(n)`).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `equals`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L195)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`other` ([Table](/docs/datasets/v2.17.0/en/package_reference/table_classes#datasets.table.Table))
    — Table to compare against.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check_metadata` `bool`, defaults to `False`) — Whether schema metadata equality
    should be checked as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: Check if contents of two tables are equal.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_batches`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L212)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`max_chunksize` (`int`, defaults to `None`) — Maximum size for `RecordBatch`
    chunks. Individual chunks may be smaller depending on the chunk layout of individual
    columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert Table to list of (contiguous) `RecordBatch` objects.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_pydict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L226)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`dict`'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the Table to a `dict` or `OrderedDict`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L244)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`memory_pool` (`MemoryPool`, defaults to `None`) — Arrow MemoryPool to use
    for allocations. Uses the default memory pool is not passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strings_to_categorical` (`bool`, defaults to `False`) — Encode string (UTF8)
    and binary types to `pandas.Categorical`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`categories` (`list`, defaults to `empty`) — List of fields that should be
    returned as `pandas.Categorical`. Only applies to table-like data structures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zero_copy_only` (`bool`, defaults to `False`) — Raise an `ArrowException`
    if this function call would require copying the underlying data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integer_object_nulls` (`bool`, defaults to `False`) — Cast integers with nulls
    to objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_as_object` (`bool`, defaults to `True`) — Cast dates to objects. If `False`,
    convert to `datetime64[ns]` dtype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp_as_object` (`bool`, defaults to `False`) — Cast non-nanosecond timestamps
    (`np.datetime64`) to objects. This is useful if you have timestamps that don’t
    fit in the normal date range of nanosecond timestamps (1678 CE-2262 CE). If `False`,
    all timestamps are converted to `datetime64[ns]` dtype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_threads` (`bool`, defaults to `True`) — Whether to parallelize the conversion
    using multiple threads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deduplicate_objects` (`bool`, defaults to `False`) — Do not create multiple
    copies Python objects when created, to save on memory use. Conversion will be
    slower.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_metadata` (`bool`, defaults to `False`) — If `True`, do not use the
    ‘pandas’ metadata to reconstruct the DataFrame index, if present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe` (`bool`, defaults to `True`) — For certain data types, a cast is needed
    in order to store the data in a pandas DataFrame or Series (e.g. timestamps are
    always stored as nanoseconds in pandas). This option controls whether it is a
    safe cast or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split_blocks` (`bool`, defaults to `False`) — If `True`, generate one internal
    “block” for each column when creating a pandas.DataFrame from a `RecordBatch`
    or `Table`. While this can temporarily reduce memory note that various pandas
    operations can trigger “consolidation” which may balloon memory use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self_destruct` (`bool`, defaults to `False`) — EXPERIMENTAL: If `True`, attempt
    to deallocate the originating Arrow memory while converting the Arrow object to
    pandas. If you use the object after calling `to_pandas` with this option it will
    crash your program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`types_mapper` (`function`, defaults to `None`) — A function mapping a pyarrow
    DataType to a pandas `ExtensionDtype`. This can be used to override the default
    pandas type for conversion of built-in pyarrow types or in absence of `pandas_metadata`
    in the Table schema. The function receives a pyarrow DataType and is expected
    to return a pandas `ExtensionDtype` or `None` if the default conversion should
    be used for that type. If you have a dictionary mapping, you can pass `dict.get`
    as function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.Series` or `pandas.DataFrame`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.Series` or `pandas.DataFrame` depending on type of object'
  prefs: []
  type: TYPE_NORMAL
- en: Convert to a pandas-compatible NumPy array or DataFrame, as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L306)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '#### `field`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L325)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`Union[int, str]`) — The index or name of the field to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a schema field by its column name or numeric index.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L338)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`Union[int, str]`) — The index or name of the column to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a column by its column name, or numeric index.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `itercolumns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L351)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Iterator over all columns in their numerical order.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `schema`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L360)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Schema of the table and its columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L370)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: List of all columns in numerical order.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L380)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Number of columns in this table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_rows`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L390)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Number of rows in this table.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the definition of a table, all columns have the same number of rows.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `shape`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L403)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`(int, int)`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of rows and number of columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dimensions of the table: (#rows, #columns).'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `nbytes`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L413)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Total number of bytes consumed by the elements of the table.
  prefs: []
  type: TYPE_NORMAL
- en: InMemoryTable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class datasets.table.InMemoryTable`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L639)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The table is said in-memory when it is loaded into the user’s RAM.
  prefs: []
  type: TYPE_NORMAL
- en: Pickling it does copy all the data using memory. Its implementation is simple
    and uses the underlying pyarrow Table methods directly.
  prefs: []
  type: TYPE_NORMAL
- en: This is different from the `MemoryMapped` table, for which pickling doesn’t
    copy all the data in memory. For a `MemoryMapped`, unpickling instead reloads
    the table from the disk.
  prefs: []
  type: TYPE_NORMAL
- en: '`InMemoryTable` must be used when data fit in memory, while `MemoryMapped`
    are reserved for data bigger than memory or when you want the memory footprint
    of your application to stay low.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `validate`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L179)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`full` (`bool`, defaults to `False`) — If `True`, run expensive checks, otherwise
    cheap checks only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`pa.lib.ArrowInvalid`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pa.lib.ArrowInvalid` — if validation fails'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform validation checks. An exception is raised if validation fails.
  prefs: []
  type: TYPE_NORMAL
- en: By default only cheap validation checks are run. Pass `full=True` for thorough
    validation checks (potentially `O(n)`).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `equals`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L195)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`other` ([Table](/docs/datasets/v2.17.0/en/package_reference/table_classes#datasets.table.Table))
    — Table to compare against.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check_metadata` `bool`, defaults to `False`) — Whether schema metadata equality
    should be checked as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: Check if contents of two tables are equal.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_batches`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L212)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`max_chunksize` (`int`, defaults to `None`) — Maximum size for `RecordBatch`
    chunks. Individual chunks may be smaller depending on the chunk layout of individual
    columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert Table to list of (contiguous) `RecordBatch` objects.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_pydict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L226)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`dict`'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the Table to a `dict` or `OrderedDict`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L244)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`memory_pool` (`MemoryPool`, defaults to `None`) — Arrow MemoryPool to use
    for allocations. Uses the default memory pool is not passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strings_to_categorical` (`bool`, defaults to `False`) — Encode string (UTF8)
    and binary types to `pandas.Categorical`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`categories` (`list`, defaults to `empty`) — List of fields that should be
    returned as `pandas.Categorical`. Only applies to table-like data structures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zero_copy_only` (`bool`, defaults to `False`) — Raise an `ArrowException`
    if this function call would require copying the underlying data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integer_object_nulls` (`bool`, defaults to `False`) — Cast integers with nulls
    to objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_as_object` (`bool`, defaults to `True`) — Cast dates to objects. If `False`,
    convert to `datetime64[ns]` dtype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp_as_object` (`bool`, defaults to `False`) — Cast non-nanosecond timestamps
    (`np.datetime64`) to objects. This is useful if you have timestamps that don’t
    fit in the normal date range of nanosecond timestamps (1678 CE-2262 CE). If `False`,
    all timestamps are converted to `datetime64[ns]` dtype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_threads` (`bool`, defaults to `True`) — Whether to parallelize the conversion
    using multiple threads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deduplicate_objects` (`bool`, defaults to `False`) — Do not create multiple
    copies Python objects when created, to save on memory use. Conversion will be
    slower.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_metadata` (`bool`, defaults to `False`) — If `True`, do not use the
    ‘pandas’ metadata to reconstruct the DataFrame index, if present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe` (`bool`, defaults to `True`) — For certain data types, a cast is needed
    in order to store the data in a pandas DataFrame or Series (e.g. timestamps are
    always stored as nanoseconds in pandas). This option controls whether it is a
    safe cast or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split_blocks` (`bool`, defaults to `False`) — If `True`, generate one internal
    “block” for each column when creating a pandas.DataFrame from a `RecordBatch`
    or `Table`. While this can temporarily reduce memory note that various pandas
    operations can trigger “consolidation” which may balloon memory use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self_destruct` (`bool`, defaults to `False`) — EXPERIMENTAL: If `True`, attempt
    to deallocate the originating Arrow memory while converting the Arrow object to
    pandas. If you use the object after calling `to_pandas` with this option it will
    crash your program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`types_mapper` (`function`, defaults to `None`) — A function mapping a pyarrow
    DataType to a pandas `ExtensionDtype`. This can be used to override the default
    pandas type for conversion of built-in pyarrow types or in absence of `pandas_metadata`
    in the Table schema. The function receives a pyarrow DataType and is expected
    to return a pandas `ExtensionDtype` or `None` if the default conversion should
    be used for that type. If you have a dictionary mapping, you can pass `dict.get`
    as function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.Series` or `pandas.DataFrame`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.Series` or `pandas.DataFrame` depending on type of object'
  prefs: []
  type: TYPE_NORMAL
- en: Convert to a pandas-compatible NumPy array or DataFrame, as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L306)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '#### `field`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L325)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`Union[int, str]`) — The index or name of the field to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a schema field by its column name or numeric index.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L338)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`Union[int, str]`) — The index or name of the column to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a column by its column name, or numeric index.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `itercolumns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L351)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Iterator over all columns in their numerical order.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `schema`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L360)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Schema of the table and its columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L370)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: List of all columns in numerical order.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L380)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Number of columns in this table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_rows`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L390)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Number of rows in this table.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the definition of a table, all columns have the same number of rows.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `shape`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L403)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`(int, int)`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of rows and number of columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dimensions of the table: (#rows, #columns).'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `nbytes`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L413)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Total number of bytes consumed by the elements of the table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `column_names`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L420)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Names of the table’s columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `slice`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L794)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`offset` (`int`, defaults to `0`) — Offset from start of table to slice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length` (`int`, defaults to `None`) — Length of slice (default is until end
    of table starting from offset).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compute zero-copy slice of this Table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `filter`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L811)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Select records from a Table. See `pyarrow.compute.filter` for full usage.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `flatten`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L817)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`memory_pool` (`MemoryPool`, defaults to `None`) — For memory allocations,
    if required, otherwise use default pool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flatten this Table. Each column with a struct type is flattened into one column
    per struct field. Other columns are left unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `combine_chunks`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L831)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`memory_pool` (`MemoryPool`, defaults to `None`) — For memory allocations,
    if required, otherwise use default pool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a new table by combining the chunks this table has.
  prefs: []
  type: TYPE_NORMAL
- en: All the underlying chunks in the `ChunkedArray` of each column are concatenated
    into zero or one chunk.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `cast`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L847)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`target_schema` (`Schema`) — Schema to cast to, the names and order of fields
    must match.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe` (`bool`, defaults to `True`) — Check for overflows or other unsafe conversions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cast table values to another schema.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `replace_schema_metadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L862)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` (`dict`, defaults to `None`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: shallow_copy
  prefs: []
  type: TYPE_NORMAL
- en: 'EXPERIMENTAL: Create shallow copy of table by replacing schema key-value metadata
    with the indicated new metadata (which may be `None`, which deletes any existing
    metadata).'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `add_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L876)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`int`) — Index to place the column at.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`field_` (`Union[str, pyarrow.Field]`) — If a string is passed then the type
    is deduced from the column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column` (`Union[pyarrow.Array, List[pyarrow.Array]]`) — Column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the passed column added.
  prefs: []
  type: TYPE_NORMAL
- en: Add column to Table at position.
  prefs: []
  type: TYPE_NORMAL
- en: A new table is returned with the column added, the original table object is
    left unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `append_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L897)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`field_` (`Union[str, pyarrow.Field]`) — If a string is passed then the type
    is deduced from the column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column` (`Union[pyarrow.Array, List[pyarrow.Array]]`) — Column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the passed column added.
  prefs: []
  type: TYPE_NORMAL
- en: Append column at end of columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `remove_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L914)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`int`) — Index of column to remove.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table without the column.
  prefs: []
  type: TYPE_NORMAL
- en: Create new Table with the indicated column removed.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L928)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`int`) — Index to place the column at.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`field_` (`Union[str, pyarrow.Field]`) — If a string is passed then the type
    is deduced from the column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column` (`Union[pyarrow.Array, List[pyarrow.Array]]`) — Column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the passed column set.
  prefs: []
  type: TYPE_NORMAL
- en: Replace column in Table at position.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `rename_columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L947)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Create new table with columns renamed to provided names.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `select`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L970)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`columns` (`Union[List[str], List[int]]`) — The column names or integer indices
    to select.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[datasets.table.Table](/docs/datasets/v2.17.0/en/package_reference/table_classes#datasets.table.Table)'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the specified columns, and metadata preserved.
  prefs: []
  type: TYPE_NORMAL
- en: Select columns of the table.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new table with the specified columns, and metadata preserved.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `drop`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L953)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`columns` (`List[str]`) — List of field names referencing existing columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table without the columns.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`KeyError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KeyError` — : if any of the passed columns name are not existing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop one or more columns and return a new table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_file`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L654)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '#### `from_buffer`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L659)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '#### `from_pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L664)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`df` (`pandas.DataFrame`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` (`pyarrow.Schema`, *optional*) — The expected schema of the Arrow
    Table. This can be used to indicate the type of columns if we cannot infer it
    automatically. If passed, the output will have exactly this schema. Columns specified
    in the schema that are not found in the DataFrame columns or its index will raise
    an error. Additional columns or index levels in the DataFrame which are not specified
    in the schema will be ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preserve_index` (`bool`, *optional*) — Whether to store the index as an additional
    column in the resulting `Table`. The default of None will store the index as a
    column, except for RangeIndex which is stored as metadata only. Use `preserve_index=True`
    to force it to be stored as a column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nthreads` (`int`, defaults to `None` (may use up to system CPU count threads))
    — If greater than 1, convert columns to Arrow in parallel using indicated number
    of threads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`columns` (`List[str]`, *optional*) — List of column to be converted. If `None`,
    use all columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe` (`bool`, defaults to `True`) — Check for overflows or other unsafe conversions,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: Convert pandas.DataFrame to an Arrow Table.
  prefs: []
  type: TYPE_NORMAL
- en: The column types in the resulting Arrow Table are inferred from the dtypes of
    the pandas.Series in the DataFrame. In the case of non-object Series, the NumPy
    dtype is translated to its Arrow equivalent. In the case of `object`, we need
    to guess the datatype by looking at the Python objects in this Series.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that Series of the `object` dtype don’t carry enough information to
    always lead to a meaningful Arrow type. In the case that we cannot infer a type,
    e.g. because the DataFrame is of length 0 or the Series only contains `None/nan`
    objects, the type is set to null. This behavior can be avoided by constructing
    an explicit schema and passing it to this function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '#### `from_arrays`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L722)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`arrays` (`List[Union[pyarrow.Array, pyarrow.ChunkedArray]]`) — Equal-length
    arrays that should form the table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`names` (`List[str]`, *optional*) — Names for the table columns. If not passed,
    schema must be passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` (`Schema`, defaults to `None`) — Schema for the created table. If
    not passed, names must be passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metadata` (`Union[dict, Mapping]`, defaults to `None`) — Optional metadata
    for the schema (if inferred).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Construct a Table from Arrow arrays.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_pydict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L742)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`mapping` (`Union[dict, Mapping]`) — A mapping of strings to Arrays or Python
    lists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` (`Schema`, defaults to `None`) — If not passed, will be inferred from
    the Mapping values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metadata` (`Union[dict, Mapping]`, defaults to `None`) — Optional metadata
    for the schema (if inferred).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Construct a Table from Arrow arrays or columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_batches`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L778)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batches` (`Union[Sequence[pyarrow.RecordBatch], Iterator[pyarrow.RecordBatch]]`)
    — Sequence of `RecordBatch` to be converted, all schemas must be equal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schema` (`Schema`, defaults to `None`) — If not passed, will be inferred from
    the first `RecordBatch`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: Construct a Table from a sequence or iterator of Arrow `RecordBatches`.
  prefs: []
  type: TYPE_NORMAL
- en: MemoryMappedTable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class datasets.table.MemoryMappedTable`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L990)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The table is said memory mapped when it doesn’t use the user’s RAM but loads
    the data from the disk instead.
  prefs: []
  type: TYPE_NORMAL
- en: Pickling it doesn’t copy the data into memory. Instead, only the path to the
    memory mapped arrow file is pickled, as well as the list of transforms to “replay”
    when reloading the table from the disk.
  prefs: []
  type: TYPE_NORMAL
- en: Its implementation requires to store an history of all the transforms that were
    applied to the underlying pyarrow Table, so that they can be “replayed” when reloading
    the Table from the disk.
  prefs: []
  type: TYPE_NORMAL
- en: This is different from the `InMemoryTable` table, for which pickling does copy
    all the data in memory.
  prefs: []
  type: TYPE_NORMAL
- en: '`InMemoryTable` must be used when data fit in memory, while `MemoryMapped`
    are reserved for data bigger than memory or when you want the memory footprint
    of your application to stay low.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `validate`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L179)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`full` (`bool`, defaults to `False`) — If `True`, run expensive checks, otherwise
    cheap checks only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`pa.lib.ArrowInvalid`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pa.lib.ArrowInvalid` — if validation fails'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform validation checks. An exception is raised if validation fails.
  prefs: []
  type: TYPE_NORMAL
- en: By default only cheap validation checks are run. Pass `full=True` for thorough
    validation checks (potentially `O(n)`).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `equals`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L195)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`other` ([Table](/docs/datasets/v2.17.0/en/package_reference/table_classes#datasets.table.Table))
    — Table to compare against.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check_metadata` `bool`, defaults to `False`) — Whether schema metadata equality
    should be checked as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: Check if contents of two tables are equal.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_batches`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L212)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`max_chunksize` (`int`, defaults to `None`) — Maximum size for `RecordBatch`
    chunks. Individual chunks may be smaller depending on the chunk layout of individual
    columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert Table to list of (contiguous) `RecordBatch` objects.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_pydict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L226)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`dict`'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the Table to a `dict` or `OrderedDict`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L244)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`memory_pool` (`MemoryPool`, defaults to `None`) — Arrow MemoryPool to use
    for allocations. Uses the default memory pool is not passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strings_to_categorical` (`bool`, defaults to `False`) — Encode string (UTF8)
    and binary types to `pandas.Categorical`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`categories` (`list`, defaults to `empty`) — List of fields that should be
    returned as `pandas.Categorical`. Only applies to table-like data structures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zero_copy_only` (`bool`, defaults to `False`) — Raise an `ArrowException`
    if this function call would require copying the underlying data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integer_object_nulls` (`bool`, defaults to `False`) — Cast integers with nulls
    to objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_as_object` (`bool`, defaults to `True`) — Cast dates to objects. If `False`,
    convert to `datetime64[ns]` dtype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp_as_object` (`bool`, defaults to `False`) — Cast non-nanosecond timestamps
    (`np.datetime64`) to objects. This is useful if you have timestamps that don’t
    fit in the normal date range of nanosecond timestamps (1678 CE-2262 CE). If `False`,
    all timestamps are converted to `datetime64[ns]` dtype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_threads` (`bool`, defaults to `True`) — Whether to parallelize the conversion
    using multiple threads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deduplicate_objects` (`bool`, defaults to `False`) — Do not create multiple
    copies Python objects when created, to save on memory use. Conversion will be
    slower.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_metadata` (`bool`, defaults to `False`) — If `True`, do not use the
    ‘pandas’ metadata to reconstruct the DataFrame index, if present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe` (`bool`, defaults to `True`) — For certain data types, a cast is needed
    in order to store the data in a pandas DataFrame or Series (e.g. timestamps are
    always stored as nanoseconds in pandas). This option controls whether it is a
    safe cast or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split_blocks` (`bool`, defaults to `False`) — If `True`, generate one internal
    “block” for each column when creating a pandas.DataFrame from a `RecordBatch`
    or `Table`. While this can temporarily reduce memory note that various pandas
    operations can trigger “consolidation” which may balloon memory use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self_destruct` (`bool`, defaults to `False`) — EXPERIMENTAL: If `True`, attempt
    to deallocate the originating Arrow memory while converting the Arrow object to
    pandas. If you use the object after calling `to_pandas` with this option it will
    crash your program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`types_mapper` (`function`, defaults to `None`) — A function mapping a pyarrow
    DataType to a pandas `ExtensionDtype`. This can be used to override the default
    pandas type for conversion of built-in pyarrow types or in absence of `pandas_metadata`
    in the Table schema. The function receives a pyarrow DataType and is expected
    to return a pandas `ExtensionDtype` or `None` if the default conversion should
    be used for that type. If you have a dictionary mapping, you can pass `dict.get`
    as function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.Series` or `pandas.DataFrame`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.Series` or `pandas.DataFrame` depending on type of object'
  prefs: []
  type: TYPE_NORMAL
- en: Convert to a pandas-compatible NumPy array or DataFrame, as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L306)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '#### `field`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L325)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`Union[int, str]`) — The index or name of the field to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a schema field by its column name or numeric index.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L338)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`Union[int, str]`) — The index or name of the column to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a column by its column name, or numeric index.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `itercolumns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L351)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Iterator over all columns in their numerical order.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `schema`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L360)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Schema of the table and its columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L370)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: List of all columns in numerical order.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L380)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Number of columns in this table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_rows`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L390)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Number of rows in this table.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the definition of a table, all columns have the same number of rows.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `shape`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L403)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`(int, int)`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of rows and number of columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dimensions of the table: (#rows, #columns).'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `nbytes`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L413)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Total number of bytes consumed by the elements of the table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `column_names`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L420)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Names of the table’s columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `slice`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1049)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`offset` (`int`, defaults to `0`) — Offset from start of table to slice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length` (`int`, defaults to `None`) — Length of slice (default is until end
    of table starting from offset).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compute zero-copy slice of this Table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `filter`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1068)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Select records from a Table. See `pyarrow.compute.filter` for full usage.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `flatten`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1076)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`memory_pool` (`MemoryPool`, defaults to `None`) — For memory allocations,
    if required, otherwise use default pool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flatten this Table. Each column with a struct type is flattened into one column
    per struct field. Other columns are left unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `combine_chunks`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1092)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`memory_pool` (`MemoryPool`, defaults to `None`) — For memory allocations,
    if required, otherwise use default pool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a new table by combining the chunks this table has.
  prefs: []
  type: TYPE_NORMAL
- en: All the underlying chunks in the ChunkedArray of each column are concatenated
    into zero or one chunk.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `cast`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1110)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`target_schema` (`Schema`) — Schema to cast to, the names and order of fields
    must match.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe` (`bool`, defaults to `True`) — Check for overflows or other unsafe conversions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cast table values to another schema
  prefs: []
  type: TYPE_NORMAL
- en: '#### `replace_schema_metadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1127)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` (`dict`, defaults to `None`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: shallow_copy
  prefs: []
  type: TYPE_NORMAL
- en: 'EXPERIMENTAL: Create shallow copy of table by replacing schema key-value metadata
    with the indicated new metadata (which may be None, which deletes any existing
    metadata.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `add_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1143)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`int`) — Index to place the column at.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`field_` (`Union[str, pyarrow.Field]`) — If a string is passed then the type
    is deduced from the column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column` (`Union[pyarrow.Array, List[pyarrow.Array]]`) — Column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the passed column added.
  prefs: []
  type: TYPE_NORMAL
- en: Add column to Table at position.
  prefs: []
  type: TYPE_NORMAL
- en: A new table is returned with the column added, the original table object is
    left unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `append_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1166)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`field_` (`Union[str, pyarrow.Field]`) — If a string is passed then the type
    is deduced from the column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column` (`Union[pyarrow.Array, List[pyarrow.Array]]`) — Column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the passed column added.
  prefs: []
  type: TYPE_NORMAL
- en: Append column at end of columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `remove_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1185)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`int`) — Index of column to remove.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table without the column.
  prefs: []
  type: TYPE_NORMAL
- en: Create new Table with the indicated column removed.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1201)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`int`) — Index to place the column at.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`field_` (`Union[str, pyarrow.Field]`) — If a string is passed then the type
    is deduced from the column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column` (`Union[pyarrow.Array, List[pyarrow.Array]]`) — Column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the passed column set.
  prefs: []
  type: TYPE_NORMAL
- en: Replace column in Table at position.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `rename_columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1222)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Create new table with columns renamed to provided names.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `select`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1249)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`columns` (`Union[List[str], List[int]]`) — The column names or integer indices
    to select.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[datasets.table.Table](/docs/datasets/v2.17.0/en/package_reference/table_classes#datasets.table.Table)'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the specified columns, and metadata preserved.
  prefs: []
  type: TYPE_NORMAL
- en: Select columns of the table.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new table with the specified columns, and metadata preserved.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `drop`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1230)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`columns` (`List[str]`) — List of field names referencing existing columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table without the columns.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`KeyError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KeyError` — : if any of the passed columns name are not existing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop one or more columns and return a new table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_file`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1016)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: ConcatenationTable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class datasets.table.ConcatenationTable`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1274)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The table comes from the concatenation of several tables called blocks. It enables
    concatenation on both axis 0 (append rows) and axis 1 (append columns).
  prefs: []
  type: TYPE_NORMAL
- en: 'The underlying tables are called “blocks” and can be either `InMemoryTable`
    or `MemoryMappedTable` objects. This allows to combine tables that come from memory
    or that are memory mapped. When a `ConcatenationTable` is pickled, then each block
    is pickled:'
  prefs: []
  type: TYPE_NORMAL
- en: the `InMemoryTable` objects are pickled by copying all the data in memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the MemoryMappedTable objects are pickled without copying the data into memory.
    Instead, only the path to the memory mapped arrow file is pickled, as well as
    the list of transforms to “replays” when reloading the table from the disk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its implementation requires to store each block separately. The `blocks` attributes
    stores a list of list of blocks. The first axis concatenates the tables along
    the axis 0 (it appends rows), while the second axis concatenates tables along
    the axis 1 (it appends columns).
  prefs: []
  type: TYPE_NORMAL
- en: If some columns are missing when concatenating on axis 0, they are filled with
    null values. This is done using `pyarrow.concat_tables(tables, promote=True)`.
  prefs: []
  type: TYPE_NORMAL
- en: You can access the fully combined table by accessing the `ConcatenationTable.table`
    attribute, and the blocks by accessing the `ConcatenationTable.blocks` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `validate`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L179)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`full` (`bool`, defaults to `False`) — If `True`, run expensive checks, otherwise
    cheap checks only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`pa.lib.ArrowInvalid`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pa.lib.ArrowInvalid` — if validation fails'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform validation checks. An exception is raised if validation fails.
  prefs: []
  type: TYPE_NORMAL
- en: By default only cheap validation checks are run. Pass `full=True` for thorough
    validation checks (potentially `O(n)`).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `equals`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L195)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`other` ([Table](/docs/datasets/v2.17.0/en/package_reference/table_classes#datasets.table.Table))
    — Table to compare against.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`check_metadata` `bool`, defaults to `False`) — Whether schema metadata equality
    should be checked as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`bool`'
  prefs: []
  type: TYPE_NORMAL
- en: Check if contents of two tables are equal.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_batches`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L212)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`max_chunksize` (`int`, defaults to `None`) — Maximum size for `RecordBatch`
    chunks. Individual chunks may be smaller depending on the chunk layout of individual
    columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert Table to list of (contiguous) `RecordBatch` objects.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_pydict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L226)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`dict`'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the Table to a `dict` or `OrderedDict`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_pandas`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L244)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`memory_pool` (`MemoryPool`, defaults to `None`) — Arrow MemoryPool to use
    for allocations. Uses the default memory pool is not passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strings_to_categorical` (`bool`, defaults to `False`) — Encode string (UTF8)
    and binary types to `pandas.Categorical`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`categories` (`list`, defaults to `empty`) — List of fields that should be
    returned as `pandas.Categorical`. Only applies to table-like data structures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zero_copy_only` (`bool`, defaults to `False`) — Raise an `ArrowException`
    if this function call would require copying the underlying data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integer_object_nulls` (`bool`, defaults to `False`) — Cast integers with nulls
    to objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_as_object` (`bool`, defaults to `True`) — Cast dates to objects. If `False`,
    convert to `datetime64[ns]` dtype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp_as_object` (`bool`, defaults to `False`) — Cast non-nanosecond timestamps
    (`np.datetime64`) to objects. This is useful if you have timestamps that don’t
    fit in the normal date range of nanosecond timestamps (1678 CE-2262 CE). If `False`,
    all timestamps are converted to `datetime64[ns]` dtype.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_threads` (`bool`, defaults to `True`) — Whether to parallelize the conversion
    using multiple threads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deduplicate_objects` (`bool`, defaults to `False`) — Do not create multiple
    copies Python objects when created, to save on memory use. Conversion will be
    slower.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_metadata` (`bool`, defaults to `False`) — If `True`, do not use the
    ‘pandas’ metadata to reconstruct the DataFrame index, if present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe` (`bool`, defaults to `True`) — For certain data types, a cast is needed
    in order to store the data in a pandas DataFrame or Series (e.g. timestamps are
    always stored as nanoseconds in pandas). This option controls whether it is a
    safe cast or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split_blocks` (`bool`, defaults to `False`) — If `True`, generate one internal
    “block” for each column when creating a pandas.DataFrame from a `RecordBatch`
    or `Table`. While this can temporarily reduce memory note that various pandas
    operations can trigger “consolidation” which may balloon memory use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self_destruct` (`bool`, defaults to `False`) — EXPERIMENTAL: If `True`, attempt
    to deallocate the originating Arrow memory while converting the Arrow object to
    pandas. If you use the object after calling `to_pandas` with this option it will
    crash your program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`types_mapper` (`function`, defaults to `None`) — A function mapping a pyarrow
    DataType to a pandas `ExtensionDtype`. This can be used to override the default
    pandas type for conversion of built-in pyarrow types or in absence of `pandas_metadata`
    in the Table schema. The function receives a pyarrow DataType and is expected
    to return a pandas `ExtensionDtype` or `None` if the default conversion should
    be used for that type. If you have a dictionary mapping, you can pass `dict.get`
    as function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.Series` or `pandas.DataFrame`'
  prefs: []
  type: TYPE_NORMAL
- en: '`pandas.Series` or `pandas.DataFrame` depending on type of object'
  prefs: []
  type: TYPE_NORMAL
- en: Convert to a pandas-compatible NumPy array or DataFrame, as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L306)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '#### `field`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L325)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`Union[int, str]`) — The index or name of the field to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a schema field by its column name or numeric index.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L338)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`Union[int, str]`) — The index or name of the column to retrieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select a column by its column name, or numeric index.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `itercolumns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L351)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Iterator over all columns in their numerical order.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `schema`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L360)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Schema of the table and its columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L370)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: List of all columns in numerical order.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L380)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Number of columns in this table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_rows`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L390)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Number of rows in this table.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the definition of a table, all columns have the same number of rows.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `shape`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L403)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`(int, int)`'
  prefs: []
  type: TYPE_NORMAL
- en: Number of rows and number of columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dimensions of the table: (#rows, #columns).'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `nbytes`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L413)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Total number of bytes consumed by the elements of the table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `column_names`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L420)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Names of the table’s columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `slice`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1480)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`offset` (`int`, defaults to `0`) — Offset from start of table to slice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length` (`int`, defaults to `None`) — Length of slice (default is until end
    of table starting from offset).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compute zero-copy slice of this Table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `filter`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1511)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Select records from a Table. See `pyarrow.compute.filter` for full usage.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `flatten`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1522)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`memory_pool` (`MemoryPool`, defaults to `None`) — For memory allocations,
    if required, otherwise use default pool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flatten this Table. Each column with a struct type is flattened into one column
    per struct field. Other columns are left unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `combine_chunks`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1540)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`memory_pool` (`MemoryPool`, defaults to `None`) — For memory allocations,
    if required, otherwise use default pool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a new table by combining the chunks this table has.
  prefs: []
  type: TYPE_NORMAL
- en: All the underlying chunks in the `ChunkedArray` of each column are concatenated
    into zero or one chunk.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `cast`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1560)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`target_schema` (`Schema`) — Schema to cast to, the names and order of fields
    must match.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe` (`bool`, defaults to `True`) — Check for overflows or other unsafe conversions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cast table values to another schema.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `replace_schema_metadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1591)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` (`dict`, defaults to `None`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: shallow_copy
  prefs: []
  type: TYPE_NORMAL
- en: 'EXPERIMENTAL: Create shallow copy of table by replacing schema key-value metadata
    with the indicated new metadata (which may be `None`, which deletes any existing
    metadata).'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `add_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1609)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`int`) — Index to place the column at.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`field_` (`Union[str, pyarrow.Field]`) — If a string is passed then the type
    is deduced from the column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column` (`Union[pyarrow.Array, List[pyarrow.Array]]`) — Column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the passed column added.
  prefs: []
  type: TYPE_NORMAL
- en: Add column to Table at position.
  prefs: []
  type: TYPE_NORMAL
- en: A new table is returned with the column added, the original table object is
    left unchanged.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `append_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1630)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`field_` (`Union[str, pyarrow.Field]`) — If a string is passed then the type
    is deduced from the column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column` (`Union[pyarrow.Array, List[pyarrow.Array]]`) — Column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the passed column added.
  prefs: []
  type: TYPE_NORMAL
- en: Append column at end of columns.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `remove_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1647)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`int`) — Index of column to remove.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table without the column.
  prefs: []
  type: TYPE_NORMAL
- en: Create new Table with the indicated column removed.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_column`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1671)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`i` (`int`) — Index to place the column at.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`field_` (`Union[str, pyarrow.Field]`) — If a string is passed then the type
    is deduced from the column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column` (`Union[pyarrow.Array, List[pyarrow.Array]]`) — Column data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the passed column set.
  prefs: []
  type: TYPE_NORMAL
- en: Replace column in Table at position.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `rename_columns`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1690)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Create new table with columns renamed to provided names.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `select`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1724)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`columns` (`Union[List[str], List[int]]`) — The column names or integer indices
    to select.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[datasets.table.Table](/docs/datasets/v2.17.0/en/package_reference/table_classes#datasets.table.Table)'
  prefs: []
  type: TYPE_NORMAL
- en: New table with the specified columns, and metadata preserved.
  prefs: []
  type: TYPE_NORMAL
- en: Select columns of the table.
  prefs: []
  type: TYPE_NORMAL
- en: Returns a new table with the specified columns, and metadata preserved.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `drop`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1703)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`columns` (`List[str]`) — List of field names referencing existing columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: New table without the columns.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`KeyError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`KeyError` — : if any of the passed columns name are not existing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop one or more columns and return a new table.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_blocks`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1376)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '#### `from_tables`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1390)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`tables` (list of `Table` or list of `pyarrow.Table`) — List of tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axis` (`{0, 1}`, defaults to `0`, meaning over rows) — Axis to concatenate
    over, where `0` means over rows (vertically) and `1` means over columns (horizontally).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in 1.6.0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create `ConcatenationTable` from list of tables.
  prefs: []
  type: TYPE_NORMAL
- en: Utils
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '#### `datasets.table.concat_tables`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1744)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`tables` (list of `Table`) — List of tables to be concatenated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axis` (`{0, 1}`, defaults to `0`, meaning over rows) — Axis to concatenate
    over, where `0` means over rows (vertically) and `1` means over columns (horizontally).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Added in 1.6.0
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`datasets.table.Table`'
  prefs: []
  type: TYPE_NORMAL
- en: If the number of input tables is > 1, then the returned table is a `datasets.table.ConcatenationTable`.
    Otherwise if there’s only one table, it is returned as is.
  prefs: []
  type: TYPE_NORMAL
- en: Concatenate tables.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `datasets.table.list_table_cache_files`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/datasets/blob/2.17.0/src/datasets/table.py#L1767)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of paths to the cache files loaded by the table.
  prefs: []
  type: TYPE_NORMAL
- en: Get the cache files that are loaded by the table. Cache file are used when parts
    of the table come from the disk via memory mapping.
  prefs: []
  type: TYPE_NORMAL
