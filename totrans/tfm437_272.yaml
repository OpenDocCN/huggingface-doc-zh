- en: LeViT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/levit](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/levit)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The LeViT model was proposed in [LeViT: Introducing Convolutions to Vision
    Transformers](https://arxiv.org/abs/2104.01136) by Ben Graham, Alaaeldin El-Nouby,
    Hugo Touvron, Pierre Stock, Armand Joulin, Herv√© J√©gou, Matthijs Douze. LeViT
    improves the [Vision Transformer (ViT)](vit) in performance and efficiency by
    a few architectural differences such as activation maps with decreasing resolutions
    in Transformers and the introduction of an attention bias to integrate positional
    information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*We design a family of image classification architectures that optimize the
    trade-off between accuracy and efficiency in a high-speed regime. Our work exploits
    recent findings in attention-based architectures, which are competitive on highly
    parallel processing hardware. We revisit principles from the extensive literature
    on convolutional neural networks to apply them to transformers, in particular
    activation maps with decreasing resolutions. We also introduce the attention bias,
    a new way to integrate positional information in vision transformers. As a result,
    we propose LeVIT: a hybrid neural network for fast inference image classification.
    We consider different measures of efficiency on different hardware platforms,
    so as to best reflect a wide range of application scenarios. Our extensive experiments
    empirically validate our technical choices and show they are suitable to most
    architectures. Overall, LeViT significantly outperforms existing convnets and
    vision transformers with respect to the speed/accuracy tradeoff. For example,
    at 80% ImageNet top-1 accuracy, LeViT is 5 times faster than EfficientNet on CPU.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![drawing](../Images/79a4bb02ada009fb7b657999872ea7e3.png) LeViT Architecture.
    Taken from the [original paper](https://arxiv.org/abs/2104.01136).'
  prefs: []
  type: TYPE_NORMAL
- en: This model was contributed by [anugunj](https://huggingface.co/anugunj). The
    original code can be found [here](https://github.com/facebookresearch/LeViT).
  prefs: []
  type: TYPE_NORMAL
- en: Usage tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Compared to ViT, LeViT models use an additional distillation head to effectively
    learn from a teacher (which, in the LeViT paper, is a ResNet like-model). The
    distillation head is learned through backpropagation under supervision of a ResNet
    like-model. They also draw inspiration from convolution neural networks to use
    activation maps with decreasing resolutions to increase the efficiency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are 2 ways to fine-tune distilled models, either (1) in a classic way,
    by only placing a prediction head on top of the final hidden state and not using
    the distillation head, or (2) by placing both a prediction head and distillation
    head on top of the final hidden state. In that case, the prediction head is trained
    using regular cross-entropy between the prediction of the head and the ground-truth
    label, while the distillation prediction head is trained using hard distillation
    (cross-entropy between the prediction of the distillation head and the label predicted
    by the teacher). At inference time, one takes the average prediction between both
    heads as final prediction. (2) is also called ‚Äúfine-tuning with distillation‚Äù,
    because one relies on a teacher that has already been fine-tuned on the downstream
    dataset. In terms of models, (1) corresponds to [LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)
    and (2) corresponds to [LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All released checkpoints were pre-trained and fine-tuned on [ImageNet-1k](https://huggingface.co/datasets/imagenet-1k)
    (also referred to as ILSVRC 2012, a collection of 1.3 million images and 1,000
    classes). only. No external data was used. This is in contrast with the original
    ViT model, which used external data like the JFT-300M dataset/Imagenet-21k for
    pre-training.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The authors of LeViT released 5 trained LeViT models, which you can directly
    plug into [LevitModel](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitModel)
    or [LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification).
    Techniques like data augmentation, optimization, and regularization were used
    in order to simulate training on a much larger dataset (while only using ImageNet-1k
    for pre-training). The 5 variants available are (all trained on images of size
    224x224): *facebook/levit-128S*, *facebook/levit-128*, *facebook/levit-192*, *facebook/levit-256*
    and *facebook/levit-384*. Note that one should use [LevitImageProcessor](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitImageProcessor)
    in order to prepare images for the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher)
    currently supports only inference and not training or fine-tuning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can check out demo notebooks regarding inference as well as fine-tuning
    on custom data [here](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/VisionTransformer)
    (you can just replace [ViTFeatureExtractor](/docs/transformers/v4.37.2/en/model_doc/vit#transformers.ViTFeatureExtractor)
    by [LevitImageProcessor](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitImageProcessor)
    and [ViTForImageClassification](/docs/transformers/v4.37.2/en/model_doc/vit#transformers.ViTForImageClassification)
    by [LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)
    or [LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of official Hugging Face and community (indicated by üåé) resources to
    help you get started with LeViT.
  prefs: []
  type: TYPE_NORMAL
- en: Image Classification
  prefs: []
  type: TYPE_NORMAL
- en: '[LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)
    is supported by this [example script](https://github.com/huggingface/transformers/tree/main/examples/pytorch/image-classification)
    and [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification.ipynb).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See also: [Image classification task guide](../tasks/image_classification)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you‚Äôre interested in submitting a resource to be included here, please feel
    free to open a Pull Request and we‚Äôll review it! The resource should ideally demonstrate
    something new instead of duplicating an existing resource.
  prefs: []
  type: TYPE_NORMAL
- en: LevitConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.LevitConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/configuration_levit.py#L35)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`image_size` (`int`, *optional*, defaults to 224) ‚Äî The size of the input image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_channels` (`int`, *optional*, defaults to 3) ‚Äî Number of channels in the
    input image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel_size` (`int`, *optional*, defaults to 3) ‚Äî The kernel size for the
    initial convolution layers of patch embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stride` (`int`, *optional*, defaults to 2) ‚Äî The stride size for the initial
    convolution layers of patch embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding` (`int`, *optional*, defaults to 1) ‚Äî The padding size for the initial
    convolution layers of patch embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`patch_size` (`int`, *optional*, defaults to 16) ‚Äî The patch size for embeddings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_sizes` (`List[int]`, *optional*, defaults to `[128, 256, 384]`) ‚Äî Dimension
    of each of the encoder blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_attention_heads` (`List[int]`, *optional*, defaults to `[4, 8, 12]`) ‚Äî
    Number of attention heads for each attention layer in each block of the Transformer
    encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`depths` (`List[int]`, *optional*, defaults to `[4, 4, 4]`) ‚Äî The number of
    layers in each encoder block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key_dim` (`List[int]`, *optional*, defaults to `[16, 16, 16]`) ‚Äî The size
    of key in each of the encoder blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drop_path_rate` (`int`, *optional*, defaults to 0) ‚Äî The dropout probability
    for stochastic depths, used in the blocks of the Transformer encoder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mlp_ratios` (`List[int]`, *optional*, defaults to `[2, 2, 2]`) ‚Äî Ratio of
    the size of the hidden layer compared to the size of the input layer of the Mix
    FFNs in the encoder blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_ratios` (`List[int]`, *optional*, defaults to `[2, 2, 2]`) ‚Äî Ratio
    of the size of the output dimension compared to input dimension of attention layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initializer_range` (`float`, *optional*, defaults to 0.02) ‚Äî The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the configuration class to store the configuration of a [LevitModel](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitModel).
    It is used to instantiate a LeViT model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the LeViT [facebook/levit-128S](https://huggingface.co/facebook/levit-128S)
    architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: LevitFeatureExtractor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.LevitFeatureExtractor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/feature_extraction_levit.py#L26)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '#### `__call__`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Preprocess an image or a batch of images.
  prefs: []
  type: TYPE_NORMAL
- en: LevitImageProcessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.LevitImageProcessor`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/image_processing_levit.py#L45)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) ‚Äî Wwhether to resize the
    shortest edge of the input to int(256/224 *`size`). Can be overridden by the `do_resize`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (`Dict[str, int]`, *optional*, defaults to `{"shortest_edge" -- 224}`):
    Size of the output image after resizing. If size is a dict with keys ‚Äúwidth‚Äù and
    ‚Äúheight‚Äù, the image will be resized to `(size["height"], size["width"])`. If size
    is a dict with key ‚Äúshortest_edge‚Äù, the shortest edge value `c` is rescaled to
    `int(c * (256/224))`. The smaller edge of the image will be matched to this value
    i.e, if height > width, then image will be rescaled to `(size["shortest_egde"]
    * height / width, size["shortest_egde"])`. Can be overridden by the `size` parameter
    in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `Resampling.BICUBIC`)
    ‚Äî Resampling filter to use if resizing the image. Can be overridden by the `resample`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_center_crop` (`bool`, *optional*, defaults to `True`) ‚Äî Whether or not
    to center crop the input to `(crop_size["height"], crop_size["width"])`. Can be
    overridden by the `do_center_crop` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crop_size` (`Dict`, *optional*, defaults to `{"height" -- 224, "width": 224}`):
    Desired image size after `center_crop`. Can be overridden by the `crop_size` parameter
    in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) ‚Äî Controls whether to
    rescale the image by the specified scale `rescale_factor`. Can be overridden by
    the `do_rescale` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) ‚Äî Scale
    factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_normalize` (`bool`, *optional*, defaults to `True`) ‚Äî Controls whether
    to normalize the image. Can be overridden by the `do_normalize` parameter in the
    `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_mean` (`List[int]`, *optional*, defaults to `[0.485, 0.456, 0.406]`)
    ‚Äî Mean to use if normalizing the image. This is a float or list of floats the
    length of the number of channels in the image. Can be overridden by the `image_mean`
    parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_std` (`List[int]`, *optional*, defaults to `[0.229, 0.224, 0.225]`)
    ‚Äî Standard deviation to use if normalizing the image. This is a float or list
    of floats the length of the number of channels in the image. Can be overridden
    by the `image_std` parameter in the `preprocess` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructs a LeViT image processor.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `preprocess`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/image_processing_levit.py#L173)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`images` (`ImageInput`) ‚Äî Image or batch of images to preprocess. Expects a
    single or batch of images with pixel values ranging from 0 to 255\. If passing
    in images with pixel values between 0 and 1, set `do_rescale=False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_resize` (`bool`, *optional*, defaults to `self.do_resize`) ‚Äî Whether to
    resize the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (`Dict[str, int]`, *optional*, defaults to `self.size`) ‚Äî Size of the
    output image after resizing. If size is a dict with keys ‚Äúwidth‚Äù and ‚Äúheight‚Äù,
    the image will be resized to (height, width). If size is a dict with key ‚Äúshortest_edge‚Äù,
    the shortest edge value `c` is rescaled to int(`c` *(256/224)). The smaller edge
    of the image will be matched to this value i.e, if height > width, then image
    will be rescaled to (size* height / width, size).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `PILImageResampling.BICUBIC`)
    ‚Äî Resampling filter to use when resiizing the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_center_crop` (`bool`, *optional*, defaults to `self.do_center_crop`) ‚Äî
    Whether to center crop the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `self.crop_size`) ‚Äî
    Size of the output image after center cropping. Crops images to (crop_size[‚Äúheight‚Äù],
    crop_size[‚Äúwidth‚Äù]).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_rescale` (`bool`, *optional*, defaults to `self.do_rescale`) ‚Äî Whether
    to rescale the image pixel values by `rescaling_factor` - typical to values between
    0 and 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rescale_factor` (`float`, *optional*, defaults to `self.rescale_factor`) ‚Äî
    Factor to rescale the image pixel values by.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_normalize` (`bool`, *optional*, defaults to `self.do_normalize`) ‚Äî Whether
    to normalize the image pixel values by `image_mean` and `image_std`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `self.image_mean`)
    ‚Äî Mean to normalize the image pixel values by.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `self.image_std`)
    ‚Äî Standard deviation to normalize the image pixel values by.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or `TensorType`, *optional*) ‚Äî The type of tensors
    to return. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Return a list of `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data_format` (`str` or `ChannelDimension`, *optional*, defaults to `ChannelDimension.FIRST`)
    ‚Äî The channel dimension format for the output image. If unset, the channel dimension
    format of the input image is used. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) ‚Äî The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocess an image or batch of images to be used as input to a LeViT model.
  prefs: []
  type: TYPE_NORMAL
- en: LevitModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.LevitModel`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L535)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bare Levit model outputting raw features without any specific head on top.
    This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L548)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) ‚Äî Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [LevitImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention` or
    `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.modeling_outputs.BaseModelOutputWithPoolingAndNoAttention` or
    a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) ‚Äî Sequence of hidden-states at the output of the last layer of
    the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pooler_output` (`torch.FloatTensor` of shape `(batch_size, hidden_size)`)
    ‚Äî Last layer hidden-state after a pooling operation on the spatial dimensions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, num_channels, height,
    width)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [LevitModel](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitModel)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: LevitForImageClassification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.LevitForImageClassification`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L592)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Levit Model with an image classification head on top (a linear layer on top
    of the pooled features), e.g. for ImageNet.
  prefs: []
  type: TYPE_NORMAL
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L616)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) ‚Äî Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [LevitImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labels` (`torch.LongTensor` of shape `(batch_size,)`, *optional*) ‚Äî Labels
    for computing the image classification/regression loss. Indices should be in `[0,
    ..., config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is
    computed (Mean-Square loss), If `config.num_labels > 1` a classification loss
    is computed (Cross-Entropy).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) ‚Äî Classification (or regression if config.num_labels==1) loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`) ‚Äî
    Classification (or regression if config.num_labels==1) scores (before SoftMax).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each stage) of shape `(batch_size, num_channels, height,
    width)`. Hidden-states (also called feature maps) of the model at the output of
    each stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [LevitForImageClassification](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassification)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: LevitForImageClassificationWithTeacher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.LevitForImageClassificationWithTeacher`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L677)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    ‚Äî Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LeViT Model transformer with image classification heads on top (a linear layer
    on top of the final hidden state and a linear layer on top of the final hidden
    state of the distillation token) e.g. for ImageNet. .. warning:: This model supports
    inference-only. Fine-tuning with distillation (i.e. with a teacher) is not yet
    supported.'
  prefs: []
  type: TYPE_NORMAL
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/levit/modeling_levit.py#L708)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) ‚Äî Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [LevitImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*) ‚Äî Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*) ‚Äî Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.models.levit.modeling_levit.LevitForImageClassificationWithTeacherOutput`
    or `tuple(torch.FloatTensor)`'
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.models.levit.modeling_levit.LevitForImageClassificationWithTeacherOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([LevitConfig](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitConfig))
    and inputs.
  prefs: []
  type: TYPE_NORMAL
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`) ‚Äî
    Prediction scores as the average of the `cls_logits` and `distillation_logits`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cls_logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`)
    ‚Äî Prediction scores of the classification head (i.e. the linear layer on top of
    the final hidden state of the class token).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`distillation_logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`)
    ‚Äî Prediction scores of the distillation head (i.e. the linear layer on top of
    the final hidden state of the distillation token).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) ‚Äî Tuple of `torch.FloatTensor`
    (one for the output of the embeddings + one for the output of each layer) of shape
    `(batch_size, sequence_length, hidden_size)`. Hidden-states of the model at the
    output of each layer plus the initial embedding outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [LevitForImageClassificationWithTeacher](/docs/transformers/v4.37.2/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher)
    forward method, overrides the `__call__` special method.
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
