- en: Create a dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/datasets/create_dataset](https://huggingface.co/docs/datasets/create_dataset)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, you may need to create a dataset if youâ€™re working with your own
    data. Creating a dataset with ðŸ¤— Datasets confers all the advantages of the library
    to your dataset: fast loading and processing, [stream enormous datasets](stream),
    [memory-mapping](https://huggingface.co/course/chapter5/4?fw=pt#the-magic-of-memory-mapping),
    and more. You can easily and rapidly create a dataset with ðŸ¤— Datasets low-code
    approaches, reducing the time it takes to start training a model. In many cases,
    it is as easy as [dragging and dropping](upload_dataset#upload-with-the-hub-ui)
    your data files into a dataset repository on the Hub.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tutorial, youâ€™ll learn how to use ðŸ¤— Datasets low-code methods for creating
    all types of datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: Folder-based builders for quickly creating an image or audio dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_` methods for creating datasets from local files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Folder-based builders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two folder-based builders, `ImageFolder` and `AudioFolder`. These
    are low-code methods for quickly creating an image or speech and audio dataset
    with several thousand examples. They are great for rapidly prototyping computer
    vision and speech models before scaling to a larger dataset. Folder-based builders
    takes your data and automatically generates the datasetâ€™s features, splits, and
    labels. Under the hood:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ImageFolder` uses the [Image](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Image)
    feature to decode an image file. Many image extension formats are supported, such
    as jpg and png, but other formats are also supported. You can check the complete
    [list](https://github.com/huggingface/datasets/blob/b5672a956d5de864e6f5550e493527d962d6ae55/src/datasets/packaged_modules/imagefolder/imagefolder.py#L39)
    of supported image extensions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AudioFolder` uses the [Audio](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Audio)
    feature to decode an audio file. Audio extensions such as wav and mp3 are supported,
    and you can check the complete [list](https://github.com/huggingface/datasets/blob/b5672a956d5de864e6f5550e493527d962d6ae55/src/datasets/packaged_modules/audiofolder/audiofolder.py#L39)
    of supported audio extensions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dataset splits are generated from the repository structure, and the label
    names are automatically inferred from the directory name.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if your image dataset (it is the same for an audio dataset) is
    stored like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then this is how the folder-based builder generates an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6a5c14251bdec13daced7044c522123.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create the image dataset by specifying `imagefolder` in [load_dataset()](/docs/datasets/v2.17.0/en/package_reference/loading_methods#datasets.load_dataset):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'An audio dataset is created in the same way, except you specify `audiofolder`
    in [load_dataset()](/docs/datasets/v2.17.0/en/package_reference/loading_methods#datasets.load_dataset)
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Any additional information about your dataset, such as text captions or transcriptions,
    can be included with a `metadata.csv` file in the folder containing your dataset.
    The metadata file needs to have a `file_name` column that links the image or audio
    file to its corresponding metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To learn more about each of these folder-based builders, check out the and [ImageFolder](https://huggingface.co/docs/datasets/image_dataset#imagefolder)
    or [AudioFolder](https://huggingface.co/docs/datasets/audio_dataset#audiofolder)
    guides.
  prefs: []
  type: TYPE_NORMAL
- en: From local files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also create a dataset from local files by specifying the path to the
    data files. There are two ways you can create a dataset using the `from_` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: The [from_generator()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.from_generator)
    method is the most memory-efficient way to create a dataset from a [generator](https://wiki.python.org/moin/Generators)
    due to a generators iterative behavior. This is especially useful when youâ€™re
    working with a really large dataset that may not fit in memory, since the dataset
    is generated on disk progressively and then memory-mapped.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A generator-based [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset)
    needs to be iterated over with a `for` loop for example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The [from_dict()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.from_dict)
    method is a straightforward way to create a dataset from a dictionary:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create an image or audio dataset, chain the [cast_column()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.cast_column)
    method with [from_dict()](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.from_dict)
    and specify the column and feature type. For example, to create an audio dataset:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We didnâ€™t mention this in the tutorial, but you can also create a dataset with
    a loading script. A loading script is a more manual and code-intensive method
    for creating a dataset, but it also gives you the most flexibility and control
    over how a dataset is generated. It lets you configure additional options such
    as creating multiple configurations within a dataset, or enabling your dataset
    to be streamed.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about how to write loading scripts, take a look at the [image
    loading script](https://huggingface.co/docs/datasets/main/en/image_dataset#loading-script),
    [audio loading script](https://huggingface.co/docs/datasets/main/en/audio_dataset),
    and [text loading script](https://huggingface.co/docs/datasets/main/en/dataset_script)
    guides.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to create a dataset, consider sharing it on the Hub so
    the community can also benefit from your work! Go on to the next section to learn
    how to share your dataset.
  prefs: []
  type: TYPE_NORMAL
