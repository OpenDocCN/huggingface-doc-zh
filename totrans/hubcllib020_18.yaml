- en: Create and share Model Cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/huggingface_hub/guides/model-cards](https://huggingface.co/docs/huggingface_hub/guides/model-cards)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: The `huggingface_hub` library provides a Python interface to create, share,
    and update Model Cards. Visit [the dedicated documentation page](https://huggingface.co/docs/hub/models-cards)
    for a deeper view of what Model Cards on the Hub are, and how they work under
    the hood.
  prefs: []
  type: TYPE_NORMAL
- en: '[New (beta)! Try our experimental Model Card Creator App](https://huggingface.co/spaces/huggingface/Model_Cards_Writing_Tool)'
  prefs: []
  type: TYPE_NORMAL
- en: Load a Model Card from the Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To load an existing card from the Hub, you can use the [ModelCard.load()](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.RepoCard.load)
    function. Here, we’ll load the card from [`nateraw/vit-base-beans`](https://huggingface.co/nateraw/vit-base-beans).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This card has some helpful attributes that you may want to access/leverage:'
  prefs: []
  type: TYPE_NORMAL
- en: '`card.data`: Returns a [ModelCardData](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.ModelCardData)
    instance with the model card’s metadata. Call `.to_dict()` on this instance to
    get the representation as a dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`card.text`: Returns the text of the card, *excluding the metadata header*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`card.content`: Returns the text content of the card, *including the metadata
    header*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create Model Cards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From Text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To initialize a Model Card from text, just pass the text content of the card
    to the `ModelCard` on init.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way you might want to do this is with f-strings. In the following example,
    we:'
  prefs: []
  type: TYPE_NORMAL
- en: Use [ModelCardData.to_yaml()](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.CardData.to_yaml)
    to convert metadata we defined to YAML so we can use it to insert the YAML block
    in the model card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show how you might use a template variable via Python f-strings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The above example would leave us with a card that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: From a Jinja Template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have `Jinja2` installed, you can create Model Cards from a jinja template
    file. Let’s see a basic example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting card’s markdown looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you update any card.data, it’ll reflect in the card itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, as you can see, the metadata header has been updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you update the card data, you can validate the card is still valid against
    the Hub by calling [ModelCard.validate()](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.RepoCard.validate).
    This ensures that the card passes any validation rules set up on the Hugging Face
    Hub.
  prefs: []
  type: TYPE_NORMAL
- en: From the Default Template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of using your own template, you can also use the [default template](https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/templates/modelcard_template.md),
    which is a fully featured model card with tons of sections you may want to fill
    out. Under the hood, it uses [Jinja2](https://jinja.palletsprojects.com/en/3.1.x/)
    to fill out a template file.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you will have to have Jinja2 installed to use `from_template`. You
    can do so with `pip install Jinja2`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Share Model Cards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’re authenticated with the Hugging Face Hub (either by using `huggingface-cli
    login` or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    you can push cards to the Hub by simply calling [ModelCard.push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.RepoCard.push_to_hub).
    Let’s take a look at how to do that…
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we’ll create a new repo called ‘hf-hub-modelcards-pr-test’ under the
    authenticated user’s namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we’ll create a card from the default template (same as the one defined
    in the section above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we’ll push that up to the hub
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can check out the resulting card [here](https://huggingface.co/nateraw/hf-hub-modelcards-pr-test/blob/main/README.md).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you instead wanted to push a card as a pull request, you can just say `create_pr=True`
    when calling `push_to_hub`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: A resulting PR created from this command can be seen [here](https://huggingface.co/nateraw/hf-hub-modelcards-pr-test/discussions/3).
  prefs: []
  type: TYPE_NORMAL
- en: Update metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section we will see what metadata are in repo cards and how to update
    them.
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` refers to a hash map (or key value) context that provides some high-level
    information about a model, dataset or Space. That information can include details
    such as the model’s `pipeline type`, `model_id` or `model_description`. For more
    detail you can take a look to these guides: [Model Card](https://huggingface.co/docs/hub/model-cards#model-card-metadata),
    [Dataset Card](https://huggingface.co/docs/hub/datasets-cards#dataset-card-metadata)
    and [Spaces Settings](https://huggingface.co/docs/hub/spaces-settings#spaces-settings).
    Now lets see some examples on how to update those metadata.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with a first example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: With these two lines of code you will update the metadata to set a new `pipeline_tag`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, you cannot update a key that is already existing on the card. If
    you want to do so, you must pass `overwrite=True` explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It often happen that you want to suggest some changes to a repository on which
    you don’t have write permission. You can do that by creating a PR on that repo
    which will allow the owners to review and merge your suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Include Evaluation Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To include evaluation results in the metadata `model-index`, you can pass an
    [EvalResult](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.EvalResult)
    or a list of `EvalResult` with your associated evaluation results. Under the hood
    it’ll create the `model-index` when you call `card.data.to_dict()`. For more information
    on how this works, you can check out [this section of the Hub docs](https://huggingface.co/docs/hub/models-cards#evaluation-results).
  prefs: []
  type: TYPE_NORMAL
- en: Note that using this function requires you to include the `model_name` attribute
    in [ModelCardData](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.ModelCardData).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting `card.data` should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have more than one evaluation result you’d like to share, just pass
    a list of `EvalResult`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Which should leave you with the following `card.data`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
