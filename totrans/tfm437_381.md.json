["```py\n>>> from transformers import TrajectoryTransformerConfig, TrajectoryTransformerModel\n\n>>> # Initializing a TrajectoryTransformer CarlCochet/trajectory-transformer-halfcheetah-medium-v2 style configuration\n>>> configuration = TrajectoryTransformerConfig()\n\n>>> # Initializing a model (with random weights) from the CarlCochet/trajectory-transformer-halfcheetah-medium-v2 style configuration\n>>> model = TrajectoryTransformerModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import TrajectoryTransformerModel\n>>> import torch\n\n>>> model = TrajectoryTransformerModel.from_pretrained(\n...     \"CarlCochet/trajectory-transformer-halfcheetah-medium-v2\"\n... )\n>>> model.to(device)\n>>> model.eval()\n\n>>> observations_dim, action_dim, batch_size = 17, 6, 256\n>>> seq_length = observations_dim + action_dim + 1\n\n>>> trajectories = torch.LongTensor([np.random.permutation(self.seq_length) for _ in range(batch_size)]).to(\n...     device\n... )\n>>> targets = torch.LongTensor([np.random.permutation(self.seq_length) for _ in range(batch_size)]).to(device)\n\n>>> outputs = model(\n...     trajectories,\n...     targets=targets,\n...     use_cache=True,\n...     output_attentions=True,\n...     output_hidden_states=True,\n...     return_dict=True,\n... )\n```"]