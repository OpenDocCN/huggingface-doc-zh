- en: Utilities for FeatureExtractors
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征提取器的实用程序
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/internal/audio_utils](https://huggingface.co/docs/transformers/v4.37.2/en/internal/audio_utils)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://huggingface.co/docs/transformers/v4.37.2/en/internal/audio_utils](https://huggingface.co/docs/transformers/v4.37.2/en/internal/audio_utils)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: This page lists all the utility functions that can be used by the audio `FeatureExtractor`
    in order to compute special features from a raw audio using common algorithms
    such as *Short Time Fourier Transform* or *log mel spectrogram*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面列出了所有可以被音频 `FeatureExtractor` 使用的实用函数，以便使用常见算法（如 *短时傅里叶变换* 或 *对数梅尔频谱图*）从原始音频中计算特殊特征。
- en: Most of those are only useful if you are studying the code of the audio processors
    in the library.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，这些只有在研究库中音频处理器的代码时才有用。
- en: Audio Transformations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音频转换
- en: '#### `transformers.audio_utils.hertz_to_mel`'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `transformers.audio_utils.hertz_to_mel`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L25)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L25)'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`freq` (`float` or `np.ndarray`) — The frequency, or multiple frequencies,
    in hertz (Hz).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`freq` (`float` 或 `np.ndarray`) — 要转换的频率，或多个频率，单位为赫兹（Hz）。'
- en: '`mel_scale` (`str`, *optional*, defaults to `"htk"`) — The mel frequency scale
    to use, `"htk"`, `"kaldi"` or `"slaney"`.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mel_scale` (`str`, *可选*, 默认为 `"htk"`) — 要使用的梅尔频率刻度，`"htk"`、`"kaldi"`或`"slaney"`。'
- en: Returns
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`float` or `np.ndarray`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`float` 或 `np.ndarray`'
- en: The frequencies on the mel scale.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 梅尔刻度上的频率。
- en: Convert frequency from hertz to mels.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将频率从赫兹转换为梅尔。
- en: '#### `transformers.audio_utils.mel_to_hertz`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `transformers.audio_utils.mel_to_hertz`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L61)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L61)'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parameters
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`mels` (`float` or `np.ndarray`) — The frequency, or multiple frequencies,
    in mels.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mels` (`float` 或 `np.ndarray`) — 要转换的频率，或多个频率，单位为梅尔。'
- en: '`mel_scale` (`str`, *optional*, `"htk"`) — The mel frequency scale to use,
    `"htk"`, `"kaldi"` or `"slaney"`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mel_scale` (`str`, *可选*, `"htk"`) — 要使用的梅尔频率刻度，`"htk"`、`"kaldi"`或`"slaney"`。'
- en: Returns
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`float` or `np.ndarray`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`float` 或 `np.ndarray`'
- en: The frequencies in hertz.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 赫兹频率。
- en: Convert frequency from mels to hertz.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将频率从梅尔转换为赫兹。
- en: '#### `transformers.audio_utils.mel_filter_bank`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `transformers.audio_utils.mel_filter_bank`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L119)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L119)'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`num_frequency_bins` (`int`) — Number of frequencies used to compute the spectrogram
    (should be the same as in `stft`).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_frequency_bins` (`int`) — 用于计算频谱图的频率数量（应与 `stft` 中的相同）。'
- en: '`num_mel_filters` (`int`) — Number of mel filters to generate.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_mel_filters` (`int`) — 要生成的梅尔滤波器数量。'
- en: '`min_frequency` (`float`) — Lowest frequency of interest in Hz.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min_frequency` (`float`) — 感兴趣的最低频率，单位为赫兹。'
- en: '`max_frequency` (`float`) — Highest frequency of interest in Hz. This should
    not exceed `sampling_rate / 2`.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_frequency` (`float`) — 感兴趣的最高频率，单位为赫兹。不应超过 `sampling_rate / 2`。'
- en: '`sampling_rate` (`int`) — Sample rate of the audio waveform.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sampling_rate` (`int`) — 音频波形的采样率。'
- en: '`norm` (`str`, *optional*) — If `"slaney"`, divide the triangular mel weights
    by the width of the mel band (area normalization).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`norm` (`str`, *可选*) — 如果为 `"slaney"`，则通过梅尔带宽的宽度来除以三角形梅尔权重（面积归一化）。'
- en: '`mel_scale` (`str`, *optional*, defaults to `"htk"`) — The mel frequency scale
    to use, `"htk"`, `"kaldi"` or `"slaney"`.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mel_scale` (`str`, *可选*, 默认为 `"htk"`) — 要使用的梅尔频率刻度，`"htk"`、`"kaldi"`或`"slaney"`。'
- en: '`triangularize_in_mel_space` (`bool`, *optional*, defaults to `False`) — If
    this option is enabled, the triangular filter is applied in mel space rather than
    frequency space. This should be set to `true` in order to get the same results
    as `torchaudio` when computing mel filters.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`triangularize_in_mel_space` (`bool`, *可选*, 默认为 `False`) — 如果启用此选项，则三角形滤波器将在梅尔空间而不是频率空间中应用。为了获得与计算梅尔滤波器时
    `torchaudio` 相同的结果，应将此设置为 `true`。'
- en: Returns
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`np.ndarray` of shape (`num_frequency_bins`, `num_mel_filters`)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 形状为 (`num_frequency_bins`, `num_mel_filters`) 的 `np.ndarray`
- en: Triangular filter bank matrix. This is a projection matrix to go from a spectrogram
    to a mel spectrogram.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 三角形滤波器组矩阵。这是一个投影矩阵，用于从频谱图到梅尔频谱图的转换。
- en: Creates a frequency bin conversion matrix used to obtain a mel spectrogram.
    This is called a *mel filter bank*, and various implementation exist, which differ
    in the number of filters, the shape of the filters, the way the filters are spaced,
    the bandwidth of the filters, and the manner in which the spectrum is warped.
    The goal of these features is to approximate the non-linear human perception of
    the variation in pitch with respect to the frequency.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用于获取梅尔频谱图的频率箱转换矩阵。这称为 *梅尔滤波器组*，存在各种实现，这些实现在滤波器数量、滤波器形状、滤波器间距、滤波器带宽以及频谱变形方式上有所不同。这些特征的目标是近似人类对频率变化的非线性感知。
- en: 'Different banks of mel filters were introduced in the literature. The following
    variations are supported:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 文献中引入了不同的梅尔滤波器组。支持以下变体：
- en: 'MFCC FB-20: introduced in 1980 by Davis and Mermelstein, it assumes a sampling
    frequency of 10 kHz and a speech bandwidth of `[0, 4600]` Hz.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MFCC FB-20: 由Davis和Mermelstein于1980年提出，假设采样频率为10 kHz，语音带宽为 `[0, 4600]` Hz。'
- en: 'MFCC FB-24 HTK: from the Cambridge HMM Toolkit (HTK) (1995) uses a filter bank
    of 24 filters for a speech bandwidth of `[0, 8000]` Hz. This assumes sampling
    rate ≥ 16 kHz.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MFCC FB-24 HTK: 来自剑桥HMM工具包（HTK）（1995年），使用24个滤波器的滤波器组，语音带宽为 `[0, 8000]` Hz。假设采样率
    ≥ 16 kHz。'
- en: 'MFCC FB-40: from the Auditory Toolbox for MATLAB written by Slaney in 1998,
    assumes a sampling rate of 16 kHz and speech bandwidth of `[133, 6854]` Hz. This
    version also includes area normalization.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MFCC FB-40: 由Slaney于1998年编写的MATLAB听觉工具箱，假设采样率为16 kHz，语音带宽为 `[133, 6854]` Hz。此版本还包括面积归一化。'
- en: HFCC-E FB-29 (Human Factor Cepstral Coefficients) of Skowronski and Harris (2004),
    assumes a sampling rate of 12.5 kHz and speech bandwidth of `[0, 6250]` Hz.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skowronski和Harris（2004）的HFCC-E FB-29（人类因素倒谱系数），假设采样率为12.5 kHz，语音带宽为`[0, 6250]`
    Hz。
- en: This code is adapted from *torchaudio* and *librosa*. Note that the default
    parameters of torchaudio’s `melscale_fbanks` implement the `"htk"` filters while
    librosa uses the `"slaney"` implementation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码改编自*torchaudio*和*librosa*。请注意，torchaudio的`melscale_fbanks`的默认参数实现了`"htk"`滤波器，而librosa使用`"slaney"`实现。
- en: '#### `transformers.audio_utils.optimal_fft_length`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `transformers.audio_utils.optimal_fft_length`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L207)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L207)'
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Finds the best FFT input size for a given `window_length`. This function takes
    a given window length and, if not already a power of two, rounds it up to the
    next power or two.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 找到给定`window_length`的最佳FFT输入大小。此函数接受给定的窗口长度，如果不是2的幂，则将其四舍五入到下一个2的幂。
- en: The FFT algorithm works fastest when the length of the input is a power of two,
    which may be larger than the size of the window or analysis frame. For example,
    if the window is 400 samples, using an FFT input size of 512 samples is more optimal
    than an FFT size of 400 samples. Using a larger FFT size does not affect the detected
    frequencies, it simply gives a higher frequency resolution (i.e. the frequency
    bins are smaller).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: FFT算法在输入长度为2的幂时运行最快，这可能比窗口或分析帧的大小更大。例如，如果窗口是400个样本，使用512个样本的FFT输入大小比400个样本的FFT大小更优。使用更大的FFT大小不会影响检测到的频率，它只是提供了更高的频率分辨率（即频率箱更小）。
- en: '#### `transformers.audio_utils.window_function`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `transformers.audio_utils.window_function`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L220)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L220)'
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`window_length` (`int`) — The length of the window in samples.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window_length`（`int`）- 窗口的长度（以样本为单位）。'
- en: '`name` (`str`, *optional*, defaults to `"hann"`) — The name of the window function.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`（`str`，*可选*，默认为`"hann"`）- 窗口函数的名称。'
- en: '`periodic` (`bool`, *optional*, defaults to `True`) — Whether the window is
    periodic or symmetric.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`periodic`（`bool`，*可选*，默认为`True`）- 窗口是否周期性或对称。'
- en: '`frame_length` (`int`, *optional*) — The length of the analysis frames in samples.
    Provide a value for `frame_length` if the window is smaller than the frame length,
    so that it will be zero-padded.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frame_length`（`int`，*可选*）- 分析帧的长度（以样本为单位）。如果窗口比帧长度小，请为`frame_length`提供一个值，以便进行零填充。'
- en: '`center` (`bool`, *optional*, defaults to `True`) — Whether to center the window
    inside the FFT buffer. Only used when `frame_length` is provided.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center`（`bool`，*可选*，默认为`True`）- 是否将窗口居中在FFT缓冲区内。仅在提供`frame_length`时使用。'
- en: Returns an array containing the specified window. This window is intended to
    be used with `stft`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个包含指定窗口的数组。这个窗口旨在与`stft`一起使用。
- en: 'The following window types are supported:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 支持以下窗口类型：
- en: '`"boxcar"`: a rectangular window'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"boxcar"`：一个矩形窗口'
- en: '`"hamming"`: the Hamming window'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"hamming"`：汉明窗口'
- en: '`"hann"`: the Hann window'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"hann"`：汉宁窗口'
- en: '`"povey"`: the Povey window'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"povey"`：波维窗口'
- en: '#### `transformers.audio_utils.spectrogram`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `transformers.audio_utils.spectrogram`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L284)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L284)'
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`waveform` (`np.ndarray` of shape `(length,)`) — The input waveform. This must
    be a single real-valued, mono waveform.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`waveform`（形状为`(length,)`的`np.ndarray`）- 输入波形。这必须是单声道的实值波形。'
- en: '`window` (`np.ndarray` of shape `(frame_length,)`) — The windowing function
    to apply, including zero-padding if necessary. The actual window length may be
    shorter than `frame_length`, but we’re assuming the array has already been zero-padded.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window`（形状为`(frame_length,)`的`np.ndarray`）- 要应用的窗函数，包括必要时的零填充。实际窗口长度可能比`frame_length`短，但我们假设数组已经被零填充。'
- en: '`frame_length` (`int`) — The length of the analysis frames in samples. With
    librosa this is always equal to `fft_length` but we also allow smaller sizes.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`frame_length`（`int`）- 分析帧的长度（以样本为单位）。在librosa中，这总是等于`fft_length`，但我们也允许更小的尺寸。'
- en: '`hop_length` (`int`) — The stride between successive analysis frames in samples.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hop_length`（`int`）- 分析帧之间的连续跨度（以样本为单位）。'
- en: '`fft_length` (`int`, *optional*) — The size of the FFT buffer in samples. This
    determines how many frequency bins the spectrogram will have. For optimal speed,
    this should be a power of two. If `None`, uses `frame_length`.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fft_length`（`int`，*可选*）- FFT缓冲区的大小（以样本为单位）。这决定了频谱图将具有多少频率箱。为了获得最佳速度，这应该是2的幂。如果为`None`，则使用`frame_length`。'
- en: '`power` (`float`, *optional*, defaults to 1.0) — If 1.0, returns the amplitude
    spectrogram. If 2.0, returns the power spectrogram. If `None`, returns complex
    numbers.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`power`（`float`，*可选*，默认为1.0）- 如果为1.0，则返回幅度谱图。如果为2.0，则返回功率谱图。如果为`None`，则返回复数。'
- en: '`center` (`bool`, *optional*, defaults to `True`) — Whether to pad the waveform
    so that frame `t` is centered around time `t * hop_length`. If `False`, frame
    `t` will start at time `t * hop_length`.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`center`（`bool`，*可选*，默认为`True`）- 是否填充波形，使得帧`t`围绕时间`t * hop_length`居中。如果为`False`，帧`t`将从时间`t
    * hop_length`开始。'
- en: '`pad_mode` (`str`, *optional*, defaults to `"reflect"`) — Padding mode used
    when `center` is `True`. Possible values are: `"constant"` (pad with zeros), `"edge"`
    (pad with edge values), `"reflect"` (pads with mirrored values).'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pad_mode`（`str`，*可选*，默认为`"reflect"`）- 当`center`为`True`时使用的填充模式。可能的值为：`"constant"`（用零填充）、`"edge"`（用边缘值填充）、`"reflect"`（用镜像值填充）。'
- en: '`onesided` (`bool`, *optional*, defaults to `True`) — If True, only computes
    the positive frequencies and returns a spectrogram containing `fft_length // 2
    + 1` frequency bins. If False, also computes the negative frequencies and returns
    `fft_length` frequency bins.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onesided`（`bool`，*可选*，默认为`True`）- 如果为True，则仅计算正频率并返回包含`fft_length // 2 + 1`个频率箱的谱图。如果为False，还会计算负频率并返回`fft_length`个频率箱。'
- en: '`preemphasis` (`float`, *optional*) — Coefficient for a low-pass filter that
    applies pre-emphasis before the DFT.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mel_filters` (`np.ndarray` of shape `(num_freq_bins, num_mel_filters)`, *optional*)
    — The mel filter bank. If supplied, applies a this filter bank to create a mel
    spectrogram.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mel_floor` (`float`, *optional*, defaults to 1e-10) — Minimum value of mel
    frequency banks.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_mel` (`str`, *optional*) — How to convert the spectrogram to log scale.
    Possible options are: `None` (don’t convert), `"log"` (take the natural logarithm)
    `"log10"` (take the base-10 logarithm), `"dB"` (convert to decibels). Can only
    be used when `power` is not `None`.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reference` (`float`, *optional*, defaults to 1.0) — Sets the input spectrogram
    value that corresponds to 0 dB. For example, use `np.max(spectrogram)` to set
    the loudest part to 0 dB. Must be greater than zero.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min_value` (`float`, *optional*, defaults to `1e-10`) — The spectrogram will
    be clipped to this minimum value before conversion to decibels, to avoid taking
    `log(0)`. For a power spectrogram, the default of `1e-10` corresponds to a minimum
    of -100 dB. For an amplitude spectrogram, the value `1e-5` corresponds to -100
    dB. Must be greater than zero.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db_range` (`float`, *optional*) — Sets the maximum dynamic range in decibels.
    For example, if `db_range = 80`, the difference between the peak value and the
    smallest value will never be more than 80 dB. Must be greater than zero.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove_dc_offset` (`bool`, *optional*) — Subtract mean from waveform on each
    frame, applied before pre-emphasis. This should be set to `true` in order to get
    the same results as `torchaudio.compliance.kaldi.fbank` when computing mel filters.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dtype` (`np.dtype`, *optional*, defaults to `np.float32`) — Data type of the
    spectrogram tensor. If `power` is None, this argument is ignored and the dtype
    will be `np.complex64`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculates a spectrogram over one waveform using the Short-Time Fourier Transform.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'This function can create the following kinds of spectrograms:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: amplitude spectrogram (`power = 1.0`)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: power spectrogram (`power = 2.0`)
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: complex-valued spectrogram (`power = None`)
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: log spectrogram (use `log_mel` argument)
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mel spectrogram (provide `mel_filters`)
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: log-mel spectrogram (provide `mel_filters` and `log_mel`)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How this works:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: The input waveform is split into frames of size `frame_length` that are partially
    overlapping by `frame_length
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: hop_length` samples.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each frame is multiplied by the window and placed into a buffer of size `fft_length`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The DFT is taken of each windowed frame.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The results are stacked into a spectrogram.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We make a distinction between the following “blocks” of sample data, each of
    which may have a different lengths:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: The analysis frame. This is the size of the time slices that the input waveform
    is split into.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The window. Each analysis frame is multiplied by the window to avoid spectral
    leakage.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FFT input buffer. The length of this determines how many frequency bins
    are in the spectrogram.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this implementation, the window is assumed to be zero-padded to have the
    same size as the analysis frame. A padded window can be obtained from `window_function()`.
    The FFT input buffer may be larger than the analysis frame, typically the next
    power of two.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: This function is not optimized for speed yet. It should be mostly compatible
    with `librosa.stft` and `torchaudio.functional.transforms.Spectrogram`, although
    it is more flexible due to the different ways spectrograms can be constructed.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '#### `transformers.audio_utils.power_to_db`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L479)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '`spectrogram` (`np.ndarray`) — The input power (mel) spectrogram. Note that
    a power spectrogram has the amplitudes squared!'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reference` (`float`, *optional*, defaults to 1.0) — Sets the input spectrogram
    value that corresponds to 0 dB. For example, use `np.max(spectrogram)` to set
    the loudest part to 0 dB. Must be greater than zero.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min_value` (`float`, *optional*, defaults to `1e-10`) — The spectrogram will
    be clipped to this minimum value before conversion to decibels, to avoid taking
    `log(0)`. The default of `1e-10` corresponds to a minimum of -100 dB. Must be
    greater than zero.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min_value` (`float`, *optional*, 默认为`1e-10`) — 在转换为分贝之前，将频谱图剪切到此最小值，以避免取`log(0)`。默认值`1e-10`对应于最小值为-100
    dB。必须大于零。'
- en: '`db_range` (`float`, *optional*) — Sets the maximum dynamic range in decibels.
    For example, if `db_range = 80`, the difference between the peak value and the
    smallest value will never be more than 80 dB. Must be greater than zero.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_range` (`float`, *optional*) — 设置分贝的最大动态范围。例如，如果`db_range = 80`，峰值和最小值之间的差异永远不会超过80
    dB。必须大于零。'
- en: Returns
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`np.ndarray`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ndarray`'
- en: the spectrogram in decibels
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以分贝为单位的频谱图
- en: Converts a power spectrogram to the decibel scale. This computes `10 * log10(spectrogram
    / reference)`, using basic logarithm properties for numerical stability.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 将功率频谱图转换为分贝刻度。这使用基本对数属性计算`10 * log10(spectrogram / reference)`，以确保数值稳定性。
- en: The motivation behind applying the log function on the (mel) spectrogram is
    that humans do not hear loudness on a linear scale. Generally to double the perceived
    volume of a sound we need to put 8 times as much energy into it. This means that
    large variations in energy may not sound all that different if the sound is loud
    to begin with. This compression operation makes the (mel) spectrogram features
    match more closely what humans actually hear.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将对(mel)频谱图应用对数函数的动机是人类听不到响度的线性刻度。通常，要使声音的感知音量加倍，我们需要将8倍的能量投入其中。这意味着如果声音本来就很大，那么能量的大变化可能听起来并不那么不同。这种压缩操作使(mel)频谱图特征更接近人类实际听到的声音。
- en: Based on the implementation of `librosa.power_to_db`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 基于`librosa.power_to_db`的实现。
- en: '#### `transformers.audio_utils.amplitude_to_db`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `transformers.audio_utils.amplitude_to_db`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L530)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L530)'
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`spectrogram` (`np.ndarray`) — The input amplitude (mel) spectrogram.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spectrogram` (`np.ndarray`) — 输入振幅(mel)频谱图。'
- en: '`reference` (`float`, *optional*, defaults to 1.0) — Sets the input spectrogram
    value that corresponds to 0 dB. For example, use `np.max(spectrogram)` to set
    the loudest part to 0 dB. Must be greater than zero.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reference` (`float`, *optional*, 默认为1.0) — 设置对应于0 dB的输入频谱图值。例如，使用`np.max(spectrogram)`将最响亮的部分设置为0
    dB。必须大于零。'
- en: '`min_value` (`float`, *optional*, defaults to `1e-5`) — The spectrogram will
    be clipped to this minimum value before conversion to decibels, to avoid taking
    `log(0)`. The default of `1e-5` corresponds to a minimum of -100 dB. Must be greater
    than zero.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`min_value` (`float`, *optional*, 默认为`1e-5`) — 在转换为分贝之前，将频谱图剪切到此最小值，以避免取`log(0)`。默认值`1e-5`对应于最小值为-100
    dB。必须大于零。'
- en: '`db_range` (`float`, *optional*) — Sets the maximum dynamic range in decibels.
    For example, if `db_range = 80`, the difference between the peak value and the
    smallest value will never be more than 80 dB. Must be greater than zero.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_range` (`float`, *optional*) — 设置分贝的最大动态范围。例如，如果`db_range = 80`，峰值和最小值之间的差异永远不会超过80
    dB。必须大于零。'
- en: Returns
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`np.ndarray`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.ndarray`'
- en: the spectrogram in decibels
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以分贝为单位的频谱图
- en: Converts an amplitude spectrogram to the decibel scale. This computes `20 *
    log10(spectrogram / reference)`, using basic logarithm properties for numerical
    stability.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 将振幅频谱图转换为分贝刻度。这使用基本对数属性计算`20 * log10(spectrogram / reference)`，以确保数值稳定性。
- en: The motivation behind applying the log function on the (mel) spectrogram is
    that humans do not hear loudness on a linear scale. Generally to double the perceived
    volume of a sound we need to put 8 times as much energy into it. This means that
    large variations in energy may not sound all that different if the sound is loud
    to begin with. This compression operation makes the (mel) spectrogram features
    match more closely what humans actually hear.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 将对(mel)频谱图应用对数函数的动机是人类听不到响度的线性刻度。通常，要使声音的感知音量加倍，我们需要将8倍的能量投入其中。这意味着如果声音本来就很大，那么能量的大变化可能听起来并不那么不同。这种压缩操作使(mel)频谱图特征更接近人类实际听到的声音。
