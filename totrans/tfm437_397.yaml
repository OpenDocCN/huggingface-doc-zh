- en: Utilities for FeatureExtractors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers/v4.37.2/en/internal/audio_utils](https://huggingface.co/docs/transformers/v4.37.2/en/internal/audio_utils)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/25.e15c4305.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Docstring.17db21ae.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
  prefs: []
  type: TYPE_NORMAL
- en: This page lists all the utility functions that can be used by the audio `FeatureExtractor`
    in order to compute special features from a raw audio using common algorithms
    such as *Short Time Fourier Transform* or *log mel spectrogram*.
  prefs: []
  type: TYPE_NORMAL
- en: Most of those are only useful if you are studying the code of the audio processors
    in the library.
  prefs: []
  type: TYPE_NORMAL
- en: Audio Transformations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '#### transformers.audio_utils.hertz_to_mel'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L25)'
  prefs: []
  type: TYPE_NORMAL
- en: '( freq: Union mel_scale: str = ''htk'' ) → `float` or `np.ndarray`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**freq** (`float` or `np.ndarray`) — The frequency, or multiple frequencies,
    in hertz (Hz).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mel_scale** (`str`, *optional*, defaults to `"htk"`) — The mel frequency
    scale to use, `"htk"`, `"kaldi"` or `"slaney"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`float` or `np.ndarray`'
  prefs: []
  type: TYPE_NORMAL
- en: The frequencies on the mel scale.
  prefs: []
  type: TYPE_NORMAL
- en: Convert frequency from hertz to mels.
  prefs: []
  type: TYPE_NORMAL
- en: '#### transformers.audio_utils.mel_to_hertz'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L61)'
  prefs: []
  type: TYPE_NORMAL
- en: '( mels: Union mel_scale: str = ''htk'' ) → `float` or `np.ndarray`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**mels** (`float` or `np.ndarray`) — The frequency, or multiple frequencies,
    in mels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mel_scale** (`str`, *optional*, `"htk"`) — The mel frequency scale to use,
    `"htk"`, `"kaldi"` or `"slaney"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`float` or `np.ndarray`'
  prefs: []
  type: TYPE_NORMAL
- en: The frequencies in hertz.
  prefs: []
  type: TYPE_NORMAL
- en: Convert frequency from mels to hertz.
  prefs: []
  type: TYPE_NORMAL
- en: '#### transformers.audio_utils.mel_filter_bank'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L119)'
  prefs: []
  type: TYPE_NORMAL
- en: '( num_frequency_bins: int num_mel_filters: int min_frequency: float max_frequency:
    float sampling_rate: int norm: Optional = None mel_scale: str = ''htk'' triangularize_in_mel_space:
    bool = False ) → `np.ndarray` of shape (`num_frequency_bins`, `num_mel_filters`)'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**num_frequency_bins** (`int`) — Number of frequencies used to compute the
    spectrogram (should be the same as in `stft`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_mel_filters** (`int`) — Number of mel filters to generate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_frequency** (`float`) — Lowest frequency of interest in Hz.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_frequency** (`float`) — Highest frequency of interest in Hz. This should
    not exceed `sampling_rate / 2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sampling_rate** (`int`) — Sample rate of the audio waveform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**norm** (`str`, *optional*) — If `"slaney"`, divide the triangular mel weights
    by the width of the mel band (area normalization).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mel_scale** (`str`, *optional*, defaults to `"htk"`) — The mel frequency
    scale to use, `"htk"`, `"kaldi"` or `"slaney"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**triangularize_in_mel_space** (`bool`, *optional*, defaults to `False`) —
    If this option is enabled, the triangular filter is applied in mel space rather
    than frequency space. This should be set to `true` in order to get the same results
    as `torchaudio` when computing mel filters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`np.ndarray` of shape (`num_frequency_bins`, `num_mel_filters`)'
  prefs: []
  type: TYPE_NORMAL
- en: Triangular filter bank matrix. This is a projection matrix to go from a spectrogram
    to a mel spectrogram.
  prefs: []
  type: TYPE_NORMAL
- en: Creates a frequency bin conversion matrix used to obtain a mel spectrogram.
    This is called a *mel filter bank*, and various implementation exist, which differ
    in the number of filters, the shape of the filters, the way the filters are spaced,
    the bandwidth of the filters, and the manner in which the spectrum is warped.
    The goal of these features is to approximate the non-linear human perception of
    the variation in pitch with respect to the frequency.
  prefs: []
  type: TYPE_NORMAL
- en: 'Different banks of mel filters were introduced in the literature. The following
    variations are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MFCC FB-20: introduced in 1980 by Davis and Mermelstein, it assumes a sampling
    frequency of 10 kHz and a speech bandwidth of `[0, 4600]` Hz.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MFCC FB-24 HTK: from the Cambridge HMM Toolkit (HTK) (1995) uses a filter bank
    of 24 filters for a speech bandwidth of `[0, 8000]` Hz. This assumes sampling
    rate ≥ 16 kHz.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MFCC FB-40: from the Auditory Toolbox for MATLAB written by Slaney in 1998,
    assumes a sampling rate of 16 kHz and speech bandwidth of `[133, 6854]` Hz. This
    version also includes area normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HFCC-E FB-29 (Human Factor Cepstral Coefficients) of Skowronski and Harris (2004),
    assumes a sampling rate of 12.5 kHz and speech bandwidth of `[0, 6250]` Hz.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This code is adapted from *torchaudio* and *librosa*. Note that the default
    parameters of torchaudio’s `melscale_fbanks` implement the `"htk"` filters while
    librosa uses the `"slaney"` implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '#### transformers.audio_utils.optimal_fft_length'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L207)'
  prefs: []
  type: TYPE_NORMAL
- en: '( window_length: int )'
  prefs: []
  type: TYPE_NORMAL
- en: Finds the best FFT input size for a given `window_length`. This function takes
    a given window length and, if not already a power of two, rounds it up to the
    next power or two.
  prefs: []
  type: TYPE_NORMAL
- en: The FFT algorithm works fastest when the length of the input is a power of two,
    which may be larger than the size of the window or analysis frame. For example,
    if the window is 400 samples, using an FFT input size of 512 samples is more optimal
    than an FFT size of 400 samples. Using a larger FFT size does not affect the detected
    frequencies, it simply gives a higher frequency resolution (i.e. the frequency
    bins are smaller).
  prefs: []
  type: TYPE_NORMAL
- en: '#### transformers.audio_utils.window_function'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L220)'
  prefs: []
  type: TYPE_NORMAL
- en: '( window_length: int name: str = ''hann'' periodic: bool = True frame_length:
    Optional = None center: bool = True )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**window_length** (`int`) — The length of the window in samples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** (`str`, *optional*, defaults to `"hann"`) — The name of the window
    function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**periodic** (`bool`, *optional*, defaults to `True`) — Whether the window
    is periodic or symmetric.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frame_length** (`int`, *optional*) — The length of the analysis frames in
    samples. Provide a value for `frame_length` if the window is smaller than the
    frame length, so that it will be zero-padded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**center** (`bool`, *optional*, defaults to `True`) — Whether to center the
    window inside the FFT buffer. Only used when `frame_length` is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns an array containing the specified window. This window is intended to
    be used with `stft`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following window types are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"boxcar"`: a rectangular window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"hamming"`: the Hamming window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"hann"`: the Hann window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"povey"`: the Povey window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### transformers.audio_utils.spectrogram'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L284)'
  prefs: []
  type: TYPE_NORMAL
- en: '( waveform: ndarray window: ndarray frame_length: int hop_length: int fft_length:
    Optional = None power: Optional = 1.0 center: bool = True pad_mode: str = ''reflect''
    onesided: bool = True preemphasis: Optional = None mel_filters: Optional = None
    mel_floor: float = 1e-10 log_mel: Optional = None reference: float = 1.0 min_value:
    float = 1e-10 db_range: Optional = None remove_dc_offset: Optional = None dtype:
    dtype = <class ''numpy.float32''> )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**waveform** (`np.ndarray` of shape `(length,)`) — The input waveform. This
    must be a single real-valued, mono waveform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**window** (`np.ndarray` of shape `(frame_length,)`) — The windowing function
    to apply, including zero-padding if necessary. The actual window length may be
    shorter than `frame_length`, but we’re assuming the array has already been zero-padded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**frame_length** (`int`) — The length of the analysis frames in samples. With
    librosa this is always equal to `fft_length` but we also allow smaller sizes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hop_length** (`int`) — The stride between successive analysis frames in samples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fft_length** (`int`, *optional*) — The size of the FFT buffer in samples.
    This determines how many frequency bins the spectrogram will have. For optimal
    speed, this should be a power of two. If `None`, uses `frame_length`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**power** (`float`, *optional*, defaults to 1.0) — If 1.0, returns the amplitude
    spectrogram. If 2.0, returns the power spectrogram. If `None`, returns complex
    numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**center** (`bool`, *optional*, defaults to `True`) — Whether to pad the waveform
    so that frame `t` is centered around time `t * hop_length`. If `False`, frame
    `t` will start at time `t * hop_length`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pad_mode** (`str`, *optional*, defaults to `"reflect"`) — Padding mode used
    when `center` is `True`. Possible values are: `"constant"` (pad with zeros), `"edge"`
    (pad with edge values), `"reflect"` (pads with mirrored values).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**onesided** (`bool`, *optional*, defaults to `True`) — If True, only computes
    the positive frequencies and returns a spectrogram containing `fft_length // 2
    + 1` frequency bins. If False, also computes the negative frequencies and returns
    `fft_length` frequency bins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**preemphasis** (`float`, *optional*) — Coefficient for a low-pass filter that
    applies pre-emphasis before the DFT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mel_filters** (`np.ndarray` of shape `(num_freq_bins, num_mel_filters)`,
    *optional*) — The mel filter bank. If supplied, applies a this filter bank to
    create a mel spectrogram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mel_floor** (`float`, *optional*, defaults to 1e-10) — Minimum value of mel
    frequency banks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**log_mel** (`str`, *optional*) — How to convert the spectrogram to log scale.
    Possible options are: `None` (don’t convert), `"log"` (take the natural logarithm)
    `"log10"` (take the base-10 logarithm), `"dB"` (convert to decibels). Can only
    be used when `power` is not `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reference** (`float`, *optional*, defaults to 1.0) — Sets the input spectrogram
    value that corresponds to 0 dB. For example, use `np.max(spectrogram)` to set
    the loudest part to 0 dB. Must be greater than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_value** (`float`, *optional*, defaults to `1e-10`) — The spectrogram
    will be clipped to this minimum value before conversion to decibels, to avoid
    taking `log(0)`. For a power spectrogram, the default of `1e-10` corresponds to
    a minimum of -100 dB. For an amplitude spectrogram, the value `1e-5` corresponds
    to -100 dB. Must be greater than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**db_range** (`float`, *optional*) — Sets the maximum dynamic range in decibels.
    For example, if `db_range = 80`, the difference between the peak value and the
    smallest value will never be more than 80 dB. Must be greater than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**remove_dc_offset** (`bool`, *optional*) — Subtract mean from waveform on
    each frame, applied before pre-emphasis. This should be set to `true` in order
    to get the same results as `torchaudio.compliance.kaldi.fbank` when computing
    mel filters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dtype** (`np.dtype`, *optional*, defaults to `np.float32`) — Data type of
    the spectrogram tensor. If `power` is None, this argument is ignored and the dtype
    will be `np.complex64`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculates a spectrogram over one waveform using the Short-Time Fourier Transform.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function can create the following kinds of spectrograms:'
  prefs: []
  type: TYPE_NORMAL
- en: amplitude spectrogram (`power = 1.0`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: power spectrogram (`power = 2.0`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: complex-valued spectrogram (`power = None`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: log spectrogram (use `log_mel` argument)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mel spectrogram (provide `mel_filters`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: log-mel spectrogram (provide `mel_filters` and `log_mel`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How this works:'
  prefs: []
  type: TYPE_NORMAL
- en: The input waveform is split into frames of size `frame_length` that are partially
    overlapping by `frame_length
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: hop_length` samples.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each frame is multiplied by the window and placed into a buffer of size `fft_length`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The DFT is taken of each windowed frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The results are stacked into a spectrogram.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We make a distinction between the following “blocks” of sample data, each of
    which may have a different lengths:'
  prefs: []
  type: TYPE_NORMAL
- en: The analysis frame. This is the size of the time slices that the input waveform
    is split into.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The window. Each analysis frame is multiplied by the window to avoid spectral
    leakage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FFT input buffer. The length of this determines how many frequency bins
    are in the spectrogram.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this implementation, the window is assumed to be zero-padded to have the
    same size as the analysis frame. A padded window can be obtained from `window_function()`.
    The FFT input buffer may be larger than the analysis frame, typically the next
    power of two.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: This function is not optimized for speed yet. It should be mostly compatible
    with `librosa.stft` and `torchaudio.functional.transforms.Spectrogram`, although
    it is more flexible due to the different ways spectrograms can be constructed.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### transformers.audio_utils.power_to_db'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L479)'
  prefs: []
  type: TYPE_NORMAL
- en: '( spectrogram: ndarray reference: float = 1.0 min_value: float = 1e-10 db_range:
    Optional = None ) → `np.ndarray`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**spectrogram** (`np.ndarray`) — The input power (mel) spectrogram. Note that
    a power spectrogram has the amplitudes squared!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reference** (`float`, *optional*, defaults to 1.0) — Sets the input spectrogram
    value that corresponds to 0 dB. For example, use `np.max(spectrogram)` to set
    the loudest part to 0 dB. Must be greater than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_value** (`float`, *optional*, defaults to `1e-10`) — The spectrogram
    will be clipped to this minimum value before conversion to decibels, to avoid
    taking `log(0)`. The default of `1e-10` corresponds to a minimum of -100 dB. Must
    be greater than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**db_range** (`float`, *optional*) — Sets the maximum dynamic range in decibels.
    For example, if `db_range = 80`, the difference between the peak value and the
    smallest value will never be more than 80 dB. Must be greater than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`np.ndarray`'
  prefs: []
  type: TYPE_NORMAL
- en: the spectrogram in decibels
  prefs: []
  type: TYPE_NORMAL
- en: Converts a power spectrogram to the decibel scale. This computes `10 * log10(spectrogram
    / reference)`, using basic logarithm properties for numerical stability.
  prefs: []
  type: TYPE_NORMAL
- en: The motivation behind applying the log function on the (mel) spectrogram is
    that humans do not hear loudness on a linear scale. Generally to double the perceived
    volume of a sound we need to put 8 times as much energy into it. This means that
    large variations in energy may not sound all that different if the sound is loud
    to begin with. This compression operation makes the (mel) spectrogram features
    match more closely what humans actually hear.
  prefs: []
  type: TYPE_NORMAL
- en: Based on the implementation of `librosa.power_to_db`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### transformers.audio_utils.amplitude_to_db'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/audio_utils.py#L530)'
  prefs: []
  type: TYPE_NORMAL
- en: '( spectrogram: ndarray reference: float = 1.0 min_value: float = 1e-05 db_range:
    Optional = None ) → `np.ndarray`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**spectrogram** (`np.ndarray`) — The input amplitude (mel) spectrogram.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reference** (`float`, *optional*, defaults to 1.0) — Sets the input spectrogram
    value that corresponds to 0 dB. For example, use `np.max(spectrogram)` to set
    the loudest part to 0 dB. Must be greater than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_value** (`float`, *optional*, defaults to `1e-5`) — The spectrogram will
    be clipped to this minimum value before conversion to decibels, to avoid taking
    `log(0)`. The default of `1e-5` corresponds to a minimum of -100 dB. Must be greater
    than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**db_range** (`float`, *optional*) — Sets the maximum dynamic range in decibels.
    For example, if `db_range = 80`, the difference between the peak value and the
    smallest value will never be more than 80 dB. Must be greater than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`np.ndarray`'
  prefs: []
  type: TYPE_NORMAL
- en: the spectrogram in decibels
  prefs: []
  type: TYPE_NORMAL
- en: Converts an amplitude spectrogram to the decibel scale. This computes `20 *
    log10(spectrogram / reference)`, using basic logarithm properties for numerical
    stability.
  prefs: []
  type: TYPE_NORMAL
- en: The motivation behind applying the log function on the (mel) spectrogram is
    that humans do not hear loudness on a linear scale. Generally to double the perceived
    volume of a sound we need to put 8 times as much energy into it. This means that
    large variations in energy may not sound all that different if the sound is loud
    to begin with. This compression operation makes the (mel) spectrogram features
    match more closely what humans actually hear.
  prefs: []
  type: TYPE_NORMAL
