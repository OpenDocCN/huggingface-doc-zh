["```py\n( transformer: Transformer2DModel vae: AutoencoderKL scheduler: KarrasDiffusionSchedulers id2label: Optional = None )\n```", "```py\n( class_labels: List guidance_scale: float = 4.0 generator: Union = None num_inference_steps: int = 50 output_type: Optional = 'pil' return_dict: bool = True ) \u2192 export const metadata = 'undefined';ImagePipelineOutput or tuple\n```", "```py\n>>> from diffusers import DiTPipeline, DPMSolverMultistepScheduler\n>>> import torch\n\n>>> pipe = DiTPipeline.from_pretrained(\"facebook/DiT-XL-2-256\", torch_dtype=torch.float16)\n>>> pipe.scheduler = DPMSolverMultistepScheduler.from_config(pipe.scheduler.config)\n>>> pipe = pipe.to(\"cuda\")\n\n>>> # pick words from Imagenet class labels\n>>> pipe.labels  # to print all available words\n\n>>> # pick words that exist in ImageNet\n>>> words = [\"white shark\", \"umbrella\"]\n\n>>> class_ids = pipe.get_label_ids(words)\n\n>>> generator = torch.manual_seed(33)\n>>> output = pipe(class_labels=class_ids, num_inference_steps=25, generator=generator)\n\n>>> image = output.images[0]  # label 'white shark'\n```", "```py\n( label: Union ) \u2192 export const metadata = 'undefined';list of int\n```", "```py\n( images: Union )\n```"]