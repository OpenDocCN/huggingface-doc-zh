["```py\npnpm add @huggingface/agents\n\nnpm add @huggingface/agents\n\nyarn add @huggingface/agents\n```", "```py\n// esm.sh\nimport { HfAgent } from \"https://esm.sh/@huggingface/agent\"\n// or npm:\nimport { HfAgent } from \"npm:@huggingface/agent\"\n```", "```py\nimport { HfAgent } from \"@huggingface/agents\";\n\nconst agent = new HfAgent(\"hf_...\");\n\nconst code = await agent.generateCode(\"Draw a picture of a cat, wearing a top hat.\")\nconsole.log(code) // always good to check the generated code before running it\nconst outputs = await agent.evaluateCode(code);\nconsole.log(outputs) \n```", "```py\nimport { HfAgent, LLMFromHub } from \"@huggingface/agents\";\n\nconst agent = new HfAgent(\n  \"hf_...\",\n  LLMFromHub(\"hf_...\", \"OpenAssistant/oasst-sft-4-pythia-12b-epoch-3.5\")\n);\n```", "```py\nimport { HfAgent, LLMFromEndpoint } from \"@huggingface/agents\";\n\nconst agent = new HfAgent(\n  \"hf_...\",\n  LLMFromEndpoint(\"hf_...\", \"http://...\")\n);\n```", "```py\nimport { HfAgent } from \"@huggingface/agents\";\nimport { Configuration, OpenAIApi } from \"openai\";\n\nconst api = new OpenAIApi(new Configuration({ apiKey: \"sk-...\" }));\n\nconst llmOpenAI = async (prompt: string): Promise<string> => {\n  return (\n    (\n      await api.createCompletion({\n        model: \"text-davinci-003\",\n        prompt: prompt,\n        max_tokens: 1000,\n      })\n    ).data.choices[0].text ?? \"\"\n  );\n};\n\nconst agent = new HfAgent(\n  \"hf_...\",\n  llmOpenAI\n);\n\n// do anything you want with the agent here\n\n```", "```py\nimport { HfAgent, defaultTools, LLMFromHub } from \"@huggingface/agents\";\nimport type { Tool } from \"@huggingface/agents/src/types\";\n\n// define the tool\nconst uppercaseTool: Tool = {\n    name: \"uppercase\",\n    description: \"uppercase the input string and returns it \",\n    examples: [\n        {\n            prompt: \"uppercase the string: hello world\",\n            code: `const output = uppercase(\"hello world\")`,\n            tools: [\"uppercase\"],\n        },\n    ],\n    call: async (input) => {\n        const data = await input;\n        if (typeof data !== \"string\") {\n            throw new Error(\"Input must be a string\");\n        }\n        return data.toUpperCase();\n    },\n};\n\n// pass it in the agent\nconst agent = new HfAgent(process.env.HF_TOKEN,\n                LLMFromHub(\"hf_...\", \"OpenAssistant/oasst-sft-4-pythia-12b-epoch-3.5\"),\n                [uppercaseTool, ...defaultTools]);\n```"]