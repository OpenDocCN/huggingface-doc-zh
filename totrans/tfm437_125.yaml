- en: Trainer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/trainer](https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/trainer)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/55.514161ed.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Tip.c2ecdbf4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Docstring.17db21ae.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/ExampleCodeBlock.4f515aa9.js">
  prefs: []
  type: TYPE_NORMAL
- en: The [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    class provides an API for feature-complete training in PyTorch, and it supports
    distributed training on multiple GPUs/TPUs, mixed precision for [NVIDIA GPUs](https://nvidia.github.io/apex/),
    [AMD GPUs](https://rocm.docs.amd.com/en/latest/rocm.html), and [`torch.amp`](https://pytorch.org/docs/stable/amp.html)
    for PyTorch. [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    goes hand-in-hand with the [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)
    class, which offers a wide range of options to customize how a model is trained.
    Together, these two classes provide a complete training API.
  prefs: []
  type: TYPE_NORMAL
- en: '[Seq2SeqTrainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Seq2SeqTrainer)
    and [Seq2SeqTrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments)
    inherit from the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    and `TrainingArgument` classes and they’re adapted for training models for sequence-to-sequence
    tasks such as summarization or translation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    class is optimized for 🤗 Transformers models and can have surprising behaviors
    when used with other models. When using it with your own model, make sure:'
  prefs: []
  type: TYPE_NORMAL
- en: your model always return tuples or subclasses of [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: your model can compute the loss if a `labels` argument is provided and that
    loss is returned as the first element of the tuple (if your model returns tuples)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: your model can accept multiple label arguments (use `label_names` in [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)
    to indicate their name to the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer))
    but none of them should be named `"label"`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trainer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.Trainer`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L236)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model` ([PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel)
    or `torch.nn.Module`, *optional*) — The model to train, evaluate or use for predictions.
    If not provided, a `model_init` must be passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    is optimized to work with the [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel)
    provided by the library. You can still use your own models defined as `torch.nn.Module`
    as long as they work the same way as the 🤗 Transformers models.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`args` ([TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments),
    *optional*) — The arguments to tweak for training. Will default to a basic instance
    of [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)
    with the `output_dir` set to a directory named *tmp_trainer* in the current directory
    if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data_collator` (`DataCollator`, *optional*) — The function to use to form
    a batch from a list of elements of `train_dataset` or `eval_dataset`. Will default
    to [default_data_collator()](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.default_data_collator)
    if no `tokenizer` is provided, an instance of [DataCollatorWithPadding](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DataCollatorWithPadding)
    otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`train_dataset` (`torch.utils.data.Dataset` or `torch.utils.data.IterableDataset`,
    *optional*) — The dataset to use for training. If it is a [Dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset),
    columns not accepted by the `model.forward()` method are automatically removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that if it’s a `torch.utils.data.IterableDataset` with some randomization
    and you are training in a distributed fashion, your iterable dataset should either
    use a internal attribute `generator` that is a `torch.Generator` for the randomization
    that must be identical on all processes (and the Trainer will manually set the
    seed of this `generator` at each epoch) or have a `set_epoch()` method that internally
    sets the seed of the RNGs used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`eval_dataset` (Union[`torch.utils.data.Dataset`, Dict[str, `torch.utils.data.Dataset`]),
    *optional*) — The dataset to use for evaluation. If it is a [Dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset),
    columns not accepted by the `model.forward()` method are automatically removed.
    If it is a dictionary, it will evaluate on each dataset prepending the dictionary
    key to the metric name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tokenizer` ([PreTrainedTokenizerBase](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase),
    *optional*) — The tokenizer used to preprocess the data. If provided, will be
    used to automatically pad the inputs to the maximum length when batching inputs,
    and it will be saved along the model to make it easier to rerun an interrupted
    training or reuse the fine-tuned model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_init` (`Callable[[], PreTrainedModel]`, *optional*) — A function that
    instantiates the model to be used. If provided, each call to [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)
    will start from a new instance of the model as given by this function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function may have zero argument, or a single one containing the optuna/Ray
    Tune/SigOpt trial object, to be able to choose different architectures according
    to hyper parameters (such as layer count, sizes of inner layers, dropout probabilities
    etc).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`compute_metrics` (`Callable[[EvalPrediction], Dict]`, *optional*) — The function
    that will be used to compute metrics at evaluation. Must take a [EvalPrediction](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.EvalPrediction)
    and return a dictionary string to metric values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`callbacks` (List of [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback),
    *optional*) — A list of callbacks to customize the training loop. Will add those
    to the list of default callbacks detailed in [here](callback).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to remove one of the default callbacks used, use the [Trainer.remove_callback()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.remove_callback)
    method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`optimizers` (`Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR]`,
    *optional*, defaults to `(None, None)`) — A tuple containing the optimizer and
    the scheduler to use. Will default to an instance of [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    on your model and a scheduler given by [get_linear_schedule_with_warmup()](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.get_linear_schedule_with_warmup)
    controlled by `args`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`preprocess_logits_for_metrics` (`Callable[[torch.Tensor, torch.Tensor], torch.Tensor]`,
    *optional*) — A function that preprocess the logits right before caching them
    at each evaluation step. Must take two tensors, the logits and the labels, and
    return the logits once processed as desired. The modifications made by this function
    will be reflected in the predictions received by `compute_metrics`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the labels (second parameter) will be `None` if the dataset does not
    have them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Trainer is a simple but feature-complete training and eval loop for PyTorch,
    optimized for 🤗 Transformers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`model` — Always points to the core model. If using a transformers model, it
    will be a [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel)
    subclass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_wrapped` — Always points to the most external model in case one or more
    other modules wrap the original model. This is the model that should be used for
    the forward pass. For example, under `DeepSpeed`, the inner model is wrapped in
    `DeepSpeed` and then again in `torch.nn.DistributedDataParallel`. If the inner
    model hasn’t been wrapped, then `self.model_wrapped` is the same as `self.model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_model_parallel` — Whether or not a model has been switched to a model parallel
    mode (different from data parallelism, this means some of the model layers are
    split on different GPUs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`place_model_on_device` — Whether or not to automatically place the model on
    the device - it will be set to `False` if model parallel or deepspeed is used,
    or if the default `TrainingArguments.place_model_on_device` is overridden to return
    `False` .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_in_train` — Whether or not a model is currently running `train` (e.g. when
    `evaluate` is called while in `train`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `add_callback`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L654)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`callback` (`type` or [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback))
    — A [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback)
    class or an instance of a [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback).
    In the first case, will instantiate a member of that class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a callback to the current list of [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `autocast_smart_context_manager`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L2734)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A helper wrapper that creates an appropriate context manager for `autocast`
    while feeding it the desired arguments, depending on the situation.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `compute_loss`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L2785)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How the loss is computed by Trainer. By default, all models return the loss
    in the first element.
  prefs: []
  type: TYPE_NORMAL
- en: Subclass and override for custom behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `compute_loss_context_manager`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L2728)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A helper wrapper to group together context managers.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `create_model_card`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L3564)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`language` (`str`, *optional*) — The language of the model (if applicable)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`license` (`str`, *optional*) — The license of the model. Will default to the
    license of the pretrained model used, if the original model given to the `Trainer`
    comes from a repo on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (`str` or `List[str]`, *optional*) — Some tags to be included in the
    metadata of the model card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_name` (`str`, *optional*) — The name of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`finetuned_from` (`str`, *optional*) — The name of the model used to fine-tune
    this one (if applicable). Will default to the name of the repo of the original
    model given to the `Trainer` (if it comes from the Hub).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tasks` (`str` or `List[str]`, *optional*) — One or several task identifiers,
    to be included in the metadata of the model card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataset_tags` (`str` or `List[str]`, *optional*) — One or several dataset
    tags, to be included in the metadata of the model card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataset` (`str` or `List[str]`, *optional*) — One or several dataset identifiers,
    to be included in the metadata of the model card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataset_args` (`str` or `List[str]`, *optional*) — One or several dataset
    arguments, to be included in the metadata of the model card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a draft of a model card using the information available to the `Trainer`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `create_optimizer`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L929)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Setup the optimizer.
  prefs: []
  type: TYPE_NORMAL
- en: We provide a reasonable default that works well. If you want to use something
    else, you can pass a tuple in the Trainer’s init through `optimizers`, or subclass
    and override this method in a subclass.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `create_optimizer_and_scheduler`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L902)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Setup the optimizer and the learning rate scheduler.
  prefs: []
  type: TYPE_NORMAL
- en: We provide a reasonable default that works well. If you want to use something
    else, you can pass a tuple in the Trainer’s init through `optimizers`, or subclass
    and override this method (or `create_optimizer` and/or `create_scheduler`) in
    a subclass.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `create_scheduler`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L1109)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`num_training_steps` (int) — The number of training steps to do.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup the scheduler. The optimizer of the trainer must have been set up either
    before this method is called or passed as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `evaluate`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L3031)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`eval_dataset` (Union[`Dataset`, Dict[str, `Dataset`]), *optional*) — Pass
    a dataset if you wish to override `self.eval_dataset`. If it is a [Dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset),
    columns not accepted by the `model.forward()` method are automatically removed.
    If it is a dictionary, it will evaluate on each dataset, prepending the dictionary
    key to the metric name. Datasets must implement the `__len__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you pass a dictionary with names of datasets as keys and datasets as values,
    evaluate will run separate evaluations on each dataset. This can be useful to
    monitor how training affects other datasets or simply to get a more fine-grained
    evaluation. When used with `load_best_model_at_end`, make sure `metric_for_best_model`
    references exactly one of the datasets. If you, for example, pass in `{"data1":
    data1, "data2": data2}` for two datasets `data1` and `data2`, you could specify
    `metric_for_best_model="eval_data1_loss"` for using the loss on `data1` and `metric_for_best_model="eval_data1_loss"`
    for the loss on `data2`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`ignore_keys` (`List[str]`, *optional*) — A list of keys in the output of your
    model (if it is a dictionary) that should be ignored when gathering predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metric_key_prefix` (`str`, *optional*, defaults to `"eval"`) — An optional
    prefix to be used as the metrics key prefix. For example the metrics “bleu” will
    be named “eval_bleu” if the prefix is “eval” (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run evaluation and returns metrics.
  prefs: []
  type: TYPE_NORMAL
- en: The calling script will be responsible for providing a method to compute metrics,
    as they are task-dependent (pass it to the init `compute_metrics` argument).
  prefs: []
  type: TYPE_NORMAL
- en: You can also subclass and override this method to inject custom behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `evaluation_loop`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L3191)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Prediction/evaluation loop, shared by `Trainer.evaluate()` and `Trainer.predict()`.
  prefs: []
  type: TYPE_NORMAL
- en: Works both with or without labels.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `floating_point_ops`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L3529)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`inputs` (`Dict[str, Union[torch.Tensor, Any]]`) — The inputs and targets of
    the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`int`'
  prefs: []
  type: TYPE_NORMAL
- en: The number of floating-point operations.
  prefs: []
  type: TYPE_NORMAL
- en: For models that inherit from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel),
    uses that method to compute the number of floating point operations for every
    backward + forward pass. If using another model, either implement such a method
    in the model or subclass and override this method.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_decay_parameter_names`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L918)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Get all parameter names that weight decay will be applied to
  prefs: []
  type: TYPE_NORMAL
- en: Note that some models implement their own layernorm instead of calling nn.LayerNorm,
    weight decay could still apply to those modules since this function only filter
    out instance of nn.LayerNorm
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_eval_dataloader`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L834)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`eval_dataset` (`torch.utils.data.Dataset`, *optional*) — If provided, will
    override `self.eval_dataset`. If it is a [Dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset),
    columns not accepted by the `model.forward()` method are automatically removed.
    It must implement `__len__`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the evaluation `~torch.utils.data.DataLoader`.
  prefs: []
  type: TYPE_NORMAL
- en: Subclass and override this method if you want to inject some custom behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_optimizer_cls_and_kwargs`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L977)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`args` (`transformers.training_args.TrainingArguments`) — The training arguments
    for the training session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the optimizer class and optimizer parameters based on the training arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_test_dataloader`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L869)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`test_dataset` (`torch.utils.data.Dataset`, *optional*) — The test dataset
    to use. If it is a [Dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset),
    columns not accepted by the `model.forward()` method are automatically removed.
    It must implement `__len__`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns the test `~torch.utils.data.DataLoader`.
  prefs: []
  type: TYPE_NORMAL
- en: Subclass and override this method if you want to inject some custom behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_train_dataloader`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L778)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Returns the training `~torch.utils.data.DataLoader`.
  prefs: []
  type: TYPE_NORMAL
- en: Will use no sampler if `train_dataset` does not implement `__len__`, a random
    sampler (adapted to distributed training if necessary) otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Subclass and override this method if you want to inject some custom behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `hyperparameter_search`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L2596)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`hp_space` (`Callable[["optuna.Trial"], Dict[str, float]]`, *optional*) — A
    function that defines the hyperparameter search space. Will default to `default_hp_space_optuna()`
    or `default_hp_space_ray()` or `default_hp_space_sigopt()` depending on your backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compute_objective` (`Callable[[Dict[str, float]], float]`, *optional*) — A
    function computing the objective to minimize or maximize from the metrics returned
    by the `evaluate` method. Will default to `default_compute_objective()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n_trials` (`int`, *optional*, defaults to 100) — The number of trial runs
    to test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`direction` (`str` or `List[str]`, *optional*, defaults to `"minimize"`) —
    If it’s single objective optimization, direction is `str`, can be `"minimize"`
    or `"maximize"`, you should pick `"minimize"` when optimizing the validation loss,
    `"maximize"` when optimizing one or several metrics. If it’s multi objectives
    optimization, direction is `List[str]`, can be List of `"minimize"` and `"maximize"`,
    you should pick `"minimize"` when optimizing the validation loss, `"maximize"`
    when optimizing one or several metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backend` (`str` or `~training_utils.HPSearchBackend`, *optional*) — The backend
    to use for hyperparameter search. Will default to optuna or Ray Tune or SigOpt,
    depending on which one is installed. If all are installed, will default to optuna.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hp_name` (`Callable[["optuna.Trial"], str]]`, *optional*) — A function that
    defines the trial/run name. Will default to None.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`, *optional*) — Additional keyword arguments passed
    along to `optuna.create_study` or `ray.tune.run`. For more information see:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the documentation of [optuna.create_study](https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the documentation of [tune.run](https://docs.ray.io/en/latest/tune/api_docs/execution.html#tune-run)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: the documentation of [sigopt](https://app.sigopt.com/docs/endpoints/experiments/create)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[`trainer_utils.BestRun` or `List[trainer_utils.BestRun]`]'
  prefs: []
  type: TYPE_NORMAL
- en: All the information about the best run or best runs for multi-objective optimization.
    Experiment summary can be found in `run_summary` attribute for Ray backend.
  prefs: []
  type: TYPE_NORMAL
- en: Launch an hyperparameter search using `optuna` or `Ray Tune` or `SigOpt`. The
    optimized quantity is determined by `compute_objective`, which defaults to a function
    returning the evaluation loss when no metric is provided, the sum of all metrics
    otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this method, you need to have provided a `model_init` when initializing
    your [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer):
    we need to reinitialize the model at each new run. This is incompatible with the
    `optimizers` argument, so you need to subclass [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    and override the method [create_optimizer_and_scheduler()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.create_optimizer_and_scheduler)
    for custom optimizer/scheduler.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `init_hf_repo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L3547)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Initializes a git repo in `self.args.hub_model_id`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `is_local_process_zero`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L2822)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Whether or not this process is the local (e.g., on one machine if training in
    a distributed fashion on several machines) main process.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `is_world_process_zero`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L2829)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Whether or not this process is the global main process (when training in a distributed
    fashion on several machines, this is only going to be `True` for one process).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `log`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L2675)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`logs` (`Dict[str, float]`) — The values to log.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log `logs` on the various objects watching training.
  prefs: []
  type: TYPE_NORMAL
- en: Subclass and override this method to inject custom behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `log_metrics`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer_pt_utils.py#L905)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`split` (`str`) — Mode/split name: one of `train`, `eval`, `test`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metrics` (`Dict[str, float]`) — The metrics returned from train/evaluate/predictmetrics:
    metrics dict'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log metrics in a specially formatted way
  prefs: []
  type: TYPE_NORMAL
- en: Under distributed environment this is done only for a process with rank 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notes on memory reports:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to get memory usage report you need to install `psutil`. You can do
    that with `pip install psutil`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when this method is run, you will see a report that will include: :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Understanding the reports:**'
  prefs: []
  type: TYPE_NORMAL
- en: the first segment, e.g., `train__`, tells you which stage the metrics are for.
    Reports starting with `init_` will be added to the first stage that gets run.
    So that if only evaluation is run, the memory usage for the `__init__` will be
    reported along with the `eval_` metrics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the third segment, is either `cpu` or `gpu`, tells you whether it’s the general
    RAM or the gpu0 memory metric.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*_alloc_delta` - is the difference in the used/allocated memory counter between
    the end and the start of the stage - it can be negative if a function released
    more memory than it allocated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*_peaked_delta` - is any extra memory that was consumed and then freed - relative
    to the current allocated memory counter - it is never negative. When you look
    at the metrics of any stage you add up `alloc_delta` + `peaked_delta` and you
    know how much memory was needed to complete that stage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu).
    Typically this is enough since the main process does the bulk of work, but it
    could be not quite so if model parallel is used and then other GPUs may use a
    different amount of gpu memory. This is also not the same under DataParallel where
    gpu0 may require much more memory than the rest since it stores the gradient and
    optimizer states for all participating GPUS. Perhaps in the future these reports
    will evolve to measure those too.
  prefs: []
  type: TYPE_NORMAL
- en: The CPU RAM metric measures RSS (Resident Set Size) includes both the memory
    which is unique to the process and the memory shared with other processes. It
    is important to note that it does not include swapped out memory, so the reports
    could be imprecise.
  prefs: []
  type: TYPE_NORMAL
- en: The CPU peak memory is measured using a sampling thread. Due to python’s GIL
    it may miss some of the peak memory if that thread didn’t get a chance to run
    when the highest memory was used. Therefore this report can be less than reality.
    Using `tracemalloc` would have reported the exact peak memory, but it doesn’t
    report memory allocations outside of python. So if some C++ CUDA extension allocated
    its own memory it won’t be reported. And therefore it was dropped in favor of
    the memory sampling approach, which reads the current process memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: The GPU allocated and peak memory reporting is done with `torch.cuda.memory_allocated()`
    and `torch.cuda.max_memory_allocated()`. This metric reports only “deltas” for
    pytorch-specific allocations, as `torch.cuda` memory management system doesn’t
    track any memory allocated outside of pytorch. For example, the very first cuda
    call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this tracker doesn’t account for memory allocations outside of [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)’s
    `__init__`, `train`, `evaluate` and `predict` calls.
  prefs: []
  type: TYPE_NORMAL
- en: Because `evaluation` calls may happen during `train`, we can’t handle nested
    invocations because `torch.cuda.max_memory_allocated` is a single counter, so
    if it gets reset by a nested eval call, `train`’s tracker will report incorrect
    info. If this [pytorch issue](https://github.com/pytorch/pytorch/issues/16266)
    gets resolved it will be possible to change this class to be re-entrant. Until
    then we will only track the outer level of `train`, `evaluate` and `predict` methods.
    Which means that if `eval` is called during `train`, it’s the latter that will
    account for its memory usage and that of the former.
  prefs: []
  type: TYPE_NORMAL
- en: This also means that if any other tool that is used along the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    calls `torch.cuda.reset_peak_memory_stats`, the gpu peak memory stats could be
    invalid. And the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    will disrupt the normal behavior of any such tools that rely on calling `torch.cuda.reset_peak_memory_stats`
    themselves.
  prefs: []
  type: TYPE_NORMAL
- en: For best performance you may want to consider turning the memory profiling off
    for production runs.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `metrics_format`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer_pt_utils.py#L879)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`metrics` (`Dict[str, float]`) — The metrics returned from train/evaluate/predict'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: metrics (`Dict[str, float]`)
  prefs: []
  type: TYPE_NORMAL
- en: The reformatted metrics
  prefs: []
  type: TYPE_NORMAL
- en: Reformat Trainer metrics values to a human-readable format
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_examples`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L1128)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Helper to get number of samples in a `~torch.utils.data.DataLoader` by accessing
    its dataset. When dataloader.dataset does not exist or has no length, estimates
    as best it can
  prefs: []
  type: TYPE_NORMAL
- en: '#### `num_tokens`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L1142)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Helper to get number of tokens in a `~torch.utils.data.DataLoader` by enumerating
    dataloader.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `pop_callback`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L665)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`callback` (`type` or [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback))
    — A [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback)
    class or an instance of a [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback).
    In the first case, will pop the first member of that class found in the list of
    callbacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback)'
  prefs: []
  type: TYPE_NORMAL
- en: The callback removed, if found.
  prefs: []
  type: TYPE_NORMAL
- en: Remove a callback from the current list of [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback)
    and returns it.
  prefs: []
  type: TYPE_NORMAL
- en: If the callback is not found, returns `None` (and no error is raised).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `predict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L3129)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`test_dataset` (`Dataset`) — Dataset to run the predictions on. If it is an
    `datasets.Dataset`, columns not accepted by the `model.forward()` method are automatically
    removed. Has to implement the method `__len__`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_keys` (`List[str]`, *optional*) — A list of keys in the output of your
    model (if it is a dictionary) that should be ignored when gathering predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metric_key_prefix` (`str`, *optional*, defaults to `"test"`) — An optional
    prefix to be used as the metrics key prefix. For example the metrics “bleu” will
    be named “test_bleu” if the prefix is “test” (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run prediction and returns predictions and potential metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the dataset and your use case, your test dataset may contain labels.
    In that case, this method will also return metrics, like in `evaluate()`.
  prefs: []
  type: TYPE_NORMAL
- en: If your predictions or labels have different sequence length (for instance because
    you’re doing dynamic padding in a token classification task) the predictions will
    be padded (on the right) to allow for concatenation into one array. The padding
    index is -100.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns: *NamedTuple* A namedtuple with the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: 'predictions (`np.ndarray`): The predictions on `test_dataset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'label_ids (`np.ndarray`, *optional*): The labels (if the dataset contained
    some).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'metrics (`Dict[str, float]`, *optional*): The potential dictionary of metrics
    (if the dataset contained labels).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `prediction_loop`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L3766)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Prediction/evaluation loop, shared by `Trainer.evaluate()` and `Trainer.predict()`.
  prefs: []
  type: TYPE_NORMAL
- en: Works both with or without labels.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `prediction_step`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L3424)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model` (`nn.Module`) — The model to evaluate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inputs` (`Dict[str, Union[torch.Tensor, Any]]`) — The inputs and targets of
    the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dictionary will be unpacked before being fed to the model. Most models expect
    the targets under the argument `labels`. Check your model’s documentation for
    all accepted arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`prediction_loss_only` (`bool`) — Whether or not to return the loss only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_keys` (`List[str]`, *optional*) — A list of keys in the output of your
    model (if it is a dictionary) that should be ignored when gathering predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]
  prefs: []
  type: TYPE_NORMAL
- en: A tuple with the loss, logits and labels (each being optional).
  prefs: []
  type: TYPE_NORMAL
- en: Perform an evaluation step on `model` using `inputs`.
  prefs: []
  type: TYPE_NORMAL
- en: Subclass and override to inject custom behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `propagate_args_to_deepspeed`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L4012)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Sets values in the deepspeed plugin based on the Trainer args
  prefs: []
  type: TYPE_NORMAL
- en: '#### `push_to_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L3702)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*, defaults to `"End of training"`) — Message
    to commit while pushing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blocking` (`bool`, *optional*, defaults to `True`) — Whether the function
    should return only when the `git push` has finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`, *optional*) — Additional keyword arguments passed
    along to [create_model_card()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.create_model_card).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload `self.model` and `self.tokenizer` to the 🤗 model hub on the repo `self.args.hub_model_id`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `remove_callback`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L681)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`callback` (`type` or [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback))
    — A [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback)
    class or an instance of a [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback).
    In the first case, will remove the first member of that class found in the list
    of callbacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove a callback from the current list of [TrainerCallback](/docs/transformers/v4.37.2/en/main_classes/callback#transformers.TrainerCallback).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `save_metrics`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer_pt_utils.py#L995)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`split` (`str`) — Mode/split name: one of `train`, `eval`, `test`, `all`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metrics` (`Dict[str, float]`) — The metrics returned from train/evaluate/predict'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`combined` (`bool`, *optional*, defaults to `True`) — Creates combined metrics
    by updating `all_results.json` with metrics of this call'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save metrics into a json file for that split, e.g. `train_results.json`.
  prefs: []
  type: TYPE_NORMAL
- en: Under distributed environment this is done only for a process with rank 0.
  prefs: []
  type: TYPE_NORMAL
- en: To understand the metrics please read the docstring of [log_metrics()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.log_metrics).
    The only difference is that raw unformatted numbers are saved in the current method.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `save_model`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L2841)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Will save the model, so you can reload it using `from_pretrained()`.
  prefs: []
  type: TYPE_NORMAL
- en: Will only save from the main process.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `save_state`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer_pt_utils.py#L1033)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Saves the Trainer state, since Trainer.save_model saves only the tokenizer with
    the model
  prefs: []
  type: TYPE_NORMAL
- en: Under distributed environment this is done only for a process with rank 0.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `train`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L1438)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`resume_from_checkpoint` (`str` or `bool`, *optional*) — If a `str`, local
    path to a saved checkpoint as saved by a previous instance of [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer).
    If a `bool` and equals `True`, load the last checkpoint in *args.output_dir* as
    saved by a previous instance of [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer).
    If present, training will resume from the model/optimizer/scheduler states loaded
    here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trial` (`optuna.Trial` or `Dict[str, Any]`, *optional*) — The trial run or
    the hyperparameter dictionary for hyperparameter search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_keys_for_eval` (`List[str]`, *optional*) — A list of keys in the output
    of your model (if it is a dictionary) that should be ignored when gathering predictions
    for evaluation during the training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`, *optional*) — Additional keyword arguments used
    to hide deprecated arguments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main training entry point.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `training_step`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer.py#L2746)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model` (`nn.Module`) — The model to train.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inputs` (`Dict[str, Union[torch.Tensor, Any]]`) — The inputs and targets of
    the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dictionary will be unpacked before being fed to the model. Most models expect
    the targets under the argument `labels`. Check your model’s documentation for
    all accepted arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.Tensor`'
  prefs: []
  type: TYPE_NORMAL
- en: The tensor with training loss on this batch.
  prefs: []
  type: TYPE_NORMAL
- en: Perform a training step on a batch of inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Subclass and override to inject custom behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Seq2SeqTrainer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.Seq2SeqTrainer`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer_seq2seq.py#L41)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '#### `evaluate`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer_seq2seq.py#L112)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`eval_dataset` (`Dataset`, *optional*) — Pass a dataset if you wish to override
    `self.eval_dataset`. If it is an [Dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset),
    columns not accepted by the `model.forward()` method are automatically removed.
    It must implement the `__len__` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_keys` (`List[str]`, *optional*) — A list of keys in the output of your
    model (if it is a dictionary) that should be ignored when gathering predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metric_key_prefix` (`str`, *optional*, defaults to `"eval"`) — An optional
    prefix to be used as the metrics key prefix. For example the metrics “bleu” will
    be named “eval_bleu” if the prefix is `"eval"` (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*) — The maximum target length to use when predicting
    with the generate method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_beams` (`int`, *optional*) — Number of beams for beam search that will
    be used when predicting with the generate method. 1 means no beam search. gen_kwargs
    — Additional `generate` specific kwargs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run evaluation and returns metrics.
  prefs: []
  type: TYPE_NORMAL
- en: The calling script will be responsible for providing a method to compute metrics,
    as they are task-dependent (pass it to the init `compute_metrics` argument).
  prefs: []
  type: TYPE_NORMAL
- en: You can also subclass and override this method to inject custom behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `predict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/trainer_seq2seq.py#L168)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`test_dataset` (`Dataset`) — Dataset to run the predictions on. If it is a
    [Dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset),
    columns not accepted by the `model.forward()` method are automatically removed.
    Has to implement the method `__len__`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_keys` (`List[str]`, *optional*) — A list of keys in the output of your
    model (if it is a dictionary) that should be ignored when gathering predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metric_key_prefix` (`str`, *optional*, defaults to `"eval"`) — An optional
    prefix to be used as the metrics key prefix. For example the metrics “bleu” will
    be named “eval_bleu” if the prefix is `"eval"` (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*) — The maximum target length to use when predicting
    with the generate method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_beams` (`int`, *optional*) — Number of beams for beam search that will
    be used when predicting with the generate method. 1 means no beam search. gen_kwargs
    — Additional `generate` specific kwargs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run prediction and returns predictions and potential metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the dataset and your use case, your test dataset may contain labels.
    In that case, this method will also return metrics, like in `evaluate()`.
  prefs: []
  type: TYPE_NORMAL
- en: If your predictions or labels have different sequence lengths (for instance
    because you’re doing dynamic padding in a token classification task) the predictions
    will be padded (on the right) to allow for concatenation into one array. The padding
    index is -100.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns: *NamedTuple* A namedtuple with the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: 'predictions (`np.ndarray`): The predictions on `test_dataset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'label_ids (`np.ndarray`, *optional*): The labels (if the dataset contained
    some).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'metrics (`Dict[str, float]`, *optional*): The potential dictionary of metrics
    (if the dataset contained labels).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TrainingArguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.TrainingArguments`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L161)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`output_dir` (`str`) — The output directory where the model predictions and
    checkpoints will be written.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overwrite_output_dir` (`bool`, *optional*, defaults to `False`) — If `True`,
    overwrite the content of the output directory. Use this to continue training if
    `output_dir` points to a checkpoint directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_train` (`bool`, *optional*, defaults to `False`) — Whether to run training
    or not. This argument is not directly used by [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    it’s intended to be used by your training/evaluation scripts instead. See the
    [example scripts](https://github.com/huggingface/transformers/tree/main/examples)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_eval` (`bool`, *optional*) — Whether to run evaluation on the validation
    set or not. Will be set to `True` if `evaluation_strategy` is different from `"no"`.
    This argument is not directly used by [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    it’s intended to be used by your training/evaluation scripts instead. See the
    [example scripts](https://github.com/huggingface/transformers/tree/main/examples)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_predict` (`bool`, *optional*, defaults to `False`) — Whether to run predictions
    on the test set or not. This argument is not directly used by [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    it’s intended to be used by your training/evaluation scripts instead. See the
    [example scripts](https://github.com/huggingface/transformers/tree/main/examples)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`evaluation_strategy` (`str` or [IntervalStrategy](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.IntervalStrategy),
    *optional*, defaults to `"no"`) — The evaluation strategy to adopt during training.
    Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"no"`: No evaluation is done during training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"steps"`: Evaluation is done (and logged) every `eval_steps`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"epoch"`: Evaluation is done at the end of each epoch.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prediction_loss_only` (`bool`, *optional*, defaults to `False`) — When performing
    evaluation and generating predictions, only returns the loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`per_device_train_batch_size` (`int`, *optional*, defaults to 8) — The batch
    size per GPU/XPU/TPU/MPS/NPU core/CPU for training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`per_device_eval_batch_size` (`int`, *optional*, defaults to 8) — The batch
    size per GPU/XPU/TPU/MPS/NPU core/CPU for evaluation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient_accumulation_steps` (`int`, *optional*, defaults to 1) — Number of
    updates steps to accumulate the gradients for, before performing a backward/update
    pass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using gradient accumulation, one step is counted as one step with backward
    pass. Therefore, logging, evaluation, save will be conducted every `gradient_accumulation_steps
    * xxx_step` training examples.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`eval_accumulation_steps` (`int`, *optional*) — Number of predictions steps
    to accumulate the output tensors for, before moving the results to the CPU. If
    left unset, the whole predictions are accumulated on GPU/NPU/TPU before being
    moved to the CPU (faster but requires more memory).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eval_delay` (`float`, *optional*) — Number of epochs or steps to wait for
    before the first evaluation can be performed, depending on the evaluation_strategy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`learning_rate` (`float`, *optional*, defaults to 5e-5) — The initial learning
    rate for [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weight_decay` (`float`, *optional*, defaults to 0) — The weight decay to apply
    (if not zero) to all layers except all bias and LayerNorm weights in [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adam_beta1` (`float`, *optional*, defaults to 0.9) — The beta1 hyperparameter
    for the [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adam_beta2` (`float`, *optional*, defaults to 0.999) — The beta2 hyperparameter
    for the [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adam_epsilon` (`float`, *optional*, defaults to 1e-8) — The epsilon hyperparameter
    for the [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_grad_norm` (`float`, *optional*, defaults to 1.0) — Maximum gradient norm
    (for gradient clipping).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_train_epochs(float,` *optional*, defaults to 3.0) — Total number of training
    epochs to perform (if not an integer, will perform the decimal part percents of
    the last epoch before stopping training).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_steps` (`int`, *optional*, defaults to -1) — If set to a positive number,
    the total number of training steps to perform. Overrides `num_train_epochs`. For
    a finite dataset, training is reiterated through the dataset (if all data is exhausted)
    until `max_steps` is reached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lr_scheduler_type` (`str` or [SchedulerType](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.SchedulerType),
    *optional*, defaults to `"linear"`) — The scheduler type to use. See the documentation
    of [SchedulerType](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.SchedulerType)
    for all possible values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lr_scheduler_kwargs` (‘dict’, *optional*, defaults to {}) — The extra arguments
    for the lr_scheduler. See the documentation of each scheduler for possible values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warmup_ratio` (`float`, *optional*, defaults to 0.0) — Ratio of total training
    steps used for a linear warmup from 0 to `learning_rate`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warmup_steps` (`int`, *optional*, defaults to 0) — Number of steps used for
    a linear warmup from 0 to `learning_rate`. Overrides any effect of `warmup_ratio`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_level` (`str`, *optional*, defaults to `passive`) — Logger log level to
    use on the main process. Possible choices are the log levels as strings: ‘debug’,
    ‘info’, ‘warning’, ‘error’ and ‘critical’, plus a ‘passive’ level which doesn’t
    set anything and keeps the current log level for the Transformers library (which
    will be `"warning"` by default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_level_replica` (`str`, *optional*, defaults to `"warning"`) — Logger log
    level to use on replicas. Same choices as `log_level`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_on_each_node` (`bool`, *optional*, defaults to `True`) — In multinode
    distributed training, whether to log using `log_level` once per node, or only
    on the main node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_dir` (`str`, *optional*) — [TensorBoard](https://www.tensorflow.org/tensorboard)
    log directory. Will default to *output_dir/runs/**CURRENT_DATETIME_HOSTNAME***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_strategy` (`str` or [IntervalStrategy](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.IntervalStrategy),
    *optional*, defaults to `"steps"`) — The logging strategy to adopt during training.
    Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"no"`: No logging is done during training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"epoch"`: Logging is done at the end of each epoch.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"steps"`: Logging is done every `logging_steps`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_first_step` (`bool`, *optional*, defaults to `False`) — Whether to
    log and evaluate the first `global_step` or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_steps` (`int` or `float`, *optional*, defaults to 500) — Number of
    update steps between two logs if `logging_strategy="steps"`. Should be an integer
    or a float in range `[0,1)`. If smaller than 1, will be interpreted as ratio of
    total training steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_nan_inf_filter` (`bool`, *optional*, defaults to `True`) — Whether
    to filter `nan` and `inf` losses for logging. If set to `True` the loss of every
    step that is `nan` or `inf` is filtered and the average loss of the current logging
    window is taken instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_nan_inf_filter` only influences the logging of loss values, it does
    not change the behavior the gradient is computed or applied to the model.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`save_strategy` (`str` or [IntervalStrategy](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.IntervalStrategy),
    *optional*, defaults to `"steps"`) — The checkpoint save strategy to adopt during
    training. Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"no"`: No save is done during training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"epoch"`: Save is done at the end of each epoch.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"steps"`: Save is done every `save_steps`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_steps` (`int` or `float`, *optional*, defaults to 500) — Number of updates
    steps before two checkpoint saves if `save_strategy="steps"`. Should be an integer
    or a float in range `[0,1)`. If smaller than 1, will be interpreted as ratio of
    total training steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_total_limit` (`int`, *optional*) — If a value is passed, will limit the
    total amount of checkpoints. Deletes the older checkpoints in `output_dir`. When
    `load_best_model_at_end` is enabled, the “best” checkpoint according to `metric_for_best_model`
    will always be retained in addition to the most recent ones. For example, for
    `save_total_limit=5` and `load_best_model_at_end`, the four last checkpoints will
    always be retained alongside the best model. When `save_total_limit=1` and `load_best_model_at_end`,
    it is possible that two checkpoints are saved: the last one and the best one (if
    they are different).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_safetensors` (`bool`, *optional*, defaults to `True`) — Use [safetensors](https://huggingface.co/docs/safetensors)
    saving and loading for state dicts instead of default `torch.load` and `torch.save`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_on_each_node` (`bool`, *optional*, defaults to `False`) — When doing
    multi-node distributed training, whether to save models and checkpoints on each
    node, or only on the main one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This should not be activated when the different nodes use the same storage as
    the files will be saved with the same names for each node.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`save_only_model` (`bool`, *optional*, defaults to `False`) — When checkpointing,
    whether to only save the model, or also the optimizer, scheduler & rng state.
    Note that when this is true, you won’t be able to resume training from checkpoint.
    This enables you to save storage by not storing the optimizer, scheduler & rng
    state. You can only load the model using `from_pretrained` with this option set
    to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_cpu` (`bool`, *optional*, defaults to `False`) — Whether or not to use
    cpu. If set to False, we will use cuda or mps device if available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seed` (`int`, *optional*, defaults to 42) — Random seed that will be set at
    the beginning of training. To ensure reproducibility across runs, use the `~Trainer.model_init`
    function to instantiate the model if it has some randomly initialized parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data_seed` (`int`, *optional*) — Random seed to be used with data samplers.
    If not set, random generators for data sampling will use the same seed as `seed`.
    This can be used to ensure reproducibility of data sampling, independent of the
    model seed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jit_mode_eval` (`bool`, *optional*, defaults to `False`) — Whether or not
    to use PyTorch jit trace for inference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_ipex` (`bool`, *optional*, defaults to `False`) — Use Intel extension
    for PyTorch when it is available. [IPEX installation](https://github.com/intel/intel-extension-for-pytorch).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bf16` (`bool`, *optional*, defaults to `False`) — Whether to use bf16 16-bit
    (mixed) precision training instead of 32-bit training. Requires Ampere or higher
    NVIDIA architecture or using CPU (use_cpu) or Ascend NPU. This is an experimental
    API and it may change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fp16` (`bool`, *optional*, defaults to `False`) — Whether to use fp16 16-bit
    (mixed) precision training instead of 32-bit training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fp16_opt_level` (`str`, *optional*, defaults to ‘O1’) — For `fp16` training,
    Apex AMP optimization level selected in [‘O0’, ‘O1’, ‘O2’, and ‘O3’]. See details
    on the [Apex documentation](https://nvidia.github.io/apex/amp).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fp16_backend` (`str`, *optional*, defaults to `"auto"`) — This argument is
    deprecated. Use `half_precision_backend` instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`half_precision_backend` (`str`, *optional*, defaults to `"auto"`) — The backend
    to use for mixed precision training. Must be one of `"auto", "apex", "cpu_amp"`.
    `"auto"` will use CPU/CUDA AMP or APEX depending on the PyTorch version detected,
    while the other choices will force the requested backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bf16_full_eval` (`bool`, *optional*, defaults to `False`) — Whether to use
    full bfloat16 evaluation instead of 32-bit. This will be faster and save memory
    but can harm metric values. This is an experimental API and it may change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fp16_full_eval` (`bool`, *optional*, defaults to `False`) — Whether to use
    full float16 evaluation instead of 32-bit. This will be faster and save memory
    but can harm metric values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tf32` (`bool`, *optional*) — Whether to enable the TF32 mode, available in
    Ampere and newer GPU architectures. The default value depends on PyTorch’s version
    default of `torch.backends.cuda.matmul.allow_tf32`. For more details please refer
    to the [TF32](https://huggingface.co/docs/transformers/performance#tf32) documentation.
    This is an experimental API and it may change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_rank` (`int`, *optional*, defaults to -1) — Rank of the process during
    distributed training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddp_backend` (`str`, *optional*) — The backend to use for distributed training.
    Must be one of `"nccl"`, `"mpi"`, `"ccl"`, `"gloo"`, `"hccl"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tpu_num_cores` (`int`, *optional*) — When training on TPU, the number of TPU
    cores (automatically passed by launcher script).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataloader_drop_last` (`bool`, *optional*, defaults to `False`) — Whether
    to drop the last incomplete batch (if the length of the dataset is not divisible
    by the batch size) or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eval_steps` (`int` or `float`, *optional*) — Number of update steps between
    two evaluations if `evaluation_strategy="steps"`. Will default to the same value
    as `logging_steps` if not set. Should be an integer or a float in range `[0,1)`.
    If smaller than 1, will be interpreted as ratio of total training steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataloader_num_workers` (`int`, *optional*, defaults to 0) — Number of subprocesses
    to use for data loading (PyTorch only). 0 means that the data will be loaded in
    the main process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`past_index` (`int`, *optional*, defaults to -1) — Some models like [TransformerXL](../model_doc/transformerxl)
    or [XLNet](../model_doc/xlnet) can make use of the past hidden states for their
    predictions. If this argument is set to a positive int, the `Trainer` will use
    the corresponding output (usually index 2) as the past state and feed it to the
    model at the next training step under the keyword argument `mems`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_name` (`str`, *optional*) — A descriptor for the run. Typically used for
    [wandb](https://www.wandb.com/) and [mlflow](https://www.mlflow.org/) logging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disable_tqdm` (`bool`, *optional*) — Whether or not to disable the tqdm progress
    bars and table of metrics produced by `~notebook.NotebookTrainingTracker` in Jupyter
    Notebooks. Will default to `True` if the logging level is set to warn or lower
    (default), `False` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove_unused_columns` (`bool`, *optional*, defaults to `True`) — Whether
    or not to automatically remove the columns unused by the model forward method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_names` (`List[str]`, *optional*) — The list of keys in your dictionary
    of inputs that correspond to the labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will eventually default to the list of argument names accepted by the model
    that contain the word “label”, except if the model used is one of the `XxxForQuestionAnswering`
    in which case it will also include the `["start_positions", "end_positions"]`
    keys.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`load_best_model_at_end` (`bool`, *optional*, defaults to `False`) — Whether
    or not to load the best model found during training at the end of training. When
    this option is enabled, the best checkpoint will always be saved. See [`save_total_limit`](https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments.save_total_limit)
    for more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When set to `True`, the parameters `save_strategy` needs to be the same as `evaluation_strategy`,
    and in the case it is “steps”, `save_steps` must be a round multiple of `eval_steps`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`metric_for_best_model` (`str`, *optional*) — Use in conjunction with `load_best_model_at_end`
    to specify the metric to use to compare two different models. Must be the name
    of a metric returned by the evaluation with or without the prefix `"eval_"`. Will
    default to `"loss"` if unspecified and `load_best_model_at_end=True` (to use the
    evaluation loss).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you set this value, `greater_is_better` will default to `True`. Don’t forget
    to set it to `False` if your metric is better when lower.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`greater_is_better` (`bool`, *optional*) — Use in conjunction with `load_best_model_at_end`
    and `metric_for_best_model` to specify if better models should have a greater
    metric or not. Will default to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` if `metric_for_best_model` is set to a value that isn’t `"loss"` or
    `"eval_loss"`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` if `metric_for_best_model` is not set, or set to `"loss"` or `"eval_loss"`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_data_skip` (`bool`, *optional*, defaults to `False`) — When resuming
    training, whether or not to skip the epochs and batches to get the data loading
    at the same stage as in the previous training. If set to `True`, the training
    will begin faster (as that skipping step can take a long time) but will not yield
    the same results as the interrupted training would have.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fsdp` (`bool`, `str` or list of `FSDPOption`, *optional*, defaults to `''''`)
    — Use PyTorch Distributed Parallel Training (in distributed training only).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of options along the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"full_shard"`: Shard parameters, gradients and optimizer states.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"shard_grad_op"`: Shard optimizer states and gradients.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"hybrid_shard"`: Apply `FULL_SHARD` within a node, and replicate parameters
    across nodes.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"hybrid_shard_zero2"`: Apply `SHARD_GRAD_OP` within a node, and replicate
    parameters across nodes.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"offload"`: Offload parameters and gradients to CPUs (only compatible with
    `"full_shard"` and `"shard_grad_op"`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"auto_wrap"`: Automatically recursively wrap layers with FSDP using `default_auto_wrap_policy`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fsdp_config` (`str` or `dict`, *optional*) — Config to be used with fsdp (Pytorch
    Distributed Parallel Training). The value is either a location of fsdp json config
    file (e.g., `fsdp_config.json`) or an already loaded json file as `dict`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A List of config and its options:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'min_num_params (`int`, *optional*, defaults to `0`): FSDP’s minimum number
    of parameters for Default Auto Wrapping. (useful only when `fsdp` field is passed).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'transformer_layer_cls_to_wrap (`List[str]`, *optional*): List of transformer
    layer class names (case-sensitive) to wrap, e.g, `BertLayer`, `GPTJBlock`, `T5Block`
    … (useful only when `fsdp` flag is passed).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: backward_prefetch (`str`, *optional*) FSDP’s backward prefetch mode. Controls
    when to prefetch next set of parameters (useful only when `fsdp` field is passed).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of options along the following:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"backward_pre"` : Prefetches the next set of parameters before the current
    set of parameter’s gradient computation.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"backward_post"` : This prefetches the next set of parameters after the current
    set of parameter’s gradient computation.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: forward_prefetch (`bool`, *optional*, defaults to `False`) FSDP’s forward prefetch
    mode (useful only when `fsdp` field is passed). If `"True"`, then FSDP explicitly
    prefetches the next upcoming all-gather while executing in the forward pass.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: limit_all_gathers (`bool`, *optional*, defaults to `False`) FSDP’s limit_all_gathers
    (useful only when `fsdp` field is passed). If `"True"`, FSDP explicitly synchronizes
    the CPU thread to prevent too many in-flight all-gathers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: use_orig_params (`bool`, *optional*, defaults to `True`) If `"True"`, allows
    non-uniform `requires_grad` during init, which means support for interspersed
    frozen and trainable paramteres. Useful in cases such as parameter-efficient fine-tuning.
    Please refer this [blog]([https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019](https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sync_module_states (`bool`, *optional*, defaults to `True`) If `"True"`, each
    individually wrapped FSDP unit will broadcast module parameters from rank 0 to
    ensure they are the same across all ranks after initialization
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'activation_checkpointing (`bool`, *optional*, defaults to `False`): If `"True"`,
    activation checkpointing is a technique to reduce memory usage by clearing activations
    of certain layers and recomputing them during a backward pass. Effectively, this
    trades extra computation time for reduced memory usage.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'xla (`bool`, *optional*, defaults to `False`): Whether to use PyTorch/XLA Fully
    Sharded Data Parallel Training. This is an experimental feature and its API may
    evolve in the future.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xla_fsdp_settings (`dict`, *optional*) The value is a dictionary which stores
    the XLA FSDP wrapping parameters.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For a complete list of options, please see [here](https://github.com/pytorch/xla/blob/master/torch_xla/distributed/fsdp/xla_fully_sharded_data_parallel.py).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'xla_fsdp_grad_ckpt (`bool`, *optional*, defaults to `False`): Will use gradient
    checkpointing over each nested XLA FSDP wrapped layer. This setting can only be
    used when the xla flag is set to true, and an auto wrapping policy is specified
    through fsdp_min_num_params or fsdp_transformer_layer_cls_to_wrap.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deepspeed` (`str` or `dict`, *optional*) — Use [Deepspeed](https://github.com/microsoft/deepspeed).
    This is an experimental feature and its API may evolve in the future. The value
    is either the location of DeepSpeed json config file (e.g., `ds_config.json`)
    or an already loaded json file as a `dict`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_smoothing_factor` (`float`, *optional*, defaults to 0.0) — The label
    smoothing factor to use. Zero means no label smoothing, otherwise the underlying
    onehot-encoded labels are changed from 0s and 1s to `label_smoothing_factor/num_labels`
    and `1 - label_smoothing_factor + label_smoothing_factor/num_labels` respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug` (`str` or list of `DebugOption`, *optional*, defaults to `""`) — Enable
    one or more debug features. This is an experimental feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Possible options are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"underflow_overflow"`: detects overflow in model’s input/outputs and reports
    the last frames that led to the event'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"tpu_metrics_debug"`: print debug metrics on TPU'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The options should be separated by whitespaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`optim` (`str` or `training_args.OptimizerNames`, *optional*, defaults to `"adamw_torch"`)
    — The optimizer to use: adamw_hf, adamw_torch, adamw_torch_fused, adamw_apex_fused,
    adamw_anyprecision or adafactor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`optim_args` (`str`, *optional*) — Optional arguments that are supplied to
    AnyPrecisionAdamW.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_by_length` (`bool`, *optional*, defaults to `False`) — Whether or not
    to group together samples of roughly the same length in the training dataset (to
    minimize padding applied and be more efficient). Only useful if applying dynamic
    padding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length_column_name` (`str`, *optional*, defaults to `"length"`) — Column name
    for precomputed lengths. If the column exists, grouping by length will use these
    values rather than computing them on train startup. Ignored unless `group_by_length`
    is `True` and the dataset is an instance of `Dataset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`report_to` (`str` or `List[str]`, *optional*, defaults to `"all"`) — The list
    of integrations to report the results and logs to. Supported platforms are `"azure_ml"`,
    `"clearml"`, `"codecarbon"`, `"comet_ml"`, `"dagshub"`, `"dvclive"`, `"flyte"`,
    `"mlflow"`, `"neptune"`, `"tensorboard"`, and `"wandb"`. Use `"all"` to report
    to all integrations installed, `"none"` for no integrations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddp_find_unused_parameters` (`bool`, *optional*) — When using distributed
    training, the value of the flag `find_unused_parameters` passed to `DistributedDataParallel`.
    Will default to `False` if gradient checkpointing is used, `True` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddp_bucket_cap_mb` (`int`, *optional*) — When using distributed training,
    the value of the flag `bucket_cap_mb` passed to `DistributedDataParallel`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddp_broadcast_buffers` (`bool`, *optional*) — When using distributed training,
    the value of the flag `broadcast_buffers` passed to `DistributedDataParallel`.
    Will default to `False` if gradient checkpointing is used, `True` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataloader_pin_memory` (`bool`, *optional*, defaults to `True`) — Whether
    you want to pin memory in data loaders or not. Will default to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataloader_persistent_workers` (`bool`, *optional*, defaults to `False`) —
    If True, the data loader will not shut down the worker processes after a dataset
    has been consumed once. This allows to maintain the workers Dataset instances
    alive. Can potentially speed up training, but will increase RAM usage. Will default
    to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_memory_metrics` (`bool`, *optional*, defaults to `True`) — Whether to
    skip adding of memory profiler reports to metrics. This is skipped by default
    because it slows down the training and evaluation speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push_to_hub` (`bool`, *optional*, defaults to `False`) — Whether or not to
    push the model to the Hub every time the model is saved. If this is activated,
    `output_dir` will begin a git directory synced with the repo (determined by `hub_model_id`)
    and the content will be pushed each time a save is triggered (depending on your
    `save_strategy`). Calling [save_model()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.save_model)
    will also trigger a push.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `output_dir` exists, it needs to be a local clone of the repository to which
    the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    will be pushed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`resume_from_checkpoint` (`str`, *optional*) — The path to a folder with a
    valid checkpoint for your model. This argument is not directly used by [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    it’s intended to be used by your training/evaluation scripts instead. See the
    [example scripts](https://github.com/huggingface/transformers/tree/main/examples)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hub_model_id` (`str`, *optional*) — The name of the repository to keep in
    sync with the local *output_dir*. It can be a simple model ID in which case the
    model will be pushed in your namespace. Otherwise it should be the whole repository
    name, for instance `"user_name/model"`, which allows you to push to an organization
    you are a member of with `"organization_name/model"`. Will default to `user_name/output_dir_name`
    with *output_dir_name* being the name of `output_dir`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will default to the name of `output_dir`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`hub_strategy` (`str` or `HubStrategy`, *optional*, defaults to `"every_save"`)
    — Defines the scope of what is pushed to the Hub and when. Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"end"`: push the model, its configuration, the tokenizer (if passed along
    to the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer))
    and a draft of a model card when the [save_model()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.save_model)
    method is called.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"every_save"`: push the model, its configuration, the tokenizer (if passed
    along to the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer))
    and a draft of a model card each time there is a model save. The pushes are asynchronous
    to not block training, and in case the save are very frequent, a new push is only
    attempted if the previous one is finished. A last push is made with the final
    model at the end of training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"checkpoint"`: like `"every_save"` but the latest checkpoint is also pushed
    in a subfolder named last-checkpoint, allowing you to resume training easily with
    `trainer.train(resume_from_checkpoint="last-checkpoint")`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"all_checkpoints"`: like `"checkpoint"` but all checkpoints are pushed like
    they appear in the output folder (so you will get one checkpoint folder per folder
    in your final repository)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hub_token` (`str`, *optional*) — The token to use to push the model to the
    Hub. Will default to the token in the cache folder obtained with `huggingface-cli
    login`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hub_private_repo` (`bool`, *optional*, defaults to `False`) — If True, the
    Hub repo will be set to private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hub_always_push` (`bool`, *optional*, defaults to `False`) — Unless this is
    `True`, the `Trainer` will skip pushing a checkpoint when the previous push is
    not finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient_checkpointing` (`bool`, *optional*, defaults to `False`) — If True,
    use gradient checkpointing to save memory at the expense of slower backward pass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient_checkpointing_kwargs` (`dict`, *optional*, defaults to `None`) —
    Key word arguments to be passed to the `gradient_checkpointing_enable` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_inputs_for_metrics` (`bool`, *optional*, defaults to `False`) — Whether
    or not the inputs will be passed to the `compute_metrics` function. This is intended
    for metrics that need inputs, predictions and references for scoring calculation
    in Metric class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_find_batch_size` (`bool`, *optional*, defaults to `False`) — Whether
    to find a batch size that will fit into memory automatically through exponential
    decay, avoiding CUDA Out-of-Memory errors. Requires accelerate to be installed
    (`pip install accelerate`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full_determinism` (`bool`, *optional*, defaults to `False`) — If `True`, [enable_full_determinism()](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.enable_full_determinism)
    is called instead of [set_seed()](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.set_seed)
    to ensure reproducible results in distributed training. Important: this will negatively
    impact the performance, so only use it for debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`torchdynamo` (`str`, *optional*) — If set, the backend compiler for TorchDynamo.
    Possible choices are `"eager"`, `"aot_eager"`, `"inductor"`, `"nvfuser"`, `"aot_nvfuser"`,
    `"aot_cudagraphs"`, `"ofi"`, `"fx2trt"`, `"onnxrt"` and `"ipex"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ray_scope` (`str`, *optional*, defaults to `"last"`) — The scope to use when
    doing hyperparameter search with Ray. By default, `"last"` will be used. Ray will
    then use the last checkpoint of all trials, compare those, and select the best
    one. However, other options are also available. See the [Ray documentation](https://docs.ray.io/en/latest/tune/api_docs/analysis.html#ray.tune.ExperimentAnalysis.get_best_trial)
    for more options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddp_timeout` (`int`, *optional*, defaults to 1800) — The timeout for `torch.distributed.init_process_group`
    calls, used to avoid GPU socket timeouts when performing slow operations in distributed
    runnings. Please refer the [PyTorch documentation] ([https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group](https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group))
    for more information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_mps_device` (`bool`, *optional*, defaults to `False`) — This argument
    is deprecated.`mps` device will be used if it is available similar to `cuda` device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`torch_compile` (`bool`, *optional*, defaults to `False`) — Whether or not
    to compile the model using PyTorch 2.0 [`torch.compile`](https://pytorch.org/get-started/pytorch-2.0/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will use the best defaults for the [`torch.compile` API](https://pytorch.org/docs/stable/generated/torch.compile.html?highlight=torch+compile#torch.compile).
    You can customize the defaults with the argument `torch_compile_backend` and `torch_compile_mode`
    but we don’t guarantee any of them will work as the support is progressively rolled
    in in PyTorch.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This flag and the whole compile API is experimental and subject to change in
    future releases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`torch_compile_backend` (`str`, *optional*) — The backend to use in `torch.compile`.
    If set to any value, `torch_compile` will be set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the PyTorch doc for possible values and note that they may change across
    PyTorch versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This flag is experimental and subject to change in future releases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`torch_compile_mode` (`str`, *optional*) — The mode to use in `torch.compile`.
    If set to any value, `torch_compile` will be set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the PyTorch doc for possible values and note that they may change across
    PyTorch versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This flag is experimental and subject to change in future releases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`split_batches` (`bool`, *optional*) — Whether or not the accelerator should
    split the batches yielded by the dataloaders across the devices during distributed
    training. If'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: set to `True`, the actual batch size used will be the same on any kind of distributed
    processes, but it must be a
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: round multiple of the number of processes you are using (such as GPUs).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_tokens_per_second` (`bool`, *optional*) — Whether or not to compute
    the number of tokens per second per device for training speed metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will iterate over the entire training dataloader once beforehand,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and will slow down the entire process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_num_input_tokens_seen` (`bool`, *optional*) — Whether or not to track
    the number of input tokens seen throughout training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May be slower in distributed training as gather operations must be called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`neftune_noise_alpha` (`Optional[float]`) — If not `None`, this will activate
    NEFTune noise embeddings. This can drastically improve model performance for instruction
    fine-tuning. Check out the [original paper](https://arxiv.org/abs/2310.05914)
    and the [original code](https://github.com/neelsjain/NEFTune). Support transformers
    `PreTrainedModel` and also `PeftModel` from peft.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TrainingArguments is the subset of the arguments we use in our example scripts
    **which relate to the training loop itself**.
  prefs: []
  type: TYPE_NORMAL
- en: Using [HfArgumentParser](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.HfArgumentParser)
    we can turn this class into [argparse](https://docs.python.org/3/library/argparse#module-argparse)
    arguments that can be specified on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_process_log_level`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2028)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Returns the log level to be used depending on whether this process is the main
    process of node 0, main process of node non-0, or a non-main process.
  prefs: []
  type: TYPE_NORMAL
- en: For the main process the log level defaults to the logging level set (`logging.WARNING`
    if you didn’t do anything) unless overridden by `log_level` argument.
  prefs: []
  type: TYPE_NORMAL
- en: For the replica processes the log level defaults to `logging.WARNING` unless
    overridden by `log_level_replica` argument.
  prefs: []
  type: TYPE_NORMAL
- en: The choice between the main and replica process settings is made according to
    the return value of `should_log`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_warmup_steps`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2117)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Get number of steps used for a linear warmup.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `main_process_first`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2066)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`local` (`bool`, *optional*, defaults to `True`) — if `True` first means process
    of rank 0 of each node if `False` first means process of rank 0 of node rank 0
    In multi-node environment with a shared filesystem you most likely will want to
    use `local=False` so that only the main process of the first node will do the
    processing. If however, the filesystem is not shared, then the main process of
    each node will need to do the processing, which is the default behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`desc` (`str`, *optional*, defaults to `"work"`) — a work description to be
    used in debug logs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A context manager for torch distributed environment where on needs to do something
    on the main process, while blocking replicas, and when it’s finished releasing
    the replicas.
  prefs: []
  type: TYPE_NORMAL
- en: One such use is for `datasets`’s `map` feature which to be efficient should
    be run once on the main process, which upon completion saves a cached version
    of results and which then automatically gets loaded by the replicas.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_dataloader`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2629)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_last` (`bool`, *optional*, defaults to `False`) — Whether to drop the
    last incomplete batch (if the length of the dataset is not divisible by the batch
    size) or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_workers` (`int`, *optional*, defaults to 0) — Number of subprocesses to
    use for data loading (PyTorch only). 0 means that the data will be loaded in the
    main process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pin_memory` (`bool`, *optional*, defaults to `True`) — Whether you want to
    pin memory in data loaders or not. Will default to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`persistent_workers` (`bool`, *optional*, defaults to `False`) — If True, the
    data loader will not shut down the worker processes after a dataset has been consumed
    once. This allows to maintain the workers Dataset instances alive. Can potentially
    speed up training, but will increase RAM usage. Will default to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_find_batch_size` (`bool`, *optional*, defaults to `False`) — Whether
    to find a batch size that will fit into memory automatically through exponential
    decay, avoiding CUDA Out-of-Memory errors. Requires accelerate to be installed
    (`pip install accelerate`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_data_skip` (`bool`, *optional*, defaults to `False`) — When resuming
    training, whether or not to skip the epochs and batches to get the data loading
    at the same stage as in the previous training. If set to `True`, the training
    will begin faster (as that skipping step can take a long time) but will not yield
    the same results as the interrupted training would have.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sampler_seed` (`int`, *optional*) — Random seed to be used with data samplers.
    If not set, random generators for data sampling will use the same seed as `self.seed`.
    This can be used to ensure reproducibility of data sampling, independent of the
    model seed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that regroups all arguments linked to the dataloaders creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '#### `set_evaluate`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2238)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`strategy` (`str` or [IntervalStrategy](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.IntervalStrategy),
    *optional*, defaults to `"no"`) — The evaluation strategy to adopt during training.
    Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"no"`: No evaluation is done during training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"steps"`: Evaluation is done (and logged) every `steps`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"epoch"`: Evaluation is done at the end of each epoch.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a `strategy` different from `"no"` will set `self.do_eval` to `True`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`steps` (`int`, *optional*, defaults to 500) — Number of update steps between
    two evaluations if `strategy="steps"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`batch_size` (`int` *optional*, defaults to 8) — The batch size per device
    (GPU/TPU core/CPU…) used for evaluation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accumulation_steps` (`int`, *optional*) — Number of predictions steps to accumulate
    the output tensors for, before moving the results to the CPU. If left unset, the
    whole predictions are accumulated on GPU/TPU before being moved to the CPU (faster
    but requires more memory).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delay` (`float`, *optional*) — Number of epochs or steps to wait for before
    the first evaluation can be performed, depending on the evaluation_strategy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loss_only` (`bool`, *optional*, defaults to `False`) — Ignores all outputs
    except the loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jit_mode` (`bool`, *optional*) — Whether or not to use PyTorch jit trace for
    inference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that regroups all arguments linked to evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '#### `set_logging`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2388)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`strategy` (`str` or [IntervalStrategy](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.IntervalStrategy),
    *optional*, defaults to `"steps"`) — The logging strategy to adopt during training.
    Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"no"`: No save is done during training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"epoch"`: Save is done at the end of each epoch.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"steps"`: Save is done every `save_steps`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`steps` (`int`, *optional*, defaults to 500) — Number of update steps between
    two logs if `strategy="steps"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`level` (`str`, *optional*, defaults to `"passive"`) — Logger log level to
    use on the main process. Possible choices are the log levels as strings: `"debug"`,
    `"info"`, `"warning"`, `"error"` and `"critical"`, plus a `"passive"` level which
    doesn’t set anything and lets the application set the level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`report_to` (`str` or `List[str]`, *optional*, defaults to `"all"`) — The list
    of integrations to report the results and logs to. Supported platforms are `"azure_ml"`,
    `"clearml"`, `"codecarbon"`, `"comet_ml"`, `"dagshub"`, `"dvclive"`, `"flyte"`,
    `"mlflow"`, `"neptune"`, `"tensorboard"`, and `"wandb"`. Use `"all"` to report
    to all integrations installed, `"none"` for no integrations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`first_step` (`bool`, *optional*, defaults to `False`) — Whether to log and
    evaluate the first `global_step` or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nan_inf_filter` (`bool`, *optional*, defaults to `True`) — Whether to filter
    `nan` and `inf` losses for logging. If set to `True` the loss of every step that
    is `nan` or `inf` is filtered and the average loss of the current logging window
    is taken instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nan_inf_filter` only influences the logging of loss values, it does not change
    the behavior the gradient is computed or applied to the model.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`on_each_node` (`bool`, *optional*, defaults to `True`) — In multinode distributed
    training, whether to log using `log_level` once per node, or only on the main
    node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`replica_level` (`str`, *optional*, defaults to `"passive"`) — Logger log level
    to use on replicas. Same choices as `log_level`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that regroups all arguments linked to logging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '#### `set_lr_scheduler`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2584)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str` or [SchedulerType](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.SchedulerType),
    *optional*, defaults to `"linear"`) — The scheduler type to use. See the documentation
    of [SchedulerType](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.SchedulerType)
    for all possible values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_epochs(float,` *optional*, defaults to 3.0) — Total number of training
    epochs to perform (if not an integer, will perform the decimal part percents of
    the last epoch before stopping training).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_steps` (`int`, *optional*, defaults to -1) — If set to a positive number,
    the total number of training steps to perform. Overrides `num_train_epochs`. For
    a finite dataset, training is reiterated through the dataset (if all data is exhausted)
    until `max_steps` is reached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warmup_ratio` (`float`, *optional*, defaults to 0.0) — Ratio of total training
    steps used for a linear warmup from 0 to `learning_rate`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warmup_steps` (`int`, *optional*, defaults to 0) — Number of steps used for
    a linear warmup from 0 to `learning_rate`. Overrides any effect of `warmup_ratio`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that regroups all arguments linked to the learning rate scheduler and
    its hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '#### `set_optimizer`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2533)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str` or `training_args.OptimizerNames`, *optional*, defaults to `"adamw_torch"`)
    — The optimizer to use: `"adamw_hf"`, `"adamw_torch"`, `"adamw_torch_fused"`,
    `"adamw_apex_fused"`, `"adamw_anyprecision"` or `"adafactor"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`learning_rate` (`float`, *optional*, defaults to 5e-5) — The initial learning
    rate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weight_decay` (`float`, *optional*, defaults to 0) — The weight decay to apply
    (if not zero) to all layers except all bias and LayerNorm weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beta1` (`float`, *optional*, defaults to 0.9) — The beta1 hyperparameter for
    the adam optimizer or its variants.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`beta2` (`float`, *optional*, defaults to 0.999) — The beta2 hyperparameter
    for the adam optimizer or its variants.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`epsilon` (`float`, *optional*, defaults to 1e-8) — The epsilon hyperparameter
    for the adam optimizer or its variants.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args` (`str`, *optional*) — Optional arguments that are supplied to AnyPrecisionAdamW
    (only useful when `optim="adamw_anyprecision"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that regroups all arguments linked to the optimizer and its hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '#### `set_push_to_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2463)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_id` (`str`) — The name of the repository to keep in sync with the local
    *output_dir*. It can be a simple model ID in which case the model will be pushed
    in your namespace. Otherwise it should be the whole repository name, for instance
    `"user_name/model"`, which allows you to push to an organization you are a member
    of with `"organization_name/model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strategy` (`str` or `HubStrategy`, *optional*, defaults to `"every_save"`)
    — Defines the scope of what is pushed to the Hub and when. Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"end"`: push the model, its configuration, the tokenizer (if passed along
    to the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer))
    and a draft of a model card when the [save_model()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.save_model)
    method is called.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"every_save"`: push the model, its configuration, the tokenizer (if passed
    along to the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer))
    and a draft of a model card each time there is a model save. The pushes are asynchronous
    to not block training, and in case the save are very frequent, a new push is only
    attempted if the previous one is finished. A last push is made with the final
    model at the end of training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"checkpoint"`: like `"every_save"` but the latest checkpoint is also pushed
    in a subfolder named last-checkpoint, allowing you to resume training easily with
    `trainer.train(resume_from_checkpoint="last-checkpoint")`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"all_checkpoints"`: like `"checkpoint"` but all checkpoints are pushed like
    they appear in the output folder (so you will get one checkpoint folder per folder
    in your final repository)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — The token to use to push the model to the Hub.
    Will default to the token in the cache folder obtained with `huggingface-cli login`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private_repo` (`bool`, *optional*, defaults to `False`) — If True, the Hub
    repo will be set to private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`always_push` (`bool`, *optional*, defaults to `False`) — Unless this is `True`,
    the `Trainer` will skip pushing a checkpoint when the previous push is not finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that regroups all arguments linked to synchronizing checkpoints with
    the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Calling this method will set `self.push_to_hub` to `True`, which means the `output_dir`
    will begin a git directory synced with the repo (determined by `model_id`) and
    the content will be pushed each time a save is triggered (depending on`self.save_strategy`).
    Calling [save_model()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.save_model)
    will also trigger a push.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '#### `set_save`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2339)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`strategy` (`str` or [IntervalStrategy](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.IntervalStrategy),
    *optional*, defaults to `"steps"`) — The checkpoint save strategy to adopt during
    training. Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"no"`: No save is done during training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"epoch"`: Save is done at the end of each epoch.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"steps"`: Save is done every `save_steps`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`steps` (`int`, *optional*, defaults to 500) — Number of updates steps before
    two checkpoint saves if `strategy="steps"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`total_limit` (`int`, *optional*) — If a value is passed, will limit the total
    amount of checkpoints. Deletes the older checkpoints in `output_dir`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`on_each_node` (`bool`, *optional*, defaults to `False`) — When doing multi-node
    distributed training, whether to save models and checkpoints on each node, or
    only on the main one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This should not be activated when the different nodes use the same storage as
    the files will be saved with the same names for each node.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A method that regroups all arguments linked to checkpoint saving.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '#### `set_testing`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2299)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_size` (`int` *optional*, defaults to 8) — The batch size per device
    (GPU/TPU core/CPU…) used for testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loss_only` (`bool`, *optional*, defaults to `False`) — Ignores all outputs
    except the loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jit_mode` (`bool`, *optional*) — Whether or not to use PyTorch jit trace for
    inference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that regroups all basic arguments linked to testing on a held-out dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Calling this method will automatically set `self.do_predict` to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '#### `set_training`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2163)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`learning_rate` (`float`, *optional*, defaults to 5e-5) — The initial learning
    rate for the optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`batch_size` (`int` *optional*, defaults to 8) — The batch size per device
    (GPU/TPU core/CPU…) used for training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weight_decay` (`float`, *optional*, defaults to 0) — The weight decay to apply
    (if not zero) to all layers except all bias and LayerNorm weights in the optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_train_epochs(float,` *optional*, defaults to 3.0) — Total number of training
    epochs to perform (if not an integer, will perform the decimal part percents of
    the last epoch before stopping training).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_steps` (`int`, *optional*, defaults to -1) — If set to a positive number,
    the total number of training steps to perform. Overrides `num_train_epochs`. For
    a finite dataset, training is reiterated through the dataset (if all data is exhausted)
    until `max_steps` is reached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient_accumulation_steps` (`int`, *optional*, defaults to 1) — Number of
    updates steps to accumulate the gradients for, before performing a backward/update
    pass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using gradient accumulation, one step is counted as one step with backward
    pass. Therefore, logging, evaluation, save will be conducted every `gradient_accumulation_steps
    * xxx_step` training examples.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`seed` (`int`, *optional*, defaults to 42) — Random seed that will be set at
    the beginning of training. To ensure reproducibility across runs, use the `~Trainer.model_init`
    function to instantiate the model if it has some randomly initialized parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient_checkpointing` (`bool`, *optional*, defaults to `False`) — If True,
    use gradient checkpointing to save memory at the expense of slower backward pass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that regroups all basic arguments linked to the training.
  prefs: []
  type: TYPE_NORMAL
- en: Calling this method will automatically set `self.do_train` to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '#### `to_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2126)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Serializes this instance while replace `Enum` by their values (for JSON serialization
    support). It obfuscates the token values by removing their value.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_json_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2143)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Serializes this instance to a JSON string.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_sanitized_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args.py#L2149)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Sanitized serialization to use with TensorBoard’s hparams
  prefs: []
  type: TYPE_NORMAL
- en: Seq2SeqTrainingArguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.Seq2SeqTrainingArguments`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args_seq2seq.py#L28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`output_dir` (`str`) — The output directory where the model predictions and
    checkpoints will be written.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overwrite_output_dir` (`bool`, *optional*, defaults to `False`) — If `True`,
    overwrite the content of the output directory. Use this to continue training if
    `output_dir` points to a checkpoint directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_train` (`bool`, *optional*, defaults to `False`) — Whether to run training
    or not. This argument is not directly used by [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    it’s intended to be used by your training/evaluation scripts instead. See the
    [example scripts](https://github.com/huggingface/transformers/tree/main/examples)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_eval` (`bool`, *optional*) — Whether to run evaluation on the validation
    set or not. Will be set to `True` if `evaluation_strategy` is different from `"no"`.
    This argument is not directly used by [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    it’s intended to be used by your training/evaluation scripts instead. See the
    [example scripts](https://github.com/huggingface/transformers/tree/main/examples)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_predict` (`bool`, *optional*, defaults to `False`) — Whether to run predictions
    on the test set or not. This argument is not directly used by [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    it’s intended to be used by your training/evaluation scripts instead. See the
    [example scripts](https://github.com/huggingface/transformers/tree/main/examples)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`evaluation_strategy` (`str` or [IntervalStrategy](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.IntervalStrategy),
    *optional*, defaults to `"no"`) — The evaluation strategy to adopt during training.
    Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"no"`: No evaluation is done during training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"steps"`: Evaluation is done (and logged) every `eval_steps`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"epoch"`: Evaluation is done at the end of each epoch.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prediction_loss_only` (`bool`, *optional*, defaults to `False`) — When performing
    evaluation and generating predictions, only returns the loss.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`per_device_train_batch_size` (`int`, *optional*, defaults to 8) — The batch
    size per GPU/XPU/TPU/MPS/NPU core/CPU for training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`per_device_eval_batch_size` (`int`, *optional*, defaults to 8) — The batch
    size per GPU/XPU/TPU/MPS/NPU core/CPU for evaluation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient_accumulation_steps` (`int`, *optional*, defaults to 1) — Number of
    updates steps to accumulate the gradients for, before performing a backward/update
    pass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using gradient accumulation, one step is counted as one step with backward
    pass. Therefore, logging, evaluation, save will be conducted every `gradient_accumulation_steps
    * xxx_step` training examples.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`eval_accumulation_steps` (`int`, *optional*) — Number of predictions steps
    to accumulate the output tensors for, before moving the results to the CPU. If
    left unset, the whole predictions are accumulated on GPU/NPU/TPU before being
    moved to the CPU (faster but requires more memory).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eval_delay` (`float`, *optional*) — Number of epochs or steps to wait for
    before the first evaluation can be performed, depending on the evaluation_strategy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`learning_rate` (`float`, *optional*, defaults to 5e-5) — The initial learning
    rate for [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weight_decay` (`float`, *optional*, defaults to 0) — The weight decay to apply
    (if not zero) to all layers except all bias and LayerNorm weights in [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adam_beta1` (`float`, *optional*, defaults to 0.9) — The beta1 hyperparameter
    for the [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adam_beta2` (`float`, *optional*, defaults to 0.999) — The beta2 hyperparameter
    for the [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`adam_epsilon` (`float`, *optional*, defaults to 1e-8) — The epsilon hyperparameter
    for the [AdamW](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.AdamW)
    optimizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_grad_norm` (`float`, *optional*, defaults to 1.0) — Maximum gradient norm
    (for gradient clipping).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_train_epochs(float,` *optional*, defaults to 3.0) — Total number of training
    epochs to perform (if not an integer, will perform the decimal part percents of
    the last epoch before stopping training).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_steps` (`int`, *optional*, defaults to -1) — If set to a positive number,
    the total number of training steps to perform. Overrides `num_train_epochs`. For
    a finite dataset, training is reiterated through the dataset (if all data is exhausted)
    until `max_steps` is reached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lr_scheduler_type` (`str` or [SchedulerType](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.SchedulerType),
    *optional*, defaults to `"linear"`) — The scheduler type to use. See the documentation
    of [SchedulerType](/docs/transformers/v4.37.2/en/main_classes/optimizer_schedules#transformers.SchedulerType)
    for all possible values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lr_scheduler_kwargs` (‘dict’, *optional*, defaults to {}) — The extra arguments
    for the lr_scheduler. See the documentation of each scheduler for possible values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warmup_ratio` (`float`, *optional*, defaults to 0.0) — Ratio of total training
    steps used for a linear warmup from 0 to `learning_rate`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warmup_steps` (`int`, *optional*, defaults to 0) — Number of steps used for
    a linear warmup from 0 to `learning_rate`. Overrides any effect of `warmup_ratio`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_level` (`str`, *optional*, defaults to `passive`) — Logger log level to
    use on the main process. Possible choices are the log levels as strings: ‘debug’,
    ‘info’, ‘warning’, ‘error’ and ‘critical’, plus a ‘passive’ level which doesn’t
    set anything and keeps the current log level for the Transformers library (which
    will be `"warning"` by default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_level_replica` (`str`, *optional*, defaults to `"warning"`) — Logger log
    level to use on replicas. Same choices as `log_level`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_on_each_node` (`bool`, *optional*, defaults to `True`) — In multinode
    distributed training, whether to log using `log_level` once per node, or only
    on the main node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_dir` (`str`, *optional*) — [TensorBoard](https://www.tensorflow.org/tensorboard)
    log directory. Will default to *output_dir/runs/**CURRENT_DATETIME_HOSTNAME***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_strategy` (`str` or [IntervalStrategy](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.IntervalStrategy),
    *optional*, defaults to `"steps"`) — The logging strategy to adopt during training.
    Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"no"`: No logging is done during training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"epoch"`: Logging is done at the end of each epoch.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"steps"`: Logging is done every `logging_steps`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_first_step` (`bool`, *optional*, defaults to `False`) — Whether to
    log and evaluate the first `global_step` or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_steps` (`int` or `float`, *optional*, defaults to 500) — Number of
    update steps between two logs if `logging_strategy="steps"`. Should be an integer
    or a float in range `[0,1)`. If smaller than 1, will be interpreted as ratio of
    total training steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_nan_inf_filter` (`bool`, *optional*, defaults to `True`) — Whether
    to filter `nan` and `inf` losses for logging. If set to `True` the loss of every
    step that is `nan` or `inf` is filtered and the average loss of the current logging
    window is taken instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logging_nan_inf_filter` only influences the logging of loss values, it does
    not change the behavior the gradient is computed or applied to the model.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`save_strategy` (`str` or [IntervalStrategy](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.IntervalStrategy),
    *optional*, defaults to `"steps"`) — The checkpoint save strategy to adopt during
    training. Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"no"`: No save is done during training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"epoch"`: Save is done at the end of each epoch.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"steps"`: Save is done every `save_steps`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_steps` (`int` or `float`, *optional*, defaults to 500) — Number of updates
    steps before two checkpoint saves if `save_strategy="steps"`. Should be an integer
    or a float in range `[0,1)`. If smaller than 1, will be interpreted as ratio of
    total training steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_total_limit` (`int`, *optional*) — If a value is passed, will limit the
    total amount of checkpoints. Deletes the older checkpoints in `output_dir`. When
    `load_best_model_at_end` is enabled, the “best” checkpoint according to `metric_for_best_model`
    will always be retained in addition to the most recent ones. For example, for
    `save_total_limit=5` and `load_best_model_at_end`, the four last checkpoints will
    always be retained alongside the best model. When `save_total_limit=1` and `load_best_model_at_end`,
    it is possible that two checkpoints are saved: the last one and the best one (if
    they are different).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_safetensors` (`bool`, *optional*, defaults to `True`) — Use [safetensors](https://huggingface.co/docs/safetensors)
    saving and loading for state dicts instead of default `torch.load` and `torch.save`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_on_each_node` (`bool`, *optional*, defaults to `False`) — When doing
    multi-node distributed training, whether to save models and checkpoints on each
    node, or only on the main one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This should not be activated when the different nodes use the same storage as
    the files will be saved with the same names for each node.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`save_only_model` (`bool`, *optional*, defaults to `False`) — When checkpointing,
    whether to only save the model, or also the optimizer, scheduler & rng state.
    Note that when this is true, you won’t be able to resume training from checkpoint.
    This enables you to save storage by not storing the optimizer, scheduler & rng
    state. You can only load the model using `from_pretrained` with this option set
    to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_cpu` (`bool`, *optional*, defaults to `False`) — Whether or not to use
    cpu. If set to False, we will use cuda or mps device if available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seed` (`int`, *optional*, defaults to 42) — Random seed that will be set at
    the beginning of training. To ensure reproducibility across runs, use the `~Trainer.model_init`
    function to instantiate the model if it has some randomly initialized parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data_seed` (`int`, *optional*) — Random seed to be used with data samplers.
    If not set, random generators for data sampling will use the same seed as `seed`.
    This can be used to ensure reproducibility of data sampling, independent of the
    model seed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jit_mode_eval` (`bool`, *optional*, defaults to `False`) — Whether or not
    to use PyTorch jit trace for inference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_ipex` (`bool`, *optional*, defaults to `False`) — Use Intel extension
    for PyTorch when it is available. [IPEX installation](https://github.com/intel/intel-extension-for-pytorch).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bf16` (`bool`, *optional*, defaults to `False`) — Whether to use bf16 16-bit
    (mixed) precision training instead of 32-bit training. Requires Ampere or higher
    NVIDIA architecture or using CPU (use_cpu) or Ascend NPU. This is an experimental
    API and it may change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fp16` (`bool`, *optional*, defaults to `False`) — Whether to use fp16 16-bit
    (mixed) precision training instead of 32-bit training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fp16_opt_level` (`str`, *optional*, defaults to ‘O1’) — For `fp16` training,
    Apex AMP optimization level selected in [‘O0’, ‘O1’, ‘O2’, and ‘O3’]. See details
    on the [Apex documentation](https://nvidia.github.io/apex/amp).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fp16_backend` (`str`, *optional*, defaults to `"auto"`) — This argument is
    deprecated. Use `half_precision_backend` instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`half_precision_backend` (`str`, *optional*, defaults to `"auto"`) — The backend
    to use for mixed precision training. Must be one of `"auto", "apex", "cpu_amp"`.
    `"auto"` will use CPU/CUDA AMP or APEX depending on the PyTorch version detected,
    while the other choices will force the requested backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bf16_full_eval` (`bool`, *optional*, defaults to `False`) — Whether to use
    full bfloat16 evaluation instead of 32-bit. This will be faster and save memory
    but can harm metric values. This is an experimental API and it may change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fp16_full_eval` (`bool`, *optional*, defaults to `False`) — Whether to use
    full float16 evaluation instead of 32-bit. This will be faster and save memory
    but can harm metric values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tf32` (`bool`, *optional*) — Whether to enable the TF32 mode, available in
    Ampere and newer GPU architectures. The default value depends on PyTorch’s version
    default of `torch.backends.cuda.matmul.allow_tf32`. For more details please refer
    to the [TF32](https://huggingface.co/docs/transformers/performance#tf32) documentation.
    This is an experimental API and it may change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_rank` (`int`, *optional*, defaults to -1) — Rank of the process during
    distributed training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddp_backend` (`str`, *optional*) — The backend to use for distributed training.
    Must be one of `"nccl"`, `"mpi"`, `"ccl"`, `"gloo"`, `"hccl"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tpu_num_cores` (`int`, *optional*) — When training on TPU, the number of TPU
    cores (automatically passed by launcher script).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataloader_drop_last` (`bool`, *optional*, defaults to `False`) — Whether
    to drop the last incomplete batch (if the length of the dataset is not divisible
    by the batch size) or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eval_steps` (`int` or `float`, *optional*) — Number of update steps between
    two evaluations if `evaluation_strategy="steps"`. Will default to the same value
    as `logging_steps` if not set. Should be an integer or a float in range `[0,1)`.
    If smaller than 1, will be interpreted as ratio of total training steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataloader_num_workers` (`int`, *optional*, defaults to 0) — Number of subprocesses
    to use for data loading (PyTorch only). 0 means that the data will be loaded in
    the main process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`past_index` (`int`, *optional*, defaults to -1) — Some models like [TransformerXL](../model_doc/transformerxl)
    or [XLNet](../model_doc/xlnet) can make use of the past hidden states for their
    predictions. If this argument is set to a positive int, the `Trainer` will use
    the corresponding output (usually index 2) as the past state and feed it to the
    model at the next training step under the keyword argument `mems`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_name` (`str`, *optional*) — A descriptor for the run. Typically used for
    [wandb](https://www.wandb.com/) and [mlflow](https://www.mlflow.org/) logging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disable_tqdm` (`bool`, *optional*) — Whether or not to disable the tqdm progress
    bars and table of metrics produced by `~notebook.NotebookTrainingTracker` in Jupyter
    Notebooks. Will default to `True` if the logging level is set to warn or lower
    (default), `False` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove_unused_columns` (`bool`, *optional*, defaults to `True`) — Whether
    or not to automatically remove the columns unused by the model forward method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_names` (`List[str]`, *optional*) — The list of keys in your dictionary
    of inputs that correspond to the labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will eventually default to the list of argument names accepted by the model
    that contain the word “label”, except if the model used is one of the `XxxForQuestionAnswering`
    in which case it will also include the `["start_positions", "end_positions"]`
    keys.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`load_best_model_at_end` (`bool`, *optional*, defaults to `False`) — Whether
    or not to load the best model found during training at the end of training. When
    this option is enabled, the best checkpoint will always be saved. See [`save_total_limit`](https://huggingface.co/docs/transformers/main_classes/trainer#transformers.TrainingArguments.save_total_limit)
    for more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When set to `True`, the parameters `save_strategy` needs to be the same as `evaluation_strategy`,
    and in the case it is “steps”, `save_steps` must be a round multiple of `eval_steps`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`metric_for_best_model` (`str`, *optional*) — Use in conjunction with `load_best_model_at_end`
    to specify the metric to use to compare two different models. Must be the name
    of a metric returned by the evaluation with or without the prefix `"eval_"`. Will
    default to `"loss"` if unspecified and `load_best_model_at_end=True` (to use the
    evaluation loss).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you set this value, `greater_is_better` will default to `True`. Don’t forget
    to set it to `False` if your metric is better when lower.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`greater_is_better` (`bool`, *optional*) — Use in conjunction with `load_best_model_at_end`
    and `metric_for_best_model` to specify if better models should have a greater
    metric or not. Will default to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`True` if `metric_for_best_model` is set to a value that isn’t `"loss"` or
    `"eval_loss"`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`False` if `metric_for_best_model` is not set, or set to `"loss"` or `"eval_loss"`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_data_skip` (`bool`, *optional*, defaults to `False`) — When resuming
    training, whether or not to skip the epochs and batches to get the data loading
    at the same stage as in the previous training. If set to `True`, the training
    will begin faster (as that skipping step can take a long time) but will not yield
    the same results as the interrupted training would have.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fsdp` (`bool`, `str` or list of `FSDPOption`, *optional*, defaults to `''''`)
    — Use PyTorch Distributed Parallel Training (in distributed training only).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of options along the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"full_shard"`: Shard parameters, gradients and optimizer states.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"shard_grad_op"`: Shard optimizer states and gradients.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"hybrid_shard"`: Apply `FULL_SHARD` within a node, and replicate parameters
    across nodes.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"hybrid_shard_zero2"`: Apply `SHARD_GRAD_OP` within a node, and replicate
    parameters across nodes.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"offload"`: Offload parameters and gradients to CPUs (only compatible with
    `"full_shard"` and `"shard_grad_op"`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"auto_wrap"`: Automatically recursively wrap layers with FSDP using `default_auto_wrap_policy`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fsdp_config` (`str` or `dict`, *optional*) — Config to be used with fsdp (Pytorch
    Distributed Parallel Training). The value is either a location of fsdp json config
    file (e.g., `fsdp_config.json`) or an already loaded json file as `dict`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A List of config and its options:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'min_num_params (`int`, *optional*, defaults to `0`): FSDP’s minimum number
    of parameters for Default Auto Wrapping. (useful only when `fsdp` field is passed).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'transformer_layer_cls_to_wrap (`List[str]`, *optional*): List of transformer
    layer class names (case-sensitive) to wrap, e.g, `BertLayer`, `GPTJBlock`, `T5Block`
    … (useful only when `fsdp` flag is passed).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: backward_prefetch (`str`, *optional*) FSDP’s backward prefetch mode. Controls
    when to prefetch next set of parameters (useful only when `fsdp` field is passed).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of options along the following:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"backward_pre"` : Prefetches the next set of parameters before the current
    set of parameter’s gradient computation.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"backward_post"` : This prefetches the next set of parameters after the current
    set of parameter’s gradient computation.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: forward_prefetch (`bool`, *optional*, defaults to `False`) FSDP’s forward prefetch
    mode (useful only when `fsdp` field is passed). If `"True"`, then FSDP explicitly
    prefetches the next upcoming all-gather while executing in the forward pass.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: limit_all_gathers (`bool`, *optional*, defaults to `False`) FSDP’s limit_all_gathers
    (useful only when `fsdp` field is passed). If `"True"`, FSDP explicitly synchronizes
    the CPU thread to prevent too many in-flight all-gathers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: use_orig_params (`bool`, *optional*, defaults to `True`) If `"True"`, allows
    non-uniform `requires_grad` during init, which means support for interspersed
    frozen and trainable paramteres. Useful in cases such as parameter-efficient fine-tuning.
    Please refer this [blog]([https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019](https://dev-discuss.pytorch.org/t/rethinking-pytorch-fully-sharded-data-parallel-fsdp-from-first-principles/1019)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sync_module_states (`bool`, *optional*, defaults to `True`) If `"True"`, each
    individually wrapped FSDP unit will broadcast module parameters from rank 0 to
    ensure they are the same across all ranks after initialization
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'activation_checkpointing (`bool`, *optional*, defaults to `False`): If `"True"`,
    activation checkpointing is a technique to reduce memory usage by clearing activations
    of certain layers and recomputing them during a backward pass. Effectively, this
    trades extra computation time for reduced memory usage.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'xla (`bool`, *optional*, defaults to `False`): Whether to use PyTorch/XLA Fully
    Sharded Data Parallel Training. This is an experimental feature and its API may
    evolve in the future.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: xla_fsdp_settings (`dict`, *optional*) The value is a dictionary which stores
    the XLA FSDP wrapping parameters.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For a complete list of options, please see [here](https://github.com/pytorch/xla/blob/master/torch_xla/distributed/fsdp/xla_fully_sharded_data_parallel.py).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'xla_fsdp_grad_ckpt (`bool`, *optional*, defaults to `False`): Will use gradient
    checkpointing over each nested XLA FSDP wrapped layer. This setting can only be
    used when the xla flag is set to true, and an auto wrapping policy is specified
    through fsdp_min_num_params or fsdp_transformer_layer_cls_to_wrap.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deepspeed` (`str` or `dict`, *optional*) — Use [Deepspeed](https://github.com/microsoft/deepspeed).
    This is an experimental feature and its API may evolve in the future. The value
    is either the location of DeepSpeed json config file (e.g., `ds_config.json`)
    or an already loaded json file as a `dict`”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label_smoothing_factor` (`float`, *optional*, defaults to 0.0) — The label
    smoothing factor to use. Zero means no label smoothing, otherwise the underlying
    onehot-encoded labels are changed from 0s and 1s to `label_smoothing_factor/num_labels`
    and `1 - label_smoothing_factor + label_smoothing_factor/num_labels` respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug` (`str` or list of `DebugOption`, *optional*, defaults to `""`) — Enable
    one or more debug features. This is an experimental feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Possible options are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`"underflow_overflow"`: detects overflow in model’s input/outputs and reports
    the last frames that led to the event'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"tpu_metrics_debug"`: print debug metrics on TPU'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The options should be separated by whitespaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`optim` (`str` or `training_args.OptimizerNames`, *optional*, defaults to `"adamw_torch"`)
    — The optimizer to use: adamw_hf, adamw_torch, adamw_torch_fused, adamw_apex_fused,
    adamw_anyprecision or adafactor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`optim_args` (`str`, *optional*) — Optional arguments that are supplied to
    AnyPrecisionAdamW.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_by_length` (`bool`, *optional*, defaults to `False`) — Whether or not
    to group together samples of roughly the same length in the training dataset (to
    minimize padding applied and be more efficient). Only useful if applying dynamic
    padding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length_column_name` (`str`, *optional*, defaults to `"length"`) — Column name
    for precomputed lengths. If the column exists, grouping by length will use these
    values rather than computing them on train startup. Ignored unless `group_by_length`
    is `True` and the dataset is an instance of `Dataset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`report_to` (`str` or `List[str]`, *optional*, defaults to `"all"`) — The list
    of integrations to report the results and logs to. Supported platforms are `"azure_ml"`,
    `"clearml"`, `"codecarbon"`, `"comet_ml"`, `"dagshub"`, `"dvclive"`, `"flyte"`,
    `"mlflow"`, `"neptune"`, `"tensorboard"`, and `"wandb"`. Use `"all"` to report
    to all integrations installed, `"none"` for no integrations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddp_find_unused_parameters` (`bool`, *optional*) — When using distributed
    training, the value of the flag `find_unused_parameters` passed to `DistributedDataParallel`.
    Will default to `False` if gradient checkpointing is used, `True` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddp_bucket_cap_mb` (`int`, *optional*) — When using distributed training,
    the value of the flag `bucket_cap_mb` passed to `DistributedDataParallel`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddp_broadcast_buffers` (`bool`, *optional*) — When using distributed training,
    the value of the flag `broadcast_buffers` passed to `DistributedDataParallel`.
    Will default to `False` if gradient checkpointing is used, `True` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataloader_pin_memory` (`bool`, *optional*, defaults to `True`) — Whether
    you want to pin memory in data loaders or not. Will default to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataloader_persistent_workers` (`bool`, *optional*, defaults to `False`) —
    If True, the data loader will not shut down the worker processes after a dataset
    has been consumed once. This allows to maintain the workers Dataset instances
    alive. Can potentially speed up training, but will increase RAM usage. Will default
    to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip_memory_metrics` (`bool`, *optional*, defaults to `True`) — Whether to
    skip adding of memory profiler reports to metrics. This is skipped by default
    because it slows down the training and evaluation speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push_to_hub` (`bool`, *optional*, defaults to `False`) — Whether or not to
    push the model to the Hub every time the model is saved. If this is activated,
    `output_dir` will begin a git directory synced with the repo (determined by `hub_model_id`)
    and the content will be pushed each time a save is triggered (depending on your
    `save_strategy`). Calling [save_model()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.save_model)
    will also trigger a push.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `output_dir` exists, it needs to be a local clone of the repository to which
    the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    will be pushed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`resume_from_checkpoint` (`str`, *optional*) — The path to a folder with a
    valid checkpoint for your model. This argument is not directly used by [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    it’s intended to be used by your training/evaluation scripts instead. See the
    [example scripts](https://github.com/huggingface/transformers/tree/main/examples)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hub_model_id` (`str`, *optional*) — The name of the repository to keep in
    sync with the local *output_dir*. It can be a simple model ID in which case the
    model will be pushed in your namespace. Otherwise it should be the whole repository
    name, for instance `"user_name/model"`, which allows you to push to an organization
    you are a member of with `"organization_name/model"`. Will default to `user_name/output_dir_name`
    with *output_dir_name* being the name of `output_dir`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will default to the name of `output_dir`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`hub_strategy` (`str` or `HubStrategy`, *optional*, defaults to `"every_save"`)
    — Defines the scope of what is pushed to the Hub and when. Possible values are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"end"`: push the model, its configuration, the tokenizer (if passed along
    to the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer))
    and a draft of a model card when the [save_model()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.save_model)
    method is called.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"every_save"`: push the model, its configuration, the tokenizer (if passed
    along to the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer))
    and a draft of a model card each time there is a model save. The pushes are asynchronous
    to not block training, and in case the save are very frequent, a new push is only
    attempted if the previous one is finished. A last push is made with the final
    model at the end of training.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"checkpoint"`: like `"every_save"` but the latest checkpoint is also pushed
    in a subfolder named last-checkpoint, allowing you to resume training easily with
    `trainer.train(resume_from_checkpoint="last-checkpoint")`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"all_checkpoints"`: like `"checkpoint"` but all checkpoints are pushed like
    they appear in the output folder (so you will get one checkpoint folder per folder
    in your final repository)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hub_token` (`str`, *optional*) — The token to use to push the model to the
    Hub. Will default to the token in the cache folder obtained with `huggingface-cli
    login`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hub_private_repo` (`bool`, *optional*, defaults to `False`) — If True, the
    Hub repo will be set to private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hub_always_push` (`bool`, *optional*, defaults to `False`) — Unless this is
    `True`, the `Trainer` will skip pushing a checkpoint when the previous push is
    not finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient_checkpointing` (`bool`, *optional*, defaults to `False`) — If True,
    use gradient checkpointing to save memory at the expense of slower backward pass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient_checkpointing_kwargs` (`dict`, *optional*, defaults to `None`) —
    Key word arguments to be passed to the `gradient_checkpointing_enable` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_inputs_for_metrics` (`bool`, *optional*, defaults to `False`) — Whether
    or not the inputs will be passed to the `compute_metrics` function. This is intended
    for metrics that need inputs, predictions and references for scoring calculation
    in Metric class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_find_batch_size` (`bool`, *optional*, defaults to `False`) — Whether
    to find a batch size that will fit into memory automatically through exponential
    decay, avoiding CUDA Out-of-Memory errors. Requires accelerate to be installed
    (`pip install accelerate`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full_determinism` (`bool`, *optional*, defaults to `False`) — If `True`, [enable_full_determinism()](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.enable_full_determinism)
    is called instead of [set_seed()](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.set_seed)
    to ensure reproducible results in distributed training. Important: this will negatively
    impact the performance, so only use it for debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`torchdynamo` (`str`, *optional*) — If set, the backend compiler for TorchDynamo.
    Possible choices are `"eager"`, `"aot_eager"`, `"inductor"`, `"nvfuser"`, `"aot_nvfuser"`,
    `"aot_cudagraphs"`, `"ofi"`, `"fx2trt"`, `"onnxrt"` and `"ipex"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ray_scope` (`str`, *optional*, defaults to `"last"`) — The scope to use when
    doing hyperparameter search with Ray. By default, `"last"` will be used. Ray will
    then use the last checkpoint of all trials, compare those, and select the best
    one. However, other options are also available. See the [Ray documentation](https://docs.ray.io/en/latest/tune/api_docs/analysis.html#ray.tune.ExperimentAnalysis.get_best_trial)
    for more options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ddp_timeout` (`int`, *optional*, defaults to 1800) — The timeout for `torch.distributed.init_process_group`
    calls, used to avoid GPU socket timeouts when performing slow operations in distributed
    runnings. Please refer the [PyTorch documentation] ([https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group](https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group))
    for more information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_mps_device` (`bool`, *optional*, defaults to `False`) — This argument
    is deprecated.`mps` device will be used if it is available similar to `cuda` device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`torch_compile` (`bool`, *optional*, defaults to `False`) — Whether or not
    to compile the model using PyTorch 2.0 [`torch.compile`](https://pytorch.org/get-started/pytorch-2.0/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will use the best defaults for the [`torch.compile` API](https://pytorch.org/docs/stable/generated/torch.compile.html?highlight=torch+compile#torch.compile).
    You can customize the defaults with the argument `torch_compile_backend` and `torch_compile_mode`
    but we don’t guarantee any of them will work as the support is progressively rolled
    in in PyTorch.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This flag and the whole compile API is experimental and subject to change in
    future releases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`torch_compile_backend` (`str`, *optional*) — The backend to use in `torch.compile`.
    If set to any value, `torch_compile` will be set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the PyTorch doc for possible values and note that they may change across
    PyTorch versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This flag is experimental and subject to change in future releases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`torch_compile_mode` (`str`, *optional*) — The mode to use in `torch.compile`.
    If set to any value, `torch_compile` will be set to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the PyTorch doc for possible values and note that they may change across
    PyTorch versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This flag is experimental and subject to change in future releases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`split_batches` (`bool`, *optional*) — Whether or not the accelerator should
    split the batches yielded by the dataloaders across the devices during distributed
    training. If'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: set to `True`, the actual batch size used will be the same on any kind of distributed
    processes, but it must be a
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: round multiple of the number of processes you are using (such as GPUs).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_tokens_per_second` (`bool`, *optional*) — Whether or not to compute
    the number of tokens per second per device for training speed metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will iterate over the entire training dataloader once beforehand,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: and will slow down the entire process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`include_num_input_tokens_seen` (`bool`, *optional*) — Whether or not to track
    the number of input tokens seen throughout training.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May be slower in distributed training as gather operations must be called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`neftune_noise_alpha` (`Optional[float]`) — If not `None`, this will activate
    NEFTune noise embeddings. This can drastically improve model performance for instruction
    fine-tuning. Check out the [original paper](https://arxiv.org/abs/2310.05914)
    and the [original code](https://github.com/neelsjain/NEFTune). Support transformers
    `PreTrainedModel` and also `PeftModel` from peft.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sortish_sampler` (`bool`, *optional*, defaults to `False`) — Whether to use
    a *sortish sampler* or not. Only possible if the underlying datasets are *Seq2SeqDataset*
    for now but will become generally available in the near future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It sorts the inputs according to lengths in order to minimize the padding size,
    with a bit of randomness for the training set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`predict_with_generate` (`bool`, *optional*, defaults to `False`) — Whether
    to use generate to calculate generative metrics (ROUGE, BLEU).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generation_max_length` (`int`, *optional*) — The `max_length` to use on each
    evaluation loop when `predict_with_generate=True`. Will default to the `max_length`
    value of the model configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generation_num_beams` (`int`, *optional*) — The `num_beams` to use on each
    evaluation loop when `predict_with_generate=True`. Will default to the `num_beams`
    value of the model configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generation_config` (`str` or `Path` or [GenerationConfig](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.GenerationConfig),
    *optional*) — Allows to load a [GenerationConfig](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.GenerationConfig)
    from the `from_pretrained` method. This can be either:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a string, the *model id* of a pretrained model configuration hosted inside a
    model repo on huggingface.co. Valid model ids can be located at the root-level,
    like `bert-base-uncased`, or namespaced under a user or organization name, like
    `dbmdz/bert-base-german-cased`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a path to a *directory* containing a configuration file saved using the [save_pretrained()](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.GenerationConfig.save_pretrained)
    method, e.g., `./my_model_directory/`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a [GenerationConfig](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.GenerationConfig)
    object.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TrainingArguments is the subset of the arguments we use in our example scripts
    **which relate to the training loop itself**.
  prefs: []
  type: TYPE_NORMAL
- en: Using [HfArgumentParser](/docs/transformers/v4.37.2/en/internal/trainer_utils#transformers.HfArgumentParser)
    we can turn this class into [argparse](https://docs.python.org/3/library/argparse#module-argparse)
    arguments that can be specified on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/training_args_seq2seq.py#L87)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Serializes this instance while replace `Enum` by their values and `GenerationConfig`
    by dictionaries (for JSON serialization support). It obfuscates the token values
    by removing their value.
  prefs: []
  type: TYPE_NORMAL
