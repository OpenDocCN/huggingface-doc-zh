- en: HfApi Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/huggingface_hub/package_reference/hf_api](https://huggingface.co/docs/huggingface_hub/package_reference/hf_api)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Below is the documentation for the `HfApi` class, which serves as a Python wrapper
    for the Hugging Face Hub’s API.
  prefs: []
  type: TYPE_NORMAL
- en: All methods from the `HfApi` are also accessible from the package’s root directly.
    Both approaches are detailed below.
  prefs: []
  type: TYPE_NORMAL
- en: Using the root method is more straightforward but the [HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi)
    class gives you more flexibility. In particular, you can pass a token that will
    be reused in all HTTP calls. This is different than `huggingface-cli login` or
    [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)
    as the token is not persisted on the machine. It is also possible to provide a
    different endpoint or configure a custom user-agent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: HfApi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.HfApi`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1214)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '#### `accept_access_request`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L8025)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The id of the repo to accept access request for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user` (`str`) — The username of the user which access request should be accepted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repo to accept access request
    for. Must be one of `model`, `dataset` or `space`. Defaults to `model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 400 if the repo is not gated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 403 if you only have read-only access to the repo. This
    can be the case if you don’t have `write` or `admin` role in the organization
    the repo belongs to or if you passed a `read` token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 404 if the user does not exist on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 404 if the user access request cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 404 if the user access request is already in the accepted
    list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accept an access request from a user for a given gated repo.
  prefs: []
  type: TYPE_NORMAL
- en: Once the request is accepted, the user will be able to download any file of
    the repo and access the community tab. If the approval mode is automatic, you
    don’t have to accept requests manually. An accepted request can be cancelled or
    rejected at any time using [cancel_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.cancel_access_request)
    and [reject_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.reject_access_request).
  prefs: []
  type: TYPE_NORMAL
- en: For more info about gated repos, see [https://huggingface.co/docs/hub/models-gated](https://huggingface.co/docs/hub/models-gated).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `add_collection_item`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7607)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`collection_slug` (`str`) — Slug of the collection to update. Example: `"TheBloke/recent-models-64f9a55bb3115b4f513ec026"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item_id` (`str`) — ID of the item to add to the collection. It can be the
    ID of a repo on the Hub (e.g. `"facebook/bart-large-mnli"`) or a paper id (e.g.
    `"2307.09288"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item_type` (`str`) — Type of the item to add. Can be one of `"model"`, `"dataset"`,
    `"space"` or `"paper"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`note` (`str`, *optional*) — A note to attach to the item in the collection.
    The maximum size for a note is 500 characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exists_ok` (`bool`, *optional*) — If `True`, do not raise an error if item
    already exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add an item to a collection on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns: [Collection](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.Collection)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '#### `add_space_secret`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6367)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the repo to update. Example: `"bigcode/in-the-stack"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` (`str`) — Secret key. Example: `"GITHUB_API_KEY"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` (`str`) — Secret value. Example: `"your_github_api_key"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description` (`str`, *optional*) — Secret description. Example: `"Github API
    key to access the Github API"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds or updates a secret in a Space.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets allow to set secret keys or tokens to a Space without hardcoding them.
    For more details, see [https://huggingface.co/docs/hub/spaces-overview#managing-secrets](https://huggingface.co/docs/hub/spaces-overview#managing-secrets).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `add_space_variable`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6440)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the repo to update. Example: `"bigcode/in-the-stack"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` (`str`) — Variable key. Example: `"MODEL_REPO_ID"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value` (`str`) — Variable value. Example: `"the_model_repo_id"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description` (`str`) — Description of the variable. Example: `"Model Repo
    ID of the implemented model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds or updates a variable in a Space.
  prefs: []
  type: TYPE_NORMAL
- en: Variables allow to set environment variables to a Space without hardcoding them.
    For more details, see [https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables](https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables)
  prefs: []
  type: TYPE_NORMAL
- en: '#### `cancel_access_request`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7988)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The id of the repo to cancel access request for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user` (`str`) — The username of the user which access request should be cancelled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repo to cancel access request
    for. Must be one of `model`, `dataset` or `space`. Defaults to `model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 400 if the repo is not gated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 403 if you only have read-only access to the repo. This
    can be the case if you don’t have `write` or `admin` role in the organization
    the repo belongs to or if you passed a `read` token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 404 if the user does not exist on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 404 if the user access request cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 404 if the user access request is already in the pending
    list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cancel an access request from a user for a given gated repo.
  prefs: []
  type: TYPE_NORMAL
- en: A cancelled request will go back to the pending list and the user will lose
    access to the repo.
  prefs: []
  type: TYPE_NORMAL
- en: For more info about gated repos, see [https://huggingface.co/docs/hub/models-gated](https://huggingface.co/docs/hub/models-gated).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `change_discussion_status`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6121)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussion_num` (`int`) — The number of the Discussion or Pull Request . Must
    be a strictly positive integer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new_status` (`str`) — The new status for the discussion, either `"open"` or
    `"closed"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comment` (`str`, *optional*) — An optional comment to post with the status
    change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[DiscussionStatusChange](/docs/huggingface_hub/v0.20.3/en/package_reference/community#huggingface_hub.DiscussionStatusChange)'
  prefs: []
  type: TYPE_NORMAL
- en: the status change event
  prefs: []
  type: TYPE_NORMAL
- en: Closes or re-opens a Discussion or Pull Request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `comment_discussion`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5978)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussion_num` (`int`) — The number of the Discussion or Pull Request . Must
    be a strictly positive integer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comment` (`str`) — The content of the comment to create. Comments support
    markdown formatting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[DiscussionComment](/docs/huggingface_hub/v0.20.3/en/package_reference/community#huggingface_hub.DiscussionComment)'
  prefs: []
  type: TYPE_NORMAL
- en: the newly created comment
  prefs: []
  type: TYPE_NORMAL
- en: Creates a new comment on the given Discussion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `create_branch`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5354)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository in which the branch will be created. Example:
    `"user/my-cool-model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`branch` (`str`) — The name of the branch to create.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to create the branch from.
    It can be a branch name or the OID/SHA of a commit, as a hexadecimal string. Defaults
    to the head of the `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token. Will default to the stored
    token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if creating
    a branch on a dataset or space, `None` or `"model"` if tagging a model. Default
    is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exist_ok` (`bool`, *optional*, defaults to `False`) — If `True`, do not raise
    an error if branch already exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [BadRequestError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.BadRequestError)
    or [HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BadRequestError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.BadRequestError)
    — If invalid reference for a branch. Ex: `refs/pr/5` or ‘refs/foo/bar’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)
    — If the branch already exists on the repo (error 409) and `exist_ok` is set to
    `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new branch for a repo on the Hub, starting from the specified revision
    (defaults to `main`). To find a revision suiting your needs, you can use [list_repo_refs()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_repo_refs)
    or [list_repo_commits()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_repo_commits).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `create_collection`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7439)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`title` (`str`) — Title of the collection to create. Example: `"Recent models"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`namespace` (`str`, *optional*) — Namespace of the collection to create (username
    or org). Will default to the owner name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description` (`str`, *optional*) — Description of the collection to create.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*) — Whether the collection should be private or
    not. Defaults to `False` (i.e. public collection).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exists_ok` (`bool`, *optional*) — If `True`, do not raise an error if collection
    already exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new Collection on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns: [Collection](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.Collection)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '#### `create_commit`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L3403)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository in which the commit will be created, for
    example: `"username/custom_transformers"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`operations` (`Iterable` of `CommitOperation()`) — An iterable of operations
    to include in the commit, either:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd)
    to upload a file'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CommitOperationDelete](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationDelete)
    to delete a file'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CommitOperationCopy](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationCopy)
    to copy a file'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Operation objects will be mutated to include information relative to the upload.
    Do not reuse the same objects for multiple commits.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`commit_message` (`str`) — The summary (first line) of the commit that will
    be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str`, *optional*) — The description of the commit that
    will be created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token, obtained with `HfApi.login`
    method. Will default to the stored token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to commit from. Defaults
    to the head of the `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`boolean`, *optional*) — Whether or not to create a Pull Request
    with that commit. Defaults to `False`. If `revision` is not set, PR is opened
    against the `"main"` branch. If `revision` is set and is a branch, PR is opened
    against this branch. If `revision` is set and is not a branch name (example: a
    commit oid), an `RevisionNotFoundError` is returned by the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_threads` (`int`, *optional*) — Number of concurrent threads for uploading
    files. Defaults to 5. Setting it to 2 means at most 2 files will be uploaded concurrently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent_commit` (`str`, *optional*) — The OID / SHA of the parent commit, as
    a hexadecimal string. Shorthands (7 first characters) are also supported. If specified
    and `create_pr` is `False`, the commit will fail if `revision` does not point
    to `parent_commit`. If specified and `create_pr` is `True`, the pull request will
    be created from `parent_commit`. Specifying `parent_commit` ensures the repo has
    not changed before committing the changes, and can be especially useful if the
    repo is updated / committed to concurrently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_as_future` (`bool`, *optional*) — Whether or not to run this method in
    the background. Background jobs are run sequentially without blocking the main
    thread. Passing `run_as_future=True` will return a [Future](https://docs.python.org/3/library/concurrent.futures.html#future-objects)
    object. Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[CommitInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitInfo)
    or `Future`'
  prefs: []
  type: TYPE_NORMAL
- en: Instance of [CommitInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitInfo)
    containing information about the newly created commit (commit hash, commit url,
    pr url, commit message,…). If `run_as_future=True` is passed, returns a Future
    object which will contain the result when executed.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`ValueError` or [RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    — If commit message is empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    — If parent commit is not a valid commit OID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    — If the Hub API returns an HTTP 400 error (bad request)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    — If `create_pr` is `True` and revision is neither `None` nor `"main"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a commit in the given repo, deleting & uploading files as needed.
  prefs: []
  type: TYPE_NORMAL
- en: The input list of `CommitOperation` will be mutated during the commit process.
    Do not reuse the same objects for multiple commits.
  prefs: []
  type: TYPE_NORMAL
- en: '`create_commit` assumes that the repo already exists on the Hub. If you get
    a Client error 404, please make sure you are authenticated and that `repo_id`
    and `repo_type` are set correctly. If repo does not exist, create it first using
    [create_repo()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo).'
  prefs: []
  type: TYPE_NORMAL
- en: '`create_commit` is limited to 25k LFS files and a 1GB payload for regular files.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `create_commits_on_pr`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L3625)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository in which the commits will be pushed. Example:
    `"username/my-cool-model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addition_commits` (`List` of `List` of [CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd))
    — A list containing lists of [CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd).
    Each sublist will result in a commit on the PR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deletion_commits — A list containing lists of [CommitOperationDelete](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationDelete).
    Each sublist will result in a commit on the PR. Deletion commits are pushed before
    addition commits.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`commit_message` (`str`) — The summary (first line) of the commit that will
    be created. Will also be the title of the PR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str`, *optional*) — The description of the commit that
    will be created. The description will be added to the PR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token, obtained with `HfApi.login`
    method. Will default to the stored token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`merge_pr` (`bool`) — If set to `True`, the Pull Request is merged at the end
    of the process. Defaults to `True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_threads` (`int`, *optional*) — Number of concurrent threads for uploading
    files. Defaults to 5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verbose` (`bool`) — If set to `True`, process will run on verbose mode i.e.
    print information about the ongoing tasks. Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: URL to the created PR.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`MultiCommitException`'
  prefs: []
  type: TYPE_NORMAL
- en: '`MultiCommitException` — If an unexpected issue occur in the process: empty
    commits, unexpected commits in a PR, unexpected PR description, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push changes to the Hub in multiple commits.
  prefs: []
  type: TYPE_NORMAL
- en: Commits are pushed to a draft PR branch. If the upload fails or gets interrupted,
    it can be resumed. Progress is tracked in the PR description. At the end of the
    process, the PR is set as open and the title is updated to match the initial commit
    message. If `merge_pr=True` is passed, the PR is merged automatically.
  prefs: []
  type: TYPE_NORMAL
- en: All deletion commits are pushed first, followed by the addition commits. The
    order of the commits is not guaranteed as we might implement parallel commits
    in the future. Be sure that your are not updating several times the same file.
  prefs: []
  type: TYPE_NORMAL
- en: '`create_commits_on_pr` is experimental. Its API and behavior is subject to
    change in the future without prior notice.'
  prefs: []
  type: TYPE_NORMAL
- en: '`create_commits_on_pr` assumes that the repo already exists on the Hub. If
    you get a Client error 404, please make sure you are authenticated and that `repo_id`
    and `repo_type` are set correctly. If repo does not exist, create it first using
    [create_repo()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '#### `create_discussion`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5805)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title` (`str`) — The title of the discussion. It can be up to 200 characters
    long, and must be at least 3 characters long. Leading and trailing whitespaces
    will be stripped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description` (`str`, *optional*) — An optional description for the Pull Request.
    Defaults to `"Discussion opened with the huggingface_hub Python library"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pull_request` (`bool`, *optional*) — Whether to create a Pull Request or discussion.
    If `True`, creates a Pull Request. If `False`, creates a discussion. Defaults
    to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a Discussion or Pull Request.
  prefs: []
  type: TYPE_NORMAL
- en: Pull Requests created programmatically will be in `"draft"` status.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Pull Request with changes can also be done at once with [HfApi.create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns: [DiscussionWithDetails](/docs/huggingface_hub/v0.20.3/en/package_reference/community#huggingface_hub.DiscussionWithDetails)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `create_inference_endpoint`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6929)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str`) — The unique name for the new Inference Endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repository` (`str`) — The name of the model repository associated with the
    Inference Endpoint (e.g. `"gpt2"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framework` (`str`) — The machine learning framework used for the model (e.g.
    `"custom"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accelerator` (`str`) — The hardware accelerator to be used for inference (e.g.
    `"cpu"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance_size` (`str`) — The size or type of the instance to be used for hosting
    the model (e.g. `"large"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance_type` (`str`) — The cloud instance type where the Inference Endpoint
    will be deployed (e.g. `"c6i"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`region` (`str`) — The cloud region in which the Inference Endpoint will be
    created (e.g. `"us-east-1"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vendor` (`str`) — The cloud provider or vendor where the Inference Endpoint
    will be hosted (e.g. `"aws"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`account_id` (`str`, *optional*) — The account ID used to link a VPC to a private
    Inference Endpoint (if applicable).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min_replica` (`int`, *optional*) — The minimum number of replicas (instances)
    to keep running for the Inference Endpoint. Defaults to 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_replica` (`int`, *optional*) — The maximum number of replicas (instances)
    to scale to for the Inference Endpoint. Defaults to 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The specific model revision to deploy on the
    Inference Endpoint (e.g. `"6c0e6080953db56375760c0471a8c5f2929baf11"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`task` (`str`, *optional*) — The task on which to deploy the model (e.g. `"text-classification"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`custom_image` (`Dict`, *optional*) — A custom Docker image to use for the
    Inference Endpoint. This is useful if you want to deploy an Inference Endpoint
    running on the `text-generation-inference` (TGI) framework (see examples).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type` ([`InferenceEndpointType]`, *optional*) -- The type of the Inference
    Endpoint, which can be` “protected”`(default),`“public”`or`“private”`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`namespace` (`str`, *optional*) — The namespace where the Inference Endpoint
    will be created. Defaults to the current user’s namespace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[InferenceEndpoint](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint)'
  prefs: []
  type: TYPE_NORMAL
- en: information about the updated Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '#### `create_pull_request`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5894)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title` (`str`) — The title of the discussion. It can be up to 200 characters
    long, and must be at least 3 characters long. Leading and trailing whitespaces
    will be stripped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description` (`str`, *optional*) — An optional description for the Pull Request.
    Defaults to `"Discussion opened with the huggingface_hub Python library"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a Pull Request . Pull Requests created programmatically will be in `"draft"`
    status.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Pull Request with changes can also be done at once with [HfApi.create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit);
  prefs: []
  type: TYPE_NORMAL
- en: This is a wrapper around [HfApi.create_discussion()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_discussion).
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns: [DiscussionWithDetails](/docs/huggingface_hub/v0.20.3/en/package_reference/community#huggingface_hub.DiscussionWithDetails)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `create_repo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L3063)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*, defaults to `False`) — Whether the model repo
    should be private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exist_ok` (`bool`, *optional*, defaults to `False`) — If `True`, do not raise
    an error if repo already exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space_sdk` (`str`, *optional*) — Choice of SDK to use if repo_type is “space”.
    Can be “streamlit”, “gradio”, “docker”, or “static”.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space_hardware` (`SpaceHardware` or `str`, *optional*) — Choice of Hardware
    if repo_type is “space”. See [SpaceHardware](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceHardware)
    for a complete list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space_storage` (`SpaceStorage` or `str`, *optional*) — Choice of persistent
    storage tier. Example: `"small"`. See [SpaceStorage](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceStorage)
    for a complete list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space_sleep_time` (`int`, *optional*) — Number of seconds of inactivity to
    wait before a Space is put to sleep. Set to `-1` if you don’t want your Space
    to sleep (default behavior for upgraded hardware). For free hardware, you can’t
    configure the sleep time (value is fixed to 48 hours of inactivity). See [https://huggingface.co/docs/hub/spaces-gpus#sleep-time](https://huggingface.co/docs/hub/spaces-gpus#sleep-time)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space_secrets` (`List[Dict[str, str]]`, *optional*) — A list of secret keys
    to set in your Space. Each item is in the form `{"key": ..., "value": ..., "description":
    ...}` where description is optional. For more details, see [https://huggingface.co/docs/hub/spaces-overview#managing-secrets](https://huggingface.co/docs/hub/spaces-overview#managing-secrets).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`space_variables` (`List[Dict[str, str]]`, *optional*) — A list of public environment
    variables to set in your Space. Each item is in the form `{"key": ..., "value":
    ..., "description": ...}` where description is optional. For more details, see
    [https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables](https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[RepoUrl](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.RepoUrl)'
  prefs: []
  type: TYPE_NORMAL
- en: URL to the newly created repo. Value is a subclass of `str` containing attributes
    like `endpoint`, `repo_type` and `repo_id`.
  prefs: []
  type: TYPE_NORMAL
- en: Create an empty repo on the HuggingFace Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `create_tag`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5470)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository in which a commit will be tagged. Example:
    `"user/my-cool-model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tag` (`str`) — The name of the tag to create.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tag_message` (`str`, *optional*) — The description of the tag to create.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to tag. It can be a branch
    name or the OID/SHA of a commit, as a hexadecimal string. Shorthands (7 first
    characters) are also supported. Defaults to the head of the `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token. Will default to the stored
    token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if tagging
    a dataset or space, `None` or `"model"` if tagging a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exist_ok` (`bool`, *optional*, defaults to `False`) — If `True`, do not raise
    an error if tag already exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    or [HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    — If revision is not found (error 404) on the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)
    — If the branch already exists on the repo (error 409) and `exist_ok` is set to
    `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tag a given commit of a repo on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `dataset_info`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2089)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The revision of the dataset repository from
    which to get the information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeout` (`float`, *optional*) — Whether to set a timeout for the request
    to the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`files_metadata` (`bool`, *optional*) — Whether or not to retrieve metadata
    for files in the repository (size, LFS metadata, etc). Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[hf_api.DatasetInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.DatasetInfo)'
  prefs: []
  type: TYPE_NORMAL
- en: The dataset repository information.
  prefs: []
  type: TYPE_NORMAL
- en: Get info on one specific dataset on huggingface.co.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset can be private if you pass an acceptable token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    If the revision to download from cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `delete_branch`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5421)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository in which a branch will be deleted. Example:
    `"user/my-cool-model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`branch` (`str`) — The name of the branch to delete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token. Will default to the stored
    token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if creating
    a branch on a dataset or space, `None` or `"model"` if tagging a model. Default
    is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)
    — If trying to delete a protected branch. Ex: `main` cannot be deleted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)
    — If trying to delete a branch that does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a branch from a repo on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `delete_collection`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7569)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`collection_slug` (`str`) — Slug of the collection to delete. Example: `"TheBloke/recent-models-64f9a55bb3115b4f513ec026"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`missing_ok` (`bool`, *optional*) — If `True`, do not raise an error if collection
    doesn’t exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a collection on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This is a non-revertible action. A deleted collection cannot be restored.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `delete_collection_item`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7727)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`collection_slug` (`str`) — Slug of the collection to update. Example: `"TheBloke/recent-models-64f9a55bb3115b4f513ec026"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item_object_id` (`str`) — ID of the item in the collection. This is not the
    id of the item on the Hub (repo_id or paper id). It must be retrieved from a [CollectionItem](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.CollectionItem)
    object. Example: `collection.items[0]._id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`missing_ok` (`bool`, *optional*) — If `True`, do not raise an error if item
    doesn’t exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete an item from a collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '#### `delete_file`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L4628)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`path_in_repo` (`str`) — Relative filepath in the repo, for example: `"checkpoints/1fec34a/weights.bin"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository from which the file will be deleted, for
    example: `"username/custom_transformers"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token, obtained with `HfApi.login`
    method. Will default to the stored token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if the file
    is in a dataset or space, `None` or `"model"` if in a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to commit from. Defaults
    to the head of the `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*) — The summary / title / first line of
    the generated commit. Defaults to `f"Delete {path_in_repo} with huggingface_hub"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str` *optional*) — The description of the generated
    commit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`boolean`, *optional*) — Whether or not to create a Pull Request
    with that commit. Defaults to `False`. If `revision` is not set, PR is opened
    against the `"main"` branch. If `revision` is set and is a branch, PR is opened
    against this branch. If `revision` is set and is not a branch name (example: a
    commit oid), an `RevisionNotFoundError` is returned by the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent_commit` (`str`, *optional*) — The OID / SHA of the parent commit, as
    a hexadecimal string. Shorthands (7 first characters) are also supported. If specified
    and `create_pr` is `False`, the commit will fail if `revision` does not point
    to `parent_commit`. If specified and `create_pr` is `True`, the pull request will
    be created from `parent_commit`. Specifying `parent_commit` ensures the repo has
    not changed before committing the changes, and can be especially useful if the
    repo is updated / committed to concurrently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deletes a file in the given repo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    If the revision to download from cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[EntryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.EntryNotFoundError)
    If the file to download cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `delete_folder`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L4716)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`path_in_repo` (`str`) — Relative folder path in the repo, for example: `"checkpoints/1fec34a"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository from which the folder will be deleted, for
    example: `"username/custom_transformers"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token, obtained with `HfApi.login`
    method. Will default to the stored token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if the folder
    is in a dataset or space, `None` or `"model"` if in a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to commit from. Defaults
    to the head of the `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*) — The summary / title / first line of
    the generated commit. Defaults to `f"Delete folder {path_in_repo} with huggingface_hub"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str` *optional*) — The description of the generated
    commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`boolean`, *optional*) — Whether or not to create a Pull Request
    with that commit. Defaults to `False`. If `revision` is not set, PR is opened
    against the `"main"` branch. If `revision` is set and is a branch, PR is opened
    against this branch. If `revision` is set and is not a branch name (example: a
    commit oid), an `RevisionNotFoundError` is returned by the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent_commit` (`str`, *optional*) — The OID / SHA of the parent commit, as
    a hexadecimal string. Shorthands (7 first characters) are also supported. If specified
    and `create_pr` is `False`, the commit will fail if `revision` does not point
    to `parent_commit`. If specified and `create_pr` is `True`, the pull request will
    be created from `parent_commit`. Specifying `parent_commit` ensures the repo has
    not changed before committing the changes, and can be especially useful if the
    repo is updated / committed to concurrently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deletes a folder in the given repo.
  prefs: []
  type: TYPE_NORMAL
- en: Simple wrapper around [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `delete_inference_endpoint`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7216)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str`) — The name of the Inference Endpoint to delete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`namespace` (`str`, *optional*) — The namespace in which the Inference Endpoint
    is located. Defaults to the current user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete an Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: This operation is not reversible. If you don’t want to be charged for an Inference
    Endpoint, it is preferable to pause it with [pause_inference_endpoint()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.pause_inference_endpoint)
    or scale it to zero with [scale_to_zero_inference_endpoint()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.scale_to_zero_inference_endpoint).
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, you can also delete an Inference Endpoint using [InferenceEndpoint.delete()](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint.delete).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `delete_repo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L3198)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`missing_ok` (`bool`, *optional*, defaults to `False`) — If `True`, do not
    raise an error if repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: — [RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to delete from cannot be found and `missing_ok` is set to False
    (default).
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### `delete_space_secret`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6398)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the repo to update. Example: `"bigcode/in-the-stack"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` (`str`) — Secret key. Example: `"GITHUB_API_KEY"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deletes a secret from a Space.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets allow to set secret keys or tokens to a Space without hardcoding them.
    For more details, see [https://huggingface.co/docs/hub/spaces-overview#managing-secrets](https://huggingface.co/docs/hub/spaces-overview#managing-secrets).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `delete_space_storage`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6842)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the Space to update. Example: `"HuggingFaceH4/open_llm_leaderboard"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SpaceRuntime](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceRuntime)'
  prefs: []
  type: TYPE_NORMAL
- en: Runtime information about a Space including Space stage and hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`BadRequestError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`BadRequestError` — If space has no persistent storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete persistent storage for a Space.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `delete_space_variable`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6472)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the repo to update. Example: `"bigcode/in-the-stack"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key` (`str`) — Variable key. Example: `"MODEL_REPO_ID"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deletes a variable from a Space.
  prefs: []
  type: TYPE_NORMAL
- en: Variables allow to set environment variables to a Space without hardcoding them.
    For more details, see [https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables](https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables)
  prefs: []
  type: TYPE_NORMAL
- en: '#### `delete_tag`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5541)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository in which a tag will be deleted. Example:
    `"user/my-cool-model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tag` (`str`) — The name of the tag to delete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token. Will default to the stored
    token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if tagging
    a dataset or space, `None` or `"model"` if tagging a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    — If tag is not found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a tag from a repo on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `duplicate_space`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6691)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`from_id` (`str`) — ID of the Space to duplicate. Example: `"pharma/CLIP-Interrogator"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_id` (`str`, *optional*) — ID of the new Space. Example: `"dog/CLIP-Interrogator"`.
    If not provided, the new Space will have the same name as the original Space,
    but in your account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*) — Whether the new Space should be private or
    not. Defaults to the same privacy as the original Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exist_ok` (`bool`, *optional*, defaults to `False`) — If `True`, do not raise
    an error if repo already exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hardware` (`SpaceHardware` or `str`, *optional*) — Choice of Hardware. Example:
    `"t4-medium"`. See [SpaceHardware](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceHardware)
    for a complete list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`storage` (`SpaceStorage` or `str`, *optional*) — Choice of persistent storage
    tier. Example: `"small"`. See [SpaceStorage](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceStorage)
    for a complete list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sleep_time` (`int`, *optional*) — Number of seconds of inactivity to wait
    before a Space is put to sleep. Set to `-1` if you don’t want your Space to sleep
    (default behavior for upgraded hardware). For free hardware, you can’t configure
    the sleep time (value is fixed to 48 hours of inactivity). See [https://huggingface.co/docs/hub/spaces-gpus#sleep-time](https://huggingface.co/docs/hub/spaces-gpus#sleep-time)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`secrets` (`List[Dict[str, str]]`, *optional*) — A list of secret keys to set
    in your Space. Each item is in the form `{"key": ..., "value": ..., "description":
    ...}` where description is optional. For more details, see [https://huggingface.co/docs/hub/spaces-overview#managing-secrets](https://huggingface.co/docs/hub/spaces-overview#managing-secrets).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`variables` (`List[Dict[str, str]]`, *optional*) — A list of public environment
    variables to set in your Space. Each item is in the form `{"key": ..., "value":
    ..., "description": ...}` where description is optional. For more details, see
    [https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables](https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[RepoUrl](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.RepoUrl)'
  prefs: []
  type: TYPE_NORMAL
- en: URL to the newly created repo. Value is a subclass of `str` containing attributes
    like `endpoint`, `repo_type` and `repo_id`.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: — [`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: — [RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If one of `from_id` or `to_id` cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplicate a Space.
  prefs: []
  type: TYPE_NORMAL
- en: Programmatically duplicate a Space. The new Space will be created in your account
    and will be in the same state as the original Space (running or paused). You can
    duplicate a Space no matter the current state of a Space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '#### `edit_discussion_comment`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6249)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussion_num` (`int`) — The number of the Discussion or Pull Request . Must
    be a strictly positive integer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comment_id` (`str`) — The ID of the comment to edit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new_content` (`str`) — The new content of the comment. Comments support markdown
    formatting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[DiscussionComment](/docs/huggingface_hub/v0.20.3/en/package_reference/community#huggingface_hub.DiscussionComment)'
  prefs: []
  type: TYPE_NORMAL
- en: the edited comment
  prefs: []
  type: TYPE_NORMAL
- en: Edits a comment on a Discussion / Pull Request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `file_exists`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2331)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename` (`str`) — The name of the file to check, for example: `"config.json"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if getting
    repository info from a dataset or a space, `None` or `"model"` if getting repository
    info from a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The revision of the repository from which
    to get the information. Defaults to `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks if a file exists in a repository on the Hugging Face Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '#### `get_collection`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7403)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`collection_slug` (`str`) — Slug of the collection of the Hub. Example: `"TheBloke/recent-models-64f9a55bb3115b4f513ec026"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gets information about a Collection on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns: [Collection](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.Collection)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '#### `get_dataset_tags`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1349)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: List all valid dataset tags as a nested namespace object.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_discussion_details`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5729)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussion_num` (`int`) — The number of the Discussion or Pull Request . Must
    be a strictly positive integer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetches a Discussion’s / Pull Request ‘s details from the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns: [DiscussionWithDetails](/docs/huggingface_hub/v0.20.3/en/package_reference/community#huggingface_hub.DiscussionWithDetails)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `get_full_repo_name`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5587)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_id` (`str`) — The name of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`organization` (`str`, *optional*) — If passed, the repository name will be
    in the organization namespace instead of the user namespace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: The repository name in the user’s namespace ({username}/{model_id}) if no organization
    is passed, and under the organization namespace ({organization}/{model_id}) otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Returns the repository name for a given model ID and optional organization.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_hf_file_metadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L4781)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`url` (`str`) — File url, for example returned by [hf_hub_url()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_url).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str` or `bool`, *optional*) — A token to be used for the download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `True`, the token is read from the HuggingFace config folder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If `False` or `None`, no token is provided.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If a string, it’s used as the authentication token.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies` (`dict`, *optional*) — Dictionary mapping protocol to the URL of
    the proxy passed to `requests.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeout` (`float`, *optional*, defaults to 10) — How many seconds to wait
    for the server to send metadata before giving up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetch metadata of a file versioned on the Hub for a given url.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_inference_endpoint`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7083)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str`) — The name of the Inference Endpoint to retrieve information
    about.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`namespace` (`str`, *optional*) — The namespace in which the Inference Endpoint
    is located. Defaults to the current user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[InferenceEndpoint](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint)'
  prefs: []
  type: TYPE_NORMAL
- en: information about the requested Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Get information about an Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '#### `get_model_tags`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1340)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: List all valid model tags as a nested namespace object
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_paths_info`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2902)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`paths` (`Union[List[str], str]`, *optional*) — The paths to get information
    about. If a path do not exist, it is ignored without raising an exception.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expand` (`bool`, *optional*, defaults to `False`) — Whether to fetch more
    information about the paths (e.g. last commit and files’ security scan results).
    This operation is more expensive for the server so only 50 results are returned
    per page (instead of 1000). As pagination is implemented in `huggingface_hub`,
    this is transparent for you except for the time it takes to get the results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The revision of the repository from which
    to get the information. Defaults to `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repository from which to
    get the information (`"model"`, `"dataset"` or `"space"`. Defaults to `"model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[Union[RepoFile, RepoFolder]]`'
  prefs: []
  type: TYPE_NORMAL
- en: The information about the paths, as a list of `RepoFile` and `RepoFolder` objects.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    — If revision is not found (error 404) on the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get information about a repo’s paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '#### `get_repo_discussions`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5625)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author` (`str`, *optional*) — Pass a value to filter by discussion author.
    `None` means no filter. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussion_type` (`str`, *optional*) — Set to `"pull_request"` to fetch only
    pull requests, `"discussion"` to fetch only discussions. Set to `"all"` or `None`
    to fetch both. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussion_status` (`str`, *optional*) — Set to `"open"` (respectively `"closed"`)
    to fetch only open (respectively closed) discussions. Set to `"all"` or `None`
    to fetch both. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if fetching
    from a dataset or space, `None` or `"model"` if fetching from a model. Default
    is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Iterator[Discussion]`'
  prefs: []
  type: TYPE_NORMAL
- en: An iterator of [Discussion](/docs/huggingface_hub/v0.20.3/en/package_reference/community#huggingface_hub.Discussion)
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: Fetches Discussions and Pull Requests for the given repo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Collecting all discussions of a repo in a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Iterating over discussions of a repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '#### `get_safetensors_metadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5133)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A user or an organization name and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename` (`str`) — The name of the file in the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if the file
    is in a dataset or space, `None` or `"model"` if in a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to fetch the file from. Can
    be a branch name, a tag, or a commit hash. Defaults to the head of the `"main"`
    branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`SafetensorsRepoMetadata`'
  prefs: []
  type: TYPE_NORMAL
- en: information related to safetensors repo.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '— `NotASafetensorsRepoError`: if the repo is not a safetensors repo i.e. doesn’t
    have either a `model.safetensors` or a `model.safetensors.index.json` file.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '— `SafetensorsParsingError`: if a safetensors file header couldn’t be parsed
    correctly.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Parse metadata for a safetensors repo on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: We first check if the repo has a single safetensors file or a sharded safetensors
    repo. If it’s a single safetensors file, we parse the metadata from this file.
    If it’s a sharded safetensors repo, we parse the metadata from the index file
    and then parse the metadata from each shard.
  prefs: []
  type: TYPE_NORMAL
- en: To parse metadata from a single safetensors file, use [get_safetensors_metadata()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.get_safetensors_metadata).
  prefs: []
  type: TYPE_NORMAL
- en: For more details regarding the safetensors format, check out [https://huggingface.co/docs/safetensors/index#format](https://huggingface.co/docs/safetensors/index#format).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '#### `get_space_runtime`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6497)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the repo to update. Example: `"bigcode/in-the-stack"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SpaceRuntime](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceRuntime)'
  prefs: []
  type: TYPE_NORMAL
- en: Runtime information about a Space including Space stage and hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Gets runtime information about a Space.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_space_variables`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6420)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the repo to query. Example: `"bigcode/in-the-stack"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gets all variables from a Space.
  prefs: []
  type: TYPE_NORMAL
- en: Variables allow to set environment variables to a Space without hardcoding them.
    For more details, see [https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables](https://huggingface.co/docs/hub/spaces-overview#managing-secrets-and-environment-variables)
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_token_permission`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1321)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — The token to check for validity. Defaults to
    the one saved locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Literal["read", "write", None]`'
  prefs: []
  type: TYPE_NORMAL
- en: Permission granted by the token (“read” or “write”). Returns `None` if no token
    passed or token is invalid.
  prefs: []
  type: TYPE_NORMAL
- en: Check if a given `token` is valid and return its permissions.
  prefs: []
  type: TYPE_NORMAL
- en: For more details about tokens, please refer to [https://huggingface.co/docs/hub/security-tokens#what-are-user-access-tokens](https://huggingface.co/docs/hub/security-tokens#what-are-user-access-tokens).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `grant_access`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L8124)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The id of the repo to grant access to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user` (`str`) — The username of the user to grant access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repo to grant access to.
    Must be one of `model`, `dataset` or `space`. Defaults to `model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 400 if the repo is not gated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 400 if the user already has access to the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 403 if you only have read-only access to the repo. This
    can be the case if you don’t have `write` or `admin` role in the organization
    the repo belongs to or if you passed a `read` token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 404 if the user does not exist on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grant access to a user for a given gated repo.
  prefs: []
  type: TYPE_NORMAL
- en: Granting access don’t require for the user to send an access request by themselves.
    The user is automatically added to the accepted list meaning they can download
    the files You can revoke the granted access at any time using [cancel_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.cancel_access_request)
    or [reject_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.reject_access_request).
  prefs: []
  type: TYPE_NORMAL
- en: For more info about gated repos, see [https://huggingface.co/docs/hub/models-gated](https://huggingface.co/docs/hub/models-gated).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `hf_hub_download`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L4823)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A user or an organization name and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename` (`str`) — The name of the file in the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subfolder` (`str`, *optional*) — An optional value corresponding to a folder
    inside the model repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if downloading
    from a dataset or space, `None` or `"model"` if downloading from a model. Default
    is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — An optional Git revision id which can be a
    branch name, a tag, or a commit hash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_dir` (`str`, `Path`, *optional*) — Path to the folder where cached files
    are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_dir` (`str` or `Path`, *optional*) — If provided, the downloaded file
    will be placed under this directory, either as a symlink (default) or a regular
    file (see description for more details).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_dir_use_symlinks` (`"auto"` or `bool`, defaults to `"auto"`) — To be
    used with `local_dir`. If set to “auto”, the cache directory will be used and
    the file will be either duplicated or symlinked to the local directory depending
    on its size. It set to `True`, a symlink will be created, no matter the file size.
    If set to `False`, the file will either be duplicated from cache (if already exists)
    or downloaded from the Hub and not cached. See description for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force_download` (`bool`, *optional*, defaults to `False`) — Whether the file
    should be downloaded even if it already exists in the local cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies` (`dict`, *optional*) — Dictionary mapping protocol to the URL of
    the proxy passed to `requests.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`etag_timeout` (`float`, *optional*, defaults to `10`) — When fetching ETag,
    how many seconds to wait for the server to send data before giving up which is
    passed to `requests.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resume_download` (`bool`, *optional*, defaults to `False`) — If `True`, resume
    a previously interrupted download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_files_only` (`bool`, *optional*, defaults to `False`) — If `True`, avoid
    downloading the file and return the path to the local cached file if it exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`legacy_cache_layout` (`bool`, *optional*, defaults to `False`) — If `True`,
    uses the legacy file cache layout i.e. just call [hf_hub_url()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_url)
    then `cached_download`. This is deprecated as the new cache layout is more powerful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download a given file if it’s not already present in the local cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new cache file layout looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The cache directory contains one subfolder per repo_id (namespaced by repo type)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'inside each repo folder:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: refs is a list of the latest known revision => commit_hash pairs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: blobs contains the actual file blobs (identified by their git-sha or sha256,
    depending on whether they’re LFS files or not)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: snapshots contains one subfolder per commit, each “commit” contains the subset
    of the files that have been resolved at that particular commit. Each filename
    is a symlink to the blob at that particular commit.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If `local_dir` is provided, the file structure from the repo will be replicated
    in this location. You can configure how you want to move those files:'
  prefs: []
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks="auto"` (default), files are downloaded and stored
    in the cache directory as blob files. Small files (<5MB) are duplicated in `local_dir`
    while a symlink is created for bigger files. The goal is to be able to manually
    edit and save small files without corrupting the cache while saving disk space
    for binary files. The 5MB threshold can be configured with the `HF_HUB_LOCAL_DIR_AUTO_SYMLINK_THRESHOLD`
    environment variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks=True`, files are downloaded, stored in the cache
    directory and symlinked in `local_dir`. This is optimal in term of disk usage
    but files must not be manually edited.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks=False` and the blob files exist in the cache directory,
    they are duplicated in the local dir. This means disk usage is not optimized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, if `local_dir_use_symlinks=False` and the blob files do not exist in
    the cache directory, then the files are downloaded and directly placed under `local_dir`.
    This means if you need to download them again later, they will be re-downloaded
    entirely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)
    if `token=True` and the token cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`OSError`](https://docs.python.org/3/library/exceptions.html#OSError) if ETag
    cannot be determined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    If the revision to download from cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[EntryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.EntryNotFoundError)
    If the file to download cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LocalEntryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.LocalEntryNotFoundError)
    If network is disabled or unavailable and file is not found in cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `hide_discussion_comment`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6306)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussion_num` (`int`) — The number of the Discussion or Pull Request . Must
    be a strictly positive integer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comment_id` (`str`) — The ID of the comment to edit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[DiscussionComment](/docs/huggingface_hub/v0.20.3/en/package_reference/community#huggingface_hub.DiscussionComment)'
  prefs: []
  type: TYPE_NORMAL
- en: the hidden comment
  prefs: []
  type: TYPE_NORMAL
- en: Hides a comment on a Discussion / Pull Request.
  prefs: []
  type: TYPE_NORMAL
- en: Hidden comments' content cannot be retrieved anymore. Hiding a comment is irreversible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `like`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1801)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository to like. Example: `"user/my-cool-model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token. Will default to the stored
    token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if liking
    a dataset or space, `None` or `"model"` if liking a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like a given repo on the Hub (e.g. set as favorite).
  prefs: []
  type: TYPE_NORMAL
- en: See also [unlike()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.unlike)
    and [list_liked_repos()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_liked_repos).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_accepted_access_requests`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7841)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The id of the repo to get access requests for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repo to get access requests
    for. Must be one of `model`, `dataset` or `space`. Defaults to `model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[AccessRequest]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of `AccessRequest` objects. Each time contains a `username`, `email`,
    `status` and `timestamp` attribute. If the gated repo has a custom form, the `fields`
    attribute will be populated with user’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 400 if the repo is not gated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 403 if you only have read-only access to the repo. This
    can be the case if you don’t have `write` or `admin` role in the organization
    the repo belongs to or if you passed a `read` token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get accepted access requests for a given gated repo.
  prefs: []
  type: TYPE_NORMAL
- en: An accepted request means the user has requested access to the repo and the
    request has been accepted. The user can download any file of the repo. If the
    approval mode is automatic, this list should contains by default all requests.
    Accepted requests can be cancelled or rejected at any time using [cancel_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.cancel_access_request)
    and [reject_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.reject_access_request).
    A cancelled request will go back to the pending list while a rejected request
    will go to the rejected list. In both cases, the user will lose access to the
    repo.
  prefs: []
  type: TYPE_NORMAL
- en: For more info about gated repos, see [https://huggingface.co/docs/hub/models-gated](https://huggingface.co/docs/hub/models-gated).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_collections`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7347)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`owner` (`List[str]` or `str`, *optional*) — Filter by owner’s username.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item` (`List[str]` or `str`, *optional*) — Filter collections containing a
    particular items. Example: `"models/teknium/OpenHermes-2.5-Mistral-7B"`, `"datasets/squad"`
    or `"papers/2311.12983"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort` (`Literal["lastModified", "trending", "upvotes"]`, *optional*) — Sort
    collections by last modified, trending or upvotes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit` (`int`, *optional*) — Maximum number of collections to be returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — An authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Iterable[Collection]`'
  prefs: []
  type: TYPE_NORMAL
- en: an iterable of [Collection](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.Collection)
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: List collections on the Huggingface Hub, given some filters.
  prefs: []
  type: TYPE_NORMAL
- en: When listing collections, the item list per collection is truncated to 4 items
    maximum. To retrieve all items from a collection, you must use [get_collection()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.get_collection).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `list_datasets`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1544)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`filter` ([DatasetFilter](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.DatasetFilter)
    or `str` or `Iterable`, *optional*) — A string or [DatasetFilter](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.DatasetFilter)
    which can be used to identify datasets on the hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author` (`str`, *optional*) — A string which identify the author of the returned
    datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search` (`str`, *optional*) — A string that will be contained in the returned
    datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort` (`Literal["last_modified"]` or `str`, *optional*) — The key with which
    to sort the resulting datasets. Possible values are the properties of the [huggingface_hub.hf_api.DatasetInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.DatasetInfo)
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`direction` (`Literal[-1]` or `int`, *optional*) — Direction in which to sort.
    The value `-1` sorts by descending order while all other values sort by ascending
    order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit` (`int`, *optional*) — The limit on the number of datasets fetched.
    Leaving this option to `None` fetches all datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` (`bool`, *optional*) — Whether to fetch all dataset data, including
    the `last_modified`, the `card_data` and the files. Can contain useful information
    such as the PapersWithCode ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Iterable[DatasetInfo]`'
  prefs: []
  type: TYPE_NORMAL
- en: an iterable of [huggingface_hub.hf_api.DatasetInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.DatasetInfo)
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: List datasets hosted on the Huggingface Hub, given some filters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example usage with the `filter` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Example usage with the `search` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_files_info`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2393)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`paths` (`Union[List[str], str, None]`, *optional*) — The paths to get information
    about. Paths to files are directly resolved. Paths to folders are resolved recursively
    which means that information is returned about all files in the folder and its
    subfolders. If `None`, all files are returned (the default). If a path do not
    exist, it is ignored without raising an exception.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expand` (`bool`, *optional*, defaults to `False`) — Whether to fetch more
    information about the files (e.g. last commit and security scan results). This
    operation is more expensive for the server so only 50 results are returned per
    page (instead of 1000). As pagination is implemented in `huggingface_hub`, this
    is transparent for you except for the time it takes to get the results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The revision of the repository from which
    to get the information. Defaults to `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repository from which to
    get the information (`"model"`, `"dataset"` or `"space"`. Defaults to `"model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Iterable[RepoFile]`'
  prefs: []
  type: TYPE_NORMAL
- en: The information about the files, as an iterable of `RepoFile` objects. The order
    of the files is not guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    — If revision is not found (error 404) on the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List files on a repo and get information about them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Takes as input a list of paths. Those paths can be either files or folders.
    Two server endpoints are called:'
  prefs: []
  type: TYPE_NORMAL
- en: POST “/paths-info” to get information about the provided paths. Called once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GET “/tree?recursive=True” to paginate over the input folders. Called only if
    a folder path is provided as input. Will be called multiple times to follow pagination.
    If no path is provided as input, step 1\. is ignored and all files from the repo
    are listed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Get information about files on a repo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Get even more information about files on a repo (last commit and security scan
    results)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: List LFS files from the “vae/” folder in “stabilityai/stable-diffusion-2” repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: List all files on a repo.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_inference_endpoints`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6874)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`namespace` (`str`, *optional*) — The namespace to list endpoints for. Defaults
    to the current user. Set to `"*"` to list all endpoints from all namespaces (i.e.
    personal namespace and all orgs the user belongs to).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: List[InferenceEndpoint](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint)
  prefs: []
  type: TYPE_NORMAL
- en: A list of all inference endpoints for the given namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Lists all inference endpoints for the given namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_liked_repos`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1896)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`user` (`str`, *optional*) — Name of the user for which you want to fetch the
    likes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    Used only if `user` is not passed to implicitly determine the current user name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[UserLikes](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.UserLikes)'
  prefs: []
  type: TYPE_NORMAL
- en: object containing the user name and 3 lists of repo ids (1 for models, 1 for
    datasets and 1 for Spaces).
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`ValueError`'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    — If `user` is not passed and no token found (either from argument or from machine).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List all public repos liked by a user on huggingface.co.
  prefs: []
  type: TYPE_NORMAL
- en: This list is public so token is optional. If `user` is not passed, it defaults
    to the logged in user.
  prefs: []
  type: TYPE_NORMAL
- en: See also [like()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.like)
    and [unlike()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.unlike).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_metrics`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1701)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[MetricInfo]`'
  prefs: []
  type: TYPE_NORMAL
- en: a list of `MetricInfo` objects which.
  prefs: []
  type: TYPE_NORMAL
- en: Get the public list of all the metrics on huggingface.co
  prefs: []
  type: TYPE_NORMAL
- en: '#### `list_models`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1358)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`filter` ([ModelFilter](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.ModelFilter)
    or `str` or `Iterable`, *optional*) — A string or [ModelFilter](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.ModelFilter)
    which can be used to identify models on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author` (`str`, *optional*) — A string which identify the author (user or
    organization) of the returned models'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search` (`str`, *optional*) — A string that will be contained in the returned
    model ids.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`emissions_thresholds` (`Tuple`, *optional*) — A tuple of two ints or floats
    representing a minimum and maximum carbon footprint to filter the resulting models
    with in grams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort` (`Literal["last_modified"]` or `str`, *optional*) — The key with which
    to sort the resulting models. Possible values are the properties of the [huggingface_hub.hf_api.ModelInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.ModelInfo)
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`direction` (`Literal[-1]` or `int`, *optional*) — Direction in which to sort.
    The value `-1` sorts by descending order while all other values sort by ascending
    order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit` (`int`, *optional*) — The limit on the number of models fetched. Leaving
    this option to `None` fetches all models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` (`bool`, *optional*) — Whether to fetch all model data, including the
    `last_modified`, the `sha`, the files and the `tags`. This is set to `True` by
    default when using a filter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cardData` (`bool`, *optional*) — Whether to grab the metadata for the model
    as well. Can contain useful information such as carbon emissions, metrics, and
    datasets trained on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fetch_config` (`bool`, *optional*) — Whether to fetch the model configs as
    well. This is not included in `full` due to its size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Iterable[ModelInfo]`'
  prefs: []
  type: TYPE_NORMAL
- en: an iterable of [huggingface_hub.hf_api.ModelInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.ModelInfo)
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: List models hosted on the Huggingface Hub, given some filters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example usage with the `filter` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Example usage with the `search` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_pending_access_requests`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7780)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The id of the repo to get access requests for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repo to get access requests
    for. Must be one of `model`, `dataset` or `space`. Defaults to `model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[AccessRequest]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of `AccessRequest` objects. Each time contains a `username`, `email`,
    `status` and `timestamp` attribute. If the gated repo has a custom form, the `fields`
    attribute will be populated with user’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 400 if the repo is not gated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 403 if you only have read-only access to the repo. This
    can be the case if you don’t have `write` or `admin` role in the organization
    the repo belongs to or if you passed a `read` token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get pending access requests for a given gated repo.
  prefs: []
  type: TYPE_NORMAL
- en: A pending request means the user has requested access to the repo but the request
    has not been processed yet. If the approval mode is automatic, this list should
    be empty. Pending requests can be accepted or rejected using [accept_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.accept_access_request)
    and [reject_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.reject_access_request).
  prefs: []
  type: TYPE_NORMAL
- en: For more info about gated repos, see [https://huggingface.co/docs/hub/models-gated](https://huggingface.co/docs/hub/models-gated).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_rejected_access_requests`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7900)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The id of the repo to get access requests for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repo to get access requests
    for. Must be one of `model`, `dataset` or `space`. Defaults to `model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[AccessRequest]`'
  prefs: []
  type: TYPE_NORMAL
- en: A list of `AccessRequest` objects. Each time contains a `username`, `email`,
    `status` and `timestamp` attribute. If the gated repo has a custom form, the `fields`
    attribute will be populated with user’s answers.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 400 if the repo is not gated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 403 if you only have read-only access to the repo. This
    can be the case if you don’t have `write` or `admin` role in the organization
    the repo belongs to or if you passed a `read` token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get rejected access requests for a given gated repo.
  prefs: []
  type: TYPE_NORMAL
- en: A rejected request means the user has requested access to the repo and the request
    has been explicitly rejected by a repo owner (either you or another user from
    your organization). The user cannot download any file of the repo. Rejected requests
    can be accepted or cancelled at any time using [accept_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.accept_access_request)
    and [cancel_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.cancel_access_request).
    A cancelled request will go back to the pending list while an accepted request
    will go to the accepted list.
  prefs: []
  type: TYPE_NORMAL
- en: For more info about gated repos, see [https://huggingface.co/docs/hub/models-gated](https://huggingface.co/docs/hub/models-gated).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_repo_commits`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2816)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if listing
    commits from a dataset or a Space, `None` or `"model"` if listing from a model.
    Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to commit from. Defaults
    to the head of the `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formatted` (`bool`) — Whether to return the HTML-formatted title and description
    of the commits. Defaults to False.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: List[[GitCommitInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.GitCommitInfo)]
  prefs: []
  type: TYPE_NORMAL
- en: list of objects containing information about the commits for a repo on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    — If revision is not found (error 404) on the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the list of commits of a given revision for a repo on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Commits are sorted by date (last commit first).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_repo_files`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2577)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The revision of the model repository from
    which to get the information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[str]`'
  prefs: []
  type: TYPE_NORMAL
- en: the list of files in a given repository.
  prefs: []
  type: TYPE_NORMAL
- en: Get the list of files in a given repo.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `list_repo_likers`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1971)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository to retrieve . Example: `"user/my-cool-model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token. Will default to the stored
    token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`List[User]`'
  prefs: []
  type: TYPE_NORMAL
- en: a list of [User](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.User)
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: List all users who liked a given repo on the hugging Face Hub.
  prefs: []
  type: TYPE_NORMAL
- en: See also [like()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.like)
    and [list_liked_repos()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_liked_repos).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `list_repo_refs`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2744)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if listing
    refs from a dataset or a Space, `None` or `"model"` if listing from a model. Default
    is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_pull_requests` (`bool`, *optional*) — Whether to include refs from
    pull requests in the list. Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[GitRefs](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.GitRefs)'
  prefs: []
  type: TYPE_NORMAL
- en: object containing all information about branches and tags for a repo on the
    Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Get the list of refs of a given repo (both tags and branches).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_repo_tree`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2613)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_in_repo` (`str`, *optional*) — Relative path of the tree (folder) in
    the repo, for example: `"checkpoints/1fec34a/results"`. Will default to the root
    tree (folder) of the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recursive` (`bool`, *optional*, defaults to `False`) — Whether to list tree’s
    files and folders recursively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expand` (`bool`, *optional*, defaults to `False`) — Whether to fetch more
    information about the tree’s files and folders (e.g. last commit and files’ security
    scan results). This operation is more expensive for the server so only 50 results
    are returned per page (instead of 1000). As pagination is implemented in `huggingface_hub`,
    this is transparent for you except for the time it takes to get the results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The revision of the repository from which
    to get the tree. Defaults to `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repository from which to
    get the tree (`"model"`, `"dataset"` or `"space"`. Defaults to `"model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Iterable[Union[RepoFile, RepoFolder]]`'
  prefs: []
  type: TYPE_NORMAL
- en: The information about the tree’s files and folders, as an iterable of `RepoFile`
    and `RepoFolder` objects. The order of the files and folders is not guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    or [EntryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.EntryNotFoundError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    — If revision is not found (error 404) on the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[EntryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.EntryNotFoundError)
    — If the tree (folder) does not exist (error 404) on the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List a repo tree’s files and folders and get information about them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Get information about a repo’s tree.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Get even more information about a repo’s tree (last commit and files’ security
    scan results)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '#### `list_spaces`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1714)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`filter` (`str` or `Iterable`, *optional*) — A string tag or list of tags that
    can be used to identify Spaces on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author` (`str`, *optional*) — A string which identify the author of the returned
    Spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search` (`str`, *optional*) — A string that will be contained in the returned
    Spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort` (`Literal["last_modified"]` or `str`, *optional*) — The key with which
    to sort the resulting Spaces. Possible values are the properties of the [huggingface_hub.hf_api.SpaceInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.SpaceInfo)`
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`direction` (`Literal[-1]` or `int`, *optional*) — Direction in which to sort.
    The value `-1` sorts by descending order while all other values sort by ascending
    order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit` (`int`, *optional*) — The limit on the number of Spaces fetched. Leaving
    this option to `None` fetches all Spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datasets` (`str` or `Iterable`, *optional*) — Whether to return Spaces that
    make use of a dataset. The name of a specific dataset can be passed as a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models` (`str` or `Iterable`, *optional*) — Whether to return Spaces that
    make use of a model. The name of a specific model can be passed as a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`linked` (`bool`, *optional*) — Whether to return Spaces that make use of either
    a model or a dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`full` (`bool`, *optional*) — Whether to fetch all Spaces data, including the
    `last_modified`, `siblings` and `card_data` fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Iterable[SpaceInfo]`'
  prefs: []
  type: TYPE_NORMAL
- en: an iterable of [huggingface_hub.hf_api.SpaceInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.SpaceInfo)
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: List spaces hosted on the Huggingface Hub, given some filters.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `merge_pull_request`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6196)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussion_num` (`int`) — The number of the Discussion or Pull Request . Must
    be a strictly positive integer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comment` (`str`, *optional*) — An optional comment to post with the status
    change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[DiscussionStatusChange](/docs/huggingface_hub/v0.20.3/en/package_reference/community#huggingface_hub.DiscussionStatusChange)'
  prefs: []
  type: TYPE_NORMAL
- en: the status change event
  prefs: []
  type: TYPE_NORMAL
- en: Merges a Pull Request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `model_info`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2021)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The revision of the model repository from
    which to get the information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeout` (`float`, *optional*) — Whether to set a timeout for the request
    to the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`securityStatus` (`bool`, *optional*) — Whether to retrieve the security status
    from the model repository as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`files_metadata` (`bool`, *optional*) — Whether or not to retrieve metadata
    for files in the repository (size, LFS metadata, etc). Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[huggingface_hub.hf_api.ModelInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.ModelInfo)'
  prefs: []
  type: TYPE_NORMAL
- en: The model repository information.
  prefs: []
  type: TYPE_NORMAL
- en: Get info on one specific model on huggingface.co
  prefs: []
  type: TYPE_NORMAL
- en: Model can be private if you pass an acceptable token or are logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    If the revision to download from cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `move_repo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L3305)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`from_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`. Original repository identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`. Final repository identifier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving a repository from namespace1/repo_name1 to namespace2/repo_name2
  prefs: []
  type: TYPE_NORMAL
- en: Note there are certain limitations. For more information about moving repositories,
    please see [https://hf.co/docs/hub/repositories-settings#renaming-or-transferring-a-repo](https://hf.co/docs/hub/repositories-settings#renaming-or-transferring-a-repo).
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `parse_safetensors_file_metadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L5254)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A user or an organization name and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename` (`str`) — The name of the file in the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if the file
    is in a dataset or space, `None` or `"model"` if in a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to fetch the file from. Can
    be a branch name, a tag, or a commit hash. Defaults to the head of the `"main"`
    branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`SafetensorsFileMetadata`'
  prefs: []
  type: TYPE_NORMAL
- en: information related to a safetensors file.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '— `NotASafetensorsRepoError`: if the repo is not a safetensors repo i.e. doesn’t
    have either a `model.safetensors` or a `model.safetensors.index.json` file.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '— `SafetensorsParsingError`: if a safetensors file header couldn’t be parsed
    correctly.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Parse metadata from a safetensors file on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: To parse metadata from all safetensors files in a repo at once, use [get_safetensors_metadata()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.get_safetensors_metadata).
  prefs: []
  type: TYPE_NORMAL
- en: For more details regarding the safetensors format, check out [https://huggingface.co/docs/safetensors/index#format](https://huggingface.co/docs/safetensors/index#format).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `pause_inference_endpoint`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7241)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str`) — The name of the Inference Endpoint to pause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`namespace` (`str`, *optional*) — The namespace in which the Inference Endpoint
    is located. Defaults to the current user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[InferenceEndpoint](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint)'
  prefs: []
  type: TYPE_NORMAL
- en: information about the paused Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Pause an Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: A paused Inference Endpoint will not be charged. It can be resumed at any time
    using [resume_inference_endpoint()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.resume_inference_endpoint).
    This is different than scaling the Inference Endpoint to zero with [scale_to_zero_inference_endpoint()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.scale_to_zero_inference_endpoint),
    which would be automatically restarted when a request is made to it.
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, you can also pause an Inference Endpoint using [pause_inference_endpoint()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.pause_inference_endpoint).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `pause_space`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6612)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the Space to pause. Example: `"Salesforce/BLIP2"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SpaceRuntime](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceRuntime)'
  prefs: []
  type: TYPE_NORMAL
- en: Runtime information about your Space including `stage=PAUSED` and requested
    hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)
    or [BadRequestError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.BadRequestError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If your Space is not found (error 404). Most probably wrong repo_id or your
    space is private but you are not authenticated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)
    — 403 Forbidden: only the owner of a Space can pause it. If you want to manage
    a Space that you don’t own, either ask the owner by opening a Discussion or duplicate
    the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BadRequestError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.BadRequestError)
    — If your Space is a static Space. Static Spaces are always running and never
    billed. If you want to hide a static Space, you can set it to private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pause your Space.
  prefs: []
  type: TYPE_NORMAL
- en: A paused Space stops executing until manually restarted by its owner. This is
    different from the sleeping state in which free Spaces go after 48h of inactivity.
    Paused time is not billed to your account, no matter the hardware you’ve selected.
    To restart your Space, use [restart_space()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.restart_space)
    and go to your Space settings page.
  prefs: []
  type: TYPE_NORMAL
- en: For more details, please visit [the docs](https://huggingface.co/docs/hub/spaces-gpus#pause).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `preupload_lfs_files`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L3925)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository in which you will commit the files, for
    example: `"username/custom_transformers"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`operations` (`Iterable` of [CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd))
    — The list of files to upload. Warning: the objects in this list will be mutated
    to include information relative to the upload. Do not reuse the same objects for
    multiple commits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token. Will default to the stored
    token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of repository to upload to (e.g.
    `"model"` -default-, `"dataset"` or `"space"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to commit from. Defaults
    to the head of the `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`boolean`, *optional*) — Whether or not you plan to create a Pull
    Request with that commit. Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_threads` (`int`, *optional*) — Number of concurrent threads for uploading
    files. Defaults to 5. Setting it to 2 means at most 2 files will be uploaded concurrently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gitignore_content` (`str`, *optional*) — The content of the `.gitignore` file
    to know which files should be ignored. The order of priority is to first check
    if `gitignore_content` is passed, then check if the `.gitignore` file is present
    in the list of files to commit and finally default to the `.gitignore` file already
    hosted on the Hub (if any).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-upload LFS files to S3 in preparation on a future commit.
  prefs: []
  type: TYPE_NORMAL
- en: This method is useful if you are generating the files to upload on-the-fly and
    you don’t want to store them in memory before uploading them all at once.
  prefs: []
  type: TYPE_NORMAL
- en: This is a power-user method. You shouldn’t need to call it directly to make
    a normal commit. Use [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    directly instead.
  prefs: []
  type: TYPE_NORMAL
- en: Commit operations will be mutated during the process. In particular, the attached
    `path_or_fileobj` will be removed after the upload to save memory (and replaced
    by an empty `bytes` object). Do not reuse the same objects except to pass them
    to [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit).
    If you don’t want to remove the attached content from the commit operation object,
    pass `free_memory=False`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '#### `reject_access_request`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L8064)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The id of the repo to reject access request for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user` (`str`) — The username of the user which access request should be rejected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repo to reject access request
    for. Must be one of `model`, `dataset` or `space`. Defaults to `model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError`'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 400 if the repo is not gated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 403 if you only have read-only access to the repo. This
    can be the case if you don’t have `write` or `admin` role in the organization
    the repo belongs to or if you passed a `read` token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 404 if the user does not exist on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 404 if the user access request cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPError` — HTTP 404 if the user access request is already in the rejected
    list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reject an access request from a user for a given gated repo.
  prefs: []
  type: TYPE_NORMAL
- en: A rejected request will go to the rejected list. The user cannot download any
    file of the repo. Rejected requests can be accepted or cancelled at any time using
    [accept_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.accept_access_request)
    and [cancel_access_request()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.cancel_access_request).
    A cancelled request will go back to the pending list while an accepted request
    will go to the accepted list.
  prefs: []
  type: TYPE_NORMAL
- en: For more info about gated repos, see [https://huggingface.co/docs/hub/models-gated](https://huggingface.co/docs/hub/models-gated).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `rename_discussion`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6054)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`discussion_num` (`int`) — The number of the Discussion or Pull Request . Must
    be a strictly positive integer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new_title` (`str`) — The new title for the discussion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[DiscussionTitleChange](/docs/huggingface_hub/v0.20.3/en/package_reference/community#huggingface_hub.DiscussionTitleChange)'
  prefs: []
  type: TYPE_NORMAL
- en: the title change event
  prefs: []
  type: TYPE_NORMAL
- en: Renames a Discussion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `repo_exists`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2283)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if getting
    repository info from a dataset or a space, `None` or `"model"` if getting repository
    info from a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks if a repository exists on the Hugging Face Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '#### `repo_info`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2215)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The revision of the repository from which
    to get the information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if getting
    repository info from a dataset or a space, `None` or `"model"` if getting repository
    info from a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeout` (`float`, *optional*) — Whether to set a timeout for the request
    to the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`files_metadata` (`bool`, *optional*) — Whether or not to retrieve metadata
    for files in the repository (size, LFS metadata, etc). Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Union[SpaceInfo, DatasetInfo, ModelInfo]`'
  prefs: []
  type: TYPE_NORMAL
- en: The repository information, as a [huggingface_hub.hf_api.DatasetInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.DatasetInfo),
    [huggingface_hub.hf_api.ModelInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.ModelInfo)
    or [huggingface_hub.hf_api.SpaceInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.SpaceInfo)
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Get the info object for a given repo of a given type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    If the revision to download from cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `request_space_hardware`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6516)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the repo to update. Example: `"bigcode/in-the-stack"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hardware` (`str` or [SpaceHardware](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceHardware))
    — Hardware on which to run the Space. Example: `"t4-medium"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sleep_time` (`int`, *optional*) — Number of seconds of inactivity to wait
    before a Space is put to sleep. Set to `-1` if you don’t want your Space to sleep
    (default behavior for upgraded hardware). For free hardware, you can’t configure
    the sleep time (value is fixed to 48 hours of inactivity). See [https://huggingface.co/docs/hub/spaces-gpus#sleep-time](https://huggingface.co/docs/hub/spaces-gpus#sleep-time)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SpaceRuntime](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceRuntime)'
  prefs: []
  type: TYPE_NORMAL
- en: Runtime information about a Space including Space stage and hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Request new hardware for a Space.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to request hardware directly when creating the Space repo!
    See [create_repo()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `request_space_storage`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6806)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the Space to update. Example: `"HuggingFaceH4/open_llm_leaderboard"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`storage` (`str` or [SpaceStorage](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceStorage))
    — Storage tier. Either ‘small’, ‘medium’, or ‘large’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SpaceRuntime](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceRuntime)'
  prefs: []
  type: TYPE_NORMAL
- en: Runtime information about a Space including Space stage and hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Request persistent storage for a Space.
  prefs: []
  type: TYPE_NORMAL
- en: It is not possible to decrease persistent storage after its granted. To do so,
    you must delete it via [delete_space_storage()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_space_storage).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `restart_space`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6648)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the Space to restart. Example: `"Salesforce/BLIP2"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`factory_reboot` (`bool`, *optional*) — If `True`, the Space will be rebuilt
    from scratch without caching any requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SpaceRuntime](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceRuntime)'
  prefs: []
  type: TYPE_NORMAL
- en: Runtime information about your Space.
  prefs: []
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)
    or [BadRequestError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.BadRequestError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If your Space is not found (error 404). Most probably wrong repo_id or your
    space is private but you are not authenticated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[HfHubHTTPError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.HfHubHTTPError)
    — 403 Forbidden: only the owner of a Space can restart it. If you want to restart
    a Space that you don’t own, either ask the owner by opening a Discussion or duplicate
    the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BadRequestError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.BadRequestError)
    — If your Space is a static Space. Static Spaces are always running and never
    billed. If you want to hide a static Space, you can set it to private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restart your Space.
  prefs: []
  type: TYPE_NORMAL
- en: This is the only way to programmatically restart a Space if you’ve put it on
    Pause (see [pause_space()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.pause_space)).
    You must be the owner of the Space to restart it. If you are using an upgraded
    hardware, your account will be billed as soon as the Space is restarted. You can
    trigger a restart no matter the current state of a Space.
  prefs: []
  type: TYPE_NORMAL
- en: For more details, please visit [the docs](https://huggingface.co/docs/hub/spaces-gpus#pause).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `resume_inference_endpoint`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7273)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str`) — The name of the Inference Endpoint to resume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`namespace` (`str`, *optional*) — The namespace in which the Inference Endpoint
    is located. Defaults to the current user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[InferenceEndpoint](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint)'
  prefs: []
  type: TYPE_NORMAL
- en: information about the resumed Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Resume an Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, you can also resume an Inference Endpoint using [InferenceEndpoint.resume()](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint.resume).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `run_as_future`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1251)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`fn` (`Callable`) — The method to run in the background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`*args,` **kwargs — Arguments with which the method will be called.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Future`'
  prefs: []
  type: TYPE_NORMAL
- en: a [Future](https://docs.python.org/3/library/concurrent.futures.html#future-objects)
    instance to get the result of the task.
  prefs: []
  type: TYPE_NORMAL
- en: Run a method in the background and return a Future instance.
  prefs: []
  type: TYPE_NORMAL
- en: The main goal is to run methods without blocking the main thread (e.g. to push
    data during a training). Background jobs are queued to preserve order but are
    not ran in parallel. If you need to speed-up your scripts by parallelizing lots
    of call to the API, you must setup and use your own [ThreadPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Most-used methods like [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file),
    [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    and [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)
    have a `run_as_future: bool` argument to directly call them in the background.
    This is equivalent to calling `api.run_as_future(...)` on them but less verbose.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '#### `scale_to_zero_inference_endpoint`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7301)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str`) — The name of the Inference Endpoint to scale to zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`namespace` (`str`, *optional*) — The namespace in which the Inference Endpoint
    is located. Defaults to the current user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[InferenceEndpoint](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint)'
  prefs: []
  type: TYPE_NORMAL
- en: information about the scaled-to-zero Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Scale Inference Endpoint to zero.
  prefs: []
  type: TYPE_NORMAL
- en: An Inference Endpoint scaled to zero will not be charged. It will be resume
    on the next request to it, with a cold start delay. This is different than pausing
    the Inference Endpoint with [pause_inference_endpoint()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.pause_inference_endpoint),
    which would require a manual resume with [resume_inference_endpoint()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.resume_inference_endpoint).
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, you can also scale an Inference Endpoint to zero using [InferenceEndpoint.scale_to_zero()](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint.scale_to_zero).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_space_sleep_time`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L6566)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the repo to update. Example: `"bigcode/in-the-stack"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sleep_time` (`int`, *optional*) — Number of seconds of inactivity to wait
    before a Space is put to sleep. Set to `-1` if you don’t want your Space to pause
    (default behavior for upgraded hardware). For free hardware, you can’t configure
    the sleep time (value is fixed to 48 hours of inactivity). See [https://huggingface.co/docs/hub/spaces-gpus#sleep-time](https://huggingface.co/docs/hub/spaces-gpus#sleep-time)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SpaceRuntime](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceRuntime)'
  prefs: []
  type: TYPE_NORMAL
- en: Runtime information about a Space including Space stage and hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Set a custom sleep time for a Space running on upgraded hardware..
  prefs: []
  type: TYPE_NORMAL
- en: Your Space will go to sleep after X seconds of inactivity. You are not billed
    when your Space is in “sleep” mode. If a new visitor lands on your Space, it will
    “wake it up”. Only upgraded hardware can have a configurable sleep time. To know
    more about the sleep stage, please refer to [https://huggingface.co/docs/hub/spaces-gpus#sleep-time](https://huggingface.co/docs/hub/spaces-gpus#sleep-time).
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to set a custom sleep time when requesting hardware with
    [request_space_hardware()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.request_space_hardware).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `snapshot_download`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L4991)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A user or an organization name and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if downloading
    from a dataset or space, `None` or `"model"` if downloading from a model. Default
    is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — An optional Git revision id which can be a
    branch name, a tag, or a commit hash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_dir` (`str`, `Path`, *optional*) — Path to the folder where cached files
    are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_dir` (`str` or `Path`, *optional*) — If provided, the downloaded files
    will be placed under this directory, either as symlinks (default) or regular files
    (see description for more details).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_dir_use_symlinks` (`"auto"` or `bool`, defaults to `"auto"`) — To be
    used with `local_dir`. If set to “auto”, the cache directory will be used and
    the file will be either duplicated or symlinked to the local directory depending
    on its size. It set to `True`, a symlink will be created, no matter the file size.
    If set to `False`, the file will either be duplicated from cache (if already exists)
    or downloaded from the Hub and not cached. See description for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies` (`dict`, *optional*) — Dictionary mapping protocol to the URL of
    the proxy passed to `requests.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`etag_timeout` (`float`, *optional*, defaults to `10`) — When fetching ETag,
    how many seconds to wait for the server to send data before giving up which is
    passed to `requests.request`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resume_download` (`bool`, *optional*, defaults to `False) -- If` True`, resume
    a previously interrupted download.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force_download` (`bool`, *optional*, defaults to `False`) — Whether the file
    should be downloaded even if it already exists in the local cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_files_only` (`bool`, *optional*, defaults to `False`) — If `True`, avoid
    downloading the file and return the path to the local cached file if it exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow_patterns` (`List[str]` or `str`, *optional*) — If provided, only files
    matching at least one pattern are downloaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_patterns` (`List[str]` or `str`, *optional*) — If provided, files matching
    any of the patterns are not downloaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_workers` (`int`, *optional*) — Number of concurrent threads to download
    files (1 thread = 1 file download). Defaults to 8.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tqdm_class` (`tqdm`, *optional*) — If provided, overwrites the default behavior
    for the progress bar. Passed argument must inherit from `tqdm.auto.tqdm` or at
    least mimic its behavior. Note that the `tqdm_class` is not passed to each individual
    download. Defaults to the custom HF progress bar that can be disabled by setting
    `HF_HUB_DISABLE_PROGRESS_BARS` environment variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download repo files.
  prefs: []
  type: TYPE_NORMAL
- en: Download a whole snapshot of a repo’s files at the specified revision. This
    is useful when you want all files from a repo, because you don’t know which ones
    you will need a priori. All files are nested inside a folder in order to keep
    their actual filename relative to that folder. You can also filter which files
    to download using `allow_patterns` and `ignore_patterns`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `local_dir` is provided, the file structure from the repo will be replicated
    in this location. You can configure how you want to move those files:'
  prefs: []
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks="auto"` (default), files are downloaded and stored
    in the cache directory as blob files. Small files (<5MB) are duplicated in `local_dir`
    while a symlink is created for bigger files. The goal is to be able to manually
    edit and save small files without corrupting the cache while saving disk space
    for binary files. The 5MB threshold can be configured with the `HF_HUB_LOCAL_DIR_AUTO_SYMLINK_THRESHOLD`
    environment variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks=True`, files are downloaded, stored in the cache
    directory and symlinked in `local_dir`. This is optimal in term of disk usage
    but files must not be manually edited.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `local_dir_use_symlinks=False` and the blob files exist in the cache directory,
    they are duplicated in the local dir. This means disk usage is not optimized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, if `local_dir_use_symlinks=False` and the blob files do not exist in
    the cache directory, then the files are downloaded and directly placed under `local_dir`.
    This means if you need to download them again later, they will be re-downloaded
    entirely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An alternative would be to clone the repo but this requires git and git-lfs
    to be installed and properly configured. It is also not possible to filter which
    files to download when cloning a repository using git.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)
    if `token=True` and the token cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`OSError`](https://docs.python.org/3/library/exceptions.html#OSError) if ETag
    cannot be determined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `space_info`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2152)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The revision of the space repository from
    which to get the information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeout` (`float`, *optional*) — Whether to set a timeout for the request
    to the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`files_metadata` (`bool`, *optional*) — Whether or not to retrieve metadata
    for files in the repository (size, LFS metadata, etc). Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If `None` or `True` and machine is logged in (through `huggingface-cli login`
    or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token will be retrieved from the cache. If `False`, token is not sent in the request
    header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SpaceInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.SpaceInfo)'
  prefs: []
  type: TYPE_NORMAL
- en: The space repository information.
  prefs: []
  type: TYPE_NORMAL
- en: Get info on one specific Space on huggingface.co.
  prefs: []
  type: TYPE_NORMAL
- en: Space can be private if you pass an acceptable token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    If the revision to download from cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `super_squash_history`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L2978)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — A namespace (user or an organization) and a repo name separated
    by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`branch` (`str`, *optional*) — The branch to squash. Defaults to the head of
    the `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*) — The commit message to use for the squashed
    commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if listing
    commits from a dataset or a Space, `None` or `"model"` if listing from a model.
    Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — A valid authentication token (see [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).
    If the machine is logged in (through `huggingface-cli login` or [login()](/docs/huggingface_hub/v0.20.3/en/package_reference/login#huggingface_hub.login)),
    token can be automatically retrieved from the cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    or [RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    or [BadRequestError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.BadRequestError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    — If the branch to squash cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[BadRequestError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.BadRequestError)
    — If invalid reference for a branch. You cannot squash history on tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Squash commit history on a branch for a repo on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Squashing the repo history is useful when you know you’ll make hundreds of commits
    and you don’t want to clutter the history. Squashing commits can only be performed
    from the head of a branch.
  prefs: []
  type: TYPE_NORMAL
- en: Once squashed, the commit history cannot be retrieved. This is a non-revertible
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: Once the history of a branch has been squashed, it is not possible to merge
    it back into another branch since their history will have diverged.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '#### `unlike`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1849)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository to unlike. Example: `"user/my-cool-model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token. Will default to the stored
    token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if unliking
    a dataset or space, `None` or `"model"` if unliking a model. Default is `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    — If repository is not found (error 404): wrong repo_id/repo_type, private but
    not authenticated or repo does not exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike a given repo on the Hub (e.g. remove from favorite list).
  prefs: []
  type: TYPE_NORMAL
- en: See also [like()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.like)
    and [list_liked_repos()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_liked_repos).
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '#### `update_collection_item`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7677)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`collection_slug` (`str`) — Slug of the collection to update. Example: `"TheBloke/recent-models-64f9a55bb3115b4f513ec026"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`item_object_id` (`str`) — ID of the item in the collection. This is not the
    id of the item on the Hub (repo_id or paper id). It must be retrieved from a [CollectionItem](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.CollectionItem)
    object. Example: `collection.items[0].item_object_id`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`note` (`str`, *optional*) — A note to attach to the item in the collection.
    The maximum size for a note is 500 characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`position` (`int`, *optional*) — New position of the item in the collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update an item in a collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '#### `update_collection_metadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7504)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`collection_slug` (`str`) — Slug of the collection to update. Example: `"TheBloke/recent-models-64f9a55bb3115b4f513ec026"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title` (`str`) — Title of the collection to update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description` (`str`, *optional*) — Description of the collection to update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`position` (`int`, *optional*) — New position of the collection in the list
    of collections of the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*) — Whether the collection should be private or
    not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme` (`str`, *optional*) — Theme of the collection on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update metadata of a collection on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: All arguments are optional. Only provided metadata will be updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns: [Collection](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.Collection)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '#### `update_inference_endpoint`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L7127)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str`) — The name of the Inference Endpoint to update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accelerator` (`str`, *optional*) — The hardware accelerator to be used for
    inference (e.g. `"cpu"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance_size` (`str`, *optional*) — The size or type of the instance to be
    used for hosting the model (e.g. `"large"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance_type` (`str`, *optional*) — The cloud instance type where the Inference
    Endpoint will be deployed (e.g. `"c6i"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min_replica` (`int`, *optional*) — The minimum number of replicas (instances)
    to keep running for the Inference Endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_replica` (`int`, *optional*) — The maximum number of replicas (instances)
    to scale to for the Inference Endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repository` (`str`, *optional*) — The name of the model repository associated
    with the Inference Endpoint (e.g. `"gpt2"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framework` (`str`, *optional*) — The machine learning framework used for the
    model (e.g. `"custom"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The specific model revision to deploy on the
    Inference Endpoint (e.g. `"6c0e6080953db56375760c0471a8c5f2929baf11"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`task` (`str`, *optional*) — The task on which to deploy the model (e.g. `"text-classification"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`namespace` (`str`, *optional*) — The namespace where the Inference Endpoint
    will be updated. Defaults to the current user’s namespace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[InferenceEndpoint](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint)'
  prefs: []
  type: TYPE_NORMAL
- en: information about the updated Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Update an Inference Endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: This method allows the update of either the compute configuration, the deployed
    model, or both. All arguments are optional but at least one must be provided.
  prefs: []
  type: TYPE_NORMAL
- en: For convenience, you can also update an Inference Endpoint using [InferenceEndpoint.update()](/docs/huggingface_hub/v0.20.3/en/package_reference/inference_endpoints#huggingface_hub.InferenceEndpoint.update).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `update_repo_visibility`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L3245)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`, *optional*) — A namespace (user or an organization) and a
    repo name separated by a `/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*, defaults to `False`) — Whether the model repo
    should be private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — An authentication token (See [https://huggingface.co/settings/token](https://huggingface.co/settings/token))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the visibility setting of a repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `upload_file`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L4111)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`path_or_fileobj` (`str`, `Path`, `bytes`, or `IO`) — Path to a file on the
    local machine or binary data stream / fileobj / buffer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_in_repo` (`str`) — Relative filepath in the repo, for example: `"checkpoints/1fec34a/weights.bin"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository to which the file will be uploaded, for
    example: `"username/custom_transformers"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token, obtained with `HfApi.login`
    method. Will default to the stored token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to commit from. Defaults
    to the head of the `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*) — The summary / title / first line of
    the generated commit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str` *optional*) — The description of the generated
    commit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`boolean`, *optional*) — Whether or not to create a Pull Request
    with that commit. Defaults to `False`. If `revision` is not set, PR is opened
    against the `"main"` branch. If `revision` is set and is a branch, PR is opened
    against this branch. If `revision` is set and is not a branch name (example: a
    commit oid), an `RevisionNotFoundError` is returned by the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent_commit` (`str`, *optional*) — The OID / SHA of the parent commit, as
    a hexadecimal string. Shorthands (7 first characters) are also supported. If specified
    and `create_pr` is `False`, the commit will fail if `revision` does not point
    to `parent_commit`. If specified and `create_pr` is `True`, the pull request will
    be created from `parent_commit`. Specifying `parent_commit` ensures the repo has
    not changed before committing the changes, and can be especially useful if the
    repo is updated / committed to concurrently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_as_future` (`bool`, *optional*) — Whether or not to run this method in
    the background. Background jobs are run sequentially without blocking the main
    thread. Passing `run_as_future=True` will return a [Future](https://docs.python.org/3/library/concurrent.futures.html#future-objects)
    object. Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[CommitInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitInfo)
    or `Future`'
  prefs: []
  type: TYPE_NORMAL
- en: Instance of [CommitInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitInfo)
    containing information about the newly created commit (commit hash, commit url,
    pr url, commit message,…). If `run_as_future=True` is passed, returns a Future
    object which will contain the result when executed.
  prefs: []
  type: TYPE_NORMAL
- en: Upload a local file (up to 50 GB) to the given repo. The upload is done through
    a HTTP post request, and doesn’t require git or git-lfs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RepositoryNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RepositoryNotFoundError)
    If the repository to download from cannot be found. This may be because it doesn’t
    exist, or because it is set to `private` and you do not have access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RevisionNotFoundError](/docs/huggingface_hub/v0.20.3/en/package_reference/utilities#huggingface_hub.utils.RevisionNotFoundError)
    If the revision to download from cannot be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upload_file` assumes that the repo already exists on the Hub. If you get a
    Client error 404, please make sure you are authenticated and that `repo_id` and
    `repo_type` are set correctly. If repo does not exist, create it first using [create_repo()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '#### `upload_folder`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L4369)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The repository to which the file will be uploaded, for
    example: `"username/custom_transformers"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`folder_path` (`str` or `Path`) — Path to the folder to upload on the local
    file system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_in_repo` (`str`, *optional*) — Relative path of the directory in the
    repo, for example: `"checkpoints/1fec34a/results"`. Will default to the root folder
    of the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Authentication token, obtained with `HfApi.login`
    method. Will default to the stored token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — Set to `"dataset"` or `"space"` if uploading
    to a dataset or space, `None` or `"model"` if uploading to a model. Default is
    `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The git revision to commit from. Defaults
    to the head of the `"main"` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*) — The summary / title / first line of
    the generated commit. Defaults to: `f"Upload {path_in_repo} with huggingface_hub"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str` *optional*) — The description of the generated
    commit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`boolean`, *optional*) — Whether or not to create a Pull Request
    with that commit. Defaults to `False`. If `revision` is not set, PR is opened
    against the `"main"` branch. If `revision` is set and is a branch, PR is opened
    against this branch. If `revision` is set and is not a branch name (example: a
    commit oid), an `RevisionNotFoundError` is returned by the server. If both `multi_commits`
    and `create_pr` are True, the PR created in the multi-commit process is kept opened.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent_commit` (`str`, *optional*) — The OID / SHA of the parent commit, as
    a hexadecimal string. Shorthands (7 first characters) are also supported. If specified
    and `create_pr` is `False`, the commit will fail if `revision` does not point
    to `parent_commit`. If specified and `create_pr` is `True`, the pull request will
    be created from `parent_commit`. Specifying `parent_commit` ensures the repo has
    not changed before committing the changes, and can be especially useful if the
    repo is updated / committed to concurrently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow_patterns` (`List[str]` or `str`, *optional*) — If provided, only files
    matching at least one pattern are uploaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_patterns` (`List[str]` or `str`, *optional*) — If provided, files matching
    any of the patterns are not uploaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete_patterns` (`List[str]` or `str`, *optional*) — If provided, remote
    files matching any of the patterns will be deleted from the repo while committing
    new files. This is useful if you don’t know which files have already been uploaded.
    Note: to avoid discrepancies the `.gitattributes` file is not deleted even if
    it matches the pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multi_commits` (`bool`) — If True, changes are pushed to a PR using a multi-commit
    process. Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multi_commits_verbose` (`bool`) — If True and `multi_commits` is used, more
    information will be displayed to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_as_future` (`bool`, *optional*) — Whether or not to run this method in
    the background. Background jobs are run sequentially without blocking the main
    thread. Passing `run_as_future=True` will return a [Future](https://docs.python.org/3/library/concurrent.futures.html#future-objects)
    object. Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[CommitInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitInfo)
    or `Future`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instance of [CommitInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitInfo)
    containing information about the newly created commit (commit hash, commit url,
    pr url, commit message,…). If `run_as_future=True` is passed, returns a Future
    object which will contain the result when executed. `str` or `Future`: If `multi_commits=True`,
    returns the url of the PR created to push the changes. If `run_as_future=True`
    is passed, returns a Future object which will contain the result when executed.'
  prefs: []
  type: TYPE_NORMAL
- en: Upload a local folder to the given repo. The upload is done through a HTTP requests,
    and doesn’t require git or git-lfs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of the folder will be preserved. Files with the same name already
    present in the repository will be overwritten. Others will be left untouched.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `allow_patterns` and `ignore_patterns` arguments to specify which files
    to upload. These parameters accept either a single pattern or a list of patterns.
    Patterns are Standard Wildcards (globbing patterns) as documented [here](https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm).
    If both `allow_patterns` and `ignore_patterns` are provided, both constraints
    apply. By default, all files from the folder are uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `delete_patterns` argument to specify remote files you want to delete.
    Input type is the same as for `allow_patterns` (see above). If `path_in_repo`
    is also provided, the patterns are matched against paths relative to this folder.
    For example, `upload_folder(..., path_in_repo="experiment", delete_patterns="logs/*")`
    will delete any remote file under `./experiment/logs/`. Note that the `.gitattributes`
    file will not be deleted even if it matches the patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Any `.git/` folder present in any subdirectory will be ignored. However, please
    be aware that the `.gitignore` file is not taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: Uses `HfApi.create_commit` under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`HTTPError`](https://requests.readthedocs.io/en/latest/api/#requests.HTTPError)
    if the HuggingFace API returned an error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    if some parameter value is invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`upload_folder` assumes that the repo already exists on the Hub. If you get
    a Client error 404, please make sure you are authenticated and that `repo_id`
    and `repo_type` are set correctly. If repo does not exist, create it first using
    [create_repo()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_repo).'
  prefs: []
  type: TYPE_NORMAL
- en: '`multi_commits` is experimental. Its API and behavior is subject to change
    in the future without prior notice.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '#### `whoami`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1291)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — Hugging Face token. Will default to the locally
    saved token if not provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Call HF API to know “whoami”.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.plan_multi_commits`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_multi_commits.py#L77)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`operations` (`List` of `CommitOperation()`) — The list of operations to split
    into commits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_operations_per_commit` (`int`) — Maximum number of operations in a single
    commit. Defaults to 50.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_upload_size_per_commit` (`int`) — Maximum size to upload (in bytes) in
    a single commit. Defaults to 2GB. Files bigger than this limit are uploaded, 1
    per commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Tuple[List[List[CommitOperationAdd]], List[List[CommitOperationDelete]]]`'
  prefs: []
  type: TYPE_NORMAL
- en: a tuple. First item is a list of lists of [CommitOperationAdd](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationAdd)
    representing the addition commits to push. The second item is a list of lists
    of [CommitOperationDelete](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationDelete)
    representing the deletion commits.
  prefs: []
  type: TYPE_NORMAL
- en: Split a list of operations in a list of commits to perform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementation follows a sub-optimal (yet simple) algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete operations are grouped together by commits of maximum `max_operations_per_commits`
    operations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All additions exceeding `max_upload_size_per_commit` are committed 1 by 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All remaining additions are grouped together and split each time the `max_operations_per_commit`
    or the `max_upload_size_per_commit` limit is reached.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We do not try to optimize the splitting to get the lowest number of commits
    as this is a NP-hard problem (see [bin packing problem](https://en.wikipedia.org/wiki/Bin_packing_problem)).
    For our use case, it is not problematic to use a sub-optimal solution so we favored
    an easy-to-explain implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '`plan_multi_commits` is experimental. Its API and behavior is subject to change
    in the future without prior notice.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: The initial order of the operations is not guaranteed! All deletions will be
    performed before additions. If you are not updating multiple times the same file,
    you are fine.
  prefs: []
  type: TYPE_NORMAL
- en: API Dataclasses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AccessRequest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.hf_api.AccessRequest`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L342)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`username` (`str`) — Username of the user who requested access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fullname` (`str`) — Fullname of the user who requested access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email` (`str`) — Email of the user who requested access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp` (`datetime`) — Timestamp of the request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`status` (`Literal["pending", "accepted", "rejected"]`) — Status of the request.
    Can be one of `["pending", "accepted", "rejected"]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fields` (`Dict[str, Any]`, *optional*) — Additional fields filled by the user
    in the gate form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data structure containing information about a user access request.
  prefs: []
  type: TYPE_NORMAL
- en: CommitInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.CommitInfo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L272)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`commit_url` (`str`) — Url where to find the commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`) — The summary (first line) of the commit that has
    been created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str`) — Description of the commit that has been created.
    Can be empty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oid` (`str`) — Commit hash id. Example: `"91c54ad1727ee830252e457677f467be0bfd8a57"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pr_url` (`str`, *optional*) — Url to the PR that has been created, if any.
    Populated when `create_pr=True` is passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pr_revision` (`str`, *optional*) — Revision of the PR that has been created,
    if any. Populated when `create_pr=True` is passed. Example: `"refs/pr/1"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pr_num` (`int`, *optional*) — Number of the PR discussion that has been created,
    if any. Populated when `create_pr=True` is passed. Can be passed as `discussion_num`
    in [get_discussion_details()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.get_discussion_details).
    Example: `1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_url` (`str`, *optional*) — Legacy url for `str` compatibility. Can be the
    url to the uploaded file on the Hub (if returned by [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file)),
    to the uploaded folder on the Hub (if returned by [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder))
    or to the commit on the Hub (if returned by [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit)).
    Defaults to `commit_url`. It is deprecated to use this attribute. Please use `commit_url`
    instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data structure containing information about a newly created commit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Returned by any method that creates a commit on the Hub: [create_commit()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_commit),
    [upload_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_file),
    [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder),
    [delete_file()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_file),
    [delete_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_folder).
    It inherits from `str` for backward compatibility but using methods specific to
    `str` is deprecated.'
  prefs: []
  type: TYPE_NORMAL
- en: DatasetInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.hf_api.DatasetInfo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L697)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`id` (`str`) — ID of dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author` (`str`) — Author of the dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sha` (`str`) — Repo SHA at this particular revision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at` (`datetime`, *optional*) — Date of creation of the repo on the
    Hub. Note that the lowest value is `2022-03-02T23:29:04.000Z`, corresponding to
    the date when we began to store creation dates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_modified` (`datetime`, *optional*) — Date of last commit to the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`) — Is the repo private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disabled` (`bool`, *optional*) — Is the repo disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gated` (`Literal["auto", "manual", False]`, *optional*) — Is the repo gated.
    If so, whether there is manual or automatic approval.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downloads` (`int`) — Number of downloads of the dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`likes` (`int`) — Number of likes of the dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (`List[str]`) — List of tags of the dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`card_data` (`DatasetCardData`, *optional*) — Model Card Metadata as a [huggingface_hub.repocard_data.DatasetCardData](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.DatasetCardData)
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`siblings` (`List[RepoSibling]`) — List of [huggingface_hub.hf_api.RepoSibling](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.RepoSibling)
    objects that constitute the dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains information about a dataset on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Most attributes of this class are optional. This is because the data returned
    by the Hub depends on the query made. In general, the more specific the query,
    the more information is returned. On the contrary, when listing datasets using
    [list_datasets()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_datasets)
    only a subset of the attributes are returned.
  prefs: []
  type: TYPE_NORMAL
- en: GitRefInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.GitRefInfo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1055)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name` (`str`) — Name of the reference (e.g. tag name or branch name).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ref` (`str`) — Full git ref on the Hub (e.g. `"refs/heads/main"` or `"refs/tags/v1.0"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`target_commit` (`str`) — OID of the target commit for the ref (e.g. `"e7da7f221d5bf496a48136c0cd264e630fe9fcc8"`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains information about a git reference for a repo on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: GitCommitInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.GitCommitInfo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1100)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`commit_id` (`str`) — OID of the commit (e.g. `"e7da7f221d5bf496a48136c0cd264e630fe9fcc8"`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`authors` (`List[str]`) — List of authors of the commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at` (`datetime`) — Datetime when the commit was created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title` (`str`) — Title of the commit. This is a free-text value entered by
    the authors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`message` (`str`) — Description of the commit. This is a free-text value entered
    by the authors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formatted_title` (`str`) — Title of the commit formatted as HTML. Only returned
    if `formatted=True` is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formatted_message` (`str`) — Description of the commit formatted as HTML.
    Only returned if `formatted=True` is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains information about a git commit for a repo on the Hub. Check out [list_repo_commits()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_repo_commits)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: GitRefs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.GitRefs`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1074)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`branches` (`List[GitRefInfo]`) — A list of [GitRefInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.GitRefInfo)
    containing information about branches on the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`converts` (`List[GitRefInfo]`) — A list of [GitRefInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.GitRefInfo)
    containing information about “convert” refs on the repo. Converts are refs used
    (internally) to push preprocessed data in Dataset repos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (`List[GitRefInfo]`) — A list of [GitRefInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.GitRefInfo)
    containing information about tags on the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pull_requests` (`List[GitRefInfo]`, *optional*) — A list of [GitRefInfo](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.GitRefInfo)
    containing information about pull requests on the repo. Only returned if `include_prs=True`
    is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains information about all git references for a repo on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Object is returned by [list_repo_refs()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_repo_refs).
  prefs: []
  type: TYPE_NORMAL
- en: ModelInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.hf_api.ModelInfo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L551)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`id` (`str`) — ID of model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author` (`str`, *optional*) — Author of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sha` (`str`, *optional*) — Repo SHA at this particular revision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at` (`datetime`, *optional*) — Date of creation of the repo on the
    Hub. Note that the lowest value is `2022-03-02T23:29:04.000Z`, corresponding to
    the date when we began to store creation dates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_modified` (`datetime`, *optional*) — Date of last commit to the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`) — Is the repo private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disabled` (`bool`, *optional*) — Is the repo disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gated` (`Literal["auto", "manual", False]`, *optional*) — Is the repo gated.
    If so, whether there is manual or automatic approval.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downloads` (`int`) — Number of downloads of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`likes` (`int`) — Number of likes of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library_name` (`str`, *optional*) — Library associated with the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (`List[str]`) — List of tags of the model. Compared to `card_data.tags`,
    contains extra tags computed by the Hub (e.g. supported libraries, model’s arXiv).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipeline_tag` (`str`, *optional*) — Pipeline tag associated with the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mask_token` (`str`, *optional*) — Mask token used by the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`widget_data` (`Any`, *optional*) — Widget data associated with the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_index` (`Dict`, *optional*) — Model index for evaluation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config` (`Dict`, *optional*) — Model configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transformers_info` (`TransformersInfo`, *optional*) — Transformers-specific
    info (auto class, processor, etc.) associated with the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`card_data` (`ModelCardData`, *optional*) — Model Card Metadata as a [huggingface_hub.repocard_data.ModelCardData](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.ModelCardData)
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`siblings` (`List[RepoSibling]`) — List of [huggingface_hub.hf_api.RepoSibling](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.RepoSibling)
    objects that constitute the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spaces` (`List[str]`, *optional*) — List of spaces using the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safetensors` (`SafeTensorsInfo`, *optional*) — Model’s safetensors information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains information about a model on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Most attributes of this class are optional. This is because the data returned
    by the Hub depends on the query made. In general, the more specific the query,
    the more information is returned. On the contrary, when listing models using [list_models()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_models)
    only a subset of the attributes are returned.
  prefs: []
  type: TYPE_NORMAL
- en: RepoSibling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.hf_api.RepoSibling`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L431)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`rfilename` (str) — file name, relative to the repo root.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (`int`, *optional*) — The file’s size, in bytes. This attribute is defined
    when `files_metadata` argument of [repo_info()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.repo_info)
    is set to `True`. It’s `None` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blob_id` (`str`, *optional*) — The file’s git OID. This attribute is defined
    when `files_metadata` argument of [repo_info()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.repo_info)
    is set to `True`. It’s `None` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lfs` (`BlobLfsInfo`, *optional*) — The file’s LFS metadata. This attribute
    is defined when`files_metadata` argument of [repo_info()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.repo_info)
    is set to `True` and the file is stored with Git LFS. It’s `None` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains basic information about a repo file inside a repo on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: All attributes of this class are optional except `rfilename`. This is because
    only the file names are returned when listing repositories on the Hub (with [list_models()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_models),
    [list_datasets()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_datasets)
    or [list_spaces()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_spaces)).
    If you need more information like file size, blob id or lfs details, you must
    request them specifically from one repo at a time (using [model_info()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.model_info),
    [dataset_info()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.dataset_info)
    or [space_info()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.space_info))
    as it adds more constraints on the backend server to retrieve these.
  prefs: []
  type: TYPE_NORMAL
- en: RepoFile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.hf_api.RepoFile`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L466)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`path` (str) — file path relative to the repo root.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size` (`int`) — The file’s size, in bytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blob_id` (`str`) — The file’s git OID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lfs` (`BlobLfsInfo`) — The file’s LFS metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_commit` (`LastCommitInfo`, *optional*) — The file’s last commit metadata.
    Only defined if [list_files_info()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_files_info),
    [list_repo_tree()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_repo_tree)
    and [get_paths_info()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.get_paths_info)
    are called with `expand=True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`security` (`BlobSecurityInfo`, *optional*) — The file’s security scan metadata.
    Only defined if [list_files_info()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_files_info),
    [list_repo_tree()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_repo_tree)
    and [get_paths_info()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.get_paths_info)
    are called with `expand=True`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains information about a file on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: RepoUrl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.RepoUrl`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L371)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`url` (`Any`) — String value of the repo url.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`endpoint` (`str`, *optional*) — Endpoint of the Hub. Defaults to [https://huggingface.co](https://huggingface.co).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: — [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    If URL cannot be parsed.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: — [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    If `repo_type` is unknown.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Subclass of `str` describing a repo URL on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '`RepoUrl` is returned by `HfApi.create_repo`. It inherits from `str` for backward
    compatibility. At initialization, the URL is parsed to populate properties:'
  prefs: []
  type: TYPE_NORMAL
- en: endpoint (`str`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: namespace (`Optional[str]`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: repo_name (`str`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: repo_id (`str`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: repo_type (`Literal["model", "dataset", "space"]`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: url (`str`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: SafetensorsRepoMetadata
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.SafetensorsRepoMetadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_safetensors.py#L86)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` (`Dict`, *optional*) — The metadata contained in the ‘model.safetensors.index.json’
    file, if it exists. Only populated for sharded models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sharded` (`bool`) — Whether the repo contains a sharded model or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`weight_map` (`Dict[str, str]`) — A map of all weights. Keys are tensor names
    and values are filenames of the files containing the tensors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`files_metadata` (`Dict[str, SafetensorsFileMetadata]`) — A map of all files
    metadata. Keys are filenames and values are the metadata of the corresponding
    file, as a `SafetensorsFileMetadata` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameter_count` (`Dict[str, int]`) — A map of the number of parameters per
    data type. Keys are data types and values are the number of parameters of that
    data type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metadata for a Safetensors repo.
  prefs: []
  type: TYPE_NORMAL
- en: A repo is considered to be a Safetensors repo if it contains either a ‘model.safetensors’
    weight file (non-shared model) or a ‘model.safetensors.index.json’ index file
    (sharded model) at its root.
  prefs: []
  type: TYPE_NORMAL
- en: This class is returned by [get_safetensors_metadata()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.get_safetensors_metadata).
  prefs: []
  type: TYPE_NORMAL
- en: For more details regarding the safetensors format, check out [https://huggingface.co/docs/safetensors/index#format](https://huggingface.co/docs/safetensors/index#format).
  prefs: []
  type: TYPE_NORMAL
- en: SafetensorsFileMetadata
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.SafetensorsFileMetadata`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_safetensors.py#L56)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata` (`Dict`) — The metadata contained in the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tensors` (`Dict[str, TensorInfo]`) — A map of all tensors. Keys are tensor
    names and values are information about the corresponding tensor, as a `TensorInfo`
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameter_count` (`Dict[str, int]`) — A map of the number of parameters per
    data type. Keys are data types and values are the number of parameters of that
    data type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metadata for a Safetensors file hosted on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: This class is returned by [parse_safetensors_file_metadata()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.parse_safetensors_file_metadata).
  prefs: []
  type: TYPE_NORMAL
- en: For more details regarding the safetensors format, check out [https://huggingface.co/docs/safetensors/index#format](https://huggingface.co/docs/safetensors/index#format).
  prefs: []
  type: TYPE_NORMAL
- en: SpaceInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.hf_api.SpaceInfo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L804)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`id` (`str`) — ID of the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author` (`str`, *optional*) — Author of the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sha` (`str`, *optional*) — Repo SHA at this particular revision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at` (`datetime`, *optional*) — Date of creation of the repo on the
    Hub. Note that the lowest value is `2022-03-02T23:29:04.000Z`, corresponding to
    the date when we began to store creation dates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last_modified` (`datetime`, *optional*) — Date of last commit to the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`) — Is the repo private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gated` (`Literal["auto", "manual", False]`, *optional*) — Is the repo gated.
    If so, whether there is manual or automatic approval.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disabled` (`bool`, *optional*) — Is the Space disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host` (`str`, *optional*) — Host URL of the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subdomain` (`str`, *optional*) — Subdomain of the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`likes` (`int`) — Number of likes of the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (`List[str]`) — List of tags of the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`siblings` (`List[RepoSibling]`) — List of [huggingface_hub.hf_api.RepoSibling](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.hf_api.RepoSibling)
    objects that constitute the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`card_data` (`SpaceCardData`, *optional*) — Space Card Metadata as a [huggingface_hub.repocard_data.SpaceCardData](/docs/huggingface_hub/v0.20.3/en/package_reference/cards#huggingface_hub.SpaceCardData)
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`runtime` (`SpaceRuntime`, *optional*) — Space runtime information as a [huggingface_hub.hf_api.SpaceRuntime](/docs/huggingface_hub/v0.20.3/en/package_reference/space_runtime#huggingface_hub.SpaceRuntime)
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sdk` (`str`, *optional*) — SDK used by the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models` (`List[str]`, *optional*) — List of models used by the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datasets` (`List[str]`, *optional*) — List of datasets used by the Space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains information about a Space on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Most attributes of this class are optional. This is because the data returned
    by the Hub depends on the query made. In general, the more specific the query,
    the more information is returned. On the contrary, when listing spaces using [list_spaces()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_spaces)
    only a subset of the attributes are returned.
  prefs: []
  type: TYPE_NORMAL
- en: TensorInfo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.utils.TensorInfo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/_safetensors.py#L26)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`dtype` (`str`) — The data type of the tensor (“F64”, “F32”, “F16”, “BF16”,
    “I64”, “I32”, “I16”, “I8”, “U8”, “BOOL”).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shape` (`List[int]`) — The shape of the tensor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data_offsets` (`Tuple[int, int]`) — The offsets of the data in the file as
    a tuple `[BEGIN, END]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameter_count` (`int`) — The number of parameters in the tensor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about a tensor.
  prefs: []
  type: TYPE_NORMAL
- en: For more details regarding the safetensors format, check out [https://huggingface.co/docs/safetensors/index#format](https://huggingface.co/docs/safetensors/index#format).
  prefs: []
  type: TYPE_NORMAL
- en: User
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.User`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1161)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`avatar_url` (`str`) — URL of the user’s avatar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`username` (`str`) — Name of the user on the Hub (unique).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fullname` (`str`) — User’s full name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains information about a user on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: UserLikes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.UserLikes`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hf_api.py#L1133)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`user` (`str`) — Name of the user for which we fetched the likes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`total` (`int`) — Total number of likes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datasets` (`List[str]`) — List of datasets liked by the user (as repo_ids).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models` (`List[str]`) — List of models liked by the user (as repo_ids).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spaces` (`List[str]`) — List of spaces liked by the user (as repo_ids).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contains information about a user likes on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: CommitOperation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Below are the supported values for `CommitOperation()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.CommitOperationAdd`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_commit_api.py#L110)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`path_in_repo` (`str`) — Relative filepath in the repo, for example: `"checkpoints/1fec34a/weights.bin"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_or_fileobj` (`str`, `Path`, `bytes`, or `BinaryIO`) — Either:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a path to a local file (as `str` or `pathlib.Path`) to upload
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a buffer of bytes (`bytes`) holding the content of the file to upload
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a “file object” (subclass of `io.BufferedIOBase`), typically obtained with `open(path,
    "rb")`. It must support `seek()` and `tell()` methods.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises
  prefs: []
  type: TYPE_NORMAL
- en: '`ValueError`'
  prefs: []
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    — If `path_or_fileobj` is not one of `str`, `Path`, `bytes` or `io.BufferedIOBase`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    — If `path_or_fileobj` is a `str` or `Path` but not a path to an existing file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
    — If `path_or_fileobj` is a `io.BufferedIOBase` but it doesn’t support both `seek()`
    and `tell()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data structure holding necessary info to upload a file to a repository on the
    Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `as_file`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_commit_api.py#L189)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`with_tqdm` (`bool`, *optional*, defaults to `False`) — If True, iterating
    over the file object will display a progress bar. Only works if the file-like
    object is a path to a file. Pure bytes and buffers are not supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A context manager that yields a file-like object allowing to read the underlying
    data behind `path_or_fileobj`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '#### `b64content`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_commit_api.py#L239)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: The base64-encoded content of `path_or_fileobj`
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns: `bytes`'
  prefs: []
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.CommitOperationDelete`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_commit_api.py#L49)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`path_in_repo` (`str`) — Relative filepath in the repo, for example: `"checkpoints/1fec34a/weights.bin"`
    for a file or `"checkpoints/1fec34a/"` for a folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_folder` (`bool` or `Literal["auto"]`, *optional*) — Whether the Delete
    Operation applies to a folder or not. If “auto”, the path type (file or folder)
    is guessed automatically by looking if path ends with a ”/” (folder) or not (file).
    To explicitly set the path type, you can set `is_folder=True` or `is_folder=False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data structure holding necessary info to delete a file or a folder from a repository
    on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.CommitOperationCopy`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_commit_api.py#L80)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`src_path_in_repo` (`str`) — Relative filepath in the repo of the file to be
    copied, e.g. `"checkpoints/1fec34a/weights.bin"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_in_repo` (`str`) — Relative filepath in the repo where to copy the file,
    e.g. `"checkpoints/1fec34a/weights_copy.bin"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src_revision` (`str`, *optional*) — The git revision of the file to be copied.
    Can be any valid git revision. Default to the target commit revision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data structure holding necessary info to copy a file in a repository on the
    Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Limitations:'
  prefs: []
  type: TYPE_NORMAL
- en: Only LFS files can be copied. To copy a regular file, you need to download it
    locally and re-upload it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-repository copies are not supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: you can combine a [CommitOperationCopy](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationCopy)
    and a [CommitOperationDelete](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitOperationDelete)
    to rename an LFS file on the Hub.'
  prefs: []
  type: TYPE_NORMAL
- en: CommitScheduler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.CommitScheduler`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_commit_scheduler.py#L29)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The id of the repo to commit to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`folder_path` (`str` or `Path`) — Path to the local folder to upload regularly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`every` (`int` or `float`, *optional*) — The number of minutes between each
    commit. Defaults to 5 minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`path_in_repo` (`str`, *optional*) — Relative path of the directory in the
    repo, for example: `"checkpoints/"`. Defaults to the root folder of the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_type` (`str`, *optional*) — The type of the repo to commit to. Defaults
    to `model`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — The revision of the repo to commit to. Defaults
    to `main`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*) — Whether to make the repo private. Defaults
    to `False`. This value is ignored if the repo already exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — The token to use to commit to the repo. Defaults
    to the token saved on the machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow_patterns` (`List[str]` or `str`, *optional*) — If provided, only files
    matching at least one pattern are uploaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_patterns` (`List[str]` or `str`, *optional*) — If provided, files matching
    any of the patterns are not uploaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`squash_history` (`bool`, *optional*) — Whether to squash the history of the
    repo after each commit. Defaults to `False`. Squashing commits is useful to avoid
    degraded performances on the repo when it grows too large.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hf_api` (`HfApi`, *optional*) — The [HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi)
    client to use to commit to the Hub. Can be set with custom settings (user agent,
    token,…).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduler to upload a local folder to the Hub at regular intervals (e.g. push
    to hub every 5 minutes).
  prefs: []
  type: TYPE_NORMAL
- en: The scheduler is started when instantiated and run indefinitely. At the end
    of your script, a last commit is triggered. Checkout the [upload guide](https://huggingface.co/docs/huggingface_hub/guides/upload#scheduled-uploads)
    to learn more about how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '#### `push_to_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_commit_scheduler.py#L178)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: Push folder to the Hub and return the commit info.
  prefs: []
  type: TYPE_NORMAL
- en: This method is not meant to be called directly. It is run in the background
    by the scheduler, respecting a queue mechanism to avoid concurrent commits. Making
    a direct call to the method might lead to concurrency issues.
  prefs: []
  type: TYPE_NORMAL
- en: The default behavior of `push_to_hub` is to assume an append-only folder. It
    lists all files in the folder and uploads only changed files. If no changes are
    found, the method returns without committing anything. If you want to change this
    behavior, you can inherit from [CommitScheduler](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.CommitScheduler)
    and override this method. This can be useful for example to compress data together
    in a single file before committing. For more details and examples, check out our
    [integration guide](https://huggingface.co/docs/huggingface_hub/main/en/guides/upload#scheduled-uploads).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `stop`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_commit_scheduler.py#L140)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: Stop the scheduler.
  prefs: []
  type: TYPE_NORMAL
- en: A stopped scheduler cannot be restarted. Mostly for tests purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `trigger`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/_commit_scheduler.py#L155)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: Trigger a `push_to_hub` and return a future.
  prefs: []
  type: TYPE_NORMAL
- en: This method is automatically called every `every` minutes. You can also call
    it manually to trigger a commit immediately, without waiting for the next scheduled
    commit.
  prefs: []
  type: TYPE_NORMAL
- en: Search helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some helpers to filter repositories on the Hub are available in the `huggingface_hub`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: DatasetFilter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.DatasetFilter`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/endpoint_helpers.py#L69)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`author` (`str`, *optional*) — A string or list of strings that can be used
    to identify datasets on the Hub by the original uploader (author or organization),
    such as `facebook` or `huggingface`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`benchmark` (`str` or `List`, *optional*) — A string or list of strings that
    can be used to identify datasets on the Hub by their official benchmark.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dataset_name` (`str`, *optional*) — A string or list of strings that can be
    used to identify datasets on the Hub by its name, such as `SQAC` or `wikineural`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`language_creators` (`str` or `List`, *optional*) — A string or list of strings
    that can be used to identify datasets on the Hub with how the data was curated,
    such as `crowdsourced` or `machine_generated`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`language` (`str` or `List`, *optional*) — A string or list of strings representing
    a two-character language to filter datasets by on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multilinguality` (`str` or `List`, *optional*) — A string or list of strings
    representing a filter for datasets that contain multiple languages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size_categories` (`str` or `List`, *optional*) — A string or list of strings
    that can be used to identify datasets on the Hub by the size of the dataset such
    as `100K<n<1M` or `1M<n<10M`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`task_categories` (`str` or `List`, *optional*) — A string or list of strings
    that can be used to identify datasets on the Hub by the designed task, such as
    `audio_classification` or `named_entity_recognition`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`task_ids` (`str` or `List`, *optional*) — A string or list of strings that
    can be used to identify datasets on the Hub by the specific task such as `speech_emotion_recognition`
    or `paraphrase`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class that converts human-readable dataset search parameters into ones compatible
    with the REST API. For all parameters capitalization does not matter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: ModelFilter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.ModelFilter`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/utils/endpoint_helpers.py#L155)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`author` (`str`, *optional*) — A string that can be used to identify models
    on the Hub by the original uploader (author or organization), such as `facebook`
    or `huggingface`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library` (`str` or `List`, *optional*) — A string or list of strings of foundational
    libraries models were originally trained from, such as pytorch, tensorflow, or
    allennlp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`language` (`str` or `List`, *optional*) — A string or list of strings of languages,
    both by name and country code, such as “en” or “English”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_name` (`str`, *optional*) — A string that contain complete or partial
    names for models on the Hub, such as “bert” or “bert-base-cased”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`task` (`str` or `List`, *optional*) — A string or list of strings of tasks
    models were designed for, such as: “fill-mask” or “automatic-speech-recognition”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (`str` or `List`, *optional*) — A string tag or a list of tags to filter
    models on the Hub by, such as `text-generation` or `spacy`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trained_dataset` (`str` or `List`, *optional*) — A string tag or a list of
    string tags of the trained dataset for a model on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class that converts human-readable model search parameters into ones compatible
    with the REST API. For all parameters capitalization does not matter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
