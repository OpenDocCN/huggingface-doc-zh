- en: Transformer Temporal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/models/transformer_temporal](https://huggingface.co/docs/diffusers/api/models/transformer_temporal)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: A Transformer model for video-like data.
  prefs: []
  type: TYPE_NORMAL
- en: TransformerTemporalModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.models.TransformerTemporalModel`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/transformers/transformer_temporal.py#L41)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`num_attention_heads` (`int`, *optional*, defaults to 16) — The number of heads
    to use for multi-head attention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_head_dim` (`int`, *optional*, defaults to 88) — The number of channels
    in each head.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_channels` (`int`, *optional*) — The number of channels in the input and
    output (specify if the input is **continuous**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_layers` (`int`, *optional*, defaults to 1) — The number of layers of Transformer
    blocks to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dropout` (`float`, *optional*, defaults to 0.0) — The dropout probability
    to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attention_dim` (`int`, *optional*) — The number of `encoder_hidden_states`
    dimensions to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_bias` (`bool`, *optional*) — Configure if the `TransformerBlock`
    attention should contain a bias parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sample_size` (`int`, *optional*) — The width of the latent images (specify
    if the input is **discrete**). This is fixed during training since it is used
    to learn a number of position embeddings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activation_fn` (`str`, *optional*, defaults to `"geglu"`) — Activation function
    to use in feed-forward. See `diffusers.models.activations.get_activation` for
    supported activation functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`norm_elementwise_affine` (`bool`, *optional*) — Configure if the `TransformerBlock`
    should use learnable elementwise affine parameters for normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`double_self_attention` (`bool`, *optional*) — Configure if each `TransformerBlock`
    should contain two self-attention layers. positional_embeddings — (`str`, *optional*):
    The type of positional embeddings to apply to the sequence input before passing
    use. num_positional_embeddings — (`int`, *optional*): The maximum length of the
    sequence over which to apply positional embeddings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Transformer model for video-like data.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/transformers/transformer_temporal.py#L121)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`hidden_states` (`torch.LongTensor` of shape `(batch size, num latent pixels)`
    if discrete, `torch.FloatTensor` of shape `(batch size, channel, height, width)`
    if continuous) — Input hidden_states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` ( `torch.LongTensor` of shape `(batch size, encoder_hidden_states
    dim)`, *optional*) — Conditional embeddings for cross attention layer. If not
    given, cross-attention defaults to self-attention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestep` ( `torch.LongTensor`, *optional*) — Used to indicate denoising step.
    Optional timestep to be applied as an embedding in `AdaLayerNorm`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_labels` ( `torch.LongTensor` of shape `(batch size, num classes)`, *optional*)
    — Used to indicate class labels conditioning. Optional class labels to be applied
    as an embedding in `AdaLayerZeroNorm`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_frames` (`int`, *optional*, defaults to 1) — The number of frames to be
    processed per batch. This is used to reshape the hidden states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attention_kwargs` (`dict`, *optional*) — A kwargs dictionary that if
    specified is passed along to the `AttentionProcessor` as defined under `self.processor`
    in [diffusers.models.attention_processor](https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/attention_processor.py).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a [UNet2DConditionOutput](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.models.unets.unet_2d_condition.UNet2DConditionOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`~models.transformer_temporal.TransformerTemporalModelOutput` or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If `return_dict` is True, an `~models.transformer_temporal.TransformerTemporalModelOutput`
    is returned, otherwise a `tuple` where the first element is the sample tensor.
  prefs: []
  type: TYPE_NORMAL
- en: The `TransformerTemporal` forward method.
  prefs: []
  type: TYPE_NORMAL
- en: TransformerTemporalModelOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.models.transformers.transformer_temporal.TransformerTemporalModelOutput`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/transformers/transformer_temporal.py#L28)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor` of shape `(batch_size x num_frames, num_channels,
    height, width)`) — The hidden states output conditioned on `encoder_hidden_states`
    input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of `TransformerTemporalModel`.
  prefs: []
  type: TYPE_NORMAL
