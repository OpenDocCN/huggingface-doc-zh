- en: Collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/huggingface_hub/guides/collections](https://huggingface.co/docs/huggingface_hub/guides/collections)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: A collection is a group of related items on the Hub (models, datasets, Spaces,
    papers) that are organized together on the same page. Collections are useful for
    creating your own portfolio, bookmarking content in categories, or presenting
    a curated list of items you want to share. Check out this [guide](https://huggingface.co/docs/hub/collections)
    to understand in more detail what collections are and how they look on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: You can directly manage collections in the browser, but in this guide, we will
    focus on how to manage it programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch a collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use [get_collection()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.get_collection)
    to fetch your collections or any public ones. You must have the collection’s *slug*
    to retrieve a collection. A slug is an identifier for a collection based on the
    title and a unique ID. You can find the slug in the URL of the collection page.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4da8e0b0d868293582a7dfcfe1819539.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s fetch the collection with, `"TheBloke/recent-models-64f9a55bb3115b4f513ec026"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The [Collection](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.Collection)
    object returned by [get_collection()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.get_collection)
    contains:'
  prefs: []
  type: TYPE_NORMAL
- en: 'high-level metadata: `slug`, `owner`, `title`, `description`, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a list of [CollectionItem](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.CollectionItem)
    objects; each item represents a model, a dataset, a Space, or a paper.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All collection items are guaranteed to have:'
  prefs: []
  type: TYPE_NORMAL
- en: 'a unique `item_object_id`: this is the id of the collection item in the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'an `item_id`: this is the id on the Hub of the underlying item (model, dataset,
    Space, paper); it is not necessarily unique, and only the `item_id`/`item_type`
    pair is unique'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'an `item_type`: model, dataset, Space, paper'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the `position` of the item in the collection, which can be updated to reorganize
    your collection (see [update_collection_item()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.update_collection_item)
    below)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `note` can also be attached to the item. This is useful to add additional
    information about the item (a comment, a link to a blog post, etc.). The attribute
    still has a `None` value if an item doesn’t have a note.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to these base attributes, returned items can have additional attributes
    depending on their type: `author`, `private`, `lastModified`, `gated`, `title`,
    `likes`, `upvotes`, etc. None of these attributes are guaranteed to be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: List collections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also retrieve collections using [list_collections()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_collections).
    Collections can be filtered using some parameters. Let’s list all the collections
    from the user [`teknium`](https://huggingface.co/teknium).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This returns an iterable of `Collection` objects. We can iterate over them to
    print, for example, the number of upvotes for each collection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When listing collections, the item list per collection is truncated to 4 items
    maximum. To retrieve all items from a collection, you must use [get_collection()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.get_collection).
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to do more advanced filtering. Let’s get all collections containing
    the model [TheBloke/OpenHermes-2.5-Mistral-7B-GGUF](https://huggingface.co/TheBloke/OpenHermes-2.5-Mistral-7B-GGUF),
    sorted by trending, and limit the count to 5.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameter `sort` must be one of `"last_modified"`, `"trending"` or `"upvotes"`.
    Parameter `item` accepts any particular item. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"models/teknium/OpenHermes-2.5-Mistral-7B"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"spaces/julien-c/open-gpt-rhyming-robot"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"datasets/squad"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"papers/2311.12983"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details, please check out [list_collections()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.list_collections)
    reference.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know how to get a [Collection](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.Collection),
    let’s create our own! Use [create_collection()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.create_collection)
    with a title and description. To create a collection on an organization page,
    pass `namespace="my-cool-org"` when creating the collection. Finally, you can
    also create private collections by passing `private=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It will return a [Collection](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.Collection)
    object with the high-level metadata (title, description, owner, etc.) and an empty
    list of items. You will now be able to refer to this collection using it’s `slug`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Manage items in a collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a [Collection](/docs/huggingface_hub/v0.20.3/en/package_reference/collections#huggingface_hub.Collection),
    we want to add items to it and organize them.
  prefs: []
  type: TYPE_NORMAL
- en: Add items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Items have to be added one by one using [add_collection_item()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.add_collection_item).
    You only need to know the `collection_slug`, `item_id` and `item_type`. Optionally,
    you can also add a `note` to the item (500 characters maximum).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If an item already exists in a collection (same `item_id`/`item_type` pair),
    an HTTP 409 error will be raised. You can choose to ignore this error by setting
    `exists_ok=True`.
  prefs: []
  type: TYPE_NORMAL
- en: Add a note to an existing item
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can modify an existing item to add or modify the note attached to it using
    [update_collection_item()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.update_collection_item).
    Let’s reuse the example above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Reorder items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Items in a collection are ordered. The order is determined by the `position`
    attribute of each item. By default, items are ordered by appending new items at
    the end of the collection. You can update the order using [update_collection_item()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.update_collection_item)
    the same way you would add a note.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s reuse our example above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Remove items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, you can also remove an item using [delete_collection_item()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_collection_item).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Delete collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A collection can be deleted using [delete_collection()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.delete_collection).
  prefs: []
  type: TYPE_NORMAL
- en: This is a non-revertible action. A deleted collection cannot be restored.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
