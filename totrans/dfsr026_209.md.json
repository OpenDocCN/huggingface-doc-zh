["```py\n( num_vec_classes: int num_train_timesteps: int = 100 alpha_cum_start: float = 0.99999 alpha_cum_end: float = 9e-06 gamma_cum_start: float = 9e-06 gamma_cum_end: float = 0.99999 )\n```", "```py\n( t: torch.int32 x_t: LongTensor log_onehot_x_t: FloatTensor cumulative: bool ) \u2192 export const metadata = 'undefined';torch.FloatTensor of shape (batch size, num classes - 1, num latent pixels)\n```", "```py\n( log_p_x_0 x_t t ) \u2192 export const metadata = 'undefined';torch.FloatTensor of shape (batch size, num classes, num latent pixels)\n```", "```py\np(x_{t-1} | x_t) = sum( q(x_t | x_{t-1}) * q(x_{t-1} | x_0) * p(x_0) / q(x_t | x_0) )\n```", "```py\n( num_inference_steps: int device: Union = None )\n```", "```py\n( model_output: FloatTensor timestep: torch.int64 sample: LongTensor generator: Optional = None return_dict: bool = True ) \u2192 export const metadata = 'undefined';VQDiffusionSchedulerOutput or tuple\n```", "```py\n( prev_sample: LongTensor )\n```"]