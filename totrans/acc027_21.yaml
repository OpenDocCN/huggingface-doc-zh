- en: Tracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/accelerate/usage_guides/tracking](https://huggingface.co/docs/accelerate/usage_guides/tracking)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/accelerate/v0.27.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/entry/start.6e0fb178.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/chunks/scheduler.69131cc3.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/chunks/singletons.ac467c20.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/chunks/paths.b2f3aeca.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/entry/app.67e11fc0.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/chunks/index.e1f30d73.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/nodes/0.bfeed9f0.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/nodes/46.bc2991b5.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/chunks/Tip.22e79575.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/chunks/CodeBlock.30cef355.js">
    <link rel="modulepreload" href="/docs/accelerate/v0.27.2/en/_app/immutable/chunks/Heading.0aab6758.js">
  prefs: []
  type: TYPE_NORMAL
- en: There are a large number of experiment tracking APIâ€™s available, however getting
    them all to work with in a multi-processing environment can oftentimes be complex.
    ðŸ¤— Accelerate provides a general tracking API that can be used to log useful items
    during your script through `Accelerator.log()`
  prefs: []
  type: TYPE_NORMAL
- en: Integrated Trackers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently `Accelerate` supports seven trackers out-of-the-box:'
  prefs: []
  type: TYPE_NORMAL
- en: TensorBoard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WandB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CometML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MLFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ClearML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DVCLive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use any of them, pass in the selected type(s) to the `log_with` parameter
    in `Accelerate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'At the start of your experiment `Accelerator.init_trackers()` should be used
    to setup your project, and potentially add any experiment hyperparameters to be
    logged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When you are ready to log any data, `Accelerator.log()` should be used. A `step`
    can also be passed in to correlate the data with a particular step in the training
    loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once youâ€™ve finished training, make sure to run `Accelerator.end_training()`
    so that all the trackers can run their finish functionalities if they have any.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A full example is below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If a tracker requires a directory to save data to, such as `TensorBoard`, then
    pass the directory path to `project_dir`. The `project_dir` parameter is useful
    when there are other configurations to be combined with in the [ProjectConfiguration](/docs/accelerate/v0.27.2/en/package_reference/utilities#accelerate.utils.ProjectConfiguration)
    data class. For example, you can save the TensorBoard data to `project_dir` and
    everything else can be logged in the `logging_dir` parameter of [`~utils.ProjectConfiguration`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Implementing Custom Trackers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To implement a new tracker to be used in `Accelerator`, a new one can be made
    through implementing the `GeneralTracker` class. Every tracker must implement
    three functions and have three properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`__init__`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should store a `run_name` and initialize the tracker API of the integrated library.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If a tracker stores their data locally (such as TensorBoard), a `logging_dir`
    parameter can be added.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store_init_configuration`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should take in a `values` dictionary and store them as a one-time experiment
    configuration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should take in a `values` dictionary and a `step`, and should log them to the
    run
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` (`str`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A unique string name for the tracker, such as `"wandb"` for the wandb tracker.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This will be used for interacting with this tracker specifically
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requires_logging_directory` (`bool`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether a `logging_dir` is needed for this particular tracker and if it uses
    one.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tracker`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This should be implemented as a `@property` function
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Should return the internal tracking mechanism the library uses, such as the
    `run` object for `wandb`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each method should also utilize the [state.PartialState](/docs/accelerate/v0.27.2/en/package_reference/state#accelerate.PartialState)
    class if the logger should only be executed on the main process for instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'A brief example can be seen below with an integration with Weights and Biases,
    containing only the relevant information and logging just on the main process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When you are ready to build your `Accelerator` object, pass in an **instance**
    of your tracker to `Accelerator.log_with` to have it automatically be used with
    the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'These also can be mixed with existing trackers, including with `"all"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Accessing the internal tracker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If some custom interactions with a tracker might be wanted directly, you can
    quickly access one using the [Accelerator.get_tracker()](/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator.get_tracker)
    method. Just pass in the string corresponding to a trackerâ€™s `.name` attribute
    and it will return that tracker on the main process.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example shows doing so with wandb:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'From there you can interact with `wandb`â€™s `run` object like normal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Trackers built in Accelerate will automatically execute on the correct process,
    so if a tracker is only meant to be ran on the main process it will do so automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to truly remove Accelerateâ€™s wrapping entirely, you can achieve
    the same outcome with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When a wrapper cannot work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If a library has an API that does not follow a strict `.log` with an overall
    dictionary such as Neptune.AI, logging can be done manually under an `if accelerator.is_main_process`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
