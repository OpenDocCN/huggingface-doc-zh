- en: Text-to-image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/using-diffusers/conditional_image_generation](https://huggingface.co/docs/diffusers/using-diffusers/conditional_image_generation)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: When you think of diffusion models, text-to-image is usually one of the first
    things that come to mind. Text-to-image generates an image from a text description
    (for example, ‚ÄúAstronaut in a jungle, cold color palette, muted colors, detailed,
    8k‚Äù) which is also known as a *prompt*.
  prefs: []
  type: TYPE_NORMAL
- en: From a very high level, a diffusion model takes a prompt and some random initial
    noise, and iteratively removes the noise to construct an image. The *denoising*
    process is guided by the prompt, and once the denoising process ends after a predetermined
    number of time steps, the image representation is decoded into an image.
  prefs: []
  type: TYPE_NORMAL
- en: Read the [How does Stable Diffusion work?](https://huggingface.co/blog/stable_diffusion#how-does-stable-diffusion-work)
    blog post to learn more about how a latent diffusion model works.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can generate images from a prompt in ü§ó Diffusers in two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load a checkpoint into the [AutoPipelineForText2Image](/docs/diffusers/v0.26.3/en/api/pipelines/auto_pipeline#diffusers.AutoPipelineForText2Image)
    class, which automatically detects the appropriate pipeline class to use based
    on the checkpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass a prompt to the pipeline to generate an image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3d5a1c2477f576fbe2f04b0abeeb5cae.png)'
  prefs: []
  type: TYPE_IMG
- en: Popular models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most common text-to-image models are [Stable Diffusion v1.5](https://huggingface.co/runwayml/stable-diffusion-v1-5),
    [Stable Diffusion XL (SDXL)](https://huggingface.co/stabilityai/stable-diffusion-xl-base-1.0),
    and [Kandinsky 2.2](https://huggingface.co/kandinsky-community/kandinsky-2-2-decoder).
    There are also ControlNet models or adapters that can be used with text-to-image
    models for more direct control in generating images. The results from each model
    are slightly different because of their architecture and training process, but
    no matter which model you choose, their usage is more or less the same. Let‚Äôs
    use the same prompt for each model and compare their results.
  prefs: []
  type: TYPE_NORMAL
- en: Stable Diffusion v1.5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Stable Diffusion v1.5](https://huggingface.co/runwayml/stable-diffusion-v1-5)
    is a latent diffusion model initialized from [Stable Diffusion v1-4](https://huggingface.co/CompVis/stable-diffusion-v1-4),
    and finetuned for 595K steps on 512x512 images from the LAION-Aesthetics V2 dataset.
    You can use this model like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Stable Diffusion XL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SDXL is a much larger version of the previous Stable Diffusion models, and
    involves a two-stage model process that adds even more details to an image. It
    also includes some additional *micro-conditionings* to generate high-quality images
    centered subjects. Take a look at the more comprehensive [SDXL](sdxl) guide to
    learn more about how to use it. In general, you can use SDXL like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Kandinsky 2.2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Kandinsky model is a bit different from the Stable Diffusion models because
    it also uses an image prior model to create embeddings that are used to better
    align text and images in the diffusion model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to use Kandinsky 2.2 is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: ControlNet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ControlNet models are auxiliary models or adapters that are finetuned on top
    of text-to-image models, such as [Stable Diffusion v1.5](https://huggingface.co/runwayml/stable-diffusion-v1-5).
    Using ControlNet models in combination with text-to-image models offers diverse
    options for more explicit control over how to generate an image. With ControlNet,
    you add an additional conditioning input image to the model. For example, if you
    provide an image of a human pose (usually represented as multiple keypoints that
    are connected into a skeleton) as a conditioning input, the model generates an
    image that follows the pose of the image. Check out the more in-depth [ControlNet](controlnet)
    guide to learn more about other conditioning inputs and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, let‚Äôs condition the ControlNet with a human pose estimation
    image. Load the ControlNet model pretrained on human pose estimations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass the `controlnet` to the [AutoPipelineForText2Image](/docs/diffusers/v0.26.3/en/api/pipelines/auto_pipeline#diffusers.AutoPipelineForText2Image),
    and provide the prompt and pose estimation image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d2b7e6b0b8516e613654db5d9e482041.png)'
  prefs: []
  type: TYPE_IMG
- en: Stable Diffusion v1.5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47eb848e4e09fd8ca2c920b1f98d089d.png)'
  prefs: []
  type: TYPE_IMG
- en: Stable Diffusion XL
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6c09e0df13fba3dbf95d5232315d36eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Kandinsky 2.2
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3657c31e95dc399792fc8b0ee81679f4.png)'
  prefs: []
  type: TYPE_IMG
- en: ControlNet (pose conditioning)
  prefs: []
  type: TYPE_NORMAL
- en: Configure pipeline parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of parameters that can be configured in the pipeline that
    affect how an image is generated. You can change the image‚Äôs output size, specify
    a negative prompt to improve image quality, and more. This section dives deeper
    into how to use these parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Height and width
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `height` and `width` parameters control the height and width (in pixels)
    of the generated image. By default, the Stable Diffusion v1.5 model outputs 512x512
    images, but you can change this to any size that is a multiple of 8\. For example,
    to create a rectangular image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/84e161b40900b68ec614371d04cb4eb1.png)'
  prefs: []
  type: TYPE_IMG
- en: Other models may have different default image sizes depending on the image sizes
    in the training dataset. For example, SDXL‚Äôs default image size is 1024x1024 and
    using lower `height` and `width` values may result in lower quality images. Make
    sure you check the model‚Äôs API reference first!
  prefs: []
  type: TYPE_NORMAL
- en: Guidance scale
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `guidance_scale` parameter affects how much the prompt influences image
    generation. A lower value gives the model ‚Äúcreativity‚Äù to generate images that
    are more loosely related to the prompt. Higher `guidance_scale` values push the
    model to follow the prompt more closely, and if this value is too high, you may
    observe some artifacts in the generated image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d4e1ac912506a0937e8776bcaf804434.png)'
  prefs: []
  type: TYPE_IMG
- en: guidance_scale = 2.5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bd6081df4d5f8e0649e3668778fa3eab.png)'
  prefs: []
  type: TYPE_IMG
- en: guidance_scale = 7.5
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3741374b77d721ec460507012c586ea0.png)'
  prefs: []
  type: TYPE_IMG
- en: guidance_scale = 10.5
  prefs: []
  type: TYPE_NORMAL
- en: Negative prompt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like how a prompt guides generation, a *negative prompt* steers the model
    away from things you don‚Äôt want the model to generate. This is commonly used to
    improve overall image quality by removing poor or bad image features such as ‚Äúlow
    resolution‚Äù or ‚Äúbad details‚Äù. You can also use a negative prompt to remove or
    modify the content and style of an image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/841a0429e6f0e2536bdabb5aa8e25a23.png)'
  prefs: []
  type: TYPE_IMG
- en: negative_prompt = "ugly, deformed, disfigured, poor details, bad anatomy"
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9695ff0c8decf5141f5f125a58a6ec4c.png)'
  prefs: []
  type: TYPE_IMG
- en: negative_prompt = "astronaut"
  prefs: []
  type: TYPE_NORMAL
- en: Generator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A [`torch.Generator`](https://pytorch.org/docs/stable/generated/torch.Generator.html#generator)
    object enables reproducibility in a pipeline by setting a manual seed. You can
    use a `Generator` to generate batches of images and iteratively improve on an
    image generated from a seed as detailed in the [Improve image quality with deterministic
    generation](reusing_seeds) guide.
  prefs: []
  type: TYPE_NORMAL
- en: You can set a seed and `Generator` as shown below. Creating an image with a
    `Generator` should return the same result each time instead of randomly generating
    a new image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Control image generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several ways to exert more control over how an image is generated
    outside of configuring a pipeline‚Äôs parameters, such as prompt weighting and ControlNet
    models.
  prefs: []
  type: TYPE_NORMAL
- en: Prompt weighting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prompt weighting is a technique for increasing or decreasing the importance
    of concepts in a prompt to emphasize or minimize certain features in an image.
    We recommend using the [Compel](https://github.com/damian0815/compel) library
    to help you generate the weighted prompt embeddings.
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to create the prompt embeddings in the [Prompt weighting](weighted_prompts)
    guide. This example focuses on how to use the prompt embeddings in the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Once you‚Äôve created the embeddings, you can pass them to the `prompt_embeds`
    (and `negative_prompt_embeds` if you‚Äôre using a negative prompt) parameter in
    the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: ControlNet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you saw in the [ControlNet](#controlnet) section, these models offer a more
    flexible and accurate way to generate images by incorporating an additional conditioning
    image input. Each ControlNet model is pretrained on a particular type of conditioning
    image to generate new images that resemble it. For example, if you take a ControlNet
    model pretrained on depth maps, you can give the model a depth map as a conditioning
    input and it‚Äôll generate an image that preserves the spatial information in it.
    This is quicker and easier than specifying the depth information in a prompt.
    You can even combine multiple conditioning inputs with a [MultiControlNet](controlnet#multicontrolnet)!
  prefs: []
  type: TYPE_NORMAL
- en: There are many types of conditioning inputs you can use, and ü§ó Diffusers supports
    ControlNet for Stable Diffusion and SDXL models. Take a look at the more comprehensive
    [ControlNet](controlnet) guide to learn how you can use these models.
  prefs: []
  type: TYPE_NORMAL
- en: Optimize
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Diffusion models are large, and the iterative nature of denoising an image is
    computationally expensive and intensive. But this doesn‚Äôt mean you need access
    to powerful - or even many - GPUs to use them. There are many optimization techniques
    for running diffusion models on consumer and free-tier resources. For example,
    you can load model weights in half-precision to save GPU memory and increase speed
    or offload the entire model to the GPU to save even more memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'PyTorch 2.0 also supports a more memory-efficient attention mechanism called
    [*scaled dot product attention*](../optimization/torch2.0#scaled-dot-product-attention)
    that is automatically enabled if you‚Äôre using PyTorch 2.0\. You can combine this
    with [`torch.compile`](https://pytorch.org/tutorials/intermediate/torch_compile_tutorial.html)
    to speed your code up even more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: For more tips on how to optimize your code to save memory and speed up inference,
    read the [Memory and speed](../optimization/fp16) and [Torch 2.0](../optimization/torch2.0)
    guides.
  prefs: []
  type: TYPE_NORMAL
