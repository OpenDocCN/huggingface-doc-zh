- en: Custom Tools and Prompts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/custom_tools](https://huggingface.co/docs/transformers/v4.37.2/en/custom_tools)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: If you are not aware of what tools and agents are in the context of transformers,
    we recommend you read the [Transformers Agents](transformers_agents) page first.
  prefs: []
  type: TYPE_NORMAL
- en: Transformers Agents is an experimental API that is subject to change at any
    time. Results returned by the agents can vary as the APIs or underlying models
    are prone to change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating and using custom tools and prompts is paramount to empowering the
    agent and having it perform new tasks. In this guide we’ll take a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: How to customize the prompt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use custom tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create custom tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing the prompt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As explained in [Transformers Agents](transformers_agents) agents can run in
    [run()](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Agent.run)
    and [chat()](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Agent.chat)
    mode. Both the `run` and `chat` modes underlie the same logic. The language model
    powering the agent is conditioned on a long prompt and completes the prompt by
    generating the next tokens until the stop token is reached. The only difference
    between the two modes is that during the `chat` mode the prompt is extended with
    previous user inputs and model generations. This allows the agent to have access
    to past interactions, seemingly giving the agent some kind of memory.
  prefs: []
  type: TYPE_NORMAL
- en: Structure of the prompt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s take a closer look at how the prompt is structured to understand how it
    can be best customized. The prompt is structured broadly into four parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Introduction: how the agent should behave, explanation of the concept of tools.'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Description of all the tools. This is defined by a `<<all_tools>>` token that
    is dynamically replaced at runtime with the tools defined/chosen by the user.
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: A set of examples of tasks and their solution
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Current example, and request for solution.
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To better understand each part, let’s look at a shortened version of how the
    `run` prompt can look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]py'
  prefs: []
  type: TYPE_NORMAL
- en: translated_question = translator(question=question, src_lang="French", tgt_lang="English")
  prefs: []
  type: TYPE_NORMAL
- en: print(f"The translated question is {translated_question}.")
  prefs: []
  type: TYPE_NORMAL
- en: answer = image_qa(image=image, question=translated_question)
  prefs: []
  type: TYPE_NORMAL
- en: print(f"The answer is {answer}")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]py'
  prefs: []
  type: TYPE_NORMAL
- en: answer = document_qa(document, question="What is the oldest person?")
  prefs: []
  type: TYPE_NORMAL
- en: print(f"The answer is {answer}.")
  prefs: []
  type: TYPE_NORMAL
- en: image = image_generator("A banner showing " + answer)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The introduction (the text before *“Tools:”*) explains precisely how the model
    shall behave and what it should do. This part most likely does not need to be
    customized as the agent shall always behave the same way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part (the bullet points below *“Tools”*) is dynamically added upon
    calling `run` or `chat`. There are exactly as many bullet points as there are
    tools in `agent.toolbox` and each bullet point consists of the name and description
    of the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let’s verify this quickly by loading the document_qa tool and printing out the
    name and description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'which gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the tool name is short and precise. The description includes
    two parts, the first explaining what the tool does and the second states what
    input arguments and return values are expected.
  prefs: []
  type: TYPE_NORMAL
- en: A good tool name and tool description are very important for the agent to correctly
    use it. Note that the only information the agent has about the tool is its name
    and description, so one should make sure that both are precisely written and match
    the style of the existing tools in the toolbox. In particular make sure the description
    mentions all the arguments expected by name in code-style, along with the expected
    type and a description of what they are.
  prefs: []
  type: TYPE_NORMAL
- en: Check the naming and description of the curated Transformers tools to better
    understand what name and description a tool is expected to have. You can see all
    tools with the `Agent.toolbox` property.
  prefs: []
  type: TYPE_NORMAL
- en: The third part includes a set of curated examples that show the agent exactly
    what code it should produce for what kind of user request. The large language
    models empowering the agent are extremely good at recognizing patterns in a prompt
    and repeating the pattern with new data. Therefore, it is very important that
    the examples are written in a way that maximizes the likelihood of the agent to
    generating correct, executable code in practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at one example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]py'
  prefs: []
  type: TYPE_NORMAL
- en: answer = document_qa(document, question="What is the oldest person?")
  prefs: []
  type: TYPE_NORMAL
- en: print(f"The answer is {answer}.")
  prefs: []
  type: TYPE_NORMAL
- en: image = image_generator("A banner showing " + answer)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The pattern the model is prompted to repeat has three parts: The task statement,
    the agent’s explanation of what it intends to do, and finally the generated code.
    Every example that is part of the prompt has this exact pattern, thus making sure
    that the agent will reproduce exactly the same pattern when generating new tokens.'
  prefs: []
  type: TYPE_NORMAL
- en: The prompt examples are curated by the Transformers team and rigorously evaluated
    on a set of [problem statements](https://github.com/huggingface/transformers/blob/main/src/transformers/tools/evaluate_agent.py)
    to ensure that the agent’s prompt is as good as possible to solve real use cases
    of the agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final part of the prompt corresponds to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'is a final and unfinished example that the agent is tasked to complete. The
    unfinished example is dynamically created based on the actual user input. For
    the above example, the user ran:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The user input - *a.k.a* the task: *“Draw me a picture of rivers and lakes”*
    is cast into the prompt template: “Task: <task> \n\n I will use the following”.
    This sentence makes up the final lines of the prompt the agent is conditioned
    on, therefore strongly influencing the agent to finish the example exactly in
    the same way it was previously done in the examples.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Without going into too much detail, the chat template has the same prompt structure
    with the examples having a slightly different style, *e.g.*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]py'
  prefs: []
  type: TYPE_NORMAL
- en: answer = image_qa(text=question, image=image)
  prefs: []
  type: TYPE_NORMAL
- en: print(f"The answer is {answer}")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]py'
  prefs: []
  type: TYPE_NORMAL
- en: translated_question = translator(question=question, src_lang="French", tgt_lang="English")
  prefs: []
  type: TYPE_NORMAL
- en: print(f"The translated question is {translated_question}.")
  prefs: []
  type: TYPE_NORMAL
- en: answer = image_qa(text=translated_question, image=image)
  prefs: []
  type: TYPE_NORMAL
- en: print(f"The answer is {answer}")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Contrary, to the examples of the `run` prompt, each `chat` prompt example has
    one or more exchanges between the *Human* and the *Assistant*. Every exchange
    is structured similarly to the example of the `run` prompt. The user’s input is
    appended to behind *Human:* and the agent is prompted to first generate what needs
    to be done before generating code. An exchange can be based on previous exchanges,
    therefore allowing the user to refer to past exchanges as is done *e.g.* above
    by the user’s input of “I tried **this** code” refers to the previously generated
    code of the agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon running `.chat`, the user’s input or *task* is cast into an unfinished
    example of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: which the agent completes. Contrary to the `run` command, the `chat` command
    then appends the completed example to the prompt, thus giving the agent more context
    for the next `chat` turn.
  prefs: []
  type: TYPE_NORMAL
- en: Great now that we know how the prompt is structured, let’s see how we can customize
    it!
  prefs: []
  type: TYPE_NORMAL
- en: Writing good user inputs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While large language models are getting better and better at understanding users’
    intentions, it helps enormously to be as precise as possible to help the agent
    pick the correct task. What does it mean to be as precise as possible?
  prefs: []
  type: TYPE_NORMAL
- en: The agent sees a list of tool names and their description in its prompt. The
    more tools are added the more difficult it becomes for the agent to choose the
    correct tool and it’s even more difficult to choose the correct sequences of tools
    to run. Let’s look at a common failure case, here we will only return the code
    to analyze it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: which is probably not what we wanted. Instead, it is more likely that we want
    an image of a tree to be generated. To steer the agent more towards using a specific
    tool it can therefore be very helpful to use important keywords that are present
    in the tool’s name and description. Let’s have a look.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The name and description make use of the keywords “image”, “prompt”, “create”
    and “generate”. Using these words will most likely work better here. Let’s refine
    our prompt a bit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Much better! That looks more like what we want. In short, when you notice that
    the agent struggles to correctly map your task to the correct tools, try looking
    up the most pertinent keywords of the tool’s name and description and try refining
    your task request with it.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the tool descriptions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we’ve seen before the agent has access to each of the tools’ names and descriptions.
    The base tools should have very precise names and descriptions, however, you might
    find that it could help to change the the description or name of a tool for your
    specific use case. This might become especially important when you’ve added multiple
    tools that are very similar or if you want to use your agent only for a certain
    domain, *e.g.* image generation and transformations.
  prefs: []
  type: TYPE_NORMAL
- en: A common problem is that the agent confuses image generation with image transformation/modification
    when used a lot for image generation tasks, *e.g.*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: returns
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: which is probably not exactly what we want here. It seems like the agent has
    a difficult time to understand the difference between `image_generator` and `image_transformer`
    and often uses the two together.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can help the agent here by changing the tool name and description of `image_transformer`.
    Let’s instead call it `modifier` to disassociate it a bit from “image” and “prompt”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now “modify” is a strong cue to use the new image processor which should help
    with the above prompt. Let’s run it again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we’re getting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'which is definitely closer to what we had in mind! However, we want to have
    both the house and car in the same image. Steering the task more toward single
    image generation should help:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Agents are still brittle for many use cases, especially when it comes to slightly
    more complex use cases like generating an image of multiple objects. Both the
    agent itself and the underlying prompt will be further improved in the coming
    months making sure that agents become more robust to a variety of user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the whole prompt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To give the user maximum flexibility, the whole prompt template as explained
    in [above](#structure-of-the-prompt) can be overwritten by the user. In this case
    make sure that your custom prompt includes an introduction section, a tool section,
    an example section, and an unfinished example section. If you want to overwrite
    the `run` prompt template, you can do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Please make sure to have the `<<all_tools>>` string and the `<<prompt>>` defined
    somewhere in the `template` so that the agent can be aware of the tools, it has
    available to it as well as correctly insert the user’s prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, one can overwrite the `chat` prompt template. Note that the `chat`
    mode always uses the following format for the exchanges:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Therefore it is important that the examples of the custom `chat` prompt template
    also make use of this format. You can overwrite the `chat` template at instantiation
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Please make sure to have the `<<all_tools>>` string defined somewhere in the
    `template` so that the agent can be aware of the tools, it has available to it.
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, you can pass a repo ID instead of the prompt template if you
    would like to use a template hosted by someone in the community. The default prompts
    live in [this repo](https://huggingface.co/datasets/huggingface-tools/default-prompts)
    as an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'To upload your custom prompt on a repo on the Hub and share it with the community
    just make sure:'
  prefs: []
  type: TYPE_NORMAL
- en: to use a dataset repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to put the prompt template for the `run` command in a file named `run_prompt_template.txt`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to put the prompt template for the `chat` command in a file named `chat_prompt_template.txt`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using custom tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we’ll be leveraging two existing custom tools that are specific
    to image generation:'
  prefs: []
  type: TYPE_NORMAL
- en: We replace [huggingface-tools/image-transformation](https://huggingface.co/spaces/huggingface-tools/image-transformation),
    with [diffusers/controlnet-canny-tool](https://huggingface.co/spaces/diffusers/controlnet-canny-tool)
    to allow for more image modifications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We add a new tool for image upscaling to the default toolbox: [diffusers/latent-upscaler-tool](https://huggingface.co/spaces/diffusers/latent-upscaler-tool)
    replace the existing image-transformation tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We’ll start by loading the custom tools with the convenient [load_tool()](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.load_tool)
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon adding custom tools to an agent, the tools’ descriptions and names are
    automatically included in the agents’ prompts. Thus, it is imperative that custom
    tools have a well-written description and name in order for the agent to understand
    how to use them. Let’s take a look at the description and name of `controlnet_transformer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: gives
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The name and description are accurate and fit the style of the [curated set
    of tools](./transformers_agents#a-curated-set-of-tools). Next, let’s instantiate
    an agent with `controlnet_transformer` and `upscaler`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This command should give you the following info:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The set of curated tools already has an `image_transformer` tool which is hereby
    replaced with our custom tool.
  prefs: []
  type: TYPE_NORMAL
- en: Overwriting existing tools can be beneficial if we want to use a custom tool
    exactly for the same task as an existing tool because the agent is well-versed
    in using the specific task. Beware that the custom tool should follow the exact
    same API as the overwritten tool in this case, or you should adapt the prompt
    template to make sure all examples using that tool are updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The upscaler tool was given the name `image_upscaler` which is not yet present
    in the default toolbox and is therefore simply added to the list of tools. You
    can always have a look at the toolbox that is currently available to the agent
    via the `agent.toolbox` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note how `image_upscaler` is now part of the agents’ toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now try out the new tools! We will re-use the image we generated in [Transformers
    Agents Quickstart](./transformers_agents#single-execution-run).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/eabd440c942fd7c70ec75212a9603e8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s transform the image into a beautiful winter landscape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/67c48ebec156a5115cefc1b4d4e6751c.png)'
  prefs: []
  type: TYPE_IMG
- en: The new image processing tool is based on ControlNet which can make very strong
    modifications to the image. By default the image processing tool returns an image
    of size 512x512 pixels. Let’s see if we can upscale it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1e4809693bd6c47f57ad6cc02d12f4b9.png)'
  prefs: []
  type: TYPE_IMG
- en: The agent automatically mapped our prompt “Upscale the image” to the just added
    upscaler tool purely based on the description and name of the upscaler tool and
    was able to correctly run it.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s have a look at how you can create a new custom tool.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we show how to create a new tool that can be added to the agent.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new tool
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We’ll first start by creating a tool. We’ll add the not-so-useful yet fun task
    of fetching the model on the Hugging Face Hub with the most downloads for a given
    task.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do that with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: For the task `text-classification`, this returns `'facebook/bart-large-mnli'`,
    for `translation` it returns `'t5-base`.
  prefs: []
  type: TYPE_NORMAL
- en: 'How do we convert this to a tool that the agent can leverage? All tools depend
    on the superclass `Tool` that holds the main attributes necessary. We’ll create
    a class that inherits from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'This class has a few needs:'
  prefs: []
  type: TYPE_NORMAL
- en: An attribute `name`, which corresponds to the name of the tool itself. To be
    in tune with other tools which have a performative name, we’ll name it `model_download_counter`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An attribute `description`, which will be used to populate the prompt of the
    agent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inputs` and `outputs` attributes. Defining this will help the python interpreter
    make educated choices about types, and will allow for a gradio-demo to be spawned
    when we push our tool to the Hub. They’re both a list of expected values, which
    can be `text`, `image`, or `audio`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `__call__` method which contains the inference code. This is the code we’ve
    played with above!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s what our class looks like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have our tool handy. Save it in a file and import it from your main
    script. Let’s name this file `model_downloads.py`, so the resulting import code
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to let others benefit from it and for simpler initialization, we recommend
    pushing it to the Hub under your namespace. To do so, just call `push_to_hub`
    on the `tool` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: You now have your code on the Hub! Let’s take a look at the final step, which
    is to have the agent use it.
  prefs: []
  type: TYPE_NORMAL
- en: Having the agent use the tool
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We now have our tool that lives on the Hub which can be instantiated as such
    (change the user name for your tool):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to use it in the agent, simply pass it in the `additional_tools` parameter
    of the agent initialization method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'which outputs the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: and generates the following audio.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Audio** |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: <https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/transformers/damo.wav>
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the LLM, some are quite brittle and require very exact prompts
    in order to work well. Having a well-defined name and description of the tool
    is paramount to having it be leveraged by the agent.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing existing tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Replacing existing tools can be done simply by assigning a new item to the
    agent’s toolbox. Here’s how one would do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Beware when replacing tools with others! This will also adjust the agent’s prompt.
    This can be good if you have a better prompt suited for the task, but it can also
    result in your tool being selected way more than others or for other tools to
    be selected instead of the one you have defined.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging gradio-tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[gradio-tools](https://github.com/freddyaboulton/gradio-tools) is a powerful
    library that allows using Hugging Face Spaces as tools. It supports many existing
    Spaces as well as custom Spaces to be designed with it.'
  prefs: []
  type: TYPE_NORMAL
- en: We offer support for `gradio_tools` by using the `Tool.from_gradio` method.
    For example, we want to take advantage of the `StableDiffusionPromptGeneratorTool`
    tool offered in the `gradio-tools` toolkit so as to improve our prompts and generate
    better images.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first import the tool from `gradio_tools` and instantiate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We pass that instance to the `Tool.from_gradio` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can manage it exactly as we would a usual custom tool. We leverage it
    to improve our prompt `a rabbit wearing a space suit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The model adequately leverages the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Before finally generating the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/562727afc88cc5866a6269fc324460aa.png)'
  prefs: []
  type: TYPE_IMG
- en: gradio-tools requires *textual* inputs and outputs, even when working with different
    modalities. This implementation works with image and audio objects. The two are
    currently incompatible, but will rapidly become compatible as we work to improve
    the support.
  prefs: []
  type: TYPE_NORMAL
- en: Future compatibility with Langchain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We love Langchain and think it has a very compelling suite of tools. In order
    to handle these tools, Langchain requires *textual* inputs and outputs, even when
    working with different modalities. This is often the serialized version (i.e.,
    saved to disk) of the objects.
  prefs: []
  type: TYPE_NORMAL
- en: This difference means that multi-modality isn’t handled between transformers-agents
    and langchain. We aim for this limitation to be resolved in future versions, and
    welcome any help from avid langchain users to help us achieve this compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: We would love to have better support. If you would like to help, please [open
    an issue](https://github.com/huggingface/transformers/issues/new) and share what
    you have in mind.
  prefs: []
  type: TYPE_NORMAL
