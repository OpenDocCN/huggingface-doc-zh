- en: Agents & Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/agent](https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/agent)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Transformers Agents is an experimental API which is subject to change at any
    time. Results returned by the agents can vary as the APIs or underlying models
    are prone to change.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about agents and tools make sure to read the [introductory guide](../transformers_agents).
    This page contains the API docs for the underlying classes.
  prefs: []
  type: TYPE_NORMAL
- en: Agents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We provide three types of agents: [HfAgent](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.HfAgent)
    uses inference endpoints for opensource models, [LocalAgent](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.LocalAgent)
    uses a model of your choice locally and [OpenAiAgent](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.OpenAiAgent)
    uses OpenAI closed models.'
  prefs: []
  type: TYPE_NORMAL
- en: HfAgent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.HfAgent`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agents.py#L588)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`url_endpoint` (`str`) — The name of the url endpoint to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. If unset, will use the token generated when running `huggingface-cli
    login` (stored in `~/.huggingface`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chat_prompt_template` (`str`, *optional*) — Pass along your own prompt if
    you want to override the default template for the `chat` method. Can be the actual
    prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in
    a file named `chat_prompt_template.txt` in this repo in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_prompt_template` (`str`, *optional*) — Pass along your own prompt if you
    want to override the default template for the `run` method. Can be the actual
    prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in
    a file named `run_prompt_template.txt` in this repo in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`additional_tools` ([Tool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool),
    list of tools or dictionary with tool values, *optional*) — Any additional tools
    to include on top of the default ones. If you pass along a tool with the same
    name as one of the default tools, that default tool will be overridden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agent that uses an inference endpoint to generate code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: LocalAgent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.LocalAgent`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agents.py#L659)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model` ([PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel))
    — The model to use for the agent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tokenizer` ([PreTrainedTokenizer](/docs/transformers/v4.37.2/en/main_classes/tokenizer#transformers.PreTrainedTokenizer))
    — The tokenizer to use for the agent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chat_prompt_template` (`str`, *optional*) — Pass along your own prompt if
    you want to override the default template for the `chat` method. Can be the actual
    prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in
    a file named `chat_prompt_template.txt` in this repo in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_prompt_template` (`str`, *optional*) — Pass along your own prompt if you
    want to override the default template for the `run` method. Can be the actual
    prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in
    a file named `run_prompt_template.txt` in this repo in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`additional_tools` ([Tool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool),
    list of tools or dictionary with tool values, *optional*) — Any additional tools
    to include on top of the default ones. If you pass along a tool with the same
    name as one of the default tools, that default tool will be overridden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agent that uses a local model and tokenizer to generate code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '#### `from_pretrained`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agents.py#L704)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pretrained_model_name_or_path` (`str` or `os.PathLike`) — The name of a repo
    on the Hub or a local path to a folder containing both model and tokenizer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`, *optional*) — Keyword arguments passed along to
    [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convenience method to build a `LocalAgent` from a pretrained checkpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: OpenAiAgent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.OpenAiAgent`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agents.py#L364)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model` (`str`, *optional*, defaults to `"text-davinci-003"`) — The name of
    the OpenAI model to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api_key` (`str`, *optional*) — The API key to use. If unset, will look for
    the environment variable `"OPENAI_API_KEY"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chat_prompt_template` (`str`, *optional*) — Pass along your own prompt if
    you want to override the default template for the `chat` method. Can be the actual
    prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in
    a file named `chat_prompt_template.txt` in this repo in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_prompt_template` (`str`, *optional*) — Pass along your own prompt if you
    want to override the default template for the `run` method. Can be the actual
    prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in
    a file named `run_prompt_template.txt` in this repo in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`additional_tools` ([Tool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool),
    list of tools or dictionary with tool values, *optional*) — Any additional tools
    to include on top of the default ones. If you pass along a tool with the same
    name as one of the default tools, that default tool will be overridden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agent that uses the openai API to generate code.
  prefs: []
  type: TYPE_NORMAL
- en: The openAI models are used in generation mode, so even for the `chat()` API,
    it’s better to use models like `"text-davinci-003"` over the chat-GPT variant.
    Proper support for chat-GPT models will come in a next version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: AzureOpenAiAgent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.AzureOpenAiAgent`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agents.py#L462)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`deployment_id` (`str`) — The name of the deployed Azure openAI model to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api_key` (`str`, *optional*) — The API key to use. If unset, will look for
    the environment variable `"AZURE_OPENAI_API_KEY"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resource_name` (`str`, *optional*) — The name of your Azure OpenAI Resource.
    If unset, will look for the environment variable `"AZURE_OPENAI_RESOURCE_NAME"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api_version` (`str`, *optional*, default to `"2022-12-01"`) — The API version
    to use for this agent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_chat_mode` (`bool`, *optional*) — Whether you are using a completion model
    or a chat model (see note above, chat models won’t be as efficient). Will default
    to `gpt` being in the `deployment_id` or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chat_prompt_template` (`str`, *optional*) — Pass along your own prompt if
    you want to override the default template for the `chat` method. Can be the actual
    prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in
    a file named `chat_prompt_template.txt` in this repo in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_prompt_template` (`str`, *optional*) — Pass along your own prompt if you
    want to override the default template for the `run` method. Can be the actual
    prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in
    a file named `run_prompt_template.txt` in this repo in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`additional_tools` ([Tool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool),
    list of tools or dictionary with tool values, *optional*) — Any additional tools
    to include on top of the default ones. If you pass along a tool with the same
    name as one of the default tools, that default tool will be overridden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agent that uses Azure OpenAI to generate code. See the [official documentation](https://learn.microsoft.com/en-us/azure/cognitive-services/openai/)
    to learn how to deploy an openAI model on Azure
  prefs: []
  type: TYPE_NORMAL
- en: The openAI models are used in generation mode, so even for the `chat()` API,
    it’s better to use models like `"text-davinci-003"` over the chat-GPT variant.
    Proper support for chat-GPT models will come in a next version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.Agent`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agents.py#L196)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`chat_prompt_template` (`str`, *optional*) — Pass along your own prompt if
    you want to override the default template for the `chat` method. Can be the actual
    prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in
    a file named `chat_prompt_template.txt` in this repo in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`run_prompt_template` (`str`, *optional*) — Pass along your own prompt if you
    want to override the default template for the `run` method. Can be the actual
    prompt template or a repo ID (on the Hugging Face Hub). The prompt should be in
    a file named `run_prompt_template.txt` in this repo in this case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`additional_tools` ([Tool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool),
    list of tools or dictionary with tool values, *optional*) — Any additional tools
    to include on top of the default ones. If you pass along a tool with the same
    name as one of the default tools, that default tool will be overridden.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base class for all agents which contains the main API methods.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `chat`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agents.py#L268)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`task` (`str`) — The task to perform'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_code` (`bool`, *optional*, defaults to `False`) — Whether to just return
    code and not evaluate it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remote` (`bool`, *optional*, defaults to `False`) — Whether or not to use
    remote tools (inference endpoints) instead of local ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (additional keyword arguments, *optional*) — Any keyword argument
    to send to the agent when evaluating the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sends a new request to the agent in a chat. Will use the previous ones in its
    history.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '#### `run`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agents.py#L318)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`task` (`str`) — The task to perform'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_code` (`bool`, *optional*, defaults to `False`) — Whether to just return
    code and not evaluate it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remote` (`bool`, *optional*, defaults to `False`) — Whether or not to use
    remote tools (inference endpoints) instead of local ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (additional keyword arguments, *optional*) — Any keyword argument
    to send to the agent when evaluating the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sends a request to the agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '#### `prepare_for_new_chat`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agents.py#L310)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Clears the history of prior calls to [chat()](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Agent.chat).
  prefs: []
  type: TYPE_NORMAL
- en: Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: load_tool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### `transformers.load_tool`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L643)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`task_or_repo_id` (`str`) — The task for which to load the tool or a repo ID
    of a tool on the Hub. Tasks implemented in Transformers are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"document-question-answering"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"image-captioning"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"image-question-answering"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"image-segmentation"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"speech-to-text"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"summarization"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"text-classification"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"text-question-answering"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"text-to-speech"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"translation"`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_repo_id` (`str`, *optional*) — Use this argument to use a different
    model than the default one for the tool you selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remote` (`bool`, *optional*, defaults to `False`) — Whether to use your tool
    by downloading the model or (if it is available) with an inference endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — The token to identify you on hf.co. If unset,
    will use the token generated when running `huggingface-cli login` (stored in `~/.huggingface`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (additional keyword arguments, *optional*) — Additional keyword arguments
    that will be split in two: all arguments relevant to the Hub (such as `cache_dir`,
    `revision`, `subfolder`) will be used when downloading the files for your tool,
    and the others will be passed along to its init.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main function to quickly load a tool, be it on the Hub or in the Transformers
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Tool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.Tool`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L81)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'A base class for the functions used by the agent. Subclass this and implement
    the `__call__` method as well as the following class attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`description` (`str`) — A short description of what your tool does, the inputs
    it expects and the output(s) it will return. For instance ‘This is a tool that
    downloads a file from a `url`. It takes the `url` as input, and returns the text
    contained in the file’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` (`str`) — A performative name that will be used for your tool in the
    prompt to the agent. For instance `"text-classifier"` or `"image_generator"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inputs` (`List[str]`) — The list of modalities expected for the inputs (in
    the same order as in the call). Modalitiies should be `"text"`, `"image"` or `"audio"`.
    This is only used by `launch_gradio_demo` or to make a nice space from your tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outputs` (`List[str]`) — The list of modalities returned but the tool (in
    the same order as the return of the call method). Modalitiies should be `"text"`,
    `"image"` or `"audio"`. This is only used by `launch_gradio_demo` or to make a
    nice space from your tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also override the method [setup()](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool.setup)
    if your tool as an expensive operation to perform before being usable (such as
    loading a model). [setup()](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool.setup)
    will be called the first time you use your tool, but not at instantiation.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_gradio`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L330)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Creates a [Tool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool)
    from a gradio tool.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L176)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The name of the repo on the Hub where your tool is defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_repo_id` (`str`, *optional*) — If your tool uses a model and you want
    to use a different model than the default, you can pass a second repo ID or an
    endpoint url to this argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — The token to identify you on hf.co. If unset,
    will use the token generated when running `huggingface-cli login` (stored in `~/.huggingface`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remote` (`bool`, *optional*, defaults to `False`) — Whether to use your tool
    by downloading the model or (if it is available) with an inference endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (additional keyword arguments, *optional*) — Additional keyword arguments
    that will be split in two: all arguments relevant to the Hub (such as `cache_dir`,
    `revision`, `subfolder`) will be used when downloading the files for your tool,
    and the others will be passed along to its init.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loads a tool defined on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `push_to_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L286)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The name of the repository you want to push your tool to.
    It should contain your organization name when pushing to a given organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*, defaults to `"Upload tool"`) — Message
    to commit while pushing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*) — Whether or not the repository created should
    be private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. If unset, will use the token generated when running `huggingface-cli
    login` (stored in `~/.huggingface`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`bool`, *optional*, defaults to `False`) — Whether or not to create
    a PR with the uploaded files or directly commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload the tool to the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `save`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L122)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`output_dir` (`str`) — The folder in which you want to save your tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Saves the relevant code files for your tool so it can be pushed to the Hub.
    This will copy the code of your tool in `output_dir` as well as autogenerate:'
  prefs: []
  type: TYPE_NORMAL
- en: a config file named `tool_config.json`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: an `app.py` file so that your tool can be converted to a space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a `requirements.txt` containing the names of the module used by your tool (as
    detected when inspecting its code)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should only use this method to save tools that are defined in a separate
    module (not `__main__`).
  prefs: []
  type: TYPE_NORMAL
- en: '#### `setup`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L115)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Overwrite this method here for any operation that is expensive and needs to
    be executed before you start using your tool. Such as loading a big model.
  prefs: []
  type: TYPE_NORMAL
- en: PipelineTool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.PipelineTool`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L433)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model` (`str` or [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel),
    *optional*) — The name of the checkpoint to use for the model, or the instantiated
    model. If unset, will default to the value of the class attribute `default_checkpoint`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pre_processor` (`str` or `Any`, *optional*) — The name of the checkpoint to
    use for the pre-processor, or the instantiated pre-processor (can be a tokenizer,
    an image processor, a feature extractor or a processor). Will default to the value
    of `model` if unset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post_processor` (`str` or `Any`, *optional*) — The name of the checkpoint
    to use for the post-processor, or the instantiated pre-processor (can be a tokenizer,
    an image processor, a feature extractor or a processor). Will default to the `pre_processor`
    if unset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`device` (`int`, `str` or `torch.device`, *optional*) — The device on which
    to execute the model. Will default to any accelerator available (GPU, MPS etc…),
    the CPU otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`device_map` (`str` or `dict`, *optional*) — If passed along, will be used
    to instantiate the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_kwargs` (`dict`, *optional*) — Any keyword argument to send to the model
    instantiation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. If unset, will use the token generated when running `huggingface-cli
    login` (stored in `~/.huggingface`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hub_kwargs` (additional keyword arguments, *optional*) — Any additional keyword
    argument to send to the methods that will load the data from the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A [Tool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool)
    tailored towards Transformer models. On top of the class attributes of the base
    class [Tool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool),
    you will need to specify:'
  prefs: []
  type: TYPE_NORMAL
- en: '`model_class` (`type`) — The class to use to load the model in this tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_checkpoint` (`str`) — The default checkpoint that should be used when
    the user doesn’t specify one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pre_processor_class` (`type`, *optional*, defaults to [AutoProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoProcessor))
    — The class to use to load the pre-processor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post_processor_class` (`type`, *optional*, defaults to [AutoProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoProcessor))
    — The class to use to load the post-processor (when different from the pre-processor).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `decode`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L552)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Uses the `post_processor` to decode the model output.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `encode`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L539)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Uses the `pre_processor` to prepare the inputs for the `model`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L545)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Sends the inputs through the `model`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `setup`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L513)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Instantiates the `pre_processor`, `model` and `post_processor` if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: RemoteTool
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.RemoteTool`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L346)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`endpoint_url` (`str`, *optional*) — The url of the endpoint to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. If unset, will use the token generated when running `huggingface-cli
    login` (stored in `~/.huggingface`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tool_class` (`type`, *optional*) — The corresponding `tool_class` if this
    is a remote version of an existing tool. Will help determine when the output should
    be converted to another type (like images).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A [Tool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.Tool)
    that will make requests to an inference endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `extract_outputs`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L409)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: You can override this method in your custom class of [RemoteTool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.RemoteTool)
    to apply some custom post-processing of the outputs of the endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `prepare_inputs`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L366)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Prepare the inputs received for the HTTP client sending data to the endpoint.
    Positional arguments will be matched with the signature of the `tool_class` if
    it was provided at instantation. Images will be encoded into bytes.
  prefs: []
  type: TYPE_NORMAL
- en: You can override this method in your custom class of [RemoteTool](/docs/transformers/v4.37.2/en/main_classes/agent#transformers.RemoteTool).
  prefs: []
  type: TYPE_NORMAL
- en: launch_gradio_demo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### `transformers.launch_gradio_demo`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/base.py#L573)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_class` (`type`) — The class of the tool for which to launch the demo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launches a gradio demo for a tool. The corresponding tool class needs to properly
    implement the class attributes `inputs` and `outputs`.
  prefs: []
  type: TYPE_NORMAL
- en: Agent Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Agents can handle any type of object in-between tools; tools, being completely
    multimodal, can accept and return text, image, audio, video, among other types.
    In order to increase compatibility between tools, as well as to correctly render
    these returns in ipython (jupyter, colab, ipython notebooks, …), we implement
    wrapper classes around these types.
  prefs: []
  type: TYPE_NORMAL
- en: The wrapped objects should continue behaving as initially; a text object should
    still behave as a string, an image object should still behave as a `PIL.Image`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These types have three specific purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Calling `to_raw` on the type should return the underlying object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Calling `to_string` on the type should return the object as a string: that
    can be the string in case of an `AgentText` but will be the path of the serialized
    version of the object in other instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying it in an ipython kernel should display the object correctly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AgentText
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.tools.agent_types.AgentText`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agent_types.py#L71)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Text type returned by the agent. Behaves as a string.
  prefs: []
  type: TYPE_NORMAL
- en: AgentImage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.tools.agent_types.AgentImage`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agent_types.py#L83)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Image type returned by the agent. Behaves as a PIL.Image.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_raw`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agent_types.py#L115)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Returns the “raw” version of that object. In the case of an AgentImage, it is
    a PIL.Image.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agent_types.py#L126)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Returns the stringified version of that object. In the case of an AgentImage,
    it is a path to the serialized version of the image.
  prefs: []
  type: TYPE_NORMAL
- en: AgentAudio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.tools.agent_types.AgentAudio`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agent_types.py#L155)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Audio type returned by the agent.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_raw`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agent_types.py#L186)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Returns the “raw” version of that object. It is a `torch.Tensor` object.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/tools/agent_types.py#L198)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Returns the stringified version of that object. In the case of an AgentAudio,
    it is a path to the serialized version of the audio.
  prefs: []
  type: TYPE_NORMAL
