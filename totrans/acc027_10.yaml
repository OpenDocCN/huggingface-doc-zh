- en: Troubleshooting guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/accelerate/basic_tutorials/troubleshooting](https://huggingface.co/docs/accelerate/basic_tutorials/troubleshooting)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: This guide aims to provide you the tools and knowledge required to navigate
    some common issues. However, as 🤗 Accelerate continuously evolves and the use
    cases and setups are diverse, you might encounter an issue not covered in this
    guide. If the suggestions listed in this guide do not cover your such situation,
    please refer to the final section of the guide, [Asking for Help](#ask-for-help),
    to learn where to find help with your specific issue.
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When facing an error, logging can help narrow down where it is coming from.
    In a distributed setup with multiple processes, logging can be a challenge, but
    🤗 Accelerate provides a utility that streamlines the logging process and ensures
    that logs are synchronized and managed effectively across the distributed setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'To troubleshoot an issue, use `accelerate.logging` instead of the standard
    Python `logging` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the log level (`INFO`, `DEBUG`, `WARNING`, `ERROR`, `CRITICAL`), export
    it as the `ACCELERATE_LOG_LEVEL` environment, or pass as `log_level` to `get_logger`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By default, the log is called on main processes only. To call it on all processes,
    pass `main_process_only=False`. If a log should be called on all processes and
    in order, also pass `in_order=True`.
  prefs: []
  type: TYPE_NORMAL
- en: Hanging code and timeout errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mismatched tensor shapes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your code seems to be hanging for a significant amount time on a distributed
    setup, a common cause is mismatched shapes of tensors on different devices.
  prefs: []
  type: TYPE_NORMAL
- en: When running scripts in a distributed fashion, functions such as [Accelerator.gather()](/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator.gather)
    and [Accelerator.reduce()](/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator.reduce)
    are necessary to grab tensors across devices to perform operations on them collectively.
    These (and other) functions rely on `torch.distributed` performing a `gather`
    operation, which requires that tensors have the **exact same shape** across all
    processes. When the tensor shapes don’t match, you will experience handing code,
    and eventually hit a timeout exception.
  prefs: []
  type: TYPE_NORMAL
- en: If you suspect this to be the case, use Accelerate’s operational debug mode
    to immediately catch the issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The recommended way to enable Accelerate’s operational debug mode is during
    `accelerate config` setup. Alternative ways to enable debug mode are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the CLI:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As an environmental variable (which avoids the need for `accelerate launch`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Manually changing the `config.yaml` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you enable the debug mode, you should get a similar traceback that points
    to the tensor shape mismatch issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Early stopping leads to hanging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When doing early stopping in distributed training, if each process has a specific
    stopping condition (e.g. validation loss), it may not be synchronized across all
    of them. As a result, a break can happen on process 0 but not on process 1. This
    will cause the code to hang indefinitely until a timeout occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have early stopping conditionals, use `set_breakpoint` and `check_breakpoint`
    methods to make sure all the processes are ended correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Hanging on low kernel versions on Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a known issue. On Linux with kernel version < 5.5, hanging processes
    have been reported. To avoid encountering this problem, we recommend upgrading
    your system to a later kernel version.
  prefs: []
  type: TYPE_NORMAL
- en: CUDA out of memory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most frustrating errors when it comes to running training scripts
    is hitting “CUDA Out-of-Memory”, as the entire script needs to be restarted, progress
    is lost, and typically a developer would want to simply start their script and
    let it run.
  prefs: []
  type: TYPE_NORMAL
- en: To address this problem, `Accelerate` offers a utility `find_executable_batch_size`
    that is heavily based on [toma](https://github.com/BlackHC/toma). The utility
    retries code that fails due to OOM (out-of-memory) conditions and lowers batch
    sizes automatically.
  prefs: []
  type: TYPE_NORMAL
- en: find_executable_batch_size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This algorithm operates with exponential decay, decreasing the batch size in
    half after each failed run on some training script. To use it, restructure your
    training function to include an inner function that includes this wrapper, and
    build your dataloaders inside it. At a minimum, this could look like 4 new lines
    of code.
  prefs: []
  type: TYPE_NORMAL
- en: The inner function *must* take in the batch size as the first parameter, but
    we do not pass one to it when called. The wrapper handles this for us.
  prefs: []
  type: TYPE_NORMAL
- en: It should also be noted that anything which will consume CUDA memory and passed
    to the `accelerator` **must** be declared inside the inner function, such as models
    and optimizers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To find out more, check the documentation [here](../package_reference/utilities#accelerate.find_executable_batch_size).
  prefs: []
  type: TYPE_NORMAL
- en: Non-reproducible results between device setups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have changed the device setup and are observing different model performance,
    this is likely due to the fact that you have not updated your script when moving
    from one setup to another. The same script with the same batch size across TPU,
    multi-GPU, and single-GPU with Accelerate will have different results.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you were previously training on a single GPU with a batch size
    of 16, when moving to two GPU setup, you need to change the batch size to 8 to
    have the same effective batch size. This is because when training with Accelerate,
    the batch size passed to the dataloader is the **batch size per GPU**.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure you can reproduce the results between the setups, make sure to
    use the same seed, adjust the batch size accordingly, consider scaling the learning
    rate.
  prefs: []
  type: TYPE_NORMAL
- en: For more details and a quick reference for batch sizes, check out the [Comparing
    performance between different device setups](../concept_guides/performance) guide.
  prefs: []
  type: TYPE_NORMAL
- en: Performance issues on different GPUs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your multi-GPU setup consists of different GPUs, you may hit some limitations:'
  prefs: []
  type: TYPE_NORMAL
- en: There may be an imbalance in GPU memory between the GPUs. In this case, the
    GPU with smaller memory will limit the batch size or the size of the model that
    can be loaded onto the GPUs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using GPUs with different performance profiles, the performance will
    be driven by the slowest GPU that you are using as the other GPUs will have to
    wait for it to complete its workload.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vastly different GPUs within the same setup can lead to performance bottlenecks.
  prefs: []
  type: TYPE_NORMAL
- en: Ask for help
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the above troubleshooting tools and advice did not help you resolve your
    issue, reach out for help to the community and the team.
  prefs: []
  type: TYPE_NORMAL
- en: Forums
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ask for help on the Hugging Face forums - post your question in the [🤗Accelerate
    category](https://discuss.huggingface.co/c/accelerate/18) Make sure to write a
    descriptive post with relevant context about your setup and reproducible code
    to maximize the likelihood that your problem is solved!
  prefs: []
  type: TYPE_NORMAL
- en: Discord
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Post a question on [Discord](http://hf.co/join/discord), and let the team and
    the community help you.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create an Issue on the 🤗 Accelerate [GitHub repository](https://github.com/huggingface/accelerate/issues)
    if you suspect to have found a bug related to the library. Include context regarding
    the bug and details about your distributed setup to help us better figure out
    what’s wrong and how we can fix it.
  prefs: []
  type: TYPE_NORMAL
