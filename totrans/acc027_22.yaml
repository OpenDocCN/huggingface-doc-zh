- en: Accelerated PyTorch Training on Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/accelerate/usage_guides/mps](https://huggingface.co/docs/accelerate/usage_guides/mps)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: With PyTorch v1.12 release, developers and researchers can take advantage of
    Apple silicon GPUs for significantly faster model training. This unlocks the ability
    to perform machine learning workflows like prototyping and fine-tuning locally,
    right on Mac. Appleâ€™s Metal Performance Shaders (MPS) as a backend for PyTorch
    enables this and can be used via the new `"mps"` device. This will map computational
    graphs and primitives on the MPS Graph framework and tuned kernels provided by
    MPS. For more information please refer official documents [Introducing Accelerated
    PyTorch Training on Mac](https://pytorch.org/blog/introducing-accelerated-pytorch-training-on-mac/)
    and [MPS BACKEND](https://pytorch.org/docs/stable/notes/mps.html).
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Training and Inference using Apple Silicon Chips
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enables users to train larger networks or batch sizes locally
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduces data retrieval latency and provides the GPU with direct access to the
    full memory store due to unified memory architecture. Therefore, improving end-to-end
    performance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduces costs associated with cloud-based development or the need for additional
    local GPUs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Pre-requisites**: To install torch with mps support, please follow this nice
    medium article [GPU-Acceleration Comes to PyTorch on M1 Macs](https://medium.com/towards-data-science/gpu-acceleration-comes-to-pytorch-on-m1-macs-195c399efcc1).'
  prefs: []
  type: TYPE_NORMAL
- en: How it works out of the box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is enabled by default on MacOs machines with MPS enabled Apple Silicon GPUs.
    To disable it, pass `--cpu` flag to `accelerate launch` command or answer the
    corresponding question when answering the `accelerate config` questionnaire.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can directly run the following script to test it out on MPS enabled Apple
    Silicon machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A few caveats to be aware of
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We strongly recommend to install PyTorch >= 1.13 (nightly version at the time
    of writing) on your MacOS machine. It has major fixes related to model correctness
    and performance improvements for transformer based models. Please refer to [https://github.com/pytorch/pytorch/issues/82707](https://github.com/pytorch/pytorch/issues/82707)
    for more details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Distributed setups `gloo` and `nccl` are not working with `mps` device. This
    means that currently only single GPU of `mps` device type can be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, please, remember that, ðŸ¤— `Accelerate` only integrates MPS backend,
    therefore if you have any problems or questions with regards to MPS backend usage,
    please, file an issue with [PyTorch GitHub](https://github.com/pytorch/pytorch/issues).
  prefs: []
  type: TYPE_NORMAL
