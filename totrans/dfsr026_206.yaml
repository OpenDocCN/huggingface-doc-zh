- en: ScoreSdeVeScheduler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/diffusers/api/schedulers/score_sde_ve](https://huggingface.co/docs/diffusers/api/schedulers/score_sde_ve)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/107.2b40e659.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Docstring.93f6f462.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
  prefs: []
  type: TYPE_NORMAL
- en: '`ScoreSdeVeScheduler` is a variance exploding stochastic differential equation
    (SDE) scheduler. It was introduced in the [Score-Based Generative Modeling through
    Stochastic Differential Equations](https://huggingface.co/papers/2011.13456) paper
    by Yang Song, Jascha Sohl-Dickstein, Diederik P. Kingma, Abhishek Kumar, Stefano
    Ermon, Ben Poole.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating noise from data is easy; creating data from noise is generative modeling.
    We present a stochastic differential equation (SDE) that smoothly transforms a
    complex data distribution to a known prior distribution by slowly injecting noise,
    and a corresponding reverse-time SDE that transforms the prior distribution back
    into the data distribution by slowly removing the noise. Crucially, the reverse-time
    SDE depends only on the time-dependent gradient field (\aka, score) of the perturbed
    data distribution. By leveraging advances in score-based generative modeling,
    we can accurately estimate these scores with neural networks, and use numerical
    SDE solvers to generate samples. We show that this framework encapsulates previous
    approaches in score-based generative modeling and diffusion probabilistic modeling,
    allowing for new sampling procedures and new modeling capabilities. In particular,
    we introduce a predictor-corrector framework to correct errors in the evolution
    of the discretized reverse-time SDE. We also derive an equivalent neural ODE that
    samples from the same distribution as the SDE, but additionally enables exact
    likelihood computation, and improved sampling efficiency. In addition, we provide
    a new way to solve inverse problems with score-based models, as demonstrated with
    experiments on class-conditional generation, image inpainting, and colorization.
    Combined with multiple architectural improvements, we achieve record-breaking
    performance for unconditional image generation on CIFAR-10 with an Inception score
    of 9.89 and FID of 2.20, a competitive likelihood of 2.99 bits/dim, and demonstrate
    high fidelity generation of 1024 x 1024 images for the first time from a score-based
    generative model.*'
  prefs: []
  type: TYPE_NORMAL
- en: ScoreSdeVeScheduler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.ScoreSdeVeScheduler'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_sde_ve.py#L46)'
  prefs: []
  type: TYPE_NORMAL
- en: '( num_train_timesteps: int = 2000 snr: float = 0.15 sigma_min: float = 0.01
    sigma_max: float = 1348.0 sampling_eps: float = 1e-05 correct_steps: int = 1 )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**num_train_timesteps** (`int`, defaults to 1000) — The number of diffusion
    steps to train the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**snr** (`float`, defaults to 0.15) — A coefficient weighting the step from
    the `model_output` sample (from the network) to the random noise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sigma_min** (`float`, defaults to 0.01) — The initial noise scale for the
    sigma sequence in the sampling procedure. The minimum sigma should mirror the
    distribution of the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sigma_max** (`float`, defaults to 1348.0) — The maximum value used for the
    range of continuous timesteps passed into the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sampling_eps** (`float`, defaults to 1e-5) — The end value of sampling where
    timesteps decrease progressively from 1 to epsilon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**correct_steps** (`int`, defaults to 1) — The number of correction steps performed
    on a produced sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ScoreSdeVeScheduler` is a variance exploding stochastic differential equation
    (SDE) scheduler.'
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [SchedulerMixin](/docs/diffusers/v0.26.3/en/api/schedulers/overview#diffusers.SchedulerMixin)
    and [ConfigMixin](/docs/diffusers/v0.26.3/en/api/configuration#diffusers.ConfigMixin).
    Check the superclass documentation for the generic methods the library implements
    for all schedulers such as loading and saving.
  prefs: []
  type: TYPE_NORMAL
- en: '#### scale_model_input'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_sde_ve.py#L89)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample: FloatTensor timestep: Optional = None ) → `torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — The input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestep** (`int`, *optional*) — The current timestep in the diffusion chain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.FloatTensor`'
  prefs: []
  type: TYPE_NORMAL
- en: A scaled input sample.
  prefs: []
  type: TYPE_NORMAL
- en: Ensures interchangeability with schedulers that need to scale the denoising
    model input depending on the current timestep.
  prefs: []
  type: TYPE_NORMAL
- en: '#### set_sigmas'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_sde_ve.py#L125)'
  prefs: []
  type: TYPE_NORMAL
- en: '( num_inference_steps: int sigma_min: float = None sigma_max: float = None
    sampling_eps: float = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**num_inference_steps** (`int`) — The number of diffusion steps used when generating
    samples with a pre-trained model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sigma_min** (`float`, optional) — The initial noise scale value (overrides
    value given during scheduler instantiation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sigma_max** (`float`, optional) — The final noise scale value (overrides
    value given during scheduler instantiation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sampling_eps** (`float`, optional) — The final timestep value (overrides
    value given during scheduler instantiation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets the noise scales used for the diffusion chain (to be run before inference).
    The sigmas control the weight of the `drift` and `diffusion` components of the
    sample update.
  prefs: []
  type: TYPE_NORMAL
- en: '#### set_timesteps'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_sde_ve.py#L106)'
  prefs: []
  type: TYPE_NORMAL
- en: '( num_inference_steps: int sampling_eps: float = None device: Union = None
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**num_inference_steps** (`int`) — The number of diffusion steps used when generating
    samples with a pre-trained model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sampling_eps** (`float`, *optional*) — The final timestep value (overrides
    value given during scheduler instantiation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**device** (`str` or `torch.device`, *optional*) — The device to which the
    timesteps should be moved to. If `None`, the timesteps are not moved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets the continuous timesteps used for the diffusion chain (to be run before
    inference).
  prefs: []
  type: TYPE_NORMAL
- en: '#### step_correct'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_sde_ve.py#L228)'
  prefs: []
  type: TYPE_NORMAL
- en: '( model_output: FloatTensor sample: FloatTensor generator: Optional = None
    return_dict: bool = True ) → [SdeVeOutput](/docs/diffusers/v0.26.3/en/api/schedulers/score_sde_ve#diffusers.schedulers.scheduling_sde_ve.SdeVeOutput)
    or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**model_output** (`torch.FloatTensor`) — The direct output from learned diffusion
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**generator** (`torch.Generator`, *optional*) — A random number generator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a [SdeVeOutput](/docs/diffusers/v0.26.3/en/api/schedulers/score_sde_ve#diffusers.schedulers.scheduling_sde_ve.SdeVeOutput)
    or `tuple`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SdeVeOutput](/docs/diffusers/v0.26.3/en/api/schedulers/score_sde_ve#diffusers.schedulers.scheduling_sde_ve.SdeVeOutput)
    or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If return_dict is `True`, [SdeVeOutput](/docs/diffusers/v0.26.3/en/api/schedulers/score_sde_ve#diffusers.schedulers.scheduling_sde_ve.SdeVeOutput)
    is returned, otherwise a tuple is returned where the first element is the sample
    tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Correct the predicted sample based on the `model_output` of the network. This
    is often run repeatedly after making the prediction for the previous timestep.
  prefs: []
  type: TYPE_NORMAL
- en: '#### step_pred'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_sde_ve.py#L160)'
  prefs: []
  type: TYPE_NORMAL
- en: '( model_output: FloatTensor timestep: int sample: FloatTensor generator: Optional
    = None return_dict: bool = True ) → [SdeVeOutput](/docs/diffusers/v0.26.3/en/api/schedulers/score_sde_ve#diffusers.schedulers.scheduling_sde_ve.SdeVeOutput)
    or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**model_output** (`torch.FloatTensor`) — The direct output from learned diffusion
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestep** (`int`) — The current discrete timestep in the diffusion chain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — A current instance of a sample created by
    the diffusion process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**generator** (`torch.Generator`, *optional*) — A random number generator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a [SdeVeOutput](/docs/diffusers/v0.26.3/en/api/schedulers/score_sde_ve#diffusers.schedulers.scheduling_sde_ve.SdeVeOutput)
    or `tuple`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[SdeVeOutput](/docs/diffusers/v0.26.3/en/api/schedulers/score_sde_ve#diffusers.schedulers.scheduling_sde_ve.SdeVeOutput)
    or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If return_dict is `True`, [SdeVeOutput](/docs/diffusers/v0.26.3/en/api/schedulers/score_sde_ve#diffusers.schedulers.scheduling_sde_ve.SdeVeOutput)
    is returned, otherwise a tuple is returned where the first element is the sample
    tensor.
  prefs: []
  type: TYPE_NORMAL
- en: Predict the sample from the previous timestep by reversing the SDE. This function
    propagates the diffusion process from the learned model outputs (most often the
    predicted noise).
  prefs: []
  type: TYPE_NORMAL
- en: SdeVeOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.schedulers.scheduling_sde_ve.SdeVeOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/schedulers/scheduling_sde_ve.py#L29)'
  prefs: []
  type: TYPE_NORMAL
- en: '( prev_sample: FloatTensor prev_sample_mean: FloatTensor )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**prev_sample** (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)` for images) — Computed sample `(x_{t-1})` of previous timestep. `prev_sample`
    should be used as next model input in the denoising loop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**prev_sample_mean** (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)` for images) — Mean averaged `prev_sample` over previous timesteps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output class for the scheduler’s `step` function output.
  prefs: []
  type: TYPE_NORMAL
