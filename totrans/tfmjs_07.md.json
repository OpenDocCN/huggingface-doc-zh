["```py\n<main class=\"container\">\n  <label class=\"custom-file-upload\">\n    <input id=\"file-upload\" type=\"file\" accept=\"image/*\" />\n    <img class=\"upload-icon\" src=\"https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/upload-icon.png\" />\n    Upload image\n  </label>\n  <div id=\"image-container\"></div>\n  <p id=\"status\"></p>\n</main>\n```", "```py\nhtml,\nbody {\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.container {\n    margin: 40px auto;\n    width: max(50vw, 400px);\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.custom-file-upload {\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    gap: 10px;\n    border: 2px solid black;\n    padding: 8px 16px;\n    cursor: pointer;\n    border-radius: 6px;\n}\n\n#file-upload {\n    display: none;\n}\n\n.upload-icon {\n    width: 30px;\n}\n\n#image-container {\n    width: 100%;\n    margin-top: 20px;\n    position: relative;\n}\n\n#image-container>img {\n    width: 100%;\n}\n```", "```py\n<script src=\"./index.js\" type=\"module\"></script>\n```", "```py\nimport { pipeline, env } from \"https://cdn.jsdelivr.net/npm/@xenova/transformers@2.6.0\";\n```", "```py\nenv.allowLocalModels = false;\n```", "```py\nconst fileUpload = document.getElementById(\"file-upload\");\nconst imageContainer = document.getElementById(\"image-container\");\nconst status = document.getElementById(\"status\");\n```", "```py\nstatus.textContent = \"Loading model...\";\n```", "```py\nconst detector = await pipeline(\"object-detection\", \"Xenova/detr-resnet-50\");\n```", "```py\nstatus.textContent = \"Ready\";\n```", "```py\nfileUpload.addEventListener(\"change\", function (e) {\n  const file = e.target.files[0];\n  if (!file) {\n    return;\n  }\n\n  const reader = new FileReader();\n\n  // Set up a callback when the file is loaded\n  reader.onload = function (e2) {\n    imageContainer.innerHTML = \"\";\n    const image = document.createElement(\"img\");\n    image.src = e2.target.result;\n    imageContainer.appendChild(image);\n    // detect(image); // Uncomment this line to run the model\n  };\n  reader.readAsDataURL(file);\n});\n```", "```py\nasync function detect(img) {\n  status.textContent = \"Analysing...\";\n  const output = await detector(img.src, {\n    threshold: 0.5,\n    percentage: true,\n  });\n  status.textContent = \"\";\n  console.log(\"output\", output);\n  // ...\n}\n```", "```py\noutput.forEach(renderBox);\n```", "```py\n// Render a bounding box and label on the image\nfunction renderBox({ box, label }) {\n  const { xmax, xmin, ymax, ymin } = box;\n\n  // Generate a random color for the box\n  const color = \"#\" + Math.floor(Math.random() * 0xffffff).toString(16).padStart(6, 0);\n\n  // Draw the box\n  const boxElement = document.createElement(\"div\");\n  boxElement.className = \"bounding-box\";\n  Object.assign(boxElement.style, {\n    borderColor: color,\n    left: 100 * xmin + \"%\",\n    top: 100 * ymin + \"%\",\n    width: 100 * (xmax - xmin) + \"%\",\n    height: 100 * (ymax - ymin) + \"%\",\n  });\n\n  // Draw the label\n  const labelElement = document.createElement(\"span\");\n  labelElement.textContent = label;\n  labelElement.className = \"bounding-box-label\";\n  labelElement.style.backgroundColor = color;\n\n  boxElement.appendChild(labelElement);\n  imageContainer.appendChild(boxElement);\n}\n```", "```py\n.bounding-box {\n  position: absolute;\n  box-sizing: border-box;\n}\n\n.bounding-box-label {\n  position: absolute;\n  color: white;\n  font-size: 12px;\n}\n```"]