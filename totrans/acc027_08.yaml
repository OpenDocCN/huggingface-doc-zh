- en: Launching your ðŸ¤— Accelerate scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/accelerate/basic_tutorials/launch](https://huggingface.co/docs/accelerate/basic_tutorials/launch)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous tutorial, you were introduced to how to modify your current
    training script to use ðŸ¤— Accelerate. The final version of that code is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: But how do you run this code and have it utilize the special hardware available
    to it?
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you should rewrite the above code into a function, and make it callable
    as a script. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, you need to launch it with `accelerate launch`.
  prefs: []
  type: TYPE_NORMAL
- en: Itâ€™s recommended you run `accelerate config` before using `accelerate launch`
    to configure your environment to your liking. Otherwise ðŸ¤— Accelerate will use
    very basic defaults depending on your system setup.
  prefs: []
  type: TYPE_NORMAL
- en: Using accelerate launch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ðŸ¤— Accelerate has a special CLI command to help you launch your code in your
    system through `accelerate launch`. This command wraps around all of the different
    commands needed to launch your script on various platforms, without you having
    to remember what each of them is.
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with launching scripts in PyTorch yourself such as with
    `torchrun`, you can still do this. It is not required to use `accelerate launch`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can launch your script quickly by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Just put `accelerate launch` at the start of your command, and pass in additional
    arguments and parameters to your script afterward like normal!
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this runs the various torch spawn methods, all of the expected environment
    variables can be modified here as well. For example, here is how to use `accelerate
    launch` with a single GPU:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use `accelerate launch` without performing `accelerate config`
    first, but you may need to manually pass in the right configuration parameters.
    In this case, ðŸ¤— Accelerate will make some hyperparameter decisions for you, e.g.,
    if GPUs are available, it will use all of them by default without the mixed precision.
    Here is how you would use all GPUs and train with mixed precision disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Or by specifying a number of GPUs to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To get more specific you should pass in the needed parameters yourself. For
    instance, here is how you would also launch that same script on two GPUs using
    mixed precision while avoiding all of the warnings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For a complete list of parameters you can pass in, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Even if you are not using ðŸ¤— Accelerate in your code, you can still use the launcher
    for starting your scripts!
  prefs: []
  type: TYPE_NORMAL
- en: 'For a visualization of this difference, that earlier `accelerate launch` on
    multi-gpu would look something like so with `torchrun`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also launch your script utilizing the launch CLI as a python module
    itself, enabling the ability to pass in other python-specific launching behaviors.
    To do so, use `accelerate.commands.launch` instead of `accelerate launch`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to execute the script with any other python flags, you can pass
    them in as well similar to `-m`, such as the below example enabling unbuffered
    stdout and stderr:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can run your code on CPU as well! This is helpful for debugging and testing
    purposes on toy models and datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Why you should always use accelerate config
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Why is it useful to the point you should **always** run `accelerate config`?
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that earlier call to `accelerate launch` as well as `torchrun`? Post
    configuration, to run that script with the needed parts you just need to use `accelerate
    launch` outright, without passing anything else in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Custom Configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As briefly mentioned earlier, `accelerate launch` should be mostly used through
    combining set configurations made with the `accelerate config` command. These
    configs are saved to a `default_config.yaml` file in your cache folder for ðŸ¤— Accelerate.
    This cache folder is located at (with decreasing order of priority):'
  prefs: []
  type: TYPE_NORMAL
- en: The content of your environment variable `HF_HOME` suffixed with `accelerate`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it does not exist, the content of your environment variable `XDG_CACHE_HOME`
    suffixed with `huggingface/accelerate`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this does not exist either, the folder `~/.cache/huggingface/accelerate`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To have multiple configurations, the flag `--config_file` can be passed to the
    `accelerate launch` command paired with the location of the custom yaml.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example yaml may look something like the following for two GPUs on a single
    machine using `fp16` for mixed precision:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Launching a script from the location of that custom yaml file looks like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Multi-node training
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Multi-node training with ðŸ¤—Accelerate is similar to [multi-node training with
    torchrun](https://pytorch.org/tutorials/intermediate/ddp_series_multinode.html).
    The simplest way to launch a multi-node training run is to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy your codebase and data to all nodes. (or place them on a shared filesystem)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup your python packages on all nodes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run `accelerate config` on the main single node first. After specifying the
    number of nodes, you will be asked to specify the rank of each node (this will
    be 0 for the main/master node), along with the IP address and port for the main
    process. This is required for the worker nodes to communicate with the main process.
    Afterwards, you can copy or send this config file across all of your nodes, changing
    the `machine_rank` to 1, 2,3, etc. to avoid having to run the command (or just
    follow their directions directly for launching with `torchrun` as well)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you have done this, you can start your multi-node training run by running
    `accelerate launch` (or `torchrun`) on all nodes.
  prefs: []
  type: TYPE_NORMAL
- en: It is required that the command be ran on all nodes for everything to start,
    not just running it from the main node. You can use something like SLURM or a
    different process executor to wrap around this requirement and call everything
    from a single command.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to use the intranet IP of your main node over the public IP
    for better latency. This is the `192.168.x.x` or the `172.x.x.x` address you see
    when you run `hostname -I` on the main node.
  prefs: []
  type: TYPE_NORMAL
- en: To get a better idea about multi-node training, check out our example for [multi-node
    training with FSDP](https://huggingface.co/blog/ram-efficient-pytorch-fsdp).
  prefs: []
  type: TYPE_NORMAL
