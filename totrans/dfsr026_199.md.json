["```py\n( sigma_min: float = 0.02 sigma_max: float = 100 s_noise: float = 1.007 s_churn: float = 80 s_min: float = 0.05 s_max: float = 50 )\n```", "```py\n( sample: FloatTensor sigma: float generator: Optional = None )\n```", "```py\n( sample: FloatTensor timestep: Optional = None ) \u2192 export const metadata = 'undefined';torch.FloatTensor\n```", "```py\n( num_inference_steps: int device: Union = None )\n```", "```py\n( model_output: FloatTensor sigma_hat: float sigma_prev: float sample_hat: FloatTensor return_dict: bool = True ) \u2192 export const metadata = 'undefined';~schedulers.scheduling_karras_ve.KarrasVESchedulerOutput or tuple\n```", "```py\n( model_output: FloatTensor sigma_hat: float sigma_prev: float sample_hat: FloatTensor sample_prev: FloatTensor derivative: FloatTensor return_dict: bool = True ) \u2192 export const metadata = 'undefined';prev_sample (TODO)\n```", "```py\n( prev_sample: FloatTensor derivative: FloatTensor pred_original_sample: Optional = None )\n```"]