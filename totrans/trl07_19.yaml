- en: Text Environments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本环境
- en: 'Original text: [https://huggingface.co/docs/trl/text_environments](https://huggingface.co/docs/trl/text_environments)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/trl/text_environments](https://huggingface.co/docs/trl/text_environments)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Text environments provide a learning ground for language agents. It allows a
    language model to use tools to accomplish a task such as using a Python interpreter
    to answer math questions or using a search index for trivia questions. Having
    access to tools allows language models to solve tasks that would be very hard
    for the models itself but can be trivial for the appropriate tools. A good example
    is arithmetics of large numbers that become a simple copy-paste task once you
    have access to a calculator.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 文本环境为语言代理提供了一个学习场所。它允许语言模型使用工具来完成任务，比如使用Python解释器回答数学问题或使用搜索索引回答问答问题。有了工具的访问权限，语言模型可以解决对模型本身来说非常困难但对适当工具来说却很简单的任务。一个很好的例子是大数字的算术，在你有了计算器的访问权限后，它变成了一个简单的复制粘贴任务。
- en: '![](../Images/900fbb92ad702f0ec4bb5534868998fb.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/900fbb92ad702f0ec4bb5534868998fb.png)'
- en: Let’s dive into how text environments work and start with tools!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解文本环境的工作，并从工具开始！
- en: Tools
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具
- en: 'One of the core building blocks of text environments are tools that the model
    can use to solve tasks. In general tools can be any Python function that takes
    a string as input and returns string. The `TextEnvironment` offers two options
    for tools: either go with predefined tools from `transformers.Tool` or define
    your own function or class with `__call__` method. Let’s have a look at both!'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 文本环境的核心构建块之一是模型可以使用的工具，以解决任务。一般来说，工具可以是任何以字符串作为输入并返回字符串的Python函数。`TextEnvironment`为工具提供了两个选项：要么使用`transformers.Tool`中预定义的工具，要么定义自己的函数或类，具有`__call__`方法。让我们一起看看两者！
- en: transformers.Tool
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: transformers.Tool
- en: Text environments fully support tools of the class `transformers.Tool`. The
    advantage of building tools in that framework is that they can easily be shared
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 文本环境完全支持`transformers.Tool`类的工具。在该框架中构建工具的优势在于它们可以轻松共享
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These tools are either loaded from the hub or from a local folder. Using the
    tool is as simple as calling them with a text query:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具可以从hub加载，也可以从本地文件夹加载。使用工具就像简单地用文本查询调用它们一样：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that both input and return values are strings to enable easy usage with
    a language model.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '请注意，输入和返回值都是字符串，以便与语言模型轻松使用。 '
- en: Custom Tools
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义工具
- en: 'The following is an example of a tool that adds two integers:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个将两个整数相加的工具示例：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We looked at basic examples such as a calculator but the principle holds for
    more complex tools as well such as a web search tool where you input the query
    and get the search results in return. Now let’s look at how the model can use
    the tools with the call syntax.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过了基本示例，比如计算器，但这个原则也适用于更复杂的工具，比如一个网络搜索工具，你输入查询，然后得到搜索结果。现在让我们看看模型如何使用调用语法来使用工具。
- en: Call syntax
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用语法
- en: 'In order to have a unified way for the model to call a tool we created a simple
    syntax that looks as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让模型以统一的方式调用工具，我们创建了一个简单的语法，如下所示：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are a few special tokens involved so let’s decompose it: First the model
    can signal that it wants to use a tool by emitting the `<request>` token. After
    that we want to know the name of the tool to call which is done by enclosing the
    tool name with `<>` brackets. Once we know which tool to call the tool query follows
    which is in free text form. The `<call>` tokens signifies the end of the query
    and stops the model generation. At this point the model output is parsed and the
    query sent to the tool. The environment appends the tool response to the string
    followed by the `<response>` token to show the end the tool output.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 涉及一些特殊标记，让我们来分解一下：首先，模型可以通过发出`<request>`标记来表示它想要使用一个工具。之后，我们想知道要调用的工具的名称，这通过用`<>`括起工具名称来完成。一旦知道要调用哪个工具，工具查询就会跟随，以自由文本形式呈现。`<call>`标记表示查询的结束，停止模型生成。在这一点上，模型输出被解析，并将查询发送给工具。环境将工具响应附加到字符串后面，接着是`<response>`标记，表示工具输出的结束。
- en: 'Let’s look at the concrete example of the calculator and assume its name is
    `Calculator` (more on how the name of a tool is inferred later):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个具体的例子，假设计算器的名字是`Calculator`（关于如何推断工具名称的更多信息）：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finally, the episode is ended and generation stops when the model generates
    `<submit>` which marks the interaction as completed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当模型生成`<submit>`时，表示交互已完成，剧集结束并停止生成。
- en: Now let’s have a look how we can create a new text environment!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何创建一个新的文本环境！
- en: Create a TextEnvironment
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个TextEnvironment
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s decompose the settings:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解这些设置：
- en: '| Argument | Description |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| :-- | :-- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| `model` | Language model to interact with the environment and generate requests.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `model` | 与环境交互并生成请求的语言模型。 |'
- en: '| `tokenizer` | Tokenizer of language model handling tokenization of strings.
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `tokenizer` | 处理字符串标记化的语言模型分词器。 |'
- en: '| `tools` | `list` of `dict` of tools. If former the name of the tool is inferred
    from class name and otherwise it’s the keys of the dictionary. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `tools` | 工具的`dict`列表。如果是前者，工具的名称将从类名中推断，否则就是字典的键。 |'
- en: '| `reward_fn` | A function that takes a string as input and returns. Can have
    extra arguments that are passed to `.run()` such as ground truth. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `reward_fn` | 以字符串作为输入并返回的函数。可以有额外的参数传递给`.run()`，如真实值。 |'
- en: '| `prompt` | Prompt to prepend to every task. Usually a few examples to demonstrate
    to the model how to use the tools in a few-shot fashion. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `prompt` | 添加到每个任务前的提示。通常是一些示例，向模型演示如何以few-shot方式使用工具。 |'
- en: '| `max_turns` | Maximum number of interactions between model and tools before
    episode ends. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `max_turns` | 模型和工具之间的最大交互次数，直到结束。 |'
- en: '| `max_tool_response` | The tool response is truncated to this number to avoid
    running out of model context. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `max_tool_response` | 工具响应被截断到这个数字，以避免模型上下文用尽。 |'
- en: '| `max_length` | The maximum number of tokens to allow in an episode. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `max_length` | 允许在一个剧集中的最大标记数。 |'
- en: '| `generation_kwargs` | Generation settings used by the language model. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `generation_kwargs` | 语言模型使用的生成设置。 |'
- en: You can customize the environment to your needs and add custom tools and settings.
    Let’s see how you can use the environment to have the model interact with the
    available tools!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据自己的需求自定义环境并添加自定义工具和设置。让我们看看如何使用环境让模型与可用工具进行交互！
- en: Run an Episode
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行一个剧集
- en: To run a set of queries through the text environment one can simply use the
    `run` method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过文本环境运行一组查询，可以简单地使用`run`方法。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will execute the model/tool feedback loop for each query until either no
    tool is called anymore, the maximum number of turns is reached or to maximum number
    of tokens in an episode is exceeded. The extra `kwargs` (e.g. `answers=answers`
    above) passed to `run` will be passed on to the reward function.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为每个查询执行模型/工具反馈循环，直到不再调用工具，达到最大轮次或超过剧集中的最大标记数。传递给`run`的额外`kwargs`（例如上面的`answers=answers`）将传递给奖励函数。
- en: 'There are five objects that are returned by `run`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`run`返回五个对象：'
- en: '`queries`: a list of the tokenized queries'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queries`：一个标记化查询的列表'
- en: '`responses`: all tokens that have been generated withing the environment including
    model and tool tokens'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`responses`：在环境中生成的所有标记，包括模型和工具标记'
- en: '`masks`: mask that indicates which tokens have been generated by the model
    and which tokens are generated by the tool'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`masks`：指示哪些标记由模型生成，哪些标记由工具生成的掩码'
- en: '`rewards`: a list of reward for each query/response'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rewards`：每个查询/响应的奖励列表'
- en: '`histories`: list of `TextHistory` objects, which are useful objects containing
    all the above and also the text equivalents'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`histories`：`TextHistory`对象的列表，这些对象包含上述所有内容以及文本等效内容'
- en: The masks are crucial for training as we don’t want to optimize tokens that
    the model has not generated which are tokens produced by the tools.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 掩码对于训练至关重要，因为我们不希望优化模型未生成的标记，这些标记是工具生成的标记。
- en: Next, we’ll train a PPO step with the generated responses!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将用生成的响应训练一个PPO步骤！
- en: Train
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 训练
- en: 'Training on episodes from the `TextEnvironment` is straight forward and simply
    requires forwarding all the returned variables except the `TextHistory` objects
    to the `step` method:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从`TextEnvironment`中的剧集训练是直接的，只需要将所有返回的变量转发到`step`方法，除了`TextHistory`对象：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: TextHistory
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TextHistory
- en: The `TextHistory` object stores the interactions between the model and the text
    environment. It stores tokens and text generated in each turn and their source
    in each turn (model or system) as well as rewards. Let’s go through the class
    attributes and methods.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`TextHistory`对象存储了模型与文本环境之间的交互。它存储了每个轮次中生成的标记和文本以及它们的来源（模型或系统）以及奖励。让我们来看看类的属性和方法。'
- en: Attributes
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性
- en: 'The following table summarises the available attributes of the `TextEnvironment`
    class:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表总结了`TextEnvironment`类的可用属性：
- en: '| Attribute | Description |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 |'
- en: '| :-- | :-- |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| :-- | :-- |'
- en: '| `text` | The full string of the text generated in the text environment with
    both model and system generated text. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `text` | 在文本环境中生成的完整文本字符串，包括模型和系统生成的文本。 |'
- en: '| `text_spans` | A list of tuples with the spans for each model or system generated
    text segment. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `text_spans` | 一个包含每个模型或系统生成文本段的范围的元组列表。 |'
- en: '| `system_spans` | A list of boolean values indicating if the segment is model
    or system generated. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `system_spans` | 一个包含指示段是模型还是系统生成的布尔值列表。 |'
- en: '| `tokens` | All tokens generated in text environment with both model and system
    generated tokens. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `tokens` | 在文本环境中生成的所有标记，包括模型和系统生成的标记。 |'
- en: '| `token_spans` | Similar to `text_spans` the `token_spans` indicate the boundaries
    of model andsystem generated tokens. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `token_spans` | 与`text_spans`类似，`token_spans`指示模型和系统生成的标记的边界。 |'
- en: '| `token_masks` | The token masks can be used to ignore system generated tokens
    by masking them. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `token_masks` | 标记掩码可用于通过屏蔽它们来忽略系统生成的标记。 |'
- en: '| `completed` | Indicates if the interaction with the environment has completed.
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `completed` | 表示与环境的交互是否已完成。 |'
- en: '| `truncated` | Indicates if the interaction with the environment has completed
    because max length was reached. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `truncated` | 表示与环境的交互是否已完成，因为已达到最大长度。 |'
- en: With these attributes you can reconstruct every interaction of the model with
    the `TextEnvironment`. The `TextHistory` also lets you visualize the text history.
    Let’s have a look!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些属性，您可以重建模型与`TextEnvironment`的每次交互。`TextHistory`还可以让您可视化文本历史。让我们来看看！
- en: Visualization
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可视化
- en: When the model interacts inside the `TextEnvironment` it can be useful to visualize
    and separate which parts of the text outputs were generated by the model and which
    parts come from the system and tools. For that purpose there are the two methods
    [TextHistory.show_text()](/docs/trl/v0.7.10/en/text_environments#trl.TextHistory.show_text)
    and [TextHistory.show_tokens()](/docs/trl/v0.7.10/en/text_environments#trl.TextHistory.show_tokens).
    They print the text and tokens respectively and highlight the various segments
    using the [`rich` libray](https://github.com/Textualize/rich) (make sure to install
    it before using these methods).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当模型在`TextEnvironment`内进行交互时，将文本输出的哪些部分是由模型生成的，哪些部分来自系统和工具，可以是有用的。为此，有两种方法[TextHistory.show_text()](/docs/trl/v0.7.10/en/text_environments#trl.TextHistory.show_text)和[TextHistory.show_tokens()](/docs/trl/v0.7.10/en/text_environments#trl.TextHistory.show_tokens)。它们分别打印文本和标记，并使用[`rich`库](https://github.com/Textualize/rich)突出显示各个段（在使用这些方法之前，请确保安装它）。
- en: 'You can see that the prompt is highlighted in gray, whereas system segments
    such as query and tool responses are highlighted in green. All segments generated
    by the model are highlighted in blue and in addition to the pure text output the
    reward is displayed as additional text in plum. Here an example of `show_text`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到提示以灰色突出显示，而查询和工具响应等系统段以绿色突出显示。模型生成的所有段都以蓝色突出显示，除了纯文本输出外，奖励也显示为李子色的附加文本。这里是`show_text`的一个示例：
- en: '![](../Images/d257e9fec94b02a669a8b79a806b8ffa.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d257e9fec94b02a669a8b79a806b8ffa.png)'
- en: 'Sometimes there can be tricky tokenization related issues that are hidden when
    showing the decoded text. Thus `TextHistory` also offers an option to display
    the same highlighting on the tokens directly with `show_tokens`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有时在显示解码文本时可能会隐藏一些与标记化相关的棘手问题。因此，`TextHistory`还提供了一个选项，可以直接在标记上显示相同的高亮显示，方法是使用`show_tokens`：
- en: '![](../Images/25fe8b1122f9aa79b20f7cf86d71b243.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25fe8b1122f9aa79b20f7cf86d71b243.png)'
- en: Note that you can turn on the colour legend by passing `show_legend=True`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以通过传递`show_legend=True`来打开颜色图例。
- en: API Documentation
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API文档
- en: '### `class trl.TextEnvironment`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class trl.TextEnvironment`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L208)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L208)'
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The TextEnvironment enables interaction of a LLM with an environment using tools.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: TextEnvironment使LLM与环境之间使用工具进行交互成为可能。
- en: '#### `compute_reward`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `compute_reward`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L358)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L358)'
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Compute the reward for a list of histories.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 计算一组历史记录的奖励。
- en: '#### `generate`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `generate`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L367)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L367)'
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Generate responses for a list of histories.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为历史列表生成响应。
- en: '#### `parse_tool_call`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `parse_tool_call`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L333)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L333)'
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Parse request string. Expected format: <request><tool_name>query<call>'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 解析请求字符串。预期格式：<请求><工具名称>查询<调用>
- en: '#### `run`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `run`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L263)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L263)'
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Parameters
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`queries` (list[str]) — A list of queries to run the model in the environment
    on.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`queries`（字符串列表）— 要在环境中运行模型的查询列表。'
- en: Run the environment on a list of queries.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在一组查询上运行环境。
- en: '#### `step`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `step`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L296)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L296)'
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Parameters
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`history` (`TextHistory`) — The history to step forward.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`history`（`TextHistory`）— 要向前迈出一步的历史。'
- en: Step the environment forward one turn.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将环境向前推进一轮。
- en: '#### `task_end_check`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `task_end_check`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L393)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L393)'
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Check if the current generation sequence has finished.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 检查当前生成序列是否已完成。
- en: '#### `tasks_end_check`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `tasks_end_check`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L382)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L382)'
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Check if the current generation sequences have finished.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 检查当前生成序列是否已完成。
- en: '### `class trl.TextHistory`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class trl.TextHistory`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L59)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L59)'
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The TextHistory class keeps track of the history of an interaction between the
    language model and the environment.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: TextHistory类跟踪语言模型与环境之间交互的历史。
- en: '#### `append_segment`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `append_segment`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L88)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L88)'
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Append a new segment to the history.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将新段落附加到历史记录中。
- en: 'args: text (`str`): The text of the new segment. tokens (`torch.LongTensor`):
    The tokens of the new segment. system (`bool`, *optional*): Whether the new segment
    is a system or user segment.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 参数：text（`str`）：新段落的文本。tokens（`torch.LongTensor`）：新段落的标记。system（`bool`，*可选*）：新段落是否为系统或用户段。
- en: '#### `complete`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `complete`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L116)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L116)'
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Mark the history as completed.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将历史标记为已完成。
- en: '#### `show_colour_legend`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `show_colour_legend`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L189)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L189)'
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Print the colour legend.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 打印颜色图例。
- en: '#### `show_text`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `show_text`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L142)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L142)'
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Print the text history.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 打印文本历史。
- en: '#### `show_tokens`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `show_tokens`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L164)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L164)'
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Print the history tokens.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 打印历史标记。
- en: '#### `split_query_response_tokens`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `split_query_response_tokens`'
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L131)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/trl/blob/v0.7.10/trl/environment/base_environment.py#L131)'
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Split the tokens into query and response tokens.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 将标记分为查询和响应标记。
