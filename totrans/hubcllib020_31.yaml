- en: Mixins & serialization methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/huggingface_hub/package_reference/mixins](https://huggingface.co/docs/huggingface_hub/package_reference/mixins)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/start.81f0ceaa.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/scheduler.6062bdaf.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/singletons.3c2729d2.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/paths.566d2d8a.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/app.77e31cee.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/index.4bca734e.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/0.d6dfa8c0.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/32.cfce9dc1.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Tip.b9ac1f03.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Docstring.ed07512f.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Heading.723dceba.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/CodeBlock.fa01571c.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/ExampleCodeBlock.823fb173.js">
  prefs: []
  type: TYPE_NORMAL
- en: Mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `huggingface_hub` library offers a range of mixins that can be used as a
    parent class for your objects, in order to provide simple uploading and downloading
    functions. Check out our [integration guide](../guides/integrations) to learn
    how to integrate any ML framework with the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Generic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.ModelHubMixin`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hub_mixin.py#L21)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A generic mixin to integrate ANY machine learning framework with the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: To integrate your framework, your model class must inherit from this class.
    Custom logic for saving/loading models have to be overwritten in `_from_pretrained`
    and `_save_pretrained`. [PyTorchModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.PyTorchModelHubMixin)
    is a good example of mixin integration with the Hub. Check out our [integration
    guide](../guides/integrations) for more instructions.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `_save_pretrained`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hub_mixin.py#L74)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`save_directory` (`str` or `Path`) — Path to directory in which the model weights
    and configuration will be saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overwrite this method in subclass to define how to save your model. Check out
    our [integration guide](../guides/integrations) for instructions.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `_from_pretrained`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hub_mixin.py#L169)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_id` (`str`) — ID of the model to load from the Huggingface Hub (e.g.
    `bigscience/bloom`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — Revision of the model on the Hub. Can be a
    branch name, a git tag or any commit id. Defaults to the latest commit on `main`
    branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force_download` (`bool`, *optional*, defaults to `False`) — Whether to force
    (re-)downloading the model weights and configuration files from the Hub, overriding
    the existing cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resume_download` (`bool`, *optional*, defaults to `False`) — Whether to delete
    incompletely received files. Will attempt to resume the download if such a file
    exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies` (`Dict[str, str]`, *optional*) — A dictionary of proxy servers to
    use by protocol or endpoint (e.g., `{''http'': ''foo.bar:3128'', ''http://hostname'':
    ''foo.bar:4012''}`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str` or `bool`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. By default, it will use the token cached when running `huggingface-cli
    login`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_dir` (`str`, `Path`, *optional*) — Path to the folder where cached files
    are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_files_only` (`bool`, *optional*, defaults to `False`) — If `True`, avoid
    downloading the file and return the path to the local cached file if it exists.
    model_kwargs — Additional keyword arguments passed along to the [_from_pretrained()](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin._from_pretrained)
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overwrite this method in subclass to define how to load your model from pretrained.
  prefs: []
  type: TYPE_NORMAL
- en: Use [hf_hub_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.hf_hub_download)
    or [snapshot_download()](/docs/huggingface_hub/v0.20.3/en/package_reference/file_download#huggingface_hub.snapshot_download)
    to download files from the Hub before loading them. Most args taken as input can
    be directly passed to those 2 methods. If needed, you can add more arguments to
    this method using “model_kwargs”. For example `PyTorchModelHubMixin._from_pretrained()`
    takes as input a `map_location` parameter to set on which device the model should
    be loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Check out our [integration guide](../guides/integrations) for more instructions.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_pretrained`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hub_mixin.py#L85)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pretrained_model_name_or_path` (`str`, `Path`) —'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Either the `model_id` (string) of a model hosted on the Hub, e.g. `bigscience/bloom`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Or a path to a `directory` containing model weights saved using [save_pretrained](https://huggingface.co/docs/transformers/v4.36.2/en/main_classes/model#transformers.PreTrainedModel.save_pretrained),
    e.g., `../path/to/my_model_directory/`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — Revision of the model on the Hub. Can be a
    branch name, a git tag or any commit id. Defaults to the latest commit on `main`
    branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force_download` (`bool`, *optional*, defaults to `False`) — Whether to force
    (re-)downloading the model weights and configuration files from the Hub, overriding
    the existing cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resume_download` (`bool`, *optional*, defaults to `False`) — Whether to delete
    incompletely received files. Will attempt to resume the download if such a file
    exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies` (`Dict[str, str]`, *optional*) — A dictionary of proxy servers to
    use by protocol or endpoint, e.g., `{''http'': ''foo.bar:3128'', ''http://hostname'':
    ''foo.bar:4012''}`. The proxies are used on every request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str` or `bool`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. By default, it will use the token cached when running `huggingface-cli
    login`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_dir` (`str`, `Path`, *optional*) — Path to the folder where cached files
    are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_files_only` (`bool`, *optional*, defaults to `False`) — If `True`, avoid
    downloading the file and return the path to the local cached file if it exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_kwargs` (`Dict`, *optional*) — Additional kwargs to pass to the model
    during initialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download a model from the Huggingface Hub and instantiate it.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `push_to_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hub_mixin.py#L218)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the repository to push to (example: `"username/my-model"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config` (`dict`, *optional*) — Configuration object to be saved alongside
    the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*) — Message to commit while pushing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*, defaults to `False`) — Whether the repository
    created should be private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api_endpoint` (`str`, *optional*) — The API endpoint to use when pushing the
    model to the hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. By default, it will use the token cached when running `huggingface-cli
    login`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`branch` (`str`, *optional*) — The git branch on which to push the model. This
    defaults to `"main"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`boolean`, *optional*) — Whether or not to create a Pull Request
    from `branch` with that commit. Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow_patterns` (`List[str]` or `str`, *optional*) — If provided, only files
    matching at least one pattern are pushed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_patterns` (`List[str]` or `str`, *optional*) — If provided, files matching
    any of the patterns are not pushed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete_patterns` (`List[str]` or `str`, *optional*) — If provided, remote
    files matching any of the patterns will be deleted from the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload model checkpoint to the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Use `allow_patterns` and `ignore_patterns` to precisely filter which files should
    be pushed to the hub. Use `delete_patterns` to delete existing remote files in
    the same commit. See [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    reference for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `save_pretrained`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hub_mixin.py#L30)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`save_directory` (`str` or `Path`) — Path to directory in which the model weights
    and configuration will be saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config` (`dict`, *optional*) — Model configuration specified as a key/value
    dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push_to_hub` (`bool`, *optional*, defaults to `False`) — Whether or not to
    push your model to the Huggingface Hub after saving it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_id` (`str`, *optional*) — ID of your repository on the Hub. Used only
    if `push_to_hub=True`. Will default to the folder name if not provided. kwargs
    — Additional key word arguments passed along to the [push_to_hub()](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin.push_to_hub)
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save weights in local directory.
  prefs: []
  type: TYPE_NORMAL
- en: PyTorch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.PyTorchModelHubMixin`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/hub_mixin.py#L290)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Implementation of [ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)
    to provide model Hub upload/download capabilities to PyTorch models. The model
    is set in evaluation mode by default using `model.eval()` (dropout modules are
    deactivated). To train the model, you should first set it back in training mode
    with `model.train()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Keras
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class huggingface_hub.KerasModelHubMixin`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/keras_mixin.py#L397)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Implementation of [ModelHubMixin](/docs/huggingface_hub/v0.20.3/en/package_reference/mixins#huggingface_hub.ModelHubMixin)
    to provide model Hub upload/download capabilities to Keras models.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '#### `huggingface_hub.from_pretrained_keras`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/keras_mixin.py#L216)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pretrained_model_name_or_path` (`str` or `os.PathLike`) — Can be either:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string, the `model id` of a pretrained model hosted inside a model repo on
    huggingface.co. Valid model ids can be located at the root-level, like `bert-base-uncased`,
    or namespaced under a user or organization name, like `dbmdz/bert-base-german-cased`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can add `revision` by appending `@` at the end of model_id simply like
    this: `dbmdz/bert-base-german-cased@main` Revision is the specific model version
    to use. It can be a branch name, a tag name, or a commit id, since we use a git-based
    system for storing models and other artifacts on huggingface.co, so `revision`
    can be any identifier allowed by git.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A path to a `directory` containing model weights saved using [save_pretrained](https://huggingface.co/docs/transformers/v4.36.2/en/main_classes/model#transformers.PreTrainedModel.save_pretrained),
    e.g., `./my_model_directory/`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`None` if you are both providing the configuration and state dictionary (resp.
    with keyword arguments `config` and `state_dict`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force_download` (`bool`, *optional*, defaults to `False`) — Whether to force
    the (re-)download of the model weights and configuration files, overriding the
    cached versions if they exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resume_download` (`bool`, *optional*, defaults to `False`) — Whether to delete
    incompletely received files. Will attempt to resume the download if such a file
    exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies` (`Dict[str, str]`, *optional*) — A dictionary of proxy servers to
    use by protocol or endpoint, e.g., `{''http'': ''foo.bar:3128'', ''http://hostname'':
    ''foo.bar:4012''}`. The proxies are used on each request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str` or `bool`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. If `True`, will use the token generated when running `transformers-cli
    login` (stored in `~/.huggingface`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_dir` (`Union[str, os.PathLike]`, *optional*) — Path to a directory in
    which a downloaded pretrained model configuration should be cached if the standard
    cache should not be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local_files_only(bool,` *optional*, defaults to `False`) — Whether to only
    look at local files (i.e., do not try to download the model).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_kwargs` (`Dict`, *optional*) — model_kwargs will be passed to the model
    during initialization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantiate a pretrained Keras model from a pre-trained model from the Hub.
    The model is expected to be in `SavedModel` format.
  prefs: []
  type: TYPE_NORMAL
- en: Passing `token=True` is required when you want to use a private model.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.push_to_hub_keras`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/keras_mixin.py#L275)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model` (`Keras.Model`) — The [Keras model](%60https://www.tensorflow.org/api_docs/python/tf/keras/Model%60)
    you’d like to push to the Hub. The model must be compiled and built.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — ID of the repository to push to (example: `"username/my-model"`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*, defaults to “Add Keras model”) — Message
    to commit while pushing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*, defaults to `False`) — Whether the repository
    created should be private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api_endpoint` (`str`, *optional*) — The API endpoint to use when pushing the
    model to the hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. If not set, will use the token set when logging in with `huggingface-cli
    login` (stored in `~/.huggingface`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`branch` (`str`, *optional*) — The git branch on which to push the model. This
    defaults to the default branch as specified in your repository, which defaults
    to `"main"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`boolean`, *optional*) — Whether or not to create a Pull Request
    from `branch` with that commit. Defaults to `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config` (`dict`, *optional*) — Configuration object to be saved alongside
    the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow_patterns` (`List[str]` or `str`, *optional*) — If provided, only files
    matching at least one pattern are pushed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_patterns` (`List[str]` or `str`, *optional*) — If provided, files matching
    any of the patterns are not pushed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete_patterns` (`List[str]` or `str`, *optional*) — If provided, remote
    files matching any of the patterns will be deleted from the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_dir` (`str`, *optional*) — TensorBoard logging directory to be pushed.
    The Hub automatically hosts and displays a TensorBoard instance if log files are
    included in the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_optimizer` (`bool`, *optional*, defaults to `False`) — Whether or
    not to include optimizer during serialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (Union[`list`, `str`], *optional*) — List of tags that are related to
    model or string of a single tag. See example tags [here](https://github.com/huggingface/hub-docs/blob/main/modelcard.md?plain=1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plot_model` (`bool`, *optional*, defaults to `True`) — Setting this to `True`
    will plot the model and put it in the model card. Requires graphviz and pydot
    to be installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_save_kwargs(dict,` *optional*) — model_save_kwargs will be passed to
    [`tf.keras.models.save_model()`](https://www.tensorflow.org/api_docs/python/tf/keras/models/save_model).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload model checkpoint to the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Use `allow_patterns` and `ignore_patterns` to precisely filter which files should
    be pushed to the hub. Use `delete_patterns` to delete existing remote files in
    the same commit. See [upload_folder()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.upload_folder)
    reference for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.save_pretrained_keras`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/keras_mixin.py#L131)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model` (`Keras.Model`) — The [Keras model](https://www.tensorflow.org/api_docs/python/tf/keras/Model)
    you’d like to save. The model must be compiled and built.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`save_directory` (`str` or `Path`) — Specify directory in which you want to
    save the Keras model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config` (`dict`, *optional*) — Configuration object to be saved alongside
    the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`include_optimizer(bool,` *optional*, defaults to `False`) — Whether or not
    to include optimizer in serialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plot_model` (`bool`, *optional*, defaults to `True`) — Setting this to `True`
    will plot the model and put it in the model card. Requires graphviz and pydot
    to be installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (Union[`str`,`list`], *optional*) — List of tags that are related to
    model or string of a single tag. See example tags [here](https://github.com/huggingface/hub-docs/blob/main/modelcard.md?plain=1).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_save_kwargs(dict,` *optional*) — model_save_kwargs will be passed to
    [`tf.keras.models.save_model()`](https://www.tensorflow.org/api_docs/python/tf/keras/models/save_model).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saves a Keras model to save_directory in SavedModel format. Use this if you’re
    using the Functional or Sequential APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Fastai
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.from_pretrained_fastai`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/fastai_utils.py#L298)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The location where the pickled fastai.Learner is. It can
    be either of the two:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hosted on the Hugging Face Hub. E.g.: ‘espejelomar/fatai-pet-breeds-classification’
    or ‘distilgpt2’. You can add a `revision` by appending `@` at the end of `repo_id`.
    E.g.: `dbmdz/bert-base-german-cased@main`. Revision is the specific model version
    to use. Since we use a git-based system for storing models and other artifacts
    on the Hugging Face Hub, it can be a branch name, a tag name, or a commit id.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hosted locally. `repo_id` would be a directory containing the pickle and a
    pyproject.toml indicating the fastai and fastcore versions used to build the `fastai.Learner`.
    E.g.: `./my_model_directory/`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — Revision at which the repo’s files are downloaded.
    See documentation of `snapshot_download`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load pretrained fastai model from the Hub or from a local directory.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `huggingface_hub.push_to_hub_fastai`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/huggingface_hub/blob/v0.20.3/src/huggingface_hub/fastai_utils.py#L343)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`learner` (*Learner*) — The *fastai.Learner’ you’d like to push to the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repo_id` (*str*) — The repository id for your model in Hub in the format of
    “namespace/repo_name”. The namespace can be your individual account or an organization
    to which you have write access (for example, ‘stanfordnlp/stanza-de’).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (*str`,* optional*) — Message to commit while pushing. Will
    default to `"add model"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (*bool*, *optional*, defaults to *False*) — Whether or not the repository
    created should be private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (*str*, *optional*) — The Hugging Face account token to use as HTTP
    bearer authorization for remote files. If `None`, the token will be asked by a
    prompt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config` (*dict*, *optional*) — Configuration object to be saved alongside
    the model weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`branch` (*str*, *optional*) — The git branch on which to push the model. This
    defaults to the default branch as specified in your repository, which defaults
    to *“main”*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (*boolean*, *optional*) — Whether or not to create a Pull Request
    from *branch* with that commit. Defaults to *False*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`api_endpoint` (*str*, *optional*) — The API endpoint to use when pushing the
    model to the hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow_patterns` (*List[str]* or *str*, *optional*) — If provided, only files
    matching at least one pattern are pushed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ignore_patterns` (*List[str]* or *str*, *optional*) — If provided, files matching
    any of the patterns are not pushed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete_patterns` (*List[str]* or *str*, *optional*) — If provided, remote
    files matching any of the patterns will be deleted from the repo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload learner checkpoint files to the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Use *allow_patterns* and *ignore_patterns* to precisely filter which files should
    be pushed to the hub. Use *delete_patterns* to delete existing remote files in
    the same commit. See [*upload_folder*] reference for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Raises the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*ValueError*](https://docs.python.org/3/library/exceptions.html#ValueError)
    if the user is not log on to the Hugging Face Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
