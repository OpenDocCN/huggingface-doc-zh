- en: Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/configuration](https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/configuration)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: The base class [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    implements the common methods for loading/saving a configuration either from a
    local file or directory, or from a pretrained model configuration provided by
    the library (downloaded from HuggingFace’s AWS S3 repository).
  prefs: []
  type: TYPE_NORMAL
- en: 'Each derived config class implements model specific attributes. Common attributes
    present in all config classes are: `hidden_size`, `num_attention_heads`, and `num_hidden_layers`.
    Text models further implement: `vocab_size`.'
  prefs: []
  type: TYPE_NORMAL
- en: PretrainedConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.PretrainedConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L49)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`name_or_path` (`str`, *optional*, defaults to `""`) — Store the string that
    was passed to [PreTrainedModel.from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    or [TFPreTrainedModel.from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained)
    as `pretrained_model_name_or_path` if the configuration was created with such
    a method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_hidden_states` (`bool`, *optional*, defaults to `False`) — Whether
    or not the model should return all hidden-states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_attentions` (`bool`, *optional*, defaults to `False`) — Whether or
    not the model should returns all attentions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) — Whether or not the
    model should return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_encoder_decoder` (`bool`, *optional*, defaults to `False`) — Whether the
    model is used as an encoder/decoder or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_decoder` (`bool`, *optional*, defaults to `False`) — Whether the model
    is used as decoder or not (in which case it’s used as an encoder).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attention_hidden_size**` (`bool`, *optional*) — The hidden size of the
    cross-attention layer in case the model is used as a decoder in an encoder-decoder
    setting and the cross-attention hidden dimension differs from `self.config.hidden_size`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_cross_attention` (`bool`, *optional*, defaults to `False`) — Whether cross-attention
    layers should be added to the model. Note, this option is only relevant for models
    that can be used as decoder models within the [EncoderDecoderModel](/docs/transformers/v4.37.2/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel)
    class, which consists of all models in `AUTO_MODELS_FOR_CAUSAL_LM`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tie_encoder_decoder` (`bool`, *optional*, defaults to `False`) — Whether all
    encoder weights should be tied to their equivalent decoder weights. This requires
    the encoder and decoder model to have the exact same parameter names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prune_heads` (`Dict[int, List[int]]`, *optional*, defaults to `{}`) — Pruned
    heads of the model. The keys are the selected layer indices and the associated
    values, the list of heads to prune in said layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For instance `{1: [0, 2], 2: [2, 3]}` will prune heads 0 and 2 on layer 1 and
    heads 2 and 3 on layer 2.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`chunk_size_feed_forward` (`int`, *optional*, defaults to `0`) — The chunk
    size of all feed forward layers in the residual attention blocks. A chunk size
    of `0` means that the feed forward layer is not chunked. A chunk size of n means
    that the feed forward layer processes `n` < sequence_length embeddings at a time.
    For more information on feed forward chunking, see [How does Feed Forward Chunking
    work?](../glossary.html#feed-forward-chunking).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters for sequence generation
  prefs: []
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*, defaults to 20) — Maximum length that will
    be used by default in the `generate` method of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min_length` (`int`, *optional*, defaults to 0) — Minimum length that will
    be used by default in the `generate` method of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_sample` (`bool`, *optional*, defaults to `False`) — Flag that will be used
    by default in the `generate` method of the model. Whether or not to use sampling
    ; use greedy decoding otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`early_stopping` (`bool`, *optional*, defaults to `False`) — Flag that will
    be used by default in the `generate` method of the model. Whether to stop the
    beam search when at least `num_beams` sentences are finished per batch or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_beams` (`int`, *optional*, defaults to 1) — Number of beams for beam search
    that will be used by default in the `generate` method of the model. 1 means no
    beam search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_beam_groups` (`int`, *optional*, defaults to 1) — Number of groups to
    divide `num_beams` into in order to ensure diversity among different groups of
    beams that will be used by default in the `generate` method of the model. 1 means
    no group beam search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`diversity_penalty` (`float`, *optional*, defaults to 0.0) — Value to control
    diversity for group beam search. that will be used by default in the `generate`
    method of the model. 0 means no diversity penalty. The higher the penalty, the
    more diverse are the outputs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`temperature` (`float`, *optional*, defaults to 1.0) — The value used to module
    the next token probabilities that will be used by default in the `generate` method
    of the model. Must be strictly positive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top_k` (`int`, *optional*, defaults to 50) — Number of highest probability
    vocabulary tokens to keep for top-k-filtering that will be used by default in
    the `generate` method of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top_p` (`float`, *optional*, defaults to 1) — Value that will be used by default
    in the `generate` method of the model for `top_p`. If set to float < 1, only the
    most probable tokens with probabilities that add up to `top_p` or higher are kept
    for generation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`typical_p` (`float`, *optional*, defaults to 1) — Local typicality measures
    how similar the conditional probability of predicting a target token next is to
    the expected conditional probability of predicting a random token next, given
    the partial text already generated. If set to float < 1, the smallest set of the
    most locally typical tokens with probabilities that add up to `typical_p` or higher
    are kept for generation. See [this paper](https://arxiv.org/pdf/2202.00666.pdf)
    for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repetition_penalty` (`float`, *optional*, defaults to 1) — Parameter for repetition
    penalty that will be used by default in the `generate` method of the model. 1.0
    means no penalty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length_penalty` (`float`, *optional*, defaults to 1) — Exponential penalty
    to the length that is used with beam-based generation. It is applied as an exponent
    to the sequence length, which in turn is used to divide the score of the sequence.
    Since the score is the log likelihood of the sequence (i.e. negative), `length_penalty`
    > 0.0 promotes longer sequences, while `length_penalty` < 0.0 encourages shorter
    sequences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no_repeat_ngram_size` (`int`, *optional*, defaults to 0) — Value that will
    be used by default in the — `generate` method of the model for `no_repeat_ngram_size`.
    If set to int > 0, all ngrams of that size can only occur once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_no_repeat_ngram_size` (`int`, *optional*, defaults to 0) — Value that
    will be used by — default in the `generate` method of the model for `encoder_no_repeat_ngram_size`.
    If set to int > 0, all ngrams of that size that occur in the `encoder_input_ids`
    cannot occur in the `decoder_input_ids`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bad_words_ids` (`List[int]`, *optional*) — List of token ids that are not
    allowed to be generated that will be used by default in the `generate` method
    of the model. In order to get the tokens of the words that should not appear in
    the generated text, use `tokenizer.encode(bad_word, add_prefix_space=True)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_return_sequences` (`int`, *optional*, defaults to 1) — Number of independently
    computed returned sequences for each element in the batch that will be used by
    default in the `generate` method of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`output_scores` (`bool`, *optional*, defaults to `False`) — Whether the model
    should return the logits when used for generation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict_in_generate` (`bool`, *optional*, defaults to `False`) — Whether
    the model should return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a `torch.LongTensor`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forced_bos_token_id` (`int`, *optional*) — The id of the token to force as
    the first generated token after the `decoder_start_token_id`. Useful for multilingual
    models like [mBART](../model_doc/mbart) where the first generated token needs
    to be the target language token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forced_eos_token_id` (`int`, *optional*) — The id of the token to force as
    the last generated token when `max_length` is reached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove_invalid_values` (`bool`, *optional*) — Whether to remove possible *nan*
    and *inf* outputs of the model to prevent the generation method to crash. Note
    that using `remove_invalid_values` can slow down generation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters for fine-tuning tasks
  prefs: []
  type: TYPE_NORMAL
- en: '`architectures` (`List[str]`, *optional*) — Model architectures that can be
    used with the model pretrained weights.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`finetuning_task` (`str`, *optional*) — Name of the task used to fine-tune
    the model. This can be used when converting from an original (TensorFlow or PyTorch)
    checkpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id2label` (`Dict[int, str]`, *optional*) — A map from index (for instance
    prediction index, or target index) to label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label2id` (`Dict[str, int]`, *optional*) — A map from label to index for the
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_labels` (`int`, *optional*) — Number of labels to use in the last layer
    added to the model, typically for a classification task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`task_specific_params` (`Dict[str, Any]`, *optional*) — Additional keyword
    arguments to store for the current task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`problem_type` (`str`, *optional*) — Problem type for `XxxForSequenceClassification`
    models. Can be one of `"regression"`, `"single_label_classification"` or `"multi_label_classification"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters linked to the tokenizer
  prefs: []
  type: TYPE_NORMAL
- en: '`tokenizer_class` (`str`, *optional*) — The name of the associated tokenizer
    class to use (if none is set, will use the tokenizer associated to the model by
    default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prefix` (`str`, *optional*) — A specific prompt that should be added at the
    beginning of each text before calling the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bos_token_id` (`int`, *optional*) — The id of the *beginning-of-stream* token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pad_token_id` (`int`, *optional*) — The id of the *padding* token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eos_token_id` (`int`, *optional*) — The id of the *end-of-stream* token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoder_start_token_id` (`int`, *optional*) — If an encoder-decoder model
    starts decoding with a different token than *bos*, the id of that token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sep_token_id` (`int`, *optional*) — The id of the *separation* token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyTorch specific parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`torchscript` (`bool`, *optional*, defaults to `False`) — Whether or not the
    model should be used with Torchscript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tie_word_embeddings` (`bool`, *optional*, defaults to `True`) — Whether the
    model’s input and output word embeddings should be tied. Note that this is only
    relevant if the model has a output word embedding layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`torch_dtype` (`str`, *optional*) — The `dtype` of the weights. This attribute
    can be used to initialize the model to a non-default `dtype` (which is normally
    `float32`) and thus allow for optimal storage allocation. For example, if the
    saved model is `float16`, ideally we want to load it back using the minimal amount
    of memory needed to load `float16` weights. Since the config object is stored
    in plain text, this attribute contains just the floating type string without the
    `torch.` prefix. For example, for `torch.float16` ``torch_dtype` is the `"float16"`
    string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This attribute is currently not being used during model loading time, but this
    may change in the future versions. But we can already start preparing for the
    future by saving the dtype with save_pretrained.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`attn_implementation` (`str`, *optional*) — The attention implementation to
    use in the model. Can be any of `"eager"` (manual implementation of the attention),
    `"sdpa"` (attention using [`torch.nn.functional.scaled_dot_product_attention`](https://pytorch.org/docs/master/generated/torch.nn.functional.scaled_dot_product_attention.html)),
    or `"flash_attention_2"` (attention using [Dao-AILab/flash-attention](https://github.com/Dao-AILab/flash-attention)).
    By default, if available, SDPA will be used for torch>=2.1.1\. The default is
    otherwise the manual `"eager"` implementation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow specific parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`use_bfloat16` (`bool`, *optional*, defaults to `False`) — Whether or not the
    model should use BFloat16 scalars (only used by some TensorFlow models).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tf_legacy_loss` (`bool`, *optional*, defaults to `False`) — Whether the model
    should use legacy TensorFlow losses. Legacy losses have variable output shapes
    and may not be XLA-compatible. This option is here for backward compatibility
    and will be removed in Transformers v5.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Base class for all configuration classes. Handles a few parameters common to
    all models’ configurations as well as methods for loading/downloading/saving configurations.
  prefs: []
  type: TYPE_NORMAL
- en: A configuration file can be loaded and saved to disk. Loading the configuration
    file and using this file to initialize a model does **not** load the model weights.
    It only affects the model’s configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Class attributes (overridden by derived classes):'
  prefs: []
  type: TYPE_NORMAL
- en: '`model_type` (`str`) — An identifier for the model type, serialized into the
    JSON file, and used to recreate the correct object in [AutoConfig](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoConfig).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_composition` (`bool`) — Whether the config class is composed of multiple
    sub-configs. In this case the config has to be initialized from two or more configs
    of type [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    like: [EncoderDecoderConfig](/docs/transformers/v4.37.2/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig)
    or [~RagConfig](/docs/transformers/v4.37.2/en/model_doc/rag#transformers.RagConfig).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keys_to_ignore_at_inference` (`List[str]`) — A list of keys to ignore by default
    when looking at dictionary outputs of the model during inference.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attribute_map` (`Dict[str, str]`) — A dict that maps model specific attribute
    names to the standardized naming of attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Common attributes (present in all subclasses):'
  prefs: []
  type: TYPE_NORMAL
- en: '`vocab_size` (`int`) — The number of tokens in the vocabulary, which is also
    the first dimension of the embeddings matrix (this attribute may be missing for
    models that don’t have a text modality like ViT).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_size` (`int`) — The hidden size of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_attention_heads` (`int`) — The number of attention heads used in the multi-head
    attention layers of the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_hidden_layers` (`int`) — The number of blocks in the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '#### `push_to_hub`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/utils/hub.py#L755)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`repo_id` (`str`) — The name of the repository you want to push your config
    to. It should contain your organization name when pushing to a given organization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_temp_dir` (`bool`, *optional*) — Whether or not to use a temporary directory
    to store the files saved before they are pushed to the Hub. Will default to `True`
    if there is no directory named like `repo_id`, `False` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_message` (`str`, *optional*) — Message to commit while pushing. Will
    default to `"Upload config"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`private` (`bool`, *optional*) — Whether or not the repository created should
    be private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`bool` or `str`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. If `True`, will use the token generated when running `huggingface-cli
    login` (stored in `~/.huggingface`). Will default to `True` if `repo_url` is not
    specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_shard_size` (`int` or `str`, *optional*, defaults to `"5GB"`) — Only applicable
    for models. The maximum size for a checkpoint before being sharded. Checkpoints
    shard will then be each of size lower than this size. If expressed as a string,
    needs to be digits followed by a unit (like `"5MB"`). We default it to `"5GB"`
    so that users can easily load models on free-tier Google Colab instances without
    any CPU OOM issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create_pr` (`bool`, *optional*, defaults to `False`) — Whether or not to create
    a PR with the uploaded files or directly commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`safe_serialization` (`bool`, *optional*, defaults to `True`) — Whether or
    not to convert the model weights in safetensors format for safer serialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*) — Branch to push the uploaded files to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit_description` (`str`, *optional*) — The description of the commit that
    will be created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags` (`List[str]`, *optional*) — List of tags to push on the Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload the configuration file to the 🤗 Model Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '#### `dict_torch_dtype_to_str`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L1005)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Checks whether the passed dictionary and its nested dicts have a *torch_dtype*
    key and if it’s not None, converts torch.dtype to a string of just the type. For
    example, `torch.float32` get converted into *“float32”* string, which can then
    be stored in the json format.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L737)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config_dict` (`Dict[str, Any]`) — Dictionary that will be used to instantiate
    the configuration object. Such a dictionary can be retrieved from a pretrained
    checkpoint by leveraging the [get_config_dict()](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig.get_config_dict)
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`) — Additional parameters from which to initialize
    the configuration object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)'
  prefs: []
  type: TYPE_NORMAL
- en: The configuration object instantiated from those parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates a [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    from a Python dictionary of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_json_file`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L798)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`json_file` (`str` or `os.PathLike`) — Path to the JSON file containing the
    parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)'
  prefs: []
  type: TYPE_NORMAL
- en: The configuration object instantiated from that JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates a [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    from the path to a JSON file of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_pretrained`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L511)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pretrained_model_name_or_path` (`str` or `os.PathLike`) — This can be either:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a string, the *model id* of a pretrained model configuration hosted inside a
    model repo on huggingface.co. Valid model ids can be located at the root-level,
    like `bert-base-uncased`, or namespaced under a user or organization name, like
    `dbmdz/bert-base-german-cased`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a path to a *directory* containing a configuration file saved using the [save_pretrained()](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained)
    method, e.g., `./my_model_directory/`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a path or url to a saved configuration JSON *file*, e.g., `./my_model_directory/configuration.json`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache_dir` (`str` or `os.PathLike`, *optional*) — Path to a directory in which
    a downloaded pretrained model configuration should be cached if the standard cache
    should not be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force_download` (`bool`, *optional*, defaults to `False`) — Whether or not
    to force to (re-)download the configuration files and override the cached versions
    if they exist.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resume_download` (`bool`, *optional*, defaults to `False`) — Whether or not
    to delete incompletely received file. Attempts to resume the download if such
    a file exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxies` (`Dict[str, str]`, *optional*) — A dictionary of proxy servers to
    use by protocol or endpoint, e.g., `{''http'': ''foo.bar:3128'', ''http://hostname'':
    ''foo.bar:4012''}.` The proxies are used on each request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`token` (`str` or `bool`, *optional*) — The token to use as HTTP bearer authorization
    for remote files. If `True`, or not specified, will use the token generated when
    running `huggingface-cli login` (stored in `~/.huggingface`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision` (`str`, *optional*, defaults to `"main"`) — The specific model version
    to use. It can be a branch name, a tag name, or a commit id, since we use a git-based
    system for storing models and other artifacts on huggingface.co, so `revision`
    can be any identifier allowed by git.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To test a pull request you made on the Hub, you can pass `revision=“refs/pr/<pr_number>“.</pr_number>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`return_unused_kwargs` (`bool`, *optional*, defaults to `False`) — If `False`,
    then this function returns just the final configuration object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If `True`, then this functions returns a `Tuple(config, unused_kwargs)` where
    *unused_kwargs* is a dictionary consisting of the key/value pairs whose keys are
    not configuration attributes: i.e., the part of `kwargs` which has not been used
    to update `config` and is otherwise ignored.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`subfolder` (`str`, *optional*, defaults to `""`) — In case the relevant files
    are located inside a subfolder of the model repo on huggingface.co, you can specify
    the folder name here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`, *optional*) — The values in kwargs of any keys
    which are configuration attributes will be used to override the loaded values.
    Behavior concerning key/value pairs whose keys are *not* configuration attributes
    is controlled by the `return_unused_kwargs` keyword parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)'
  prefs: []
  type: TYPE_NORMAL
- en: The configuration object instantiated from this pretrained model.
  prefs: []
  type: TYPE_NORMAL
- en: Instantiate a [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    (or a derived class) from a pretrained model configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '#### `get_config_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L614)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`pretrained_model_name_or_path` (`str` or `os.PathLike`) — The identifier of
    the pre-trained checkpoint from which we want the dictionary of parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Tuple[Dict, Dict]`'
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary(ies) that will be used to instantiate the configuration object.
  prefs: []
  type: TYPE_NORMAL
- en: From a `pretrained_model_name_or_path`, resolve to a dictionary of parameters,
    to be used for instantiating a [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    using `from_dict`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `register_for_auto_class`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L1017)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`auto_class` (`str` or `type`, *optional*, defaults to `"AutoConfig"`) — The
    auto class to register this new configuration with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Register this class with a given auto class. This should only be used for custom
    configurations as the ones in the library are already mapped with `AutoConfig`.
  prefs: []
  type: TYPE_NORMAL
- en: This API is experimental and may have some slight breaking changes in the next
    releases.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `save_pretrained`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L424)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`save_directory` (`str` or `os.PathLike`) — Directory where the configuration
    JSON file will be saved (will be created if it does not exist).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`push_to_hub` (`bool`, *optional*, defaults to `False`) — Whether or not to
    push your model to the Hugging Face model hub after saving it. You can specify
    the repository you want to push to with `repo_id` (will default to the name of
    `save_directory` in your namespace).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kwargs` (`Dict[str, Any]`, *optional*) — Additional key word arguments passed
    along to the [push_to_hub()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.push_to_hub)
    method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save a configuration object to the directory `save_directory`, so that it can
    be re-loaded using the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained)
    class method.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L883)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Dict[str, Any]`'
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary of all the attributes that make up this configuration instance.
  prefs: []
  type: TYPE_NORMAL
- en: Serializes this instance to a Python dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_diff_dict`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L826)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Dict[str, Any]`'
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary of all the attributes that make up this configuration instance,
  prefs: []
  type: TYPE_NORMAL
- en: Removes all attributes from config which correspond to the default config attributes
    for better readability and serializes to a Python dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_json_file`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L943)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`json_file_path` (`str` or `os.PathLike`) — Path to the JSON file in which
    this configuration instance’s parameters will be saved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_diff` (`bool`, *optional*, defaults to `True`) — If set to `True`, only
    the difference between the config instance and the default `PretrainedConfig()`
    is serialized to JSON file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save this instance to a JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `to_json_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L925)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`use_diff` (`bool`, *optional*, defaults to `True`) — If set to `True`, only
    the difference between the config instance and the default `PretrainedConfig()`
    is serialized to JSON string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: String containing all the attributes that make up this configuration instance
    in JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: Serializes this instance to a JSON string.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `update`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L957)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`config_dict` (`Dict[str, Any]`) — Dictionary of attributes that should be
    updated for this class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates attributes of this class with attributes from `config_dict`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `update_from_string`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/configuration_utils.py#L967)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`update_str` (`str`) — String with attributes that should be updated for this
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates attributes of this class with attributes from `update_str`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected format is ints, floats and strings as is, and for booleans use
    `true` or `false`. For example: “n_embd=10,resid_pdrop=0.2,scale_attn_weights=false,summary_type=cls_index”'
  prefs: []
  type: TYPE_NORMAL
- en: The keys to change have to already exist in the config object.
  prefs: []
  type: TYPE_NORMAL
