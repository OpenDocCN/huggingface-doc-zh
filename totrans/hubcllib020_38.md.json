["```py\n>>> from huggingface_hub.repocard import RepoCard\n>>> text = '''\n... ---\n... language: en\n... license: mit\n... ---\n...\n... # My repo\n... '''\n>>> card = RepoCard(text)\n>>> card.data.to_dict()\n{'language': 'en', 'license': 'mit'}\n>>> card.text\n'\\n# My repo\\n'\n\n```", "```py\n>>> from huggingface_hub.repocard import RepoCard\n>>> card = RepoCard.load(\"nateraw/food\")\n>>> assert card.data.tags == [\"generated_from_trainer\", \"image-classification\", \"pytorch\"]\n\n```", "```py\n>>> from huggingface_hub.repocard import RepoCard\n>>> card = RepoCard(\"---\\nlanguage: en\\n---\\n# This is a test repo card\")\n>>> card.save(\"/tmp/test.md\")\n\n```", "```py\n>>> from huggingface_hub import ModelCard, ModelCardData, EvalResult\n\n>>> # Using the Default Template\n>>> card_data = ModelCardData(\n...     language='en',\n...     license='mit',\n...     library_name='timm',\n...     tags=['image-classification', 'resnet'],\n...     datasets=['beans'],\n...     metrics=['accuracy'],\n... )\n>>> card = ModelCard.from_template(\n...     card_data,\n...     model_description='This model does x + y...'\n... )\n\n>>> # Including Evaluation Results\n>>> card_data = ModelCardData(\n...     language='en',\n...     tags=['image-classification', 'resnet'],\n...     eval_results=[\n...         EvalResult(\n...             task_type='image-classification',\n...             dataset_type='beans',\n...             dataset_name='Beans',\n...             metric_type='accuracy',\n...             metric_value=0.9,\n...         ),\n...     ],\n...     model_name='my-cool-model',\n... )\n>>> card = ModelCard.from_template(card_data)\n\n>>> # Using a Custom Template\n>>> card_data = ModelCardData(\n...     language='en',\n...     tags=['image-classification', 'resnet']\n... )\n>>> card = ModelCard.from_template(\n...     card_data=card_data,\n...     template_path='./src/huggingface_hub/templates/modelcard_template.md',\n...     custom_template_var='custom value',  # will be replaced in template if it exists\n... )\n\n```", "```py\n>>> from huggingface_hub import ModelCardData\n>>> card_data = ModelCardData(\n...     language=\"en\",\n...     license=\"mit\",\n...     library_name=\"timm\",\n...     tags=['image-classification', 'resnet'],\n... )\n>>> card_data.to_dict()\n{'language': 'en', 'license': 'mit', 'library_name': 'timm', 'tags': ['image-classification', 'resnet']}\n\n```", "```py\n>>> from huggingface_hub import DatasetCard, DatasetCardData\n\n>>> # Using the Default Template\n>>> card_data = DatasetCardData(\n...     language='en',\n...     license='mit',\n...     annotations_creators='crowdsourced',\n...     task_categories=['text-classification'],\n...     task_ids=['sentiment-classification', 'text-scoring'],\n...     multilinguality='monolingual',\n...     pretty_name='My Text Classification Dataset',\n... )\n>>> card = DatasetCard.from_template(\n...     card_data,\n...     pretty_name=card_data.pretty_name,\n... )\n\n>>> # Using a Custom Template\n>>> card_data = DatasetCardData(\n...     language='en',\n...     license='mit',\n... )\n>>> card = DatasetCard.from_template(\n...     card_data=card_data,\n...     template_path='./src/huggingface_hub/templates/datasetcard_template.md',\n...     custom_template_var='custom value',  # will be replaced in template if it exists\n... )\n\n```", "```py\n>>> from huggingface_hub import SpaceCardData\n>>> card_data = SpaceCardData(\n...     title=\"Dreambooth Training\",\n...     license=\"mit\",\n...     sdk=\"gradio\",\n...     duplicated_from=\"multimodalart/dreambooth-training\"\n... )\n>>> card_data.to_dict()\n{'title': 'Dreambooth Training', 'sdk': 'gradio', 'license': 'mit', 'duplicated_from': 'multimodalart/dreambooth-training'}\n```", "```py\n>>> from huggingface_hub.repocard_data import model_index_to_eval_results\n>>> # Define a minimal model index\n>>> model_index = [\n...     {\n...         \"name\": \"my-cool-model\",\n...         \"results\": [\n...             {\n...                 \"task\": {\n...                     \"type\": \"image-classification\"\n...                 },\n...                 \"dataset\": {\n...                     \"type\": \"beans\",\n...                     \"name\": \"Beans\"\n...                 },\n...                 \"metrics\": [\n...                     {\n...                         \"type\": \"accuracy\",\n...                         \"value\": 0.9\n...                     }\n...                 ]\n...             }\n...         ]\n...     }\n... ]\n>>> model_name, eval_results = model_index_to_eval_results(model_index)\n>>> model_name\n'my-cool-model'\n>>> eval_results[0].task_type\n'image-classification'\n>>> eval_results[0].metric_type\n'accuracy'\n\n```", "```py\n>>> from huggingface_hub.repocard_data import eval_results_to_model_index, EvalResult\n>>> # Define minimal eval_results\n>>> eval_results = [\n...     EvalResult(\n...         task_type=\"image-classification\",  # Required\n...         dataset_type=\"beans\",  # Required\n...         dataset_name=\"Beans\",  # Required\n...         metric_type=\"accuracy\",  # Required\n...         metric_value=0.9,  # Required\n...     )\n... ]\n>>> eval_results_to_model_index(\"my-cool-model\", eval_results)\n[{'name': 'my-cool-model', 'results': [{'task': {'type': 'image-classification'}, 'dataset': {'name': 'Beans', 'type': 'beans'}, 'metrics': [{'type': 'accuracy', 'value': 0.9}]}]}]\n\n```", "```py\n>>> from huggingface_hub import metadata_eval_result\n>>> results = metadata_eval_result(\n...         model_pretty_name=\"RoBERTa fine-tuned on ReactionGIF\",\n...         task_pretty_name=\"Text Classification\",\n...         task_id=\"text-classification\",\n...         metrics_pretty_name=\"Accuracy\",\n...         metrics_id=\"accuracy\",\n...         metrics_value=0.2662102282047272,\n...         dataset_pretty_name=\"ReactionJPEG\",\n...         dataset_id=\"julien-c/reactionjpeg\",\n...         dataset_config=\"default\",\n...         dataset_split=\"test\",\n... )\n>>> results == {\n...     'model-index': [\n...         {\n...             'name': 'RoBERTa fine-tuned on ReactionGIF',\n...             'results': [\n...                 {\n...                     'task': {\n...                         'type': 'text-classification',\n...                         'name': 'Text Classification'\n...                     },\n...                     'dataset': {\n...                         'name': 'ReactionJPEG',\n...                         'type': 'julien-c/reactionjpeg',\n...                         'config': 'default',\n...                         'split': 'test'\n...                     },\n...                     'metrics': [\n...                         {\n...                             'type': 'accuracy',\n...                             'value': 0.2662102282047272,\n...                             'name': 'Accuracy',\n...                             'verified': False\n...                         }\n...                     ]\n...                 }\n...             ]\n...         }\n...     ]\n... }\nTrue\n\n```", "```py\n>>> from huggingface_hub import metadata_update\n>>> metadata = {'model-index': [{'name': 'RoBERTa fine-tuned on ReactionGIF',\n...             'results': [{'dataset': {'name': 'ReactionGIF',\n...                                      'type': 'julien-c/reactiongif'},\n...                           'metrics': [{'name': 'Recall',\n...                                        'type': 'recall',\n...                                        'value': 0.7762102282047272}],\n...                          'task': {'name': 'Text Classification',\n...                                   'type': 'text-classification'}}]}]}\n>>> url = metadata_update(\"hf-internal-testing/reactiongif-roberta-card\", metadata)\n\n```"]