- en: Deferring Executions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/accelerate/concept_guides/deferring_execution](https://huggingface.co/docs/accelerate/concept_guides/deferring_execution)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run your usual script, instructions are executed in order. Using ðŸ¤—
    Accelerate to deploy your script on several GPUs at the same time introduces a
    complication: while each process executes all instructions in order, some may
    be faster than others.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You might need to wait for all processes to have reached a certain point before
    executing a given instruction. For instance, you shouldnâ€™t save a model before
    being sure every process is done with training, and you wouldnâ€™t want to continue
    training before all the model weights have been loaded in. To do this, just write
    the following line in your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This instruction will block all the processes that arrive first until all the
    other processes have reached that point (if you run your script on just one GPU
    or CPU, this wonâ€™t do anything).
  prefs: []
  type: TYPE_NORMAL
- en: 'A few example cases of when to use this utility are listed below:'
  prefs: []
  type: TYPE_NORMAL
- en: Some of these are utilized with the [main_process_first()](/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator.main_process_first)
    context manager, which utilizes [wait_for_everyone()](/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator.wait_for_everyone)
    to run a particular set of code on the main process beforehand before triggering
    and launching the other processes
  prefs: []
  type: TYPE_NORMAL
- en: Downloading a Dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When downloading a dataset, you should download it first on the main process
    and then load the cached dataset afterward
  prefs: []
  type: TYPE_NORMAL
- en: '`load_dataset` will perform a lock under the hood to stop multiple downloads
    from happening at once, but if you are downloading something not using this library
    you should use this method.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Under the hood this is the same as calling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Saving the state_dict
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When saving the `state_dict` of the model, since you would normally save one
    file on just the main process you should specify that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Loading in the state_dict
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When loading in the `state_dict` to a model, optimizer, or scheduler, you should
    wait for all workers to have the weights loaded in before moving on to training
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Applying a multi-worker CPU operation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Applying a `map()` operation on multiple workers, such as tokenizing should
    be done on the main process first, and then propagated to each one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Applying checks such as Early Stopping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To have a check that works with a flag set by a particular process, the `set_trigger`
    and `check_trigger` API should be used. Useful examples for doing so can include
    situations such as using early stopping and monitoring the loss (as each loss
    slightly differs on each process).
  prefs: []
  type: TYPE_NORMAL
- en: 'Call [Accelerator.set_trigger()](/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator.set_trigger)
    when your condition has been met, and [Accelerator.check_trigger()](/docs/accelerate/v0.27.2/en/package_reference/accelerator#accelerate.Accelerator.check_trigger)
    when checking if that condition has been met in any process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
