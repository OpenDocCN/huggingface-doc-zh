["```py\npip install timm\n```", "```py\n>>> import timm\n\n>>> m = timm.create_model('mobilenetv3_large_100', pretrained=True)\n>>> m.eval()\n```", "```py\n>>> import timm\n>>> from pprint import pprint\n>>> model_names = timm.list_models(pretrained=True)\n>>> pprint(model_names)\n[\n    'adv_inception_v3',\n    'cspdarknet53',\n    'cspresnext50',\n    'densenet121',\n    'densenet161',\n    'densenet169',\n    'densenet201',\n    'densenetblur121d',\n    'dla34',\n    'dla46_c',\n]\n```", "```py\n>>> import timm\n>>> from pprint import pprint\n>>> model_names = timm.list_models('*resne*t*')\n>>> pprint(model_names)\n[\n    'cspresnet50',\n    'cspresnet50d',\n    'cspresnet50w',\n    'cspresnext50',\n    ...\n]\n```", "```py\n>>> model = timm.create_model('mobilenetv3_large_100', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)\n```", "```py\n>>> import timm\n>>> import torch\n>>> x = torch.randn(1, 3, 224, 224)\n>>> model = timm.create_model('mobilenetv3_large_100', pretrained=True)\n>>> features = model.forward_features(x)\n>>> print(features.shape)\ntorch.Size([1, 960, 7, 7])\n```", "```py\n>>> timm.data.create_transform((3, 224, 224))\nCompose(\n    Resize(size=256, interpolation=bilinear, max_size=None, antialias=None)\n    CenterCrop(size=(224, 224))\n    ToTensor()\n    Normalize(mean=tensor([0.4850, 0.4560, 0.4060]), std=tensor([0.2290, 0.2240, 0.2250]))\n)\n```", "```py\n>>> model.pretrained_cfg\n{'url': 'https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/mobilenetv3_large_100_ra-f55367f5.pth',\n 'num_classes': 1000,\n 'input_size': (3, 224, 224),\n 'pool_size': (7, 7),\n 'crop_pct': 0.875,\n 'interpolation': 'bicubic',\n 'mean': (0.485, 0.456, 0.406),\n 'std': (0.229, 0.224, 0.225),\n 'first_conv': 'conv_stem',\n 'classifier': 'classifier',\n 'architecture': 'mobilenetv3_large_100'}\n```", "```py\n>>> timm.data.resolve_data_config(model.pretrained_cfg)\n{'input_size': (3, 224, 224),\n 'interpolation': 'bicubic',\n 'mean': (0.485, 0.456, 0.406),\n 'std': (0.229, 0.224, 0.225),\n 'crop_pct': 0.875}\n```", "```py\n>>> data_cfg = timm.data.resolve_data_config(model.pretrained_cfg)\n>>> transform = timm.data.create_transform(**data_cfg)\n>>> transform\nCompose(\n    Resize(size=256, interpolation=bicubic, max_size=None, antialias=None)\n    CenterCrop(size=(224, 224))\n    ToTensor()\n    Normalize(mean=tensor([0.4850, 0.4560, 0.4060]), std=tensor([0.2290, 0.2240, 0.2250]))\n)\n```", "```py\n>>> import requests\n>>> from PIL import Image\n>>> from io import BytesIO\n>>> url = 'https://datasets-server.huggingface.co/assets/imagenet-1k/--/default/test/12/image/image.jpg'\n>>> image = Image.open(requests.get(url, stream=True).raw)\n>>> image\n```", "```py\n>>> model = timm.create_model('mobilenetv3_large_100', pretrained=True).eval()\n>>> transform = timm.data.create_transform(\n    **timm.data.resolve_data_config(model.pretrained_cfg)\n)\n```", "```py\n>>> image_tensor = transform(image)\n>>> image_tensor.shape\ntorch.Size([3, 224, 224])\n```", "```py\n>>> output = model(image_tensor.unsqueeze(0))\n>>> output.shape\ntorch.Size([1, 1000])\n```", "```py\n>>> probabilities = torch.nn.functional.softmax(output[0], dim=0)\n>>> probabilities.shape\ntorch.Size([1000])\n```", "```py\n>>> values, indices = torch.topk(probabilities, 5)\n>>> indices\ntensor([162, 166, 161, 164, 167])\n```", "```py\n>>> IMAGENET_1k_URL = 'https://storage.googleapis.com/bit_models/ilsvrc2012_wordnet_lemmas.txt'\n>>> IMAGENET_1k_LABELS = requests.get(IMAGENET_1k_URL).text.strip().split('\\n')\n>>> [{'label': IMAGENET_1k_LABELS[idx], 'value': val.item()} for val, idx in zip(values, indices)]\n[{'label': 'beagle', 'value': 0.8486220836639404},\n {'label': 'Walker_hound, Walker_foxhound', 'value': 0.03753996267914772},\n {'label': 'basset, basset_hound', 'value': 0.024628572165966034},\n {'label': 'bluetick', 'value': 0.010317106731235981},\n {'label': 'English_foxhound', 'value': 0.006958036217838526}]\n```"]