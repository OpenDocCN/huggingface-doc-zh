["```py\npip install transformers datasets evaluate\n```", "```py\n>>> from huggingface_hub import notebook_login\n\n>>> notebook_login()\n```", "```py\n>>> from datasets import load_dataset\n\n>>> eli5 = load_dataset(\"eli5\", split=\"train_asks[:5000]\")\n```", "```py\n>>> eli5 = eli5.train_test_split(test_size=0.2)\n```", "```py\n>>> eli5[\"train\"][0]\n{'answers': {'a_id': ['c3d1aib', 'c3d4lya'],\n  'score': [6, 3],\n  'text': [\"The velocity needed to remain in orbit is equal to the square root of Newton's constant times the mass of earth divided by the distance from the center of the earth. I don't know the altitude of that specific mission, but they're usually around 300 km. That means he's going 7-8 km/s.\\n\\nIn space there are no other forces acting on either the shuttle or the guy, so they stay in the same position relative to each other. If he were to become unable to return to the ship, he would presumably run out of oxygen, or slowly fall into the atmosphere and burn up.\",\n   \"Hope you don't mind me asking another question, but why aren't there any stars visible in this photo?\"]},\n 'answers_urls': {'url': []},\n 'document': '',\n 'q_id': 'nyxfp',\n 'selftext': '_URL_0_\\n\\nThis was on the front page earlier and I have a few questions about it. Is it possible to calculate how fast the astronaut would be orbiting the earth? Also how does he stay close to the shuttle so that he can return safely, i.e is he orbiting at the same speed and can therefore stay next to it? And finally if his propulsion system failed, would he eventually re-enter the atmosphere and presumably die?',\n 'selftext_urls': {'url': ['http://apod.nasa.gov/apod/image/1201/freeflyer_nasa_3000.jpg']},\n 'subreddit': 'askscience',\n 'title': 'Few questions about this space walk photograph.',\n 'title_urls': {'url': []}}\n```", "```py\n>>> from transformers import AutoTokenizer\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"distilgpt2\")\n```", "```py\n>>> eli5 = eli5.flatten()\n>>> eli5[\"train\"][0]\n{'answers.a_id': ['c3d1aib', 'c3d4lya'],\n 'answers.score': [6, 3],\n 'answers.text': [\"The velocity needed to remain in orbit is equal to the square root of Newton's constant times the mass of earth divided by the distance from the center of the earth. I don't know the altitude of that specific mission, but they're usually around 300 km. That means he's going 7-8 km/s.\\n\\nIn space there are no other forces acting on either the shuttle or the guy, so they stay in the same position relative to each other. If he were to become unable to return to the ship, he would presumably run out of oxygen, or slowly fall into the atmosphere and burn up.\",\n  \"Hope you don't mind me asking another question, but why aren't there any stars visible in this photo?\"],\n 'answers_urls.url': [],\n 'document': '',\n 'q_id': 'nyxfp',\n 'selftext': '_URL_0_\\n\\nThis was on the front page earlier and I have a few questions about it. Is it possible to calculate how fast the astronaut would be orbiting the earth? Also how does he stay close to the shuttle so that he can return safely, i.e is he orbiting at the same speed and can therefore stay next to it? And finally if his propulsion system failed, would he eventually re-enter the atmosphere and presumably die?',\n 'selftext_urls.url': ['http://apod.nasa.gov/apod/image/1201/freeflyer_nasa_3000.jpg'],\n 'subreddit': 'askscience',\n 'title': 'Few questions about this space walk photograph.',\n 'title_urls.url': []}\n```", "```py\n>>> def preprocess_function(examples):\n...     return tokenizer([\" \".join(x) for x in examples[\"answers.text\"]])\n```", "```py\n>>> tokenized_eli5 = eli5.map(\n...     preprocess_function,\n...     batched=True,\n...     num_proc=4,\n...     remove_columns=eli5[\"train\"].column_names,\n... )\n```", "```py\n>>> block_size = 128\n\n>>> def group_texts(examples):\n...     # Concatenate all texts.\n...     concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}\n...     total_length = len(concatenated_examples[list(examples.keys())[0]])\n...     # We drop the small remainder, we could add padding if the model supported it instead of this drop, you can\n...     # customize this part to your needs.\n...     if total_length >= block_size:\n...         total_length = (total_length // block_size) * block_size\n...     # Split by chunks of block_size.\n...     result = {\n...         k: [t[i : i + block_size] for i in range(0, total_length, block_size)]\n...         for k, t in concatenated_examples.items()\n...     }\n...     result[\"labels\"] = result[\"input_ids\"].copy()\n...     return result\n```", "```py\n>>> lm_dataset = tokenized_eli5.map(group_texts, batched=True, num_proc=4)\n```", "```py\n>>> from transformers import DataCollatorForLanguageModeling\n\n>>> tokenizer.pad_token = tokenizer.eos_token\n>>> data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)\n```", "```py\n>>> from transformers import DataCollatorForLanguageModeling\n\n>>> data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False, return_tensors=\"tf\")\n```", "```py\n>>> from transformers import AutoModelForCausalLM, TrainingArguments, Trainer\n\n>>> model = AutoModelForCausalLM.from_pretrained(\"distilgpt2\")\n```", "```py\n>>> training_args = TrainingArguments(\n...     output_dir=\"my_awesome_eli5_clm-model\",\n...     evaluation_strategy=\"epoch\",\n...     learning_rate=2e-5,\n...     weight_decay=0.01,\n...     push_to_hub=True,\n... )\n\n>>> trainer = Trainer(\n...     model=model,\n...     args=training_args,\n...     train_dataset=lm_dataset[\"train\"],\n...     eval_dataset=lm_dataset[\"test\"],\n...     data_collator=data_collator,\n... )\n\n>>> trainer.train()\n```", "```py\n>>> import math\n\n>>> eval_results = trainer.evaluate()\n>>> print(f\"Perplexity: {math.exp(eval_results['eval_loss']):.2f}\")\nPerplexity: 49.61\n```", "```py\n>>> trainer.push_to_hub()\n```", "```py\n>>> from transformers import create_optimizer, AdamWeightDecay\n\n>>> optimizer = AdamWeightDecay(learning_rate=2e-5, weight_decay_rate=0.01)\n```", "```py\n>>> from transformers import TFAutoModelForCausalLM\n\n>>> model = TFAutoModelForCausalLM.from_pretrained(\"distilgpt2\")\n```", "```py\n>>> tf_train_set = model.prepare_tf_dataset(\n...     lm_dataset[\"train\"],\n...     shuffle=True,\n...     batch_size=16,\n...     collate_fn=data_collator,\n... )\n\n>>> tf_test_set = model.prepare_tf_dataset(\n...     lm_dataset[\"test\"],\n...     shuffle=False,\n...     batch_size=16,\n...     collate_fn=data_collator,\n... )\n```", "```py\n>>> import tensorflow as tf\n\n>>> model.compile(optimizer=optimizer)  # No loss argument!\n```", "```py\n>>> from transformers.keras_callbacks import PushToHubCallback\n\n>>> callback = PushToHubCallback(\n...     output_dir=\"my_awesome_eli5_clm-model\",\n...     tokenizer=tokenizer,\n... )\n```", "```py\n>>> model.fit(x=tf_train_set, validation_data=tf_test_set, epochs=3, callbacks=[callback])\n```", "```py\n>>> prompt = \"Somatic hypermutation allows the immune system to\"\n```", "```py\n>>> from transformers import pipeline\n\n>>> generator = pipeline(\"text-generation\", model=\"my_awesome_eli5_clm-model\")\n>>> generator(prompt)\n[{'generated_text': \"Somatic hypermutation allows the immune system to be able to effectively reverse the damage caused by an infection.\\n\\n\\nThe damage caused by an infection is caused by the immune system's ability to perform its own self-correcting tasks.\"}]\n```", "```py\n>>> from transformers import AutoTokenizer\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"my_awesome_eli5_clm-model\")\n>>> inputs = tokenizer(prompt, return_tensors=\"pt\").input_ids\n```", "```py\n>>> from transformers import AutoModelForCausalLM\n\n>>> model = AutoModelForCausalLM.from_pretrained(\"my_awesome_eli5_clm-model\")\n>>> outputs = model.generate(inputs, max_new_tokens=100, do_sample=True, top_k=50, top_p=0.95)\n```", "```py\n>>> tokenizer.batch_decode(outputs, skip_special_tokens=True)\n[\"Somatic hypermutation allows the immune system to react to drugs with the ability to adapt to a different environmental situation. In other words, a system of 'hypermutation' can help the immune system to adapt to a different environmental situation or in some cases even a single life. In contrast, researchers at the University of Massachusetts-Boston have found that 'hypermutation' is much stronger in mice than in humans but can be found in humans, and that it's not completely unknown to the immune system. A study on how the immune system\"]\n```", "```py\n>>> from transformers import AutoTokenizer\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"my_awesome_eli5_clm-model\")\n>>> inputs = tokenizer(prompt, return_tensors=\"tf\").input_ids\n```", "```py\n>>> from transformers import TFAutoModelForCausalLM\n\n>>> model = TFAutoModelForCausalLM.from_pretrained(\"my_awesome_eli5_clm-model\")\n>>> outputs = model.generate(input_ids=inputs, max_new_tokens=100, do_sample=True, top_k=50, top_p=0.95)\n```", "```py\n>>> tokenizer.batch_decode(outputs, skip_special_tokens=True)\n['Somatic hypermutation allows the immune system to detect the presence of other viruses as they become more prevalent. Therefore, researchers have identified a high proportion of human viruses. The proportion of virus-associated viruses in our study increases with age. Therefore, we propose a simple algorithm to detect the presence of these new viruses in our samples as a sign of improved immunity. A first study based on this algorithm, which will be published in Science on Friday, aims to show that this finding could translate into the development of a better vaccine that is more effective for']\n```"]