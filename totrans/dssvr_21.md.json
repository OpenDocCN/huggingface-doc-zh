["```py\nr = requests.get(\"https://datasets-server.huggingface.co/parquet?dataset=blog_authorship_corpus\")\nj = r.json()\nurls = [f['url'] for f in j['parquet_files'] if f['split'] == 'train']\nurls\n['https://huggingface.co/datasets/blog_authorship_corpus/resolve/refs%2Fconvert%2Fparquet/blog_authorship_corpus/train/0000.parquet',\n 'https://huggingface.co/datasets/blog_authorship_corpus/resolve/refs%2Fconvert%2Fparquet/blog_authorship_corpus/train/0001.parquet']\n```", "```py\nimport polars as pl\n\ndf = (\n    pl.read_parquet(\"https://huggingface.co/datasets/blog_authorship_corpus/resolve/refs%2Fconvert%2Fparquet/blog_authorship_corpus/train/0000.parquet\")\n    .groupby(\"horoscope\")\n    .agg(\n        [\n            pl.count(),\n            pl.col(\"text\").str.n_chars().mean().alias(\"avg_blog_length\")\n        ]\n    )\n    .sort(\"avg_blog_length\", descending=True)\n    .limit(5)\n)\nprint(df)\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 horoscope \u2506 count \u2506 avg_blog_length \u2502\n\u2502 ---       \u2506 ---   \u2506 ---             \u2502\n\u2502 str       \u2506 u32   \u2506 f64             \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Aquarius  \u2506 34062 \u2506 1129.218836     \u2502\n\u2502 Cancer    \u2506 41509 \u2506 1098.366812     \u2502\n\u2502 Capricorn \u2506 33961 \u2506 1073.2002       \u2502\n\u2502 Libra     \u2506 40302 \u2506 1072.071833     \u2502\n\u2502 Leo       \u2506 40587 \u2506 1064.053687     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```", "```py\nimport polars as pl\ndf = (\n    pl.concat([pl.read_parquet(url) for url in urls])\n    .groupby(\"horoscope\")\n    .agg(\n        [\n            pl.count(),\n            pl.col(\"text\").str.n_chars().mean().alias(\"avg_blog_length\")\n        ]\n    )\n    .sort(\"avg_blog_length\", descending=True)\n    .limit(5)\n)\nprint(df)\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 horoscope   \u2506 count \u2506 avg_blog_length \u2502\n\u2502 ---         \u2506 ---   \u2506 ---             \u2502\n\u2502 str         \u2506 u32   \u2506 f64             \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Aquarius    \u2506 49568 \u2506 1125.830677     \u2502\n\u2502 Cancer      \u2506 63512 \u2506 1097.956087     \u2502\n\u2502 Libra       \u2506 60304 \u2506 1060.611054     \u2502\n\u2502 Capricorn   \u2506 49402 \u2506 1059.555261     \u2502\n\u2502 Sagittarius \u2506 50431 \u2506 1057.458984     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```", "```py\nimport polars as pl\n\nq = (\n    pl.scan_parquet(\"https://huggingface.co/datasets/blog_authorship_corpus/resolve/refs%2Fconvert%2Fparquet/blog_authorship_corpus/train/0000.parquet\")\n    .groupby(\"horoscope\")\n    .agg(\n        [\n            pl.count(),\n            pl.col(\"text\").str.n_chars().mean().alias(\"avg_blog_length\")\n        ]\n    )\n    .sort(\"avg_blog_length\", descending=True)\n    .limit(5)\n)\ndf = q.collect()\n```"]