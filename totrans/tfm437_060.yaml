- en: Benchmarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/transformers/v4.37.2/en/benchmarks](https://huggingface.co/docs/transformers/v4.37.2/en/benchmarks)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/8.c9dace0a.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Tip.c2ecdbf4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/DocNotebookDropdown.3e6b3817.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Markdown.fef84341.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/stores.c16bc1a5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
  prefs: []
  type: TYPE_NORMAL
- en: Hugging Faceâ€™s Benchmarking tools are deprecated and it is advised to use external
    Benchmarking libraries to measure the speed and memory complexity of Transformer
    models.
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s take a look at how ðŸ¤— Transformers models can be benchmarked, best practices,
    and already available benchmarks.
  prefs: []
  type: TYPE_NORMAL
- en: A notebook explaining in more detail how to benchmark ðŸ¤— Transformers models
    can be found [here](https://github.com/huggingface/notebooks/tree/main/examples/benchmark.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: How to benchmark ðŸ¤— Transformers models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The classes `PyTorchBenchmark` and `TensorFlowBenchmark` allow to flexibly benchmark
    ðŸ¤— Transformers models. The benchmark classes allow us to measure the *peak memory
    usage* and *required time* for both *inference* and *training*.
  prefs: []
  type: TYPE_NORMAL
- en: Hereby, *inference* is defined by a single forward pass, and *training* is defined
    by a single forward pass and backward pass.
  prefs: []
  type: TYPE_NORMAL
- en: The benchmark classes `PyTorchBenchmark` and `TensorFlowBenchmark` expect an
    object of type `PyTorchBenchmarkArguments` and `TensorFlowBenchmarkArguments`,
    respectively, for instantiation. `PyTorchBenchmarkArguments` and `TensorFlowBenchmarkArguments`
    are data classes and contain all relevant configurations for their corresponding
    benchmark class. In the following example, it is shown how a BERT model of type
    *bert-base-cased* can be benchmarked.
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, three arguments are given to the benchmark argument data classes, namely
    `models`, `batch_sizes`, and `sequence_lengths`. The argument `models` is required
    and expects a `list` of model identifiers from the [model hub](https://huggingface.co/models)
    The `list` arguments `batch_sizes` and `sequence_lengths` define the size of the
    `input_ids` on which the model is benchmarked. There are many more parameters
    that can be configured via the benchmark argument data classes. For more detail
    on these one can either directly consult the files `src/transformers/benchmark/benchmark_args_utils.py`,
    `src/transformers/benchmark/benchmark_args.py` (for PyTorch) and `src/transformers/benchmark/benchmark_args_tf.py`
    (for Tensorflow). Alternatively, running the following shell commands from root
    will print out a descriptive list of all configurable parameters for PyTorch and
    Tensorflow respectively.
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: An instantiated benchmark object can then simply be run by calling `benchmark.run()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: An instantiated benchmark object can then simply be run by calling `benchmark.run()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: By default, the *time* and the *required memory* for *inference* are benchmarked.
    In the example output above the first two sections show the result corresponding
    to *inference time* and *inference memory*. In addition, all relevant information
    about the computing environment, *e.g.* the GPU type, the system, the library
    versions, etcâ€¦ are printed out in the third section under *ENVIRONMENT INFORMATION*.
    This information can optionally be saved in a *.csv* file when adding the argument
    `save_to_csv=True` to `PyTorchBenchmarkArguments` and `TensorFlowBenchmarkArguments`
    respectively. In this case, every section is saved in a separate *.csv* file.
    The path to each *.csv* file can optionally be defined via the argument data classes.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of benchmarking pre-trained models via their model identifier, *e.g.*
    `bert-base-uncased`, the user can alternatively benchmark an arbitrary configuration
    of any available model class. In this case, a `list` of configurations must be
    inserted with the benchmark args as follows.
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Again, *inference time* and *required memory* for *inference* are measured,
    but this time for customized configurations of the `BertModel` class. This feature
    can especially be helpful when deciding for which configuration the model should
    be trained.
  prefs: []
  type: TYPE_NORMAL
- en: Benchmark best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section lists a couple of best practices one should be aware of when benchmarking
    a model.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, only single device benchmarking is supported. When benchmarking on
    GPU, it is recommended that the user specifies on which device the code should
    be run by setting the `CUDA_VISIBLE_DEVICES` environment variable in the shell,
    *e.g.* `export CUDA_VISIBLE_DEVICES=0` before running the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The option `no_multi_processing` should only be set to `True` for testing and
    debugging. To ensure accurate memory measurement it is recommended to run each
    memory benchmark in a separate process by making sure `no_multi_processing` is
    set to `True`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One should always state the environment information when sharing the results
    of a model benchmark. Results can vary heavily between different GPU devices,
    library versions, etc., so that benchmark results on their own are not very useful
    for the community.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing your benchmark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Previously all available core models (10 at the time) have been benchmarked
    for *inference time*, across many different settings: using PyTorch, with and
    without TorchScript, using TensorFlow, with and without XLA. All of those tests
    were done across CPUs (except for TensorFlow XLA) and GPUs.'
  prefs: []
  type: TYPE_NORMAL
- en: The approach is detailed in the [following blogpost](https://medium.com/huggingface/benchmarking-transformers-pytorch-and-tensorflow-e2917fb891c2)
    and the results are available [here](https://docs.google.com/spreadsheets/d/1sryqufw2D0XlUH4sq3e9Wnxu5EAQkaohzrJbd5HdQ_w/edit?usp=sharing).
  prefs: []
  type: TYPE_NORMAL
- en: With the new *benchmark* tools, it is easier than ever to share your benchmark
    results with the community
  prefs: []
  type: TYPE_NORMAL
- en: '[PyTorch Benchmarking Results](https://github.com/huggingface/transformers/tree/main/examples/pytorch/benchmarking/README.md).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TensorFlow Benchmarking Results](https://github.com/huggingface/transformers/tree/main/examples/tensorflow/benchmarking/README.md).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
