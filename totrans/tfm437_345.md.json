["```py\n>>> from transformers import FlavaConfig, FlavaModel, FlavaForPreTraining\n\n>>> # Initializing a FlavaConfig with style configuration\n>>> configuration = FlavaConfig()\n\n>>> # Initializing a FlavaModel and FlavaForPreTraining model (with random weights) from the style configuration\n>>> model = FlavaModel(configuration)\n>>> model_pre = FlavaForPreTraining(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n>>> configuration_pre = model_pre.config\n```", "```py\n>>> from transformers import FlavaTextConfig, FlavaTextModel\n\n>>> # Initializing a FlavaTextModel with  style configuration\n>>> configuration = FlavaTextConfig()\n\n>>> # Initializing a FlavaTextModel model (with random weights) from the style configuration\n>>> model = FlavaTextModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import FlavaImageConfig, FlavaImageModel\n\n>>> # Initializing a FlavaImageModel with  style configuration\n>>> configuration = FlavaImageConfig()\n\n>>> # Initializing a FlavaImageModel model (with random weights) from the style configuration\n>>> model = FlavaImageModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import FlavaMultimodalConfig, FlavaMultimodalModel\n\n>>> # Initializing a FlavaMultimodalModel with  style configuration\n>>> configuration = FlavaMultimodalConfig()\n\n>>> # Initializing a FlavaMultimodalModel model (with random weights) from the style configuration\n>>> model = FlavaMultimodalModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from PIL import Image\n>>> import requests\n>>> from transformers import AutoProcessor, FlavaModel\n\n>>> model = FlavaModel.from_pretrained(\"facebook/flava-full\")\n>>> processor = AutoProcessor.from_pretrained(\"facebook/flava-full\")\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> inputs = processor(text=[\"a photo of a cat\"], images=image, return_tensors=\"pt\", padding=True)\n\n>>> outputs = model(**inputs)\n\n>>> image_embeddings = outputs.image_embeddings\n>>> text_embeddings = outputs.text_embeddings\n>>> multimodal_embeddings = outputs.multimodal_embeddings\n\n>>> outputs.image_embeddings.shape\ntorch.Size([1, 197, 768])\n\n>>> text_embeddings.shape\ntorch.Size([1, 7, 768])\n\n>>> multimodal_embeddings.shape\ntorch.Size([1, 205, 768])\n```", "```py\n>>> from transformers import AutoTokenizer, FlavaTextModel\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"facebook/flava-full\")\n>>> model = FlavaTextModel.from_pretrained(\"facebook/flava-full\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoImageProcessor, FlavaImageModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/flava-full\")\n>>> model = FlavaImageModel.from_pretrained(\"facebook/flava-full\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 197, 768]\n```", "```py\n>>> from transformers import AutoTokenizer, FlavaMultimodalModel\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"facebook/flava-full\")\n>>> model = FlavaMultimodalModel.from_pretrained(\"facebook/flava-full\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```"]