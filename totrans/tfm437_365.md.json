["```py\n>>> from transformers import Pix2StructConfig, Pix2StructForConditionalGeneration\n\n>>> # Initializing a Pix2StructConfig with google/pix2struct-base style configuration\n>>> configuration = Pix2StructConfig()\n\n>>> # Initializing a Pix2StructForConditionalGeneration (with random weights) from the google/pix2struct-base style configuration\n>>> model = Pix2StructForConditionalGeneration(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n\n>>> # We can also initialize a Pix2StructConfig from a Pix2StructTextConfig and a Pix2StructVisionConfig\n\n>>> # Initializing a Pix2Struct text and Pix2Struct vision configuration\n>>> config_text = Pix2StructTextConfig()\n>>> config_vision = Pix2StructVisionConfig()\n\n>>> config = Pix2StructConfig.from_text_vision_configs(config_text, config_vision)\n```", "```py\n>>> from transformers import Pix2StructTextConfig, Pix2StructTextModel\n\n>>> # Initializing a Pix2StructTextConfig with google/pix2struct-base style configuration\n>>> configuration = Pix2StructTextConfig()\n\n>>> # Initializing a Pix2StructTextModel (with random weights) from the google/pix2struct-base style configuration\n>>> model = Pix2StructTextModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import Pix2StructVisionConfig, Pix2StructVisionModel\n\n>>> # Initializing a Pix2StructVisionConfig with google/pix2struct-base style configuration\n>>> configuration = Pix2StructVisionConfig()\n\n>>> # Initializing a Pix2StructVisionModel (with random weights) from the google/pix2struct-base style configuration\n>>> model = Pix2StructVisionModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoProcessor, Pix2StructTextModel\n\n>>> processor = AutoProcessor.from_pretrained(\"google/pix2struct-textcaps-base\")\n>>> model = Pix2StructTextModel.from_pretrained(\"google/pix2struct-textcaps-base\")\n\n>>> inputs = processor(text=\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n>>> loss = outputs.loss\n```", "```py\n>>> import requests\n>>> from PIL import Image\n>>> from transformers import AutoProcessor, Pix2StructVisionModel\n\n>>> image_processor = AutoProcessor.from_pretrained(\"google/pix2struct-textcaps-base\")\n>>> model = Pix2StructVisionModel.from_pretrained(\"google/pix2struct-textcaps-base\")\n\n>>> url = \"https://www.ilankelman.org/stopsigns/australia.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 2048, 768]\n```", "```py\n>>> from PIL import Image\n>>> import requests\n>>> from transformers import AutoProcessor, Pix2StructForConditionalGeneration\n\n>>> processor = AutoProcessor.from_pretrained(\"google/pix2struct-textcaps-base\")\n>>> model = Pix2StructForConditionalGeneration.from_pretrained(\"google/pix2struct-textcaps-base\")\n\n>>> url = \"https://www.ilankelman.org/stopsigns/australia.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> inputs = processor(images=image, return_tensors=\"pt\")\n\n>>> # autoregressive generation\n>>> generated_ids = model.generate(**inputs, max_new_tokens=50)\n>>> generated_text = processor.batch_decode(generated_ids, skip_special_tokens=True)[0]\n>>> print(generated_text)\nA stop sign is on a street corner.\n\n>>> # conditional generation\n>>> text = \"A picture of\"\n>>> inputs = processor(text=text, images=image, return_tensors=\"pt\", add_special_tokens=False)\n\n>>> generated_ids = model.generate(**inputs, max_new_tokens=50)\n>>> generated_text = processor.batch_decode(generated_ids, skip_special_tokens=True)[0]\n>>> print(generated_text)\nA picture of a stop sign with a red stop sign\n```", "```py\n>>> from PIL import Image\n>>> import requests\n>>> from transformers import AutoProcessor, Pix2StructForConditionalGeneration\n\n>>> processor = AutoProcessor.from_pretrained(\"google/pix2struct-base\")\n>>> model = Pix2StructForConditionalGeneration.from_pretrained(\"google/pix2struct-base\")\n\n>>> url = \"https://www.ilankelman.org/stopsigns/australia.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n>>> text = \"A stop sign is on the street corner.\"\n\n>>> inputs = processor(images=image, return_tensors=\"pt\")\n>>> labels = processor(text=text, return_tensors=\"pt\").input_ids\n\n>>> # forward pass\n>>> outputs = model(**inputs, labels=labels)\n>>> loss = outputs.loss\n>>> print(f\"{loss.item():.5f}\")\n5.94282\n```"]