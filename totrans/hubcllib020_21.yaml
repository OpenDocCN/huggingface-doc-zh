- en: Webhooks Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/huggingface_hub/guides/webhooks_server](https://huggingface.co/docs/huggingface_hub/guides/webhooks_server)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/start.81f0ceaa.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/scheduler.6062bdaf.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/singletons.3c2729d2.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/paths.566d2d8a.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/app.77e31cee.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/index.4bca734e.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/0.d6dfa8c0.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/18.8ded9893.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Tip.b9ac1f03.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/CodeBlock.fa01571c.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Heading.723dceba.js">
  prefs: []
  type: TYPE_NORMAL
- en: Webhooks are a foundation for MLOps-related features. They allow you to listen
    for new changes on specific repos or to all repos belonging to particular users/organizations
    you’re interested in following. This guide will explain how to leverage `huggingface_hub`
    to create a server listening to webhooks and deploy it to a Space. It assumes
    you are familiar with the concept of webhooks on the Huggingface Hub. To learn
    more about webhooks themselves, you can read this [guide](https://huggingface.co/docs/hub/webhooks)
    first.
  prefs: []
  type: TYPE_NORMAL
- en: The base class that we will use in this guide is [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer).
    It is a class for easily configuring a server that can receive webhooks from the
    Huggingface Hub. The server is based on a [Gradio](https://gradio.app/) app. It
    has a UI to display instructions for you or your users and an API to listen to
    webhooks.
  prefs: []
  type: TYPE_NORMAL
- en: To see a running example of a webhook server, check out the [Spaces CI Bot](https://huggingface.co/spaces/spaces-ci-bot/webhook)
    one. It is a Space that launches ephemeral environments when a PR is opened on
    a Space.
  prefs: []
  type: TYPE_NORMAL
- en: This is an [experimental feature](../package_reference/environment_variables#hfhubdisableexperimentalwarning).
    This means that we are still working on improving the API. Breaking changes might
    be introduced in the future without prior notice. Make sure to pin the version
    of `huggingface_hub` in your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Create an endpoint
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Implementing a webhook endpoint is as simple as decorating a function. Let’s
    see a first example to explain the main concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this snippet in a file called `''app.py''` and run it with `''python app.py''`.
    You should see a message like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Good job! You just launched a webhook server! Let’s break down what happened
    exactly:'
  prefs: []
  type: TYPE_NORMAL
- en: By decorating a function with [webhook_endpoint()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.webhook_endpoint),
    a [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)
    object has been created in the background. As you can see, this server is a Gradio
    app running on [http://127.0.0.1:7860](http://127.0.0.1:7860). If you open this
    URL in your browser, you will see a landing page with instructions about the registered
    webhooks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Gradio app is a FastAPI server under the hood. A new POST route `/webhooks/trigger_training`
    has been added to it. This is the route that will listen to webhooks and run the
    `trigger_training` function when triggered. FastAPI will automatically parse the
    payload and pass it to the function as a [WebhookPayload](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhookPayload)
    object. This is a `pydantic` object that contains all the information about the
    event that triggered the webhook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Gradio app also opened a tunnel to receive requests from the internet.
    This is the interesting part: you can configure a Webhook on [https://huggingface.co/settings/webhooks](https://huggingface.co/settings/webhooks)
    pointing to your local machine. This is useful for debugging your webhook server
    and quickly iterating before deploying it to a Space.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the logs also tell you that your server is currently not secured by
    a secret. This is not problematic for local debugging but is to keep in mind for
    later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, the server is started at the end of your script. If you are running
    it in a notebook, you can start the server manually by calling `decorated_function.run()`.
    Since a unique server is used, you only have to start the server once even if
    you have multiple endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Configure a Webhook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have a webhook server running, you want to configure a Webhook
    to start receiving messages. Go to [https://huggingface.co/settings/webhooks](https://huggingface.co/settings/webhooks),
    click on “Add a new webhook” and configure your Webhook. Set the target repositories
    you want to watch and the Webhook URL, here `https://1fadb0f52d8bf825fc.gradio.live/webhooks/trigger_training`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/615611df3cad938ddc39a892ef73e17d.png)'
  prefs: []
  type: TYPE_IMG
- en: And that’s it! You can now trigger that webhook by updating the target repository
    (e.g. push a commit). Check the Activity tab of your Webhook to see the events
    that have been triggered. Now that you have a working setup, you can test it and
    quickly iterate. If you modify your code and restart the server, your public URL
    might change. Make sure to update the webhook configuration on the Hub if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy to a Space
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have a working webhook server, the goal is to deploy it to a Space.
    Go to [https://huggingface.co/new-space](https://huggingface.co/new-space) to
    create a Space. Give it a name, select the Gradio SDK and click on “Create Space”.
    Upload your code to the Space in a file called `app.py`. Your Space will start
    automatically! For more details about Spaces, please refer to this [guide](https://huggingface.co/docs/hub/spaces-overview).
  prefs: []
  type: TYPE_NORMAL
- en: Your webhook server is now running on a public Space. If most cases, you will
    want to secure it with a secret. Go to your Space settings > Section “Repository
    secrets” > “Add a secret”. Set the `WEBHOOK_SECRET` environment variable to the
    value of your choice. Go back to the [Webhooks settings](https://huggingface.co/settings/webhooks)
    and set the secret in the webhook configuration. Now, only requests with the correct
    secret will be accepted by your server.
  prefs: []
  type: TYPE_NORMAL
- en: And this is it! Your Space is now ready to receive webhooks from the Hub. Please
    keep in mind that if you run the Space on a free ‘cpu-basic’ hardware, it will
    be shut down after 48 hours of inactivity. If you need a permanent Space, you
    should consider setting to an [upgraded hardware](https://huggingface.co/docs/hub/spaces-gpus#hardware-specs).
  prefs: []
  type: TYPE_NORMAL
- en: Advanced usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The guide above explained the quickest way to setup a [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer).
    In this section, we will see how to customize it further.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple endpoints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can register multiple endpoints on the same server. For example, you might
    want to have one endpoint to trigger a training job and another one to trigger
    a model evaluation. You can do this by adding multiple `@webhook_endpoint` decorators:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Which will create two endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Custom server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get more flexibility, you can also create a [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)
    object directly. This is useful if you want to customize the landing page of your
    server. You can do this by passing a [Gradio UI](https://gradio.app/docs/#blocks)
    that will overwrite the default one. For example, you can add instructions for
    your users or add a form to manually trigger the webhooks. When creating a [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer),
    you can register new webhooks using the `add_webhook()` decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a complete example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We define a custom UI using Gradio blocks. This UI will be displayed on the
    landing page of the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We create a [WebhooksServer()](/docs/huggingface_hub/v0.20.3/en/package_reference/webhooks_server#huggingface_hub.WebhooksServer)
    object with a custom UI and a secret. The secret is optional and can be set with
    the `WEBHOOK_SECRET` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We register a webhook with an explicit name. This will create an endpoint at
    `/webhooks/say_hello`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We register a webhook with an implicit name. This will create an endpoint at
    `/webhooks/goodbye`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We start the server. This is optional as your server will automatically be started
    at the end of the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
