- en: Use with Spark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/datasets/use_with_spark](https://huggingface.co/docs/datasets/use_with_spark)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/datasets/v2.17.0/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/entry/start.146395b0.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/scheduler.bdbef820.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/singletons.98dc5b8b.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/index.8a885b74.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/paths.a483fec8.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/entry/app.e612c4fb.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/index.c0aea24a.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/nodes/0.5e8dbda6.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/nodes/54.f528658a.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/Tip.31005f7d.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/CodeBlock.6ccca92e.js">
    <link rel="modulepreload" href="/docs/datasets/v2.17.0/en/_app/immutable/chunks/Heading.2eb892cb.js">
  prefs: []
  type: TYPE_NORMAL
- en: This document is a quick introduction to using ðŸ¤— Datasets with Spark, with a
    particular focus on how to load a Spark DataFrame into a [Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset)
    object.
  prefs: []
  type: TYPE_NORMAL
- en: From there, you have fast access to any element and you can use it as a data
    loader to train models.
  prefs: []
  type: TYPE_NORMAL
- en: Load from Spark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A [Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset)
    object is a wrapper of an Arrow table, which allows fast reads from arrays in
    the dataset to PyTorch, TensorFlow and JAX tensors. The Arrow table is memory
    mapped from disk, which can load datasets bigger than your available RAM.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get a [Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset)
    from a Spark DataFrame using `Dataset.from_spark()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Spark workers write the dataset on disk in a cache directory as Arrow files,
    and the [Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset)
    is loaded from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can skip materialization by using `IterableDataset.from_spark()`,
    which returns an [IterableDataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.IterableDataset):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using `Dataset.from_spark()`, the resulting [Dataset](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset)
    is cached; if you call `Dataset.from_spark()` multiple times on the same DataFrame
    it wonâ€™t re-run the Spark job that writes the dataset as Arrow files on disk.
  prefs: []
  type: TYPE_NORMAL
- en: You can set the cache location by passing `cache_dir=` to `Dataset.from_spark()`.
    Make sure to use a disk that is available to both your workers and your current
    machine (the driver).
  prefs: []
  type: TYPE_NORMAL
- en: In a different session, a Spark DataFrame doesnâ€™t have the same [semantic hash](https://spark.apache.org/docs/3.2.0/api/python/reference/api/pyspark.sql.DataFrame.semanticHash.html),
    and it will rerun a Spark job and store it in a new cache.
  prefs: []
  type: TYPE_NORMAL
- en: Feature types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If your dataset is made of images, audio data or N-dimensional arrays, you
    can specify the `features=` argument in `Dataset.from_spark()` (or `IterableDataset.from_spark()`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can check the [Features](/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Features)
    documentation to know about all the feature types available.
  prefs: []
  type: TYPE_NORMAL
