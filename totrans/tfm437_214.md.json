["```py\npip install -U flash-attn --no-build-isolation\n```", "```py\n>>> import torch\n>>> from transformers import OPTForCausalLM, GPT2Tokenizer\n>>> device = \"cuda\" # the device to load the model onto\n\n>>> model = OPTForCausalLM.from_pretrained(\"facebook/opt-350m\", torch_dtype=torch.float16, attn_implementation=\"flash_attention_2\")\n>>> tokenizer = GPT2Tokenizer.from_pretrained(\"facebook/opt-350m\")\n\n>>> prompt = (\"A chat between a curious human and the Statue of Liberty.\\n\\nHuman: What is your name?\\nStatue: I am the \"\n              \"Statue of Liberty.\\nHuman: Where do you live?\\nStatue: New York City.\\nHuman: How long have you lived \"\n              \"there?\")\n\n>>> model_inputs = tokenizer([prompt], return_tensors=\"pt\").to(device)\n>>> model.to(device)\n\n>>> generated_ids = model.generate(**model_inputs, max_new_tokens=30, do_sample=False)\n>>> tokenizer.batch_decode(generated_ids)[0]\n'</s>A chat between a curious human and the Statue of Liberty.\\n\\nHuman: What is your name?\\nStatue: I am the Statue of Liberty.\\nHuman: Where do you live?\\nStatue: New York City.\\nHuman: How long have you lived there?\\nStatue: I have lived here for about a year.\\nHuman: What is your favorite place to eat?\\nStatue: I love'\n```", "```py\n>>> from transformers import OPTConfig, OPTModel\n\n>>> # Initializing a OPT facebook/opt-large style configuration\n>>> configuration = OPTConfig()\n\n>>> # Initializing a model (with random weights) from the facebook/opt-large style configuration\n>>> model = OPTModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoTokenizer, OPTModel\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"facebook/opt-350m\")\n>>> model = OPTModel.from_pretrained(\"facebook/opt-350m\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, OPTForCausalLM\n\n>>> model = OPTForCausalLM.from_pretrained(\"facebook/opt-350m\")\n>>> tokenizer = AutoTokenizer.from_pretrained(\"facebook/opt-350m\")\n\n>>> prompt = \"Hey, are you conscious? Can you talk to me?\"\n>>> inputs = tokenizer(prompt, return_tensors=\"pt\")\n\n>>> # Generate\n>>> generate_ids = model.generate(inputs.input_ids, max_length=30)\n>>> tokenizer.batch_decode(generate_ids, skip_special_tokens=True, clean_up_tokenization_spaces=False)[0]\n\"Hey, are you conscious? Can you talk to me?\\nI'm not conscious. I'm just a little bit of a weirdo.\"\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, OPTForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"ArthurZ/opt-350m-dummy-sc\")\n>>> model = OPTForSequenceClassification.from_pretrained(\"ArthurZ/opt-350m-dummy-sc\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_id = logits.argmax().item()\n>>> model.config.id2label[predicted_class_id]\n'LABEL_0'\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = OPTForSequenceClassification.from_pretrained(\"ArthurZ/opt-350m-dummy-sc\", num_labels=num_labels)\n\n>>> labels = torch.tensor([1])\n>>> loss = model(**inputs, labels=labels).loss\n>>> round(loss.item(), 2)\n1.71\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, OPTForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"ArthurZ/opt-350m-dummy-sc\")\n>>> model = OPTForSequenceClassification.from_pretrained(\"ArthurZ/opt-350m-dummy-sc\", problem_type=\"multi_label_classification\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_ids = torch.arange(0, logits.shape[-1])[torch.sigmoid(logits).squeeze(dim=0) > 0.5]\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = OPTForSequenceClassification.from_pretrained(\n...     \"ArthurZ/opt-350m-dummy-sc\", num_labels=num_labels, problem_type=\"multi_label_classification\"\n... )\n\n>>> labels = torch.sum(\n...     torch.nn.functional.one_hot(predicted_class_ids[None, :].clone(), num_classes=num_labels), dim=1\n... ).to(torch.float)\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, OPTForQuestionAnswering\n>>> import torch\n\n>>> torch.manual_seed(4)\n>>> tokenizer = AutoTokenizer.from_pretrained(\"facebook/opt-350m\")\n\n>>> # note: we are loading a OPTForQuestionAnswering from the hub here,\n>>> # so the head will be randomly initialized, hence the predictions will be random\n>>> model = OPTForQuestionAnswering.from_pretrained(\"facebook/opt-350m\")\n\n>>> question, text = \"Who was Jim Henson?\", \"Jim Henson was a nice puppet\"\n\n>>> inputs = tokenizer(question, text, return_tensors=\"pt\")\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> answer_start_index = outputs.start_logits.argmax()\n>>> answer_end_index = outputs.end_logits.argmax()\n\n>>> answer_offset = len(tokenizer(question)[0])\n\n>>> predict_answer_tokens = inputs.input_ids[\n...     0, answer_offset + answer_start_index : answer_offset + answer_end_index + 1\n... ]\n>>> predicted = tokenizer.decode(predict_answer_tokens)\n>>> predicted\n' a nice puppet'\n```", "```py\n>>> from transformers import AutoTokenizer, TFOPTModel\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"facebook/opt-350m\")\n>>> model = TFOPTModel.from_pretrained(\"facebook/opt-350m\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"tf\")\n>>> outputs = model(inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, TFOPTForCausalLM\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"facebook/opt-350m\")\n>>> model = TFOPTForCausalLM.from_pretrained(\"facebook/opt-350m\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"tf\")\n>>> outputs = model(inputs)\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxOPTModel\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"facebook/opt-350m\")\n>>> model = FlaxOPTModel.from_pretrained(\"facebook/opt-350m\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"jax\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxOPTForCausalLM\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"facebook/opt-350m\")\n>>> model = FlaxOPTForCausalLM.from_pretrained(\"facebook/opt-350m\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"np\")\n>>> outputs = model(**inputs)\n\n>>> # retrieve logts for next token\n>>> next_token_logits = outputs.logits[:, -1]\n```"]