- en: Multilingual models for inference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/transformers/v4.37.2/en/multilingual](https://huggingface.co/docs/transformers/v4.37.2/en/multilingual)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/313.b9048346.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/DocNotebookDropdown.3e6b3817.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
  prefs: []
  type: TYPE_NORMAL
- en: There are several multilingual models in ðŸ¤— Transformers, and their inference
    usage differs from monolingual models. Not *all* multilingual model usage is different
    though. Some models, like [bert-base-multilingual-uncased](https://huggingface.co/bert-base-multilingual-uncased),
    can be used just like a monolingual model. This guide will show you how to use
    multilingual models whose usage differs for inference.
  prefs: []
  type: TYPE_NORMAL
- en: XLM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'XLM has ten different checkpoints, only one of which is monolingual. The nine
    remaining model checkpoints can be split into two categories: the checkpoints
    that use language embeddings and those that donâ€™t.'
  prefs: []
  type: TYPE_NORMAL
- en: XLM with language embeddings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following XLM models use language embeddings to specify the language used
    at inference:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xlm-mlm-ende-1024` (Masked language modeling, English-German)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlm-mlm-enfr-1024` (Masked language modeling, English-French)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlm-mlm-enro-1024` (Masked language modeling, English-Romanian)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlm-mlm-xnli15-1024` (Masked language modeling, XNLI languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlm-mlm-tlm-xnli15-1024` (Masked language modeling + translation, XNLI languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlm-clm-enfr-1024` (Causal language modeling, English-French)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlm-clm-ende-1024` (Causal language modeling, English-German)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Language embeddings are represented as a tensor of the same shape as the `input_ids`
    passed to the model. The values in these tensors depend on the language used and
    are identified by the tokenizerâ€™s `lang2id` and `id2lang` attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, load the `xlm-clm-enfr-1024` checkpoint (Causal language modeling,
    English-French):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lang2id` attribute of the tokenizer displays this modelâ€™s languages and
    their ids:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create an example input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Set the language id as `"en"` and use it to define the language embedding. The
    language embedding is a tensor filled with `0` since that is the language id for
    English. This tensor should be the same size as `input_ids`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can pass the `input_ids` and language embedding to the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The [run_generation.py](https://github.com/huggingface/transformers/tree/main/examples/pytorch/text-generation/run_generation.py)
    script can generate text with language embeddings using the `xlm-clm` checkpoints.
  prefs: []
  type: TYPE_NORMAL
- en: XLM without language embeddings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following XLM models do not require language embeddings during inference:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xlm-mlm-17-1280` (Masked language modeling, 17 languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlm-mlm-100-1280` (Masked language modeling, 100 languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These models are used for generic sentence representations, unlike the previous
    XLM checkpoints.
  prefs: []
  type: TYPE_NORMAL
- en: BERT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following BERT models can be used for multilingual tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bert-base-multilingual-uncased` (Masked language modeling + Next sentence
    prediction, 102 languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bert-base-multilingual-cased` (Masked language modeling + Next sentence prediction,
    104 languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These models do not require language embeddings during inference. They should
    identify the language from the context and infer accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: XLM-RoBERTa
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following XLM-RoBERTa models can be used for multilingual tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xlm-roberta-base` (Masked language modeling, 100 languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xlm-roberta-large` (Masked language modeling, 100 languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XLM-RoBERTa was trained on 2.5TB of newly created and cleaned CommonCrawl data
    in 100 languages. It provides strong gains over previously released multilingual
    models like mBERT or XLM on downstream tasks like classification, sequence labeling,
    and question answering.
  prefs: []
  type: TYPE_NORMAL
- en: M2M100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following M2M100 models can be used for multilingual translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`facebook/m2m100_418M` (Translation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facebook/m2m100_1.2B` (Translation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, load the `facebook/m2m100_418M` checkpoint to translate from
    Chinese to English. You can set the source language in the tokenizer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Tokenize the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'M2M100 forces the target language id as the first generated token to translate
    to the target language. Set the `forced_bos_token_id` to `en` in the `generate`
    method to translate to English:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: MBart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following MBart models can be used for multilingual translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`facebook/mbart-large-50-one-to-many-mmt` (One-to-many multilingual machine
    translation, 50 languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facebook/mbart-large-50-many-to-many-mmt` (Many-to-many multilingual machine
    translation, 50 languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facebook/mbart-large-50-many-to-one-mmt` (Many-to-one multilingual machine
    translation, 50 languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facebook/mbart-large-50` (Multilingual translation, 50 languages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`facebook/mbart-large-cc25`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this example, load the `facebook/mbart-large-50-many-to-many-mmt` checkpoint
    to translate Finnish to English. You can set the source language in the tokenizer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Tokenize the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'MBart forces the target language id as the first generated token to translate
    to the target language. Set the `forced_bos_token_id` to `en` in the `generate`
    method to translate to English:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you are using the `facebook/mbart-large-50-many-to-one-mmt` checkpoint, you
    donâ€™t need to force the target language id as the first generated token otherwise
    the usage is the same.
  prefs: []
  type: TYPE_NORMAL
