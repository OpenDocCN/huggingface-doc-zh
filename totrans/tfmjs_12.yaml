- en: Server-side Inference in Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers.js/tutorials/node](https://huggingface.co/docs/transformers.js/tutorials/node)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers.js/main/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/entry/start.d68a6d16.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/scheduler.b108d059.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/singletons.e4b794f0.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/paths.0114e475.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/entry/app.c6513cb2.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/index.008de539.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/nodes/0.7513fd35.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/nodes/27.aba89b99.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/Tip.aeb15ab7.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/CodeBlock.3968c746.js">
    <link rel="modulepreload" href="/docs/transformers.js/main/en/_app/immutable/chunks/Heading.88bfeb84.js">
  prefs: []
  type: TYPE_NORMAL
- en: Although Transformers.js was originally designed to be used in the browser,
    it’s also able to run inference on the server. In this tutorial, we will design
    a simple Node.js API that uses Transformers.js for sentiment analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll also show you how to use the library in both CommonJS and ECMAScript
    modules, so you can choose the module system that works best for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[ECMAScript modules (ESM)](#ecmascript-modules-esm) - The official standard
    format to package JavaScript code for reuse. It’s the default module system in
    modern browsers, with modules imported using `import` and exported using `export`.
    Fortunately, starting with version 13.2.0, Node.js has stable support of ES modules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CommonJS](#commonjs) - The default module system in Node.js. In this system,
    modules are imported using `require()` and exported using `module.exports`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although you can always use the [Python library](https://github.com/huggingface/transformers)
    for server-side inference, using Transformers.js means that you can write all
    of your code in JavaScript (instead of having to set up and communicate with a
    separate Python process).
  prefs: []
  type: TYPE_NORMAL
- en: '**Useful links:**'
  prefs: []
  type: TYPE_NORMAL
- en: Source code ([ESM](https://github.com/xenova/transformers.js/tree/main/examples/node/esm/app.js)
    or [CommonJS](https://github.com/xenova/transformers.js/tree/main/examples/node/commonjs/app.js))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Documentation](https://huggingface.co/docs/transformers.js)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Node.js](https://nodejs.org/en/) version 18+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[npm](https://www.npmjs.com/) version 9+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by creating a new Node.js project and installing Transformers.js
    via [NPM](https://www.npmjs.com/package/@xenova/transformers):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, create a new file called `app.js`, which will be the entry point for our
    application. Depending on whether you’re using [ECMAScript modules](#ecmascript-modules-esm)
    or [CommonJS](#commonjs), you will need to do some things differently (see below).
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll also create a helper class called `MyClassificationPipeline` control
    the loading of the pipeline. It uses the [singleton pattern](https://en.wikipedia.org/wiki/Singleton_pattern)
    to lazily create a single instance of the pipeline when `getInstance` is first
    called, and uses this pipeline for all subsequent calls:'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript modules (ESM)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To indicate that your project uses ECMAScript modules, you need to add `"type":
    "module"` to your `package.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you will need to add the following imports to the top of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Following that, let’s import Transformers.js and define the `MyClassificationPipeline`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: CommonJS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Start by adding the following imports to the top of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Following that, let’s import Transformers.js and define the `MyClassificationPipeline`
    class. Since Transformers.js is an ESM module, we will need to dynamically import
    the library using the [`import()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import)
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Creating a basic HTTP server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, let’s create a basic server with the built-in [HTTP](https://nodejs.org/api/http.html#http)
    module. We will listen for requests made to the server (using the `/classify`
    endpoint), extract the `text` query parameter, and run this through the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we use lazy loading, the first request made to the server will also be
    responsible for loading the pipeline. If you would like to begin loading the pipeline
    as soon as the server starts running, you can add the following line of code after
    defining `MyClassificationPipeline`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To start the server, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The server should be live at [http://127.0.0.1:3000/](http://127.0.0.1:3000/),
    which you can visit in your web browser. You should see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is because we aren’t targeting the `/classify` endpoint with a valid `text`
    query parameter. Let’s try again, this time with a valid request. For example,
    you can visit [http://127.0.0.1:3000/classify?text=I%20love%20Transformers.js](http://127.0.0.1:3000/classify?text=I%20love%20Transformers.js)
    and you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Great! We’ve successfully created a basic HTTP server that uses Transformers.js
    to classify text.
  prefs: []
  type: TYPE_NORMAL
- en: (Optional) Customization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Model caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, the first time you run the application, it will download the model
    files and cache them on your file system (in `./node_modules/@xenova/transformers/.cache/`).
    All subsequent requests will then use this model. You can change the location
    of the cache by setting `env.cacheDir`. For example, to cache the model in the
    `.cache` directory in the current working directory, you can add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Use local models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to use local model files, you can set `env.localModelPath` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also disable loading of remote models by setting `env.allowRemoteModels`
    to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
