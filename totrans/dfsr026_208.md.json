["```py\n( num_train_timesteps: int = 1000 beta_start: float = 0.0001 beta_end: float = 0.02 beta_schedule: str = 'linear' trained_betas: Union = None solver_order: int = 2 prediction_type: str = 'epsilon' thresholding: bool = False dynamic_thresholding_ratio: float = 0.995 sample_max_value: float = 1.0 predict_x0: bool = True solver_type: str = 'bh2' lower_order_final: bool = True disable_corrector: List = [] solver_p: SchedulerMixin = None use_karras_sigmas: Optional = False timestep_spacing: str = 'linspace' steps_offset: int = 0 )\n```", "```py\n( model_output: FloatTensor *args sample: FloatTensor = None **kwargs ) \u2192 export const metadata = 'undefined';torch.FloatTensor\n```", "```py\n( this_model_output: FloatTensor *args last_sample: FloatTensor = None this_sample: FloatTensor = None order: int = None **kwargs ) \u2192 export const metadata = 'undefined';torch.FloatTensor\n```", "```py\n( model_output: FloatTensor *args sample: FloatTensor = None order: int = None **kwargs ) \u2192 export const metadata = 'undefined';torch.FloatTensor\n```", "```py\n( sample: FloatTensor *args **kwargs ) \u2192 export const metadata = 'undefined';torch.FloatTensor\n```", "```py\n( num_inference_steps: int device: Union = None )\n```", "```py\n( model_output: FloatTensor timestep: int sample: FloatTensor return_dict: bool = True ) \u2192 export const metadata = 'undefined';SchedulerOutput or tuple\n```", "```py\n( prev_sample: FloatTensor )\n```"]