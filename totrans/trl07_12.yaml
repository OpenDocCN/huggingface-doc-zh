- en: Reward Modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/trl/reward_trainer](https://huggingface.co/docs/trl/reward_trainer)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/trl/v0.7.10/en/_app/immutable/assets/0.e3b0c442.css" rel="modulepreload">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/entry/start.d9a24ea1.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/chunks/scheduler.9039eef2.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/chunks/singletons.9eef12cc.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/chunks/paths.1355483e.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/entry/app.5bef33b8.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/chunks/index.ded8f90d.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/nodes/0.abccdcd8.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/nodes/19.6d4a6c29.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/chunks/Docstring.a2ba2b54.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/chunks/Heading.f027f30d.js">
    <link rel="modulepreload" href="/docs/trl/v0.7.10/en/_app/immutable/chunks/CodeBlock.8580f3e8.js">
  prefs: []
  type: TYPE_NORMAL
- en: TRL supports custom reward modeling for anyone to perform reward modeling on
    their dataset and model.
  prefs: []
  type: TYPE_NORMAL
- en: Check out a complete flexible example at [`examples/scripts/reward_modeling.py`](https://github.com/huggingface/trl/tree/main/examples/scripts/reward_modeling.py).
  prefs: []
  type: TYPE_NORMAL
- en: Expected dataset format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)
    expects a very specific format for the dataset since the model will be trained
    on pairs of examples to predict which of the two is preferred. We provide an example
    from the [`Anthropic/hh-rlhf`](https://huggingface.co/datasets/Anthropic/hh-rlhf)
    dataset below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/108b7079a2ffc651b11289080d0cdc7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Therefore the final dataset object should contain two 4 entries at least if
    you use the default `RewardDataCollatorWithPadding` data collator. The entries
    should be named:'
  prefs: []
  type: TYPE_NORMAL
- en: '`input_ids_chosen`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask_chosen`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input_ids_rejected`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask_rejected`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the RewardTrainer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After preparing your dataset, you can use the [RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)
    in the same way as the `Trainer` class from ðŸ¤— Transformers. You should pass an
    `AutoModelForSequenceClassification` model to the [RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer),
    along with a [RewardConfig](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardConfig)
    which configures the hyperparameters of the training.
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging ðŸ¤— PEFT to train a reward model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just pass a `peft_config` in the keyword arguments of [RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer),
    and the trainer should automatically take care of converting the model into a
    PEFT model!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding a margin to the loss
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As in the [Llama 2 paper](https://huggingface.co/papers/2307.09288), you can
    add a margin to the loss by adding a `margin` column to the dataset. The reward
    collator will automatically pass it through and the loss will be computed accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: RewardConfig
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class trl.RewardConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/trainer/reward_config.py#L21)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`max_length` (`int`, *optional*, defaults to `None`) â€” The maximum length of
    the sequences in the batch. This argument is required if you want to use the default
    data collator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient_checkpointing` (`bool`, *optional*, defaults to `True`) â€” If True,
    use gradient checkpointing to save memory at the expense of slower backward pass.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RewardConfig collects all training arguments related to the [RewardTrainer](/docs/trl/v0.7.10/en/reward_trainer#trl.RewardTrainer)
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Using `HfArgumentParser` we can turn this class into [argparse](https://docs.python.org/3/library/argparse#module-argparse)
    arguments that can be specified on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: RewardTrainer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class trl.RewardTrainer`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/trl/blob/v0.7.10/trl/trainer/reward_trainer.py#L36)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The RewardTrainer can be used to train your custom Reward Model. It is a subclass
    of the `transformers.Trainer` class and inherits all of its attributes and methods.
    It is recommended to use an `AutoModelForSequenceClassification` as the reward
    model. The reward model should be trained on a dataset of paired examples, where
    each example is a tuple of two sequences. The reward model should be trained to
    predict which example in the pair is more relevant to the task at hand.
  prefs: []
  type: TYPE_NORMAL
- en: The reward trainer expects a very specific format for the dataset. The dataset
    should contain two 4 entries at least if you donâ€™t use the default `RewardDataCollatorWithPadding`
    data collator. The entries should be named
  prefs: []
  type: TYPE_NORMAL
- en: '`input_ids_chosen`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask_chosen`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input_ids_rejected`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask_rejected`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, you can also pass a `margin` entry to the dataset. This entry should
    contain the margin used to modulate the loss of the reward model as outlined in
    [https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/](https://ai.meta.com/research/publications/llama-2-open-foundation-and-fine-tuned-chat-models/).
    If you donâ€™t pass a margin, no margin will be used.
  prefs: []
  type: TYPE_NORMAL
