- en: Interact with the Hub through the Filesystem API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/huggingface_hub/guides/hf_file_system](https://huggingface.co/docs/huggingface_hub/guides/hf_file_system)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/start.81f0ceaa.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/scheduler.6062bdaf.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/singletons.3c2729d2.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/paths.566d2d8a.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/app.77e31cee.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/index.4bca734e.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/0.d6dfa8c0.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/7.4db25a4a.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/CodeBlock.fa01571c.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Heading.723dceba.js">
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the [HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi),
    the `huggingface_hub` library provides [HfFileSystem](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_file_system#huggingface_hub.HfFileSystem),
    a pythonic [fsspec-compatible](https://filesystem-spec.readthedocs.io/en/latest/)
    file interface to the Hugging Face Hub. The [HfFileSystem](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_file_system#huggingface_hub.HfFileSystem)
    builds of top of the [HfApi](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi)
    and offers typical filesystem style operations like `cp`, `mv`, `ls`, `du`, `glob`,
    `get_file`, and `put_file`.
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The optional `revision` argument can be passed to run an operation from a specific
    commit such as a branch, tag name, or a commit hash.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Python’s built-in `open`, `fsspec`’s `open` defaults to binary mode,
    `"rb"`. This means you must explicitly set mode as `"r"` for reading and `"w"`
    for writing in text mode. Appending to a file (modes `"a"` and `"ab"`) is not
    supported yet.
  prefs: []
  type: TYPE_NORMAL
- en: Integrations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The [HfFileSystem](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_file_system#huggingface_hub.HfFileSystem)
    can be used with any library that integrates `fsspec`, provided the URL follows
    the scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `repo_type_prefix` is `datasets/` for datasets, `spaces/` for spaces, and
    models don’t need a prefix in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some interesting integrations where [HfFileSystem](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_file_system#huggingface_hub.HfFileSystem)
    simplifies interacting with the Hub are listed below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reading/writing a [Pandas](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html#reading-writing-remote-files)
    DataFrame from/to a Hub repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The same workflow can also be used for [Dask](https://docs.dask.org/en/stable/how-to/connect-to-remote-data.html)
    and [Polars](https://pola-rs.github.io/polars/py-polars/html/reference/io.html)
    DataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Querying (remote) Hub files with [DuckDB](https://duckdb.org/docs/guides/python/filesystems):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the Hub as an array store with [Zarr](https://zarr.readthedocs.io/en/stable/tutorial.html#io-with-fsspec):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In many cases, you must be logged in with a Hugging Face account to interact
    with the Hub. Refer to the [Authentication](../quick-start#authentication) section
    of the documentation to learn more about authentication methods on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to login programmatically by passing your `token` as an
    argument to [HfFileSystem](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_file_system#huggingface_hub.HfFileSystem):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you login this way, be careful not to accidentally leak the token when sharing
    your source code!
  prefs: []
  type: TYPE_NORMAL
