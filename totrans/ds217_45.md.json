["```py\n>>> from datasets import load_dataset\n>>> dataset = load_dataset(\"csv\", data_files=\"my_file.csv\")\n\n# load multiple CSV files\n>>> dataset = load_dataset(\"csv\", data_files=[\"my_file_1.csv\", \"my_file_2.csv\", \"my_file_3.csv\"])\n```", "```py\n>>> dataset = load_dataset(\"csv\", data_files={\"train\": [\"my_train_file_1.csv\", \"my_train_file_2.csv\"], \"test\": \"my_test_file.csv\"})\n```", "```py\n>>> base_url = \"https://huggingface.co/datasets/lhoestq/demo1/resolve/main/data/\"\n>>> dataset = load_dataset('csv', data_files={\"train\": base_url + \"train.csv\", \"test\": base_url + \"test.csv\"})\n```", "```py\n>>> url = \"https://domain.org/train_data.zip\"\n>>> data_files = {\"train\": url}\n>>> dataset = load_dataset(\"csv\", data_files=data_files)\n```", "```py\n>>> from datasets import Dataset\n>>> import pandas as pd\n\n# create a Pandas DataFrame\n>>> df = pd.read_csv(\"https://huggingface.co/datasets/imodels/credit-card/raw/main/train.csv\")\n>>> df = pd.DataFrame(df)\n# load Dataset from Pandas DataFrame\n>>> dataset = Dataset.from_pandas(df)\n```", "```py\n>>> train_ds = Dataset.from_pandas(train_df, split=\"train\")\n>>> test_ds = Dataset.from_pandas(test_df, split=\"test\")\n```", "```py\n>>> import sqlite3\n>>> import pandas as pd\n\n>>> conn = sqlite3.connect(\"us_covid_data.db\")\n>>> df = pd.read_csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-states.csv\")\n>>> df.to_sql(\"states\", conn, if_exists=\"replace\")\n```", "```py\n>>> uri = \"sqlite:///us_covid_data.db\"\n```", "```py\n>>> from datasets import Dataset\n\n>>> ds = Dataset.from_sql(\"states\", uri)\n>>> ds\nDataset({\n    features: ['index', 'date', 'state', 'fips', 'cases', 'deaths'],\n    num_rows: 54382\n})\n```", "```py\n>>> ds.filter(lambda x: x[\"state\"] == \"California\")\n```", "```py\n>>> from datasets import Dataset\n\n>>> ds = Dataset.from_sql('SELECT * FROM states WHERE state=\"California\";', uri)\n>>> ds\nDataset({\n    features: ['index', 'date', 'state', 'fips', 'cases', 'deaths'],\n    num_rows: 1019\n})\n```", "```py\n>>> ds.filter(lambda x: x[\"cases\"] > 10000)\n```"]