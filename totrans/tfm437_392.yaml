- en: Utilities for pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers/v4.37.2/en/internal/pipelines_utils](https://huggingface.co/docs/transformers/v4.37.2/en/internal/pipelines_utils)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/30.bd753ef4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Docstring.17db21ae.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
  prefs: []
  type: TYPE_NORMAL
- en: This page lists all the utility functions the library provides for pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Most of those are only useful if you are studying the code of the models in
    the library.
  prefs: []
  type: TYPE_NORMAL
- en: Argument handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.pipelines.ArgumentHandler'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L434)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Base interface for handling arguments for each [Pipeline](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.Pipeline).
  prefs: []
  type: TYPE_NORMAL
- en: '### class transformers.pipelines.ZeroShotClassificationArgumentHandler'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/zero_shot_classification.py#L14)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Handles arguments for zero-shot for text classification by turning each possible
    label into an NLI premise/hypothesis pair.
  prefs: []
  type: TYPE_NORMAL
- en: '### class transformers.pipelines.QuestionAnsweringArgumentHandler'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/question_answering.py#L150)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: QuestionAnsweringPipeline requires the user to provide multiple arguments (i.e.
    question & context) to be mapped to internal `SquadExample`.
  prefs: []
  type: TYPE_NORMAL
- en: QuestionAnsweringArgumentHandler manages all the possible to create a `SquadExample`
    from the command-line supplied arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Data format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.PipelineDataFormat'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L444)'
  prefs: []
  type: TYPE_NORMAL
- en: '( output_path: Optional input_path: Optional column: Optional overwrite: bool
    = False )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**output_path** (`str`) — Where to save the outgoing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_path** (`str`) — Where to look for the input data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**column** (`str`) — The column to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** (`bool`, *optional*, defaults to `False`) — Whether or not to
    overwrite the `output_path`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Base class for all the pipeline supported data format both for reading and
    writing. Supported data formats currently includes:'
  prefs: []
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stdin/stdout (pipe)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PipelineDataFormat` also includes some utilities to work with multi-columns
    like mapping from datasets columns to pipelines keyword arguments through the
    `dataset_kwarg_1=dataset_column_1` format.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### from_str'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L521)'
  prefs: []
  type: TYPE_NORMAL
- en: '( format: str output_path: Optional input_path: Optional column: Optional overwrite
    = False ) → [PipelineDataFormat](/docs/transformers/v4.37.2/en/internal/pipelines_utils#transformers.PipelineDataFormat)'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**format** (`str`) — The format of the desired pipeline. Acceptable values
    are `"json"`, `"csv"` or `"pipe"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**output_path** (`str`, *optional*) — Where to save the outgoing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_path** (`str`, *optional*) — Where to look for the input data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**column** (`str`, *optional*) — The column to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** (`bool`, *optional*, defaults to `False`) — Whether or not to
    overwrite the `output_path`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[PipelineDataFormat](/docs/transformers/v4.37.2/en/internal/pipelines_utils#transformers.PipelineDataFormat)'
  prefs: []
  type: TYPE_NORMAL
- en: The proper data format.
  prefs: []
  type: TYPE_NORMAL
- en: Creates an instance of the right subclass of [PipelineDataFormat](/docs/transformers/v4.37.2/en/internal/pipelines_utils#transformers.PipelineDataFormat)
    depending on `format`.
  prefs: []
  type: TYPE_NORMAL
- en: '#### save'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L493)'
  prefs: []
  type: TYPE_NORMAL
- en: '( data: Union )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (`dict` or list of `dict`) — The data to store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the provided data object with the representation for the current [PipelineDataFormat](/docs/transformers/v4.37.2/en/internal/pipelines_utils#transformers.PipelineDataFormat).
  prefs: []
  type: TYPE_NORMAL
- en: '#### save_binary'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L503)'
  prefs: []
  type: TYPE_NORMAL
- en: '( data: Union ) → `str`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (`dict` or list of `dict`) — The data to store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: Path where the data has been saved.
  prefs: []
  type: TYPE_NORMAL
- en: Save the provided data object as a pickle-formatted binary data on the disk.
  prefs: []
  type: TYPE_NORMAL
- en: '### class transformers.CsvPipelineDataFormat'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L557)'
  prefs: []
  type: TYPE_NORMAL
- en: '( output_path: Optional input_path: Optional column: Optional overwrite = False
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**output_path** (`str`) — Where to save the outgoing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_path** (`str`) — Where to look for the input data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**column** (`str`) — The column to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** (`bool`, *optional*, defaults to `False`) — Whether or not to
    overwrite the `output_path`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for pipelines using CSV data format.
  prefs: []
  type: TYPE_NORMAL
- en: '#### save'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L587)'
  prefs: []
  type: TYPE_NORMAL
- en: '( data: List )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (`List[dict]`) — The data to store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the provided data object with the representation for the current [PipelineDataFormat](/docs/transformers/v4.37.2/en/internal/pipelines_utils#transformers.PipelineDataFormat).
  prefs: []
  type: TYPE_NORMAL
- en: '### class transformers.JsonPipelineDataFormat'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L601)'
  prefs: []
  type: TYPE_NORMAL
- en: '( output_path: Optional input_path: Optional column: Optional overwrite = False
    )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**output_path** (`str`) — Where to save the outgoing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_path** (`str`) — Where to look for the input data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**column** (`str`) — The column to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** (`bool`, *optional*, defaults to `False`) — Whether or not to
    overwrite the `output_path`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for pipelines using JSON file format.
  prefs: []
  type: TYPE_NORMAL
- en: '#### save'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L632)'
  prefs: []
  type: TYPE_NORMAL
- en: '( data: dict )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (`dict`) — The data to store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the provided data object in a json file.
  prefs: []
  type: TYPE_NORMAL
- en: '### class transformers.PipedPipelineDataFormat'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L643)'
  prefs: []
  type: TYPE_NORMAL
- en: '( output_path: Optional input_path: Optional column: Optional overwrite: bool
    = False )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**output_path** (`str`) — Where to save the outgoing data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**input_path** (`str`) — Where to look for the input data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**column** (`str`) — The column to read.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**overwrite** (`bool`, *optional*, defaults to `False`) — Whether or not to
    overwrite the `output_path`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read data from piped input to the python process. For multi columns data, columns
    should separated by
  prefs: []
  type: TYPE_NORMAL
- en: 'If columns are provided, then the output will be a dictionary with {column_x:
    value_x}'
  prefs: []
  type: TYPE_NORMAL
- en: '#### save'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L672)'
  prefs: []
  type: TYPE_NORMAL
- en: '( data: dict )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**data** (`dict`) — The data to store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Print the data.
  prefs: []
  type: TYPE_NORMAL
- en: Utilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class transformers.pipelines.PipelineException'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/pipelines/base.py#L417)'
  prefs: []
  type: TYPE_NORMAL
- en: '( task: str model: str reason: str )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**task** (`str`) — The task of the pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**model** (`str`) — The model used by the pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**reason** (`str`) — The error message to display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raised by a [Pipeline](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.Pipeline)
    when handling **call**.
  prefs: []
  type: TYPE_NORMAL
