- en: PoolFormer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/poolformer](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/poolformer)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PoolFormer model was proposed in [MetaFormer is Actually What You Need for
    Vision](https://arxiv.org/abs/2111.11418) by Sea AI Labs. Instead of designing
    complicated token mixer to achieve SOTA performance, the target of this work is
    to demonstrate the competence of transformer models largely stem from the general
    architecture MetaFormer.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '*Transformers have shown great potential in computer vision tasks. A common
    belief is their attention-based token mixer module contributes most to their competence.
    However, recent works show the attention-based module in transformers can be replaced
    by spatial MLPs and the resulted models still perform quite well. Based on this
    observation, we hypothesize that the general architecture of the transformers,
    instead of the specific token mixer module, is more essential to the model’s performance.
    To verify this, we deliberately replace the attention module in transformers with
    an embarrassingly simple spatial pooling operator to conduct only the most basic
    token mixing. Surprisingly, we observe that the derived model, termed as PoolFormer,
    achieves competitive performance on multiple computer vision tasks. For example,
    on ImageNet-1K, PoolFormer achieves 82.1% top-1 accuracy, surpassing well-tuned
    vision transformer/MLP-like baselines DeiT-B/ResMLP-B24 by 0.3%/1.1% accuracy
    with 35%/52% fewer parameters and 48%/60% fewer MACs. The effectiveness of PoolFormer
    verifies our hypothesis and urges us to initiate the concept of “MetaFormer”,
    a general architecture abstracted from transformers without specifying the token
    mixer. Based on the extensive experiments, we argue that MetaFormer is the key
    player in achieving superior results for recent transformer and MLP-like models
    on vision tasks. This work calls for more future research dedicated to improving
    MetaFormer instead of focusing on the token mixer modules. Additionally, our proposed
    PoolFormer could serve as a starting baseline for future MetaFormer architecture
    design.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: The figure below illustrates the architecture of PoolFormer. Taken from the
    [original paper](https://arxiv.org/abs/2111.11418).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3034170d23213533d28047793aeaaeed.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
- en: This model was contributed by [heytanay](https://huggingface.co/heytanay). The
    original code can be found [here](https://github.com/sail-sg/poolformer).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Usage tips
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PoolFormer has a hierarchical architecture, where instead of Attention, a simple
    Average Pooling layer is present. All checkpoints of the model can be found on
    the [hub](https://huggingface.co/models?other=poolformer).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One can use [PoolFormerImageProcessor](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerImageProcessor)
    to prepare images for the model.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As most models, PoolFormer comes in different sizes, the details of which can
    be found in the table below.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Model variant** | **Depths** | **Hidden sizes** | **Params (M)** | **ImageNet-1k
    Top 1** |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
- en: '| :-: | --- | --- | :-: | :-: |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '| s12 | [2, 2, 6, 2] | [64, 128, 320, 512] | 12 | 77.2 |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| s24 | [4, 4, 12, 4] | [64, 128, 320, 512] | 21 | 80.3 |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| s36 | [6, 6, 18, 6] | [64, 128, 320, 512] | 31 | 81.4 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| m36 | [6, 6, 18, 6] | [96, 192, 384, 768] | 56 | 82.1 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| m48 | [8, 8, 24, 8] | [96, 192, 384, 768] | 73 | 82.5 |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: Resources
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of official Hugging Face and community (indicated by 🌎) resources to
    help you get started with PoolFormer.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Image Classification
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PoolFormerForImageClassification](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerForImageClassification)
    is supported by this [example script](https://github.com/huggingface/transformers/tree/main/examples/pytorch/image-classification)
    and [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification.ipynb).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PoolFormerForImageClassification](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerForImageClassification)由这个[示例脚本](https://github.com/huggingface/transformers/tree/main/examples/pytorch/image-classification)和[笔记本](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification.ipynb)支持。'
- en: 'See also: [Image classification task guide](../tasks/image_classification)'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另请参阅：[图像分类任务指南](../tasks/image_classification)
- en: If you’re interested in submitting a resource to be included here, please feel
    free to open a Pull Request and we’ll review it! The resource should ideally demonstrate
    something new instead of duplicating an existing resource.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣提交资源以包含在此处，请随时打开一个Pull Request，我们将对其进行审查！资源应该展示一些新的东西，而不是重复现有资源。
- en: PoolFormerConfig
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PoolFormerConfig
- en: '### `class transformers.PoolFormerConfig`'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.PoolFormerConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/configuration_poolformer.py#L34)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/configuration_poolformer.py#L34)'
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`num_channels` (`int`, *optional*, defaults to 3) — The number of channels
    in the input image.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_channels` (`int`, *可选*, 默认为3) — 输入图像中的通道数。'
- en: '`patch_size` (`int`, *optional*, defaults to 16) — The size of the input patch.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`patch_size` (`int`, *可选*, 默认为16) — 输入补丁的大小。'
- en: '`stride` (`int`, *optional*, defaults to 16) — The stride of the input patch.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stride` (`int`, *可选*, 默认为16) — 输入补丁的步幅。'
- en: '`pool_size` (`int`, *optional*, defaults to 3) — The size of the pooling window.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pool_size` (`int`, *可选*, 默认为3) — 池化窗口的大小。'
- en: '`mlp_ratio` (`float`, *optional*, defaults to 4.0) — The ratio of the number
    of channels in the output of the MLP to the number of channels in the input.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mlp_ratio` (`float`, *可选*, 默认为4.0) — MLP输出通道数与输入通道数的比率。'
- en: '`depths` (`list`, *optional*, defaults to `[2, 2, 6, 2]`) — The depth of each
    encoder block.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`depths` (`list`, *可选*, 默认为`[2, 2, 6, 2]`) — 每个编码器块的深度。'
- en: '`hidden_sizes` (`list`, *optional*, defaults to `[64, 128, 320, 512]`) — The
    hidden sizes of each encoder block.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_sizes` (`list`, *可选*, 默认为`[64, 128, 320, 512]`) — 每个编码器块的隐藏大小。'
- en: '`patch_sizes` (`list`, *optional*, defaults to `[7, 3, 3, 3]`) — The size of
    the input patch for each encoder block.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`patch_sizes` (`list`, *可选*, 默认为`[7, 3, 3, 3]`) — 每个编码器块的输入补丁的大小。'
- en: '`strides` (`list`, *optional*, defaults to `[4, 2, 2, 2]`) — The stride of
    the input patch for each encoder block.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`strides` (`list`, *可选*, 默认为`[4, 2, 2, 2]`) — 每个编码器块的输入补丁的步幅。'
- en: '`padding` (`list`, *optional*, defaults to `[2, 1, 1, 1]`) — The padding of
    the input patch for each encoder block.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padding` (`list`, *可选*, 默认为`[2, 1, 1, 1]`) — 每个编码器块的输入补丁的填充。'
- en: '`num_encoder_blocks` (`int`, *optional*, defaults to 4) — The number of encoder
    blocks.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_encoder_blocks` (`int`, *可选*, 默认为4) — 编码器块的数量。'
- en: '`drop_path_rate` (`float`, *optional*, defaults to 0.0) — The dropout rate
    for the dropout layers.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drop_path_rate` (`float`, *可选*, 默认为0.0) — 丢弃层的丢弃率。'
- en: '`hidden_act` (`str`, *optional*, defaults to `"gelu"`) — The activation function
    for the hidden layers.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_act` (`str`, *可选*, 默认为`"gelu"`) — 隐藏层的激活函数。'
- en: '`use_layer_scale` (`bool`, *optional*, defaults to `True`) — Whether to use
    layer scale.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_layer_scale` (`bool`, *可选*, 默认为`True`) — 是否使用层比例。'
- en: '`layer_scale_init_value` (`float`, *optional*, defaults to 1e-05) — The initial
    value for the layer scale.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layer_scale_init_value` (`float`, *可选*, 默认为1e-05) — 层比例的初始值。'
- en: '`initializer_range` (`float`, *optional*, defaults to 0.02) — The initializer
    range for the weights.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_range` (`float`, *可选*, 默认为0.02) — 权重的初始化范围。'
- en: This is the configuration class to store the configuration of [PoolFormerModel](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerModel).
    It is used to instantiate a PoolFormer model according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the PoolFormer [sail/poolformer_s12](https://huggingface.co/sail/poolformer_s12)
    architecture.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于存储[PoolFormerModel](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerModel)配置的类。根据指定的参数实例化一个PoolFormer模型，定义模型架构。使用默认值实例化配置将产生类似于PoolFormer
    [sail/poolformer_s12](https://huggingface.co/sail/poolformer_s12)架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)的文档以获取更多信息。
- en: 'Example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: PoolFormerFeatureExtractor
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PoolFormerFeatureExtractor
- en: '### `class transformers.PoolFormerFeatureExtractor`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.PoolFormerFeatureExtractor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/feature_extraction_poolformer.py#L26)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/feature_extraction_poolformer.py#L26)'
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '#### `__call__`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `__call__`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/image_processing_utils.py#L550)'
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Preprocess an image or a batch of images.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理一张图片或一批图片。
- en: PoolFormerImageProcessor
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PoolFormerImageProcessor
- en: '### `class transformers.PoolFormerImageProcessor`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.PoolFormerImageProcessor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/image_processing_poolformer.py#L49)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/image_processing_poolformer.py#L49)'
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Parameters
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) — Whether to resize the
    image’s (height, width) dimensions to the specified `size`. Can be overridden
    by `do_resize` in the `preprocess` method.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`，*可选*，默认为 `True`) — 是否将图像的（高度，宽度）尺寸调整为指定的 `size`。可以被 `preprocess`
    方法中的 `do_resize` 覆盖。'
- en: '`size` (`Dict[str, int]` *optional*, defaults to `{"shortest_edge" -- 224}`):
    Size of the image after resizing. Can be overridden by `size` in the `preprocess`
    method. If crop_pct is unset:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]` *可选*，默认为 `{"shortest_edge" -- 224}`)：调整大小后的图像大小。可以被
    `preprocess` 方法中的 `size` 覆盖。如果未设置 crop_pct：'
- en: 'size is `{"height": h, "width": w}`: the image is resized to `(h, w)`.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'size 为 `{"height": h, "width": w}`：将图像调整大小为 `(h, w)`。'
- en: 'size is `{"shortest_edge": s}`: the shortest edge of the image is resized to
    s whilst maintaining the aspect ratio.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'size 为 `{"shortest_edge": s}`：将图像的最短边调整大小为 s，同时保持纵横比。'
- en: 'If crop_pct is set:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果设置了 crop_pct：
- en: 'size is `{"height": h, "width": w}`: the image is resized to `(int(floor(h/crop_pct)),
    int(floor(w/crop_pct)))`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'size 为 `{"height": h, "width": w}`：将图像调整大小为 `(int(floor(h/crop_pct)), int(floor(w/crop_pct)))`'
- en: 'size is `{"height": c, "width": c}`: the shortest edge of the image is resized
    to `int(floor(c/crop_pct)` whilst maintaining the aspect ratio.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'size 为 `{"height": c, "width": c}`：将图像的最短边调整大小为 `int(floor(c/crop_pct)`，同时保持纵横比。'
- en: 'size is `{"shortest_edge": c}`: the shortest edge of the image is resized to
    `int(floor(c/crop_pct)` whilst maintaining the aspect ratio.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'size 为 `{"shortest_edge": c}`：将图像的最短边调整大小为 `int(floor(c/crop_pct)`，同时保持纵横比。'
- en: '`crop_pct` (`float`, *optional*, defaults to 0.9) — Percentage of the image
    to crop from the center. Can be overridden by `crop_pct` in the `preprocess` method.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crop_pct` (`float`，*可选*，默认为 0.9) — 从中心裁剪图像的百分比。可以被 `preprocess` 方法中的 `crop_pct`
    覆盖。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `Resampling.BICUBIC`)
    — Resampling filter to use if resizing the image. Can be overridden by `resample`
    in the `preprocess` method.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`PILImageResampling`，*可选*，默认为 `Resampling.BICUBIC`) — 如果调整图像大小，则要使用的重采样滤波器。可以被
    `preprocess` 方法中的 `resample` 覆盖。'
- en: '`do_center_crop` (`bool`, *optional*, defaults to `True`) — Whether to center
    crop the image. If the input size is smaller than `crop_size` along any edge,
    the image is padded with 0’s and then center cropped. Can be overridden by `do_center_crop`
    in the `preprocess` method.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_center_crop` (`bool`，*可选*，默认为 `True`) — 是否对图像进行中心裁剪。如果输入尺寸沿任一边小于 `crop_size`，则图像将填充为
    0，然后进行中心裁剪。可以被 `preprocess` 方法中的 `do_center_crop` 覆盖。'
- en: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `{"height" -- 224, "width":
    224}`): Size of the image after applying center crop. Only has an effect if `do_center_crop`
    is set to `True`. Can be overridden by the `crop_size` parameter in the `preprocess`
    method.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crop_size` (`Dict[str, int]`，*可选*，默认为 `{"height" -- 224, "width": 224}`)：应用中心裁剪后的图像大小。仅在
    `do_center_crop` 设置为 `True` 时有效。可以被 `preprocess` 方法中的 `crop_size` 参数覆盖。'
- en: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) — Scale
    factor to use if rescaling the image. Can be overridden by the `rescale_factor`
    parameter in the `preprocess` method.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor` (`int` 或 `float`，*可选*，默认为 `1/255`) — 如果重新缩放图像，则使用的比例因子。可以被
    `preprocess` 方法中的 `rescale_factor` 参数覆盖。'
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) — Whether to rescale
    the image by the specified scale `rescale_factor`. Can be overridden by the `do_rescale`
    parameter in the `preprocess` method.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale` (`bool`，*可选*，默认为 `True`) — 是否按指定比例 `rescale_factor` 重新缩放图像。可以被
    `preprocess` 方法中的 `do_rescale` 参数覆盖。'
- en: '`do_normalize` (`bool`, *optional*, defaults to `True`) — Controls whether
    to normalize the image. Can be overridden by the `do_normalize` parameter in the
    `preprocess` method.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize` (`bool`，*可选*，默认为 `True`) — 控制是否对图像进行标准化。可以被 `preprocess` 方法中的
    `do_normalize` 参数覆盖。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_STANDARD_MEAN`)
    — Mean to use if normalizing the image. This is a float or list of floats the
    length of the number of channels in the image. Can be overridden by the `image_mean`
    parameter in the `preprocess` method.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean` (`float` 或 `List[float]`，*可选*，默认为 `IMAGENET_STANDARD_MEAN`) —
    如果对图像进行标准化，则使用的均值。这是一个浮点数或与图像通道数相同长度的浮点数列表。可以被 `preprocess` 方法中的 `image_mean`
    参数覆盖。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `IMAGENET_STANDARD_STD`)
    — Standard deviation to use if normalizing the image. This is a float or list
    of floats the length of the number of channels in the image. Can be overridden
    by the `image_std` parameter in the `preprocess` method.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` 或 `List[float]`，*可选*，默认为 `IMAGENET_STANDARD_STD`) — 如果对图像进行标准化，则使用的标准差。这是一个浮点数或与图像通道数相同长度的浮点数列表。可以被
    `preprocess` 方法中的 `image_std` 参数覆盖。'
- en: Constructs a PoolFormer image processor.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个 PoolFormer 图像处理器。
- en: '#### `preprocess`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `preprocess`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/image_processing_poolformer.py#L211)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/image_processing_poolformer.py#L211)'
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`images` (`ImageInput`) — Image to preprocess. Expects a single or batch of
    images with pixel values ranging from 0 to 255\. If passing in images with pixel
    values between 0 and 1, set `do_rescale=False`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images` (`ImageInput`) — 要预处理的图像。期望传入像素值范围为 0 到 255 的单个图像或图像批次。如果传入像素值在 0
    到 1 之间的图像，请设置 `do_rescale=False`。'
- en: '`do_resize` (`bool`, *optional*, defaults to `self.do_resize`) — Whether to
    resize the image.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`，*可选*，默认为 `self.do_resize`) — 是否调整图像大小。'
- en: '`size` (`Dict[str, int]`, *optional*, defaults to `self.size`) — Size of the
    image after applying resize.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]`，*可选*，默认为 `self.size`) — 调整大小后的图像大小。'
- en: '`crop_pct` (`float`, *optional*, defaults to `self.crop_pct`) — Percentage
    of the image to crop. Only has an effect if `do_resize` is set to `True`.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`crop_pct` (`float`，*可选*，默认为 `self.crop_pct`) — 要裁剪的图像百分比。仅在 `do_resize` 设置为
    `True` 时有效。'
- en: '`resample` (`int`, *optional*, defaults to `self.resample`) — Resampling filter
    to use if resizing the image. This can be one of the enum `PILImageResampling`,
    Only has an effect if `do_resize` is set to `True`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_center_crop` (`bool`, *optional*, defaults to `self.do_center_crop`) —
    Whether to center crop the image.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`crop_size` (`Dict[str, int]`, *optional*, defaults to `self.crop_size`) —
    Size of the image after applying center crop.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_rescale` (`bool`, *optional*, defaults to `self.do_rescale`) — Whether
    to rescale the image values between [0 - 1].'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rescale_factor` (`float`, *optional*, defaults to `self.rescale_factor`) —
    Rescale factor to rescale the image by if `do_rescale` is set to `True`.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do_normalize` (`bool`, *optional*, defaults to `self.do_normalize`) — Whether
    to normalize the image.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `self.image_mean`)
    — Image mean.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `self.image_std`)
    — Image standard deviation.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_tensors` (`str` or `TensorType`, *optional*) — The type of tensors
    to return. Can be one of:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unset: Return a list of `np.ndarray`.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data_format` (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`)
    — The channel dimension format for the output image. Can be one of:'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChannelDimension.FIRST`: image in (num_channels, height, width) format.'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChannelDimension.LAST`: image in (height, width, num_channels) format.'
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) — The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Preprocess an image or batch of images.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: PoolFormerModel
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.PoolFormerModel`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/modeling_poolformer.py#L304)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([PoolFormerConfig](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The bare PoolFormer Model transformer outputting raw hidden-states without any
    specific head on top. This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    sub-class. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/modeling_poolformer.py#L321)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [PoolFormerImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '`transformers.modeling_outputs.BaseModelOutputWithNoAttention` or `tuple(torch.FloatTensor)`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: A `transformers.modeling_outputs.BaseModelOutputWithNoAttention` or a tuple
    of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([PoolFormerConfig](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerConfig))
    and inputs.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Sequence of hidden-states at the output of the last layer of
    the model.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, num_channels, height,
    width)`.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The [PoolFormerModel](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerModel)
    forward method, overrides the `__call__` special method.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: PoolFormerForImageClassification
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class transformers.PoolFormerForImageClassification`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/modeling_poolformer.py#L369)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Parameters
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '`config` ([PoolFormerConfig](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerConfig))
    — Model configuration class with all the parameters of the model. Initializing
    with a config file does not load the weights associated with the model, only the
    configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PoolFormer Model transformer with an image classification head on top
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: This model is a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    sub-class. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/poolformer/modeling_poolformer.py#L391)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Parameters
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values. Pixel values can be obtained using [AutoImageProcessor](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoImageProcessor).
    See [PoolFormerImageProcessor.`call`()](/docs/transformers/v4.37.2/en/model_doc/glpn#transformers.GLPNFeatureExtractor.__call__)
    for details.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`labels` (`torch.LongTensor` of shape `(batch_size,)`, *optional*) — Labels
    for computing the image classification/regression loss. Indices should be in `[0,
    ..., config.num_labels - 1]`. If `config.num_labels == 1` a regression loss is
    computed (Mean-Square loss), If `config.num_labels > 1` a classification loss
    is computed (Cross-Entropy).'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or `tuple(torch.FloatTensor)`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: A [transformers.modeling_outputs.ImageClassifierOutputWithNoAttention](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.ImageClassifierOutputWithNoAttention)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration ([PoolFormerConfig](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerConfig))
    and inputs.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    is provided) — Classification (or regression if config.num_labels==1) loss.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss`（形状为`(1,)`的`torch.FloatTensor`，*可选*，当提供`labels`时返回） — 分类（如果config.num_labels==1则为回归）损失。'
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, config.num_labels)`) —
    Classification (or regression if config.num_labels==1) scores (before SoftMax).'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits`（形状为`(batch_size, config.num_labels)`的`torch.FloatTensor`） — 分类（如果config.num_labels==1则为回归）得分（SoftMax之前）。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each stage) of shape `(batch_size, num_channels, height,
    width)`. Hidden-states (also called feature maps) of the model at the output of
    each stage.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states`（`tuple(torch.FloatTensor)`，*可选*，当传递`output_hidden_states=True`或`config.output_hidden_states=True`时返回）
    — 形状为`(batch_size, num_channels, height, width)`的`torch.FloatTensor`元组（如果模型有嵌入层，则为嵌入的输出+每个阶段的输出）。模型在每个阶段输出的隐藏状态（也称为特征图）。'
- en: The [PoolFormerForImageClassification](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerForImageClassification)
    forward method, overrides the `__call__` special method.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[PoolFormerForImageClassification](/docs/transformers/v4.37.2/en/model_doc/poolformer#transformers.PoolFormerForImageClassification)的前向方法覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前向传递的配方需要在此函数内定义，但应该在此之后调用`Module`实例，而不是这个，因为前者负责运行预处理和后处理步骤，而后者则默默地忽略它们。
- en: 'Example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE11]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
