["```py\nnpm create vite@latest react-translator -- --template react\n```", "```py\ncd react-translator\nnpm install\n```", "```py\nnpm run dev\n```", "```py\nnpm install @xenova/transformers\n```", "```py\n    import { pipeline } from '@xenova/transformers';\n\n    class MyTranslationPipeline {\n      static task = 'translation';\n      static model = 'Xenova/nllb-200-distilled-600M';\n      static instance = null;\n\n      static async getInstance(progress_callback = null) {\n        if (this.instance === null) {\n          this.instance = pipeline(this.task, this.model, { progress_callback });\n        }\n\n        return this.instance;\n      }\n    }\n    ```", "```py\n    // Remember to import the relevant hooks\n    import { useEffect, useRef, useState } from 'react'\n\n    function App() {\n      // Create a reference to the worker object.\n      const worker = useRef(null);\n\n      // We use the `useEffect` hook to setup the worker as soon as the `App` component is mounted.\n      useEffect(() => {\n        if (!worker.current) {\n          // Create the worker if it does not yet exist.\n          worker.current = new Worker(new URL('./worker.js', import.meta.url), {\n              type: 'module'\n          });\n        }\n\n        // Create a callback function for messages from the worker thread.\n        const onMessageReceived = (e) => {\n          // TODO: Will fill in later\n        };\n\n        // Attach the callback function as an event listener.\n        worker.current.addEventListener('message', onMessageReceived);\n\n        // Define a cleanup function for when the component is unmounted.\n        return () => worker.current.removeEventListener('message', onMessageReceived);\n      });\n\n      return (\n        // TODO: Rest of our app goes here...\n      )\n    }\n\n    export default App \n    ```", "```py\n    const LANGUAGES = {\n      \"Acehnese (Arabic script)\": \"ace_Arab\",\n      \"Acehnese (Latin script)\": \"ace_Latn\",\n      \"Afrikaans\": \"afr_Latn\",\n      ...\n      \"Zulu\": \"zul_Latn\",\n    }\n\n    export default function LanguageSelector({ type, onChange, defaultLanguage }) {\n      return (\n        <div className='language-selector'>\n          <label>{type}: </label>\n          <select onChange={onChange} defaultValue={defaultLanguage}>\n            {Object.entries(LANGUAGES).map(([key, value]) => {\n              return <option key={key} value={value}>{key}</option>\n            })}\n          </select>\n        </div>\n      )\n    }\n    ```", "```py\n    export default function Progress({ text, percentage }) {\n      percentage = percentage ?? 0;\n      return (\n        <div className=\"progress-container\">\n          <div className='progress-bar' style={{ 'width': `${percentage}%` }}>\n            {text} ({`${percentage.toFixed(2)}%`})\n          </div>\n        </div>\n      );\n    }\n    ```", "```py\nimport LanguageSelector from './components/LanguageSelector';\nimport Progress from './components/Progress';\n```", "```py\nfunction App() {\n\n  // Model loading\n  const [ready, setReady] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n  const [progressItems, setProgressItems] = useState([]);\n\n  // Inputs and outputs\n  const [input, setInput] = useState('I love walking my dog.');\n  const [sourceLanguage, setSourceLanguage] = useState('eng_Latn');\n  const [targetLanguage, setTargetLanguage] = useState('fra_Latn');\n  const [output, setOutput] = useState('');\n\n  // rest of the code...\n}\n```", "```py\nreturn (\n  <>\n    <h1>Transformers.js</h1>\n    <h2>ML-powered multilingual translation in React!</h2>\n\n    <div className='container'>\n      <div className='language-container'>\n        <LanguageSelector type={\"Source\"} defaultLanguage={\"eng_Latn\"} onChange={x => setSourceLanguage(x.target.value)} />\n        <LanguageSelector type={\"Target\"} defaultLanguage={\"fra_Latn\"} onChange={x => setTargetLanguage(x.target.value)} />\n      </div>\n\n      <div className='textbox-container'>\n        <textarea value={input} rows={3} onChange={e => setInput(e.target.value)}></textarea>\n        <textarea value={output} rows={3} readOnly></textarea>\n      </div>\n    </div>\n\n    <button disabled={disabled} onClick={translate}>Translate</button>\n\n    <div className='progress-bars-container'>\n      {ready === false && (\n        <label>Loading models... (only run once)</label>\n      )}\n      {progressItems.map(data => (\n        <div key={data.file}>\n          <Progress text={data.file} percentage={data.progress} />\n        </div>\n      ))}\n    </div>\n  </>\n)\n```", "```py\n    :root {\n      font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;\n      line-height: 1.5;\n      font-weight: 400;\n      color: #213547;\n      background-color: #ffffff;\n\n      font-synthesis: none;\n      text-rendering: optimizeLegibility;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n      -webkit-text-size-adjust: 100%;\n    }\n\n    body {\n      margin: 0;\n      display: flex;\n      place-items: center;\n      min-width: 320px;\n      min-height: 100vh;\n    }\n\n    h1 {\n      font-size: 3.2em;\n      line-height: 1;\n    }\n\n    h1,\n    h2 {\n      margin: 8px;\n    }\n\n    select {\n      padding: 0.3em;\n      cursor: pointer;\n    }\n\n    textarea {\n      padding: 0.6em;\n    }\n\n    button {\n      padding: 0.6em 1.2em;\n      cursor: pointer;\n      font-weight: 500;\n    }\n\n    button[disabled] {\n      cursor: not-allowed;\n    }\n\n    select,\n    textarea,\n    button {\n      border-radius: 8px;\n      border: 1px solid transparent;\n      font-size: 1em;\n      font-family: inherit;\n      background-color: #f9f9f9;\n      transition: border-color 0.25s;\n    }\n\n    select:hover,\n    textarea:hover,\n    button:not([disabled]):hover {\n      border-color: #646cff;\n    }\n\n    select:focus,\n    select:focus-visible,\n    textarea:focus,\n    textarea:focus-visible,\n    button:focus,\n    button:focus-visible {\n      outline: 4px auto -webkit-focus-ring-color;\n    }\n    ```", "```py\n    #root {\n      max-width: 1280px;\n      margin: 0 auto;\n      padding: 2rem;\n      text-align: center;\n    }\n\n    .language-container {\n      display: flex;\n      gap: 20px;\n    }\n\n    .textbox-container {\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      width: 800px;\n    }\n\n    .textbox-container>textarea, .language-selector {\n      width: 50%;\n    }\n\n    .language-selector>select {\n      width: 150px;\n    }\n\n    .progress-container {\n      position: relative;\n      font-size: 14px;\n      color: white;\n      background-color: #e9ecef;\n      border: solid 1px;\n      border-radius: 8px;\n      text-align: left;\n      overflow: hidden;\n    }\n\n    .progress-bar {\n      padding: 0 4px;\n      z-index: 0;\n      top: 0;\n      width: 1%;\n      height: 100%;\n      overflow: hidden;\n      background-color: #007bff;\n      white-space: nowrap;\n    }\n\n    .progress-text {\n      z-index: 2;\n    }\n\n    .selector-container {\n      display: flex;\n      gap: 20px;\n    }\n\n    .progress-bars-container {\n      padding: 8px;\n      height: 140px;\n    }\n\n    .container {\n      margin: 25px;\n      display: flex;\n      flex-direction: column;\n      gap: 10px;\n    }\n    ```", "```py\nconst translate = () => {\n  setDisabled(true);\n  worker.current.postMessage({\n    text: input,\n    src_lang: sourceLanguage,\n    tgt_lang: targetLanguage,\n  });\n}\n```", "```py\n// Listen for messages from the main thread\nself.addEventListener('message', async (event) => {\n  // Retrieve the translation pipeline. When called for the first time,\n  // this will load the pipeline and save it for future use.\n  let translator = await MyTranslationPipeline.getInstance(x => {\n      // We also add a progress callback to the pipeline so that we can\n      // track model loading.\n      self.postMessage(x);\n  });\n\n  // Actually perform the translation\n  let output = await translator(event.data.text, {\n      tgt_lang: event.data.tgt_lang,\n      src_lang: event.data.src_lang,\n\n      // Allows for partial output\n      callback_function: x => {\n          self.postMessage({\n              status: 'update',\n              output: translator.tokenizer.decode(x[0].output_token_ids, { skip_special_tokens: true })\n          });\n      }\n  });\n\n  // Send the output back to the main thread\n  self.postMessage({\n      status: 'complete',\n      output: output,\n  });\n});\n```", "```py\nconst onMessageReceived = (e) => {\n  switch (e.data.status) {\n    case 'initiate':\n      // Model file start load: add a new progress item to the list.\n      setReady(false);\n      setProgressItems(prev => [...prev, e.data]);\n      break;\n\n    case 'progress':\n      // Model file progress: update one of the progress items.\n      setProgressItems(\n        prev => prev.map(item => {\n          if (item.file === e.data.file) {\n            return { ...item, progress: e.data.progress }\n          }\n          return item;\n        })\n      );\n      break;\n\n    case 'done':\n      // Model file loaded: remove the progress item from the list.\n      setProgressItems(\n        prev => prev.filter(item => item.file !== e.data.file)\n      );\n      break;\n\n    case 'ready':\n      // Pipeline ready: the worker is ready to accept messages.\n      setReady(true);\n      break;\n\n    case 'update':\n      // Generation update: update the output text.\n      setOutput(e.data.output);\n      break;\n\n    case 'complete':\n      // Generation complete: re-enable the \"Translate\" button\n      setDisabled(false);\n      break;\n  }\n};\n```"]