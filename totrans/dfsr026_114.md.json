["```py\n( sample_size: Optional = None in_channels: int = 4 out_channels: int = 4 down_block_types: Tuple = ('CrossAttnDownBlock3D', 'CrossAttnDownBlock3D', 'CrossAttnDownBlock3D', 'DownBlock3D') up_block_types: Tuple = ('UpBlock3D', 'CrossAttnUpBlock3D', 'CrossAttnUpBlock3D', 'CrossAttnUpBlock3D') block_out_channels: Tuple = (320, 640, 1280, 1280) layers_per_block: int = 2 downsample_padding: int = 1 mid_block_scale_factor: float = 1 act_fn: str = 'silu' norm_num_groups: Optional = 32 norm_eps: float = 1e-05 cross_attention_dim: int = 1024 attention_head_dim: Union = 64 num_attention_heads: Union = None )\n```", "```py\n( )\n```", "```py\n( chunk_size: Optional = None dim: int = 0 )\n```", "```py\n( s1 s2 b1 b2 )\n```", "```py\n( sample: FloatTensor timestep: Union encoder_hidden_states: Tensor class_labels: Optional = None timestep_cond: Optional = None attention_mask: Optional = None cross_attention_kwargs: Optional = None down_block_additional_residuals: Optional = None mid_block_additional_residual: Optional = None return_dict: bool = True ) \u2192 export const metadata = 'undefined';~models.unet_3d_condition.UNet3DConditionOutput or tuple\n```", "```py\n( slice_size: Union )\n```", "```py\n( processor: Union )\n```", "```py\n( )\n```", "```py\n( )\n```", "```py\n( sample: FloatTensor )\n```"]