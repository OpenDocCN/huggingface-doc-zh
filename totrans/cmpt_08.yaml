- en: Custom metric
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义指标
- en: 'Original text: [https://huggingface.co/docs/competitions/custom_metric](https://huggingface.co/docs/competitions/custom_metric)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文链接：[https://huggingface.co/docs/competitions/custom_metric](https://huggingface.co/docs/competitions/custom_metric)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In case you don’t settle for the default scikit-learn metrics, you can define
    your own metric.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不满足于默认的scikit-learn指标，你可以定义自己的指标。
- en: Here, we expect the organizer to know python.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们期望组织者了解python。
- en: How to define a custom metric
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何定义自定义指标
- en: To define a custom metric, change `EVAL_METRIC` in `conf.json` to `custom`.
    You must also make sure that `EVAL_HIGHER_IS_BETTER` is set to `1` or `0` depending
    on whether a higher value of the metric is better or not.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个自定义指标，需要将`conf.json`中的`EVAL_METRIC`更改为`custom`。你还必须确保`EVAL_HIGHER_IS_BETTER`设置为`1`或`0`，取决于指标的较高值是否更好。
- en: The second step is to create a file `metric.py` in the private competition repo.
    The file should contain a `compute` function that takes competition params as
    input.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是在私有比赛存储库中创建一个名为`metric.py`的文件。该文件应包含一个以竞赛参数为输入的`compute`函数。
- en: 'Here is the part where we check if metric is custom and calculate the metric
    value:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们检查指标是否为自定义并计算指标值的部分：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can find the above part in competitions github repo `compute_metrics.py`
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在比赛的github存储库`compute_metrics.py`中找到上述部分。
- en: '`params` is defined as:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`params`被定义为：'
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You are free to do whatever you want to in the `compute` function. In the end
    it must return a dictionary with the following keys:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在`compute`函数中，你可以自由地做任何你想做的事情。最终它必须返回一个带有以下键的字典：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'public and private scores must be dictionaries! You can also use multiple metrics.
    Example for multiple metrics:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 公共和私有分数必须是字典！你也可以使用多个指标。多个指标的示例：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Note: When using multiple metrics, conf.json must have `SCORING_METRIC` specified
    to rank the participants in the competition.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：当使用多个指标时，`conf.json`必须指定`SCORING_METRIC`以对比赛中的参与者进行排名。
- en: For example, if I want to use metric2 to rank the participants, I will set `SCORING_METRIC`
    to `metric2` in `conf.json`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我想使用`metric2`来对参与者进行排名，我会在`conf.json`中将`SCORING_METRIC`设置为`metric2`。
- en: Example of a custom metric
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义指标的示例
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Take a careful look at the above code. You can see that we are downloading the
    solution file and the submission file from the dataset repo. We are then calculating
    the metric on the public and private splits of the solution and submission files.
    Finally, we are returning the metric values in a dictionary.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看上面的代码。你会看到我们正在从数据集存储库下载解决方案文件和提交文件。然后我们在解决方案和提交文件的公共和私有部分上计算指标。最后，我们将指标值以字典形式返回。
