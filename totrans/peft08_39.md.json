["```py\n( peft_type: Union = None auto_mapping: Optional = None base_model_name_or_path: Optional = None revision: Optional = None task_type: Union = None inference_mode: bool = False rank_pattern: Optional[dict] = <factory> alpha_pattern: Optional[dict] = <factory> r: int = 8 alpha: int = 8 rank_dropout: float = 0.0 module_dropout: float = 0.0 use_effective_conv2d: bool = False decompose_both: bool = False decompose_factor: int = -1 target_modules: Union = None init_weights: bool = True layers_to_transform: Union = None layers_pattern: Optional = None modules_to_save: Optional = None )\n```", "```py\n( model config adapter_name ) \u2192 export const metadata = 'undefined';torch.nn.Module\n```", "```py\n>>> from diffusers import StableDiffusionPipeline\n>>> from peft import LoKrModel, LoKrConfig\n\n>>> config_te = LoKrConfig(\n...     r=8,\n...     lora_alpha=32,\n...     target_modules=[\"k_proj\", \"q_proj\", \"v_proj\", \"out_proj\", \"fc1\", \"fc2\"],\n...     rank_dropout=0.0,\n...     module_dropout=0.0,\n...     init_weights=True,\n... )\n>>> config_unet = LoKrConfig(\n...     r=8,\n...     lora_alpha=32,\n...     target_modules=[\n...         \"proj_in\",\n...         \"proj_out\",\n...         \"to_k\",\n...         \"to_q\",\n...         \"to_v\",\n...         \"to_out.0\",\n...         \"ff.net.0.proj\",\n...         \"ff.net.2\",\n...     ],\n...     rank_dropout=0.0,\n...     module_dropout=0.0,\n...     init_weights=True,\n...     use_effective_conv2d=True,\n... )\n\n>>> model = StableDiffusionPipeline.from_pretrained(\"runwayml/stable-diffusion-v1-5\")\n>>> model.text_encoder = LoKrModel(model.text_encoder, config_te, \"default\")\n>>> model.unet = LoKrModel(model.unet, config_unet, \"default\")\n```"]