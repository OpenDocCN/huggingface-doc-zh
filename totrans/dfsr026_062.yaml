- en: ControlNet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/training/controlnet](https://huggingface.co/docs/diffusers/training/controlnet)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: '[ControlNet](https://hf.co/papers/2302.05543) models are adapters trained on
    top of another pretrained model. It allows for a greater degree of control over
    image generation by conditioning the model with an additional input image. The
    input image can be a canny edge, depth map, human pose, and many more.'
  prefs: []
  type: TYPE_NORMAL
- en: If youâ€™re training on a GPU with limited vRAM, you should try enabling the `gradient_checkpointing`,
    `gradient_accumulation_steps`, and `mixed_precision` parameters in the training
    command. You can also reduce your memory footprint by using memory-efficient attention
    with [xFormers](../optimization/xformers). JAX/Flax training is also supported
    for efficient training on TPUs and GPUs, but it doesnâ€™t support gradient checkpointing
    or xFormers. You should have a GPU with >30GB of memory if you want to train faster
    with Flax.
  prefs: []
  type: TYPE_NORMAL
- en: This guide will explore the [train_controlnet.py](https://github.com/huggingface/diffusers/blob/main/examples/controlnet/train_controlnet.py)
    training script to help you become familiar with it, and how you can adapt it
    for your own use-case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the script, make sure you install the library from source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then navigate to the example folder containing the training script and install
    the required dependencies for the script youâ€™re using:'
  prefs: []
  type: TYPE_NORMAL
- en: PyTorchFlax
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: ðŸ¤— Accelerate is a library for helping you train on multiple GPUs/TPUs or with
    mixed-precision. Itâ€™ll automatically configure your training setup based on your
    hardware and environment. Take a look at the ðŸ¤— Accelerate [Quick tour](https://huggingface.co/docs/accelerate/quicktour)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize an ðŸ¤— Accelerate environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To setup a default ðŸ¤— Accelerate environment without choosing any configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or if your environment doesnâ€™t support an interactive shell, like a notebook,
    you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, if you want to train a model on your own dataset, take a look at the
    [Create a dataset for training](create_dataset) guide to learn how to create a
    dataset that works with the training script.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections highlight parts of the training script that are important
    for understanding how to modify it, but it doesnâ€™t cover every aspect of the script
    in detail. If youâ€™re interested in learning more, feel free to read through the
    [script](https://github.com/huggingface/diffusers/blob/main/examples/controlnet/train_controlnet.py)
    and let us know if you have any questions or concerns.
  prefs: []
  type: TYPE_NORMAL
- en: Script parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The training script provides many parameters to help you customize your training
    run. All of the parameters and their descriptions are found in the [`parse_args()`](https://github.com/huggingface/diffusers/blob/64603389da01082055a901f2883c4810d1144edb/examples/controlnet/train_controlnet.py#L231)
    function. This function provides default values for each parameter, such as the
    training batch size and learning rate, but you can also set your own values in
    the training command if youâ€™d like.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to speedup training with mixed precision using the fp16 format,
    add the `--mixed_precision` parameter to the training command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Many of the basic and important parameters are described in the [Text-to-image](text2image#script-parameters)
    training guide, so this guide just focuses on the relevant parameters for ControlNet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--max_train_samples`: the number of training samples; this can be lowered
    for faster training, but if you want to stream really large datasets, youâ€™ll need
    to include this parameter and the `--streaming` parameter in your training command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--gradient_accumulation_steps`: number of update steps to accumulate before
    the backward pass; this allows you to train with a bigger batch size than your
    GPU memory can typically handle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Min-SNR weighting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [Min-SNR](https://huggingface.co/papers/2303.09556) weighting strategy can
    help with training by rebalancing the loss to achieve faster convergence. The
    training script supports predicting `epsilon` (noise) or `v_prediction`, but Min-SNR
    is compatible with both prediction types. This weighting strategy is only supported
    by PyTorch and is unavailable in the Flax training script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `--snr_gamma` parameter and set it to the recommended value of 5.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Training script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the script parameters, a general walkthrough of the training script
    is provided in the [Text-to-image](text2image#training-script) training guide.
    Instead, this guide takes a look at the relevant parts of the ControlNet script.
  prefs: []
  type: TYPE_NORMAL
- en: The training script has a [`make_train_dataset`](https://github.com/huggingface/diffusers/blob/64603389da01082055a901f2883c4810d1144edb/examples/controlnet/train_controlnet.py#L582)
    function for preprocessing the dataset with image transforms and caption tokenization.
    Youâ€™ll see that in addition to the usual caption tokenization and image transforms,
    the script also includes transforms for the conditioning image.
  prefs: []
  type: TYPE_NORMAL
- en: If youâ€™re streaming a dataset on a TPU, performance may be bottlenecked by the
    ðŸ¤— Datasets library which is not optimized for images. To ensure maximum throughput,
    youâ€™re encouraged to explore other dataset formats like [WebDataset](https://webdataset.github.io/webdataset/),
    [TorchData](https://github.com/pytorch/data), and [TensorFlow Datasets](https://www.tensorflow.org/datasets/tfless_tfds).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the [`main()`](https://github.com/huggingface/diffusers/blob/64603389da01082055a901f2883c4810d1144edb/examples/controlnet/train_controlnet.py#L713)
    function, youâ€™ll find the code for loading the tokenizer, text encoder, scheduler
    and models. This is also where the ControlNet model is loaded either from existing
    weights or randomly initialized from a UNet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The [optimizer](https://github.com/huggingface/diffusers/blob/64603389da01082055a901f2883c4810d1144edb/examples/controlnet/train_controlnet.py#L871)
    is set up to update the ControlNet parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the [training loop](https://github.com/huggingface/diffusers/blob/64603389da01082055a901f2883c4810d1144edb/examples/controlnet/train_controlnet.py#L943),
    the conditioning text embeddings and image are passed to the down and mid-blocks
    of the ControlNet model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you want to learn more about how the training loop works, check out the [Understanding
    pipelines, models and schedulers](../using-diffusers/write_own_pipeline) tutorial
    which breaks down the basic pattern of the denoising process.
  prefs: []
  type: TYPE_NORMAL
- en: Launch the script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now youâ€™re ready to launch the training script! ðŸš€
  prefs: []
  type: TYPE_NORMAL
- en: This guide uses the [fusing/fill50k](https://huggingface.co/datasets/fusing/fill50k)
    dataset, but remember, you can create and use your own dataset if you want (see
    the [Create a dataset for training](create_dataset) guide).
  prefs: []
  type: TYPE_NORMAL
- en: Set the environment variable `MODEL_NAME` to a model id on the Hub or a path
    to a local model and `OUTPUT_DIR` to where you want to save the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the following images to condition your training with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: One more thing before you launch the script! Depending on the GPU you have,
    you may need to enable certain optimizations to train a ControlNet. The default
    configuration in this script requires ~38GB of vRAM. If youâ€™re training on more
    than one GPU, add the `--multi_gpu` parameter to the `accelerate launch` command.
  prefs: []
  type: TYPE_NORMAL
- en: 16GB12GB8GB
  prefs: []
  type: TYPE_NORMAL
- en: 'On a 16GB GPU, you can use bitsandbytes 8-bit optimizer and gradient checkpointing
    to optimize your training run. Install bitsandbytes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following parameter to your training command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: PyTorchFlax
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Once training is complete, you can use your newly trained model for inference!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Stable Diffusion XL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Stable Diffusion XL (SDXL) is a powerful text-to-image model that generates
    high-resolution images, and it adds a second text-encoder to its architecture.
    Use the [`train_controlnet_sdxl.py`](https://github.com/huggingface/diffusers/blob/main/examples/controlnet/train_controlnet_sdxl.py)
    script to train a ControlNet adapter for the SDXL model.
  prefs: []
  type: TYPE_NORMAL
- en: The SDXL training script is discussed in more detail in the [SDXL training](sdxl)
    guide.
  prefs: []
  type: TYPE_NORMAL
- en: Next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Congratulations on training your own ControlNet! To learn more about how to
    use your new model, the following guides may be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to [use a ControlNet](../using-diffusers/controlnet) for inference
    on a variety of tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
