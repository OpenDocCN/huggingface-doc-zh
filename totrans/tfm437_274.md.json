["```py\n>>> from transformers import MaskFormerConfig, MaskFormerModel\n\n>>> # Initializing a MaskFormer facebook/maskformer-swin-base-ade configuration\n>>> configuration = MaskFormerConfig()\n\n>>> # Initializing a model (with random weights) from the facebook/maskformer-swin-base-ade style configuration\n>>> model = MaskFormerModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, MaskFormerModel\n>>> from PIL import Image\n>>> import requests\n\n>>> # load MaskFormer fine-tuned on ADE20k semantic segmentation\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/maskformer-swin-base-ade\")\n>>> model = MaskFormerModel.from_pretrained(\"facebook/maskformer-swin-base-ade\")\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> # forward pass\n>>> outputs = model(**inputs)\n\n>>> # the decoder of MaskFormer outputs hidden states of shape (batch_size, num_queries, hidden_size)\n>>> transformer_decoder_last_hidden_state = outputs.transformer_decoder_last_hidden_state\n>>> list(transformer_decoder_last_hidden_state.shape)\n[1, 100, 256]\n```", "```py\n>>> from transformers import AutoImageProcessor, MaskFormerForInstanceSegmentation\n>>> from PIL import Image\n>>> import requests\n\n>>> # load MaskFormer fine-tuned on ADE20k semantic segmentation\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/maskformer-swin-base-ade\")\n>>> model = MaskFormerForInstanceSegmentation.from_pretrained(\"facebook/maskformer-swin-base-ade\")\n\n>>> url = (\n...     \"https://huggingface.co/datasets/hf-internal-testing/fixtures_ade20k/resolve/main/ADE_val_00000001.jpg\"\n... )\n>>> image = Image.open(requests.get(url, stream=True).raw)\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n\n>>> outputs = model(**inputs)\n>>> # model predicts class_queries_logits of shape `(batch_size, num_queries)`\n>>> # and masks_queries_logits of shape `(batch_size, num_queries, height, width)`\n>>> class_queries_logits = outputs.class_queries_logits\n>>> masks_queries_logits = outputs.masks_queries_logits\n\n>>> # you can pass them to image_processor for postprocessing\n>>> predicted_semantic_map = image_processor.post_process_semantic_segmentation(\n...     outputs, target_sizes=[image.size[::-1]]\n... )[0]\n\n>>> # we refer to the demo notebooks for visualization (see \"Resources\" section in the MaskFormer docs)\n>>> list(predicted_semantic_map.shape)\n[512, 683]\n```", "```py\n>>> from transformers import AutoImageProcessor, MaskFormerForInstanceSegmentation\n>>> from PIL import Image\n>>> import requests\n\n>>> # load MaskFormer fine-tuned on COCO panoptic segmentation\n>>> image_processor = AutoImageProcessor.from_pretrained(\"facebook/maskformer-swin-base-coco\")\n>>> model = MaskFormerForInstanceSegmentation.from_pretrained(\"facebook/maskformer-swin-base-coco\")\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n>>> inputs = image_processor(images=image, return_tensors=\"pt\")\n\n>>> outputs = model(**inputs)\n>>> # model predicts class_queries_logits of shape `(batch_size, num_queries)`\n>>> # and masks_queries_logits of shape `(batch_size, num_queries, height, width)`\n>>> class_queries_logits = outputs.class_queries_logits\n>>> masks_queries_logits = outputs.masks_queries_logits\n\n>>> # you can pass them to image_processor for postprocessing\n>>> result = image_processor.post_process_panoptic_segmentation(outputs, target_sizes=[image.size[::-1]])[0]\n\n>>> # we refer to the demo notebooks for visualization (see \"Resources\" section in the MaskFormer docs)\n>>> predicted_panoptic_map = result[\"segmentation\"]\n>>> list(predicted_panoptic_map.shape)\n[480, 640]\n```"]