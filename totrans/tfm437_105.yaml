- en: Optimizing LLMs for Speed and Memory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/transformers/v4.37.2/en/llm_tutorial_optimization](https://huggingface.co/docs/transformers/v4.37.2/en/llm_tutorial_optimization)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/35.cf42645b.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Tip.c2ecdbf4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/DocNotebookDropdown.3e6b3817.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
  prefs: []
  type: TYPE_NORMAL
- en: 'Large Language Models (LLMs) such as GPT3/4, [Falcon](https://huggingface.co/tiiuae/falcon-40b),
    and [Llama](https://huggingface.co/meta-llama/Llama-2-70b-hf) are rapidly advancing
    in their ability to tackle human-centric tasks, establishing themselves as essential
    tools in modern knowledge-based industries. Deploying these models in real-world
    tasks remains challenging, however:'
  prefs: []
  type: TYPE_NORMAL
- en: To exhibit near-human text understanding and generation capabilities, LLMs currently
    require to be composed of billions of parameters (see [Kaplan et al](https://arxiv.org/abs/2001.08361),
    [Wei et. al](https://arxiv.org/abs/2206.07682)). This consequently amplifies the
    memory demands for inference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In many real-world tasks, LLMs need to be given extensive contextual information.
    This necessitates the model’s capability to manage very long input sequences during
    inference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The crux of these challenges lies in augmenting the computational and memory
    capabilities of LLMs, especially when handling expansive input sequences.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this guide, we will go over the effective techniques for efficient LLM deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lower Precision:** Research has shown that operating at reduced numerical
    precision, namely [8-bit and 4-bit](./main_classes/quantization.md) can achieve
    computational advantages without a considerable decline in model performance.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Flash Attention:** Flash Attention is a variation of the attention algorithm
    that not only provides a more memory-efficient approach but also realizes increased
    efficiency due to optimized GPU memory utilization.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Architectural Innovations:** Considering that LLMs are always deployed in
    the same way during inference, namely autoregressive text generation with a long
    input context, specialized model architectures have been proposed that allow for
    more efficient inference. The most important advancement in model architectures
    hereby are [Alibi](https://arxiv.org/abs/2108.12409), [Rotary embeddings](https://arxiv.org/abs/2104.09864),
    [Multi-Query Attention (MQA)](https://arxiv.org/abs/1911.02150) and [Grouped-Query-Attention
    (GQA)]((https://arxiv.org/abs/2305.13245)).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Throughout this guide, we will offer an analysis of auto-regressive generation
    from a tensor’s perspective. We delve into the pros and cons of adopting lower
    precision, provide a comprehensive exploration of the latest attention algorithms,
    and discuss improved LLM architectures. While doing so, we run practical examples
    showcasing each of the feature improvements.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Lower Precision
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Memory requirements of LLMs can be best understood by seeing the LLM as a set
    of weight matrices and vectors and the text inputs as a sequence of vectors. In
    the following, the definition *weights* will be used to signify all model weight
    matrices and vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing this guide, LLMs consist of at least a couple billion
    parameters. Each parameter thereby is made of a decimal number, e.g. `4.5689`
    which is usually stored in either [float32](https://en.wikipedia.org/wiki/Single-precision_floating-point_format),
    [bfloat16](https://en.wikipedia.org/wiki/Bfloat16_floating-point_format), or [float16](https://en.wikipedia.org/wiki/Half-precision_floating-point_format)
    format. This allows us to easily compute the memory requirement to load the LLM
    into memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Loading the weights of a model having X billion parameters requires roughly
    4* X GB of VRAM in float32 precision*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Nowadays, models are however rarely trained in full float32 precision, but
    usually in bfloat16 precision or less frequently in float16 precision. Therefore
    the rule of thumb becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Loading the weights of a model having X billion parameters requires roughly
    2* X GB of VRAM in bfloat16/float16 precision*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For shorter text inputs (less than 1024 tokens), the memory requirement for
    inference is very much dominated by the memory requirement to load the weights.
    Therefore, for now, let’s assume that the memory requirement for inference is
    equal to the memory requirement to load the model into the GPU VRAM.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give some examples of how much VRAM it roughly takes to load a model in
    bfloat16:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GPT3** requires 2 * 175 GB = **350 GB** VRAM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Bloom**](https://huggingface.co/bigscience/bloom) requires 2 * 176 GB =
    **352 GB** VRAM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Llama-2-70b**](https://huggingface.co/meta-llama/Llama-2-70b-hf) requires
    2 * 70 GB = **140 GB** VRAM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Falcon-40b**](https://huggingface.co/tiiuae/falcon-40b) requires 2 * 40
    GB = **80 GB** VRAM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**MPT-30b**](https://huggingface.co/mosaicml/mpt-30b) requires 2 * 30 GB =
    **60 GB** VRAM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**bigcode/starcoder**](https://huggingface.co/bigcode/starcoder) requires
    2 * 15.5 = **31 GB** VRAM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As of writing this document, the largest GPU chip on the market is the A100
    & H100 offering 80GB of VRAM. Most of the models listed before require more than
    80GB just to be loaded and therefore necessarily require [tensor parallelism](https://huggingface.co/docs/transformers/perf_train_gpu_many#tensor-parallelism)
    and/or [pipeline parallelism](https://huggingface.co/docs/transformers/perf_train_gpu_many#naive-model-parallelism-vertical-and-pipeline-parallelism).
  prefs: []
  type: TYPE_NORMAL
- en: 🤗 Transformers does not support tensor parallelism out of the box as it requires
    the model architecture to be written in a specific way. If you’re interested in
    writing models in a tensor-parallelism-friendly way, feel free to have a look
    at [the text-generation-inference library](https://github.com/huggingface/text-generation-inference/tree/main/server/text_generation_server/models/custom_modeling).
  prefs: []
  type: TYPE_NORMAL
- en: Naive pipeline parallelism is supported out of the box. For this, simply load
    the model with `device="auto"` which will automatically place the different layers
    on the available GPUs as explained [here](https://huggingface.co/docs/accelerate/v0.22.0/en/concept_guides/big_model_inference).
    Note, however that while very effective, this naive pipeline parallelism does
    not tackle the issues of GPU idling. For this more advanced pipeline parallelism
    is required as explained [here](https://huggingface.co/docs/transformers/en/perf_train_gpu_many#naive-model-parallelism-vertical-and-pipeline-parallelism).
  prefs: []
  type: TYPE_NORMAL
- en: If you have access to an 8 x 80GB A100 node, you could load BLOOM as follows
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By using `device_map="auto"` the attention layers would be equally distributed
    over all available GPUs.
  prefs: []
  type: TYPE_NORMAL
- en: In this guide, we will use [bigcode/octocoder](https://huggingface.co/bigcode/octocoder)
    as it can be run on a single 40 GB A100 GPU device chip. Note that all memory
    and speed optimizations that we will apply going forward, are equally applicable
    to models that require model or tensor parallelism.
  prefs: []
  type: TYPE_NORMAL
- en: Since the model is loaded in bfloat16 precision, using our rule of thumb above,
    we would expect the memory requirement to run inference with `bigcode/octocoder`
    to be around 31 GB VRAM. Let’s give it a try.
  prefs: []
  type: TYPE_NORMAL
- en: We first load the model and tokenizer and then pass both to Transformers’ [pipeline](https://huggingface.co/docs/transformers/main_classes/pipelines)
    object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]python\ndef bytes_to_giga_bytes(bytes):\n    return bytes / 1024 / 1024
    / 1024\n[PRE5]'
  prefs: []
  type: TYPE_NORMAL
- en: Nice, we can now directly use the result to convert bytes into Gigabytes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let’s call [`torch.cuda.max_memory_allocated`](https://pytorch.org/docs/stable/generated/torch.cuda.max_memory_allocated.html)
    to measure the peak GPU memory allocation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Close enough to our back-of-the-envelope computation! We can see the number
    is not exactly correct as going from bytes to kilobytes requires a multiplication
    of 1024 instead of 1000\. Therefore the back-of-the-envelope formula can also
    be understood as an “at most X GB” computation. Note that if we had tried to run
    the model in full float32 precision, a whopping 64 GB of VRAM would have been
    required.
  prefs: []
  type: TYPE_NORMAL
- en: Almost all models are trained in bfloat16 nowadays, there is no reason to run
    the model in full float32 precision if [your GPU supports bfloat16](https://discuss.pytorch.org/t/bfloat16-native-support/117155/5).
    Float32 won’t give better inference results than the precision that was used to
    train the model.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If you are unsure in which format the model weights are stored on the Hub, you
    can always look into the checkpoint’s config under `"torch_dtype"`, *e.g.* [here](https://huggingface.co/meta-llama/Llama-2-7b-hf/blob/6fdf2e60f86ff2481f2241aaee459f85b5b0bbb9/config.json#L21).
    It is recommended to set the model to the same precision type as written in the
    config when loading with `from_pretrained(..., torch_dtype=...)` except when the
    original type is float32 in which case one can use both `float16` or `bfloat16`
    for inference.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s define a `flush(...)` function to free all allocated memory so that we
    can accurately measure the peak allocated GPU memory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let’s call it now for the next experiment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the recent version of the accelerate library, you can also use an utility
    method called `release_memory()`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now what if your GPU does not have 32 GB of VRAM? It has been found that model
    weights can be quantized to 8-bit or 4-bits without a significant loss in performance
    (see [Dettmers et al.](https://arxiv.org/abs/2208.07339)). Model can be quantized
    to even 3 or 2 bits with an acceptable loss in performance as shown in the recent
    [GPTQ paper](https://arxiv.org/abs/2210.17323) 🤯.
  prefs: []
  type: TYPE_NORMAL
- en: Without going into too many details, quantization schemes aim at reducing the
    precision of weights while trying to keep the model’s inference results as accurate
    as possible (*a.k.a* as close as possible to bfloat16). Note that quantization
    works especially well for text generation since all we care about is choosing
    the *set of most likely next tokens* and don’t really care about the exact values
    of the next token *logit* distribution. All that matters is that the next token
    *logit* distribution stays roughly the same so that an `argmax` or `topk` operation
    gives the same results.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are various quantization techniques, which we won’t discuss in detail
    here, but in general, all quantization techniques work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Quantize all weights to the target precision
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the quantized weights, and pass the input sequence of vectors in bfloat16
    precision
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamically dequantize weights to bfloat16 to perform the computation with their
    input vectors in bfloat16 precision
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a nutshell, this means that *inputs-weight matrix* multiplications, with<math><semantics><mrow><mi>X</mi></mrow>
    <annotation encoding="application/x-tex">X</annotation></semantics></math> X being
    the *inputs*,<math><semantics><mrow><mi>W</mi></mrow> <annotation encoding="application/x-tex">W</annotation></semantics></math>
    W being a weight matrix and<math><semantics><mrow><mi>Y</mi></mrow> <annotation
    encoding="application/x-tex">Y</annotation></semantics></math> Y being the output:
    <math display="block"><semantics><mrow><mi>Y</mi><mo>=</mo><mi>X</mi><mo>∗</mo><mi>W</mi></mrow>
    <annotation encoding="application/x-tex">Y = X * W</annotation></semantics></math>
    Y=X∗W'
  prefs: []
  type: TYPE_NORMAL
- en: are changed to <math display="block"><semantics><mrow><mi>Y</mi><mo>=</mo><mi>X</mi><mo>∗</mo><mtext>dequantize</mtext><mo
    stretchy="false">(</mo><mi>W</mi><mo stretchy="false">)</mo></mrow> <annotation
    encoding="application/x-tex">Y = X * \text{dequantize}(W)</annotation></semantics></math>
    Y=X∗dequantize(W)
  prefs: []
  type: TYPE_NORMAL
- en: for every matrix multiplication. Dequantization and re-quantization is performed
    sequentially for all weight matrices as the inputs run through the network graph.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, inference time is often **not** reduced when using quantized weights,
    but rather increases. Enough theory, let’s give it a try! To quantize the weights
    with Transformers, you need to make sure that the [`bitsandbytes`](https://github.com/TimDettmers/bitsandbytes)
    library is installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We can then load models in 8-bit quantization by simply adding a `load_in_8bit=True`
    flag to `from_pretrained`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s run our example again and measure the memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]python\ndef bytes_to_giga_bytes(bytes):\n    return bytes / 1024 / 1024
    / 1024\n[PRE16]'
  prefs: []
  type: TYPE_NORMAL
- en: Nice, we’re getting the same result as before, so no loss in accuracy! Let’s
    look at how much memory was used this time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Significantly less! We’re down to just a bit over 15 GBs and could therefore
    run this model on consumer GPUs like the 4090. We’re seeing a very nice gain in
    memory efficiency and more or less no degradation to the model’s output. However,
    we can also notice a slight slow-down during inference.
  prefs: []
  type: TYPE_NORMAL
- en: We delete the models and flush the memory again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Let’s see what peak GPU memory consumption 4-bit quantization gives. Quantizing
    the model to 4-bit can be done with the same API as before - this time by passing
    `load_in_4bit=True` instead of `load_in_8bit=True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]\ndef bytes_to_gigabytes(bytes):\n    return bytes / 1024 / 1024 / 1024\n[PRE23]'
  prefs: []
  type: TYPE_NORMAL
- en: We’re almost seeing the same output text as before - just the `python` is missing
    just before the code snippet. Let’s see how much memory was required.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Just 9.5GB! That’s really not a lot for a >15 billion parameter model.
  prefs: []
  type: TYPE_NORMAL
- en: While we see very little degradation in accuracy for our model here, 4-bit quantization
    can in practice often lead to different results compared to 8-bit quantization
    or full `bfloat16` inference. It is up to the user to try it out.
  prefs: []
  type: TYPE_NORMAL
- en: Also note that inference here was again a bit slower compared to 8-bit quantization
    which is due to the more aggressive quantization method used for 4-bit quantization
    leading to<math><semantics><mrow><mtext>quantize</mtext></mrow> <annotation encoding="application/x-tex">\text{quantize}</annotation></semantics></math>
    quantize and<math><semantics><mrow><mtext>dequantize</mtext></mrow> <annotation
    encoding="application/x-tex">\text{dequantize}</annotation></semantics></math>
    dequantize taking longer during inference.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Overall, we saw that running OctoCoder in 8-bit precision reduced the required
    GPU VRAM from 32G GPU VRAM to only 15GB and running the model in 4-bit precision
    further reduces the required GPU VRAM to just a bit over 9GB.
  prefs: []
  type: TYPE_NORMAL
- en: 4-bit quantization allows the model to be run on GPUs such as RTX3090, V100,
    and T4 which are quite accessible for most people.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on quantization and to see how one can quantize models
    to require even less GPU VRAM memory than 4-bit, we recommend looking into the
    [`AutoGPTQ`](https://huggingface.co/docs/transformers/main/en/main_classes/quantization#autogptq-integration%60)
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: As a conclusion, it is important to remember that model quantization trades
    improved memory efficiency against accuracy and in some cases inference time.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If GPU memory is not a constraint for your use case, there is often no need
    to look into quantization. However many GPUs simply can’t run LLMs without quantization
    methods and in this case, 4-bit and 8-bit quantization schemes are extremely useful
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: For more in-detail usage information, we strongly recommend taking a look at
    the [Transformers Quantization Docs](https://huggingface.co/docs/transformers/main_classes/quantization#general-usage).
    Next, let’s look into how we can improve computational and memory efficiency by
    using better algorithms and an improved model architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Flash Attention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Today’s top-performing LLMs share more or less the same fundamental architecture
    that consists of feed-forward layers, activation layers, layer normalization layers,
    and most crucially, self-attention layers.
  prefs: []
  type: TYPE_NORMAL
- en: Self-attention layers are central to Large Language Models (LLMs) in that they
    enable the model to understand the contextual relationships between input tokens.
    However, the peak GPU memory consumption for self-attention layers grows *quadratically*
    both in compute and memory complexity with number of input tokens (also called
    *sequence length*) that we denote in the following by<math><semantics><mrow><mi>N</mi></mrow>
    <annotation encoding="application/x-tex">N</annotation></semantics></math> N .
    While this is not really noticeable for shorter input sequences (of up to 1000
    input tokens), it becomes a serious problem for longer input sequences (at around
    16000 input tokens).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a closer look. The formula to compute the output<math><semantics><mrow><mi
    mathvariant="bold">O</mi></mrow> <annotation encoding="application/x-tex">\mathbf{O}</annotation></semantics></math>
    O of a self-attention layer for an input<math><semantics><mrow><mi mathvariant="bold">X</mi></mrow>
    <annotation encoding="application/x-tex">\mathbf{X}</annotation></semantics></math>
    X of length<math><semantics><mrow><mi>N</mi></mrow> <annotation encoding="application/x-tex">N</annotation></semantics></math>
    N is: <math display="block"><semantics><mrow><mtext mathvariant="bold">O</mtext><mo>=</mo><mtext>Attn</mtext><mo
    stretchy="false">(</mo><mi mathvariant="bold">X</mi><mo stretchy="false">)</mo><mo>=</mo><mi
    mathvariant="bold">V</mi><mo>×</mo><mtext>Softmax</mtext><mo stretchy="false">(</mo><msup><mrow><mi
    mathvariant="bold">Q</mi><mi mathvariant="bold">K</mi></mrow><mi>T</mi></msup><mo
    stretchy="false">)</mo><mtext> with </mtext><mi mathvariant="bold">Q</mi><mo>=</mo><msub><mi
    mathvariant="bold">W</mi><mi>q</mi></msub><mi mathvariant="bold">X</mi><mo separator="true">,</mo><mi
    mathvariant="bold">V</mi><mo>=</mo><msub><mi mathvariant="bold">W</mi><mi>v</mi></msub><mi
    mathvariant="bold">X</mi><mo separator="true">,</mo><mi mathvariant="bold">K</mi><mo>=</mo><msub><mi
    mathvariant="bold">W</mi><mi>k</mi></msub><mi mathvariant="bold">X</mi></mrow>
    <annotation encoding="application/x-tex">\textbf{O} = \text{Attn}(\mathbf{X})
    = \mathbf{V} \times \text{Softmax}(\mathbf{QK}^T) \text{ with } \mathbf{Q} = \mathbf{W}_q
    \mathbf{X}, \mathbf{V} = \mathbf{W}_v \mathbf{X}, \mathbf{K} = \mathbf{W}_k \mathbf{X}</annotation></semantics></math>
    O=Attn(X)=V×Softmax(QKT) with Q=Wq​X,V=Wv​X,K=Wk​X <math><semantics><mrow><mi
    mathvariant="bold">X</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi mathvariant="bold">x</mi><mn>1</mn></msub><mo
    separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi
    mathvariant="normal">.</mi><msub><mi mathvariant="bold">x</mi><mi>N</mi></msub><mo
    stretchy="false">)</mo></mrow> <annotation encoding="application/x-tex">\mathbf{X}
    = (\mathbf{x}_1, ... \mathbf{x}_{N})</annotation></semantics></math> X=(x1​,...xN​)
    is thereby the input sequence to the attention layer. The projections<math><semantics><mrow><mi
    mathvariant="bold">Q</mi></mrow> <annotation encoding="application/x-tex">\mathbf{Q}</annotation></semantics></math>
    Q and<math><semantics><mrow><mi mathvariant="bold">K</mi></mrow> <annotation encoding="application/x-tex">\mathbf{K}</annotation></semantics></math>
    K will each consist of<math><semantics><mrow><mi>N</mi></mrow> <annotation encoding="application/x-tex">N</annotation></semantics></math>
    N vectors resulting in the<math><semantics><mrow><msup><mrow><mi mathvariant="bold">Q</mi><mi
    mathvariant="bold">K</mi></mrow><mi>T</mi></msup></mrow> <annotation encoding="application/x-tex">\mathbf{QK}^T</annotation></semantics></math>
    QKT being of size<math><semantics><mrow><msup><mi>N</mi><mn>2</mn></msup></mrow>
    <annotation encoding="application/x-tex">N^2</annotation></semantics></math> N2
    .'
  prefs: []
  type: TYPE_NORMAL
- en: LLMs usually have multiple attention heads, thus doing multiple self-attention
    computations in parallel. Assuming, the LLM has 40 attention heads and runs in
    bfloat16 precision, we can calculate the memory requirement to store the<math><semantics><mrow><mi
    mathvariant="bold">Q</mi><msup><mi mathvariant="bold">K</mi><mi mathvariant="bold">T</mi></msup></mrow>
    <annotation encoding="application/x-tex">\mathbf{QK^T}</annotation></semantics></math>
    QKT matrices to be<math><semantics><mrow><mn>40</mn><mo>∗</mo><mn>2</mn><mo>∗</mo><msup><mi>N</mi><mn>2</mn></msup></mrow>
    <annotation encoding="application/x-tex">40 * 2 * N^2</annotation></semantics></math>
    40∗2∗N2 bytes. For<math><semantics><mrow><mi>N</mi><mo>=</mo><mn>1000</mn></mrow>
    <annotation encoding="application/x-tex">N=1000</annotation></semantics></math>
    N=1000 only around 50 MB of VRAM are needed, however, for<math><semantics><mrow><mi>N</mi><mo>=</mo><mn>16000</mn></mrow>
    <annotation encoding="application/x-tex">N=16000</annotation></semantics></math>
    N=16000 we would need 19 GB of VRAM, and for<math><semantics><mrow><mi>N</mi><mo>=</mo><mn>100</mn><mo
    separator="true">,</mo><mn>000</mn></mrow> <annotation encoding="application/x-tex">N=100,000</annotation></semantics></math>
    N=100,000 we would need almost 1TB just to store the<math><semantics><mrow><msup><mrow><mi
    mathvariant="bold">Q</mi><mi mathvariant="bold">K</mi></mrow><mi>T</mi></msup></mrow>
    <annotation encoding="application/x-tex">\mathbf{QK}^T</annotation></semantics></math>
    QKT matrices.
  prefs: []
  type: TYPE_NORMAL
- en: Long story short, the default self-attention algorithm quickly becomes prohibitively
    memory-expensive for large input contexts.
  prefs: []
  type: TYPE_NORMAL
- en: As LLMs improve in text comprehension and generation, they are applied to increasingly
    complex tasks. While models once handled the translation or summarization of a
    few sentences, they now manage entire pages, demanding the capability to process
    extensive input lengths.
  prefs: []
  type: TYPE_NORMAL
- en: How can we get rid of the exorbitant memory requirements for large input lengths?
    We need a new way to compute the self-attention mechanism that gets rid of the<math><semantics><mrow><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup></mrow>
    <annotation encoding="application/x-tex">QK^T</annotation></semantics></math>
    QKT matrix. [Tri Dao et al.](https://arxiv.org/abs/2205.14135) developed exactly
    such a new algorithm and called it **Flash Attention**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, Flash Attention breaks the <math><semantics><mrow><mi mathvariant="bold">V</mi><mo>×</mo><mtext>Softmax</mtext><mo
    stretchy="false">(</mo><msup><mrow><mi mathvariant="bold">Q</mi><mi mathvariant="bold">K</mi></mrow><mi>T</mi></msup></mrow><annotation
    encoding="application/x-tex">\mathbf{V} \times \text{Softmax}(\mathbf{QK}^T</annotation></semantics></math>V×Softmax(QKT)
    computation apart and instead computes smaller chunks of the output by iterating
    over multiple softmax computation steps: <math display="block"><semantics><mrow><msub><mtext
    mathvariant="bold">O</mtext><mi>i</mi></msub><mo>←</mo><msubsup><mi>s</mi><mrow><mi>i</mi><mi>j</mi></mrow><mi>a</mi></msubsup><mo>∗</mo><msub><mtext
    mathvariant="bold">O</mtext><mi>i</mi></msub><mo>+</mo><msubsup><mi>s</mi><mrow><mi>i</mi><mi>j</mi></mrow><mi>b</mi></msubsup><mo>∗</mo><msub><mi
    mathvariant="bold">V</mi><mi>j</mi></msub><mo>×</mo><mtext>Softmax</mtext><mo
    stretchy="false">(</mo><msubsup><mrow><mi mathvariant="bold">Q</mi><mi mathvariant="bold">K</mi></mrow><mrow><mi>i</mi><mo
    separator="true">,</mo><mi>j</mi></mrow><mi>T</mi></msubsup><mo stretchy="false">)</mo><mtext> for multiple </mtext><mi>i</mi><mo
    separator="true">,</mo><mi>j</mi><mtext> iterations</mtext></mrow> <annotation
    encoding="application/x-tex">\textbf{O}_i \leftarrow s^a_{ij} * \textbf{O}_i +
    s^b_{ij} * \mathbf{V}_{j} \times \text{Softmax}(\mathbf{QK}^T_{i,j}) \text{ for
    multiple } i, j \text{ iterations}</annotation></semantics></math> Oi​←sija​∗Oi​+sijb​∗Vj​×Softmax(QKi,jT​) for multiple i,j iterations'
  prefs: []
  type: TYPE_NORMAL
- en: with<math><semantics><mrow><msubsup><mi>s</mi><mrow><mi>i</mi><mi>j</mi></mrow><mi>a</mi></msubsup></mrow>
    <annotation encoding="application/x-tex">s^a_{ij}</annotation></semantics></math>
    sija​ and<math><semantics><mrow><msubsup><mi>s</mi><mrow><mi>i</mi><mi>j</mi></mrow><mi>b</mi></msubsup></mrow>
    <annotation encoding="application/x-tex">s^b_{ij}</annotation></semantics></math>
    sijb​ being some softmax normalization statistics that need to be recomputed for
    every<math><semantics><mrow><mi>i</mi></mrow> <annotation encoding="application/x-tex">i</annotation></semantics></math>
    i and<math><semantics><mrow><mi>j</mi></mrow> <annotation encoding="application/x-tex">j</annotation></semantics></math>
    j .
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the whole Flash Attention is a bit more complex and is greatly
    simplified here as going in too much depth is out of scope for this guide. The
    reader is invited to take a look at the well-written [Flash Attention paper](https://arxiv.org/abs/2205.14135)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main takeaway here is:'
  prefs: []
  type: TYPE_NORMAL
- en: By keeping track of softmax normalization statistics and by using some smart
    mathematics, Flash Attention gives **numerical identical** outputs compared to
    the default self-attention layer at a memory cost that only increases linearly
    with<math><semantics><mrow><mi>N</mi></mrow> <annotation encoding="application/x-tex">N</annotation></semantics></math>
    N .
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Looking at the formula, one would intuitively say that Flash Attention must
    be much slower compared to the default self-attention formula as more computation
    needs to be done. Indeed Flash Attention requires more FLOPs compared to normal
    attention as the softmax normalization statistics have to constantly be recomputed
    (see [paper](https://arxiv.org/abs/2205.14135) for more details if interested)
  prefs: []
  type: TYPE_NORMAL
- en: However, Flash Attention is much faster in inference compared to default attention
    which comes from its ability to significantly reduce the demands on the slower,
    high-bandwidth memory of the GPU (VRAM), focusing instead on the faster on-chip
    memory (SRAM).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Essentially, Flash Attention makes sure that all intermediate write and read
    operations can be done using the fast *on-chip* SRAM memory instead of having
    to access the slower VRAM memory to compute the output vector<math><semantics><mrow><mi
    mathvariant="bold">O</mi></mrow> <annotation encoding="application/x-tex">\mathbf{O}</annotation></semantics></math>
    O .
  prefs: []
  type: TYPE_NORMAL
- en: In practice, there is currently absolutely no reason to **not** use Flash Attention
    if available. The algorithm gives mathematically the same outputs, and is both
    faster and more memory-efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at a practical example.
  prefs: []
  type: TYPE_NORMAL
- en: Our OctoCoder model now gets a significantly longer input prompt which includes
    a so-called *system prompt*. System prompts are used to steer the LLM into a better
    assistant that is tailored to the users’ task. In the following, we use a system
    prompt that will make OctoCoder a better coding assistant.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'For demonstration purposes, we duplicate the system prompt by ten so that the
    input length is long enough to observe Flash Attention’s memory savings. We append
    the original text prompt `"Question: Please write a function in Python that transforms
    bytes to Giga bytes.\n\nAnswer: Here"`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We instantiate our model again in bfloat16 precision.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Let’s now run the model just like before *without Flash Attention* and measure
    the peak GPU memory requirement and inference time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We’re getting the same output as before, however this time, the model repeats
    the answer multiple times until it’s 60 tokens cut-off. This is not surprising
    as we’ve repeated the system prompt ten times for demonstration purposes and thus
    cued the model to repeat itself.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note** that the system prompt should not be repeated ten times in real-world
    applications - one time is enough!'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s measure the peak GPU memory requirement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As we can see the peak GPU memory requirement is now significantly higher than
    in the beginning, which is largely due to the longer input sequence. Also the
    generation takes a little over a minute now.
  prefs: []
  type: TYPE_NORMAL
- en: We call `flush()` to free GPU memory for our next experiment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: For comparison, let’s run the same function, but enable Flash Attention instead.
    To do so, we convert the model to [BetterTransformer](https://huggingface.co/docs/optimum/bettertransformer/overview)
    and by doing so enabling PyTorch’s [SDPA self-attention](https://pytorch.org/docs/master/generated/torch.nn.functional.scaled_dot_product_attention)
    which in turn is able to use Flash Attention.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now we run the exact same code snippet as before and under the hood Transformers
    will make use of Flash Attention.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We’re getting the exact same result as before, but can observe a very significant
    speed-up thanks to Flash Attention.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s measure the memory consumption one last time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: And we’re almost back to our original 29GB peak GPU memory from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: We can observe that we only use roughly 100MB more GPU memory when passing a
    very long input sequence with Flash Attention compared to passing a short input
    sequence as done in the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: For more information on how to use Flash Attention, please have a look at [this
    doc page](https://huggingface.co/docs/transformers/en/perf_infer_gpu_one#flashattention-2).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Architectural Innovations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far we have looked into improving computational and memory efficiency by:'
  prefs: []
  type: TYPE_NORMAL
- en: Casting the weights to a lower precision format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacing the self-attention algorithm with a more memory- and compute efficient
    version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s now look into how we can change the architecture of an LLM so that it
    is most effective and efficient for task that require long text inputs, *e.g.*:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieval augmented Questions Answering,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summarization,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that *chat* not only requires the LLM to handle long text inputs, but it
    also necessitates that the LLM is able to efficiently handle the back-and-forth
    dialogue between user and assistant (such as ChatGPT).
  prefs: []
  type: TYPE_NORMAL
- en: Once trained, the fundamental LLM architecture is difficult to change, so it
    is important to make considerations about the LLM’s tasks beforehand and accordingly
    optimize the model’s architecture. There are two important components of the model
    architecture that quickly become memory and/or performance bottlenecks for large
    input sequences.
  prefs: []
  type: TYPE_NORMAL
- en: The positional embeddings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key-value cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s go over each component in more detail
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Improving positional embeddings of LLMs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Self-attention puts each token in relation to each other’s tokens. As an example,
    the<math><semantics><mrow><mtext>Softmax</mtext><mo stretchy="false">(</mo><msup><mrow><mi
    mathvariant="bold">Q</mi><mi mathvariant="bold">K</mi></mrow><mi>T</mi></msup><mo
    stretchy="false">)</mo></mrow> <annotation encoding="application/x-tex">\text{Softmax}(\mathbf{QK}^T)</annotation></semantics></math>
    Softmax(QKT) matrix of the text input sequence *“Hello”, “I”, “love”, “you”* could
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a42237d68d8acd5442beddab2228c8d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Each word token is given a probability mass at which it attends all other word
    tokens and, therefore is put into relation with all other word tokens. E.g. the
    word *“love”* attends to the word *“Hello”* with 5%, to *“I”* with 30%, and to
    itself with 65%.
  prefs: []
  type: TYPE_NORMAL
- en: A LLM based on self-attention, but without position embeddings would have great
    difficulties in understanding the positions of the text inputs to each other.
    This is because the probability score computed by<math><semantics><mrow><msup><mrow><mi
    mathvariant="bold">Q</mi><mi mathvariant="bold">K</mi></mrow><mi>T</mi></msup></mrow>
    <annotation encoding="application/x-tex">\mathbf{QK}^T</annotation></semantics></math>
    QKT relates each word token to each other word token in<math><semantics><mrow><mi>O</mi><mo
    stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow> <annotation
    encoding="application/x-tex">O(1)</annotation></semantics></math> O(1) computations
    regardless of their relative positional distance to each other. Therefore, for
    the LLM without position embeddings each token appears to have the same distance
    to all other tokens, *e.g.* differentiating between *“Hello I love you”* and *“You
    love I hello”* would be very challenging.
  prefs: []
  type: TYPE_NORMAL
- en: For the LLM to understand sentence order, an additional *cue* is needed and
    is usually applied in the form of *positional encodings* (or also called *positional
    embeddings*). Positional encodings, encode the position of each token into a numerical
    presentation that the LLM can leverage to better understand sentence order.
  prefs: []
  type: TYPE_NORMAL
- en: The authors of the [*Attention Is All You Need*](https://arxiv.org/abs/1706.03762)
    paper introduced sinusoidal positional embeddings<math><semantics><mrow><mi mathvariant="bold">P</mi><mo>=</mo><msub><mi
    mathvariant="bold">p</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo
    separator="true">,</mo><msub><mi mathvariant="bold">p</mi><mi>N</mi></msub></mrow>
    <annotation encoding="application/x-tex">\mathbf{P} = \mathbf{p}_1, \ldots, \mathbf{p}_N</annotation></semantics></math>
    P=p1​,…,pN​ . where each vector<math><semantics><mrow><msub><mi mathvariant="bold">p</mi><mi>i</mi></msub></mrow>
    <annotation encoding="application/x-tex">\mathbf{p}_i</annotation></semantics></math>
    pi​ is computed as a sinusoidal function of its position<math><semantics><mrow><mi>i</mi></mrow>
    <annotation encoding="application/x-tex">i</annotation></semantics></math> i .
    The positional encodings are then simply added to the input sequence vectors<math><semantics><mrow><mover
    accent="true"><mi mathvariant="bold">X</mi><mo>^</mo></mover><mo>=</mo><msub><mover
    accent="true"><mi mathvariant="bold">x</mi><mo>^</mo></mover><mn>1</mn></msub><mo
    separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mover accent="true"><mi
    mathvariant="bold">x</mi><mo>^</mo></mover><mi>N</mi></msub></mrow> <annotation
    encoding="application/x-tex">\mathbf{\hat{X}} = \mathbf{\hat{x}}_1, \ldots, \mathbf{\hat{x}}_N</annotation></semantics></math>
    X^=x^1​,…,x^N​ =<math><semantics><mrow><msub><mi mathvariant="bold">x</mi><mn>1</mn></msub><mo>+</mo><msub><mi
    mathvariant="bold">p</mi><mn>1</mn></msub><mo separator="true">,</mo><mo>…</mo><mo
    separator="true">,</mo><msub><mi mathvariant="bold">x</mi><mi>N</mi></msub><mo>+</mo><msub><mi
    mathvariant="bold">p</mi><mi>N</mi></msub></mrow> <annotation encoding="application/x-tex">\mathbf{x}_1
    + \mathbf{p}_1, \ldots, \mathbf{x}_N + \mathbf{p}_N</annotation></semantics></math>
    x1​+p1​,…,xN​+pN​ thereby cueing the model to better learn sentence order.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using fixed position embeddings, others (such as [Devlin et al.](https://arxiv.org/abs/1810.04805))
    used learned positional encodings for which the positional embeddings<math><semantics><mrow><mi
    mathvariant="bold">P</mi></mrow> <annotation encoding="application/x-tex">\mathbf{P}</annotation></semantics></math>
    P are learned during training.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sinusoidal and learned position embeddings used to be the predominant methods
    to encode sentence order into LLMs, but a couple of problems related to these
    positional encodings were found:'
  prefs: []
  type: TYPE_NORMAL
- en: Sinusoidal and learned position embeddings are both absolute positional embeddings,
    *i.e.* encoding a unique embedding for each position id:<math><semantics><mrow><mn>0</mn><mo
    separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>N</mi></mrow>
    <annotation encoding="application/x-tex">0, \ldots, N</annotation></semantics></math>
    0,…,N . As shown by [Huang et al.](https://arxiv.org/abs/2009.13658) and [Su et
    al.](https://arxiv.org/abs/2104.09864), absolute positional embeddings lead to
    poor LLM performance for long text inputs. For long text inputs, it is advantageous
    if the model learns the relative positional distance input tokens have to each
    other instead of their absolute position.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using learned position embeddings, the LLM has to be trained on a fixed
    input length<math><semantics><mrow><mi>N</mi></mrow> <annotation encoding="application/x-tex">N</annotation></semantics></math>
    N, which makes it difficult to extrapolate to an input length longer than what
    it was trained on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Recently, relative positional embeddings that can tackle the above mentioned
    problems have become more popular, most notably:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Rotary Position Embedding (RoPE)](https://arxiv.org/abs/2104.09864)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ALiBi](https://arxiv.org/abs/2108.12409)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both *RoPE* and *ALiBi* argue that it’s best to cue the LLM about sentence order
    directly in the self-attention algorithm as it’s there that word tokens are put
    into relation with each other. More specifically, sentence order should be cued
    by modifying the<math><semantics><mrow><msup><mrow><mi mathvariant="bold">Q</mi><mi
    mathvariant="bold">K</mi></mrow><mi>T</mi></msup></mrow> <annotation encoding="application/x-tex">\mathbf{QK}^T</annotation></semantics></math>
    QKT computation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without going into too many details, *RoPE* notes that positional information
    can be encoded into query-key pairs, *e.g.*<math><semantics><mrow><msub><mi mathvariant="bold">q</mi><mi>i</mi></msub></mrow>
    <annotation encoding="application/x-tex">\mathbf{q}_i</annotation></semantics></math>
    qi​ and<math><semantics><mrow><msub><mi mathvariant="bold">x</mi><mi>j</mi></msub></mrow>
    <annotation encoding="application/x-tex">\mathbf{x}_j</annotation></semantics></math>
    xj​ by rotating each vector by an angle<math><semantics><mrow><mi>θ</mi><mo>∗</mo><mi>i</mi></mrow>
    <annotation encoding="application/x-tex">\theta * i</annotation></semantics></math>
    θ∗i and<math><semantics><mrow><mi>θ</mi><mo>∗</mo><mi>j</mi></mrow> <annotation
    encoding="application/x-tex">\theta * j</annotation></semantics></math> θ∗j respectively
    with<math><semantics><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow>
    <annotation encoding="application/x-tex">i, j</annotation></semantics></math>
    i,j describing each vectors sentence position: <math display="block"><semantics><mrow><msubsup><mover
    accent="true"><mi mathvariant="bold">q</mi><mo>^</mo></mover><mi>i</mi><mi>T</mi></msubsup><msub><mover
    accent="true"><mi mathvariant="bold">x</mi><mo>^</mo></mover><mi>j</mi></msub><mo>=</mo><msubsup><mi
    mathvariant="bold">q</mi><mi>i</mi><mi>T</mi></msubsup><msub><mi mathvariant="bold">R</mi><mrow><mi>θ</mi><mo
    separator="true">,</mo><mi>i</mi><mo>−</mo><mi>j</mi></mrow></msub><msub><mi mathvariant="bold">x</mi><mi>j</mi></msub><mi
    mathvariant="normal">.</mi></mrow> <annotation encoding="application/x-tex">\mathbf{\hat{q}}_i^T
    \mathbf{\hat{x}}_j = \mathbf{{q}}_i^T \mathbf{R}_{\theta, i -j} \mathbf{{x}}_j.</annotation></semantics></math>
    q^​iT​x^j​=qiT​Rθ,i−j​xj​. <math><semantics><mrow><msub><mi mathvariant="bold">R</mi><mrow><mi>θ</mi><mo
    separator="true">,</mo><mi>i</mi><mo>−</mo><mi>j</mi></mrow></msub></mrow> <annotation
    encoding="application/x-tex">\mathbf{R}_{\theta, i - j}</annotation></semantics></math>
    Rθ,i−j​ thereby represents a rotational matrix.<math><semantics><mrow><mi>θ</mi></mrow>
    <annotation encoding="application/x-tex">\theta</annotation></semantics></math>
    θ is *not* learned during training, but instead set to a pre-defined value that
    depends on the maximum input sequence length during training.'
  prefs: []
  type: TYPE_NORMAL
- en: By doing so, the propability score between<math><semantics><mrow><msub><mi mathvariant="bold">q</mi><mi>i</mi></msub></mrow>
    <annotation encoding="application/x-tex">\mathbf{q}_i</annotation></semantics></math>
    qi​ and<math><semantics><mrow><msub><mi mathvariant="bold">q</mi><mi>j</mi></msub></mrow>
    <annotation encoding="application/x-tex">\mathbf{q}_j</annotation></semantics></math>
    qj​ is only affected if<math><semantics><mrow><mi>i</mi><mo mathvariant="normal">≠</mo><mi>j</mi></mrow>
    <annotation encoding="application/x-tex">i \ne j</annotation></semantics></math>
    i=j and solely depends on the relative distance<math><semantics><mrow><mi>i</mi><mo>−</mo><mi>j</mi></mrow>
    <annotation encoding="application/x-tex">i - j</annotation></semantics></math>
    i−j regardless of each vector’s specific positions<math><semantics><mrow><mi>i</mi></mrow>
    <annotation encoding="application/x-tex">i</annotation></semantics></math> i and<math><semantics><mrow><mi>j</mi></mrow>
    <annotation encoding="application/x-tex">j</annotation></semantics></math> j .
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*RoPE* is used in multiple of today’s most important LLMs, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Falcon**](https://huggingface.co/tiiuae/falcon-40b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Llama**](https://arxiv.org/abs/2302.13971)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**PaLM**](https://arxiv.org/abs/2204.02311)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an alternative, *ALiBi* proposes a much simpler relative position encoding
    scheme. The relative distance that input tokens have to each other is added as
    a negative integer scaled by a pre-defined value `m` to each query-key entry of
    the<math><semantics><mrow><msup><mrow><mi mathvariant="bold">Q</mi><mi mathvariant="bold">K</mi></mrow><mi>T</mi></msup></mrow>
    <annotation encoding="application/x-tex">\mathbf{QK}^T</annotation></semantics></math>
    QKT matrix right before the softmax computation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4adb6fd6b6aaa790ed5e4200191e405.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the [ALiBi](https://arxiv.org/abs/2108.12409) paper, this simple
    relative positional encoding allows the model to retain a high performance even
    at very long text input sequences.
  prefs: []
  type: TYPE_NORMAL
- en: '*ALiBi* is used in multiple of today’s most important LLMs, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**MPT**](https://huggingface.co/mosaicml/mpt-30b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**BLOOM**](https://huggingface.co/bigscience/bloom)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both *RoPE* and *ALiBi* position encodings can extrapolate to input lengths
    not seen during training whereas it has been shown that extrapolation works much
    better out-of-the-box for *ALiBi* as compared to *RoPE*. For ALiBi, one simply
    increases the values of the lower triangular position matrix to match the length
    of the input sequence. For *RoPE*, keeping the same<math><semantics><mrow><mi>θ</mi></mrow>
    <annotation encoding="application/x-tex">\theta</annotation></semantics></math>
    θ that was used during training leads to poor results when passing text inputs
    much longer than those seen during training, *c.f* [Press et al.](https://arxiv.org/abs/2108.12409).
    However, the community has found a couple of effective tricks that adapt<math><semantics><mrow><mi>θ</mi></mrow>
    <annotation encoding="application/x-tex">\theta</annotation></semantics></math>
    θ, thereby allowing *RoPE* position embeddings to work well for extrapolated text
    input sequences (see [here](https://github.com/huggingface/transformers/pull/24653)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Both RoPE and ALiBi are relative positional embeddings that are *not* learned
    during training, but instead are based on the following intuitions:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Positional cues about the text inputs should be given directly to the<math><semantics><mrow><mi>Q</mi><msup><mi>K</mi><mi>T</mi></msup></mrow>
    <annotation encoding="application/x-tex">QK^T</annotation></semantics></math>
    QKT matrix of the self-attention layer
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: The LLM should be incentivized to learn a constant *relative* distance positional
    encodings have to each other
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: The further text input tokens are from each other, the lower the probability
    of their query-value probability. Both RoPE and ALiBi lower the query-key probability
    of tokens far away from each other. RoPE by decreasing their vector product by
    increasing the angle between the query-key vectors. ALiBi by adding large negative
    numbers to the vector product
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
- en: In conclusion, LLMs that are intended to be deployed in tasks that require handling
    large text inputs are better trained with relative positional embeddings, such
    as RoPE and ALiBi. Also note that even if an LLM with RoPE and ALiBi has been
    trained only on a fixed length of say<math><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub><mo>=</mo><mn>2048</mn></mrow>
    <annotation encoding="application/x-tex">N_1 = 2048</annotation></semantics></math>
    N1​=2048 it can still be used in practice with text inputs much larger than<math><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub></mrow>
    <annotation encoding="application/x-tex">N_1</annotation></semantics></math> N1​,
    like<math><semantics><mrow><msub><mi>N</mi><mn>2</mn></msub><mo>=</mo><mn>8192</mn><mo>></mo><msub><mi>N</mi><mn>1</mn></msub></mrow>
    <annotation encoding="application/x-tex">N_2 = 8192 > N_1</annotation></semantics></math>
    N2​=8192>N1​ by extrapolating the positional embeddings.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 The key-value cache
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Auto-regressive text generation with LLMs works by iteratively putting in an
    input sequence, sampling the next token, appending the next token to the input
    sequence, and continuing to do so until the LLM produces a token that signifies
    that the generation has finished.
  prefs: []
  type: TYPE_NORMAL
- en: Please have a look at [Transformer’s Generate Text Tutorial](https://huggingface.co/docs/transformers/llm_tutorial#generate-text)
    to get a more visual explanation of how auto-regressive generation works.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s run a quick code snippet to show how auto-regressive works in practice.
    We will simply take the most likely next token via `torch.argmax`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: As we can see every time we increase the text input tokens by the just sampled
    token.
  prefs: []
  type: TYPE_NORMAL
- en: With very few exceptions, LLMs are trained using the [causal language modeling
    objective](https://huggingface.co/docs/transformers/tasks/language_modeling#causal-language-modeling)
    and therefore mask the upper triangle matrix of the attention score - this is
    why in the two diagrams above the attention scores are left blank (*a.k.a* have
    0 probability). For a quick recap on causal language modeling you can refer to
    the [*Illustrated Self Attention blog*](https://jalammar.github.io/illustrated-gpt2/#part-2-illustrated-self-attention).
  prefs: []
  type: TYPE_NORMAL
- en: As a consequence, tokens *never* depend on previous tokens, more specifically
    the<math><semantics><mrow><msub><mi mathvariant="bold">q</mi><mi>i</mi></msub></mrow>
    <annotation encoding="application/x-tex">\mathbf{q}_i</annotation></semantics></math>
    qi​ vector is never put in relation with any key, values vectors<math><semantics><mrow><msub><mi
    mathvariant="bold">k</mi><mi>j</mi></msub><mo separator="true">,</mo><msub><mi
    mathvariant="bold">v</mi><mi>j</mi></msub></mrow> <annotation encoding="application/x-tex">\mathbf{k}_j,
    \mathbf{v}_j</annotation></semantics></math> kj​,vj​ if<math><semantics><mrow><mi>j</mi><mo>></mo><mi>i</mi></mrow>
    <annotation encoding="application/x-tex">j > i</annotation></semantics></math>
    j>i . Instead<math><semantics><mrow><msub><mi mathvariant="bold">q</mi><mi>i</mi></msub></mrow>
    <annotation encoding="application/x-tex">\mathbf{q}_i</annotation></semantics></math>
    qi​ only attends to previous key-value vectors<math><semantics><mrow><msub><mi
    mathvariant="bold">k</mi><mrow><mi>m</mi><mo><</mo><mi>i</mi></mrow></msub><mo
    separator="true">,</mo><msub><mi mathvariant="bold">v</mi><mrow><mi>m</mi><mo><</mo><mi>i</mi></mrow></msub><mtext> , for </mtext><mi>m</mi><mo>∈</mo><mo
    stretchy="false">{</mo><mn>0</mn><mo separator="true">,</mo><mo>…</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo
    stretchy="false">}</mo></mrow> <annotation encoding="application/x-tex">\mathbf{k}_{m
    < i}, \mathbf{v}_{m < i} \text{ , for } m \in \{0, \ldots i - 1\}</annotation></semantics></math>
    km<i​,vm<i​ , for m∈{0,…i−1}. In order to reduce unnecessary computation, one
    can therefore cache each layer’s key-value vectors for all previous timesteps.
  prefs: []
  type: TYPE_NORMAL
- en: In the following, we will tell the LLM to make use of the key-value cache by
    retrieving and forwarding it for each forward pass. In Transformers, we can retrieve
    the key-value cache by passing the `use_cache` flag to the `forward` call and
    can then pass it with the current token.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: As one can see, when using the key-value cache the text input tokens are *not*
    increased in length, but remain a single input vector. The length of the key-value
    cache on the other hand is increased by one at every decoding step.
  prefs: []
  type: TYPE_NORMAL
- en: Making use of the key-value cache means that the<math><semantics><mrow><msup><mrow><mi
    mathvariant="bold">Q</mi><mi mathvariant="bold">K</mi></mrow><mi>T</mi></msup></mrow>
    <annotation encoding="application/x-tex">\mathbf{QK}^T</annotation></semantics></math>
    QKT is essentially reduced to<math><semantics><mrow><msub><mi mathvariant="bold">q</mi><mi>c</mi></msub><msup><mi
    mathvariant="bold">K</mi><mi>T</mi></msup></mrow> <annotation encoding="application/x-tex">\mathbf{q}_c\mathbf{K}^T</annotation></semantics></math>
    qc​KT with<math><semantics><mrow><msub><mi mathvariant="bold">q</mi><mi>c</mi></msub></mrow>
    <annotation encoding="application/x-tex">\mathbf{q}_c</annotation></semantics></math>
    qc​ being the query projection of the currently passed input token which is *always*
    just a single vector.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Using the key-value cache has two advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Significant increase in computational efficiency as less computations are performed
    compared to computing the full<math><semantics><mrow><msup><mrow><mi mathvariant="bold">Q</mi><mi
    mathvariant="bold">K</mi></mrow><mi>T</mi></msup></mrow> <annotation encoding="application/x-tex">\mathbf{QK}^T</annotation></semantics></math>
    QKT matrix. This leads to an increase in inference speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The maximum required memory is not increased quadratically with the number of
    generated tokens, but only increases linearly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One should *always* make use of the key-value cache as it leads to identical
    results and a significant speed-up for longer input sequences. Transformers has
    the key-value cache enabled by default when making use of the text pipeline or
    the [`generate` method](https://huggingface.co/docs/transformers/main_classes/text_generation).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that, despite our advice to use key-value caches, your LLM output may be
    slightly different when you use them. This is a property of the matrix multiplication
    kernels themselves — you can read more about it [here](https://github.com/huggingface/transformers/issues/25420#issuecomment-1775317535).
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.1 Multi-round conversation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The key-value cache is especially useful for applications such as chat where
    multiple passes of auto-regressive decoding are required. Let’s look at an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In this chat, the LLM runs auto-regressive decoding twice:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first time, the key-value cache is empty and the input prompt is `"User:
    How many people live in France?"` and the model auto-regressively generates the
    text `"Roughly 75 million people live in France"` while increasing the key-value
    cache at every decoding step.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The second time the input prompt is `"User: How many people live in France?
    \n Assistant: Roughly 75 million people live in France \n User: And how many in
    Germany?"`. Thanks to the cache, all key-value vectors for the first two sentences
    are already computed. Therefore the input prompt only consists of `"User: And
    how many in Germany?"`. While processing the shortened input prompt, it’s computed
    key-value vectors are concatenated to the key-value cache of the first decoding.
    The second Assistant’s answer `"Germany has ca. 81 million inhabitants"` is then
    auto-regressively generated with the key-value cache consisting of encoded key-value
    vectors of `"User: How many people live in France? \n Assistant: Roughly 75 million
    people live in France \n User: And how many are in Germany?"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Two things should be noted here:'
  prefs: []
  type: TYPE_NORMAL
- en: Keeping all the context is crucial for LLMs deployed in chat so that the LLM
    understands all the previous context of the conversation. E.g. for the example
    above the LLM needs to understand that the user refers to the population when
    asking `"And how many are in Germany"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The key-value cache is extremely useful for chat as it allows us to continuously
    grow the encoded chat history instead of having to re-encode the chat history
    again from scratch (as e.g. would be the case when using an encoder-decoder architecture).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `transformers`, a `generate` call will return `past_key_values` when `return_dict_in_generate=True`
    is passed, in addition to the default `use_cache=True`. Note that it is not yet
    available through the `pipeline` interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Great, no additional time is spent recomputing the same key and values for the
    attention layer! There is however one catch. While the required peak memory for
    the<math><semantics><mrow><msup><mrow><mi mathvariant="bold">Q</mi><mi mathvariant="bold">K</mi></mrow><mi>T</mi></msup></mrow>
    <annotation encoding="application/x-tex">\mathbf{QK}^T</annotation></semantics></math>
    QKT matrix is significantly reduced, holding the key-value cache in memory can
    become very memory expensive for long input sequences or multi-turn chat. Remember
    that the key-value cache needs to store the key-value vectors for all previous
    input vectors<math><semantics><mrow><msub><mi mathvariant="bold">x</mi><mi>i</mi></msub><mtext>, for </mtext><mi>i</mi><mo>∈</mo><mo
    stretchy="false">{</mo><mn>1</mn><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><mi>c</mi><mo>−</mo><mn>1</mn><mo
    stretchy="false">}</mo></mrow> <annotation encoding="application/x-tex">\mathbf{x}_i
    \text{, for } i \in \{1, \ldots, c - 1\}</annotation></semantics></math> xi​, for i∈{1,…,c−1}
    for all self-attention layers and for all attention heads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s compute the number of float values that need to be stored in the key-value
    cache for the LLM `bigcode/octocoder` that we used before. The number of float
    values amounts to two times the sequence length times the number of attention
    heads times the attention head dimension and times the number of layers. Computing
    this for our LLM at a hypothetical input sequence length of 16000 gives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Roughly 8 billion float values! Storing 8 billion float values in `float16`
    precision requires around 15 GB of RAM which is circa half as much as the model
    weights themselves! Researchers have proposed two methods that allow to significantly
    reduce the memory cost of storing the key-value cache, which are explored in the
    next subsections.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.2 Multi-Query-Attention (MQA)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Multi-Query-Attention](https://arxiv.org/abs/1911.02150) was proposed in Noam
    Shazeer’s *Fast Transformer Decoding: One Write-Head is All You Need* paper. As
    the title says, Noam found out that instead of using `n_head` key-value projections
    weights, one can use a single head-value projection weight pair that is shared
    across all attention heads without that the model’s performance significantly
    degrades.'
  prefs: []
  type: TYPE_NORMAL
- en: By using a single head-value projection weight pair, the key value vectors<math><semantics><mrow><msub><mi
    mathvariant="bold">k</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi
    mathvariant="bold">v</mi><mi>i</mi></msub></mrow> <annotation encoding="application/x-tex">\mathbf{k}_i,
    \mathbf{v}_i</annotation></semantics></math> ki​,vi​ have to be identical across
    all attention heads which in turn means that we only need to store 1 key-value
    projection pair in the cache instead of `n_head` ones.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As most LLMs use between 20 and 100 attention heads, MQA significantly reduces
    the memory consumption of the key-value cache. For the LLM used in this notebook
    we could therefore reduce the required memory consumption from 15 GB to less than
    400 MB at an input sequence length of 16000.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to memory savings, MQA also leads to improved computational efficiency
    as explained in the following. In auto-regressive decoding, large key-value vectors
    need to be reloaded, concatenated with the current key-value vector pair to be
    then fed into the<math><semantics><mrow><msub><mi mathvariant="bold">q</mi><mi>c</mi></msub><msup><mi
    mathvariant="bold">K</mi><mi>T</mi></msup></mrow> <annotation encoding="application/x-tex">\mathbf{q}_c\mathbf{K}^T</annotation></semantics></math>
    qc​KT computation at every step. For auto-regressive decoding, the required memory
    bandwidth for the constant reloading can become a serious time bottleneck. By
    reducing the size of the key-value vectors less memory needs to be accessed, thus
    reducing the memory bandwidth bottleneck. For more detail, please have a look
    at [Noam’s paper](https://arxiv.org/abs/1911.02150).
  prefs: []
  type: TYPE_NORMAL
- en: The important part to understand here is that reducing the number of key-value
    attention heads to 1 only makes sense if a key-value cache is used. The peak memory
    consumption of the model for a single forward pass without key-value cache stays
    unchanged as every attention head still has a unique query vector so that each
    attention head still has a different<math><semantics><mrow><msup><mrow><mi mathvariant="bold">Q</mi><mi
    mathvariant="bold">K</mi></mrow><mi>T</mi></msup></mrow> <annotation encoding="application/x-tex">\mathbf{QK}^T</annotation></semantics></math>
    QKT matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'MQA has seen wide adoption by the community and is now used by many of the
    most popular LLMs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Falcon**](https://huggingface.co/tiiuae/falcon-40b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**PaLM**](https://arxiv.org/abs/2204.02311)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**MPT**](https://huggingface.co/mosaicml/mpt-30b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**BLOOM**](https://huggingface.co/bigscience/bloom)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, the checkpoint used in this notebook - `bigcode/octocoder` - makes use
    of MQA.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2.3 Grouped-Query-Attention (GQA)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[Grouped-Query-Attention](https://arxiv.org/abs/2305.13245), as proposed by
    Ainslie et al. from Google, found that using MQA can often lead to quality degradation
    compared to using vanilla multi-key-value head projections. The paper argues that
    more model performance can be kept by less drastically reducing the number of
    query head projection weights. Instead of using just a single key-value projection
    weight, `n < n_head` key-value projection weights should be used. By choosing
    `n` to a significantly smaller value than `n_head`, such as 2,4 or 8 almost all
    of the memory and speed gains from MQA can be kept while sacrificing less model
    capacity and thus arguably less performance.'
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the authors of GQA found out that existing model checkpoints can be
    *uptrained* to have a GQA architecture with as little as 5% of the original pre-training
    compute. While 5% of the original pre-training compute can still be a massive
    amount, GQA *uptraining* allows existing checkpoints to be useful for longer input
    sequences.
  prefs: []
  type: TYPE_NORMAL
- en: GQA was only recently proposed which is why there is less adoption at the time
    of writing this notebook. The most notable application of GQA is [Llama-v2](https://huggingface.co/meta-llama/Llama-2-70b-hf).
  prefs: []
  type: TYPE_NORMAL
- en: As a conclusion, it is strongly recommended to make use of either GQA or MQA
    if the LLM is deployed with auto-regressive decoding and is required to handle
    large input sequences as is the case for example for chat.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The research community is constantly coming up with new, nifty ways to speed
    up inference time for ever-larger LLMs. As an example, one such promising research
    direction is [speculative decoding](https://arxiv.org/abs/2211.17192) where “easy
    tokens” are generated by smaller, faster language models and only “hard tokens”
    are generated by the LLM itself. Going into more detail is out of the scope of
    this notebook, but can be read upon in this [nice blog post](https://huggingface.co/blog/assisted-generation).
  prefs: []
  type: TYPE_NORMAL
- en: The reason massive LLMs such as GPT3/4, Llama-2-70b, Claude, PaLM can run so
    quickly in chat-interfaces such as [Hugging Face Chat](https://huggingface.co/chat/)
    or ChatGPT is to a big part thanks to the above-mentioned improvements in precision,
    algorithms, and architecture. Going forward, accelerators such as GPUs, TPUs,
    etc… will only get faster and allow for more memory, but one should nevertheless
    always make sure to use the best available algorithms and architectures to get
    the most bang for your buck 🤗
  prefs: []
  type: TYPE_NORMAL
