- en: Textual inversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/using-diffusers/textual_inversion_inference](https://huggingface.co/docs/diffusers/using-diffusers/textual_inversion_inference)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: The [StableDiffusionPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/stable_diffusion/text2img#diffusers.StableDiffusionPipeline)
    supports textual inversion, a technique that enables a model like Stable Diffusion
    to learn a new concept from just a few sample images. This gives you more control
    over the generated images and allows you to tailor the model towards specific
    concepts. You can get started quickly with a collection of community created concepts
    in the [Stable Diffusion Conceptualizer](https://huggingface.co/spaces/sd-concepts-library/stable-diffusion-conceptualizer).
  prefs: []
  type: TYPE_NORMAL
- en: This guide will show you how to run inference with textual inversion using a
    pre-learned concept from the Stable Diffusion Conceptualizer. If you’re interested
    in teaching a model new concepts with textual inversion, take a look at the [Textual
    Inversion](../training/text_inversion) training guide.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the necessary libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Stable Diffusion 1 and 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pick a Stable Diffusion checkpoint and a pre-learned concept from the [Stable
    Diffusion Conceptualizer](https://huggingface.co/spaces/sd-concepts-library/stable-diffusion-conceptualizer):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can load a pipeline, and pass the pre-learned concept to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a prompt with the pre-learned concept by using the special placeholder
    token `<cat-toy>`, and choose the number of samples and rows of images you’d like
    to generate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run the pipeline (feel free to adjust the parameters like `num_inference_steps`
    and `guidance_scale` to see how they affect image quality), save the generated
    images and visualize them with the helper function you created at the beginning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/71bc10f1a2656599ea557d150439d022.png)'
  prefs: []
  type: TYPE_IMG
- en: Stable Diffusion XL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Stable Diffusion XL (SDXL) can also use textual inversion vectors for inference.
    In contrast to Stable Diffusion 1 and 2, SDXL has two text encoders so you’ll
    need two textual inversion embeddings - one for each text encoder model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s download the SDXL textual inversion embeddings and have a closer look
    at it’s structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There are two tensors, `"clip_g"` and `"clip_l"`. `"clip_g"` corresponds to
    the bigger text encoder in SDXL and refers to `pipe.text_encoder_2` and `"clip_l"`
    refers to `pipe.text_encoder`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can load each tensor separately by passing them along with the correct
    text encoder and tokenizer to [load_textual_inversion()](/docs/diffusers/v0.26.3/en/api/loaders/textual_inversion#diffusers.loaders.TextualInversionLoaderMixin.load_textual_inversion):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
