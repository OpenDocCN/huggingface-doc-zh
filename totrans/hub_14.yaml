- en: Model Cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/hub/model-cards](https://huggingface.co/docs/hub/model-cards)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: '[New! Try our experimental Model Card Creator App](https://huggingface.co/spaces/huggingface/Model_Cards_Writing_Tool)'
  prefs: []
  type: TYPE_NORMAL
- en: What are Model Cards?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Model cards are files that accompany the models and provide handy information.
    Under the hood, model cards are simple Markdown files with additional metadata.
    Model cards are essential for discoverability, reproducibility, and sharing! You
    can find a model card as the `README.md` file in any model repo.
  prefs: []
  type: TYPE_NORMAL
- en: 'The model card should describe:'
  prefs: []
  type: TYPE_NORMAL
- en: the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: its intended uses & potential limitations, including biases and ethical considerations
    as detailed in [Mitchell, 2018](https://arxiv.org/abs/1810.03993)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the training params and experimental info (you can embed or link to an experiment
    tracking platform for reference)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: which datasets were used to train your model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the model’s evaluation results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The model card template is available [here](https://github.com/huggingface/huggingface_hub/blob/main/src/huggingface_hub/templates/modelcard_template.md).
  prefs: []
  type: TYPE_NORMAL
- en: How to fill out each section of the model card is described in [the Annotated
    Model Card](https://huggingface.co/docs/hub/model-card-annotated).
  prefs: []
  type: TYPE_NORMAL
- en: 'Model Cards on the Hub have two key parts, with overlapping information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Metadata](#model-card-metadata)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Text descriptions](#model-card-text)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model card metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A model repo will render its `README.md` as a model card. The model card is
    a [Markdown](https://en.wikipedia.org/wiki/Markdown) file, with a [YAML](https://en.wikipedia.org/wiki/YAML)
    section at the top that contains metadata about the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The metadata you add to the model card supports discovery and easier use of
    your model. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Allowing users to filter models at [https://huggingface.co/models](https://huggingface.co/models).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the model’s license.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding datasets to the metadata will add a message reading `Datasets used to
    train:` to your model card and link the relevant datasets, if they’re available
    on the Hub.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dataset, metric, and language identifiers are those listed on the [Datasets](https://huggingface.co/datasets),
    [Metrics](https://huggingface.co/metrics) and [Languages](https://huggingface.co/languages)
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: Adding metadata to your model card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few different ways to add metadata to your model card including:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the metadata UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directly editing the YAML section of the `README.md` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Via the [`huggingface_hub`](https://huggingface.co/docs/huggingface_hub) Python
    library, see the [docs](https://huggingface.co/docs/huggingface_hub/guides/model-cards#update-metadata)
    for more details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many libraries with [Hub integration](./models-libraries) will automatically
    add metadata to the model card when you upload a model.
  prefs: []
  type: TYPE_NORMAL
- en: Using the metadata UI
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can add metadata to your model card using the metadata UI. To access the
    metadata UI, go to the model page and click on the `Edit model card` button in
    the top right corner of the model card. This will open an editor showing the model
    card `README.md` file, as well as a UI for editing the metadata.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/143e784800a2dc82ef42a024dbe6ba04.png) ![](../Images/d67f8951223912e8360fe09bb39293ee.png)'
  prefs: []
  type: TYPE_IMG
- en: This UI will allow you to add key metadata to your model card and many of the
    fields will autocomplete based on the information you provide. Using the UI is
    the easiest way to add metadata to your model card, but it doesn’t support all
    of the metadata fields. If you want to add metadata that isn’t supported by the
    UI, you can edit the YAML section of the `README.md` file directly.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the YAML section of the README.md file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can also directly edit the YAML section of the `README.md` file. If the
    model card doesn’t already have a YAML section, you can add one by adding three
    `---` at the top of the file, then include all of the relevant metadata, and close
    the section with another group of `---` like the example below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can find the detailed model card metadata specification [here](https://github.com/huggingface/hub-docs/blob/main/modelcard.md?plain=1).
  prefs: []
  type: TYPE_NORMAL
- en: Specifying a library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can specify the supported libraries in the model card metadata section.
    Find more about our supported libraries [here](./models-libraries). The library
    will be specified in the following order of priority:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifying `library_name` in the model card (recommended if your model is not
    a `transformers` model). This information can be added via the metadata UI or
    directly in the model card YAML section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Having a tag with the name of a library that is supported
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If it’s not specified, the Hub will try to automatically detect the library
    type. Unless your model is from `transformers`, this approach is discouraged and
    repo creators should use the explicit `library_name` as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: By looking into the presence of files such as `*.nemo` or `*saved_model.pb*`,
    the Hub can determine if a model is from NeMo or Keras.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If nothing is detected and there is a `config.json` file, it’s assumed the library
    is `transformers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specifying a base model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your model is a fine-tune or adapter of a base model, you can specify the
    base model in the model card metadata section. This information can also be used
    to indicate if your model is a merge of multiple existing models. The `base_model`
    field can either be a single model ID, or a list of one or more base_models (specified
    by their Hub identifier).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This metadata will be used to display the base model on the model page. Users
    can also use this information to filter models by base model or find models that
    are fine-tuned from a specific base model.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8b10c0ea2c0982c620439278d55898ad.png) ![](../Images/440303dc5ae8f3d110cb842266a53b54.png)'
  prefs: []
  type: TYPE_IMG
- en: Specifying a dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can specify the datasets used to train your model in the model card metadata
    section. The datasets will be displayed on the model page and users will be able
    to filter models by dataset. You should use the Hub dataset identifier, which
    is the same as the dataset’s repo name as the identifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Specifying a task ( pipeline_tag )
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can specify the `pipeline_tag` in the model card metadata. The `pipeline_tag`
    indicates the type of task the model is intended for. This tag will be displayed
    on the model page and users can filter models on the Hub by task. This tag is
    also used to determine which [widget](./models-widgets.md#enabling-a-widget) to
    use for the model and which APIs to use under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: For `transformers` models, the pipeline tag is automatically inferred from the
    model’s `config.json` file but you can override it in the model card metadata
    if required. Editing this field in the metadata UI will ensure that the pipeline
    tag is valid. Some other libraries with Hub integration will also automatically
    add the pipeline tag to the model card metadata.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying a license
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can specify the license in the model card metadata section. The license
    will be displayed on the model page and users will be able to filter models by
    license. Using the metadata UI, you will see a dropdown of the most common licenses.
  prefs: []
  type: TYPE_NORMAL
- en: If required, you can also specify a custom license by adding `other` as the
    license value and specifying the name and a link to the license in the metadata.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If the license is not available via a URL you can link to a LICENSE stored in
    the model repo.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can specify your **model’s evaluation results** in a structured way in
    the model card metadata. Results are parsed by the Hub and displayed in a widget
    on the model page. Here is an example on how it looks like for the [bigcode/starcoder](https://huggingface.co/bigcode/starcoder)
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/59bec1601bf7f35526d7aae41ed1e42e.png) ![](../Images/bb9ffe046f33b34de1c1f42a9d122aaf.png)'
  prefs: []
  type: TYPE_IMG
- en: The metadata spec was based on Papers with code’s [model-index specification](https://github.com/paperswithcode/model-index).
    This allow us to directly index the results into Papers with code’s leaderboards
    when appropriate. You can also link the source from where the eval results has
    been computed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a partial example to describe [01-ai/Yi-34B](https://huggingface.co/01-ai/Yi-34B)’s
    score on the ARC benchmark. The result comes from the [Open LLM Leaderboard](https://huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard)
    which is defined as the `source`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For more details on how to format this data, check out the [Model Card specifications](https://github.com/huggingface/hub-docs/blob/main/modelcard.md?plain=1).
  prefs: []
  type: TYPE_NORMAL
- en: CO2 Emissions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The model card is also a great place to show information about the CO[2] impact
    of your model. Visit our [guide on tracking and reporting CO[2] emissions](./model-cards-co2)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Linking a Paper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the model card includes a link to a paper on arXiv, the Hugging Face Hub
    will extract the arXiv ID and include it in the model tags with the format `arxiv:<PAPER
    ID>`. Clicking on the tag will let you:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the Paper page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter for other models on the Hub that cite the same paper.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/fe58ab8439e8e36cba29d08cee2cab9e.png) ![](../Images/5e7ce5037ff961ad99d441036e555944.png)'
  prefs: []
  type: TYPE_IMG
- en: Read more about Paper pages [here](./paper-pages).
  prefs: []
  type: TYPE_NORMAL
- en: Model Card text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Details on how to fill out a human-readable model card without Hub-specific
    metadata (so that it may be printed out, cut+pasted, etc.) is available in the
    [Annotated Model Card](./model-card-annotated).
  prefs: []
  type: TYPE_NORMAL
- en: FAQ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How are model tags determined?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each model page lists all the model’s tags in the page header, below the model
    name. These are primarily computed from the model card metadata, although some
    are added automatically, as described in [Creating a Widget](./models-widgets#creating-a-widget).
  prefs: []
  type: TYPE_NORMAL
- en: Can I add custom tags to my model?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yes, you can add custom tags to your model by adding them to the `tags` field
    in the model card metadata. The metadata UI will suggest some popular tags, but
    you can add any tag you want. For example, you could indicate that your model
    is focused on finance by adding a `finance` tag.
  prefs: []
  type: TYPE_NORMAL
- en: How can I indicate that my model is not suitable for all audiences
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can add a `not-for-all-audience` tag to your model card metadata. When this
    tag is present, a message will be displayed on the model page indicating that
    the model is not for all audiences. Users can click through this message to view
    the model card.
  prefs: []
  type: TYPE_NORMAL
- en: Can I write LaTeX in my model card?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yes! The Hub uses the [KaTeX](https://katex.org/) math typesetting library to
    render math formulas server-side before parsing the Markdown.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have to use the following delimiters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$$ ... $$` for display mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\\(...\\)` for inline mode (no space between the slashes and the parenthesis).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then you’ll be able to write: <math display="block"><semantics><mrow><mtext>LaTeX</mtext></mrow>
    <annotation encoding="application/x-tex">\LaTeX</annotation></semantics></math>
    LATE​X <math display="block"><semantics><mrow><mrow><mi mathvariant="normal">M</mi><mi
    mathvariant="normal">S</mi><mi mathvariant="normal">E</mi></mrow><mo>=</mo><mrow><mo
    fence="true">(</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mo fence="true">)</mo></mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mo
    stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><msub><mi>x</mi><mi>i</mi></msub><msup><mo
    stretchy="false">)</mo><mn>2</mn></msup></mrow> <annotation encoding="application/x-tex">\mathrm{MSE}
    = \left(\frac{1}{n}\right)\sum_{i=1}^{n}(y_{i} - x_{i})^{2}</annotation></semantics></math>
    MSE=(n1​)i=1∑n​(yi​−xi​)2 <math display="block"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow>
    <annotation encoding="application/x-tex">E=mc^2</annotation></semantics></math>
    E=mc2'
  prefs: []
  type: TYPE_NORMAL
