- en: Godot RL Agents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/learn/deep-rl-course/unitbonus3/godotrl](https://huggingface.co/learn/deep-rl-course/unitbonus3/godotrl)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/deep-rl-course/main/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/entry/start.c0547f01.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/chunks/scheduler.37c15a92.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/chunks/singletons.b4cd11ef.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/chunks/index.18351ede.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/chunks/paths.3cd722f3.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/entry/app.41e0adab.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/chunks/index.7cb9c9b8.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/nodes/0.b906e680.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/nodes/101.d97f0b80.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/chunks/CodeBlock.a6d3f852.js">
    <link rel="modulepreload" href="/docs/deep-rl-course/main/en/_app/immutable/chunks/Heading.d3928e2a.js">
  prefs: []
  type: TYPE_NORMAL
- en: '[Godot RL Agents](https://github.com/edbeeching/godot_rl_agents) is an Open
    Source package that allows video game creators, AI researchers, and hobbyists
    the opportunity **to learn complex behaviors for their Non Player Characters or
    agents**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The library provides:'
  prefs: []
  type: TYPE_NORMAL
- en: An interface between games created in the [Godot Engine](https://godotengine.org/) and
    Machine Learning algorithms running in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wrappers for four well known rl frameworks: [StableBaselines3](https://stable-baselines3.readthedocs.io/en/master/),
    [CleanRL](https://docs.cleanrl.dev/), [Sample Factory](https://www.samplefactory.dev/)
    and [Ray RLLib](https://docs.ray.io/en/latest/rllib-algorithms.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for memory-based agents with LSTM or attention based interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for *2D and 3D games*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A suite of *AI sensors* to augment your agent’s capacity to observe the game
    world
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Godot and Godot RL Agents are **completely free and open source under a very
    permissive MIT license**. No strings attached, no royalties, nothing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find out more about Godot RL agents on their [GitHub page](https://github.com/edbeeching/godot_rl_agents)
    or their AAAI-2022 Workshop [paper](https://arxiv.org/abs/2112.03636). The library’s
    creator, [Ed Beeching](https://edbeeching.github.io/), is a Research Scientist
    here at Hugging Face.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation of the library is simple: `pip install godot-rl`'
  prefs: []
  type: TYPE_NORMAL
- en: Create a custom RL environment with Godot RL Agents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you will **learn how to create a custom environment in the
    Godot Game Engine** and then implement an AI controller that learns to play with
    Deep Reinforcement Learning.
  prefs: []
  type: TYPE_NORMAL
- en: The example game we create today is simple, **but shows off many of the features
    of the Godot Engine and the Godot RL Agents library**. You can then dive into
    the examples for more complex environments and behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: The environment we will be building today is called Ring Pong, the game of pong
    but the pitch is a ring and the paddle moves around the ring. The **objective
    is to keep the ball bouncing inside the ring**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Ring Pong](../Images/a4881f2cd962031d5828c7bf00344a3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing the Godot Game Engine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [Godot game engine](https://godotengine.org/) is an open source tool for
    the **creation of video games, tools and user interfaces**.
  prefs: []
  type: TYPE_NORMAL
- en: Godot Engine is a feature-packed, cross-platform game engine designed to create
    2D and 3D games from a unified interface. It provides a comprehensive set of common
    tools, so users **can focus on making games without having to reinvent the wheel**.
    Games can be exported in one click to a number of platforms, including the major
    desktop platforms (Linux, macOS, Windows) as well as mobile (Android, iOS) and
    web-based (HTML5) platforms.
  prefs: []
  type: TYPE_NORMAL
- en: While we will guide you through the steps to implement your agent, you may wish
    to learn more about the Godot Game Engine. Their [documentation](https://docs.godotengine.org/en/latest/index.html)
    is thorough, and there are many tutorials on YouTube we would also recommend [GDQuest](https://www.gdquest.com/),
    [KidsCanCode](https://kidscancode.org/godot_recipes/4.x/) and [Bramwell](https://www.youtube.com/channel/UCczi7Aq_dTKrQPF5ZV5J3gg)
    as sources of information.
  prefs: []
  type: TYPE_NORMAL
- en: In order to create games in Godot, **you must first download the editor**. Godot
    RL Agents supports the latest version of Godot, Godot 4.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Which can be downloaded at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Windows](https://downloads.tuxfamily.org/godotengine/4.0.1/Godot_v4.0.1-stable_win64.exe.zip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mac](https://downloads.tuxfamily.org/godotengine/4.0.1/Godot_v4.0.1-stable_macos.universal.zip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Linux](https://downloads.tuxfamily.org/godotengine/4.0.1/Godot_v4.0.1-stable_linux.x86_64.zip)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading the starter project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We provide two versions of the codebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[A starter project, to download and follow along for this tutorial](https://drive.google.com/file/d/1C7xd3TibJHlxFEJPBgBLpksgxrFZ3D8e/view?usp=share_link)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A final version of the project, for comparison and debugging.](https://drive.google.com/file/d/1k-b2Bu7uIA6poApbouX4c3sq98xqogpZ/view?usp=share_link)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To load the project, in the Godot Project Manager click **Import**, navigate
    to where the files are located and load the **project.godot** file.
  prefs: []
  type: TYPE_NORMAL
- en: If you press F5 or play in the editor, you should be able to play the game in
    human mode. There are several instances of the game running, this is because we
    want to speed up training our AI agent with many parallel environments.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Godot RL Agents plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Godot RL Agents plugin can be installed from the Github repo or with the
    Godot Asset Lib in the editor.
  prefs: []
  type: TYPE_NORMAL
- en: First click on the AssetLib and search for “rl”
  prefs: []
  type: TYPE_NORMAL
- en: '![Godot](../Images/d91cd6fd93e5d0a18afe0b076e727b0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Then click on Godot RL Agents, click Download and unselect the LICENSE and README
    .md files. Then click install.
  prefs: []
  type: TYPE_NORMAL
- en: '![Godot](../Images/26d4383db35914c111438c9d622a0477.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Godot RL Agents plugin is now downloaded to your machine. Now click on
    Project → Project settings and enable the addon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Godot](../Images/e03584370aca5150857b56f123707645.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding the AI controller
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We now want to add an AI controller to our game. Open the player.tscn scene,
    on the left you should see a hierarchy of nodes that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Godot](../Images/b80e88fb3e9787bebe7132a2d76b405b.png)'
  prefs: []
  type: TYPE_IMG
- en: Right click the **Player** node and click **Add Child Node.** There are many
    nodes listed here, search for AIController3D and create it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Godot](../Images/1055ec5b346e15d208fbe0f03ab4751f.png)'
  prefs: []
  type: TYPE_IMG
- en: The AI Controller Node should have been added to the scene tree, next to it
    is a scroll. Click on it to open the script that is attached to the AIController.
    The Godot game engine uses a scripting language called GDScript, which is syntactically
    similar to python. The script contains methods that need to be implemented in
    order to get our AI controller working.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In order to implement these methods, we will need to create a class that inherits
    from AIController3D. This is easy to do in Godot, and is called “extending” a
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right click the AIController3D Node and click “Extend Script” and call the
    new script `controller.gd`. You should now have an almost empty script file that
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now implement the 4 missing methods, delete this code, and replace
    it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We have now defined the agent’s observation, which is the position and velocity
    of the ball in its local coordinate space. We have also defined the action space
    of the agent, which is a single continuous value ranging from -1 to +1.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to update the Player’s script to use the actions from the
    AIController, edit the Player’s script by clicking on the scroll next to the player
    node, update the code in `Player.gd` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We now need to synchronize between the game running in Godot and the neural
    network being trained in Python. Godot RL agents provides a node that does just
    that. Open the train.tscn scene, right click on the root node, and click “Add
    child node”. Then, search for “sync” and add a Godot RL Agents Sync node. This
    node handles the communication between Python and Godot over TCP.
  prefs: []
  type: TYPE_NORMAL
- en: You can run training live in the editor, by first launching the python training
    with `gdrl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this simple example, a reasonable policy is learned in several minutes.
    You may wish to speed up training, click on the Sync node in the train scene,
    and you will see there is a “Speed Up” property exposed in the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Godot](../Images/a61acc5ada930f05e34ac3d7492e9adf.png)'
  prefs: []
  type: TYPE_IMG
- en: Try setting this property up to 8 to speed up training. This can be a great
    benefit on more complex environments, like the multi-player FPS we will learn
    about in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have only scratched the surface of what can be achieved with Godot RL Agents,
    the library includes custom sensors and cameras to enrich the information available
    to the agent. Take a look at the [examples](https://github.com/edbeeching/godot_rl_agents_examples)
    to find out more!
  prefs: []
  type: TYPE_NORMAL
- en: For the ability to export the trained model to .onnx so that you can run inference
    directly from Godot without the Python server, and other useful training options,
    take a look at the [advanced SB3 tutorial](https://github.com/edbeeching/godot_rl_agents/blob/main/docs/ADV_STABLE_BASELINES_3.md).
  prefs: []
  type: TYPE_NORMAL
- en: Author
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section was written by [Edward Beeching](https://twitter.com/edwardbeeching)
  prefs: []
  type: TYPE_NORMAL
