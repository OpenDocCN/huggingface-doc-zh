["```py\n>>> from transformers import Swinv2Config, Swinv2Model\n\n>>> # Initializing a Swinv2 microsoft/swinv2-tiny-patch4-window8-256 style configuration\n>>> configuration = Swinv2Config()\n\n>>> # Initializing a model (with random weights) from the microsoft/swinv2-tiny-patch4-window8-256 style configuration\n>>> model = Swinv2Model(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, Swinv2Model\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"microsoft/swinv2-tiny-patch4-window8-256\")\n>>> model = Swinv2Model.from_pretrained(\"microsoft/swinv2-tiny-patch4-window8-256\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 64, 768]\n```", "```py\n>>> from transformers import AutoImageProcessor, Swinv2ForMaskedImageModeling\n>>> import torch\n>>> from PIL import Image\n>>> import requests\n\n>>> url = \"http://images.cocodataset.org/val2017/000000039769.jpg\"\n>>> image = Image.open(requests.get(url, stream=True).raw)\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"microsoft/swinv2-tiny-patch4-window8-256\")\n>>> model = Swinv2ForMaskedImageModeling.from_pretrained(\"microsoft/swinv2-tiny-patch4-window8-256\")\n\n>>> num_patches = (model.config.image_size // model.config.patch_size) ** 2\n>>> pixel_values = image_processor(images=image, return_tensors=\"pt\").pixel_values\n>>> # create random boolean mask of shape (batch_size, num_patches)\n>>> bool_masked_pos = torch.randint(low=0, high=2, size=(1, num_patches)).bool()\n\n>>> outputs = model(pixel_values, bool_masked_pos=bool_masked_pos)\n>>> loss, reconstructed_pixel_values = outputs.loss, outputs.reconstruction\n>>> list(reconstructed_pixel_values.shape)\n[1, 3, 256, 256]\n```", "```py\n>>> from transformers import AutoImageProcessor, Swinv2ForImageClassification\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"microsoft/swinv2-tiny-patch4-window8-256\")\n>>> model = Swinv2ForImageClassification.from_pretrained(\"microsoft/swinv2-tiny-patch4-window8-256\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = logits.argmax(-1).item()\n>>> print(model.config.id2label[predicted_label])\nEgyptian cat\n```"]