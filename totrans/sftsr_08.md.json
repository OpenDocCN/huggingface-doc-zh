["```py\n( filename: Union device = 'cpu' ) \u2192 export const metadata = 'undefined';Dict[str, torch.Tensor]\n```", "```py\nfrom safetensors.torch import load_file\n\nfile_path = \"./my_folder/bert.safetensors\"\nloaded = load_file(file_path)\n```", "```py\n( data: bytes ) \u2192 export const metadata = 'undefined';Dict[str, torch.Tensor]\n```", "```py\nfrom safetensors.torch import load\n\nfile_path = \"./my_folder/bert.safetensors\"\nwith open(file_path, \"rb\") as f:\n    data = f.read()\n\nloaded = load(data)\n```", "```py\n( tensors: Dict filename: Union metadata: Optional = None ) \u2192 export const metadata = 'undefined';None\n```", "```py\nfrom safetensors.torch import save_file\nimport torch\n\ntensors = {\"embedding\": torch.zeros((512, 1024)), \"attention\": torch.zeros((256, 256))}\nsave_file(tensors, \"model.safetensors\")\n```", "```py\n( tensors: Dict metadata: Optional = None ) \u2192 export const metadata = 'undefined';bytes\n```", "```py\nfrom safetensors.torch import save\nimport torch\n\ntensors = {\"embedding\": torch.zeros((512, 1024)), \"attention\": torch.zeros((256, 256))}\nbyte_data = save(tensors)\n```", "```py\n( model: Module filename: Union strict = True ) \u2192 export const metadata = 'undefined';`(missing, unexpected)\n```", "```py\n( model: Module filename: str metadata: Optional = None force_contiguous: bool = True )\n```"]