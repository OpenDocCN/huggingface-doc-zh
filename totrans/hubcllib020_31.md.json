["```py\n( )\n```", "```py\n( save_directory: Path )\n```", "```py\n( model_id: str revision: Optional cache_dir: Union force_download: bool proxies: Optional resume_download: bool local_files_only: bool token: Union **model_kwargs )\n```", "```py\n( pretrained_model_name_or_path: Union force_download: bool = False resume_download: bool = False proxies: Optional = None token: Union = None cache_dir: Union = None local_files_only: bool = False revision: Optional = None **model_kwargs )\n```", "```py\n( repo_id: str config: Optional = None commit_message: str = 'Push model using huggingface_hub.' private: bool = False api_endpoint: Optional = None token: Optional = None branch: Optional = None create_pr: Optional = None allow_patterns: Union = None ignore_patterns: Union = None delete_patterns: Union = None )\n```", "```py\n( save_directory: Union config: Optional = None repo_id: Optional = None push_to_hub: bool = False **kwargs )\n```", "```py\n( )\n```", "```py\n>>> import torch\n>>> import torch.nn as nn\n>>> from huggingface_hub import PyTorchModelHubMixin\n\n>>> class MyModel(nn.Module, PyTorchModelHubMixin):\n...     def __init__(self):\n...         super().__init__()\n...         self.param = nn.Parameter(torch.rand(3, 4))\n...         self.linear = nn.Linear(4, 5)\n\n...     def forward(self, x):\n...         return self.linear(x + self.param)\n>>> model = MyModel()\n\n# Save model weights to local directory\n>>> model.save_pretrained(\"my-awesome-model\")\n\n# Push model weights to the Hub\n>>> model.push_to_hub(\"my-awesome-model\")\n\n# Download and initialize weights from the Hub\n>>> model = MyModel.from_pretrained(\"username/my-awesome-model\")\n```", "```py\n( )\n```", "```py\n>>> import tensorflow as tf\n>>> from huggingface_hub import KerasModelHubMixin\n\n>>> class MyModel(tf.keras.Model, KerasModelHubMixin):\n...     def __init__(self, **kwargs):\n...         super().__init__()\n...         self.config = kwargs.pop(\"config\", None)\n...         self.dummy_inputs = ...\n...         self.layer = ...\n\n...     def call(self, *args):\n...         return ...\n\n>>> # Initialize and compile the model as you normally would\n>>> model = MyModel()\n>>> model.compile(...)\n>>> # Build the graph by training it or passing dummy inputs\n>>> _ = model(model.dummy_inputs)\n>>> # Save model weights to local directory\n>>> model.save_pretrained(\"my-awesome-model\")\n>>> # Push model weights to the Hub\n>>> model.push_to_hub(\"my-awesome-model\")\n>>> # Download and initialize weights from the Hub\n>>> model = MyModel.from_pretrained(\"username/super-cool-model\")\n```", "```py\n( *args **kwargs )\n```", "```py\n( model repo_id: str config: Optional = None commit_message: str = 'Push Keras model using huggingface_hub.' private: bool = False api_endpoint: Optional = None token: Optional = None branch: Optional = None create_pr: Optional = None allow_patterns: Union = None ignore_patterns: Union = None delete_patterns: Union = None log_dir: Optional = None include_optimizer: bool = False tags: Union = None plot_model: bool = True **model_save_kwargs )\n```", "```py\n( model save_directory: Union config: Optional = None include_optimizer: bool = False plot_model: bool = True tags: Union = None **model_save_kwargs )\n```", "```py\n( repo_id: str revision: Optional = None )\n```", "```py\n( learner repo_id: str commit_message: str = 'Push FastAI model using huggingface_hub.' private: bool = False token: Optional = None config: Optional = None branch: Optional = None create_pr: Optional = None allow_patterns: Union = None ignore_patterns: Union = None delete_patterns: Union = None api_endpoint: Optional = None )\n```"]