- en: Share a model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/transformers/v4.37.2/en/model_sharing](https://huggingface.co/docs/transformers/v4.37.2/en/model_sharing)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/311.623dac9a.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Tip.c2ecdbf4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Youtube.e1129c6f.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/CodeBlock.54a9f38d.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Markdown.fef84341.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/stores.c16bc1a5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
  prefs: []
  type: TYPE_NORMAL
- en: The last two tutorials showed how you can fine-tune a model with PyTorch, Keras,
    and ðŸ¤— Accelerate for distributed setups. The next step is to share your model
    with the community! At Hugging Face, we believe in openly sharing knowledge and
    resources to democratize artificial intelligence for everyone. We encourage you
    to consider sharing your model with the community to help others save time and
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tutorial, you will learn two methods for sharing a trained or fine-tuned
    model on the [Model Hub](https://huggingface.co/models):'
  prefs: []
  type: TYPE_NORMAL
- en: Programmatically push your files to the Hub.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag-and-drop your files to the Hub with the web interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/embed/XvSGPZFEjDY](https://www.youtube.com/embed/XvSGPZFEjDY)'
  prefs: []
  type: TYPE_NORMAL
- en: To share a model with the community, you need an account on [huggingface.co](https://huggingface.co/join).
    You can also join an existing organization or create a new one.
  prefs: []
  type: TYPE_NORMAL
- en: Repository features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each repository on the Model Hub behaves like a typical GitHub repository. Our
    repositories offer versioning, commit history, and the ability to visualize differences.
  prefs: []
  type: TYPE_NORMAL
- en: The Model Hubâ€™s built-in versioning is based on git and [git-lfs](https://git-lfs.github.com/).
    In other words, you can treat one model as one repository, enabling greater access
    control and scalability. Version control allows *revisions*, a method for pinning
    a specific version of a model with a commit hash, tag or branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, you can load a specific model version with the `revision` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Files are also easily edited in a repository, and you can view the commit history
    as well as the difference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![vis_diff](../Images/fe2de1419250ff9a84376a51a78ba39e.png)'
  prefs: []
  type: TYPE_IMG
- en: Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before sharing a model to the Hub, you will need your Hugging Face credentials.
    If you have access to a terminal, run the following command in the virtual environment
    where ðŸ¤— Transformers is installed. This will store your access token in your Hugging
    Face cache folder (`~/.cache/` by default):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you are using a notebook like Jupyter or Colaboratory, make sure you have
    the [`huggingface_hub`](https://huggingface.co/docs/hub/adding-a-library) library
    installed. This library allows you to programmatically interact with the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then use `notebook_login` to sign-in to the Hub, and follow the link [here](https://huggingface.co/settings/token)
    to generate a token to login with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Convert a model for all frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To ensure your model can be used by someone working with a different framework,
    we recommend you convert and upload your model with both PyTorch and TensorFlow
    checkpoints. While users are still able to load your model from a different framework
    if you skip this step, it will be slower because ðŸ¤— Transformers will need to convert
    the checkpoint on-the-fly.
  prefs: []
  type: TYPE_NORMAL
- en: Converting a checkpoint for another framework is easy. Make sure you have PyTorch
    and TensorFlow installed (see [here](installation) for installation instructions),
    and then find the specific model for your task in the other framework.
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify `from_tf=True` to convert a checkpoint from TensorFlow to PyTorch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify `from_pt=True` to convert a checkpoint from PyTorch to TensorFlow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can save your new TensorFlow model with its new checkpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: JAXHide JAX content
  prefs: []
  type: TYPE_NORMAL
- en: 'If a model is available in Flax, you can also convert a checkpoint from PyTorch
    to Flax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Push a model during training
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/Z1-XMy-GNLQ](https://www.youtube-nocookie.com/embed/Z1-XMy-GNLQ)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sharing a model to the Hub is as simple as adding an extra parameter or callback.
    Remember from the [fine-tuning tutorial](training), the [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)
    class is where you specify hyperparameters and additional training options. One
    of these training options includes the ability to push a model directly to the
    Hub. Set `push_to_hub=True` in your [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass your training arguments as usual to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After you fine-tune your model, call [push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)
    on [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    to push the trained model to the Hub. ðŸ¤— Transformers will even automatically add
    training hyperparameters, training results and framework versions to your model
    card!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: 'Share a model to the Hub with [PushToHubCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.PushToHubCallback).
    In the [PushToHubCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.PushToHubCallback)
    function, add:'
  prefs: []
  type: TYPE_NORMAL
- en: An output directory for your model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tokenizer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `hub_model_id`, which is your Hub username and model name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the callback to [`fit`](https://keras.io/api/models/model_training_apis/),
    and ðŸ¤— Transformers will push the trained model to the Hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Use the push_to_hub function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also call `push_to_hub` directly on your model to upload it to the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify your model name in `push_to_hub`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a repository under your username with the model name `my-awesome-model`.
    Users can now load your model with the `from_pretrained` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you belong to an organization and want to push your model under the organization
    name instead, just add it to the `repo_id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `push_to_hub` function can also be used to add other files to a model repository.
    For example, add a tokenizer to a model repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Or perhaps youâ€™d like to add the TensorFlow version of your fine-tuned PyTorch
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now when you navigate to your Hugging Face profile, you should see your newly
    created model repository. Clicking on the **Files** tab will display all the files
    youâ€™ve uploaded to the repository.
  prefs: []
  type: TYPE_NORMAL
- en: For more details on how to create and upload files to a repository, refer to
    the Hub documentation [here](https://huggingface.co/docs/hub/how-to-upstream).
  prefs: []
  type: TYPE_NORMAL
- en: Upload with the web interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Users who prefer a no-code approach are able to upload a model through the
    Hubâ€™s web interface. Visit [huggingface.co/new](https://huggingface.co/new) to
    create a new repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![new_model_repo](../Images/f1cd7603a42af7630a0639dc990d2015.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From here, add some information about your model:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **owner** of the repository. This can be yourself or any of the organizations
    you belong to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pick a name for your model, which will also be the repository name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose whether your model is public or private.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify the license usage for your model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now click on the **Files** tab and click on the **Add file** button to upload
    a new file to your repository. Then drag-and-drop a file to upload and add a commit
    message.
  prefs: []
  type: TYPE_NORMAL
- en: '![upload_file](../Images/aad87a6b56bf13c34f4376d15142f7b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a model card
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make sure users understand your modelâ€™s capabilities, limitations, potential
    biases and ethical considerations, please add a model card to your repository.
    The model card is defined in the `README.md` file. You can add a model card by:'
  prefs: []
  type: TYPE_NORMAL
- en: Manually creating and uploading a `README.md` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on the **Edit model card** button in your model repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a look at the DistilBert [model card](https://huggingface.co/distilbert-base-uncased)
    for a good example of the type of information a model card should include. For
    more details about other options you can control in the `README.md` file such
    as a modelâ€™s carbon footprint or widget examples, refer to the documentation [here](https://huggingface.co/docs/hub/models-cards).
  prefs: []
  type: TYPE_NORMAL
