["```py\n# Note: This example skips over some setup steps for brevity.\nfrom flytekit import current_context, task\n\n@task\ndef train_hf_transformer():\n    cp = current_context().checkpoint\n    trainer = Trainer(..., callbacks=[FlyteCallback()])\n    output = trainer.train(resume_from_checkpoint=cp.restore())\n```", "```py\nclass PrinterCallback(TrainerCallback):\n    def on_log(self, args, state, control, logs=None, **kwargs):\n        _ = logs.pop(\"total_flos\", None)\n        if state.is_local_process_zero:\n            print(logs)\n```", "```py\nclass MyCallback(TrainerCallback):\n    \"A callback that prints a message at the beginning of training\"\n\n    def on_train_begin(self, args, state, control, **kwargs):\n        print(\"Starting training\")\n\ntrainer = Trainer(\n    model,\n    args,\n    train_dataset=train_dataset,\n    eval_dataset=eval_dataset,\n    callbacks=[MyCallback],  # We can either pass the callback class this way or an instance of it (MyCallback())\n)\n```", "```py\ntrainer = Trainer(...)\ntrainer.add_callback(MyCallback)\n# Alternatively, we can pass an instance of the callback class\ntrainer.add_callback(MyCallback())\n```"]