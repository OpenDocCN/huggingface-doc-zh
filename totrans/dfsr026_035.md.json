["```py\n# uncomment to install in Colab\n#!pip install compel --upgrade\n```", "```py\nfrom diffusers import StableDiffusionPipeline, UniPCMultistepScheduler\nimport torch\n\npipe = StableDiffusionPipeline.from_pretrained(\"CompVis/stable-diffusion-v1-4\", use_safetensors=True)\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\npipe.to(\"cuda\")\n\nprompt = \"a red cat playing with a ball\"\n\ngenerator = torch.Generator(device=\"cpu\").manual_seed(33)\n\nimage = pipe(prompt, generator=generator, num_inference_steps=20).images[0]\nimage\n```", "```py\nfrom compel import Compel\n\ncompel_proc = Compel(tokenizer=pipe.tokenizer, text_encoder=pipe.text_encoder)\n```", "```py\nprompt = \"a red cat playing with a ball++\"\n```", "```py\nprompt_embeds = compel_proc(prompt)\ngenerator = torch.manual_seed(33)\n\nimage = pipe(prompt_embeds=prompt_embeds, generator=generator, num_inference_steps=20).images[0]\nimage\n```", "```py\nprompt = \"a red------- cat playing with a ball\"\nprompt_embeds = compel_proc(prompt)\n\ngenerator = torch.manual_seed(33)\n\nimage = pipe(prompt_embeds=prompt_embeds, generator=generator, num_inference_steps=20).images[0]\nimage\n```", "```py\nprompt = \"a red cat++ playing with a ball----\"\nprompt_embeds = compel_proc(prompt)\n\ngenerator = torch.manual_seed(33)\n\nimage = pipe(prompt_embeds=prompt_embeds, generator=generator, num_inference_steps=20).images[0]\nimage\n```", "```py\nprompt_embeds = compel_proc('(\"a red cat playing with a ball\", \"jungle\").blend(0.7, 0.8)')\ngenerator = torch.Generator(device=\"cuda\").manual_seed(33)\n\nimage = pipe(prompt_embeds=prompt_embeds, generator=generator, num_inference_steps=20).images[0]\nimage\n```", "```py\nprompt_embeds = compel_proc('[\"a red cat\", \"playing with a\", \"ball\"].and()')\ngenerator = torch.Generator(device=\"cuda\").manual_seed(55)\n\nimage = pipe(prompt_embeds=prompt_embeds, generator=generator, num_inference_steps=20).images[0]\nimage\n```", "```py\nimport torch\nfrom diffusers import StableDiffusionPipeline\nfrom compel import Compel, DiffusersTextualInversionManager\n\npipe = StableDiffusionPipeline.from_pretrained(\n  \"runwayml/stable-diffusion-v1-5\", torch_dtype=torch.float16,\n  use_safetensors=True, variant=\"fp16\").to(\"cuda\")\npipe.load_textual_inversion(\"sd-concepts-library/midjourney-style\")\n```", "```py\ntextual_inversion_manager = DiffusersTextualInversionManager(pipe)\ncompel_proc = Compel(\n    tokenizer=pipe.tokenizer,\n    text_encoder=pipe.text_encoder,\n    textual_inversion_manager=textual_inversion_manager)\n```", "```py\nprompt_embeds = compel_proc('(\"A red cat++ playing with a ball <midjourney-style>\")')\n\nimage = pipe(prompt_embeds=prompt_embeds).images[0]\nimage\n```", "```py\nimport torch\nfrom diffusers import DiffusionPipeline, UniPCMultistepScheduler\nfrom compel import Compel\n\npipe = DiffusionPipeline.from_pretrained(\"sd-dreambooth-library/dndcoverart-v1\", torch_dtype=torch.float16).to(\"cuda\")\npipe.scheduler = UniPCMultistepScheduler.from_config(pipe.scheduler.config)\n```", "```py\ncompel_proc = Compel(tokenizer=pipe.tokenizer, text_encoder=pipe.text_encoder)\nprompt_embeds = compel_proc('(\"magazine cover of a dndcoverart dragon, high quality, intricate details, larry elmore art style\").and()')\nimage = pipe(prompt_embeds=prompt_embeds).images[0]\nimage\n```", "```py\nfrom compel import Compel, ReturnedEmbeddingsType\nfrom diffusers import DiffusionPipeline\nfrom diffusers.utils import make_image_grid\nimport torch\n\npipeline = DiffusionPipeline.from_pretrained(\n  \"stabilityai/stable-diffusion-xl-base-1.0\",\n  variant=\"fp16\",\n  use_safetensors=True,\n  torch_dtype=torch.float16\n).to(\"cuda\")\n\ncompel = Compel(\n  tokenizer=[pipeline.tokenizer, pipeline.tokenizer_2] ,\n  text_encoder=[pipeline.text_encoder, pipeline.text_encoder_2],\n  returned_embeddings_type=ReturnedEmbeddingsType.PENULTIMATE_HIDDEN_STATES_NON_NORMALIZED,\n  requires_pooled=[False, True]\n)\n```", "```py\n# apply weights\nprompt = [\"a red cat playing with a (ball)1.5\", \"a red cat playing with a (ball)0.6\"]\nconditioning, pooled = compel(prompt)\n\n# generate image\ngenerator = [torch.Generator().manual_seed(33) for _ in range(len(prompt))]\nimages = pipeline(prompt_embeds=conditioning, pooled_prompt_embeds=pooled, generator=generator, num_inference_steps=30).images\nmake_image_grid(images, rows=1, cols=2)\n```"]