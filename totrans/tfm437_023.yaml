- en: Translation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/translation](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/translation)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/1JvfrvZgi6c](https://www.youtube-nocookie.com/embed/1JvfrvZgi6c)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Translation converts a sequence of text from one language to another. It is
    one of several tasks you can formulate as a sequence-to-sequence problem, a powerful
    framework for returning some output from an input, like translation or summarization.
    Translation systems are commonly used for translation between different language
    texts, but it can also be used for speech or some combination in between like
    text-to-speech or speech-to-text.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'This guide will show you how to:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Finetune [T5](https://huggingface.co/t5-small) on the English-French subset
    of the [OPUS Books](https://huggingface.co/datasets/opus_books) dataset to translate
    English text to French.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your finetuned model for inference.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The task illustrated in this tutorial is supported by the following model architectures:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[BART](../model_doc/bart), [BigBird-Pegasus](../model_doc/bigbird_pegasus),
    [Blenderbot](../model_doc/blenderbot), [BlenderbotSmall](../model_doc/blenderbot-small),
    [Encoder decoder](../model_doc/encoder-decoder), [FairSeq Machine-Translation](../model_doc/fsmt),
    [GPTSAN-japanese](../model_doc/gptsan-japanese), [LED](../model_doc/led), [LongT5](../model_doc/longt5),
    [M2M100](../model_doc/m2m_100), [Marian](../model_doc/marian), [mBART](../model_doc/mbart),
    [MT5](../model_doc/mt5), [MVP](../model_doc/mvp), [NLLB](../model_doc/nllb), [NLLB-MOE](../model_doc/nllb-moe),
    [Pegasus](../model_doc/pegasus), [PEGASUS-X](../model_doc/pegasus_x), [PLBart](../model_doc/plbart),
    [ProphetNet](../model_doc/prophetnet), [SeamlessM4T](../model_doc/seamless_m4t),
    [SeamlessM4Tv2](../model_doc/seamless_m4t_v2), [SwitchTransformers](../model_doc/switch_transformers),
    [T5](../model_doc/t5), [UMT5](../model_doc/umt5), [XLM-ProphetNet](../model_doc/xlm-prophetnet)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We encourage you to login to your Hugging Face account so you can upload and
    share your model with the community. When prompted, enter your token to login:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Load OPUS Books dataset
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by loading the English-French subset of the [OPUS Books](https://huggingface.co/datasets/opus_books)
    dataset from the 🤗 Datasets library:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Split the dataset into a train and test set with the [train_test_split](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.train_test_split)
    method:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then take a look at an example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`translation`: an English and French translation of the text.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Preprocess
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/XAR8jnZZuUs](https://www.youtube-nocookie.com/embed/XAR8jnZZuUs)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to load a T5 tokenizer to process the English-French language
    pairs:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preprocessing function you want to create needs to:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Prefix the input with a prompt so T5 knows this is a translation task. Some
    models capable of multiple NLP tasks require prompting for specific tasks.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tokenize the input (English) and target (French) separately because you can’t
    tokenize French text with a tokenizer pretrained on an English vocabulary.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Truncate sequences to be no longer than the maximum length set by the `max_length`
    parameter.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To apply the preprocessing function over the entire dataset, use 🤗 Datasets
    [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)
    method. You can speed up the `map` function by setting `batched=True` to process
    multiple elements of the dataset at once:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now create a batch of examples using [DataCollatorForSeq2Seq](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DataCollatorForSeq2Seq).
    It’s more efficient to *dynamically pad* the sentences to the longest length in
    a batch during collation, instead of padding the whole dataset to the maximum
    length.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: TensorFlowHide TensorFlow content
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Evaluate
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Including a metric during training is often helpful for evaluating your model’s
    performance. You can quickly load a evaluation method with the 🤗 [Evaluate](https://huggingface.co/docs/evaluate/index)
    library. For this task, load the [SacreBLEU](https://huggingface.co/spaces/evaluate-metric/sacrebleu)
    metric (see the 🤗 Evaluate [quick tour](https://huggingface.co/docs/evaluate/a_quick_tour)
    to learn more about how to load and compute a metric):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then create a function that passes your predictions and labels to `compute`
    to calculate the SacreBLEU score:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Your `compute_metrics` function is ready to go now, and you’ll return to it
    when you setup your training.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Train
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: If you aren’t familiar with finetuning a model with the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    take a look at the basic tutorial [here](../training#train-with-pytorch-trainer)!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'You’re ready to start training your model now! Load T5 with [AutoModelForSeq2SeqLM](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForSeq2SeqLM):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'At this point, only three steps remain:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Define your training hyperparameters in [Seq2SeqTrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments).
    The only required parameter is `output_dir` which specifies where to save your
    model. You’ll push this model to the Hub by setting `push_to_hub=True` (you need
    to be signed in to Hugging Face to upload your model). At the end of each epoch,
    the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    will evaluate the SacreBLEU metric and save the training checkpoint.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the training arguments to [Seq2SeqTrainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Seq2SeqTrainer)
    along with the model, dataset, tokenizer, data collator, and `compute_metrics`
    function.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)
    to finetune your model.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once training is completed, share your model to the Hub with the [push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)
    method so everyone can use your model:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: TensorFlowHide TensorFlow content
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: If you aren’t familiar with finetuning a model with Keras, take a look at the
    basic tutorial [here](../training#train-a-tensorflow-model-with-keras)!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'To finetune a model in TensorFlow, start by setting up an optimizer function,
    learning rate schedule, and some training hyperparameters:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then you can load T5 with [TFAutoModelForSeq2SeqLM](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForSeq2SeqLM):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Convert your datasets to the `tf.data.Dataset` format with [prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Configure the model for training with [`compile`](https://keras.io/api/models/model_training_apis/#compile-method).
    Note that Transformers models all have a default task-relevant loss function,
    so you don’t need to specify one unless you want to:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The last two things to setup before you start training is to compute the SacreBLEU
    metric from the predictions, and provide a way to push your model to the Hub.
    Both are done by using [Keras callbacks](../main_classes/keras_callbacks).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Pass your `compute_metrics` function to [KerasMetricCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.KerasMetricCallback):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Specify where to push your model and tokenizer in the [PushToHubCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.PushToHubCallback):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then bundle your callbacks together:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, you’re ready to start training your model! Call [`fit`](https://keras.io/api/models/model_training_apis/#fit-method)
    with your training and validation datasets, the number of epochs, and your callbacks
    to finetune the model:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你已经准备好开始训练你的模型了！调用[`fit`](https://keras.io/api/models/model_training_apis/#fit-method)与你的训练和验证数据集，时代的数量，以及你的回调来微调模型：
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once training is completed, your model is automatically uploaded to the Hub
    so everyone can use it!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦训练完成，你的模型会自动上传到Hub，这样每个人都可以使用它！
- en: For a more in-depth example of how to finetune a model for translation, take
    a look at the corresponding [PyTorch notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/translation.ipynb)
    or [TensorFlow notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/translation-tf.ipynb).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何为翻译微调模型的更深入示例，请查看相应的[PyTorch笔记本](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/translation.ipynb)或[TensorFlow笔记本](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/translation-tf.ipynb)。
- en: Inference
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推理
- en: Great, now that you’ve finetuned a model, you can use it for inference!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在你已经微调了一个模型，你可以用它进行推理！
- en: 'Come up with some text you’d like to translate to another language. For T5,
    you need to prefix your input depending on the task you’re working on. For translation
    from English to French, you should prefix your input as shown below:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 想出一些你想要翻译成另一种语言的文本。对于T5，你需要根据你正在处理的任务来添加前缀。对于从英语翻译成法语，你应该像下面所示添加前缀：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The simplest way to try out your finetuned model for inference is to use it
    in a [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline).
    Instantiate a `pipeline` for translation with your model, and pass your text to
    it:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用微调模型进行推理的最简单方法是在[pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)中使用它。为翻译实例化一个`pipeline`与您的模型，并将文本传递给它：
- en: '[PRE24]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You can also manually replicate the results of the `pipeline` if you’d like:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你也可以手动复制`pipeline`的结果：
- en: PytorchHide Pytorch content
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Pytorch隐藏Pytorch内容
- en: 'Tokenize the text and return the `input_ids` as PyTorch tensors:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对文本进行标记化，并将`input_ids`返回为PyTorch张量：
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Use the [generate()](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.GenerationMixin.generate)
    method to create the translation. For more details about the different text generation
    strategies and parameters for controlling generation, check out the [Text Generation](../main_classes/text_generation)
    API.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[generate()](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.GenerationMixin.generate)方法创建翻译。有关不同文本生成策略和控制生成的参数的更多详细信息，请查看[Text
    Generation](../main_classes/text_generation) API。
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Decode the generated token ids back into text:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成的标记ID解码回文本：
- en: '[PRE27]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: TensorFlowHide TensorFlow content
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow隐藏TensorFlow内容
- en: 'Tokenize the text and return the `input_ids` as TensorFlow tensors:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对文本进行标记化，并将`input_ids`返回为TensorFlow张量：
- en: '[PRE28]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Use the [generate()](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.TFGenerationMixin.generate)
    method to create the translation. For more details about the different text generation
    strategies and parameters for controlling generation, check out the [Text Generation](../main_classes/text_generation)
    API.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[generate()](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.TFGenerationMixin.generate)方法创建翻译。有关不同文本生成策略和控制生成的参数的更多详细信息，请查看[Text
    Generation](../main_classes/text_generation) API。
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Decode the generated token ids back into text:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成的标记ID解码回文本：
- en: '[PRE30]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
