["```py\n# install git-lfs to interact with the repository\nsudo apt-get update\nsudo apt-get install git-lfs\n# install transformers (not needed since it is installed by default in the container)\npip install transformers[sklearn,sentencepiece,audio,vision]\n```", "```py\ngit lfs install\ngit clone https://huggingface.co/philschmid/distilbert-base-uncased-emotion\n```", "```py\n# setup cli with token\nhuggingface-cli login\ngit config --global credential.helper store\n```", "```py\n!cd distilbert-base-uncased-emotion && touch handler.py\n```", "```py\nfrom typing import Dict, List, Any\n\nclass EndpointHandler():\n    def __init__(self, path=\"\"):\n        # Preload all the elements you are going to need at inference.\n        # pseudo:\n        # self.model= load_model(path)\n\n    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:\n        \"\"\"\n       data args:\n            inputs (:obj: `str` | `PIL.Image` | `np.array`)\n            kwargs\n      Return:\n            A :obj:`list` | `dict`: will be serialized and returned\n        \"\"\"\n\n        # pseudo\n        # self.model(input)\n```", "```py\n!echo \"holidays\" >> requirements.txt\n!pip install -r requirements.txt\n```", "```py\nfrom typing import Dict, List, Any\nfrom transformers import pipeline\nimport holidays\n\nclass EndpointHandler():\n    def __init__(self, path=\"\"):\n        self.pipeline = pipeline(\"text-classification\",model=path)\n        self.holidays = holidays.US()\n\n    def __call__(self, data: Dict[str, Any]) -> List[Dict[str, Any]]:\n        \"\"\"\n       data args:\n            inputs (:obj: `str`)\n            date (:obj: `str`)\n      Return:\n            A :obj:`list` | `dict`: will be serialized and returned\n        \"\"\"\n        # get inputs\n        inputs = data.pop(\"inputs\",data)\n        date = data.pop(\"date\", None)\n\n        # check if date exists and if it is a holiday\n        if date is not None and date in self.holidays:\n          return [{\"label\": \"happy\", \"score\": 1}]\n\n        # run normal prediction\n        prediction = self.pipeline(inputs)\n        return prediction\n```", "```py\nfrom handler import EndpointHandler\n\n# init handler\nmy_handler = EndpointHandler(path=\".\")\n\n# prepare sample payload\nnon_holiday_payload = {\"inputs\": \"I am quite excited how this will turn out\", \"date\": \"2022-08-08\"}\nholiday_payload = {\"inputs\": \"Today is a though day\", \"date\": \"2022-07-04\"}\n\n# test the handler\nnon_holiday_pred=my_handler(non_holiday_payload)\nholiday_payload=my_handler(holiday_payload)\n\n# show results\nprint(\"non_holiday_pred\", non_holiday_pred)\nprint(\"holiday_payload\", holiday_payload)\n\n# non_holiday_pred [{'label': 'joy', 'score': 0.9985942244529724}]\n# holiday_payload [{'label': 'happy', 'score': 1}]\n```", "```py\n# add all our new files\n!git add *\n# commit our files\n!git commit -m \"add custom handler\"\n# push the files to the hub\n!git push\n```"]