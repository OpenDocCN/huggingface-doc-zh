- en: Manage your Space
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/huggingface_hub/guides/manage-spaces](https://huggingface.co/docs/huggingface_hub/guides/manage-spaces)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/start.81f0ceaa.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/scheduler.6062bdaf.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/singletons.3c2729d2.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/paths.566d2d8a.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/entry/app.77e31cee.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/index.4bca734e.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/0.d6dfa8c0.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/nodes/12.83b52c0d.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Tip.b9ac1f03.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/CodeBlock.fa01571c.js">
    <link rel="modulepreload" href="/docs/huggingface_hub/v0.20.3/en/_app/immutable/chunks/Heading.723dceba.js">
  prefs: []
  type: TYPE_NORMAL
- en: In this guide, we will see how to manage your Space runtime ([secrets](https://huggingface.co/docs/hub/spaces-overview#managing-secrets),
    [hardware](https://huggingface.co/docs/hub/spaces-gpus), and [storage](https://huggingface.co/docs/hub/spaces-storage#persistent-storage))
    using `huggingface_hub`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example: configure secrets and hardware.'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is an end-to-end example to create and setup a Space on the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Create a Space on the Hub.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**1\. (bis) Duplicate a Space.**'
  prefs: []
  type: TYPE_NORMAL
- en: This can prove useful if you want to build up from an existing Space instead
    of starting from scratch. It is also useful is you want control over the configuration/settings
    of a public Space. See [duplicate_space()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.duplicate_space)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Upload your code using your preferred solution.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example to upload the local folder `src/` from your machine to your
    Space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: At this step, your app should already be running on the Hub for free ! However,
    you might want to configure it further with secrets and upgraded hardware.
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Configure secrets and variables**'
  prefs: []
  type: TYPE_NORMAL
- en: Your Space might require some secret keys, token or variables to work. See [docs](https://huggingface.co/docs/hub/spaces-overview#managing-secrets)
    for more details. For example, an HF token to upload an image dataset to the Hub
    once generated from your Space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Secrets and variables can be deleted as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: From within your Space, secrets are available as environment variables (or Streamlit
    Secrets Management if using Streamlit). No need to fetch them via the API!Any
    change in your Space configuration (secrets or hardware) will trigger a restart
    of your app.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bonus: set secrets and variables when creating or duplicating the Space!**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Secrets and variables can be set when creating or duplicating a space:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**4\. Configure the hardware**'
  prefs: []
  type: TYPE_NORMAL
- en: By default, your Space will run on a CPU environment for free. You can upgrade
    the hardware to run it on GPUs. A payment card or a community grant is required
    to access upgrade your Space. See [docs](https://huggingface.co/docs/hub/spaces-gpus)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Hardware updates are not done immediately as your Space has to be reloaded on
    our servers. At any time, you can check on which hardware your Space is running
    to see if your request has been met.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You now have a Space fully configured. Make sure to downgrade your Space back
    to “cpu-classic” when you are done using it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bonus: request hardware when creating or duplicating the Space!**'
  prefs: []
  type: TYPE_NORMAL
- en: Upgraded hardware will be automatically assigned to your Space once it’s built.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**5\. Pause and restart your Space**'
  prefs: []
  type: TYPE_NORMAL
- en: By default if your Space is running on an upgraded hardware, it will never be
    stopped. However to avoid getting billed, you might want to pause it when you
    are not using it. This is possible using [pause_space()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.pause_space).
    A paused Space will be inactive until the owner of the Space restarts it, either
    with the UI or via API using [restart_space()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.restart_space).
    For more details about paused mode, please refer to [this section](https://huggingface.co/docs/hub/spaces-gpus#pause)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Another possibility is to set a timeout for your Space. If your Space is inactive
    for more than the timeout duration, it will go to sleep. Any visitor landing on
    your Space will start it back up. You can set a timeout using [set_space_sleep_time()](/docs/huggingface_hub/v0.20.3/en/package_reference/hf_api#huggingface_hub.HfApi.set_space_sleep_time).
    For more details about sleeping mode, please refer to [this section](https://huggingface.co/docs/hub/spaces-gpus#sleep-time).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: if you are using a ‘cpu-basic’ hardware, you cannot configure a custom
    sleep time. Your Space will automatically be paused after 48h of inactivity.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bonus: set a sleep time while requesting hardware**'
  prefs: []
  type: TYPE_NORMAL
- en: Upgraded hardware will be automatically assigned to your Space once it’s built.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Bonus: set a sleep time when creating or duplicating the Space!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**6\. Add persistent storage to your Space**'
  prefs: []
  type: TYPE_NORMAL
- en: You can choose the storage tier of your choice to access disk space that persists
    across restarts of your Space. This means you can read and write from disk like
    you would with a traditional hard drive. See [docs](https://huggingface.co/docs/hub/spaces-storage#persistent-storage)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You can also delete your storage, losing all the data permanently.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: You cannot decrease the storage tier of your space once it’s been granted.
    To do so, you must delete the storage first then request the new desired tier.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bonus: request storage when creating or duplicating the Space!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'More advanced: temporarily upgrade your Space !'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spaces allow for a lot of different use cases. Sometimes, you might want to
    temporarily run a Space on a specific hardware, do something and then shut it
    down. In this section, we will explore how to benefit from Spaces to finetune
    a model on demand. This is only one way of solving this particular problem. It
    has to be taken as a suggestion and adapted to your use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s assume we have a Space to finetune a model. It is a Gradio app that takes
    as input a model id and a dataset id. The workflow is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: (Prompt the user for a model and a dataset)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the model from the Hub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the dataset from the Hub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finetune the model on the dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the new model to the Hub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Step 3\. requires a custom hardware but you don’t want your Space to be running
    all the time on a paid GPU. A solution is to dynamically request hardware for
    the training and shut it down afterwards. Since requesting hardware restarts your
    Space, your app must somehow “remember” the current task it is performing. There
    are multiple ways of doing this. In this guide we will see one solution using
    a Dataset as “task scheduler”.
  prefs: []
  type: TYPE_NORMAL
- en: App skeleton
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is what your app would look like. On startup, check if a task is scheduled
    and if yes, run it on the correct hardware. Once done, set back hardware to the
    free-plan CPU and prompt the user for a new task.
  prefs: []
  type: TYPE_NORMAL
- en: Such a workflow does not support concurrent access as normal demos. In particular,
    the interface will be disabled when training occurs. It is preferable to set your
    repo as private to ensure you are the only user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Task scheduler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scheduling tasks can be done in many ways. Here is an example how it could be
    done using a simple CSV stored as a Dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
