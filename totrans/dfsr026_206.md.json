["```py\n( num_train_timesteps: int = 2000 snr: float = 0.15 sigma_min: float = 0.01 sigma_max: float = 1348.0 sampling_eps: float = 1e-05 correct_steps: int = 1 )\n```", "```py\n( sample: FloatTensor timestep: Optional = None ) \u2192 export const metadata = 'undefined';torch.FloatTensor\n```", "```py\n( num_inference_steps: int sigma_min: float = None sigma_max: float = None sampling_eps: float = None )\n```", "```py\n( num_inference_steps: int sampling_eps: float = None device: Union = None )\n```", "```py\n( model_output: FloatTensor sample: FloatTensor generator: Optional = None return_dict: bool = True ) \u2192 export const metadata = 'undefined';SdeVeOutput or tuple\n```", "```py\n( model_output: FloatTensor timestep: int sample: FloatTensor generator: Optional = None return_dict: bool = True ) \u2192 export const metadata = 'undefined';SdeVeOutput or tuple\n```", "```py\n( prev_sample: FloatTensor prev_sample_mean: FloatTensor )\n```"]