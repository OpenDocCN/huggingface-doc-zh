["```py\ndef expand_and_normalize_bbox(bboxes, doc_width, doc_height):\n    # here, bboxes are numpy array\n\n    # Normalize bbox -> 0 ~ 1\n    bboxes[:, [0, 2]] = bboxes[:, [0, 2]] / width\n    bboxes[:, [1, 3]] = bboxes[:, [1, 3]] / height\n```", "```py\ndef make_box_first_token_mask(bboxes, words, tokenizer, max_seq_length=512):\n\n    box_first_token_mask = np.zeros(max_seq_length, dtype=np.bool_)\n\n    # encode(tokenize) each word from words (List[str])\n    input_ids_list: List[List[int]] = [tokenizer.encode(e, add_special_tokens=False) for e in words]\n\n    # get the length of each box\n    tokens_length_list: List[int] = [len(l) for l in input_ids_list]\n\n    box_end_token_indices = np.array(list(itertools.accumulate(tokens_length_list)))\n    box_start_token_indices = box_end_token_indices - np.array(tokens_length_list)\n\n    # filter out the indices that are out of max_seq_length\n    box_end_token_indices = box_end_token_indices[box_end_token_indices < max_seq_length - 1]\n    if len(box_start_token_indices) > len(box_end_token_indices):\n        box_start_token_indices = box_start_token_indices[: len(box_end_token_indices)]\n\n    # set box_start_token_indices to True\n    box_first_token_mask[box_start_token_indices] = True\n\n    return box_first_token_mask\n\n```", "```py\n>>> from transformers import BrosConfig, BrosModel\n\n>>> # Initializing a BROS jinho8345/bros-base-uncased style configuration\n>>> configuration = BrosConfig()\n\n>>> # Initializing a model from the jinho8345/bros-base-uncased style configuration\n>>> model = BrosModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> import torch\n>>> from transformers import BrosProcessor, BrosModel\n\n>>> processor = BrosProcessor.from_pretrained(\"jinho8345/bros-base-uncased\")\n\n>>> model = BrosModel.from_pretrained(\"jinho8345/bros-base-uncased\")\n\n>>> encoding = processor(\"Hello, my dog is cute\", add_special_tokens=False, return_tensors=\"pt\")\n>>> bbox = torch.tensor([[[0, 0, 1, 1]]]).repeat(1, encoding[\"input_ids\"].shape[-1], 1)\n>>> encoding[\"bbox\"] = bbox\n\n>>> outputs = model(**encoding)\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> import torch\n>>> from transformers import BrosProcessor, BrosForTokenClassification\n\n>>> processor = BrosProcessor.from_pretrained(\"jinho8345/bros-base-uncased\")\n\n>>> model = BrosForTokenClassification.from_pretrained(\"jinho8345/bros-base-uncased\")\n\n>>> encoding = processor(\"Hello, my dog is cute\", add_special_tokens=False, return_tensors=\"pt\")\n>>> bbox = torch.tensor([[[0, 0, 1, 1]]]).repeat(1, encoding[\"input_ids\"].shape[-1], 1)\n>>> encoding[\"bbox\"] = bbox\n\n>>> outputs = model(**encoding)\n```", "```py\n>>> import torch\n>>> from transformers import BrosProcessor, BrosSpadeEEForTokenClassification\n\n>>> processor = BrosProcessor.from_pretrained(\"jinho8345/bros-base-uncased\")\n\n>>> model = BrosSpadeEEForTokenClassification.from_pretrained(\"jinho8345/bros-base-uncased\")\n\n>>> encoding = processor(\"Hello, my dog is cute\", add_special_tokens=False, return_tensors=\"pt\")\n>>> bbox = torch.tensor([[[0, 0, 1, 1]]]).repeat(1, encoding[\"input_ids\"].shape[-1], 1)\n>>> encoding[\"bbox\"] = bbox\n\n>>> outputs = model(**encoding)\n```", "```py\n>>> import torch\n>>> from transformers import BrosProcessor, BrosSpadeELForTokenClassification\n\n>>> processor = BrosProcessor.from_pretrained(\"jinho8345/bros-base-uncased\")\n\n>>> model = BrosSpadeELForTokenClassification.from_pretrained(\"jinho8345/bros-base-uncased\")\n\n>>> encoding = processor(\"Hello, my dog is cute\", add_special_tokens=False, return_tensors=\"pt\")\n>>> bbox = torch.tensor([[[0, 0, 1, 1]]]).repeat(1, encoding[\"input_ids\"].shape[-1], 1)\n>>> encoding[\"bbox\"] = bbox\n\n>>> outputs = model(**encoding)\n```"]