- en: Stable Diffusion XL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/training/sdxl](https://huggingface.co/docs/diffusers/training/sdxl)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: This script is experimental, and itâ€™s easy to overfit and run into issues like
    catastrophic forgetting. Try exploring different hyperparameters to get the best
    results on your dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[Stable Diffusion XL (SDXL)](https://hf.co/papers/2307.01952) is a larger and
    more powerful iteration of the Stable Diffusion model, capable of producing higher
    resolution images.'
  prefs: []
  type: TYPE_NORMAL
- en: SDXLâ€™s UNet is 3x larger and the model adds a second text encoder to the architecture.
    Depending on the hardware available to you, this can be very computationally intensive
    and it may not run on a consumer GPU like a Tesla T4\. To help fit this larger
    model into memory and to speedup training, try enabling `gradient_checkpointing`,
    `mixed_precision`, and `gradient_accumulation_steps`. You can reduce your memory-usage
    even more by enabling memory-efficient attention with [xFormers](../optimization/xformers)
    and using [bitsandbytesâ€™](https://github.com/TimDettmers/bitsandbytes) 8-bit optimizer.
  prefs: []
  type: TYPE_NORMAL
- en: This guide will explore the [train_text_to_image_sdxl.py](https://github.com/huggingface/diffusers/blob/main/examples/text_to_image/train_text_to_image_sdxl.py)
    training script to help you become more familiar with it, and how you can adapt
    it for your own use-case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the script, make sure you install the library from source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then navigate to the example folder containing the training script and install
    the required dependencies for the script youâ€™re using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: ðŸ¤— Accelerate is a library for helping you train on multiple GPUs/TPUs or with
    mixed-precision. Itâ€™ll automatically configure your training setup based on your
    hardware and environment. Take a look at the ðŸ¤— Accelerate [Quick tour](https://huggingface.co/docs/accelerate/quicktour)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize an ðŸ¤— Accelerate environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To setup a default ðŸ¤— Accelerate environment without choosing any configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or if your environment doesnâ€™t support an interactive shell, like a notebook,
    you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, if you want to train a model on your own dataset, take a look at the
    [Create a dataset for training](create_dataset) guide to learn how to create a
    dataset that works with the training script.
  prefs: []
  type: TYPE_NORMAL
- en: Script parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following sections highlight parts of the training script that are important
    for understanding how to modify it, but it doesnâ€™t cover every aspect of the script
    in detail. If youâ€™re interested in learning more, feel free to read through the
    [script](https://github.com/huggingface/diffusers/blob/main/examples/text_to_image/train_text_to_image_sdxl.py)
    and let us know if you have any questions or concerns.
  prefs: []
  type: TYPE_NORMAL
- en: The training script provides many parameters to help you customize your training
    run. All of the parameters and their descriptions are found in the [`parse_args()`](https://github.com/huggingface/diffusers/blob/aab6de22c33cc01fb7bc81c0807d6109e2c998c9/examples/text_to_image/train_text_to_image_sdxl.py#L129)
    function. This function provides default values for each parameter, such as the
    training batch size and learning rate, but you can also set your own values in
    the training command if youâ€™d like.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to speedup training with mixed precision using the bf16 format,
    add the `--mixed_precision` parameter to the training command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Most of the parameters are identical to the parameters in the [Text-to-image](text2image#script-parameters)
    training guide, so youâ€™ll focus on the parameters that are relevant to training
    SDXL in this guide.
  prefs: []
  type: TYPE_NORMAL
- en: '`--pretrained_vae_model_name_or_path`: path to a pretrained VAE; the SDXL VAE
    is known to suffer from numerical instability, so this parameter allows you to
    specify a better [VAE](https://huggingface.co/madebyollin/sdxl-vae-fp16-fix)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--proportion_empty_prompts`: the proportion of image prompts to replace with
    empty strings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--timestep_bias_strategy`: where (earlier vs. later) in the timestep to apply
    a bias, which can encourage the model to either learn low or high frequency details'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--timestep_bias_multiplier`: the weight of the bias to apply to the timestep'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--timestep_bias_begin`: the timestep to begin applying the bias'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--timestep_bias_end`: the timestep to end applying the bias'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--timestep_bias_portion`: the proportion of timesteps to apply the bias to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Min-SNR weighting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [Min-SNR](https://huggingface.co/papers/2303.09556) weighting strategy can
    help with training by rebalancing the loss to achieve faster convergence. The
    training script supports predicting either `epsilon` (noise) or `v_prediction`,
    but Min-SNR is compatible with both prediction types. This weighting strategy
    is only supported by PyTorch and is unavailable in the Flax training script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `--snr_gamma` parameter and set it to the recommended value of 5.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Training script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The training script is also similar to the [Text-to-image](text2image#training-script)
    training guide, but itâ€™s been modified to support SDXL training. This guide will
    focus on the code that is unique to the SDXL training script.
  prefs: []
  type: TYPE_NORMAL
- en: It starts by creating functions to [tokenize the prompts](https://github.com/huggingface/diffusers/blob/aab6de22c33cc01fb7bc81c0807d6109e2c998c9/examples/text_to_image/train_text_to_image_sdxl.py#L478)
    to calculate the prompt embeddings, and to compute the image embeddings with the
    [VAE](https://github.com/huggingface/diffusers/blob/aab6de22c33cc01fb7bc81c0807d6109e2c998c9/examples/text_to_image/train_text_to_image_sdxl.py#L519).
    Next, youâ€™ll a function to [generate the timesteps weights](https://github.com/huggingface/diffusers/blob/aab6de22c33cc01fb7bc81c0807d6109e2c998c9/examples/text_to_image/train_text_to_image_sdxl.py#L531)
    depending on the number of timesteps and the timestep bias strategy to apply.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the [`main()`](https://github.com/huggingface/diffusers/blob/aab6de22c33cc01fb7bc81c0807d6109e2c998c9/examples/text_to_image/train_text_to_image_sdxl.py#L572)
    function, in addition to loading a tokenizer, the script loads a second tokenizer
    and text encoder because the SDXL architecture uses two of each:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The [prompt and image embeddings](https://github.com/huggingface/diffusers/blob/aab6de22c33cc01fb7bc81c0807d6109e2c998c9/examples/text_to_image/train_text_to_image_sdxl.py#L857)
    are computed first and kept in memory, which isnâ€™t typically an issue for a smaller
    dataset, but for larger datasets it can lead to memory problems. If this is the
    case, you should save the pre-computed embeddings to disk separately and load
    them into memory during the training process (see this [PR](https://github.com/huggingface/diffusers/pull/4505)
    for more discussion about this topic).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After calculating the embeddings, the text encoder, VAE, and tokenizer are
    deleted to free up some memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the [training loop](https://github.com/huggingface/diffusers/blob/aab6de22c33cc01fb7bc81c0807d6109e2c998c9/examples/text_to_image/train_text_to_image_sdxl.py#L943)
    takes care of the rest. If you chose to apply a timestep bias strategy, youâ€™ll
    see the timestep weights are calculated and added as noise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you want to learn more about how the training loop works, check out the [Understanding
    pipelines, models and schedulers](../using-diffusers/write_own_pipeline) tutorial
    which breaks down the basic pattern of the denoising process.
  prefs: []
  type: TYPE_NORMAL
- en: Launch the script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once youâ€™ve made all your changes or youâ€™re okay with the default configuration,
    youâ€™re ready to launch the training script! ðŸš€
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s train on the [PokÃ©mon BLIP captions](https://huggingface.co/datasets/lambdalabs/pokemon-blip-captions)
    dataset to generate your own PokÃ©mon. Set the environment variables `MODEL_NAME`
    and `DATASET_NAME` to the model and the dataset (either from the Hub or a local
    path). You should also specify a VAE other than the SDXL VAE (either from the
    Hub or a local path) with `VAE_NAME` to avoid numerical instabilities.
  prefs: []
  type: TYPE_NORMAL
- en: To monitor training progress with Weights & Biases, add the `--report_to=wandb`
    parameter to the training command. Youâ€™ll also need to add the `--validation_prompt`
    and `--validation_epochs` to the training command to keep track of results. This
    can be really useful for debugging the model and viewing intermediate results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: After youâ€™ve finished training, you can use your newly trained SDXL model for
    inference!
  prefs: []
  type: TYPE_NORMAL
- en: PyTorchPyTorch XLA
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Congratulations on training a SDXL model! To learn more about how to use your
    new model, the following guides may be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the [Stable Diffusion XL](../using-diffusers/sdxl) guide to learn how to
    use it for a variety of different tasks (text-to-image, image-to-image, inpainting),
    how to use itâ€™s refiner model, and the different types of micro-conditionings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check out the [DreamBooth](dreambooth) and [LoRA](lora) training guides to learn
    how to train a personalized SDXL model with just a few example images. These two
    training techniques can even be combined!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
