- en: Exporting ðŸ¤— Transformers models to ONNX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/onnx](https://huggingface.co/docs/transformers/v4.37.2/en/main_classes/onnx)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/transformers/v4.37.2/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/start.1af50ed5.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/scheduler.9bc65507.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/singletons.a2d7fdf1.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.3b203c72.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/paths.b8f1dad4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/entry/app.59e74a31.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/index.707bf1b6.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/0.dbd8cc12.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/nodes/47.206f249f.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Docstring.17db21ae.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/transformers/v4.37.2/en/_app/immutable/chunks/Heading.342b1fa6.js">
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ¤— Transformers provides a `transformers.onnx` package that enables you to convert
    model checkpoints to an ONNX graph by leveraging configuration objects.
  prefs: []
  type: TYPE_NORMAL
- en: See the [guide](../serialization) on exporting ðŸ¤— Transformers models for more
    details.
  prefs: []
  type: TYPE_NORMAL
- en: ONNX Configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We provide three abstract classes that you should inherit from, depending on
    the type of model architecture you wish to export:'
  prefs: []
  type: TYPE_NORMAL
- en: Encoder-based models inherit from [OnnxConfig](/docs/transformers/v4.37.2/en/main_classes/onnx#transformers.onnx.OnnxConfig)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decoder-based models inherit from [OnnxConfigWithPast](/docs/transformers/v4.37.2/en/main_classes/onnx#transformers.onnx.OnnxConfigWithPast)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encoder-decoder models inherit from [OnnxSeq2SeqConfigWithPast](/docs/transformers/v4.37.2/en/main_classes/onnx#transformers.onnx.OnnxSeq2SeqConfigWithPast)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OnnxConfig
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.onnx.OnnxConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/config.py#L68)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Base class for ONNX exportable model describing metadata on how to export the
    model through the ONNX format.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `flatten_output_collection_property`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/config.py#L424)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: (Dict[str, Any])
  prefs: []
  type: TYPE_NORMAL
- en: Outputs with flattened structure and key mapping this new structure.
  prefs: []
  type: TYPE_NORMAL
- en: Flatten any potential nested structure expanding the name of the field with
    the index of the element within the structure.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `from_model_config`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/config.py#L127)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Instantiate a OnnxConfig for a specific model
  prefs: []
  type: TYPE_NORMAL
- en: '#### `generate_dummy_inputs`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/config.py#L280)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`batch_size` (`int`, *optional*, defaults to -1) â€” The batch size to export
    the model for (-1 means dynamic axis).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_choices` (`int`, *optional*, defaults to -1) â€” The number of candidate
    answers provided for multiple choice task (-1 means dynamic axis).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seq_length` (`int`, *optional*, defaults to -1) â€” The sequence length to export
    the model for (-1 means dynamic axis).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_pair` (`bool`, *optional*, defaults to `False`) â€” Indicate if the input
    is a pair (sentence 1, sentence 2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framework` (`TensorType`, *optional*, defaults to `None`) â€” The framework
    (PyTorch or TensorFlow) that the tokenizer will generate tensors for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_channels` (`int`, *optional*, defaults to 3) â€” The number of channels
    of the generated images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_width` (`int`, *optional*, defaults to 40) â€” The width of the generated
    images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`image_height` (`int`, *optional*, defaults to 40) â€” The height of the generated
    images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sampling_rate` (`int`, *optional* defaults to 22050) â€” The sampling rate for
    audio data generation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time_duration` (`float`, *optional* defaults to 5.0) â€” Total seconds of sampling
    for audio data generation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`frequency` (`int`, *optional* defaults to 220) â€” The desired natural frequency
    of generated audio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate inputs to provide to the ONNX exporter for the specific framework
  prefs: []
  type: TYPE_NORMAL
- en: '#### `generate_dummy_inputs_onnxruntime`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/config.py#L400)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`reference_model_inputs` ([`Mapping[str, Tensor]`) â€” Reference inputs for the
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`Mapping[str, Tensor]`'
  prefs: []
  type: TYPE_NORMAL
- en: The mapping holding the kwargs to provide to the modelâ€™s forward function
  prefs: []
  type: TYPE_NORMAL
- en: Generate inputs for ONNX Runtime using the reference model inputs. Override
    this to run inference with seq2seq models which have the encoder and decoder exported
    as separate ONNX files.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `use_external_data_format`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/config.py#L241)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Flag indicating if the model requires using external data format
  prefs: []
  type: TYPE_NORMAL
- en: OnnxConfigWithPast
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.onnx.OnnxConfigWithPast`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/config.py#L443)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '#### `fill_with_past_key_values_`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/config.py#L550)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Fill the input_or_outputs mapping with past_key_values dynamic axes considering.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `with_past`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/config.py#L454)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Instantiate a OnnxConfig with `use_past` attribute set to True
  prefs: []
  type: TYPE_NORMAL
- en: OnnxSeq2SeqConfigWithPast
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.onnx.OnnxSeq2SeqConfigWithPast`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/config.py#L590)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: ONNX Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each ONNX configuration is associated with a set of *features* that enable you
    to export models for different types of topologies or tasks.
  prefs: []
  type: TYPE_NORMAL
- en: FeaturesManager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '### `class transformers.onnx.FeaturesManager`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/features.py#L85)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '#### `check_supported_model_or_raise`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/features.py#L711)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Check whether or not the model has the requested features.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `determine_framework`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/features.py#L628)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model` (`str`) â€” The name of the model to export.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framework` (`str`, *optional*, defaults to `None`) â€” The framework to use
    for the export. See above for priority if none provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determines the framework to use for the export.
  prefs: []
  type: TYPE_NORMAL
- en: 'The priority is in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: User input via `framework`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If local checkpoint is provided, use the same framework as the checkpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Available framework in environment, with priority given to PyTorch
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '#### `get_config`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/features.py#L736)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_type` (`str`) â€” The model type to retrieve the config for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`feature` (`str`) â€” The feature to retrieve the config for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`OnnxConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: config for the combination
  prefs: []
  type: TYPE_NORMAL
- en: Gets the OnnxConfig for a model_type and feature combination.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_model_class_for_feature`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/features.py#L601)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`feature` (`str`) â€” The feature required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framework` (`str`, *optional*, defaults to `"pt"`) â€” The framework to use
    for the export.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attempts to retrieve an AutoModel class from a feature name.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_model_from_feature`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/features.py#L678)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`feature` (`str`) â€” The feature required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model` (`str`) â€” The name of the model to export.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`framework` (`str`, *optional*, defaults to `None`) â€” The framework to use
    for the export. See `FeaturesManager.determine_framework` for the priority should
    none be provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attempts to retrieve a model from a modelâ€™s name and the feature to be enabled.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `get_supported_features_for_model_type`'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/onnx/features.py#L556)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`model_type` (`str`) â€” The model type to retrieve the supported features for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_name` (`str`, *optional*) â€” The name attribute of the model object,
    only used for the exception message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tries to retrieve the feature -> OnnxConfig constructor map from the model type.
  prefs: []
  type: TYPE_NORMAL
