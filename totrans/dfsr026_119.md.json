["```py\nfrom diffusers import AsymmetricAutoencoderKL, StableDiffusionInpaintPipeline\nfrom diffusers.utils import load_image, make_image_grid\n\nprompt = \"a photo of a person with beard\"\nimg_url = \"https://huggingface.co/datasets/hf-internal-testing/diffusers-images/resolve/main/repaint/celeba_hq_256.png\"\nmask_url = \"https://huggingface.co/datasets/hf-internal-testing/diffusers-images/resolve/main/repaint/mask_256.png\"\n\noriginal_image = load_image(img_url).resize((512, 512))\nmask_image = load_image(mask_url).resize((512, 512))\n\npipe = StableDiffusionInpaintPipeline.from_pretrained(\"runwayml/stable-diffusion-inpainting\")\npipe.vae = AsymmetricAutoencoderKL.from_pretrained(\"cross-attention/asymmetric-autoencoder-kl-x-1-5\")\npipe.to(\"cuda\")\n\nimage = pipe(prompt=prompt, image=original_image, mask_image=mask_image).images[0]\nmake_image_grid([original_image, mask_image, image], rows=1, cols=3)\n```", "```py\n( in_channels: int = 3 out_channels: int = 3 down_block_types: Tuple = ('DownEncoderBlock2D',) down_block_out_channels: Tuple = (64,) layers_per_down_block: int = 1 up_block_types: Tuple = ('UpDecoderBlock2D',) up_block_out_channels: Tuple = (64,) layers_per_up_block: int = 1 act_fn: str = 'silu' latent_channels: int = 4 norm_num_groups: int = 32 sample_size: int = 32 scaling_factor: float = 0.18215 )\n```", "```py\n( sample: FloatTensor mask: Optional = None sample_posterior: bool = False return_dict: bool = True generator: Optional = None )\n```", "```py\n( latent_dist: DiagonalGaussianDistribution )\n```", "```py\n( sample: FloatTensor )\n```"]