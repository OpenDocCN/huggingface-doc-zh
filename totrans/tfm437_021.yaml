- en: Causal language modeling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 因果语言建模
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/language_modeling](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/language_modeling)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/tasks/language_modeling](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/language_modeling)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of language modeling, causal and masked. This guide illustrates
    causal language modeling. Causal language models are frequently used for text
    generation. You can use these models for creative applications like choosing your
    own text adventure or an intelligent coding assistant like Copilot or CodeParrot.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 语言建模有两种类型，因果和掩码。本指南说明了因果语言建模。因果语言模型经常用于文本生成。您可以将这些模型用于创意应用，如选择自己的文本冒险或智能编码助手，如Copilot或CodeParrot。
- en: '[https://www.youtube-nocookie.com/embed/Vpjb1lu0MDk](https://www.youtube-nocookie.com/embed/Vpjb1lu0MDk)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube-nocookie.com/embed/Vpjb1lu0MDk](https://www.youtube-nocookie.com/embed/Vpjb1lu0MDk)'
- en: Causal language modeling predicts the next token in a sequence of tokens, and
    the model can only attend to tokens on the left. This means the model cannot see
    future tokens. GPT-2 is an example of a causal language model.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因果语言建模预测令牌序列中的下一个令牌，模型只能关注左侧的令牌。这意味着模型无法看到未来的令牌。GPT-2是因果语言模型的一个例子。
- en: 'This guide will show you how to:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南将向您展示如何：
- en: Finetune [DistilGPT2](https://huggingface.co/distilgpt2) on the [r/askscience](https://www.reddit.com/r/askscience/)
    subset of the [ELI5](https://huggingface.co/datasets/eli5) dataset.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[ELI5](https://huggingface.co/datasets/eli5)数据集的[r/askscience](https://www.reddit.com/r/askscience/)子集上微调[DistilGPT2](https://huggingface.co/distilgpt2)。
- en: Use your finetuned model for inference.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您微调的模型进行推理。
- en: 'You can finetune other architectures for causal language modeling following
    the same steps in this guide. Choose one of the following architectures:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照本指南中的相同步骤微调其他架构以进行因果语言建模。选择以下架构之一：
- en: '[BART](../model_doc/bart), [BERT](../model_doc/bert), [Bert Generation](../model_doc/bert-generation),
    [BigBird](../model_doc/big_bird), [BigBird-Pegasus](../model_doc/bigbird_pegasus),
    [BioGpt](../model_doc/biogpt), [Blenderbot](../model_doc/blenderbot), [BlenderbotSmall](../model_doc/blenderbot-small),
    [BLOOM](../model_doc/bloom), [CamemBERT](../model_doc/camembert), [CodeLlama](../model_doc/code_llama),
    [CodeGen](../model_doc/codegen), [CPM-Ant](../model_doc/cpmant), [CTRL](../model_doc/ctrl),
    [Data2VecText](../model_doc/data2vec-text), [ELECTRA](../model_doc/electra), [ERNIE](../model_doc/ernie),
    [Falcon](../model_doc/falcon), [Fuyu](../model_doc/fuyu), [GIT](../model_doc/git),
    [GPT-Sw3](../model_doc/gpt-sw3), [OpenAI GPT-2](../model_doc/gpt2), [GPTBigCode](../model_doc/gpt_bigcode),
    [GPT Neo](../model_doc/gpt_neo), [GPT NeoX](../model_doc/gpt_neox), [GPT NeoX
    Japanese](../model_doc/gpt_neox_japanese), [GPT-J](../model_doc/gptj), [LLaMA](../model_doc/llama),
    [Marian](../model_doc/marian), [mBART](../model_doc/mbart), [MEGA](../model_doc/mega),
    [Megatron-BERT](../model_doc/megatron-bert), [Mistral](../model_doc/mistral),
    [Mixtral](../model_doc/mixtral), [MPT](../model_doc/mpt), [MusicGen](../model_doc/musicgen),
    [MVP](../model_doc/mvp), [OpenLlama](../model_doc/open-llama), [OpenAI GPT](../model_doc/openai-gpt),
    [OPT](../model_doc/opt), [Pegasus](../model_doc/pegasus), [Persimmon](../model_doc/persimmon),
    [Phi](../model_doc/phi), [PLBart](../model_doc/plbart), [ProphetNet](../model_doc/prophetnet),
    [QDQBert](../model_doc/qdqbert), [Qwen2](../model_doc/qwen2), [Reformer](../model_doc/reformer),
    [RemBERT](../model_doc/rembert), [RoBERTa](../model_doc/roberta), [RoBERTa-PreLayerNorm](../model_doc/roberta-prelayernorm),
    [RoCBert](../model_doc/roc_bert), [RoFormer](../model_doc/roformer), [RWKV](../model_doc/rwkv),
    [Speech2Text2](../model_doc/speech_to_text_2), [Transformer-XL](../model_doc/transfo-xl),
    [TrOCR](../model_doc/trocr), [Whisper](../model_doc/whisper), [XGLM](../model_doc/xglm),
    [XLM](../model_doc/xlm), [XLM-ProphetNet](../model_doc/xlm-prophetnet), [XLM-RoBERTa](../model_doc/xlm-roberta),
    [XLM-RoBERTa-XL](../model_doc/xlm-roberta-xl), [XLNet](../model_doc/xlnet), [X-MOD](../model_doc/xmod)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[BART](../model_doc/bart), [BERT](../model_doc/bert), [Bert Generation](../model_doc/bert-generation),
    [BigBird](../model_doc/big_bird), [BigBird-Pegasus](../model_doc/bigbird_pegasus),
    [BioGpt](../model_doc/biogpt), [Blenderbot](../model_doc/blenderbot), [BlenderbotSmall](../model_doc/blenderbot-small),
    [BLOOM](../model_doc/bloom), [CamemBERT](../model_doc/camembert), [CodeLlama](../model_doc/code_llama),
    [CodeGen](../model_doc/codegen), [CPM-Ant](../model_doc/cpmant), [CTRL](../model_doc/ctrl),
    [Data2VecText](../model_doc/data2vec-text), [ELECTRA](../model_doc/electra), [ERNIE](../model_doc/ernie),
    [Falcon](../model_doc/falcon), [Fuyu](../model_doc/fuyu), [GIT](../model_doc/git),
    [GPT-Sw3](../model_doc/gpt-sw3), [OpenAI GPT-2](../model_doc/gpt2), [GPTBigCode](../model_doc/gpt_bigcode),
    [GPT Neo](../model_doc/gpt_neo), [GPT NeoX](../model_doc/gpt_neox), [GPT NeoX
    Japanese](../model_doc/gpt_neox_japanese), [GPT-J](../model_doc/gptj), [LLaMA](../model_doc/llama),
    [Marian](../model_doc/marian), [mBART](../model_doc/mbart), [MEGA](../model_doc/mega),
    [Megatron-BERT](../model_doc/megatron-bert), [Mistral](../model_doc/mistral),
    [Mixtral](../model_doc/mixtral), [MPT](../model_doc/mpt), [MusicGen](../model_doc/musicgen),
    [MVP](../model_doc/mvp), [OpenLlama](../model_doc/open-llama), [OpenAI GPT](../model_doc/openai-gpt),
    [OPT](../model_doc/opt), [Pegasus](../model_doc/pegasus), [Persimmon](../model_doc/persimmon),
    [Phi](../model_doc/phi), [PLBart](../model_doc/plbart), [ProphetNet](../model_doc/prophetnet),
    [QDQBert](../model_doc/qdqbert), [Qwen2](../model_doc/qwen2), [Reformer](../model_doc/reformer),
    [RemBERT](../model_doc/rembert), [RoBERTa](../model_doc/roberta), [RoBERTa-PreLayerNorm](../model_doc/roberta-prelayernorm),
    [RoCBert](../model_doc/roc_bert), [RoFormer](../model_doc/roformer), [RWKV](../model_doc/rwkv),
    [Speech2Text2](../model_doc/speech_to_text_2), [Transformer-XL](../model_doc/transfo-xl),
    [TrOCR](../model_doc/trocr), [Whisper](../model_doc/whisper), [XGLM](../model_doc/xglm),
    [XLM](../model_doc/xlm), [XLM-ProphetNet](../model_doc/xlm-prophetnet), [XLM-RoBERTa](../model_doc/xlm-roberta),
    [XLM-RoBERTa-XL](../model_doc/xlm-roberta-xl), [XLNet](../model_doc/xlnet), [X-MOD](../model_doc/xmod)'
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保您已安装所有必要的库。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We encourage you to log in to your Hugging Face account so you can upload and
    share your model with the community. When prompted, enter your token to log in:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励您登录您的Hugging Face帐户，这样您就可以上传和与社区分享您的模型。在提示时，输入您的令牌以登录：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Load ELI5 dataset
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载ELI5数据集
- en: Start by loading a smaller subset of the r/askscience subset of the ELI5 dataset
    from the 🤗 Datasets library. This’ll give you a chance to experiment and make
    sure everything works before spending more time training on the full dataset.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先加载🤗数据集库中r/askscience子集的ELI5数据集的较小子集。这将让您有机会进行实验，并确保一切正常，然后再花更多时间在完整数据集上进行训练。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Split the dataset’s `train_asks` split into a train and test set with the [train_test_split](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.train_test_split)
    method:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[train_test_split](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.train_test_split)方法将数据集的`train_asks`拆分为训练集和测试集：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then take a look at an example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后看一个例子：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While this may look like a lot, you’re only really interested in the `text`
    field. What’s cool about language modeling tasks is you don’t need labels (also
    known as an unsupervised task) because the next word *is* the label.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这看起来很多，但您实际上只对`text`字段感兴趣。语言建模任务的有趣之处在于您不需要标签（也称为无监督任务），因为下一个词*就是*标签。
- en: Preprocess
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预处理
- en: '[https://www.youtube-nocookie.com/embed/ma1TrR7gE7I](https://www.youtube-nocookie.com/embed/ma1TrR7gE7I)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube-nocookie.com/embed/ma1TrR7gE7I](https://www.youtube-nocookie.com/embed/ma1TrR7gE7I)'
- en: 'The next step is to load a DistilGPT2 tokenizer to process the `text` subfield:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是加载一个DistilGPT2分词器来处理`text`子字段：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You’ll notice from the example above, the `text` field is actually nested inside
    `answers`. This means you’ll need to extract the `text` subfield from its nested
    structure with the [`flatten`](https://huggingface.co/docs/datasets/process#flatten)
    method:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的例子中，您会注意到`text`字段实际上是嵌套在`answers`中的。这意味着您需要使用[`flatten`](https://huggingface.co/docs/datasets/process#flatten)方法从其嵌套结构中提取`text`子字段：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Each subfield is now a separate column as indicated by the `answers` prefix,
    and the `text` field is a list now. Instead of tokenizing each sentence separately,
    convert the list to a string so you can jointly tokenize them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个子字段都是一个单独的列，由`answers`前缀指示，而`text`字段现在是一个列表。不要单独对每个句子进行分词，而是将列表转换为字符串，以便可以联合对它们进行分词。
- en: 'Here is a first preprocessing function to join the list of strings for each
    example and tokenize the result:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于连接每个示例的字符串列表并对结果进行分词的第一个预处理函数：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To apply this preprocessing function over the entire dataset, use the 🤗 Datasets
    [map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)
    method. You can speed up the `map` function by setting `batched=True` to process
    multiple elements of the dataset at once, and increasing the number of processes
    with `num_proc`. Remove any columns you don’t need:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要在整个数据集上应用此预处理函数，请使用🤗数据集的[map](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.map)方法。通过设置`batched=True`以一次处理数据集的多个元素，并使用`num_proc`增加进程数量，可以加快`map`函数的速度。删除您不需要的任何列：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This dataset contains the token sequences, but some of these are longer than
    the maximum input length for the model.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据集包含令牌序列，但其中一些比模型的最大输入长度更长。
- en: You can now use a second preprocessing function to
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以使用第二个预处理函数
- en: concatenate all the sequences
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接所有序列
- en: split the concatenated sequences into shorter chunks defined by `block_size`,
    which should be both shorter than the maximum input length and short enough for
    your GPU RAM.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将连接的序列拆分为由`block_size`定义的较短块，该块应比最大输入长度短且足够短以适应您的GPU RAM。
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Apply the `group_texts` function over the entire dataset:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个数据集上应用`group_texts`函数：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now create a batch of examples using [DataCollatorForLanguageModeling](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DataCollatorForLanguageModeling).
    It’s more efficient to *dynamically pad* the sentences to the longest length in
    a batch during collation, instead of padding the whole dataset to the maximum
    length.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用[DataCollatorForLanguageModeling](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DataCollatorForLanguageModeling)创建一批示例。在整理过程中，将句子动态填充到批次中的最长长度，而不是将整个数据集填充到最大长度。
- en: PytorchHide Pytorch content
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Pytorch隐藏Pytorch内容
- en: 'Use the end-of-sequence token as the padding token and set `mlm=False`. This
    will use the inputs as labels shifted to the right by one element:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用结束序列标记作为填充标记，并设置`mlm=False`。这将使用输入作为标签，向右移动一个元素：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: TensorFlowHide TensorFlow content
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow隐藏TensorFlow内容
- en: 'Use the end-of-sequence token as the padding token and set `mlm=False`. This
    will use the inputs as labels shifted to the right by one element:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用结束序列标记作为填充标记，并设置`mlm=False`。这将使用输入作为标签，向右移动一个元素：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Train
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练
- en: PytorchHide Pytorch content
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Pytorch隐藏Pytorch内容
- en: If you aren’t familiar with finetuning a model with the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    take a look at the [basic tutorial](../training#train-with-pytorch-trainer)!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉使用[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)微调模型，请查看[基本教程](../training#train-with-pytorch-trainer)!
- en: 'You’re ready to start training your model now! Load DistilGPT2 with [AutoModelForCausalLM](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForCausalLM):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以开始训练模型了！使用[AutoModelForCausalLM](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForCausalLM)加载DistilGPT2：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At this point, only three steps remain:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，只剩下三个步骤：
- en: Define your training hyperparameters in [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments).
    The only required parameter is `output_dir` which specifies where to save your
    model. You’ll push this model to the Hub by setting `push_to_hub=True` (you need
    to be signed in to Hugging Face to upload your model).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments)中定义您的训练超参数。唯一必需的参数是`output_dir`，指定保存模型的位置。通过设置`push_to_hub=True`将此模型推送到Hub（您需要登录Hugging
    Face才能上传模型）。
- en: Pass the training arguments to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    along with the model, datasets, and data collator.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将训练参数传递给[Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)，以及模型、数据集和数据整理器。
- en: Call [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)
    to finetune your model.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用[train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)来微调您的模型。
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once training is completed, use the [evaluate()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.evaluate)
    method to evaluate your model and get its perplexity:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 训练完成后，使用[evaluate()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.evaluate)方法评估您的模型并获取其困惑度：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then share your model to the Hub with the [push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)
    method so everyone can use your model:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用[push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)方法将您的模型分享到Hub，这样每个人都可以使用您的模型：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: TensorFlowHide TensorFlow content
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow隐藏 TensorFlow内容
- en: If you aren’t familiar with finetuning a model with Keras, take a look at the
    [basic tutorial](../training#train-a-tensorflow-model-with-keras)!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉如何使用Keras微调模型，请查看[基础教程](../training#train-a-tensorflow-model-with-keras)！
- en: 'To finetune a model in TensorFlow, start by setting up an optimizer function,
    learning rate schedule, and some training hyperparameters:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要在TensorFlow中微调模型，请首先设置优化器函数、学习率调度和一些训练超参数：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then you can load DistilGPT2 with [TFAutoModelForCausalLM](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForCausalLM):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用[TFAutoModelForCausalLM](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForCausalLM)加载DistilGPT2：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Convert your datasets to the `tf.data.Dataset` format with [prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[prepare_tf_dataset()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.TFPreTrainedModel.prepare_tf_dataset)将数据集转换为`tf.data.Dataset`格式：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Configure the model for training with [`compile`](https://keras.io/api/models/model_training_apis/#compile-method).
    Note that Transformers models all have a default task-relevant loss function,
    so you don’t need to specify one unless you want to:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`compile`](https://keras.io/api/models/model_training_apis/#compile-method)为训练配置模型。请注意，Transformers模型都有一个默认的与任务相关的损失函数，因此除非您想要指定一个，否则不需要：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This can be done by specifying where to push your model and tokenizer in the
    [PushToHubCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.PushToHubCallback):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过在[PushToHubCallback](/docs/transformers/v4.37.2/en/main_classes/keras_callbacks#transformers.PushToHubCallback)中指定将模型和标记器推送到何处来完成：
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, you’re ready to start training your model! Call [`fit`](https://keras.io/api/models/model_training_apis/#fit-method)
    with your training and validation datasets, the number of epochs, and your callback
    to finetune the model:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您已经准备好开始训练您的模型了！使用[`fit`](https://keras.io/api/models/model_training_apis/#fit-method)调用您的训练和验证数据集，时代数量以及微调模型的回调：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once training is completed, your model is automatically uploaded to the Hub
    so everyone can use it!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 训练完成后，您的模型会自动上传到Hub，这样每个人都可以使用它！
- en: For a more in-depth example of how to finetune a model for causal language modeling,
    take a look at the corresponding [PyTorch notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/language_modeling.ipynb)
    or [TensorFlow notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/language_modeling-tf.ipynb).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何为因果语言建模微调模型的更深入示例，请查看相应的[PyTorch笔记本](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/language_modeling.ipynb)或[TensorFlow笔记本](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/language_modeling-tf.ipynb)。
- en: Inference
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推理
- en: Great, now that you’ve finetuned a model, you can use it for inference!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在您已经微调了一个模型，可以用于推理！
- en: 'Come up with a prompt you’d like to generate text from:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 想出一个您想要从中生成文本的提示：
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The simplest way to try out your finetuned model for inference is to use it
    in a [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline).
    Instantiate a `pipeline` for text generation with your model, and pass your text
    to it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用[pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline)来进行推理是尝试微调模型的最简单方法。实例化一个用于文本生成的`pipeline`，并将文本传递给它：
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: PytorchHide Pytorch content
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Pytorch隐藏 Pytorch内容
- en: 'Tokenize the text and return the `input_ids` as PyTorch tensors:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对文本进行标记化，并将`input_ids`返回为PyTorch张量：
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Use the [generate()](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.GenerationMixin.generate)
    method to generate text. For more details about the different text generation
    strategies and parameters for controlling generation, check out the [Text generation
    strategies](../generation_strategies) page.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[generate()](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.GenerationMixin.generate)方法生成文本。有关不同文本生成策略和控制生成的参数的更多详细信息，请查看[文本生成策略](../generation_strategies)页面。
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Decode the generated token ids back into text:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成的标记ID解码回文本：
- en: '[PRE27]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: TensorFlowHide TensorFlow content
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow隐藏 TensorFlow内容
- en: 'Tokenize the text and return the `input_ids` as TensorFlow tensors:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对文本进行标记化，并将`input_ids`返回为TensorFlow张量：
- en: '[PRE28]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Use the [generate()](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.TFGenerationMixin.generate)
    method to create the summarization. For more details about the different text
    generation strategies and parameters for controlling generation, check out the
    [Text generation strategies](../generation_strategies) page.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[generate()](/docs/transformers/v4.37.2/en/main_classes/text_generation#transformers.TFGenerationMixin.generate)方法创建摘要。有关不同文本生成策略和控制生成的参数的更多详细信息，请查看[文本生成策略](../generation_strategies)页面。
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Decode the generated token ids back into text:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成的标记ID解码回文本：
- en: '[PRE30]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
