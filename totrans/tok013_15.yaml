- en: Normalizers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/tokenizers/api/normalizers](https://huggingface.co/docs/tokenizers/api/normalizers)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 
    
    
    
    
    
    
    
    PythonRustNode
  prefs: []
  type: TYPE_NORMAL
- en: BertNormalizer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.BertNormalizer`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`clean_text` (`bool`, *optional*, defaults to `True`) — Whether to clean the
    text, by removing any control characters and replacing all whitespaces by the
    classic one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`handle_chinese_chars` (`bool`, *optional*, defaults to `True`) — Whether to
    handle chinese chars by putting spaces around them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strip_accents` (`bool`, *optional*) — Whether to strip all accents. If this
    option is not specified (ie == None), then it will be determined by the value
    for *lowercase* (as in the original Bert).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lowercase` (`bool`, *optional*, defaults to `True`) — Whether to lowercase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BertNormalizer
  prefs: []
  type: TYPE_NORMAL
- en: Takes care of normalizing raw text before giving it to a Bert model. This includes
    cleaning the text, handling accents, chinese chars and lowercasing
  prefs: []
  type: TYPE_NORMAL
- en: Lowercase
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.Lowercase`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Lowercase Normalizer
  prefs: []
  type: TYPE_NORMAL
- en: NFC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.NFC`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: NFC Unicode Normalizer
  prefs: []
  type: TYPE_NORMAL
- en: NFD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.NFD`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: NFD Unicode Normalizer
  prefs: []
  type: TYPE_NORMAL
- en: NFKC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.NFKC`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: NFKC Unicode Normalizer
  prefs: []
  type: TYPE_NORMAL
- en: NFKD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.NFKD`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: NFKD Unicode Normalizer
  prefs: []
  type: TYPE_NORMAL
- en: Nmt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.Nmt`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Nmt normalizer
  prefs: []
  type: TYPE_NORMAL
- en: Normalizer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.Normalizer`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Base class for all normalizers
  prefs: []
  type: TYPE_NORMAL
- en: This class is not supposed to be instantiated directly. Instead, any implementation
    of a Normalizer will return an instance of this class when instantiated.
  prefs: []
  type: TYPE_NORMAL
- en: '#### `normalize`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`normalized` (`NormalizedString`) — The normalized string on which to apply
    this [Normalizer](/docs/tokenizers/v0.13.4.rc2/en/api/normalizers#tokenizers.normalizers.Normalizer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Normalize a `NormalizedString` in-place
  prefs: []
  type: TYPE_NORMAL
- en: This method allows to modify a `NormalizedString` to keep track of the alignment
    information. If you just want to see the result of the normalization on a raw
    string, you can use `normalize_str()`
  prefs: []
  type: TYPE_NORMAL
- en: '#### `normalize_str`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`sequence` (`str`) — A string to normalize'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '`str`'
  prefs: []
  type: TYPE_NORMAL
- en: A string after normalization
  prefs: []
  type: TYPE_NORMAL
- en: Normalize the given string
  prefs: []
  type: TYPE_NORMAL
- en: This method provides a way to visualize the effect of a [Normalizer](/docs/tokenizers/v0.13.4.rc2/en/api/normalizers#tokenizers.normalizers.Normalizer)
    but it does not keep track of the alignment information. If you need to get/convert
    offsets, you can use `normalize()`
  prefs: []
  type: TYPE_NORMAL
- en: Precompiled
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.Precompiled`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Precompiled normalizer Don’t use manually it is used for compatiblity for SentencePiece.
  prefs: []
  type: TYPE_NORMAL
- en: Replace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.Replace`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Replace normalizer
  prefs: []
  type: TYPE_NORMAL
- en: Sequence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.Sequence`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '`normalizers` (`List[Normalizer]`) — A list of Normalizer to be run as a sequence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows concatenating multiple other Normalizer as a Sequence. All the normalizers
    run in sequence in the given order
  prefs: []
  type: TYPE_NORMAL
- en: Strip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.Strip`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Strip normalizer
  prefs: []
  type: TYPE_NORMAL
- en: StripAccents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class tokenizers.normalizers.StripAccents`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: StripAccents normalizer
  prefs: []
  type: TYPE_NORMAL
