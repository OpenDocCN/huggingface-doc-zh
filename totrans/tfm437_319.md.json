["```py\n>>> from transformers import UniSpeechConfig, UniSpeechModel\n\n>>> # Initializing a UniSpeech facebook/unispeech-base-960h style configuration\n>>> configuration = UniSpeechConfig()\n\n>>> # Initializing a model (with random weights) from the facebook/unispeech-base-960h style configuration\n>>> model = UniSpeechModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoProcessor, UniSpeechModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"hf-internal-testing/librispeech_asr_demo\", \"clean\", split=\"validation\")\n>>> dataset = dataset.sort(\"id\")\n>>> sampling_rate = dataset.features[\"audio\"].sampling_rate\n\n>>> processor = AutoProcessor.from_pretrained(\"patrickvonplaten/unispeech-large-1500h-cv-timit\")\n>>> model = UniSpeechModel.from_pretrained(\"patrickvonplaten/unispeech-large-1500h-cv-timit\")\n\n>>> # audio file is decoded on the fly\n>>> inputs = processor(dataset[0][\"audio\"][\"array\"], sampling_rate=sampling_rate, return_tensors=\"pt\")\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 292, 1024]\n```", "```py\n>>> from transformers import AutoProcessor, UniSpeechForCTC\n>>> from datasets import load_dataset\n>>> import torch\n\n>>> dataset = load_dataset(\"hf-internal-testing/librispeech_asr_demo\", \"clean\", split=\"validation\")\n>>> dataset = dataset.sort(\"id\")\n>>> sampling_rate = dataset.features[\"audio\"].sampling_rate\n\n>>> processor = AutoProcessor.from_pretrained(\"patrickvonplaten/unispeech-large-1500h-cv-timit\")\n>>> model = UniSpeechForCTC.from_pretrained(\"patrickvonplaten/unispeech-large-1500h-cv-timit\")\n\n>>> # audio file is decoded on the fly\n>>> inputs = processor(dataset[0][\"audio\"][\"array\"], sampling_rate=sampling_rate, return_tensors=\"pt\")\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n>>> predicted_ids = torch.argmax(logits, dim=-1)\n\n>>> # transcribe speech\n>>> transcription = processor.batch_decode(predicted_ids)\n>>> transcription[0]\n'mister quilter is the apposl of the midle classes and weare glad to welcom his gosepl'\n\n>>> inputs[\"labels\"] = processor(text=dataset[0][\"text\"], return_tensors=\"pt\").input_ids\n\n>>> # compute loss\n>>> loss = model(**inputs).loss\n>>> round(loss.item(), 2)\n17.17\n```", "```py\n>>> from transformers import AutoFeatureExtractor, UniSpeechForSequenceClassification\n>>> from datasets import load_dataset\n>>> import torch\n\n>>> dataset = load_dataset(\"hf-internal-testing/librispeech_asr_demo\", \"clean\", split=\"validation\")\n>>> dataset = dataset.sort(\"id\")\n>>> sampling_rate = dataset.features[\"audio\"].sampling_rate\n\n>>> feature_extractor = AutoFeatureExtractor.from_pretrained(\"patrickvonplaten/unispeech-large-1500h-cv-timit\")\n>>> model = UniSpeechForSequenceClassification.from_pretrained(\"patrickvonplaten/unispeech-large-1500h-cv-timit\")\n\n>>> # audio file is decoded on the fly\n>>> inputs = feature_extractor(dataset[0][\"audio\"][\"array\"], sampling_rate=sampling_rate, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_ids = torch.argmax(logits, dim=-1).item()\n>>> predicted_label = model.config.id2label[predicted_class_ids]\n\n>>> # compute loss - target_label is e.g. \"down\"\n>>> target_label = model.config.id2label[0]\n>>> inputs[\"labels\"] = torch.tensor([model.config.label2id[target_label]])\n>>> loss = model(**inputs).loss\n```", "```py\n>>> import torch\n>>> from transformers import AutoFeatureExtractor, UniSpeechForPreTraining\n\n>>> feature_extractor = AutoFeatureExtractor.from_pretrained(\"microsoft/unispeech-large-1500h-cv\")\n>>> model = UniSpeechForPreTraining.from_pretrained(\"microsoft/unispeech-large-1500h-cv\")\n>>> # TODO: Add full pretraining example\n```"]