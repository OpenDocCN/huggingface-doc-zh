- en: Image classification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/tasks/image_classification](https://huggingface.co/docs/transformers/v4.37.2/en/tasks/image_classification)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube-nocookie.com/embed/tjAIM7BOYhw](https://www.youtube-nocookie.com/embed/tjAIM7BOYhw)'
  prefs: []
  type: TYPE_NORMAL
- en: Image classification assigns a label or class to an image. Unlike text or audio
    classification, the inputs are the pixel values that comprise an image. There
    are many applications for image classification, such as detecting damage after
    a natural disaster, monitoring crop health, or helping screen medical images for
    signs of disease.
  prefs: []
  type: TYPE_NORMAL
- en: 'This guide illustrates how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tune [ViT](model_doc/vit) on the [Food-101](https://huggingface.co/datasets/food101)
    dataset to classify a food item in an image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use your fine-tuned model for inference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The task illustrated in this tutorial is supported by the following model architectures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[BEiT](../model_doc/beit), [BiT](../model_doc/bit), [ConvNeXT](../model_doc/convnext),
    [ConvNeXTV2](../model_doc/convnextv2), [CvT](../model_doc/cvt), [Data2VecVision](../model_doc/data2vec-vision),
    [DeiT](../model_doc/deit), [DiNAT](../model_doc/dinat), [DINOv2](../model_doc/dinov2),
    [EfficientFormer](../model_doc/efficientformer), [EfficientNet](../model_doc/efficientnet),
    [FocalNet](../model_doc/focalnet), [ImageGPT](../model_doc/imagegpt), [LeViT](../model_doc/levit),
    [MobileNetV1](../model_doc/mobilenet_v1), [MobileNetV2](../model_doc/mobilenet_v2),
    [MobileViT](../model_doc/mobilevit), [MobileViTV2](../model_doc/mobilevitv2),
    [NAT](../model_doc/nat), [Perceiver](../model_doc/perceiver), [PoolFormer](../model_doc/poolformer),
    [PVT](../model_doc/pvt), [RegNet](../model_doc/regnet), [ResNet](../model_doc/resnet),
    [SegFormer](../model_doc/segformer), [SwiftFormer](../model_doc/swiftformer),
    [Swin Transformer](../model_doc/swin), [Swin Transformer V2](../model_doc/swinv2),
    [VAN](../model_doc/van), [ViT](../model_doc/vit), [ViT Hybrid](../model_doc/vit_hybrid),
    [ViTMSN](../model_doc/vit_msn)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you begin, make sure you have all the necessary libraries installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We encourage you to log in to your Hugging Face account to upload and share
    your model with the community. When prompted, enter your token to log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Load Food-101 dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start by loading a smaller subset of the Food-101 dataset from the ðŸ¤— Datasets
    library. This will give you a chance to experiment and make sure everything works
    before spending more time training on the full dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Split the datasetâ€™s `train` split into a train and test set with the [train_test_split](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.train_test_split)
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Each example in the dataset has two fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image`: a PIL image of the food item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`label`: the label class of the food item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To make it easier for the model to get the label name from the label id, create
    a dictionary that maps the label name to an integer and vice versa:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can convert the label id to a label name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Preprocess
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is to load a ViT image processor to process the image into a
    tensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: Apply some image transformations to the images to make the model more robust
    against overfitting. Here youâ€™ll use torchvisionâ€™s [`transforms`](https://pytorch.org/vision/stable/transforms.html)
    module, but you can also use any image library you like.
  prefs: []
  type: TYPE_NORMAL
- en: 'Crop a random part of the image, resize it, and normalize it with the image
    mean and standard deviation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a preprocessing function to apply the transforms and return the
    `pixel_values` - the inputs to the model - of the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To apply the preprocessing function over the entire dataset, use ðŸ¤— Datasets
    [with_transform](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.with_transform)
    method. The transforms are applied on the fly when you load an element of the
    dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now create a batch of examples using [DefaultDataCollator](/docs/transformers/v4.37.2/en/main_classes/data_collator#transformers.DefaultDataCollator).
    Unlike other data collators in ðŸ¤— Transformers, the `DefaultDataCollator` does
    not apply additional preprocessing such as padding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: To avoid overfitting and to make the model more robust, add some data augmentation
    to the training part of the dataset. Here we use Keras preprocessing layers to
    define the transformations for the training data (includes data augmentation),
    and transformations for the validation data (only center cropping, resizing and
    normalizing). You can use `tf.image`or any other library you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Next, create functions to apply appropriate transformations to a batch of images,
    instead of one image at a time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Use ðŸ¤— Datasets [set_transform](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.set_transform)
    to apply the transformations on the fly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As a final preprocessing step, create a batch of examples using `DefaultDataCollator`.
    Unlike other data collators in ðŸ¤— Transformers, the `DefaultDataCollator` does
    not apply additional preprocessing, such as padding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Evaluate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Including a metric during training is often helpful for evaluating your modelâ€™s
    performance. You can quickly load an evaluation method with the ðŸ¤— [Evaluate](https://huggingface.co/docs/evaluate/index)
    library. For this task, load the [accuracy](https://huggingface.co/spaces/evaluate-metric/accuracy)
    metric (see the ðŸ¤— Evaluate [quick tour](https://huggingface.co/docs/evaluate/a_quick_tour)
    to learn more about how to load and compute a metric):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a function that passes your predictions and labels to `compute`
    to calculate the accuracy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Your `compute_metrics` function is ready to go now, and youâ€™ll return to it
    when you set up your training.
  prefs: []
  type: TYPE_NORMAL
- en: Train
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: If you arenâ€™t familiar with finetuning a model with the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer),
    take a look at the basic tutorial [here](../training#train-with-pytorch-trainer)!
  prefs: []
  type: TYPE_NORMAL
- en: 'Youâ€™re ready to start training your model now! Load ViT with [AutoModelForImageClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoModelForImageClassification).
    Specify the number of labels along with the number of expected labels, and the
    label mappings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, only three steps remain:'
  prefs: []
  type: TYPE_NORMAL
- en: Define your training hyperparameters in [TrainingArguments](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.TrainingArguments).
    It is important you donâ€™t remove unused columns because thatâ€™ll drop the `image`
    column. Without the `image` column, you canâ€™t create `pixel_values`. Set `remove_unused_columns=False`
    to prevent this behavior! The only other required parameter is `output_dir` which
    specifies where to save your model. Youâ€™ll push this model to the Hub by setting
    `push_to_hub=True` (you need to be signed in to Hugging Face to upload your model).
    At the end of each epoch, the [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    will evaluate the accuracy and save the training checkpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the training arguments to [Trainer](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer)
    along with the model, dataset, tokenizer, data collator, and `compute_metrics`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call [train()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.train)
    to finetune your model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Once training is completed, share your model to the Hub with the [push_to_hub()](/docs/transformers/v4.37.2/en/main_classes/trainer#transformers.Trainer.push_to_hub)
    method so everyone can use your model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: If you are unfamiliar with fine-tuning a model with Keras, check out the [basic
    tutorial](./training#train-a-tensorflow-model-with-keras) first!
  prefs: []
  type: TYPE_NORMAL
- en: 'To fine-tune a model in TensorFlow, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the training hyperparameters, and set up an optimizer and a learning
    rate schedule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instantiate a pre-trained model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Convert a ðŸ¤— Dataset to a `tf.data.Dataset`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile your model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add callbacks and use the `fit()` method to run the training.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload your model to ðŸ¤— Hub to share with the community.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start by defining the hyperparameters, optimizer and learning rate schedule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, load ViT with [TFAutoModelForImageClassification](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.TFAutoModelForImageClassification)
    along with the label mappings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert your datasets to the `tf.data.Dataset` format using the [to_tf_dataset](https://huggingface.co/docs/datasets/v2.16.1/en/package_reference/main_classes#datasets.Dataset.to_tf_dataset)
    and your `data_collator`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the model for training with `compile()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To compute the accuracy from the predictions and push your model to the ðŸ¤— Hub,
    use [Keras callbacks](../main_classes/keras_callbacks). Pass your `compute_metrics`
    function to [KerasMetricCallback](../main_classes/keras_callbacks#transformers.KerasMetricCallback),
    and use the [PushToHubCallback](../main_classes/keras_callbacks#transformers.PushToHubCallback)
    to upload the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, you are ready to train your model! Call `fit()` with your training
    and validation datasets, the number of epochs, and your callbacks to fine-tune
    the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You have fine-tuned your model and shared it on the ðŸ¤— Hub.
    You can now use it for inference!
  prefs: []
  type: TYPE_NORMAL
- en: For a more in-depth example of how to finetune a model for image classification,
    take a look at the corresponding [PyTorch notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/image_classification.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: Inference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Great, now that youâ€™ve fine-tuned a model, you can use it for inference!
  prefs: []
  type: TYPE_NORMAL
- en: 'Load an image youâ€™d like to run inference on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![image of beignets](../Images/c05aba9fec7ae7783c6fb3a48b107e6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The simplest way to try out your finetuned model for inference is to use it
    in a [pipeline()](/docs/transformers/v4.37.2/en/main_classes/pipelines#transformers.pipeline).
    Instantiate a `pipeline` for image classification with your model, and pass your
    image to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also manually replicate the results of the `pipeline` if youâ€™d like:'
  prefs: []
  type: TYPE_NORMAL
- en: PytorchHide Pytorch content
  prefs: []
  type: TYPE_NORMAL
- en: 'Load an image processor to preprocess the image and return the `input` as PyTorch
    tensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass your inputs to the model and return the logits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the predicted label with the highest probability, and use the modelâ€™s `id2label`
    mapping to convert it to a label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: TensorFlowHide TensorFlow content
  prefs: []
  type: TYPE_NORMAL
- en: 'Load an image processor to preprocess the image and return the `input` as TensorFlow
    tensors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass your inputs to the model and return the logits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the predicted label with the highest probability, and use the modelâ€™s `id2label`
    mapping to convert it to a label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
