["```py\n>>> from transformers import EfficientFormerConfig, EfficientFormerModel\n\n>>> # Initializing a EfficientFormer efficientformer-l1 style configuration\n>>> configuration = EfficientFormerConfig()\n\n>>> # Initializing a EfficientFormerModel (with random weights) from the efficientformer-l3 style configuration\n>>> model = EfficientFormerModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import AutoImageProcessor, EfficientFormerModel\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"snap-research/efficientformer-l1-300\")\n>>> model = EfficientFormerModel.from_pretrained(\"snap-research/efficientformer-l1-300\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 49, 448]\n```", "```py\n>>> from transformers import AutoImageProcessor, EfficientFormerForImageClassification\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"snap-research/efficientformer-l1-300\")\n>>> model = EfficientFormerForImageClassification.from_pretrained(\"snap-research/efficientformer-l1-300\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = logits.argmax(-1).item()\n>>> print(model.config.id2label[predicted_label])\nEgyptian cat\n```", "```py\n>>> from transformers import AutoImageProcessor, EfficientFormerForImageClassificationWithTeacher\n>>> import torch\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"snap-research/efficientformer-l1-300\")\n>>> model = EfficientFormerForImageClassificationWithTeacher.from_pretrained(\"snap-research/efficientformer-l1-300\")\n\n>>> inputs = image_processor(image, return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = logits.argmax(-1).item()\n>>> print(model.config.id2label[predicted_label])\nEgyptian cat\n```", "```py\n>>> from transformers import AutoImageProcessor, TFEfficientFormerModel\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"snap-research/efficientformer-l1-300\")\n>>> model = TFEfficientFormerModel.from_pretrained(\"snap-research/efficientformer-l1-300\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n>>> list(last_hidden_states.shape)\n[1, 49, 448]\n```", "```py\n>>> from transformers import AutoImageProcessor, TFEfficientFormerForImageClassification\n>>> import tensorflow as tf\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"snap-research/efficientformer-l1-300\")\n>>> model = TFEfficientFormerForImageClassification.from_pretrained(\"snap-research/efficientformer-l1-300\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = int(tf.math.argmax(logits, axis=-1))\n>>> print(model.config.id2label[predicted_label])\nLABEL_281\n```", "```py\n>>> from transformers import AutoImageProcessor, TFEfficientFormerForImageClassificationWithTeacher\n>>> import tensorflow as tf\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\"huggingface/cats-image\")\n>>> image = dataset[\"test\"][\"image\"][0]\n\n>>> image_processor = AutoImageProcessor.from_pretrained(\"snap-research/efficientformer-l1-300\")\n>>> model = TFEfficientFormerForImageClassificationWithTeacher.from_pretrained(\"snap-research/efficientformer-l1-300\")\n\n>>> inputs = image_processor(image, return_tensors=\"tf\")\n>>> logits = model(**inputs).logits\n\n>>> # model predicts one of the 1000 ImageNet classes\n>>> predicted_label = int(tf.math.argmax(logits, axis=-1))\n>>> print(model.config.id2label[predicted_label])\nLABEL_281\n```"]