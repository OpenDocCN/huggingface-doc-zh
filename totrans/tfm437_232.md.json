["```py\n>>> from transformers import RoFormerModel, RoFormerConfig\n\n>>> # Initializing a RoFormer junnyu/roformer_chinese_base style configuration\n>>> configuration = RoFormerConfig()\n\n>>> # Initializing a model (with random weights) from the junnyu/roformer_chinese_base style configuration\n>>> model = RoFormerModel(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import RoFormerTokenizer\n\n>>> tokenizer = RoFormerTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> tokenizer.tokenize(\"\u4eca\u5929\u5929\u6c14\u975e\u5e38\u597d\u3002\")\n['\u4eca', '\u5929', '\u5929', '\u6c14', '\u975e\u5e38', '\u597d', '\u3002']\n```", "```py\n0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1\n| first sequence    | second sequence |\n```", "```py\n>>> from transformers import RoFormerTokenizerFast\n\n>>> tokenizer = RoFormerTokenizerFast.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> tokenizer.tokenize(\"\u4eca\u5929\u5929\u6c14\u975e\u5e38\u597d\u3002\")\n['\u4eca', '\u5929', '\u5929', '\u6c14', '\u975e\u5e38', '\u597d', '\u3002']\n```", "```py\n>>> from transformers import AutoTokenizer, RoFormerModel\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = RoFormerModel.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, RoFormerForCausalLM, RoFormerConfig\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> config = RoFormerConfig.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> config.is_decoder = True\n>>> model = RoFormerForCausalLM.from_pretrained(\"junnyu/roformer_chinese_base\", config=config)\n\n>>> inputs = tokenizer(\"\u4eca\u5929\u5929\u6c14\u975e\u5e38\u597d\u3002\", return_tensors=\"pt\")\n>>> outputs = model(**inputs)\n\n>>> prediction_logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, RoFormerForMaskedLM\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = RoFormerForMaskedLM.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"The capital of France is [MASK].\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> # retrieve index of [MASK]\n>>> mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[0].nonzero(as_tuple=True)[0]\n\n>>> predicted_token_id = logits[0, mask_token_index].argmax(axis=-1)\n\n>>> labels = tokenizer(\"The capital of France is Paris.\", return_tensors=\"pt\")[\"input_ids\"]\n>>> # mask labels of non-[MASK] tokens\n>>> labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -100)\n\n>>> outputs = model(**inputs, labels=labels)\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, RoFormerForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = RoFormerForSequenceClassification.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_id = logits.argmax().item()\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = RoFormerForSequenceClassification.from_pretrained(\"junnyu/roformer_chinese_base\", num_labels=num_labels)\n\n>>> labels = torch.tensor([1])\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> import torch\n>>> from transformers import AutoTokenizer, RoFormerForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = RoFormerForSequenceClassification.from_pretrained(\"junnyu/roformer_chinese_base\", problem_type=\"multi_label_classification\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"pt\")\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_class_ids = torch.arange(0, logits.shape[-1])[torch.sigmoid(logits).squeeze(dim=0) > 0.5]\n\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = RoFormerForSequenceClassification.from_pretrained(\n...     \"junnyu/roformer_chinese_base\", num_labels=num_labels, problem_type=\"multi_label_classification\"\n... )\n\n>>> labels = torch.sum(\n...     torch.nn.functional.one_hot(predicted_class_ids[None, :].clone(), num_classes=num_labels), dim=1\n... ).to(torch.float)\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, RoFormerForMultipleChoice\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = RoFormerForMultipleChoice.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> prompt = \"In Italy, pizza served in formal settings, such as at a restaurant, is presented unsliced.\"\n>>> choice0 = \"It is eaten with a fork and a knife.\"\n>>> choice1 = \"It is eaten while held in the hand.\"\n>>> labels = torch.tensor(0).unsqueeze(0)  # choice0 is correct (according to Wikipedia ;)), batch size 1\n\n>>> encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors=\"pt\", padding=True)\n>>> outputs = model(**{k: v.unsqueeze(0) for k, v in encoding.items()}, labels=labels)  # batch size is 1\n\n>>> # the linear classifier still needs to be trained\n>>> loss = outputs.loss\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, RoFormerForTokenClassification\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = RoFormerForTokenClassification.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\n...     \"HuggingFace is a company based in Paris and New York\", add_special_tokens=False, return_tensors=\"pt\"\n... )\n\n>>> with torch.no_grad():\n...     logits = model(**inputs).logits\n\n>>> predicted_token_class_ids = logits.argmax(-1)\n\n>>> # Note that tokens are classified rather then input words which means that\n>>> # there might be more predicted token classes than words.\n>>> # Multiple token classes might account for the same word\n>>> predicted_tokens_classes = [model.config.id2label[t.item()] for t in predicted_token_class_ids[0]]\n\n>>> labels = predicted_token_class_ids\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, RoFormerForQuestionAnswering\n>>> import torch\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = RoFormerForQuestionAnswering.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> question, text = \"Who was Jim Henson?\", \"Jim Henson was a nice puppet\"\n\n>>> inputs = tokenizer(question, text, return_tensors=\"pt\")\n>>> with torch.no_grad():\n...     outputs = model(**inputs)\n\n>>> answer_start_index = outputs.start_logits.argmax()\n>>> answer_end_index = outputs.end_logits.argmax()\n\n>>> predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]\n\n>>> # target is \"nice puppet\"\n>>> target_start_index = torch.tensor([14])\n>>> target_end_index = torch.tensor([15])\n\n>>> outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)\n>>> loss = outputs.loss\n```", "```py\n>>> from transformers import AutoTokenizer, TFRoFormerModel\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = TFRoFormerModel.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"tf\")\n>>> outputs = model(inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, TFRoFormerForMaskedLM\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = TFRoFormerForMaskedLM.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"The capital of France is [MASK].\", return_tensors=\"tf\")\n>>> logits = model(**inputs).logits\n\n>>> # retrieve index of [MASK]\n>>> mask_token_index = tf.where((inputs.input_ids == tokenizer.mask_token_id)[0])\n>>> selected_logits = tf.gather_nd(logits[0], indices=mask_token_index)\n\n>>> predicted_token_id = tf.math.argmax(selected_logits, axis=-1)\n```", "```py\n>>> labels = tokenizer(\"The capital of France is Paris.\", return_tensors=\"tf\")[\"input_ids\"]\n>>> # mask labels of non-[MASK] tokens\n>>> labels = tf.where(inputs.input_ids == tokenizer.mask_token_id, labels, -100)\n\n>>> outputs = model(**inputs, labels=labels)\n```", "```py\n>>> from transformers import AutoTokenizer, TFRoFormerForCausalLM\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = TFRoFormerForCausalLM.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"tf\")\n>>> outputs = model(inputs)\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, TFRoFormerForSequenceClassification\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = TFRoFormerForSequenceClassification.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"tf\")\n\n>>> logits = model(**inputs).logits\n\n>>> predicted_class_id = int(tf.math.argmax(logits, axis=-1)[0])\n```", "```py\n>>> # To train a model on `num_labels` classes, you can pass `num_labels=num_labels` to `.from_pretrained(...)`\n>>> num_labels = len(model.config.id2label)\n>>> model = TFRoFormerForSequenceClassification.from_pretrained(\"junnyu/roformer_chinese_base\", num_labels=num_labels)\n\n>>> labels = tf.constant(1)\n>>> loss = model(**inputs, labels=labels).loss\n```", "```py\n>>> from transformers import AutoTokenizer, TFRoFormerForMultipleChoice\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = TFRoFormerForMultipleChoice.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> prompt = \"In Italy, pizza served in formal settings, such as at a restaurant, is presented unsliced.\"\n>>> choice0 = \"It is eaten with a fork and a knife.\"\n>>> choice1 = \"It is eaten while held in the hand.\"\n\n>>> encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors=\"tf\", padding=True)\n>>> inputs = {k: tf.expand_dims(v, 0) for k, v in encoding.items()}\n>>> outputs = model(inputs)  # batch size is 1\n\n>>> # the linear classifier still needs to be trained\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, TFRoFormerForTokenClassification\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = TFRoFormerForTokenClassification.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\n...     \"HuggingFace is a company based in Paris and New York\", add_special_tokens=False, return_tensors=\"tf\"\n... )\n\n>>> logits = model(**inputs).logits\n>>> predicted_token_class_ids = tf.math.argmax(logits, axis=-1)\n\n>>> # Note that tokens are classified rather then input words which means that\n>>> # there might be more predicted token classes than words.\n>>> # Multiple token classes might account for the same word\n>>> predicted_tokens_classes = [model.config.id2label[t] for t in predicted_token_class_ids[0].numpy().tolist()]\n```", "```py\n>>> labels = predicted_token_class_ids\n>>> loss = tf.math.reduce_mean(model(**inputs, labels=labels).loss)\n```", "```py\n>>> from transformers import AutoTokenizer, TFRoFormerForQuestionAnswering\n>>> import tensorflow as tf\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = TFRoFormerForQuestionAnswering.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> question, text = \"Who was Jim Henson?\", \"Jim Henson was a nice puppet\"\n\n>>> inputs = tokenizer(question, text, return_tensors=\"tf\")\n>>> outputs = model(**inputs)\n\n>>> answer_start_index = int(tf.math.argmax(outputs.start_logits, axis=-1)[0])\n>>> answer_end_index = int(tf.math.argmax(outputs.end_logits, axis=-1)[0])\n\n>>> predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]\n```", "```py\n>>> # target is \"nice puppet\"\n>>> target_start_index = tf.constant([14])\n>>> target_end_index = tf.constant([15])\n\n>>> outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)\n>>> loss = tf.math.reduce_mean(outputs.loss)\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxRoFormerModel\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = FlaxRoFormerModel.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"jax\")\n>>> outputs = model(**inputs)\n\n>>> last_hidden_states = outputs.last_hidden_state\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxRoFormerForMaskedLM\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = FlaxRoFormerForMaskedLM.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"The capital of France is [MASK].\", return_tensors=\"jax\")\n\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxRoFormerForSequenceClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = FlaxRoFormerForSequenceClassification.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"jax\")\n\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxRoFormerForMultipleChoice\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = FlaxRoFormerForMultipleChoice.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> prompt = \"In Italy, pizza served in formal settings, such as at a restaurant, is presented unsliced.\"\n>>> choice0 = \"It is eaten with a fork and a knife.\"\n>>> choice1 = \"It is eaten while held in the hand.\"\n\n>>> encoding = tokenizer([prompt, prompt], [choice0, choice1], return_tensors=\"jax\", padding=True)\n>>> outputs = model(**{k: v[None, :] for k, v in encoding.items()})\n\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxRoFormerForTokenClassification\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = FlaxRoFormerForTokenClassification.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> inputs = tokenizer(\"Hello, my dog is cute\", return_tensors=\"jax\")\n\n>>> outputs = model(**inputs)\n>>> logits = outputs.logits\n```", "```py\n>>> from transformers import AutoTokenizer, FlaxRoFormerForQuestionAnswering\n\n>>> tokenizer = AutoTokenizer.from_pretrained(\"junnyu/roformer_chinese_base\")\n>>> model = FlaxRoFormerForQuestionAnswering.from_pretrained(\"junnyu/roformer_chinese_base\")\n\n>>> question, text = \"Who was Jim Henson?\", \"Jim Henson was a nice puppet\"\n>>> inputs = tokenizer(question, text, return_tensors=\"jax\")\n\n>>> outputs = model(**inputs)\n>>> start_scores = outputs.start_logits\n>>> end_scores = outputs.end_logits\n```"]