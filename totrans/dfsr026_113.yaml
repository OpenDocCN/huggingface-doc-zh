- en: UNet2DConditionModel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://huggingface.co/docs/diffusers/api/models/unet2d-cond](https://huggingface.co/docs/diffusers/api/models/unet2d-cond)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/26.18152eaa.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Tip.230e2334.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Docstring.93f6f462.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet](https://huggingface.co/papers/1505.04597) model was originally introduced
    by Ronneberger et al. for biomedical image segmentation, but it is also commonly
    used in 🤗 Diffusers because it outputs images that are the same size as the input.
    It is one of the most important components of a diffusion system because it facilitates
    the actual diffusion process. There are several variants of the UNet model in
    🤗 Diffusers, depending on it’s number of dimensions and whether it is a conditional
    model or not. This is a 2D UNet conditional model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is:'
  prefs: []
  type: TYPE_NORMAL
- en: '*There is large consent that successful training of deep networks requires
    many thousand annotated training samples. In this paper, we present a network
    and training strategy that relies on the strong use of data augmentation to use
    the available annotated samples more efficiently. The architecture consists of
    a contracting path to capture context and a symmetric expanding path that enables
    precise localization. We show that such a network can be trained end-to-end from
    very few images and outperforms the prior best method (a sliding-window convolutional
    network) on the ISBI challenge for segmentation of neuronal structures in electron
    microscopic stacks. Using the same network trained on transmitted light microscopy
    images (phase contrast and DIC) we won the ISBI cell tracking challenge 2015 in
    these categories by a large margin. Moreover, the network is fast. Segmentation
    of a 512x512 image takes less than a second on a recent GPU. The full implementation
    (based on Caffe) and the trained networks are available at [http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net](http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net).*'
  prefs: []
  type: TYPE_NORMAL
- en: UNet2DConditionModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.UNet2DConditionModel'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L71)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample_size: Optional = None in_channels: int = 4 out_channels: int = 4 center_input_sample:
    bool = False flip_sin_to_cos: bool = True freq_shift: int = 0 down_block_types:
    Tuple = (''CrossAttnDownBlock2D'', ''CrossAttnDownBlock2D'', ''CrossAttnDownBlock2D'',
    ''DownBlock2D'') mid_block_type: Optional = ''UNetMidBlock2DCrossAttn'' up_block_types:
    Tuple = (''UpBlock2D'', ''CrossAttnUpBlock2D'', ''CrossAttnUpBlock2D'', ''CrossAttnUpBlock2D'')
    only_cross_attention: Union = False block_out_channels: Tuple = (320, 640, 1280,
    1280) layers_per_block: Union = 2 downsample_padding: int = 1 mid_block_scale_factor:
    float = 1 dropout: float = 0.0 act_fn: str = ''silu'' norm_num_groups: Optional
    = 32 norm_eps: float = 1e-05 cross_attention_dim: Union = 1280 transformer_layers_per_block:
    Union = 1 reverse_transformer_layers_per_block: Optional = None encoder_hid_dim:
    Optional = None encoder_hid_dim_type: Optional = None attention_head_dim: Union
    = 8 num_attention_heads: Union = None dual_cross_attention: bool = False use_linear_projection:
    bool = False class_embed_type: Optional = None addition_embed_type: Optional =
    None addition_time_embed_dim: Optional = None num_class_embeds: Optional = None
    upcast_attention: bool = False resnet_time_scale_shift: str = ''default'' resnet_skip_time_act:
    bool = False resnet_out_scale_factor: int = 1.0 time_embedding_type: str = ''positional''
    time_embedding_dim: Optional = None time_embedding_act_fn: Optional = None timestep_post_act:
    Optional = None time_cond_proj_dim: Optional = None conv_in_kernel: int = 3 conv_out_kernel:
    int = 3 projection_class_embeddings_input_dim: Optional = None attention_type:
    str = ''default'' class_embeddings_concat: bool = False mid_block_only_cross_attention:
    Optional = None cross_attention_norm: Optional = None addition_embed_type_num_heads
    = 64 )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample_size** (`int` or `Tuple[int, int]`, *optional*, defaults to `None`)
    — Height and width of input/output sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**in_channels** (`int`, *optional*, defaults to 4) — Number of channels in
    the input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**out_channels** (`int`, *optional*, defaults to 4) — Number of channels in
    the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**center_input_sample** (`bool`, *optional*, defaults to `False`) — Whether
    to center the input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flip_sin_to_cos** (`bool`, *optional*, defaults to `False`) — Whether to
    flip the sin to cos in the time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**freq_shift** (`int`, *optional*, defaults to 0) — The frequency shift to
    apply to the time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**down_block_types** (`Tuple[str]`, *optional*, defaults to `("CrossAttnDownBlock2D",
    "CrossAttnDownBlock2D", "CrossAttnDownBlock2D", "DownBlock2D")`) — The tuple of
    downsample blocks to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mid_block_type** (`str`, *optional*, defaults to `"UNetMidBlock2DCrossAttn"`)
    — Block type for middle of UNet, it can be one of `UNetMidBlock2DCrossAttn`, `UNetMidBlock2D`,
    or `UNetMidBlock2DSimpleCrossAttn`. If `None`, the mid block layer is skipped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**up_block_types** (`Tuple[str]`, *optional*, defaults to `("UpBlock2D", "CrossAttnUpBlock2D",
    "CrossAttnUpBlock2D", "CrossAttnUpBlock2D")`) — The tuple of upsample blocks to
    use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**only_cross_attention(`bool`** or `Tuple[bool]`, *optional*, default to `False`)
    — Whether to include self-attention in the basic transformer blocks, see `BasicTransformerBlock`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**block_out_channels** (`Tuple[int]`, *optional*, defaults to `(320, 640, 1280,
    1280)`) — The tuple of output channels for each block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**layers_per_block** (`int`, *optional*, defaults to 2) — The number of layers
    per block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**downsample_padding** (`int`, *optional*, defaults to 1) — The padding to
    use for the downsampling convolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mid_block_scale_factor** (`float`, *optional*, defaults to 1.0) — The scale
    factor to use for the mid block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dropout** (`float`, *optional*, defaults to 0.0) — The dropout probability
    to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**act_fn** (`str`, *optional*, defaults to `"silu"`) — The activation function
    to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**norm_num_groups** (`int`, *optional*, defaults to 32) — The number of groups
    to use for the normalization. If `None`, normalization and activation layers is
    skipped in post-processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**norm_eps** (`float`, *optional*, defaults to 1e-5) — The epsilon to use for
    the normalization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_attention_dim** (`int` or `Tuple[int]`, *optional*, defaults to 1280)
    — The dimension of the cross attention features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**transformer_layers_per_block** (`int`, `Tuple[int]`, or `Tuple[Tuple]` ,
    *optional*, defaults to 1) — The number of transformer blocks of type `BasicTransformerBlock`.
    Only relevant for `~models.unet_2d_blocks.CrossAttnDownBlock2D`, `~models.unet_2d_blocks.CrossAttnUpBlock2D`,
    `~models.unet_2d_blocks.UNetMidBlock2DCrossAttn`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A conditional 2D UNet model that takes a noisy sample, conditional state, and
    a timestep and returns a sample shaped output.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin).
    Check the superclass documentation for it’s generic methods implemented for all
    models (such as downloading or saving).
  prefs: []
  type: TYPE_NORMAL
- en: 'reverse_transformer_layers_per_block : (`Tuple[Tuple]`, *optional*, defaults
    to None): The number of transformer blocks of type `BasicTransformerBlock`, in
    the upsampling blocks of the U-Net. Only relevant if `transformer_layers_per_block`
    is of type `Tuple[Tuple]` and for `~models.unet_2d_blocks.CrossAttnDownBlock2D`,
    `~models.unet_2d_blocks.CrossAttnUpBlock2D`, `~models.unet_2d_blocks.UNetMidBlock2DCrossAttn`.
    encoder_hid_dim (`int`, *optional*, defaults to None): If `encoder_hid_dim_type`
    is defined, `encoder_hidden_states` will be projected from `encoder_hid_dim` dimension
    to `cross_attention_dim`. encoder_hid_dim_type (`str`, *optional*, defaults to
    `None`): If given, the `encoder_hidden_states` and potentially other embeddings
    are down-projected to text embeddings of dimension `cross_attention` according
    to `encoder_hid_dim_type`. attention_head_dim (`int`, *optional*, defaults to
    8): The dimension of the attention heads. num_attention_heads (`int`, *optional*):
    The number of attention heads. If not defined, defaults to `attention_head_dim`
    resnet_time_scale_shift (`str`, *optional*, defaults to `"default"`): Time scale
    shift config for ResNet blocks (see `ResnetBlock2D`). Choose from `default` or
    `scale_shift`. class_embed_type (`str`, *optional*, defaults to `None`): The type
    of class embedding to use which is ultimately summed with the time embeddings.
    Choose from `None`, `"timestep"`, `"identity"`, `"projection"`, or `"simple_projection"`.
    addition_embed_type (`str`, *optional*, defaults to `None`): Configures an optional
    embedding which will be summed with the time embeddings. Choose from `None` or
    “text”. “text” will use the `TextTimeEmbedding` layer. addition_time_embed_dim:
    (`int`, *optional*, defaults to `None`): Dimension for the timestep embeddings.
    num_class_embeds (`int`, *optional*, defaults to `None`): Input dimension of the
    learnable embedding matrix to be projected to `time_embed_dim`, when performing
    class conditioning with `class_embed_type` equal to `None`. time_embedding_type
    (`str`, *optional*, defaults to `positional`): The type of position embedding
    to use for timesteps. Choose from `positional` or `fourier`. time_embedding_dim
    (`int`, *optional*, defaults to `None`): An optional override for the dimension
    of the projected time embedding. time_embedding_act_fn (`str`, *optional*, defaults
    to `None`): Optional activation function to use only once on the time embeddings
    before they are passed to the rest of the UNet. Choose from `silu`, `mish`, `gelu`,
    and `swish`. timestep_post_act (`str`, *optional*, defaults to `None`): The second
    activation function to use in timestep embedding. Choose from `silu`, `mish` and
    `gelu`. time_cond_proj_dim (`int`, *optional*, defaults to `None`): The dimension
    of `cond_proj` layer in the timestep embedding. conv_in_kernel (`int`, *optional*,
    default to `3`): The kernel size of `conv_in` layer. conv_out_kernel (`int`, *optional*,
    default to `3`): The kernel size of `conv_out` layer. projection_class_embeddings_input_dim
    (`int`, *optional*): The dimension of the `class_labels` input when `class_embed_type="projection"`.
    Required when `class_embed_type="projection"`. class_embeddings_concat (`bool`,
    *optional*, defaults to `False`): Whether to concatenate the time embeddings with
    the class embeddings. mid_block_only_cross_attention (`bool`, *optional*, defaults
    to `None`): Whether to use cross attention with the mid block when using the `UNetMidBlock2DSimpleCrossAttn`.
    If `only_cross_attention` is given as a single boolean and `mid_block_only_cross_attention`
    is `None`, the `only_cross_attention` value is used as the value for `mid_block_only_cross_attention`.
    Default to `False` otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: '#### disable_freeu'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L788)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Disables the FreeU mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: '#### enable_freeu'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L764)'
  prefs: []
  type: TYPE_NORMAL
- en: ( s1 s2 b1 b2 )
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**s1** (`float`) — Scaling factor for stage 1 to attenuate the contributions
    of the skip features. This is done to mitigate the “oversmoothing effect” in the
    enhanced denoising process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**s2** (`float`) — Scaling factor for stage 2 to attenuate the contributions
    of the skip features. This is done to mitigate the “oversmoothing effect” in the
    enhanced denoising process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**b1** (`float`) — Scaling factor for stage 1 to amplify the contributions
    of backbone features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**b2** (`float`) — Scaling factor for stage 2 to amplify the contributions
    of backbone features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables the FreeU mechanism from [https://arxiv.org/abs/2309.11497](https://arxiv.org/abs/2309.11497).
  prefs: []
  type: TYPE_NORMAL
- en: The suffixes after the scaling factors represent the stage blocks where they
    are being applied.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the [official repository](https://github.com/ChenyangSi/FreeU)
    for combinations of values that are known to work well for different pipelines
    such as Stable Diffusion v1, v2, and Stable Diffusion XL.
  prefs: []
  type: TYPE_NORMAL
- en: '#### forward'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L843)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample: FloatTensor timestep: Union encoder_hidden_states: Tensor class_labels:
    Optional = None timestep_cond: Optional = None attention_mask: Optional = None
    cross_attention_kwargs: Optional = None added_cond_kwargs: Optional = None down_block_additional_residuals:
    Optional = None mid_block_additional_residual: Optional = None down_intrablock_additional_residuals:
    Optional = None encoder_attention_mask: Optional = None return_dict: bool = True
    ) → [UNet2DConditionOutput](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.models.unets.unet_2d_condition.UNet2DConditionOutput)
    or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor`) — The noisy input tensor with the following
    shape `(batch, channel, height, width)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**timestep** (`torch.FloatTensor` or `float` or `int`) — The number of timesteps
    to denoise an input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoder_hidden_states** (`torch.FloatTensor`) — The encoder hidden states
    with shape `(batch, sequence_length, feature_dim)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**class_labels** (`torch.Tensor`, *optional*, defaults to `None`) — Optional
    class labels for conditioning. Their embeddings will be summed with the timestep
    embeddings. timestep_cond — (`torch.Tensor`, *optional*, defaults to `None`):
    Conditional embeddings for timestep. If provided, the embeddings will be summed
    with the samples passed through the `self.time_embedding` layer to obtain the
    timestep embeddings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attention_mask** (`torch.Tensor`, *optional*, defaults to `None`) — An attention
    mask of shape `(batch, key_tokens)` is applied to `encoder_hidden_states`. If
    `1` the mask is kept, otherwise if `0` it is discarded. Mask will be converted
    into a bias, which adds large negative values to the attention scores corresponding
    to “discard” tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_attention_kwargs** (`dict`, *optional*) — A kwargs dictionary that
    if specified is passed along to the `AttentionProcessor` as defined under `self.processor`
    in [diffusers.models.attention_processor](https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/attention_processor.py).
    added_cond_kwargs — (`dict`, *optional*): A kwargs dictionary containing additional
    embeddings that if specified are added to the embeddings that are passed along
    to the UNet blocks. down_block_additional_residuals — (`tuple` of `torch.Tensor`,
    *optional*): A tuple of tensors that if specified are added to the residuals of
    down unet blocks. mid_block_additional_residual — (`torch.Tensor`, *optional*):
    A tensor that if specified is added to the residual of the middle unet block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**encoder_attention_mask** (`torch.Tensor`) — A cross-attention mask of shape
    `(batch, sequence_length)` is applied to `encoder_hidden_states`. If `True` the
    mask is kept, otherwise if `False` it is discarded. Mask will be converted into
    a bias, which adds large negative values to the attention scores corresponding
    to “discard” tokens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**return_dict** (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a [UNet2DConditionOutput](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.models.unets.unet_2d_condition.UNet2DConditionOutput)
    instead of a plain tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_attention_kwargs** (`dict`, *optional*) — A kwargs dictionary that
    if specified is passed along to the `AttnProcessor`. added_cond_kwargs — (`dict`,
    *optional*): A kwargs dictionary containin additional embeddings that if specified
    are added to the embeddings that are passed along to the UNet blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**down_block_additional_residuals** (`tuple` of `torch.Tensor`, *optional*)
    — additional residuals to be added to UNet long skip connections from down blocks
    to up blocks for example from ControlNet side model(s)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mid_block_additional_residual** (`torch.Tensor`, *optional*) — additional
    residual to be added to UNet mid block output, for example from ControlNet side
    model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**down_intrablock_additional_residuals** (`tuple` of `torch.Tensor`, *optional*)
    — additional residuals to be added within UNet down blocks, for example from T2I-Adapter
    side model(s)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  prefs: []
  type: TYPE_NORMAL
- en: '[UNet2DConditionOutput](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.models.unets.unet_2d_condition.UNet2DConditionOutput)
    or `tuple`'
  prefs: []
  type: TYPE_NORMAL
- en: If `return_dict` is True, an [UNet2DConditionOutput](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.models.unets.unet_2d_condition.UNet2DConditionOutput)
    is returned, otherwise a `tuple` is returned where the first element is the sample
    tensor.
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.UNet2DConditionModel)
    forward method.
  prefs: []
  type: TYPE_NORMAL
- en: '#### fuse_qkv_projections'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L796)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Enables fused QKV projections. For self-attention modules, all projection matrices
    (i.e., query, key, value) are fused. For cross-attention modules, key and value
    projection matrices are fused.
  prefs: []
  type: TYPE_NORMAL
- en: This API is 🧪 experimental.
  prefs: []
  type: TYPE_NORMAL
- en: '#### set_attention_slice'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L695)'
  prefs: []
  type: TYPE_NORMAL
- en: ( slice_size )
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**slice_size** (`str` or `int` or `list(int)`, *optional*, defaults to `"auto"`)
    — When `"auto"`, input to the attention heads is halved, so attention is computed
    in two steps. If `"max"`, maximum amount of memory is saved by running only one
    slice at a time. If a number is provided, uses as many slices as `attention_head_dim
    // slice_size`. In this case, `attention_head_dim` must be a multiple of `slice_size`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable sliced attention computation.
  prefs: []
  type: TYPE_NORMAL
- en: When this option is enabled, the attention module splits the input tensor in
    slices to compute attention in several steps. This is useful for saving some memory
    in exchange for a small decrease in speed.
  prefs: []
  type: TYPE_NORMAL
- en: '#### set_attn_processor'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L646)'
  prefs: []
  type: TYPE_NORMAL
- en: '( processor: Union )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**processor** (`dict` of `AttentionProcessor` or only `AttentionProcessor`)
    — The instantiated processor class or a dictionary of processor classes that will
    be set as the processor for **all** `Attention` layers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `processor` is a dict, the key needs to define the path to the corresponding
    cross attention processor. This is strongly recommended when setting trainable
    attention processors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sets the attention processor to use to compute attention.
  prefs: []
  type: TYPE_NORMAL
- en: '#### set_default_attn_processor'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L680)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Disables custom attention processors and sets the default attention implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '#### unfuse_qkv_projections'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L819)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Disables the fused QKV projection if enabled.
  prefs: []
  type: TYPE_NORMAL
- en: This API is 🧪 experimental.
  prefs: []
  type: TYPE_NORMAL
- en: '#### unload_lora'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L832)'
  prefs: []
  type: TYPE_NORMAL
- en: ( )
  prefs: []
  type: TYPE_NORMAL
- en: Unloads LoRA weights.
  prefs: []
  type: TYPE_NORMAL
- en: UNet2DConditionOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.models.unets.unet_2d_condition.UNet2DConditionOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L58)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample: FloatTensor = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample** (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — The hidden states output conditioned on `encoder_hidden_states` input.
    Output of last layer of model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of [UNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.UNet2DConditionModel).
  prefs: []
  type: TYPE_NORMAL
- en: FlaxUNet2DConditionModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.FlaxUNet2DConditionModel'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition_flax.py#L48)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample_size: int = 32 in_channels: int = 4 out_channels: int = 4 down_block_types:
    Tuple = (''CrossAttnDownBlock2D'', ''CrossAttnDownBlock2D'', ''CrossAttnDownBlock2D'',
    ''DownBlock2D'') up_block_types: Tuple = (''UpBlock2D'', ''CrossAttnUpBlock2D'',
    ''CrossAttnUpBlock2D'', ''CrossAttnUpBlock2D'') only_cross_attention: Union =
    False block_out_channels: Tuple = (320, 640, 1280, 1280) layers_per_block: int
    = 2 attention_head_dim: Union = 8 num_attention_heads: Union = None cross_attention_dim:
    int = 1280 dropout: float = 0.0 use_linear_projection: bool = False dtype: dtype
    = <class ''jax.numpy.float32''> flip_sin_to_cos: bool = True freq_shift: int =
    0 use_memory_efficient_attention: bool = False split_head_dim: bool = False transformer_layers_per_block:
    Union = 1 addition_embed_type: Optional = None addition_time_embed_dim: Optional
    = None addition_embed_type_num_heads: int = 64 projection_class_embeddings_input_dim:
    Optional = None parent: Union = <flax.linen.module._Sentinel object at 0x7fbd557629e0>
    name: Optional = None )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample_size** (`int`, *optional*) — The size of the input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**in_channels** (`int`, *optional*, defaults to 4) — The number of channels
    in the input sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**out_channels** (`int`, *optional*, defaults to 4) — The number of channels
    in the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**down_block_types** (`Tuple[str]`, *optional*, defaults to `("FlaxCrossAttnDownBlock2D",
    "FlaxCrossAttnDownBlock2D", "FlaxCrossAttnDownBlock2D", "FlaxDownBlock2D")`) —
    The tuple of downsample blocks to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**up_block_types** (`Tuple[str]`, *optional*, defaults to `("FlaxUpBlock2D",
    "FlaxCrossAttnUpBlock2D", "FlaxCrossAttnUpBlock2D", "FlaxCrossAttnUpBlock2D")`)
    — The tuple of upsample blocks to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**block_out_channels** (`Tuple[int]`, *optional*, defaults to `(320, 640, 1280,
    1280)`) — The tuple of output channels for each block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**layers_per_block** (`int`, *optional*, defaults to 2) — The number of layers
    per block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**attention_head_dim** (`int` or `Tuple[int]`, *optional*, defaults to 8) —
    The dimension of the attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**num_attention_heads** (`int` or `Tuple[int]`, *optional*) — The number of
    attention heads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cross_attention_dim** (`int`, *optional*, defaults to 768) — The dimension
    of the cross attention features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dropout** (`float`, *optional*, defaults to 0) — Dropout probability for
    down, up and bottleneck blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**flip_sin_to_cos** (`bool`, *optional*, defaults to `True`) — Whether to flip
    the sin to cos in the time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**freq_shift** (`int`, *optional*, defaults to 0) — The frequency shift to
    apply to the time embedding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**use_memory_efficient_attention** (`bool`, *optional*, defaults to `False`)
    — Enable memory efficient attention as described [here](https://arxiv.org/abs/2112.05682).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**split_head_dim** (`bool`, *optional*, defaults to `False`) — Whether to split
    the head dimension into a new axis for the self-attention computation. In most
    cases, enabling this flag should speed up the computation for Stable Diffusion
    2.x and Stable Diffusion XL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A conditional 2D UNet model that takes a noisy sample, conditional state, and
    a timestep and returns a sample shaped output.
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [FlaxModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.FlaxModelMixin).
    Check the superclass documentation for it’s generic methods implemented for all
    models (such as downloading or saving).
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a Flax Linen [flax.linen.Module](https://flax.readthedocs.io/en/latest/flax.linen.html#module)
    subclass. Use it as a regular Flax Linen module and refer to the Flax documentation
    for all matters related to its general usage and behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inherent JAX features such as the following are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Just-In-Time (JIT) compilation](https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Automatic Differentiation](https://jax.readthedocs.io/en/latest/jax.html#automatic-differentiation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vectorization](https://jax.readthedocs.io/en/latest/jax.html#vectorization-vmap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Parallelization](https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FlaxUNet2DConditionOutput
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### class diffusers.models.unets.unet_2d_condition_flax.FlaxUNet2DConditionOutput'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition_flax.py#L35)'
  prefs: []
  type: TYPE_NORMAL
- en: '( sample: Array )'
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs: []
  type: TYPE_NORMAL
- en: '**sample** (`jnp.ndarray` of shape `(batch_size, num_channels, height, width)`)
    — The hidden states output conditioned on `encoder_hidden_states` input. Output
    of last layer of model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of [FlaxUNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.FlaxUNet2DConditionModel).
  prefs: []
  type: TYPE_NORMAL
- en: '#### replace'
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/flax/struct.py#L111)'
  prefs: []
  type: TYPE_NORMAL
- en: ( **updates )
  prefs: []
  type: TYPE_NORMAL
- en: “Returns a new object replacing the specified fields with new values.
  prefs: []
  type: TYPE_NORMAL
