- en: UNet2DConditionModel
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/diffusers/api/models/unet2d-cond](https://huggingface.co/docs/diffusers/api/models/unet2d-cond)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet](https://huggingface.co/papers/1505.04597) model was originally introduced
    by Ronneberger et al. for biomedical image segmentation, but it is also commonly
    used in 🤗 Diffusers because it outputs images that are the same size as the input.
    It is one of the most important components of a diffusion system because it facilitates
    the actual diffusion process. There are several variants of the UNet model in
    🤗 Diffusers, depending on it’s number of dimensions and whether it is a conditional
    model or not. This is a 2D UNet conditional model.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'The abstract from the paper is:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '*There is large consent that successful training of deep networks requires
    many thousand annotated training samples. In this paper, we present a network
    and training strategy that relies on the strong use of data augmentation to use
    the available annotated samples more efficiently. The architecture consists of
    a contracting path to capture context and a symmetric expanding path that enables
    precise localization. We show that such a network can be trained end-to-end from
    very few images and outperforms the prior best method (a sliding-window convolutional
    network) on the ISBI challenge for segmentation of neuronal structures in electron
    microscopic stacks. Using the same network trained on transmitted light microscopy
    images (phase contrast and DIC) we won the ISBI cell tracking challenge 2015 in
    these categories by a large margin. Moreover, the network is fast. Segmentation
    of a 512x512 image takes less than a second on a recent GPU. The full implementation
    (based on Caffe) and the trained networks are available at [http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net](http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net).*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: UNet2DConditionModel
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.UNet2DConditionModel`'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L71)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Parameters
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '`sample_size` (`int` or `Tuple[int, int]`, *optional*, defaults to `None`)
    — Height and width of input/output sample.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_channels` (`int`, *optional*, defaults to 4) — Number of channels in the
    input sample.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`out_channels` (`int`, *optional*, defaults to 4) — Number of channels in the
    output.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`center_input_sample` (`bool`, *optional*, defaults to `False`) — Whether to
    center the input sample.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flip_sin_to_cos` (`bool`, *optional*, defaults to `False`) — Whether to flip
    the sin to cos in the time embedding.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`freq_shift` (`int`, *optional*, defaults to 0) — The frequency shift to apply
    to the time embedding.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`down_block_types` (`Tuple[str]`, *optional*, defaults to `("CrossAttnDownBlock2D",
    "CrossAttnDownBlock2D", "CrossAttnDownBlock2D", "DownBlock2D")`) — The tuple of
    downsample blocks to use.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mid_block_type` (`str`, *optional*, defaults to `"UNetMidBlock2DCrossAttn"`)
    — Block type for middle of UNet, it can be one of `UNetMidBlock2DCrossAttn`, `UNetMidBlock2D`,
    or `UNetMidBlock2DSimpleCrossAttn`. If `None`, the mid block layer is skipped.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`up_block_types` (`Tuple[str]`, *optional*, defaults to `("UpBlock2D", "CrossAttnUpBlock2D",
    "CrossAttnUpBlock2D", "CrossAttnUpBlock2D")`) — The tuple of upsample blocks to
    use.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`only_cross_attention(bool` or `Tuple[bool]`, *optional*, default to `False`)
    — Whether to include self-attention in the basic transformer blocks, see `BasicTransformerBlock`.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`block_out_channels` (`Tuple[int]`, *optional*, defaults to `(320, 640, 1280,
    1280)`) — The tuple of output channels for each block.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layers_per_block` (`int`, *optional*, defaults to 2) — The number of layers
    per block.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`downsample_padding` (`int`, *optional*, defaults to 1) — The padding to use
    for the downsampling convolution.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mid_block_scale_factor` (`float`, *optional*, defaults to 1.0) — The scale
    factor to use for the mid block.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dropout` (`float`, *optional*, defaults to 0.0) — The dropout probability
    to use.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dropout` (`float`, *可选*, 默认为0.0) — 要使用的 dropout 概率。'
- en: '`act_fn` (`str`, *optional*, defaults to `"silu"`) — The activation function
    to use.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`act_fn` (`str`, *可选*, 默认为`"silu"`) — 要使用的激活函数。'
- en: '`norm_num_groups` (`int`, *optional*, defaults to 32) — The number of groups
    to use for the normalization. If `None`, normalization and activation layers is
    skipped in post-processing.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`norm_num_groups` (`int`, *可选*, 默认为32) — 用于规范化的组数。如果为`None`，则在后处理中跳过规范化和激活层。'
- en: '`norm_eps` (`float`, *optional*, defaults to 1e-5) — The epsilon to use for
    the normalization.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`norm_eps` (`float`, *可选*, 默认为1e-5) — 用于规范化的 epsilon 值。'
- en: '`cross_attention_dim` (`int` or `Tuple[int]`, *optional*, defaults to 1280)
    — The dimension of the cross attention features.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cross_attention_dim` (`int` 或 `Tuple[int]`, *可选*, 默认为1280) — 交叉注意力特征的维度。'
- en: '`transformer_layers_per_block` (`int`, `Tuple[int]`, or `Tuple[Tuple]` , *optional*,
    defaults to 1) — The number of transformer blocks of type `BasicTransformerBlock`.
    Only relevant for `~models.unet_2d_blocks.CrossAttnDownBlock2D`, `~models.unet_2d_blocks.CrossAttnUpBlock2D`,
    `~models.unet_2d_blocks.UNetMidBlock2DCrossAttn`.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transformer_layers_per_block` (`int`, `Tuple[int]`, 或 `Tuple[Tuple]`, *可选*,
    默认为1) — `BasicTransformerBlock` 类型的 transformer 块的数量。仅适用于 `~models.unet_2d_blocks.CrossAttnDownBlock2D`,
    `~models.unet_2d_blocks.CrossAttnUpBlock2D`, `~models.unet_2d_blocks.UNetMidBlock2DCrossAttn`。'
- en: A conditional 2D UNet model that takes a noisy sample, conditional state, and
    a timestep and returns a sample shaped output.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有条件的 2D UNet 模型，接受一个带噪声的样本、条件状态和一个时间步，并返回一个形状输出的样本。
- en: This model inherits from [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin).
    Check the superclass documentation for it’s generic methods implemented for all
    models (such as downloading or saving).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型继承自 [ModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.ModelMixin)。查看超类文档以了解为所有模型实现的通用方法（如下载或保存）。
- en: 'reverse_transformer_layers_per_block : (`Tuple[Tuple]`, *optional*, defaults
    to None): The number of transformer blocks of type `BasicTransformerBlock`, in
    the upsampling blocks of the U-Net. Only relevant if `transformer_layers_per_block`
    is of type `Tuple[Tuple]` and for `~models.unet_2d_blocks.CrossAttnDownBlock2D`,
    `~models.unet_2d_blocks.CrossAttnUpBlock2D`, `~models.unet_2d_blocks.UNetMidBlock2DCrossAttn`.
    encoder_hid_dim (`int`, *optional*, defaults to None): If `encoder_hid_dim_type`
    is defined, `encoder_hidden_states` will be projected from `encoder_hid_dim` dimension
    to `cross_attention_dim`. encoder_hid_dim_type (`str`, *optional*, defaults to
    `None`): If given, the `encoder_hidden_states` and potentially other embeddings
    are down-projected to text embeddings of dimension `cross_attention` according
    to `encoder_hid_dim_type`. attention_head_dim (`int`, *optional*, defaults to
    8): The dimension of the attention heads. num_attention_heads (`int`, *optional*):
    The number of attention heads. If not defined, defaults to `attention_head_dim`
    resnet_time_scale_shift (`str`, *optional*, defaults to `"default"`): Time scale
    shift config for ResNet blocks (see `ResnetBlock2D`). Choose from `default` or
    `scale_shift`. class_embed_type (`str`, *optional*, defaults to `None`): The type
    of class embedding to use which is ultimately summed with the time embeddings.
    Choose from `None`, `"timestep"`, `"identity"`, `"projection"`, or `"simple_projection"`.
    addition_embed_type (`str`, *optional*, defaults to `None`): Configures an optional
    embedding which will be summed with the time embeddings. Choose from `None` or
    “text”. “text” will use the `TextTimeEmbedding` layer. addition_time_embed_dim:
    (`int`, *optional*, defaults to `None`): Dimension for the timestep embeddings.
    num_class_embeds (`int`, *optional*, defaults to `None`): Input dimension of the
    learnable embedding matrix to be projected to `time_embed_dim`, when performing
    class conditioning with `class_embed_type` equal to `None`. time_embedding_type
    (`str`, *optional*, defaults to `positional`): The type of position embedding
    to use for timesteps. Choose from `positional` or `fourier`. time_embedding_dim
    (`int`, *optional*, defaults to `None`): An optional override for the dimension
    of the projected time embedding. time_embedding_act_fn (`str`, *optional*, defaults
    to `None`): Optional activation function to use only once on the time embeddings
    before they are passed to the rest of the UNet. Choose from `silu`, `mish`, `gelu`,
    and `swish`. timestep_post_act (`str`, *optional*, defaults to `None`): The second
    activation function to use in timestep embedding. Choose from `silu`, `mish` and
    `gelu`. time_cond_proj_dim (`int`, *optional*, defaults to `None`): The dimension
    of `cond_proj` layer in the timestep embedding. conv_in_kernel (`int`, *optional*,
    default to `3`): The kernel size of `conv_in` layer. conv_out_kernel (`int`, *optional*,
    default to `3`): The kernel size of `conv_out` layer. projection_class_embeddings_input_dim
    (`int`, *optional*): The dimension of the `class_labels` input when `class_embed_type="projection"`.
    Required when `class_embed_type="projection"`. class_embeddings_concat (`bool`,
    *optional*, defaults to `False`): Whether to concatenate the time embeddings with
    the class embeddings. mid_block_only_cross_attention (`bool`, *optional*, defaults
    to `None`): Whether to use cross attention with the mid block when using the `UNetMidBlock2DSimpleCrossAttn`.
    If `only_cross_attention` is given as a single boolean and `mid_block_only_cross_attention`
    is `None`, the `only_cross_attention` value is used as the value for `mid_block_only_cross_attention`.
    Default to `False` otherwise.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '#### `disable_freeu`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L788)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Disables the FreeU mechanism.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '#### `enable_freeu`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L764)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Parameters
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '`s1` (`float`) — Scaling factor for stage 1 to attenuate the contributions
    of the skip features. This is done to mitigate the “oversmoothing effect” in the
    enhanced denoising process.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s2` (`float`) — Scaling factor for stage 2 to attenuate the contributions
    of the skip features. This is done to mitigate the “oversmoothing effect” in the
    enhanced denoising process.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b1` (`float`) — Scaling factor for stage 1 to amplify the contributions of
    backbone features.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b2` (`float`) — Scaling factor for stage 2 to amplify the contributions of
    backbone features.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables the FreeU mechanism from [https://arxiv.org/abs/2309.11497](https://arxiv.org/abs/2309.11497).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The suffixes after the scaling factors represent the stage blocks where they
    are being applied.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the [official repository](https://github.com/ChenyangSi/FreeU)
    for combinations of values that are known to work well for different pipelines
    such as Stable Diffusion v1, v2, and Stable Diffusion XL.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '#### `forward`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L843)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor`) — The noisy input tensor with the following
    shape `(batch, channel, height, width)`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestep` (`torch.FloatTensor` or `float` or `int`) — The number of timesteps
    to denoise an input.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_hidden_states` (`torch.FloatTensor`) — The encoder hidden states with
    shape `(batch, sequence_length, feature_dim)`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class_labels` (`torch.Tensor`, *optional*, defaults to `None`) — Optional
    class labels for conditioning. Their embeddings will be summed with the timestep
    embeddings. timestep_cond — (`torch.Tensor`, *optional*, defaults to `None`):
    Conditional embeddings for timestep. If provided, the embeddings will be summed
    with the samples passed through the `self.time_embedding` layer to obtain the
    timestep embeddings.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_mask` (`torch.Tensor`, *optional*, defaults to `None`) — An attention
    mask of shape `(batch, key_tokens)` is applied to `encoder_hidden_states`. If
    `1` the mask is kept, otherwise if `0` it is discarded. Mask will be converted
    into a bias, which adds large negative values to the attention scores corresponding
    to “discard” tokens.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attention_kwargs` (`dict`, *optional*) — A kwargs dictionary that if
    specified is passed along to the `AttentionProcessor` as defined under `self.processor`
    in [diffusers.models.attention_processor](https://github.com/huggingface/diffusers/blob/main/src/diffusers/models/attention_processor.py).
    added_cond_kwargs — (`dict`, *optional*): A kwargs dictionary containing additional
    embeddings that if specified are added to the embeddings that are passed along
    to the UNet blocks. down_block_additional_residuals — (`tuple` of `torch.Tensor`,
    *optional*): A tuple of tensors that if specified are added to the residuals of
    down unet blocks. mid_block_additional_residual — (`torch.Tensor`, *optional*):
    A tensor that if specified is added to the residual of the middle unet block.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encoder_attention_mask` (`torch.Tensor`) — A cross-attention mask of shape
    `(batch, sequence_length)` is applied to `encoder_hidden_states`. If `True` the
    mask is kept, otherwise if `False` it is discarded. Mask will be converted into
    a bias, which adds large negative values to the attention scores corresponding
    to “discard” tokens.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) — Whether or not to
    return a [UNet2DConditionOutput](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.models.unets.unet_2d_condition.UNet2DConditionOutput)
    instead of a plain tuple.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attention_kwargs` (`dict`, *optional*) — A kwargs dictionary that if
    specified is passed along to the `AttnProcessor`. added_cond_kwargs — (`dict`,
    *optional*): A kwargs dictionary containin additional embeddings that if specified
    are added to the embeddings that are passed along to the UNet blocks.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`down_block_additional_residuals` (`tuple` of `torch.Tensor`, *optional*) —
    additional residuals to be added to UNet long skip connections from down blocks
    to up blocks for example from ControlNet side model(s)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mid_block_additional_residual` (`torch.Tensor`, *optional*) — additional residual
    to be added to UNet mid block output, for example from ControlNet side model'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`down_intrablock_additional_residuals` (`tuple` of `torch.Tensor`, *optional*)
    — additional residuals to be added within UNet down blocks, for example from T2I-Adapter
    side model(s)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[UNet2DConditionOutput](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.models.unets.unet_2d_condition.UNet2DConditionOutput)
    or `tuple`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: If `return_dict` is True, an [UNet2DConditionOutput](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.models.unets.unet_2d_condition.UNet2DConditionOutput)
    is returned, otherwise a `tuple` is returned where the first element is the sample
    tensor.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: The [UNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.UNet2DConditionModel)
    forward method.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '#### `fuse_qkv_projections`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L796)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Enables fused QKV projections. For self-attention modules, all projection matrices
    (i.e., query, key, value) are fused. For cross-attention modules, key and value
    projection matrices are fused.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: This API is 🧪 experimental.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_attention_slice`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L695)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '`slice_size` (`str` or `int` or `list(int)`, *optional*, defaults to `"auto"`)
    — When `"auto"`, input to the attention heads is halved, so attention is computed
    in two steps. If `"max"`, maximum amount of memory is saved by running only one
    slice at a time. If a number is provided, uses as many slices as `attention_head_dim
    // slice_size`. In this case, `attention_head_dim` must be a multiple of `slice_size`.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable sliced attention computation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: When this option is enabled, the attention module splits the input tensor in
    slices to compute attention in several steps. This is useful for saving some memory
    in exchange for a small decrease in speed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_attn_processor`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L646)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Parameters
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '`processor` (`dict` of `AttentionProcessor` or only `AttentionProcessor`) —
    The instantiated processor class or a dictionary of processor classes that will
    be set as the processor for **all** `Attention` layers.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `processor` is a dict, the key needs to define the path to the corresponding
    cross attention processor. This is strongly recommended when setting trainable
    attention processors.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Sets the attention processor to use to compute attention.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '#### `set_default_attn_processor`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L680)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Disables custom attention processors and sets the default attention implementation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '#### `unfuse_qkv_projections`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L819)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Disables the fused QKV projection if enabled.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: This API is 🧪 experimental.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '#### `unload_lora`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L832)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Unloads LoRA weights.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: UNet2DConditionOutput
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.models.unets.unet_2d_condition.UNet2DConditionOutput`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition.py#L58)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Parameters
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — The hidden states output conditioned on `encoder_hidden_states` input.
    Output of last layer of model.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of [UNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.UNet2DConditionModel).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: FlaxUNet2DConditionModel
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.FlaxUNet2DConditionModel`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition_flax.py#L48)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Parameters
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '`sample_size` (`int`, *optional*) — The size of the input sample.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_channels` (`int`, *optional*, defaults to 4) — The number of channels in
    the input sample.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`out_channels` (`int`, *optional*, defaults to 4) — The number of channels
    in the output.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`down_block_types` (`Tuple[str]`, *optional*, defaults to `("FlaxCrossAttnDownBlock2D",
    "FlaxCrossAttnDownBlock2D", "FlaxCrossAttnDownBlock2D", "FlaxDownBlock2D")`) —
    The tuple of downsample blocks to use.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`up_block_types` (`Tuple[str]`, *optional*, defaults to `("FlaxUpBlock2D",
    "FlaxCrossAttnUpBlock2D", "FlaxCrossAttnUpBlock2D", "FlaxCrossAttnUpBlock2D")`)
    — The tuple of upsample blocks to use.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`block_out_channels` (`Tuple[int]`, *optional*, defaults to `(320, 640, 1280,
    1280)`) — The tuple of output channels for each block.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layers_per_block` (`int`, *optional*, defaults to 2) — The number of layers
    per block.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attention_head_dim` (`int` or `Tuple[int]`, *optional*, defaults to 8) — The
    dimension of the attention heads.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`num_attention_heads` (`int` or `Tuple[int]`, *optional*) — The number of attention
    heads.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cross_attention_dim` (`int`, *optional*, defaults to 768) — The dimension
    of the cross attention features.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dropout` (`float`, *optional*, defaults to 0) — Dropout probability for down,
    up and bottleneck blocks.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flip_sin_to_cos` (`bool`, *optional*, defaults to `True`) — Whether to flip
    the sin to cos in the time embedding.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`freq_shift` (`int`, *optional*, defaults to 0) — The frequency shift to apply
    to the time embedding.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use_memory_efficient_attention` (`bool`, *optional*, defaults to `False`)
    — Enable memory efficient attention as described [here](https://arxiv.org/abs/2112.05682).'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split_head_dim` (`bool`, *optional*, defaults to `False`) — Whether to split
    the head dimension into a new axis for the self-attention computation. In most
    cases, enabling this flag should speed up the computation for Stable Diffusion
    2.x and Stable Diffusion XL.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A conditional 2D UNet model that takes a noisy sample, conditional state, and
    a timestep and returns a sample shaped output.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: This model inherits from [FlaxModelMixin](/docs/diffusers/v0.26.3/en/api/models/overview#diffusers.FlaxModelMixin).
    Check the superclass documentation for it’s generic methods implemented for all
    models (such as downloading or saving).
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: This model is also a Flax Linen [flax.linen.Module](https://flax.readthedocs.io/en/latest/flax.linen.html#module)
    subclass. Use it as a regular Flax Linen module and refer to the Flax documentation
    for all matters related to its general usage and behavior.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'Inherent JAX features such as the following are supported:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[Just-In-Time (JIT) compilation](https://jax.readthedocs.io/en/latest/jax.html#just-in-time-compilation-jit)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Automatic Differentiation](https://jax.readthedocs.io/en/latest/jax.html#automatic-differentiation)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vectorization](https://jax.readthedocs.io/en/latest/jax.html#vectorization-vmap)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Parallelization](https://jax.readthedocs.io/en/latest/jax.html#parallelization-pmap)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FlaxUNet2DConditionOutput
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '### `class diffusers.models.unets.unet_2d_condition_flax.FlaxUNet2DConditionOutput`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/diffusers/models/unets/unet_2d_condition_flax.py#L35)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Parameters
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '`sample` (`jnp.ndarray` of shape `(batch_size, num_channels, height, width)`)
    — The hidden states output conditioned on `encoder_hidden_states` input. Output
    of last layer of model.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sample`（形状为`(batch_size, num_channels, height, width)`的`jnp.ndarray`）- 在`encoder_hidden_states`输入条件下输出的隐藏状态。模型的最后一层的输出。'
- en: The output of [FlaxUNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.FlaxUNet2DConditionModel).
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[FlaxUNet2DConditionModel](/docs/diffusers/v0.26.3/en/api/models/unet2d-cond#diffusers.FlaxUNet2DConditionModel)的输出。'
- en: '#### `replace`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `replace`'
- en: '[< source >](https://github.com/huggingface/diffusers/blob/v0.26.3/src/flax/struct.py#L111)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/diffusers/blob/v0.26.3/src/flax/struct.py#L111)'
- en: '[PRE13]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: “Returns a new object replacing the specified fields with new values.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: “返回一个用新值替换指定字段的新对象。
