["```py\n>>> from transformers import SpeechT5Model, SpeechT5Config\n\n>>> # Initializing a \"microsoft/speecht5_asr\" style configuration\n>>> configuration = SpeechT5Config()\n\n>>> # Initializing a model (with random weights) from the \"microsoft/speecht5_asr\" style configuration\n>>> model = SpeechT5Model(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import SpeechT5HifiGan, SpeechT5HifiGanConfig\n\n>>> # Initializing a \"microsoft/speecht5_hifigan\" style configuration\n>>> configuration = SpeechT5HifiGanConfig()\n\n>>> # Initializing a model (with random weights) from the \"microsoft/speecht5_hifigan\" style configuration\n>>> model = SpeechT5HifiGan(configuration)\n\n>>> # Accessing the model configuration\n>>> configuration = model.config\n```", "```py\n>>> from transformers import SpeechT5Processor, SpeechT5ForSpeechToText\n>>> from datasets import load_dataset\n\n>>> dataset = load_dataset(\n...     \"hf-internal-testing/librispeech_asr_demo\", \"clean\", split=\"validation\"\n... )  # doctest: +IGNORE_RESULT\n>>> dataset = dataset.sort(\"id\")\n>>> sampling_rate = dataset.features[\"audio\"].sampling_rate\n\n>>> processor = SpeechT5Processor.from_pretrained(\"microsoft/speecht5_asr\")\n>>> model = SpeechT5ForSpeechToText.from_pretrained(\"microsoft/speecht5_asr\")\n\n>>> # audio file is decoded on the fly\n>>> inputs = processor(audio=dataset[0][\"audio\"][\"array\"], sampling_rate=sampling_rate, return_tensors=\"pt\")\n>>> predicted_ids = model.generate(**inputs, max_length=100)\n\n>>> # transcribe speech\n>>> transcription = processor.batch_decode(predicted_ids, skip_special_tokens=True)\n>>> transcription[0]\n'mister quilter is the apostle of the middle classes and we are glad to welcome his gospel'\n```", "```py\n>>> inputs[\"labels\"] = processor(text_target=dataset[0][\"text\"], return_tensors=\"pt\").input_ids\n\n>>> # compute loss\n>>> loss = model(**inputs).loss\n>>> round(loss.item(), 2)\n19.68\n```", "```py\n>>> from transformers import SpeechT5Processor, SpeechT5ForTextToSpeech, SpeechT5HifiGan, set_seed\n>>> import torch\n\n>>> processor = SpeechT5Processor.from_pretrained(\"microsoft/speecht5_tts\")\n>>> model = SpeechT5ForTextToSpeech.from_pretrained(\"microsoft/speecht5_tts\")\n>>> vocoder = SpeechT5HifiGan.from_pretrained(\"microsoft/speecht5_hifigan\")\n\n>>> inputs = processor(text=\"Hello, my dog is cute\", return_tensors=\"pt\")\n>>> speaker_embeddings = torch.zeros((1, 512))  # or load xvectors from a file\n\n>>> set_seed(555)  # make deterministic\n\n>>> # generate speech\n>>> speech = model.generate(inputs[\"input_ids\"], speaker_embeddings, vocoder=vocoder)\n>>> speech.shape\ntorch.Size([15872])\n```", "```py\n>>> from transformers import SpeechT5Processor, SpeechT5ForSpeechToSpeech, SpeechT5HifiGan, set_seed\n>>> from datasets import load_dataset\n>>> import torch\n\n>>> dataset = load_dataset(\n...     \"hf-internal-testing/librispeech_asr_demo\", \"clean\", split=\"validation\"\n... )  # doctest: +IGNORE_RESULT\n>>> dataset = dataset.sort(\"id\")\n>>> sampling_rate = dataset.features[\"audio\"].sampling_rate\n\n>>> processor = SpeechT5Processor.from_pretrained(\"microsoft/speecht5_vc\")\n>>> model = SpeechT5ForSpeechToSpeech.from_pretrained(\"microsoft/speecht5_vc\")\n>>> vocoder = SpeechT5HifiGan.from_pretrained(\"microsoft/speecht5_hifigan\")\n\n>>> # audio file is decoded on the fly\n>>> inputs = processor(audio=dataset[0][\"audio\"][\"array\"], sampling_rate=sampling_rate, return_tensors=\"pt\")\n\n>>> speaker_embeddings = torch.zeros((1, 512))  # or load xvectors from a file\n\n>>> set_seed(555)  # make deterministic\n\n>>> # generate speech\n>>> speech = model.generate_speech(inputs[\"input_values\"], speaker_embeddings, vocoder=vocoder)\n>>> speech.shape\ntorch.Size([77824])\n```"]