- en: OWLv2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWLv2
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/owlv2](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/owlv2)'
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原始文本：[https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/owlv2](https://huggingface.co/docs/transformers/v4.37.2/en/model_doc/owlv2)
- en: null
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: OWLv2 was proposed in [Scaling Open-Vocabulary Object Detection](https://arxiv.org/abs/2306.09683)
    by Matthias Minderer, Alexey Gritsenko, Neil Houlsby. OWLv2 scales up [OWL-ViT](owlvit)
    using self-training, which uses an existing detector to generate pseudo-box annotations
    on image-text pairs. This results in large gains over the previous state-of-the-art
    for zero-shot object detection.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: OWLv2是由Matthias Minderer、Alexey Gritsenko和Neil Houlsby在[《扩展开放词汇目标检测》](https://arxiv.org/abs/2306.09683)中提出的。OWLv2通过自训练扩展了[OWL-ViT](owlvit)，利用现有的检测器在图像-文本对上生成伪框注释。这导致在零样本目标检测方面取得了比先前最先进技术的巨大进展。
- en: 'The abstract from the paper is the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 该论文的摘要如下：
- en: '*Open-vocabulary object detection has benefited greatly from pretrained vision-language
    models, but is still limited by the amount of available detection training data.
    While detection training data can be expanded by using Web image-text pairs as
    weak supervision, this has not been done at scales comparable to image-level pretraining.
    Here, we scale up detection data with self-training, which uses an existing detector
    to generate pseudo-box annotations on image-text pairs. Major challenges in scaling
    self-training are the choice of label space, pseudo-annotation filtering, and
    training efficiency. We present the OWLv2 model and OWL-ST self-training recipe,
    which address these challenges. OWLv2 surpasses the performance of previous state-of-the-art
    open-vocabulary detectors already at comparable training scales (~10M examples).
    However, with OWL-ST, we can scale to over 1B examples, yielding further large
    improvement: With an L/14 architecture, OWL-ST improves AP on LVIS rare classes,
    for which the model has seen no human box annotations, from 31.2% to 44.6% (43%
    relative improvement). OWL-ST unlocks Web-scale training for open-world localization,
    similar to what has been seen for image classification and language modelling.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*开放词汇目标检测受益于预训练的视觉语言模型，但仍受到可用检测训练数据量的限制。虽然可以通过使用Web图像-文本对作为弱监督来扩展检测训练数据，但这在可比较于图像级预训练的规模上尚未实现。在这里，我们通过自训练扩展检测数据，利用现有的检测器在图像-文本对上生成伪框注释。在扩展自训练中的主要挑战是标签空间的选择、伪注释过滤和训练效率。我们提出了OWLv2模型和OWL-ST自训练配方，以解决这些挑战。OWLv2在可比较的训练规模下（约1000万个示例）已经超越了先前最先进的开放词汇检测器的性能。然而，通过OWL-ST，我们可以扩展到超过10亿个示例，进一步取得了巨大的改进：在L/14架构下，OWL-ST将LVIS稀有类别的AP从31.2%提高到44.6%（相对改进43%）。OWL-ST为开放世界定位解锁了Web规模的训练，类似于图像分类和语言建模所见到的情况。*'
- en: '![drawing](../Images/66332976ce32b94eca100b548d25f741.png) OWLv2 high-level
    overview. Taken from the [original paper](https://arxiv.org/abs/2306.09683).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![drawing](../Images/66332976ce32b94eca100b548d25f741.png) OWLv2高层次概述。摘自[原始论文](https://arxiv.org/abs/2306.09683)。'
- en: This model was contributed by [nielsr](https://huggingface.co/nielsr). The original
    code can be found [here](https://github.com/google-research/scenic/tree/main/scenic/projects/owl_vit).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型由[nielsr](https://huggingface.co/nielsr)贡献。原始代码可以在[这里](https://github.com/google-research/scenic/tree/main/scenic/projects/owl_vit)找到。
- en: Usage example
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用法示例
- en: OWLv2 is, just like its predecessor [OWL-ViT](owlvit), a zero-shot text-conditioned
    object detection model. OWL-ViT uses [CLIP](clip) as its multi-modal backbone,
    with a ViT-like Transformer to get visual features and a causal language model
    to get the text features. To use CLIP for detection, OWL-ViT removes the final
    token pooling layer of the vision model and attaches a lightweight classification
    and box head to each transformer output token. Open-vocabulary classification
    is enabled by replacing the fixed classification layer weights with the class-name
    embeddings obtained from the text model. The authors first train CLIP from scratch
    and fine-tune it end-to-end with the classification and box heads on standard
    detection datasets using a bipartite matching loss. One or multiple text queries
    per image can be used to perform zero-shot text-conditioned object detection.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: OWLv2就像其前身[OWL-ViT](owlvit)一样，是一个零样本文本条件的目标检测模型。OWL-ViT使用[CLIP](clip)作为其多模态骨干，具有类似ViT的Transformer来获取视觉特征和因果语言模型来获取文本特征。为了将CLIP用于检测，OWL-ViT移除了视觉模型的最终标记池化层，并将轻量级分类和框头附加到每个Transformer输出标记上。通过用从文本模型获得的类名嵌入替换固定的分类层权重，实现了开放词汇分类。作者首先从头开始训练CLIP，然后使用二部匹配损失在标准检测数据集上端到端地微调它，包括分类和框头。每个图像可以使用一个或多个文本查询来执行零样本文本条件的目标检测。
- en: '[Owlv2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor)
    can be used to resize (or rescale) and normalize images for the model and [CLIPTokenizer](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizer)
    is used to encode the text. [Owlv2Processor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Processor)
    wraps [Owlv2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor)
    and [CLIPTokenizer](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizer)
    into a single instance to both encode the text and prepare the images. The following
    example shows how to perform object detection using [Owlv2Processor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Processor)
    and [Owlv2ForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ForObjectDetection).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[Owlv2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor)
    可用于调整（或重新缩放）和规范化模型的图像，而[CLIPTokenizer](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizer)
    用于编码文本。[Owlv2Processor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Processor)
    将[Owlv2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor)
    和[CLIPTokenizer](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizer)
    包装成单个实例，以便同时编码文本和准备图像。以下示例展示了如何使用[Owlv2Processor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Processor)
    和[Owlv2ForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ForObjectDetection)
    执行目标检测。'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Resources
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: A demo notebook on using OWLv2 for zero- and one-shot (image-guided) object
    detection can be found [here](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/OWLv2).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[这里](https://github.com/NielsRogge/Transformers-Tutorials/tree/master/OWLv2)找到使用OWLv2进行零样本和一次性（图像引导）目标检测的演示笔记本。
- en: '[Zero-shot object detection task guide](../tasks/zero_shot_object_detection)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[零样本目标检测任务指南](../tasks/zero_shot_object_detection)'
- en: The architecture of OWLv2 is identical to [OWL-ViT](owlvit), however the object
    detection head now also includes an objectness classifier, which predicts the
    (query-agnostic) likelihood that a predicted box contains an object (as opposed
    to background). The objectness score can be used to rank or filter predictions
    independently of text queries. Usage of OWLv2 is identical to [OWL-ViT](owlvit)
    with a new, updated image processor ([Owlv2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor)).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: OWLv2的架构与[OWL-ViT](owlvit) 相同，但是目标检测头现在还包括一个物体性分类器，用于预测（与查询无关的）预测框包含物体（而不是背景）的可能性。物体性分数可用于独立于文本查询对预测进行排名或过滤。使用OWLv2与[OWL-ViT](owlvit)
    相同，但使用新的、更新的图像处理器([Owlv2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor))。
- en: Owlv2Config
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Owlv2Config
- en: '### `class transformers.Owlv2Config`'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.Owlv2Config`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/configuration_owlv2.py#L256)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/configuration_owlv2.py#L256)'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Parameters
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`text_config` (`dict`, *optional*) — Dictionary of configuration options used
    to initialize [Owlv2TextConfig](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextConfig).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text_config` (`dict`, *可选*) — 用于初始化[Owlv2TextConfig](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextConfig)
    的配置选项字典。'
- en: '`vision_config` (`dict`, *optional*) — Dictionary of configuration options
    used to initialize [Owlv2VisionConfig](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionConfig).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vision_config` (`dict`, *可选*) — 用于初始化[Owlv2VisionConfig](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionConfig)
    的配置选项字典。'
- en: '`projection_dim` (`int`, *optional*, defaults to 512) — Dimensionality of text
    and vision projection layers.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`projection_dim` (`int`, *可选*, 默认为512) — 文本和视觉投影层的维度。'
- en: '`logit_scale_init_value` (`float`, *optional*, defaults to 2.6592) — The inital
    value of the *logit_scale* parameter. Default is used as per the original OWLv2
    implementation.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logit_scale_init_value` (`float`, *可选*, 默认为2.6592) — *logit_scale* 参数的初始值。默认值与原始OWLv2实现相同。'
- en: '`return_dict` (`bool`, *optional*, defaults to `True`) — Whether or not the
    model should return a dictionary. If `False`, returns a tuple.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *可选*, 默认为 `True`) — 模型是否应返回一个字典。如果为 `False`，则返回一个元组。'
- en: '`kwargs` (*optional*) — Dictionary of keyword arguments.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` (*可选*) — 关键字参数的字典。'
- en: '[Owlv2Config](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Config)
    is the configuration class to store the configuration of an [Owlv2Model](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Model).
    It is used to instantiate an OWLv2 model according to the specified arguments,
    defining the text model and vision model configs. Instantiating a configuration
    with the defaults will yield a similar configuration to that of the OWLv2 [google/owlv2-base-patch16](https://huggingface.co/google/owlv2-base-patch16)
    architecture.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[Owlv2Config](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Config)
    是存储[Owlv2Model](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Model)
    配置的配置类。它用于根据指定的参数实例化一个OWLv2模型，定义文本模型和视觉模型配置。使用默认值实例化配置将产生类似于OWLv2 [google/owlv2-base-patch16](https://huggingface.co/google/owlv2-base-patch16)
    架构的配置。'
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    ，可用于控制模型输出。阅读来自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    的文档以获取更多信息。
- en: '#### `from_text_vision_configs`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `from_text_vision_configs`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/configuration_owlv2.py#L325)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/configuration_owlv2.py#L325)'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Returns
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[Owlv2Config](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Config)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[Owlv2Config](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Config)'
- en: An instance of a configuration object
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象的实例
- en: Instantiate a [Owlv2Config](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Config)
    (or a derived class) from owlv2 text model configuration and owlv2 vision model
    configuration.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从owlv2文本模型配置和owlv2视觉模型配置实例化一个[Owlv2Config](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Config)（或派生类）。
- en: Owlv2TextConfig
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Owlv2TextConfig
- en: '### `class transformers.Owlv2TextConfig`'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.Owlv2TextConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/configuration_owlv2.py#L36)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/configuration_owlv2.py#L36)'
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Parameters
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`vocab_size` (`int`, *optional*, defaults to 49408) — Vocabulary size of the
    OWLv2 text model. Defines the number of different tokens that can be represented
    by the `inputs_ids` passed when calling [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel).'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vocab_size` (`int`, *optional*, defaults to 49408) — OWLv2文本模型的词汇量。定义了在调用[Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel)时可以表示的不同标记的数量。'
- en: '`hidden_size` (`int`, *optional*, defaults to 512) — Dimensionality of the
    encoder layers and the pooler layer.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_size` (`int`, *optional*, defaults to 512) — 编码器层和池化器层的维度。'
- en: '`intermediate_size` (`int`, *optional*, defaults to 2048) — Dimensionality
    of the “intermediate” (i.e., feed-forward) layer in the Transformer encoder.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`intermediate_size` (`int`, *optional*, defaults to 2048) — Transformer编码器中“中间”（即前馈）层的维度。'
- en: '`num_hidden_layers` (`int`, *optional*, defaults to 12) — Number of hidden
    layers in the Transformer encoder.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_hidden_layers` (`int`, *optional*, defaults to 12) — Transformer编码器中的隐藏层数。'
- en: '`num_attention_heads` (`int`, *optional*, defaults to 8) — Number of attention
    heads for each attention layer in the Transformer encoder.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_attention_heads` (`int`, *optional*, defaults to 8) — Transformer编码器中每个注意力层的注意力头数。'
- en: '`max_position_embeddings` (`int`, *optional*, defaults to 16) — The maximum
    sequence length that this model might ever be used with. Typically set this to
    something large just in case (e.g., 512 or 1024 or 2048).'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_position_embeddings` (`int`, *optional*, defaults to 16) — 该模型可能使用的最大序列长度。通常将其设置为较大的值以防万一（例如512、1024或2048）。'
- en: '`hidden_act` (`str` or `function`, *optional*, defaults to `"quick_gelu"`)
    — The non-linear activation function (function or string) in the encoder and pooler.
    If string, `"gelu"`, `"relu"`, `"selu"` and `"gelu_new"` ``"quick_gelu"` are supported.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_act` (`str` or `function`, *optional*, defaults to `"quick_gelu"`)
    — 编码器和池化器中的非线性激活函数（函数或字符串）。如果是字符串，支持`"gelu"`、`"relu"`、`"selu"`和`"gelu_new"`以及`"quick_gelu"`。'
- en: '`layer_norm_eps` (`float`, *optional*, defaults to 1e-05) — The epsilon used
    by the layer normalization layers.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layer_norm_eps` (`float`, *optional*, defaults to 1e-05) — 层归一化层使用的epsilon。'
- en: '`attention_dropout` (`float`, *optional*, defaults to 0.0) — The dropout ratio
    for the attention probabilities.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_dropout` (`float`, *optional*, defaults to 0.0) — 注意力概率的丢弃比率。'
- en: '`initializer_range` (`float`, *optional*, defaults to 0.02) — The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_range` (`float`, *optional*, defaults to 0.02) — 用于初始化所有权重矩阵的截断正态初始化器的标准差。'
- en: '`initializer_factor` (`float`, *optional*, defaults to 1.0) — A factor for
    initializing all weight matrices (should be kept to 1, used internally for initialization
    testing).'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_factor` (`float`, *optional*, defaults to 1.0) — 用于初始化所有权重矩阵的因子（应保持为1，用于内部初始化测试）。'
- en: '`pad_token_id` (`int`, *optional*, defaults to 0) — The id of the padding token
    in the input sequences.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pad_token_id` (`int`, *optional*, defaults to 0) — 输入序列中填充标记的id。'
- en: '`bos_token_id` (`int`, *optional*, defaults to 49406) — The id of the beginning-of-sequence
    token in the input sequences.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bos_token_id` (`int`, *optional*, defaults to 49406) — 输入序列中序列开始标记的id。'
- en: '`eos_token_id` (`int`, *optional*, defaults to 49407) — The id of the end-of-sequence
    token in the input sequences.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eos_token_id` (`int`, *optional*, defaults to 49407) — 输入序列中序列结束标记的id。'
- en: This is the configuration class to store the configuration of an [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel).
    It is used to instantiate an Owlv2 text encoder according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the Owlv2 [google/owlv2-base-patch16](https://huggingface.co/google/owlv2-base-patch16)
    architecture.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用于存储[Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel)配置的配置类。根据指定的参数实例化一个Owlv2文本编码器，定义模型架构。使用默认值实例化配置将产生类似于Owlv2
    [google/owlv2-base-patch16](https://huggingface.co/google/owlv2-base-patch16)架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)的文档以获取更多信息。
- en: 'Example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Owlv2VisionConfig
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Owlv2VisionConfig
- en: '### `class transformers.Owlv2VisionConfig`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.Owlv2VisionConfig`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/configuration_owlv2.py#L150)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/configuration_owlv2.py#L150)'
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Parameters
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`hidden_size` (`int`, *optional*, defaults to 768) — Dimensionality of the
    encoder layers and the pooler layer.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_size` (`int`, *optional*, defaults to 768) — 编码器层和池化器层的维度。'
- en: '`intermediate_size` (`int`, *optional*, defaults to 3072) — Dimensionality
    of the “intermediate” (i.e., feed-forward) layer in the Transformer encoder.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`intermediate_size` (`int`, *optional*, defaults to 3072) — Transformer编码器中“中间”（即前馈）层的维度。'
- en: '`num_hidden_layers` (`int`, *optional*, defaults to 12) — Number of hidden
    layers in the Transformer encoder.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_hidden_layers` (`int`, *optional*, defaults to 12) — Transformer编码器中的隐藏层数。'
- en: '`num_attention_heads` (`int`, *optional*, defaults to 12) — Number of attention
    heads for each attention layer in the Transformer encoder.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_attention_heads` (`int`, *optional*, defaults to 12) — Transformer编码器中每个注意力层的注意力头数。'
- en: '`num_channels` (`int`, *optional*, defaults to 3) — Number of channels in the
    input images.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`num_channels` (`int`, *optional*, defaults to 3) — 输入图像中的通道数。'
- en: '`image_size` (`int`, *optional*, defaults to 768) — The size (resolution) of
    each image.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_size` (`int`, *optional*, defaults to 768) — 每个图像的大小（分辨率）。'
- en: '`patch_size` (`int`, *optional*, defaults to 16) — The size (resolution) of
    each patch.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`patch_size` (`int`, *optional*, defaults to 16) — 每个补丁的大小（分辨率）。'
- en: '`hidden_act` (`str` or `function`, *optional*, defaults to `"quick_gelu"`)
    — The non-linear activation function (function or string) in the encoder and pooler.
    If string, `"gelu"`, `"relu"`, `"selu"` and `"gelu_new"` ``"quick_gelu"` are supported.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_act` (`str` or `function`, *optional*, defaults to `"quick_gelu"`)
    — 编码器和池化器中的非线性激活函数（函数或字符串）。如果是字符串，支持`"gelu"`、`"relu"`、`"selu"`和`"gelu_new"`以及`"quick_gelu"`。'
- en: '`layer_norm_eps` (`float`, *optional*, defaults to 1e-05) — The epsilon used
    by the layer normalization layers.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layer_norm_eps` (`float`, *optional*, defaults to 1e-05) — 层归一化层使用的epsilon。'
- en: '`attention_dropout` (`float`, *optional*, defaults to 0.0) — The dropout ratio
    for the attention probabilities.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_dropout` (`float`, *optional*, defaults to 0.0) — 注意力概率的丢弃比率。'
- en: '`initializer_range` (`float`, *optional*, defaults to 0.02) — The standard
    deviation of the truncated_normal_initializer for initializing all weight matrices.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_range` (`float`, *optional*, defaults to 0.02) — 用于初始化所有权重矩阵的截断正态初始化器的标准差。'
- en: '`initializer_factor` (`float`, *optional*, defaults to 1.0) — A factor for
    initializing all weight matrices (should be kept to 1, used internally for initialization
    testing).'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initializer_factor` (`float`, *optional*, defaults to 1.0) — 用于初始化所有权重矩阵的因子（应保持为1，用于内部初始化测试）。'
- en: This is the configuration class to store the configuration of an [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel).
    It is used to instantiate an OWLv2 image encoder according to the specified arguments,
    defining the model architecture. Instantiating a configuration with the defaults
    will yield a similar configuration to that of the OWLv2 [google/owlv2-base-patch16](https://huggingface.co/google/owlv2-base-patch16)
    architecture.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个配置类，用于存储[Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)的配置。根据指定的参数实例化一个OWLv2图像编码器，定义模型架构。使用默认值实例化配置将产生类似于OWLv2
    [google/owlv2-base-patch16](https://huggingface.co/google/owlv2-base-patch16)
    架构的配置。
- en: Configuration objects inherit from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    and can be used to control the model outputs. Read the documentation from [PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)
    for more information.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 配置对象继承自[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)，可用于控制模型输出。阅读[PretrainedConfig](/docs/transformers/v4.37.2/en/main_classes/configuration#transformers.PretrainedConfig)的文档以获取更多信息。
- en: 'Example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Owlv2ImageProcessor
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Owlv2ImageProcessor
- en: '### `class transformers.Owlv2ImageProcessor`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.Owlv2ImageProcessor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/image_processing_owlv2.py#L176)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/image_processing_owlv2.py#L176)'
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Parameters
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`do_rescale` (`bool`, *optional*, defaults to `True`) — Whether to rescale
    the image by the specified scale `rescale_factor`. Can be overriden by `do_rescale`
    in the `preprocess` method.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale` (`bool`, *optional*, defaults to `True`) — 是否按指定的比例`rescale_factor`对图像进行重新缩放。可以被`preprocess`方法中的`do_rescale`覆盖。'
- en: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) — Scale
    factor to use if rescaling the image. Can be overriden by `rescale_factor` in
    the `preprocess` method.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor` (`int` or `float`, *optional*, defaults to `1/255`) — 如果重新缩放图像，要使用的缩放因子。可以被`preprocess`方法中的`rescale_factor`覆盖。'
- en: '`do_pad` (`bool`, *optional*, defaults to `True`) — Whether to pad the image
    to a square with gray pixels on the bottom and the right. Can be overriden by
    `do_pad` in the `preprocess` method.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_pad` (`bool`, *optional*, defaults to `True`) — 是否将图像填充为带有灰色像素的正方形，位于底部和右侧。可以被`preprocess`方法中的`do_pad`覆盖。'
- en: '`do_resize` (`bool`, *optional*, defaults to `True`) — Controls whether to
    resize the image’s (height, width) dimensions to the specified `size`. Can be
    overriden by `do_resize` in the `preprocess` method.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`, *optional*, defaults to `True`) — 控制是否将图像的（高度、宽度）尺寸调整为指定的`size`。可以被`preprocess`方法中的`do_resize`覆盖。'
- en: '`size` (`Dict[str, int]` *optional*, defaults to `{"height" -- 960, "width":
    960}`): Size to resize the image to. Can be overriden by `size` in the `preprocess`
    method.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]` *optional*, defaults to `{"height" -- 960, "width":
    960}`): 要调整图像大小到的尺寸。可以被`preprocess`方法中的`size`覆盖。'
- en: '`resample` (`PILImageResampling`, *optional*, defaults to `Resampling.BILINEAR`)
    — Resampling method to use if resizing the image. Can be overriden by `resample`
    in the `preprocess` method.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resample` (`PILImageResampling`, *optional*, defaults to `Resampling.BILINEAR`)
    — 如果调整图像大小，要使用的重采样方法。可以被`preprocess`方法中的`resample`覆盖。'
- en: '`do_normalize` (`bool`, *optional*, defaults to `True`) — Whether to normalize
    the image. Can be overridden by the `do_normalize` parameter in the `preprocess`
    method.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize` (`bool`, *optional*, defaults to `True`) — 是否对图像进行归一化。可以被`preprocess`方法中的`do_normalize`参数覆盖。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `OPENAI_CLIP_MEAN`)
    — Mean to use if normalizing the image. This is a float or list of floats the
    length of the number of channels in the image. Can be overridden by the `image_mean`
    parameter in the `preprocess` method.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `OPENAI_CLIP_MEAN`)
    — 如果对图像进行归一化要使用的均值。这是一个浮点数或与图像通道数相同长度的浮点数列表。可以被`preprocess`方法中的`image_mean`参数覆盖。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `OPENAI_CLIP_STD`)
    — Standard deviation to use if normalizing the image. This is a float or list
    of floats the length of the number of channels in the image. Can be overridden
    by the `image_std` parameter in the `preprocess` method.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` 或 `List[float]`, *optional*, 默认为`OPENAI_CLIP_STD`) — 如果对图像进行归一化，则使用的标准差。这是一个浮点数或与图像中通道数相同长度的浮点数列表。可以被`preprocess`方法中的`image_std`参数覆盖。'
- en: Constructs an OWLv2 image processor.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个OWLv2图像处理器。
- en: '#### `preprocess`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `preprocess`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/image_processing_owlv2.py#L333)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/image_processing_owlv2.py#L333)'
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Parameters
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`images` (`ImageInput`) — Image to preprocess. Expects a single or batch of
    images with pixel values ranging from 0 to 255\. If passing in images with pixel
    values between 0 and 1, set `do_rescale=False`.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`images` (`ImageInput`) — 要预处理的图像。期望单个或批量的像素值范围为0到255的图像。如果传入像素值在0到1之间的图像，请设置`do_rescale=False`。'
- en: '`do_pad` (`bool`, *optional*, defaults to `self.do_pad`) — Whether to pad the
    image to a square with gray pixels on the bottom and the right.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_pad` (`bool`, *optional*, 默认为`self.do_pad`) — 是否将图像填充为带有灰色像素的正方形，位于底部和右侧。'
- en: '`do_resize` (`bool`, *optional*, defaults to `self.do_resize`) — Whether to
    resize the image.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_resize` (`bool`, *optional*, 默认为`self.do_resize`) — 是否调整图像大小。'
- en: '`size` (`Dict[str, int]`, *optional*, defaults to `self.size`) — Size to resize
    the image to.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size` (`Dict[str, int]`, *optional*, 默认为`self.size`) — 调整图像大小的尺寸。'
- en: '`do_rescale` (`bool`, *optional*, defaults to `self.do_rescale`) — Whether
    to rescale the image values between [0 - 1].'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_rescale` (`bool`, *optional*, defaults to `self.do_rescale`) — 是否将图像值重新缩放到[0-1]之间。'
- en: '`rescale_factor` (`float`, *optional*, defaults to `self.rescale_factor`) —
    Rescale factor to rescale the image by if `do_rescale` is set to `True`.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rescale_factor` (`float`, *optional*, 默认为`self.rescale_factor`) — 如果`do_rescale`设置为`True`，则重新缩放图像的重新缩放因子。'
- en: '`do_normalize` (`bool`, *optional*, defaults to `self.do_normalize`) — Whether
    to normalize the image.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do_normalize` (`bool`, *optional*, 默认为`self.do_normalize`) — 是否对图像进行归一化。'
- en: '`image_mean` (`float` or `List[float]`, *optional*, defaults to `self.image_mean`)
    — Image mean.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_mean` (`float` 或 `List[float]`, *optional*, 默认为`self.image_mean`) —
    图像均值。'
- en: '`image_std` (`float` or `List[float]`, *optional*, defaults to `self.image_std`)
    — Image standard deviation.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_std` (`float` 或 `List[float]`, *optional*, 默认为`self.image_std`) — 图像标准差。'
- en: '`return_tensors` (`str` or `TensorType`, *optional*) — The type of tensors
    to return. Can be one of:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_tensors` (`str` 或 `TensorType`, *optional*) — 要返回的张量类型。可以是以下之一：'
- en: 'Unset: Return a list of `np.ndarray`.'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未设置：返回一个`np.ndarray`列表。
- en: '`TensorType.TENSORFLOW` or `''tf''`: Return a batch of type `tf.Tensor`.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.TENSORFLOW` 或 `''tf''`: 返回类型为`tf.Tensor`的批次。'
- en: '`TensorType.PYTORCH` or `''pt''`: Return a batch of type `torch.Tensor`.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.PYTORCH` 或 `''pt''`: 返回类型为`torch.Tensor`的批次。'
- en: '`TensorType.NUMPY` or `''np''`: Return a batch of type `np.ndarray`.'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.NUMPY` 或 `''np''`: 返回类型为`np.ndarray`的批次。'
- en: '`TensorType.JAX` or `''jax''`: Return a batch of type `jax.numpy.ndarray`.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TensorType.JAX` 或 `''jax''`: 返回类型为`jax.numpy.ndarray`的批次。'
- en: '`data_format` (`ChannelDimension` or `str`, *optional*, defaults to `ChannelDimension.FIRST`)
    — The channel dimension format for the output image. Can be one of:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_format` (`ChannelDimension` 或 `str`, *optional*, 默认为`ChannelDimension.FIRST`)
    — 输出图像的通道维度格式。可以是以下之一：'
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_first"` 或 `ChannelDimension.FIRST`: 图像格式为(num_channels, height,
    width)。'
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_last"` 或 `ChannelDimension.LAST`: 图像格式为(height, width, num_channels)。'
- en: 'Unset: Use the channel dimension format of the input image.'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未设置：使用输入图像的通道维度格式。
- en: '`input_data_format` (`ChannelDimension` or `str`, *optional*) — The channel
    dimension format for the input image. If unset, the channel dimension format is
    inferred from the input image. Can be one of:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_data_format` (`ChannelDimension` 或 `str`, *optional*) — 输入图像的通道维度格式。如果未设置，将从输入图像中推断通道维度格式。可以是以下之一：'
- en: '`"channels_first"` or `ChannelDimension.FIRST`: image in (num_channels, height,
    width) format.'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_first"` 或 `ChannelDimension.FIRST`: 图像格式为(num_channels, height,
    width)。'
- en: '`"channels_last"` or `ChannelDimension.LAST`: image in (height, width, num_channels)
    format.'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"channels_last"` 或 `ChannelDimension.LAST`: 图像格式为(height, width, num_channels)。'
- en: '`"none"` or `ChannelDimension.NONE`: image in (height, width) format.'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"none"` 或 `ChannelDimension.NONE`: 图像格式为(height, width)。'
- en: Preprocess an image or batch of images.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 预处理一个图像或图像批次。
- en: '#### `post_process_object_detection`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `post_process_object_detection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/image_processing_owlv2.py#L464)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/image_processing_owlv2.py#L464)'
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Parameters
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`outputs` (`OwlViTObjectDetectionOutput`) — Raw outputs of the model.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs` (`OwlViTObjectDetectionOutput`) — 模型的原始输出。'
- en: '`threshold` (`float`, *optional*) — Score threshold to keep object detection
    predictions.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold` (`float`, *optional*) — 保留对象检测预测的分数阈值。'
- en: '`target_sizes` (`torch.Tensor` or `List[Tuple[int, int]]`, *optional*) — Tensor
    of shape `(batch_size, 2)` or list of tuples (`Tuple[int, int]`) containing the
    target size `(height, width)` of each image in the batch. If unset, predictions
    will not be resized.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_sizes` (`torch.Tensor` 或 `List[Tuple[int, int]]`, *optional*) — 形状为`(batch_size,
    2)`的张量或包含每个图像目标尺寸`(height, width)`的元组列表(`Tuple[int, int]`)。如果未设置，预测将不会被调整大小。'
- en: Returns
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[Dict]`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[Dict]`'
- en: A list of dictionaries, each dictionary containing the scores, labels and boxes
    for an image in the batch as predicted by the model.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个字典包含模型预测的批次中每个图像的分数、标签和框。
- en: Converts the raw output of [OwlViTForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/owlvit#transformers.OwlViTForObjectDetection)
    into final bounding boxes in (top_left_x, top_left_y, bottom_right_x, bottom_right_y)
    format.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 将[OwlViTForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/owlvit#transformers.OwlViTForObjectDetection)的原始输出转换为最终边界框，格式为(top_left_x,
    top_left_y, bottom_right_x, bottom_right_y)。
- en: '#### `post_process_image_guided_detection`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `post_process_image_guided_detection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/image_processing_owlv2.py#L520)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/image_processing_owlv2.py#L520)'
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Parameters
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`outputs` (`OwlViTImageGuidedObjectDetectionOutput`) — Raw outputs of the model.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs` (`OwlViTImageGuidedObjectDetectionOutput`) — 模型的原始输出。'
- en: '`threshold` (`float`, *optional*, defaults to 0.0) — Minimum confidence threshold
    to use to filter out predicted boxes.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`threshold` (`float`, *可选*, 默认为0.0) — 用于过滤预测框的最小置信度阈值。'
- en: '`nms_threshold` (`float`, *optional*, defaults to 0.3) — IoU threshold for
    non-maximum suppression of overlapping boxes.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nms_threshold` (`float`, *可选*, 默认为0.3) — 用于非最大抑制重叠框的IoU阈值。'
- en: '`target_sizes` (`torch.Tensor`, *optional*) — Tensor of shape (batch_size,
    2) where each entry is the (height, width) of the corresponding image in the batch.
    If set, predicted normalized bounding boxes are rescaled to the target sizes.
    If left to None, predictions will not be unnormalized.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_sizes` (`torch.Tensor`, *可选*) — 形状为(batch_size, 2)的张量，其中每个条目是批次中相应图像的(高度、宽度)。如果设置，预测的归一化边界框将重新缩放为目标大小。如果保持为None，则预测不会被反归一化。'
- en: Returns
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`List[Dict]`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`List[Dict]`'
- en: A list of dictionaries, each dictionary containing the scores, labels and boxes
    for an image in the batch as predicted by the model. All labels are set to None
    as `OwlViTForObjectDetection.image_guided_detection` perform one-shot object detection.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字典列表，每个字典包含批次中模型预测的图像的分数、标签和框。所有标签都设置为None，因为`OwlViTForObjectDetection.image_guided_detection`执行一次性目标检测。
- en: Converts the output of [OwlViTForObjectDetection.image_guided_detection()](/docs/transformers/v4.37.2/en/model_doc/owlvit#transformers.OwlViTForObjectDetection.image_guided_detection)
    into the format expected by the COCO api.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 将[OwlViTForObjectDetection.image_guided_detection()](/docs/transformers/v4.37.2/en/model_doc/owlvit#transformers.OwlViTForObjectDetection.image_guided_detection)的输出转换为COCO
    api期望的格式。
- en: Owlv2Processor
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Owlv2Processor
- en: '### `class transformers.Owlv2Processor`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.Owlv2Processor`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/processing_owlv2.py#L28)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/processing_owlv2.py#L28)'
- en: '[PRE11]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Parameters
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`image_processor` ([Owlv2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor))
    — The image processor is a required input.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_processor` ([Owlv2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor))
    — 图像处理器是必需的输入。'
- en: '`tokenizer` ([`CLIPTokenizer`, `CLIPTokenizerFast`]) — The tokenizer is a required
    input.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tokenizer` ([`CLIPTokenizer`, `CLIPTokenizerFast`]) — 标记器是必需的输入。'
- en: Constructs an Owlv2 processor which wraps [Owlv2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor)
    and [CLIPTokenizer](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizer)/[CLIPTokenizerFast](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizerFast)
    into a single processor that interits both the image processor and tokenizer functionalities.
    See the `__call__()` and [decode()](/docs/transformers/v4.37.2/en/model_doc/owlvit#transformers.OwlViTProcessor.decode)
    for more information.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个Owlv2处理器，将[Owlv2ImageProcessor](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor)和[CLIPTokenizer](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizer)/[CLIPTokenizerFast](/docs/transformers/v4.37.2/en/model_doc/clip#transformers.CLIPTokenizerFast)包装成一个单一处理器，继承了图像处理器和标记器功能。有关更多信息，请参阅`__call__()`和[decode()](/docs/transformers/v4.37.2/en/model_doc/owlvit#transformers.OwlViTProcessor.decode)。
- en: '#### `batch_decode`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `batch_decode`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/processing_owlv2.py#L178)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/processing_owlv2.py#L178)'
- en: '[PRE12]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This method forwards all its arguments to CLIPTokenizerFast’s [batch_decode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.batch_decode).
    Please refer to the docstring of this method for more information.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将其所有参数转发到CLIPTokenizerFast的[batch_decode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.batch_decode)。有关更多信息，请参阅此方法的文档字符串。
- en: '#### `decode`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `decode`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/processing_owlv2.py#L186)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/processing_owlv2.py#L186)'
- en: '[PRE13]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This method forwards all its arguments to CLIPTokenizerFast’s [decode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.decode).
    Please refer to the docstring of this method for more information.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将其所有参数转发到CLIPTokenizerFast的[decode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.decode)。有关更多信息，请参阅此方法的文档字符串。
- en: '#### `post_process_image_guided_detection`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `post_process_image_guided_detection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/processing_owlv2.py#L170)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/processing_owlv2.py#L170)'
- en: '[PRE14]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This method forwards all its arguments to `OwlViTImageProcessor.post_process_one_shot_object_detection`.
    Please refer to the docstring of this method for more information.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将其所有参数转发到`OwlViTImageProcessor.post_process_one_shot_object_detection`。有关更多信息，请参阅此方法的文档字符串。
- en: '#### `post_process_object_detection`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `post_process_object_detection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/processing_owlv2.py#L162)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/processing_owlv2.py#L162)'
- en: '[PRE15]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This method forwards all its arguments to [OwlViTImageProcessor.post_process_object_detection()](/docs/transformers/v4.37.2/en/model_doc/owlvit#transformers.OwlViTImageProcessor.post_process_object_detection).
    Please refer to the docstring of this method for more information.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将其所有参数转发到[OwlViTImageProcessor.post_process_object_detection()](/docs/transformers/v4.37.2/en/model_doc/owlvit#transformers.OwlViTImageProcessor.post_process_object_detection)。有关更多信息，请参阅此方法的文档字符串。
- en: Owlv2Model
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Owlv2Model
- en: '### `class transformers.Owlv2Model`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.Owlv2Model`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1014)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1014)'
- en: '[PRE16]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Parameters
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`config` (`Owvl2Config`) — Model configuration class with all the parameters
    of the model. Initializing with a config file does not load the weights associated
    with the model, only the configuration. Check out the [from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)
    method to load the model weights.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config` (`Owvl2Config`) — 具有模型所有参数的模型配置类。使用配置文件初始化不会加载与模型关联的权重，只加载配置。查看[from_pretrained()](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel.from_pretrained)方法以加载模型权重。'
- en: This model inherits from [PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel).
    Check the superclass documentation for the generic methods the library implements
    for all its model (such as downloading or saving, resizing the input embeddings,
    pruning heads etc.)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型继承自[PreTrainedModel](/docs/transformers/v4.37.2/en/main_classes/model#transformers.PreTrainedModel)。查看超类文档以获取库实现的所有模型的通用方法（例如下载或保存，调整输入嵌入大小，修剪头等）。
- en: This model is also a PyTorch [torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)
    subclass. Use it as a regular PyTorch Module and refer to the PyTorch documentation
    for all matter related to general usage and behavior.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型还是PyTorch的[torch.nn.Module](https://pytorch.org/docs/stable/nn.html#torch.nn.Module)子类。将其用作常规的PyTorch模块，并参考PyTorch文档以获取与一般用法和行为相关的所有事项。
- en: '#### `forward`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1131)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1131)'
- en: '[PRE17]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Parameters
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`input_ids` (`torch.LongTensor` of shape `(batch_size, sequence_length)`) —
    Indices of input sequence tokens in the vocabulary. Indices can be obtained using
    [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer).
    See [PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)
    and [PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)
    for details. [What are input IDs?](../glossary#input-ids)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_ids` (`torch.LongTensor`，形状为`(batch_size, sequence_length)`) — 词汇表中输入序列标记的索引。可以使用[AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer)获取索引。有关详细信息，请参见[PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)和[PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)。[什么是输入ID？](../glossary#input-ids)'
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor`，形状为`(batch_size, num_channels, height,
    width)`) — 像素值。'
- en: '`attention_mask` (`torch.Tensor` of shape `(batch_size, sequence_length)`,
    *optional*) — Mask to avoid performing attention on padding token indices. Mask
    values selected in `[0, 1]`:'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask` (`torch.Tensor`，形状为`(batch_size, sequence_length)`，*可选*) —
    避免在填充标记索引上执行注意力的掩码。选择的掩码值在`[0, 1]`中：'
- en: 1 for tokens that are `not masked`,
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`未被掩盖`的标记为1，
- en: 0 for tokens that are `masked`. [What are attention masks?](../glossary#attention-mask)
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`被掩盖`的标记为0。[什么是注意力掩码？](../glossary#attention-mask)
- en: '`return_loss` (`bool`, *optional*) — Whether or not to return the contrastive
    loss.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_loss` (`bool`, *可选*) — 是否返回对比损失。'
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions` (`bool`, *可选*) — 是否返回所有注意力层的注意力张量。有关更多详细信息，请参见返回的张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`, *可选*) — 是否返回所有层的隐藏状态。有关更多详细信息，请参见返回的张量下的`hidden_states`。'
- en: '`return_base_image_embeds` (`bool`, *optional*) — Whether or not to return
    the base image embeddings.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_base_image_embeds` (`bool`, *可选*) — 是否返回基本图像嵌入。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *可选*) — 是否返回[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是普通元组。'
- en: Returns
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`transformers.models.owlv2.modeling_owlv2.Owlv2Output` or `tuple(torch.FloatTensor)`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformers.models.owlv2.modeling_owlv2.Owlv2Output`或`tuple(torch.FloatTensor)`'
- en: A `transformers.models.owlv2.modeling_owlv2.Owlv2Output` or a tuple of `torch.FloatTensor`
    (if `return_dict=False` is passed or when `config.return_dict=False`) comprising
    various elements depending on the configuration (`<class 'transformers.models.owlv2.configuration_owlv2.Owlv2Config'>`)
    and inputs.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`transformers.models.owlv2.modeling_owlv2.Owlv2Output`或一个`torch.FloatTensor`元组（如果传递了`return_dict=False`或`config.return_dict=False`）包含根据配置（`<class
    'transformers.models.owlv2.configuration_owlv2.Owlv2Config'>`）和输入的各种元素。
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `return_loss`
    is `True`) — Contrastive loss for image-text similarity.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss` (`torch.FloatTensor`，形状为`(1,)`，*可选*，当`return_loss`为`True`时返回) — 图像-文本相似性的对比损失。'
- en: '`logits_per_image` (`torch.FloatTensor` of shape `(image_batch_size, text_batch_size)`)
    — The scaled dot product scores between `image_embeds` and `text_embeds`. This
    represents the image-text similarity scores.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits_per_image` (`torch.FloatTensor`，形状为`(image_batch_size, text_batch_size)`)
    — `image_embeds`和`text_embeds`之间的缩放点积分数。这代表图像-文本相似性分数。'
- en: '`logits_per_text` (`torch.FloatTensor` of shape `(text_batch_size, image_batch_size)`)
    — The scaled dot product scores between `text_embeds` and `image_embeds`. This
    represents the text-image similarity scores.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits_per_text` (`torch.FloatTensor`，形状为`(text_batch_size, image_batch_size)`)
    — `text_embeds`和`image_embeds`之间的缩放点积分数。这代表文本-图像相似性分数。'
- en: '`text_embeds` (`torch.FloatTensor` of shape `(batch_size * num_max_text_queries,
    output_dim`) — The text embeddings obtained by applying the projection layer to
    the pooled output of [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel).'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text_embeds` (`torch.FloatTensor` of shape `(batch_size * num_max_text_queries,
    output_dim`) — 通过将池化输出应用于[Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel)的投影层获得的文本嵌入。'
- en: '`image_embeds` (`torch.FloatTensor` of shape `(batch_size, output_dim`) — The
    image embeddings obtained by applying the projection layer to the pooled output
    of [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel).'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_embeds` (`torch.FloatTensor` of shape `(batch_size, output_dim`) — 通过将池化输出应用于[Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)的投影层获得的图像嵌入。'
- en: '`text_model_output` (Tuple`BaseModelOutputWithPooling`) — The output of the
    [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel).'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text_model_output` (Tuple`BaseModelOutputWithPooling`) — [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel)的输出。'
- en: '`vision_model_output` (`BaseModelOutputWithPooling`) — The output of the [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel).'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vision_model_output` (`BaseModelOutputWithPooling`) — [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)的输出。'
- en: The [Owlv2Model](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Model)
    forward method, overrides the `__call__` special method.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[Owlv2Model](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Model)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前向传递的配方需要在此函数内定义，但应该在此之后调用`Module`实例，而不是这个，因为前者负责运行预处理和后处理步骤，而后者则默默地忽略它们。
- en: 'Examples:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE18]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '#### `get_text_features`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `get_text_features`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1051)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1051)'
- en: '[PRE19]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Parameters
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`input_ids` (`torch.LongTensor` of shape `(batch_size * num_max_text_queries,
    sequence_length)`) — Indices of input sequence tokens in the vocabulary. Indices
    can be obtained using [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer).
    See [PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)
    and [PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)
    for details. [What are input IDs?](../glossary#input-ids)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_ids` (`torch.LongTensor` of shape `(batch_size * num_max_text_queries,
    sequence_length)`) — 词汇表中输入序列标记的索引。可以使用[AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer)获取索引。有关详细信息，请参见[PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)和[PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)。[什么是输入ID？](../glossary#input-ids)'
- en: '`attention_mask` (`torch.Tensor` of shape `(batch_size, num_max_text_queries,
    sequence_length)`, *optional*) — Mask to avoid performing attention on padding
    token indices. Mask values selected in `[0, 1]`:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask` (`torch.Tensor` of shape `(batch_size, num_max_text_queries,
    sequence_length)`, *optional*) — 避免在填充标记索引上执行注意力的掩码。选择在`[0, 1]`中的掩码值：'
- en: 1 for tokens that are `not masked`,
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1表示未被掩盖的标记，
- en: 0 for tokens that are `masked`. [What are attention masks?](../glossary#attention-mask)
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0表示被掩盖的标记。[什么是注意力掩码？](../glossary#attention-mask)
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions` (`bool`, *optional*) — 是否返回所有注意力层的注意力张量。有关更多详细信息，请参见返回张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`, *optional*) — 是否返回所有层的隐藏状态。有关更多详细信息，请参见返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *optional*) — 是否返回一个[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是一个普通的元组。'
- en: Returns
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: text_features (`torch.FloatTensor` of shape `(batch_size, output_dim`)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: text_features (`torch.FloatTensor` of shape `(batch_size, output_dim`)
- en: The text embeddings obtained by applying the projection layer to the pooled
    output of [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将池化输出应用于[Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel)的投影层获得的文本嵌入。
- en: The [Owlv2Model](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Model)
    forward method, overrides the `__call__` special method.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[Owlv2Model](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Model)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前向传递的配方需要在此函数内定义，但应该在此之后调用`Module`实例，而不是这个，因为前者负责运行预处理和后处理步骤，而后者则默默地忽略它们。
- en: 'Examples:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE20]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '#### `get_image_features`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `get_image_features`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1086)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1086)'
- en: '[PRE21]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Parameters
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — 像素值。'
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions`（`bool`，*可选*）— 是否返回所有注意力层的注意力张量。有关更多详细信息，请参见返回张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states`（`bool`，*可选*）— 是否返回所有层的隐藏状态。有关更多详细信息，请参见返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict`（`bool`，*可选*）— 是否返回[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是普通元组。'
- en: Returns
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: image_features (`torch.FloatTensor` of shape `(batch_size, output_dim`)
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: image_features（形状为`(batch_size, output_dim)`的`torch.FloatTensor`
- en: The image embeddings obtained by applying the projection layer to the pooled
    output of [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将投影层应用于[Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)的汇聚输出获得的图像嵌入。
- en: The [Owlv2Model](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Model)
    forward method, overrides the `__call__` special method.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '[Owlv2Model](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2Model)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的方法需要在此函数内定义，但应该在此之后调用`Module`实例，而不是在此处调用，因为前者负责运行预处理和后处理步骤，而后者会默默地忽略它们。
- en: 'Examples:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE22]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Owlv2TextModel
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Owlv2TextModel
- en: '### `class transformers.Owlv2TextModel`'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.Owlv2TextModel`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L852)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L852)'
- en: '[PRE23]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '#### `forward`'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L867)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L867)'
- en: '[PRE24]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Parameters
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`input_ids` (`torch.LongTensor` of shape `(batch_size * num_max_text_queries,
    sequence_length)`) — Indices of input sequence tokens in the vocabulary. Indices
    can be obtained using [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer).
    See [PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)
    and [PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)
    for details. [What are input IDs?](../glossary#input-ids)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_ids`（形状为`(batch_size * num_max_text_queries, sequence_length)`的`torch.LongTensor`）—
    词汇表中输入序列标记的索引。可以使用[AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer)获取索引。有关详细信息，请参见[PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)和[PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)。[什么是输入ID？](../glossary#input-ids)'
- en: '`attention_mask` (`torch.Tensor` of shape `(batch_size, num_max_text_queries,
    sequence_length)`, *optional*) — Mask to avoid performing attention on padding
    token indices. Mask values selected in `[0, 1]`:'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask`（形状为`(batch_size, num_max_text_queries, sequence_length)`的`torch.Tensor`，*可选*）—
    避免在填充标记索引上执行注意力的蒙版。在`[0, 1]`中选择的蒙版值：'
- en: 1 for tokens that are `not masked`,
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于“未屏蔽”的标记返回1，
- en: 0 for tokens that are `masked`. [What are attention masks?](../glossary#attention-mask)
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于“屏蔽”的标记返回0。[什么是注意力蒙版？](../glossary#attention-mask)
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions`（`bool`，*可选*）— 是否返回所有注意力层的注意力张量。有关更多详细信息，请参见返回张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states`（`bool`，*可选*）— 是否返回所有层的隐藏状态。有关更多详细信息，请参见返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict`（`bool`，*可选*）— 是否返回[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是普通元组。'
- en: Returns
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)
    or `tuple(torch.FloatTensor)`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)或`tuple(torch.FloatTensor)`'
- en: A [transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration (`<class 'transformers.models.owlv2.configuration_owlv2.Owlv2TextConfig'>`)
    and inputs.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)或一个`torch.FloatTensor`元组（如果传递了`return_dict=False`或`config.return_dict=False`时）包含各种元素，这取决于配置（`<class
    'transformers.models.owlv2.configuration_owlv2.Owlv2TextConfig'>`）和输入。
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`) — Sequence of hidden-states at the output of the last layer of
    the model.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_hidden_state`（形状为`(batch_size, sequence_length, hidden_size)`的`torch.FloatTensor`）—
    模型最后一层的隐藏状态序列。'
- en: '`pooler_output` (`torch.FloatTensor` of shape `(batch_size, hidden_size)`)
    — Last layer hidden-state of the first token of the sequence (classification token)
    after further processing through the layers used for the auxiliary pretraining
    task. E.g. for BERT-family of models, this returns the classification token after
    processing through a linear layer and a tanh activation function. The linear layer
    weights are trained from the next sentence prediction (classification) objective
    during pretraining.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pooler_output` (`torch.FloatTensor` of shape `(batch_size, hidden_size)`)
    — 经过用于辅助预训练任务的层进一步处理后，序列中第一个标记（分类标记）的最后一层隐藏状态。例如，对于BERT系列模型，这将返回经过线性层和tanh激活函数处理后的分类标记。线性层的权重是在预训练期间从下一个句子预测（分类）目标中训练的。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, 当传递`output_hidden_states=True`或当`config.output_hidden_states=True`时返回)
    — 形状为`(batch_size, sequence_length, hidden_size)`的`torch.FloatTensor`元组（如果模型有嵌入层，则为嵌入的输出+每层的输出）。'
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模型在每一层输出的隐藏状态以及可选的初始嵌入输出。
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, 当传递`output_attentions=True`或当`config.output_attentions=True`时返回)
    — 形状为`(batch_size, num_heads, sequence_length, sequence_length)`的`torch.FloatTensor`元组（每层一个）。'
- en: Attentions weights after the attention softmax, used to compute the weighted
    average in the self-attention heads.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意力softmax后的注意力权重，用于计算自注意力头中的加权平均值。
- en: The [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel)
    forward method, overrides the `__call__` special method.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '[Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的步骤需要在此函数内定义，但应该在此之后调用`Module`实例，而不是这个，因为前者负责运行预处理和后处理步骤，而后者会默默地忽略它们。
- en: 'Examples:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE25]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Owlv2VisionModel
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Owlv2VisionModel
- en: '### `class transformers.Owlv2VisionModel`'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.Owlv2VisionModel`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L964)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L964)'
- en: '[PRE26]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '#### `forward`'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L977)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L977)'
- en: '[PRE27]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Parameters
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — 像素值。'
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions` (`bool`, *optional*) — 是否返回所有注意力层的注意力张量。有关更多详细信息，请参阅返回张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`, *optional*) — 是否返回所有层的隐藏状态。有关更多详细信息，请参阅返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *optional*) — 是否返回一个[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是一个普通的元组。'
- en: Returns
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '[transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)
    or `tuple(torch.FloatTensor)`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '[transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)或`tuple(torch.FloatTensor)`'
- en: A [transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration (`<class 'transformers.models.owlv2.configuration_owlv2.Owlv2VisionConfig'>`)
    and inputs.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 一个[transformers.modeling_outputs.BaseModelOutputWithPooling](/docs/transformers/v4.37.2/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling)或一个`torch.FloatTensor`元组（如果传递`return_dict=False`或当`config.return_dict=False`时）包含根据配置(`<class
    'transformers.models.owlv2.configuration_owlv2.Owlv2VisionConfig'>`)和输入的不同元素。
- en: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`) — Sequence of hidden-states at the output of the last layer of
    the model.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`last_hidden_state` (`torch.FloatTensor` of shape `(batch_size, sequence_length,
    hidden_size)`) — 模型最后一层的隐藏状态序列。'
- en: '`pooler_output` (`torch.FloatTensor` of shape `(batch_size, hidden_size)`)
    — Last layer hidden-state of the first token of the sequence (classification token)
    after further processing through the layers used for the auxiliary pretraining
    task. E.g. for BERT-family of models, this returns the classification token after
    processing through a linear layer and a tanh activation function. The linear layer
    weights are trained from the next sentence prediction (classification) objective
    during pretraining.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pooler_output` (`torch.FloatTensor` of shape `(batch_size, hidden_size)`)
    — 序列的第一个标记（分类标记）的最后一层隐藏状态，在通过用于辅助预训练任务的层进一步处理后。例如，对于 BERT 系列模型，这返回经过线性层和双曲正切激活函数处理后的分类标记。线性层的权重是在预训练期间从下一个句子预测（分类）目标中训练的。'
- en: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_hidden_states=True`
    is passed or when `config.output_hidden_states=True`) — Tuple of `torch.FloatTensor`
    (one for the output of the embeddings, if the model has an embedding layer, +
    one for the output of each layer) of shape `(batch_size, sequence_length, hidden_size)`.'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hidden_states` (`tuple(torch.FloatTensor)`, *optional*, 当传递 `output_hidden_states=True`
    或 `config.output_hidden_states=True` 时返回) — 形状为 `(batch_size, sequence_length,
    hidden_size)` 的 `torch.FloatTensor` 元组（如果模型有嵌入层，则为嵌入输出的输出 + 每层的输出）。'
- en: Hidden-states of the model at the output of each layer plus the optional initial
    embedding outputs.
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模型在每一层输出的隐藏状态加上可选的初始嵌入输出。
- en: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, returned when `output_attentions=True`
    is passed or when `config.output_attentions=True`) — Tuple of `torch.FloatTensor`
    (one for each layer) of shape `(batch_size, num_heads, sequence_length, sequence_length)`.'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attentions` (`tuple(torch.FloatTensor)`, *optional*, 当传递 `output_attentions=True`
    或 `config.output_attentions=True` 时返回) — 形状为 `(batch_size, num_heads, sequence_length,
    sequence_length)` 的 `torch.FloatTensor` 元组（每层一个）。'
- en: Attentions weights after the attention softmax, used to compute the weighted
    average in the self-attention heads.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在注意力 softmax 之后的注意力权重，用于计算自注意力头中的加权平均值。
- en: The [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)
    forward method, overrides the `__call__` special method.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)
    的前向方法，覆盖了 `__call__` 特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前向传递的配方需要在此函数内定义，但应该在此之后调用 `Module` 实例，而不是在此处调用，因为前者负责运行预处理和后处理步骤，而后者则默默地忽略它们。
- en: 'Examples:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE28]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Owlv2ForObjectDetection
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Owlv2ForObjectDetection
- en: '### `class transformers.Owlv2ForObjectDetection`'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '### `class transformers.Owlv2ForObjectDetection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1300)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1300)'
- en: '[PRE29]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '#### `forward`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `forward`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1654)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[<来源>](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1654)'
- en: '[PRE30]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Parameters
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — 像素值。'
- en: '`input_ids` (`torch.LongTensor` of shape `(batch_size * num_max_text_queries,
    sequence_length)`, *optional*) — Indices of input sequence tokens in the vocabulary.
    Indices can be obtained using [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer).
    See [PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)
    and [PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)
    for details. [What are input IDs?](../glossary#input-ids).'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`input_ids` (`torch.LongTensor` of shape `(batch_size * num_max_text_queries,
    sequence_length)`, *optional*) — 词汇表中输入序列标记的索引。可以使用 [AutoTokenizer](/docs/transformers/v4.37.2/en/model_doc/auto#transformers.AutoTokenizer)
    获取索引。有关详细信息，请参阅 [PreTrainedTokenizer.encode()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode)
    和 [PreTrainedTokenizer.`call`()](/docs/transformers/v4.37.2/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__)。[什么是输入
    ID？](../glossary#input-ids)。'
- en: '`attention_mask` (`torch.Tensor` of shape `(batch_size, num_max_text_queries,
    sequence_length)`, *optional*) — Mask to avoid performing attention on padding
    token indices. Mask values selected in `[0, 1]`:'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attention_mask` (`torch.Tensor` of shape `(batch_size, num_max_text_queries,
    sequence_length)`, *optional*) — 用于避免在填充标记索引上执行注意力的掩码。掩码值选在 `[0, 1]` 之间：'
- en: 1 for tokens that are `not masked`,
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 用于 `not masked` 的标记，
- en: 0 for tokens that are `masked`. [What are attention masks?](../glossary#attention-mask)
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 0 用于 `masked` 的标记。[什么是注意力掩码？](../glossary#attention-mask)
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    last hidden state. See `text_model_last_hidden_state` and `vision_model_last_hidden_state`
    under returned tensors for more detail.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`, *optional*) — 是否返回最后一个隐藏状态。有关更多详细信息，请参阅返回张量中的
    `text_model_last_hidden_state` 和 `vision_model_last_hidden_state`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`, *optional*) — 是否返回 [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    而不是普通元组。'
- en: Returns
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`transformers.models.owlv2.modeling_owlv2.Owlv2ObjectDetectionOutput` or `tuple(torch.FloatTensor)`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformers.models.owlv2.modeling_owlv2.Owlv2ObjectDetectionOutput` 或 `tuple(torch.FloatTensor)`'
- en: A `transformers.models.owlv2.modeling_owlv2.Owlv2ObjectDetectionOutput` or a
    tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration (`<class 'transformers.models.owlv2.configuration_owlv2.Owlv2Config'>`)
    and inputs.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `transformers.models.owlv2.modeling_owlv2.Owlv2ObjectDetectionOutput` 或一个
    `torch.FloatTensor` 元组（如果传递了 `return_dict=False` 或 `config.return_dict=False`
    或 `config.return_dict=False`）包含根据配置（`<class 'transformers.models.owlv2.configuration_owlv2.Owlv2Config'>`）和输入而异的各种元素。
- en: '`loss` (`torch.FloatTensor` of shape `(1,)`, *optional*, returned when `labels`
    are provided)) — Total loss as a linear combination of a negative log-likehood
    (cross-entropy) for class prediction and a bounding box loss. The latter is defined
    as a linear combination of the L1 loss and the generalized scale-invariant IoU
    loss.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss` (`torch.FloatTensor`，形状为`(1,)`，*可选*，当提供`labels`时返回)） — 总损失，作为类别预测的负对数似然（交叉熵）和边界框损失的线性组合。后者被定义为L1损失和广义尺度不变IoU损失的线性组合。'
- en: '`loss_dict` (`Dict`, *optional*) — A dictionary containing the individual losses.
    Useful for logging.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loss_dict` (`Dict`，*可选*） — 包含各个损失的字典。用于记录。'
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, num_patches, num_queries)`)
    — Classification logits (including no-object) for all queries.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits` (`torch.FloatTensor`，形状为`(batch_size, num_patches, num_queries)`)
    — 所有查询的分类logits（包括无对象）。'
- en: '`objectness_logits` (`torch.FloatTensor` of shape `(batch_size, num_patches,
    1)`) — The objectness logits of all image patches. OWL-ViT represents images as
    a set of image patches where the total number of patches is (image_size / patch_size)**2.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`objectness_logits` (`torch.FloatTensor`，形状为`(batch_size, num_patches, 1)`)
    — 所有图像补丁的目标性logits。OWL-ViT将图像表示为一组图像补丁，其中补丁的总数为（图像大小/补丁大小）**2。'
- en: '`pred_boxes` (`torch.FloatTensor` of shape `(batch_size, num_patches, 4)`)
    — Normalized boxes coordinates for all queries, represented as (center_x, center_y,
    width, height). These values are normalized in [0, 1], relative to the size of
    each individual image in the batch (disregarding possible padding). You can use
    [post_process_object_detection()](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor.post_process_object_detection)
    to retrieve the unnormalized bounding boxes.'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pred_boxes` (`torch.FloatTensor`，形状为`(batch_size, num_patches, 4)`) — 所有查询的归一化框坐标，表示为（中心_x，中心_y，宽度，高度）。这些值在[0,
    1]范围内归一化，相对于批处理中每个单独图像的大小（忽略可能的填充）。您可以使用[post_process_object_detection()](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor.post_process_object_detection)来检索未归一化的边界框。'
- en: '`text_embeds` (`torch.FloatTensor` of shape `(batch_size, num_max_text_queries,
    output_dim`) — The text embeddings obtained by applying the projection layer to
    the pooled output of [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel).'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text_embeds` (`torch.FloatTensor`，形状为`(batch_size, num_max_text_queries, output_dim`)
    — 通过将投影层应用于[Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel)的汇集输出获得的文本嵌入。'
- en: '`image_embeds` (`torch.FloatTensor` of shape `(batch_size, patch_size, patch_size,
    output_dim`) — Pooled output of [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel).
    OWLv2 represents images as a set of image patches and computes image embeddings
    for each patch.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_embeds` (`torch.FloatTensor`，形状为`(batch_size, patch_size, patch_size,
    output_dim`) — [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)的汇集输出。OWLv2将图像表示为一组图像补丁，并为每个补丁计算图像嵌入。'
- en: '`class_embeds` (`torch.FloatTensor` of shape `(batch_size, num_patches, hidden_size)`)
    — Class embeddings of all image patches. OWLv2 represents images as a set of image
    patches where the total number of patches is (image_size / patch_size)**2.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_embeds` (`torch.FloatTensor`，形状为`(batch_size, num_patches, hidden_size)`)
    — 所有图像补丁的类别嵌入。OWLv2将图像表示为一组图像补丁，其中补丁的总数为（图像大小/补丁大小）**2。'
- en: '`text_model_output` (Tuple`BaseModelOutputWithPooling`) — The output of the
    [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel).'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text_model_output` (Tuple`BaseModelOutputWithPooling`) — [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel)的输出。'
- en: '`vision_model_output` (`BaseModelOutputWithPooling`) — The output of the [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel).'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vision_model_output` (`BaseModelOutputWithPooling`) — [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)的输出。'
- en: The [Owlv2ForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ForObjectDetection)
    forward method, overrides the `__call__` special method.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[Owlv2ForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ForObjectDetection)的前向方法，覆盖`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的步骤需要在此函数内定义，但应该在此之后调用`Module`实例，而不是在此处调用，因为前者负责运行预处理和后处理步骤，而后者会默默地忽略它们。
- en: 'Examples:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE31]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '#### `image_guided_detection`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '#### `image_guided_detection`'
- en: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1529)'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '[< source >](https://github.com/huggingface/transformers/blob/v4.37.2/src/transformers/models/owlv2/modeling_owlv2.py#L1529)'
- en: '[PRE32]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Parameters
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: '`pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels, height,
    width)`) — Pixel values.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixel_values` (`torch.FloatTensor`，形状为`(batch_size, num_channels, height,
    width)`) — 像素值。'
- en: '`query_pixel_values` (`torch.FloatTensor` of shape `(batch_size, num_channels,
    height, width)`) — Pixel values of query image(s) to be detected. Pass in one
    query image per target image.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_pixel_values` (`torch.FloatTensor`，形状为`(batch_size, num_channels, height,
    width)`) — 要检测的查询图像的像素值。每个目标图像传入一个查询图像。'
- en: '`output_attentions` (`bool`, *optional*) — Whether or not to return the attentions
    tensors of all attention layers. See `attentions` under returned tensors for more
    detail.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_attentions` (`bool`，*可选*） — 是否返回所有注意力层的注意力张量。有关更多详细信息，请参阅返回张量下的`attentions`。'
- en: '`output_hidden_states` (`bool`, *optional*) — Whether or not to return the
    hidden states of all layers. See `hidden_states` under returned tensors for more
    detail.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`output_hidden_states` (`bool`，*可选*） — 是否返回所有层的隐藏状态。有关更多详细信息，请参阅返回张量下的`hidden_states`。'
- en: '`return_dict` (`bool`, *optional*) — Whether or not to return a [ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)
    instead of a plain tuple.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return_dict` (`bool`，*可选*） — 是否返回[ModelOutput](/docs/transformers/v4.37.2/en/main_classes/output#transformers.utils.ModelOutput)而不是普通元组。'
- en: Returns
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 返回
- en: '`transformers.models.owlv2.modeling_owlv2.Owlv2ImageGuidedObjectDetectionOutput`
    or `tuple(torch.FloatTensor)`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformers.models.owlv2.modeling_owlv2.Owlv2ImageGuidedObjectDetectionOutput`
    或 `tuple(torch.FloatTensor)`'
- en: A `transformers.models.owlv2.modeling_owlv2.Owlv2ImageGuidedObjectDetectionOutput`
    or a tuple of `torch.FloatTensor` (if `return_dict=False` is passed or when `config.return_dict=False`)
    comprising various elements depending on the configuration (`<class 'transformers.models.owlv2.configuration_owlv2.Owlv2Config'>`)
    and inputs.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`transformers.models.owlv2.modeling_owlv2.Owlv2ImageGuidedObjectDetectionOutput`
    或一个`torch.FloatTensor`元组（如果传递了`return_dict=False`或`config.return_dict=False`）包含各种元素，具体取决于配置（`<class
    'transformers.models.owlv2.configuration_owlv2.Owlv2Config'>`）和输入。
- en: '`logits` (`torch.FloatTensor` of shape `(batch_size, num_patches, num_queries)`)
    — Classification logits (including no-object) for all queries.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logits` (`torch.FloatTensor`，形状为`(batch_size, num_patches, num_queries)`)
    — 所有查询的分类logits（包括无对象）。'
- en: '`target_pred_boxes` (`torch.FloatTensor` of shape `(batch_size, num_patches,
    4)`) — Normalized boxes coordinates for all queries, represented as (center_x,
    center_y, width, height). These values are normalized in [0, 1], relative to the
    size of each individual target image in the batch (disregarding possible padding).
    You can use [post_process_object_detection()](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor.post_process_object_detection)
    to retrieve the unnormalized bounding boxes.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`target_pred_boxes` (`torch.FloatTensor`，形状为`(batch_size, num_patches, 4)`)
    — 所有查询的标准化框坐标，表示为（中心_x，中心_y，宽度，高度）。这些值在[0, 1]范围内标准化，相对于批处理中每个单独目标图像的大小（忽略可能的填充）。您可以使用[post_process_object_detection()](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor.post_process_object_detection)来检索未标准化的边界框。'
- en: '`query_pred_boxes` (`torch.FloatTensor` of shape `(batch_size, num_patches,
    4)`) — Normalized boxes coordinates for all queries, represented as (center_x,
    center_y, width, height). These values are normalized in [0, 1], relative to the
    size of each individual query image in the batch (disregarding possible padding).
    You can use [post_process_object_detection()](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor.post_process_object_detection)
    to retrieve the unnormalized bounding boxes.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_pred_boxes` (`torch.FloatTensor`，形状为`(batch_size, num_patches, 4)`)
    — 所有查询的标准化框坐标，表示为（中心_x，中心_y，宽度，高度）。这些值在[0, 1]范围内标准化，相对于批处理中每个单独查询图像的大小（忽略可能的填充）。您可以使用[post_process_object_detection()](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ImageProcessor.post_process_object_detection)来检索未标准化的边界框。'
- en: '`image_embeds` (`torch.FloatTensor` of shape `(batch_size, patch_size, patch_size,
    output_dim`) — Pooled output of [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel).
    OWLv2 represents images as a set of image patches and computes image embeddings
    for each patch.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_embeds` (`torch.FloatTensor`，形状为`(batch_size, patch_size, patch_size,
    output_dim`) — [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)的汇总输出。OWLv2将图像表示为一组图像补丁，并为每个补丁计算图像嵌入。'
- en: '`query_image_embeds` (`torch.FloatTensor` of shape `(batch_size, patch_size,
    patch_size, output_dim`) — Pooled output of [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel).
    OWLv2 represents images as a set of image patches and computes image embeddings
    for each patch.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`query_image_embeds` (`torch.FloatTensor`，形状为`(batch_size, patch_size, patch_size,
    output_dim`) — [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)的汇总输出。OWLv2将图像表示为一组图像补丁，并为每个补丁计算图像嵌入。'
- en: '`class_embeds` (`torch.FloatTensor` of shape `(batch_size, num_patches, hidden_size)`)
    — Class embeddings of all image patches. OWLv2 represents images as a set of image
    patches where the total number of patches is (image_size / patch_size)**2.'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_embeds` (`torch.FloatTensor`，形状为`(batch_size, num_patches, hidden_size)`)
    — 所有图像补丁的类别嵌入。OWLv2将图像表示为一组图像补丁，其中补丁的总数为（图像大小/补丁大小）**2。'
- en: '`text_model_output` (Tuple`BaseModelOutputWithPooling`) — The output of the
    [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel).'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text_model_output` (Tuple`BaseModelOutputWithPooling`) — [Owlv2TextModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2TextModel)的输出。'
- en: '`vision_model_output` (`BaseModelOutputWithPooling`) — The output of the [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel).'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vision_model_output` (`BaseModelOutputWithPooling`) — [Owlv2VisionModel](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2VisionModel)的输出。'
- en: The [Owlv2ForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ForObjectDetection)
    forward method, overrides the `__call__` special method.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '[Owlv2ForObjectDetection](/docs/transformers/v4.37.2/en/model_doc/owlv2#transformers.Owlv2ForObjectDetection)的前向方法，覆盖了`__call__`特殊方法。'
- en: Although the recipe for forward pass needs to be defined within this function,
    one should call the `Module` instance afterwards instead of this since the former
    takes care of running the pre and post processing steps while the latter silently
    ignores them.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前向传递的配方需要在此函数内定义，但应该在之后调用`Module`实例，而不是在此处调用，因为前者负责运行预处理和后处理步骤，而后者会默默地忽略它们。
- en: 'Examples:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE33]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
