["```py\nfrom transformers import PretrainedConfig\nfrom typing import List\n\nclass ResnetConfig(PretrainedConfig):\n    model_type = \"resnet\"\n\n    def __init__( self,\n        block_type=\"bottleneck\",\n        layers: List[int] = [3, 4, 6, 3],\n        num_classes: int = 1000,\n        input_channels: int = 3,\n        cardinality: int = 1,\n        base_width: int = 64,\n        stem_width: int = 64,\n        stem_type: str = \"\",\n        avg_down: bool = False,\n        **kwargs, ):\n        if block_type not in [\"basic\", \"bottleneck\"]:\n            raise ValueError(f\"`block_type` must be 'basic' or bottleneck', got {block_type}.\")\n        if stem_type not in [\"\", \"deep\", \"deep-tiered\"]:\n            raise ValueError(f\"`stem_type` must be '', 'deep' or 'deep-tiered', got {stem_type}.\")\n\n        self.block_type = block_type\n        self.layers = layers\n        self.num_classes = num_classes\n        self.input_channels = input_channels\n        self.cardinality = cardinality\n        self.base_width = base_width\n        self.stem_width = stem_width\n        self.stem_type = stem_type\n        self.avg_down = avg_down\n        super().__init__(**kwargs)\n```", "```py\nresnet50d_config = ResnetConfig(block_type=\"bottleneck\", stem_width=32, stem_type=\"deep\", avg_down=True)\nresnet50d_config.save_pretrained(\"custom-resnet\")\n```", "```py\nresnet50d_config = ResnetConfig.from_pretrained(\"custom-resnet\")\n```", "```py\nfrom transformers import PreTrainedModel\nfrom timm.models.resnet import BasicBlock, Bottleneck, ResNet\nfrom .configuration_resnet import ResnetConfig\n\nBLOCK_MAPPING = {\"basic\": BasicBlock, \"bottleneck\": Bottleneck}\n\nclass ResnetModel(PreTrainedModel):\n    config_class = ResnetConfig\n\n    def __init__(self, config):\n        super().__init__(config)\n        block_layer = BLOCK_MAPPING[config.block_type]\n        self.model = ResNet(\n            block_layer,\n            config.layers,\n            num_classes=config.num_classes,\n            in_chans=config.input_channels,\n            cardinality=config.cardinality,\n            base_width=config.base_width,\n            stem_width=config.stem_width,\n            stem_type=config.stem_type,\n            avg_down=config.avg_down,\n        )\n\n    def forward(self, tensor):\n        return self.model.forward_features(tensor)\n```", "```py\nimport torch\n\nclass ResnetModelForImageClassification(PreTrainedModel):\n    config_class = ResnetConfig\n\n    def __init__(self, config):\n        super().__init__(config)\n        block_layer = BLOCK_MAPPING[config.block_type]\n        self.model = ResNet(\n            block_layer,\n            config.layers,\n            num_classes=config.num_classes,\n            in_chans=config.input_channels,\n            cardinality=config.cardinality,\n            base_width=config.base_width,\n            stem_width=config.stem_width,\n            stem_type=config.stem_type,\n            avg_down=config.avg_down,\n        )\n\n    def forward(self, tensor, labels=None):\n        logits = self.model(tensor)\n        if labels is not None:\n            loss = torch.nn.cross_entropy(logits, labels)\n            return {\"loss\": loss, \"logits\": logits}\n        return {\"logits\": logits}\n```", "```py\nresnet50d = ResnetModelForImageClassification(resnet50d_config)\n```", "```py\nimport timm\n\npretrained_model = timm.create_model(\"resnet50d\", pretrained=True)\nresnet50d.model.load_state_dict(pretrained_model.state_dict())\n```", "```py\nfrom transformers import AutoConfig, AutoModel, AutoModelForImageClassification\n\nAutoConfig.register(\"resnet\", ResnetConfig)\nAutoModel.register(ResnetConfig, ResnetModel)\nAutoModelForImageClassification.register(ResnetConfig, ResnetModelForImageClassification)\n```", "```py\n.\n\u2514\u2500\u2500 resnet_model\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 configuration_resnet.py\n    \u2514\u2500\u2500 modeling_resnet.py\n```", "```py\nfrom resnet_model.configuration_resnet import ResnetConfig\nfrom resnet_model.modeling_resnet import ResnetModel, ResnetModelForImageClassification\n```", "```py\nResnetConfig.register_for_auto_class()\nResnetModel.register_for_auto_class(\"AutoModel\")\nResnetModelForImageClassification.register_for_auto_class(\"AutoModelForImageClassification\")\n```", "```py\n\"auto_map\": {     \n\t\"AutoConfig\": \"<your-repo-name>--<config-name>\",     \n\t\"AutoModel\": \"<your-repo-name>--<config-name>\",\n\t\"AutoModelFor<Task>\": \"<your-repo-name>--<config-name>\",    \n},\n```", "```py\nresnet50d_config = ResnetConfig(block_type=\"bottleneck\", stem_width=32, stem_type=\"deep\", avg_down=True)\nresnet50d = ResnetModelForImageClassification(resnet50d_config)\n\npretrained_model = timm.create_model(\"resnet50d\", pretrained=True)\nresnet50d.model.load_state_dict(pretrained_model.state_dict())\n```", "```py\nhuggingface-cli login\n```", "```py\nfrom huggingface_hub import notebook_login\n\nnotebook_login()\n```", "```py\nresnet50d.push_to_hub(\"custom-resnet50d\")\n```", "```py\nfrom transformers import AutoModelForImageClassification\n\nmodel = AutoModelForImageClassification.from_pretrained(\"sgugger/custom-resnet50d\", trust_remote_code=True)\n```", "```py\ncommit_hash = \"ed94a7c6247d8aedce4647f00f20de6875b5b292\"\nmodel = AutoModelForImageClassification.from_pretrained(\n    \"sgugger/custom-resnet50d\", trust_remote_code=True, revision=commit_hash\n)\n```"]