- en: How to convert a ü§ó Transformers model to TensorFlow?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/transformers/v4.37.2/en/add_tensorflow_model](https://huggingface.co/docs/transformers/v4.37.2/en/add_tensorflow_model)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en:  
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: Having multiple frameworks available to use with ü§ó Transformers gives you flexibility
    to play their strengths when designing your application, but it implies that compatibility
    must be added on a per-model basis. The good news is that adding TensorFlow compatibility
    to an existing model is simpler than [adding a new model from scratch](add_new_model)!
    Whether you wish to have a deeper understanding of large TensorFlow models, make
    a major open-source contribution, or enable TensorFlow for your model of choice,
    this guide is for you.
  prefs: []
  type: TYPE_NORMAL
- en: This guide empowers you, a member of our community, to contribute TensorFlow
    model weights and/or architectures to be used in ü§ó Transformers, with minimal
    supervision from the Hugging Face team. Writing a new model is no small feat,
    but hopefully this guide will make it less of a rollercoaster üé¢ and more of a
    walk in the park üö∂. Harnessing our collective experiences is absolutely critical
    to make this process increasingly easier, and thus we highly encourage that you
    suggest improvements to this guide!
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you dive deeper, it is recommended that you check the following resources
    if you‚Äôre new to ü§ó Transformers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[General overview of ü§ó Transformers](add_new_model#general-overview-of-transformers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hugging Face‚Äôs TensorFlow Philosophy](https://huggingface.co/blog/tensorflow-philosophy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the remainder of this guide, you will learn what‚Äôs needed to add a new TensorFlow
    model architecture, the procedure to convert PyTorch into TensorFlow model weights,
    and how to efficiently debug mismatches across ML frameworks. Let‚Äôs get started!
  prefs: []
  type: TYPE_NORMAL
- en: Are you unsure whether the model you wish to use already has a corresponding
    TensorFlow architecture?
  prefs: []
  type: TYPE_NORMAL
- en: Check the `model_type` field of the `config.json` of your model of choice ([example](https://huggingface.co/bert-base-uncased/blob/main/config.json#L14)).
    If the corresponding model folder in ü§ó Transformers has a file whose name starts
    with ‚Äúmodeling_tf‚Äù, it means that it has a corresponding TensorFlow architecture
    ([example](https://github.com/huggingface/transformers/tree/main/src/transformers/models/bert)).
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step guide to add TensorFlow model architecture code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many ways to design a large model architecture, and multiple ways
    of implementing said design. However, you might recall from our [general overview
    of ü§ó Transformers](add_new_model#general-overview-of-transformers) that we are
    an opinionated bunch - the ease of use of ü§ó Transformers relies on consistent
    design choices. From experience, we can tell you a few important things about
    adding TensorFlow models:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Don‚Äôt reinvent the wheel! More often than not, there are at least two reference
    implementations you should check: the PyTorch equivalent of the model you are
    implementing and other TensorFlow models for the same class of problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great model implementations survive the test of time. This doesn‚Äôt happen because
    the code is pretty, but rather because the code is clear, easy to debug and build
    upon. If you make the life of the maintainers easy with your TensorFlow implementation,
    by replicating the same patterns as in other TensorFlow models and minimizing
    the mismatch to the PyTorch implementation, you ensure your contribution will
    be long lived.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask for help when you‚Äôre stuck! The ü§ó Transformers team is here to help, and
    we‚Äôve probably found solutions to the same problems you‚Äôre facing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here‚Äôs an overview of the steps needed to add a TensorFlow model architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the model you wish to convert
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare transformers dev environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (Optional) Understand theoretical aspects and the existing implementation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the model architecture
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement model tests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Submit the pull request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (Optional) Build demos and share with the world
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1.-3\. Prepare your model contribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**1\. Select the model you wish to convert**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs start off with the basics: the first thing you need to know is the architecture
    you want to convert. If you don‚Äôt have your eyes set on a specific architecture,
    asking the ü§ó Transformers team for suggestions is a great way to maximize your
    impact - we will guide you towards the most prominent architectures that are missing
    on the TensorFlow side. If the specific model you want to use with TensorFlow
    already has a TensorFlow architecture implementation in ü§ó Transformers but is
    lacking weights, feel free to jump straight into the [weight conversion section](#adding-tensorflow-weights-to-hub)
    of this page.'
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, the remainder of this guide assumes you‚Äôve decided to contribute
    with the TensorFlow version of *BrandNewBert* (the same example as in the [guide](add_new_model)
    to add a new model from scratch).
  prefs: []
  type: TYPE_NORMAL
- en: Before starting the work on a TensorFlow model architecture, double-check that
    there is no ongoing effort to do so. You can search for `BrandNewBert` on the
    [pull request GitHub page](https://github.com/huggingface/transformers/pulls?q=is%3Apr)
    to confirm that there is no TensorFlow-related pull request.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Prepare transformers dev environment**'
  prefs: []
  type: TYPE_NORMAL
- en: Having selected the model architecture, open a draft PR to signal your intention
    to work on it. Follow the instructions below to set up your environment and open
    a draft PR.
  prefs: []
  type: TYPE_NORMAL
- en: Fork the [repository](https://github.com/huggingface/transformers) by clicking
    on the ‚ÄòFork‚Äô button on the repository‚Äôs page. This creates a copy of the code
    under your GitHub user account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone your `transformers` fork to your local disk, and add the base repository
    as a remote:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up a development environment, for instance by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on your OS, and since the number of optional dependencies of Transformers
    is growing, you might get a failure with this command. If that‚Äôs the case make
    sure to install TensorFlow then do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** You don‚Äôt need to have CUDA installed. Making the new model work
    on CPU is sufficient.'
  prefs: []
  type: TYPE_NORMAL
- en: Create a branch with a descriptive name from your main branch
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Fetch and rebase to current main
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Add an empty `.py` file in `transformers/src/models/brandnewbert/` named `modeling_tf_brandnewbert.py`.
    This will be your TensorFlow model file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Push the changes to your account using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once you are satisfied, go to the webpage of your fork on GitHub. Click on ‚ÄúPull
    request‚Äù. Make sure to add the GitHub handle of some members of the Hugging Face
    team as reviewers, so that the Hugging Face team gets notified for future changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the PR into a draft by clicking on ‚ÄúConvert to draft‚Äù on the right of
    the GitHub pull request web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you have set up a development environment to port *BrandNewBert* to TensorFlow
    in ü§ó Transformers.
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. (Optional) Understand theoretical aspects and the existing implementation**'
  prefs: []
  type: TYPE_NORMAL
- en: You should take some time to read *BrandNewBert‚Äôs* paper, if such descriptive
    work exists. There might be large sections of the paper that are difficult to
    understand. If this is the case, this is fine - don‚Äôt worry! The goal is not to
    get a deep theoretical understanding of the paper, but to extract the necessary
    information required to effectively re-implement the model in ü§ó Transformers using
    TensorFlow. That being said, you don‚Äôt have to spend too much time on the theoretical
    aspects, but rather focus on the practical ones, namely the existing model documentation
    page (e.g. [model docs for BERT](model_doc/bert)).
  prefs: []
  type: TYPE_NORMAL
- en: After you‚Äôve grasped the basics of the models you are about to implement, it‚Äôs
    important to understand the existing implementation. This is a great chance to
    confirm that a working implementation matches your expectations for the model,
    as well as to foresee technical challenges on the TensorFlow side.
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs perfectly natural that you feel overwhelmed with the amount of information
    that you‚Äôve just absorbed. It is definitely not a requirement that you understand
    all facets of the model at this stage. Nevertheless, we highly encourage you to
    clear any pressing questions in our [forum](https://discuss.huggingface.co/).
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Model implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now it‚Äôs time to finally start coding. Our suggested starting point is the
    PyTorch file itself: copy the contents of `modeling_brand_new_bert.py` inside
    `src/transformers/models/brand_new_bert/` into `modeling_tf_brand_new_bert.py`.
    The goal of this section is to modify the file and update the import structure
    of ü§ó Transformers such that you can import `TFBrandNewBert` and `TFBrandNewBert.from_pretrained(model_repo,
    from_pt=True)` successfully loads a working TensorFlow *BrandNewBert* model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sadly, there is no prescription to convert a PyTorch model into TensorFlow.
    You can, however, follow our selection of tips to make the process as smooth as
    possible:'
  prefs: []
  type: TYPE_NORMAL
- en: Prepend `TF` to the name of all classes (e.g. `BrandNewBert` becomes `TFBrandNewBert`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most PyTorch operations have a direct TensorFlow replacement. For example, `torch.nn.Linear`
    corresponds to `tf.keras.layers.Dense`, `torch.nn.Dropout` corresponds to `tf.keras.layers.Dropout`,
    etc. If you‚Äôre not sure about a specific operation, you can use the [TensorFlow
    documentation](https://www.tensorflow.org/api_docs/python/tf) or the [PyTorch
    documentation](https://pytorch.org/docs/stable/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look for patterns in the ü§ó Transformers codebase. If you come across a certain
    operation that doesn‚Äôt have a direct replacement, the odds are that someone else
    already had the same problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, keep the same variable names and structure as in PyTorch. This will
    make it easier to debug, track issues, and add fixes down the line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some layers have different default values in each framework. A notable example
    is the batch normalization layer‚Äôs epsilon (`1e-5` in [PyTorch](https://pytorch.org/docs/stable/generated/torch.nn.BatchNorm2d.html#torch.nn.BatchNorm2d)
    and `1e-3` in [TensorFlow](https://www.tensorflow.org/api_docs/python/tf/keras/layers/BatchNormalization)).
    Double-check the documentation!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PyTorch‚Äôs `nn.Parameter` variables typically need to be initialized within
    TF Layer‚Äôs `build()`. See the following example: [PyTorch](https://github.com/huggingface/transformers/blob/655f72a6896c0533b1bdee519ed65a059c2425ac/src/transformers/models/vit_mae/modeling_vit_mae.py#L212)
    / [TensorFlow](https://github.com/huggingface/transformers/blob/655f72a6896c0533b1bdee519ed65a059c2425ac/src/transformers/models/vit_mae/modeling_tf_vit_mae.py#L220)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the PyTorch model has a `#copied from ...` on top of a function, the odds
    are that your TensorFlow model can also borrow that function from the architecture
    it was copied from, assuming it has a TensorFlow architecture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assigning the `name` attribute correctly in TensorFlow functions is critical
    to do the `from_pt=True` weight cross-loading. `name` is almost always the name
    of the corresponding variable in the PyTorch code. If `name` is not properly set,
    you will see it in the error message when loading the model weights.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The logic of the base model class, `BrandNewBertModel`, will actually reside
    in `TFBrandNewBertMainLayer`, a Keras layer subclass ([example](https://github.com/huggingface/transformers/blob/4fd32a1f499e45f009c2c0dea4d81c321cba7e02/src/transformers/models/bert/modeling_tf_bert.py#L719)).
    `TFBrandNewBertModel` will simply be a wrapper around this layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keras models need to be built in order to load pretrained weights. For that
    reason, `TFBrandNewBertPreTrainedModel` will need to hold an example of inputs
    to the model, the `dummy_inputs` ([example](https://github.com/huggingface/transformers/blob/4fd32a1f499e45f009c2c0dea4d81c321cba7e02/src/transformers/models/bert/modeling_tf_bert.py#L916)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you get stuck, ask for help - we‚Äôre here to help you! ü§ó
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to the model file itself, you will also need to add the pointers
    to the model classes and related documentation pages. You can complete this part
    entirely following the patterns in other PRs ([example](https://github.com/huggingface/transformers/pull/18020/files)).
    Here‚Äôs a list of the needed manual changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Include all public classes of *BrandNewBert* in `src/transformers/__init__.py`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add *BrandNewBert* classes to the corresponding Auto classes in `src/transformers/models/auto/modeling_tf_auto.py`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the lazy loading classes related to *BrandNewBert* in `src/transformers/utils/dummy_tf_objects.py`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the import structures for the public classes in `src/transformers/models/brand_new_bert/__init__.py`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the documentation pointers to the public methods of *BrandNewBert* in `docs/source/en/model_doc/brand_new_bert.md`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add yourself to the list of contributors to *BrandNewBert* in `docs/source/en/model_doc/brand_new_bert.md`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, add a green tick ‚úÖ to the TensorFlow column of *BrandNewBert* in `docs/source/en/index.md`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you‚Äôre happy with your implementation, run the following checklist to
    confirm that your model architecture is ready:'
  prefs: []
  type: TYPE_NORMAL
- en: All layers that behave differently at train time (e.g. Dropout) are called with
    a `training` argument, which is propagated all the way from the top-level classes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have used `#copied from ...` whenever possible
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TFBrandNewBertMainLayer` and all classes that use it have their `call` function
    decorated with `@unpack_inputs`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TFBrandNewBertMainLayer` is decorated with `@keras_serializable`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A TensorFlow model can be loaded from PyTorch weights using `TFBrandNewBert.from_pretrained(model_repo,
    from_pt=True)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can call the TensorFlow model using the expected input format
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 5\. Add model tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hurray, you‚Äôve implemented a TensorFlow model! Now it‚Äôs time to add tests to
    make sure that your model behaves as expected. As in the previous section, we
    suggest you start by copying the `test_modeling_brand_new_bert.py` file in `tests/models/brand_new_bert/`
    into `test_modeling_tf_brand_new_bert.py`, and continue by making the necessary
    TensorFlow replacements. For now, in all `.from_pretrained()` calls, you should
    use the `from_pt=True` flag to load the existing PyTorch weights.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you‚Äôre done, it‚Äôs time for the moment of truth: run the tests! üò¨'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The most likely outcome is that you‚Äôll see a bunch of errors. Don‚Äôt worry, this
    is expected! Debugging ML models is notoriously hard, and the key ingredient to
    success is patience (and `breakpoint()`). In our experience, the hardest problems
    arise from subtle mismatches between ML frameworks, for which we have a few pointers
    at the end of this guide. In other cases, a general test might not be directly
    applicable to your model, in which case we suggest an override at the model test
    class level. Regardless of the issue, don‚Äôt hesitate to ask for help in your draft
    pull request if you‚Äôre stuck.
  prefs: []
  type: TYPE_NORMAL
- en: When all tests pass, congratulations, your model is nearly ready to be added
    to the ü§ó Transformers library! üéâ
  prefs: []
  type: TYPE_NORMAL
- en: 6.-7\. Ensure everyone can use your model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**6\. Submit the pull request**'
  prefs: []
  type: TYPE_NORMAL
- en: Once you‚Äôre done with the implementation and the tests, it‚Äôs time to submit
    a pull request. Before pushing your code, run our code formatting utility, `make
    fixup` ü™Ñ. This will automatically fix any formatting issues, which would cause
    our automatic checks to fail.
  prefs: []
  type: TYPE_NORMAL
- en: It‚Äôs now time to convert your draft pull request into a real pull request. To
    do so, click on the ‚ÄúReady for review‚Äù button and add Joao (`@gante`) and Matt
    (`@Rocketknight1`) as reviewers. A model pull request will need at least 3 reviewers,
    but they will take care of finding appropriate additional reviewers for your model.
  prefs: []
  type: TYPE_NORMAL
- en: After all reviewers are happy with the state of your PR, the final action point
    is to remove the `from_pt=True` flag in `.from_pretrained()` calls. Since there
    are no TensorFlow weights, you will have to add them! Check the section below
    for instructions on how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when the TensorFlow weights get merged, you have at least 3 reviewer
    approvals, and all CI checks are green, double-check the tests locally one last
    time
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: and we will merge your PR! Congratulations on the milestone üéâ
  prefs: []
  type: TYPE_NORMAL
- en: '**7\. (Optional) Build demos and share with the world**'
  prefs: []
  type: TYPE_NORMAL
- en: One of the hardest parts about open-source is discovery. How can the other users
    learn about the existence of your fabulous TensorFlow contribution? With proper
    communication, of course! üì£
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main ways to share your model with the community:'
  prefs: []
  type: TYPE_NORMAL
- en: Build demos. These include Gradio demos, notebooks, and other fun ways to show
    off your model. We highly encourage you to add a notebook to our [community-driven
    demos](https://huggingface.co/docs/transformers/community).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share stories on social media like Twitter and LinkedIn. You should be proud
    of your work and share your achievement with the community - your model can now
    be used by thousands of engineers and researchers around the world üåç! We will
    be happy to retweet your posts and help you share your work with the community.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding TensorFlow weights to ü§ó Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assuming that the TensorFlow model architecture is available in ü§ó Transformers,
    converting PyTorch weights into TensorFlow weights is a breeze!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here‚Äôs how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you are logged into your Hugging Face account in your terminal. You
    can log in using the command `huggingface-cli login` (you can find your access
    tokens [here](https://huggingface.co/settings/tokens))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `transformers-cli pt-to-tf --model-name foo/bar`, where `foo/bar` is the
    name of the model repository containing the PyTorch weights you want to convert
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tag `@joaogante` and `@Rocketknight1` in the ü§ó Hub PR the command above has
    just created
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That‚Äôs it! üéâ
  prefs: []
  type: TYPE_NORMAL
- en: Debugging mismatches across ML frameworks üêõ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At some point, when adding a new architecture or when creating TensorFlow weights
    for an existing architecture, you might come across errors complaining about mismatches
    between PyTorch and TensorFlow. You might even decide to open the model architecture
    code for the two frameworks, and find that they look identical. What‚Äôs going on?
    ü§î
  prefs: []
  type: TYPE_NORMAL
- en: First of all, let‚Äôs talk about why understanding these mismatches matters. Many
    community members will use ü§ó Transformers models out of the box, and trust that
    our models behave as expected. When there is a large mismatch between the two
    frameworks, it implies that the model is not following the reference implementation
    for at least one of the frameworks. This might lead to silent failures, in which
    the model runs but has poor performance. This is arguably worse than a model that
    fails to run at all! To that end, we aim at having a framework mismatch smaller
    than `1e-5` at all stages of the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'As in other numerical problems, the devil is in the details. And as in any
    detail-oriented craft, the secret ingredient here is patience. Here is our suggested
    workflow for when you come across this type of issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the source of mismatches. The model you‚Äôre converting probably has near
    identical inner variables up to a certain point. Place `breakpoint()` statements
    in the two frameworks‚Äô architectures, and compare the values of the numerical
    variables in a top-down fashion until you find the source of the problems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you‚Äôve pinpointed the source of the issue, get in touch with the ü§ó
    Transformers team. It is possible that we‚Äôve seen a similar problem before and
    can promptly provide a solution. As a fallback, scan popular pages like StackOverflow
    and GitHub issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there is no solution in sight, it means you‚Äôll have to go deeper. The good
    news is that you‚Äôve located the issue, so you can focus on the problematic instruction,
    abstracting away the rest of the model! The bad news is that you‚Äôll have to venture
    into the source implementation of said instruction. In some cases, you might find
    an issue with a reference implementation - don‚Äôt abstain from opening an issue
    in the upstream repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In some cases, in discussion with the ü§ó Transformers team, we might find that
    fixing the mismatch is infeasible. When the mismatch is very small in the output
    layers of the model (but potentially large in the hidden states), we might decide
    to ignore it in favor of distributing the model. The `pt-to-tf` CLI mentioned
    above has a `--max-error` flag to override the error message at weight conversion
    time.
  prefs: []
  type: TYPE_NORMAL
