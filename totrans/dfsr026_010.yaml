- en: Train a diffusion model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://huggingface.co/docs/diffusers/tutorials/basic_training](https://huggingface.co/docs/diffusers/tutorials/basic_training)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: <link href="/docs/diffusers/v0.26.3/en/_app/immutable/assets/0.e3b0c442.css"
    rel="modulepreload"> <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/start.99629b4a.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/scheduler.182ea377.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/singletons.fade7992.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.1f6d62f6.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/paths.108a236d.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/entry/app.2b3eaeb0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/index.abf12888.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/0.3862a335.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/each.e59479a4.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/nodes/153.dbea10b0.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Tip.230e2334.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/CodeBlock.57fe6e13.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/DocNotebookDropdown.5fa27ace.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/globals.7f7f1b26.js">
    <link rel="modulepreload" href="/docs/diffusers/v0.26.3/en/_app/immutable/chunks/Heading.16916d63.js">
  prefs: []
  type: TYPE_NORMAL
- en: Unconditional image generation is a popular application of diffusion models
    that generates images that look like those in the dataset used for training. Typically,
    the best results are obtained from finetuning a pretrained model on a specific
    dataset. You can find many of these checkpoints on the [Hub](https://huggingface.co/search/full-text?q=unconditional-image-generation&type=model),
    but if you canâ€™t find one you like, you can always train your own!
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial will teach you how to train a [UNet2DModel](/docs/diffusers/v0.26.3/en/api/models/unet2d#diffusers.UNet2DModel)
    from scratch on a subset of the [Smithsonian Butterflies](https://huggingface.co/datasets/huggan/smithsonian_butterflies_subset)
    dataset to generate your own ðŸ¦‹ butterflies ðŸ¦‹.
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ’¡ This training tutorial is based on the [Training with ðŸ§¨ Diffusers](https://colab.research.google.com/github/huggingface/notebooks/blob/main/diffusers/training_example.ipynb)
    notebook. For additional details and context about diffusion models like how they
    work, check out the notebook!
  prefs: []
  type: TYPE_NORMAL
- en: Before you begin, make sure you have ðŸ¤— Datasets installed to load and preprocess
    image datasets, and ðŸ¤— Accelerate, to simplify training on any number of GPUs.
    The following command will also install [TensorBoard](https://www.tensorflow.org/tensorboard)
    to visualize training metrics (you can also use [Weights & Biases](https://docs.wandb.ai/)
    to track your training).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We encourage you to share your model with the community, and in order to do
    that, youâ€™ll need to login to your Hugging Face account (create one [here](https://hf.co/join)
    if you donâ€™t already have one!). You can login from a notebook and enter your
    token when prompted. Make sure your token has the write role.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or login in from the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the model checkpoints are quite large, install [Git-LFS](https://git-lfs.com/)
    to version these large files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Training configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For convenience, create a `TrainingConfig` class containing the training hyperparameters
    (feel free to adjust them):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Load the dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can easily load the [Smithsonian Butterflies](https://huggingface.co/datasets/huggan/smithsonian_butterflies_subset)
    dataset with the ðŸ¤— Datasets library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: ðŸ’¡ You can find additional datasets from the [HugGan Community Event](https://huggingface.co/huggan)
    or you can use your own dataset by creating a local [`ImageFolder`](https://huggingface.co/docs/datasets/image_dataset#imagefolder).
    Set `config.dataset_name` to the repository id of the dataset if it is from the
    HugGan Community Event, or `imagefolder` if youâ€™re using your own images.
  prefs: []
  type: TYPE_NORMAL
- en: 'ðŸ¤— Datasets uses the [Image](https://huggingface.co/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Image)
    feature to automatically decode the image data and load it as a [`PIL.Image`](https://pillow.readthedocs.io/en/stable/reference/Image.html)
    which we can visualize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a492ec80a6f208c57e9bd240df33193d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The images are all different sizes though, so youâ€™ll need to preprocess them
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Resize` changes the image size to the one defined in `config.image_size`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RandomHorizontalFlip` augments the dataset by randomly mirroring the images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Normalize` is important to rescale the pixel values into a [-1, 1] range,
    which is what the model expects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Use ðŸ¤— Datasetsâ€™ [set_transform](https://huggingface.co/docs/datasets/v2.17.0/en/package_reference/main_classes#datasets.Dataset.set_transform)
    method to apply the `preprocess` function on the fly during training:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to visualize the images again to confirm that theyâ€™ve been resized.
    Now youâ€™re ready to wrap the dataset in a [DataLoader](https://pytorch.org/docs/stable/data#torch.utils.data.DataLoader)
    for training!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Create a UNet2DModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pretrained models in ðŸ§¨ Diffusers are easily created from their model class
    with the parameters you want. For example, to create a [UNet2DModel](/docs/diffusers/v0.26.3/en/api/models/unet2d#diffusers.UNet2DModel):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It is often a good idea to quickly check the sample image shape matches the
    model output shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Great! Next, youâ€™ll need a scheduler to add some noise to the image.
  prefs: []
  type: TYPE_NORMAL
- en: Create a scheduler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scheduler behaves differently depending on whether youâ€™re using the model
    for training or inference. During inference, the scheduler generates image from
    the noise. During training, the scheduler takes a model output - or a sample -
    from a specific point in the diffusion process and applies noise to the image
    according to a *noise schedule* and an *update rule*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s take a look at the [DDPMScheduler](/docs/diffusers/v0.26.3/en/api/schedulers/ddpm#diffusers.DDPMScheduler)
    and use the `add_noise` method to add some random noise to the `sample_image`
    from before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9c3cadba02429fff4abe5f63e4e8c1d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The training objective of the model is to predict the noise added to the image.
    The loss at this step can be calculated by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Train the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By now, you have most of the pieces to start training the model and all thatâ€™s
    left is putting everything together.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, youâ€™ll need an optimizer and a learning rate scheduler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, youâ€™ll need a way to evaluate the model. For evaluation, you can use
    the [DDPMPipeline](/docs/diffusers/v0.26.3/en/api/pipelines/ddpm#diffusers.DDPMPipeline)
    to generate a batch of sample images and save it as a grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now you can wrap all these components together in a training loop with ðŸ¤— Accelerate
    for easy TensorBoard logging, gradient accumulation, and mixed precision training.
    To upload the model to the Hub, write a function to get your repository name and
    information and then push it to the Hub.
  prefs: []
  type: TYPE_NORMAL
- en: ðŸ’¡ The training loop below may look intimidating and long, but itâ€™ll be worth
    it later when you launch your training in just one line of code! If you canâ€™t
    wait and want to start generating images, feel free to copy and run the code below.
    You can always come back and examine the training loop more closely later, like
    when youâ€™re waiting for your model to finish training. ðŸ¤—
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Phew, that was quite a bit of code! But youâ€™re finally ready to launch the
    training with ðŸ¤— Accelerateâ€™s [notebook_launcher](https://huggingface.co/docs/accelerate/v0.27.0/en/package_reference/launchers#accelerate.notebook_launcher)
    function. Pass the function the training loop, all the training arguments, and
    the number of processes (you can change this value to the number of GPUs available
    to you) to use for training:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Once training is complete, take a look at the final ðŸ¦‹ images ðŸ¦‹ generated by
    your diffusion model!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3c1b49414fd4ace41217daf06b50b326.png)'
  prefs: []
  type: TYPE_IMG
- en: Next steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unconditional image generation is one example of a task that can be trained.
    You can explore other tasks and training techniques by visiting the [ðŸ§¨ Diffusers
    Training Examples](../training/overview) page. Here are some examples of what
    you can learn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Textual Inversion](../training/text_inversion), an algorithm that teaches
    a model a specific visual concept and integrates it into the generated image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DreamBooth](../training/dreambooth), a technique for generating personalized
    images of a subject given several input images of the subject.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Guide](../training/text2image) to finetuning a Stable Diffusion model on your
    own dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Guide](../training/lora) to using LoRA, a memory-efficient technique for finetuning
    really large models faster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
