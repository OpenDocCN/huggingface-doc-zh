- en: Quickstart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Original text: [https://huggingface.co/docs/timm/quickstart](https://huggingface.co/docs/timm/quickstart)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 
    
    
    
    
    
    
    
    
    
    
    
    
  prefs: []
  type: TYPE_NORMAL
- en: This quickstart is intended for developers who are ready to dive into the code
    and see an example of how to integrate `timm` into their model training workflow.
  prefs: []
  type: TYPE_NORMAL
- en: First, you’ll need to install `timm`. For more information on installation,
    see [Installation](installation).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Load a Pretrained Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pretrained models can be loaded using [create_model()](/docs/timm/v0.9.12/en/reference/models#timm.create_model).
  prefs: []
  type: TYPE_NORMAL
- en: Here, we load the pretrained `mobilenetv3_large_100` model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: The returned PyTorch model is set to train mode by default, so you must
    call .eval() on it if you plan to use it for inference.'
  prefs: []
  type: TYPE_NORMAL
- en: List Models with Pretrained Weights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To list models packaged with `timm`, you can use [list_models()](/docs/timm/v0.9.12/en/reference/models#timm.list_models).
    If you specify `pretrained=True`, this function will only return model names that
    have associated pretrained weights available.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can also list models with a specific pattern in their name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Fine-Tune a Pretrained Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can finetune any of the pre-trained models just by changing the classifier
    (the last layer).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To fine-tune on your own dataset, you have to write a PyTorch training loop
    or adapt `timm`’s [training script](training_script) to use your dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Use a Pretrained Model for Feature Extraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without modifying the network, one can call model.forward_features(input) on
    any model instead of the usual model(input). This will bypass the head classifier
    and global pooling for networks.
  prefs: []
  type: TYPE_NORMAL
- en: For a more in depth guide to using `timm` for feature extraction, see [Feature
    Extraction](feature_extraction).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Image Augmentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To transform images into valid inputs for a model, you can use [timm.data.create_transform()](/docs/timm/v0.9.12/en/reference/data#timm.data.create_transform),
    providing the desired `input_size` that the model expects.
  prefs: []
  type: TYPE_NORMAL
- en: This will return a generic transform that uses reasonable defaults.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Pretrained models have specific transforms that were applied to images fed into
    them while training. If you use the wrong transform on your image, the model won’t
    understand what it’s seeing!
  prefs: []
  type: TYPE_NORMAL
- en: To figure out which transformations were used for a given pretrained model,
    we can start by taking a look at its `pretrained_cfg`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We can then resolve only the data related configuration by using [timm.data.resolve_data_config()](/docs/timm/v0.9.12/en/reference/data#timm.data.resolve_data_config).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can pass this data config to [timm.data.create_transform()](/docs/timm/v0.9.12/en/reference/data#timm.data.create_transform)
    to initialize the model’s associated transform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: Here, the pretrained model''s config happens to be the same as the generic
    config we made earlier. This is not always the case. So, it''s safer to use the
    data config to create the transform as we did here instead of using the generic
    transform.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Pretrained Models for Inference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we will put together the above sections and use a pretrained model for
    inference.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we’ll need an image to do inference on. Here we load a picture of a leaf
    from the web:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the image we loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![An Image from a link](../Images/044552025856bd5e75f92f37bef155ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we’ll create our model and transforms again. This time, we make sure to
    set our model in evaluation mode.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We can prepare this image for the model by passing it to the transform.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now we can pass that image to the model to get the predictions. We use `unsqueeze(0)`
    in this case, as the model is expecting a batch dimension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To get the predicted probabilities, we apply softmax to the output. This leaves
    us with a tensor of shape `(num_classes,)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now we’ll find the top 5 predicted class indexes and values using `torch.topk`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If we check the imagenet labels for the top index, we can see what the model
    predicted…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
