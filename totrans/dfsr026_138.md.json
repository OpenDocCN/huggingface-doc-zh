["```py\n( unet scheduler )\n```", "```py\n( batch_size: int = 1 num_inference_steps: int = 100 generator: Union = None audio_length_in_s: Optional = None return_dict: bool = True ) \u2192 export const metadata = 'undefined';AudioPipelineOutput or tuple\n```", "```py\nfrom diffusers import DiffusionPipeline\nfrom scipy.io.wavfile import write\n\nmodel_id = \"harmonai/maestro-150k\"\npipe = DiffusionPipeline.from_pretrained(model_id)\npipe = pipe.to(\"cuda\")\n\naudios = pipe(audio_length_in_s=4.0).audios\n\n# To save locally\nfor i, audio in enumerate(audios):\n    write(f\"maestro_test_{i}.wav\", pipe.unet.sample_rate, audio.transpose())\n\n# To dislay in google colab\nimport IPython.display as ipd\n\nfor audio in audios:\n    display(ipd.Audio(audio, rate=pipe.unet.sample_rate))\n```", "```py\n( audios: ndarray )\n```"]